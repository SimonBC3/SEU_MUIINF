
SEU_EN2_SBC_54016341J.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009e90  08009e90  00019e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3cc  0800a3cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d4  0800a3d4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000148cc  200001e4  0800a5c0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014ab0  0800a5c0  00024ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171e9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003668  00000000  00000000  000373fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0003aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  0003bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ada  00000000  00000000  0003cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b3e  00000000  00000000  000566fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ddda  00000000  00000000  0006b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005848  00000000  00000000  00109064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e78 	.word	0x08009e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009e78 	.word	0x08009e78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <put_leds>:
uint32_t tempInit = 0;
float initTempValue = 0;
float trigger = 0;

void put_leds(uint8_t dato)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]

	if (dato & 0x01)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <put_leds+0x20>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4845      	ldr	r0, [pc, #276]	; (800108c <put_leds+0x130>)
 8000f76:	f002 fb9b 	bl	80036b0 <HAL_GPIO_WritePin>
 8000f7a:	e004      	b.n	8000f86 <put_leds+0x2a>
	else
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4842      	ldr	r0, [pc, #264]	; (800108c <put_leds+0x130>)
 8000f82:	f002 fb95 	bl	80036b0 <HAL_GPIO_WritePin>

	if (dato & 0x02)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <put_leds+0x42>
		HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f96:	483d      	ldr	r0, [pc, #244]	; (800108c <put_leds+0x130>)
 8000f98:	f002 fb8a 	bl	80036b0 <HAL_GPIO_WritePin>
 8000f9c:	e005      	b.n	8000faa <put_leds+0x4e>
	else
		HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	4839      	ldr	r0, [pc, #228]	; (800108c <put_leds+0x130>)
 8000fa6:	f002 fb83 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato & 0x04)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <put_leds+0x66>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	4835      	ldr	r0, [pc, #212]	; (8001090 <put_leds+0x134>)
 8000fbc:	f002 fb78 	bl	80036b0 <HAL_GPIO_WritePin>
 8000fc0:	e005      	b.n	8000fce <put_leds+0x72>
	else
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	4831      	ldr	r0, [pc, #196]	; (8001090 <put_leds+0x134>)
 8000fca:	f002 fb71 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato & 0x08)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <put_leds+0x88>
		HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	482b      	ldr	r0, [pc, #172]	; (800108c <put_leds+0x130>)
 8000fde:	f002 fb67 	bl	80036b0 <HAL_GPIO_WritePin>
 8000fe2:	e004      	b.n	8000fee <put_leds+0x92>
	else
		HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4828      	ldr	r0, [pc, #160]	; (800108c <put_leds+0x130>)
 8000fea:	f002 fb61 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato & 0x10)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <put_leds+0xa8>
		HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4823      	ldr	r0, [pc, #140]	; (800108c <put_leds+0x130>)
 8000ffe:	f002 fb57 	bl	80036b0 <HAL_GPIO_WritePin>
 8001002:	e004      	b.n	800100e <put_leds+0xb2>
	else
		HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <put_leds+0x130>)
 800100a:	f002 fb51 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato & 0x20)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <put_leds+0xc8>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	481c      	ldr	r0, [pc, #112]	; (8001090 <put_leds+0x134>)
 800101e:	f002 fb47 	bl	80036b0 <HAL_GPIO_WritePin>
 8001022:	e004      	b.n	800102e <put_leds+0xd2>
	else
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4819      	ldr	r0, [pc, #100]	; (8001090 <put_leds+0x134>)
 800102a:	f002 fb41 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato & 0x40)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <put_leds+0xe8>
		HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <put_leds+0x130>)
 800103e:	f002 fb37 	bl	80036b0 <HAL_GPIO_WritePin>
 8001042:	e004      	b.n	800104e <put_leds+0xf2>
	else
		HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <put_leds+0x130>)
 800104a:	f002 fb31 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato & 0x80)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da05      	bge.n	8001062 <put_leds+0x106>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <put_leds+0x134>)
 800105c:	f002 fb28 	bl	80036b0 <HAL_GPIO_WritePin>
 8001060:	e004      	b.n	800106c <put_leds+0x110>
	else
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <put_leds+0x134>)
 8001068:	f002 fb22 	bl	80036b0 <HAL_GPIO_WritePin>
	if (dato == 0)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <put_leds+0x126>
	{
		put_leds(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff72 	bl	8000f5c <put_leds>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <put_leds+0x130>)
 800107e:	f002 fb17 	bl	80036b0 <HAL_GPIO_WritePin>
	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400
 8001090:	40020000 	.word	0x40020000

08001094 <ConvertidorA_D>:
		put_leds(255);
	}
}

uint32_t ConvertidorA_D(uint8_t channel)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	uint32_t valueAD;
	ADC_ChannelConfTypeDef sConfig;
	switch (channel)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d014      	beq.n	80010ce <ConvertidorA_D+0x3a>
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	dc19      	bgt.n	80010dc <ConvertidorA_D+0x48>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <ConvertidorA_D+0x1e>
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d007      	beq.n	80010c0 <ConvertidorA_D+0x2c>
 80010b0:	e014      	b.n	80010dc <ConvertidorA_D+0x48>
	{
	case 0:
		// sensor de luz
		sConfig.Channel = ADC_CHANNEL_0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
		break;
 80010be:	e00d      	b.n	80010dc <ConvertidorA_D+0x48>
	case 1:
		// sensor de temp
		sConfig.Channel = ADC_CHANNEL_1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
		break;
 80010cc:	e006      	b.n	80010dc <ConvertidorA_D+0x48>
	case 4:
		// POT
		sConfig.Channel = ADC_CHANNEL_4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
		break;
 80010da:	bf00      	nop
	}
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <ConvertidorA_D+0x78>)
 80010e4:	f001 fb1e 	bl	8002724 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <ConvertidorA_D+0x78>)
 80010ea:	f001 f9cf 	bl	800248c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10000);
 80010ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <ConvertidorA_D+0x78>)
 80010f4:	f001 fa7e 	bl	80025f4 <HAL_ADC_PollForConversion>
	valueAD = HAL_ADC_GetValue(&hadc1);
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <ConvertidorA_D+0x78>)
 80010fa:	f001 fb06 	bl	800270a <HAL_ADC_GetValue>
 80010fe:	61f8      	str	r0, [r7, #28]
	return valueAD;
 8001100:	69fb      	ldr	r3, [r7, #28]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000218 	.word	0x20000218

08001110 <checkSensorChange>:

int checkSensorChange()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	GPIO_PinState leftButtonCurrentState = HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin);
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <checkSensorChange+0x64>)
 800111a:	f002 fab1 	bl	8003680 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	if (leftButtonState != leftButtonCurrentState && leftButtonCurrentState == GPIO_PIN_RESET)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <checkSensorChange+0x68>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	429a      	cmp	r2, r3
 800112a:	d005      	beq.n	8001138 <checkSensorChange+0x28>
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <checkSensorChange+0x28>
	{
		leftButtonState = GPIO_PIN_RESET;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <checkSensorChange+0x68>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
	}

	if (leftButtonState != leftButtonCurrentState && leftButtonCurrentState == GPIO_PIN_SET)
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <checkSensorChange+0x68>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	429a      	cmp	r2, r3
 8001140:	d013      	beq.n	800116a <checkSensorChange+0x5a>
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d110      	bne.n	800116a <checkSensorChange+0x5a>
	{
		leftButtonState = GPIO_PIN_SET;
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <checkSensorChange+0x68>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
		if (sensorValue == 0)
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <checkSensorChange+0x6c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <checkSensorChange+0x50>
		{
			printf("changing to NTC\r\n");
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <checkSensorChange+0x70>)
 8001158:	f007 f818 	bl	800818c <puts>
			return 1;
 800115c:	2301      	movs	r3, #1
 800115e:	e004      	b.n	800116a <checkSensorChange+0x5a>
		}
		else
		{
			printf("changing to LDR\r\n");
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <checkSensorChange+0x74>)
 8001162:	f007 f813 	bl	800818c <puts>
			return 0;
 8001166:	2300      	movs	r3, #0
 8001168:	e7ff      	b.n	800116a <checkSensorChange+0x5a>
		}
	}
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020400 	.word	0x40020400
 8001178:	20000000 	.word	0x20000000
 800117c:	20000200 	.word	0x20000200
 8001180:	08009e90 	.word	0x08009e90
 8001184:	08009ea4 	.word	0x08009ea4

08001188 <setOffAlarm>:

void setOffAlarm(float value, float trigger)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001192:	edc7 0a00 	vstr	s1, [r7]
	if (value > trigger)
 8001196:	ed97 7a01 	vldr	s14, [r7, #4]
 800119a:	edd7 7a00 	vldr	s15, [r7]
 800119e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	dd05      	ble.n	80011b4 <setOffAlarm+0x2c>
	{
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <setOffAlarm+0x40>)
 80011ae:	f002 fa7f 	bl	80036b0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 80011b2:	e004      	b.n	80011be <setOffAlarm+0x36>
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <setOffAlarm+0x40>)
 80011ba:	f002 fa79 	bl	80036b0 <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020000 	.word	0x40020000

080011cc <turnOnLedsLight>:

void turnOnLedsLight(float value)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	ed87 0a01 	vstr	s0, [r7, #4]
	float div = 3.3 / 8;
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <turnOnLedsLight+0x100>)
 80011d8:	60fb      	str	r3, [r7, #12]
	if (value <= div)
 80011da:	ed97 7a01 	vldr	s14, [r7, #4]
 80011de:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d803      	bhi.n	80011f4 <turnOnLedsLight+0x28>
	{
		put_leds(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff feb5 	bl	8000f5c <put_leds>
	}
	else
	{
		put_leds(255);
	}
}
 80011f2:	e066      	b.n	80012c2 <turnOnLedsLight+0xf6>
	else if (value <= div * 2)
 80011f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d803      	bhi.n	8001212 <turnOnLedsLight+0x46>
		put_leds(3);
 800120a:	2003      	movs	r0, #3
 800120c:	f7ff fea6 	bl	8000f5c <put_leds>
}
 8001210:	e057      	b.n	80012c2 <turnOnLedsLight+0xf6>
	else if (value <= div * 3)
 8001212:	edd7 7a03 	vldr	s15, [r7, #12]
 8001216:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d803      	bhi.n	8001234 <turnOnLedsLight+0x68>
		put_leds(7);
 800122c:	2007      	movs	r0, #7
 800122e:	f7ff fe95 	bl	8000f5c <put_leds>
}
 8001232:	e046      	b.n	80012c2 <turnOnLedsLight+0xf6>
	else if (value <= div * 4)
 8001234:	edd7 7a03 	vldr	s15, [r7, #12]
 8001238:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	ed97 7a01 	vldr	s14, [r7, #4]
 8001244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d803      	bhi.n	8001256 <turnOnLedsLight+0x8a>
		put_leds(15);
 800124e:	200f      	movs	r0, #15
 8001250:	f7ff fe84 	bl	8000f5c <put_leds>
}
 8001254:	e035      	b.n	80012c2 <turnOnLedsLight+0xf6>
	else if (value <= div * 5)
 8001256:	edd7 7a03 	vldr	s15, [r7, #12]
 800125a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	ed97 7a01 	vldr	s14, [r7, #4]
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	d803      	bhi.n	8001278 <turnOnLedsLight+0xac>
		put_leds(31);
 8001270:	201f      	movs	r0, #31
 8001272:	f7ff fe73 	bl	8000f5c <put_leds>
}
 8001276:	e024      	b.n	80012c2 <turnOnLedsLight+0xf6>
	else if (value <= div * 6)
 8001278:	edd7 7a03 	vldr	s15, [r7, #12]
 800127c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	ed97 7a01 	vldr	s14, [r7, #4]
 8001288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d803      	bhi.n	800129a <turnOnLedsLight+0xce>
		put_leds(63);
 8001292:	203f      	movs	r0, #63	; 0x3f
 8001294:	f7ff fe62 	bl	8000f5c <put_leds>
}
 8001298:	e013      	b.n	80012c2 <turnOnLedsLight+0xf6>
	else if (value <= div * 7)
 800129a:	edd7 7a03 	vldr	s15, [r7, #12]
 800129e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80012aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d803      	bhi.n	80012bc <turnOnLedsLight+0xf0>
		put_leds(127);
 80012b4:	207f      	movs	r0, #127	; 0x7f
 80012b6:	f7ff fe51 	bl	8000f5c <put_leds>
}
 80012ba:	e002      	b.n	80012c2 <turnOnLedsLight+0xf6>
		put_leds(255);
 80012bc:	20ff      	movs	r0, #255	; 0xff
 80012be:	f7ff fe4d 	bl	8000f5c <put_leds>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	3ed33333 	.word	0x3ed33333

080012d0 <turnOnLedsTemp>:

void turnOnLedsTemp(float initValue, float currentValue)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012da:	edc7 0a00 	vstr	s1, [r7]
	float div = 0.04;
 80012de:	4b53      	ldr	r3, [pc, #332]	; (800142c <turnOnLedsTemp+0x15c>)
 80012e0:	60fb      	str	r3, [r7, #12]
	printf(" div value %.2f\n", (initValue + (div * 2)));
 80012e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	ee17 0a90 	vmov	r0, s15
 80012f6:	f7ff f92f 	bl	8000558 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	484c      	ldr	r0, [pc, #304]	; (8001430 <turnOnLedsTemp+0x160>)
 8001300:	f006 febe 	bl	8008080 <iprintf>
	if (currentValue <= (initValue + div))
 8001304:	ed97 7a01 	vldr	s14, [r7, #4]
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001310:	ed97 7a00 	vldr	s14, [r7]
 8001314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d803      	bhi.n	8001326 <turnOnLedsTemp+0x56>
	{
		put_leds(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fe1c 	bl	8000f5c <put_leds>
	}
	else
	{
		put_leds(255);
	}
}
 8001324:	e07e      	b.n	8001424 <turnOnLedsTemp+0x154>
	else if (currentValue <= (initValue + (div * 2)))
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800132e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001336:	ed97 7a00 	vldr	s14, [r7]
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d803      	bhi.n	800134c <turnOnLedsTemp+0x7c>
		put_leds(3);
 8001344:	2003      	movs	r0, #3
 8001346:	f7ff fe09 	bl	8000f5c <put_leds>
}
 800134a:	e06b      	b.n	8001424 <turnOnLedsTemp+0x154>
	else if (currentValue <= (initValue + (div * 3)))
 800134c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001350:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001358:	edd7 7a01 	vldr	s15, [r7, #4]
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	ed97 7a00 	vldr	s14, [r7]
 8001364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136c:	d803      	bhi.n	8001376 <turnOnLedsTemp+0xa6>
		put_leds(7);
 800136e:	2007      	movs	r0, #7
 8001370:	f7ff fdf4 	bl	8000f5c <put_leds>
}
 8001374:	e056      	b.n	8001424 <turnOnLedsTemp+0x154>
	else if (currentValue <= (initValue + (div * 4)))
 8001376:	edd7 7a03 	vldr	s15, [r7, #12]
 800137a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800137e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001382:	edd7 7a01 	vldr	s15, [r7, #4]
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	ed97 7a00 	vldr	s14, [r7]
 800138e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d803      	bhi.n	80013a0 <turnOnLedsTemp+0xd0>
		put_leds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fddf 	bl	8000f5c <put_leds>
}
 800139e:	e041      	b.n	8001424 <turnOnLedsTemp+0x154>
	else if (currentValue <= (initValue + (div * 5)))
 80013a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80013a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	ed97 7a00 	vldr	s14, [r7]
 80013b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	d803      	bhi.n	80013ca <turnOnLedsTemp+0xfa>
		put_leds(31);
 80013c2:	201f      	movs	r0, #31
 80013c4:	f7ff fdca 	bl	8000f5c <put_leds>
}
 80013c8:	e02c      	b.n	8001424 <turnOnLedsTemp+0x154>
	else if (currentValue <= (initValue + (div * 6)))
 80013ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ce:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	ed97 7a00 	vldr	s14, [r7]
 80013e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d803      	bhi.n	80013f4 <turnOnLedsTemp+0x124>
		put_leds(63);
 80013ec:	203f      	movs	r0, #63	; 0x3f
 80013ee:	f7ff fdb5 	bl	8000f5c <put_leds>
}
 80013f2:	e017      	b.n	8001424 <turnOnLedsTemp+0x154>
	else if (currentValue <= (initValue + (div * 7)))
 80013f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80013fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	ed97 7a00 	vldr	s14, [r7]
 800140c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d803      	bhi.n	800141e <turnOnLedsTemp+0x14e>
		put_leds(127);
 8001416:	207f      	movs	r0, #127	; 0x7f
 8001418:	f7ff fda0 	bl	8000f5c <put_leds>
}
 800141c:	e002      	b.n	8001424 <turnOnLedsTemp+0x154>
		put_leds(255);
 800141e:	20ff      	movs	r0, #255	; 0xff
 8001420:	f7ff fd9c 	bl	8000f5c <put_leds>
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	3d23d70a 	.word	0x3d23d70a
 8001430:	08009eb8 	.word	0x08009eb8
 8001434:	00000000 	.word	0x00000000

08001438 <lightSensorBehaviour>:

void lightSensorBehaviour()
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
	uint32_t valueADLum = ConvertidorA_D(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fe28 	bl	8001094 <ConvertidorA_D>
 8001444:	6138      	str	r0, [r7, #16]
	float valueBigLum = 4096 - valueADLum;
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001454:	edc7 7a03 	vstr	s15, [r7, #12]
	float lumValue = (valueBigLum * 3.3) / 4095;
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff f87d 	bl	8000558 <__aeabi_f2d>
 800145e:	a35c      	add	r3, pc, #368	; (adr r3, 80015d0 <lightSensorBehaviour+0x198>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f8d0 	bl	8000608 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	a359      	add	r3, pc, #356	; (adr r3, 80015d8 <lightSensorBehaviour+0x1a0>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f9f1 	bl	800085c <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb99 	bl	8000bb8 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	60bb      	str	r3, [r7, #8]
	printf("Value de la luz %.2f \r\n", lumValue);
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f7ff f864 	bl	8000558 <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4854      	ldr	r0, [pc, #336]	; (80015e8 <lightSensorBehaviour+0x1b0>)
 8001496:	f006 fdf3 	bl	8008080 <iprintf>
	turnOnLedsLight(lumValue);
 800149a:	ed97 0a02 	vldr	s0, [r7, #8]
 800149e:	f7ff fe95 	bl	80011cc <turnOnLedsLight>

	// set trigger
	uint32_t valuePot = ConvertidorA_D(4);
 80014a2:	2004      	movs	r0, #4
 80014a4:	f7ff fdf6 	bl	8001094 <ConvertidorA_D>
 80014a8:	6078      	str	r0, [r7, #4]
	float currentPot = ((valuePot * 3.3) / 4095.0);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff f832 	bl	8000514 <__aeabi_ui2d>
 80014b0:	a347      	add	r3, pc, #284	; (adr r3, 80015d0 <lightSensorBehaviour+0x198>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8a7 	bl	8000608 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a345      	add	r3, pc, #276	; (adr r3, 80015d8 <lightSensorBehaviour+0x1a0>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f9c8 	bl	800085c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb70 	bl	8000bb8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	603b      	str	r3, [r7, #0]
	printf("Value del pot %.2f \r\n", currentPot);
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f7ff f83b 	bl	8000558 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4841      	ldr	r0, [pc, #260]	; (80015ec <lightSensorBehaviour+0x1b4>)
 80014e8:	f006 fdca 	bl	8008080 <iprintf>
	if (currentPot > (lastPot + 0.35) || currentPot < (lastPot - 0.35))
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f7ff f833 	bl	8000558 <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <lightSensorBehaviour+0x1b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	a337      	add	r3, pc, #220	; (adr r3, 80015e0 <lightSensorBehaviour+0x1a8>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fec9 	bl	800029c <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7ff fb09 	bl	8000b28 <__aeabi_dcmpgt>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d117      	bne.n	800154c <lightSensorBehaviour+0x114>
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f7ff f81b 	bl	8000558 <__aeabi_f2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <lightSensorBehaviour+0x1b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f814 	bl	8000558 <__aeabi_f2d>
 8001530:	a32b      	add	r3, pc, #172	; (adr r3, 80015e0 <lightSensorBehaviour+0x1a8>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7fe feaf 	bl	8000298 <__aeabi_dsub>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4620      	mov	r0, r4
 8001540:	4629      	mov	r1, r5
 8001542:	f7ff fad3 	bl	8000aec <__aeabi_dcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d031      	beq.n	80015b0 <lightSensorBehaviour+0x178>
	{
		printf("pot changed %.2f\r\n", currentPot);
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4827      	ldr	r0, [pc, #156]	; (80015f4 <lightSensorBehaviour+0x1bc>)
 8001558:	f006 fd92 	bl	8008080 <iprintf>
		lastPot = currentPot;
 800155c:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <lightSensorBehaviour+0x1b8>)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6013      	str	r3, [r2, #0]
		trigger = currentPot;
 8001562:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <lightSensorBehaviour+0x1c0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 8; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	e01d      	b.n	80015aa <lightSensorBehaviour+0x172>
		{
			turnOnLedsLight(currentPot);
 800156e:	ed97 0a00 	vldr	s0, [r7]
 8001572:	f7ff fe2b 	bl	80011cc <turnOnLedsLight>
			for (int j = 0; j < 1000000; j++)
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e002      	b.n	8001582 <lightSensorBehaviour+0x14a>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	3301      	adds	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <lightSensorBehaviour+0x1c4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	ddf8      	ble.n	800157c <lightSensorBehaviour+0x144>
			{
			}
			put_leds(0);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fce6 	bl	8000f5c <put_leds>
			for (int j = 0; j < 1000000; j++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e002      	b.n	800159c <lightSensorBehaviour+0x164>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <lightSensorBehaviour+0x1c4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	ddf8      	ble.n	8001596 <lightSensorBehaviour+0x15e>
		for (int i = 0; i < 8; i++)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	2b07      	cmp	r3, #7
 80015ae:	ddde      	ble.n	800156e <lightSensorBehaviour+0x136>
			{
			}
		}
	}
	setOffAlarm(lumValue, trigger);
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <lightSensorBehaviour+0x1c0>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eef0 0a67 	vmov.f32	s1, s15
 80015ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80015be:	f7ff fde3 	bl	8001188 <setOffAlarm>
}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	f3af 8000 	nop.w
 80015d0:	66666666 	.word	0x66666666
 80015d4:	400a6666 	.word	0x400a6666
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40affe00 	.word	0x40affe00
 80015e0:	66666666 	.word	0x66666666
 80015e4:	3fd66666 	.word	0x3fd66666
 80015e8:	08009ecc 	.word	0x08009ecc
 80015ec:	08009ee4 	.word	0x08009ee4
 80015f0:	20000208 	.word	0x20000208
 80015f4:	08009efc 	.word	0x08009efc
 80015f8:	20000214 	.word	0x20000214
 80015fc:	000f423f 	.word	0x000f423f

08001600 <tempSensorBehaviour>:

void tempSensorBehaviour()
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
	uint32_t valueADTemp = ConvertidorA_D(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f7ff fd44 	bl	8001094 <ConvertidorA_D>
 800160c:	60f8      	str	r0, [r7, #12]
	float valueBigTemp = 4096 - valueADTemp;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161c:	edc7 7a02 	vstr	s15, [r7, #8]
	float tempValue = (valueBigTemp * 3.3) / 4095;
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f7fe ff99 	bl	8000558 <__aeabi_f2d>
 8001626:	a323      	add	r3, pc, #140	; (adr r3, 80016b4 <tempSensorBehaviour+0xb4>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ffec 	bl	8000608 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	a320      	add	r3, pc, #128	; (adr r3, 80016bc <tempSensorBehaviour+0xbc>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f90d 	bl	800085c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fab5 	bl	8000bb8 <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	607b      	str	r3, [r7, #4]
	// float resis = ((3.3*10000)/((3.3-valueBigTemp)/(4095*3.3)))-10000;
	printf("Value de la temp %.2f \r\n Value init temp %.2f \n", tempValue, initTempValue);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe ff80 	bl	8000558 <__aeabi_f2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <tempSensorBehaviour+0xa8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff79 	bl	8000558 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	e9cd 2300 	strd	r2, r3, [sp]
 800166e:	4622      	mov	r2, r4
 8001670:	462b      	mov	r3, r5
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <tempSensorBehaviour+0xac>)
 8001674:	f006 fd04 	bl	8008080 <iprintf>
	// printf("Value de la resis %.2f \r\n", resis);
	turnOnLedsTemp(initTempValue, tempValue);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <tempSensorBehaviour+0xa8>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f7ff fe23 	bl	80012d0 <turnOnLedsTemp>

	// adjust leds maxvalue - minvalue and set leds according to the currentValue
	setOffAlarm(tempValue, trigger);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <tempSensorBehaviour+0xb0>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eef0 0a67 	vmov.f32	s1, s15
 8001694:	ed97 0a01 	vldr	s0, [r7, #4]
 8001698:	f7ff fd76 	bl	8001188 <setOffAlarm>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	20000210 	.word	0x20000210
 80016ac:	08009f10 	.word	0x08009f10
 80016b0:	20000214 	.word	0x20000214
 80016b4:	66666666 	.word	0x66666666
 80016b8:	400a6666 	.word	0x400a6666
 80016bc:	00000000 	.word	0x00000000
 80016c0:	40affe00 	.word	0x40affe00

080016c4 <restartAlarm>:

void restartAlarm()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	GPIO_PinState rbCurrentState = HAL_GPIO_ReadPin(PULSADOR1_GPIO_Port, PULSADOR1_Pin);
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	4816      	ldr	r0, [pc, #88]	; (8001728 <restartAlarm+0x64>)
 80016ce:	f001 ffd7 	bl	8003680 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	70fb      	strb	r3, [r7, #3]
	if (rightButtonState != rbCurrentState && rbCurrentState == GPIO_PIN_RESET)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <restartAlarm+0x68>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d014      	beq.n	800170a <restartAlarm+0x46>
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d111      	bne.n	800170a <restartAlarm+0x46>
	{
		rightButtonState = GPIO_PIN_RESET;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <restartAlarm+0x68>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <restartAlarm+0x6c>)
 80016f2:	f001 ffdd 	bl	80036b0 <HAL_GPIO_WritePin>
		for (int j = 0; j < 70000000; j++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	e002      	b.n	8001702 <restartAlarm+0x3e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3301      	adds	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <restartAlarm+0x70>)
 8001706:	4293      	cmp	r3, r2
 8001708:	ddf8      	ble.n	80016fc <restartAlarm+0x38>
		{
		}
	}

	if (rightButtonState != rbCurrentState && rbCurrentState == GPIO_PIN_SET)
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <restartAlarm+0x68>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	429a      	cmp	r2, r3
 8001712:	d005      	beq.n	8001720 <restartAlarm+0x5c>
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <restartAlarm+0x5c>
	{
		rightButtonState = GPIO_PIN_SET;
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <restartAlarm+0x68>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
	}
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40020800 	.word	0x40020800
 800172c:	20000001 	.word	0x20000001
 8001730:	40020000 	.word	0x40020000
 8001734:	042c1d7f 	.word	0x042c1d7f

08001738 <initializeVars>:

void initializeVars()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
	uint32_t valuePot = ConvertidorA_D(4);
 800173e:	2004      	movs	r0, #4
 8001740:	f7ff fca8 	bl	8001094 <ConvertidorA_D>
 8001744:	6178      	str	r0, [r7, #20]
	float lastPot = ((valuePot * 3.3) / 4095.0);
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7fe fee4 	bl	8000514 <__aeabi_ui2d>
 800174c:	a31e      	add	r3, pc, #120	; (adr r3, 80017c8 <initializeVars+0x90>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff59 	bl	8000608 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	a31c      	add	r3, pc, #112	; (adr r3, 80017d0 <initializeVars+0x98>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f87a 	bl	800085c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa22 	bl	8000bb8 <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	613b      	str	r3, [r7, #16]
	uint32_t tempInit = ConvertidorA_D(1);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fc8b 	bl	8001094 <ConvertidorA_D>
 800177e:	60f8      	str	r0, [r7, #12]
	float initTempValue = ((4096 - tempInit) * 3.3) / 4095;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fec4 	bl	8000514 <__aeabi_ui2d>
 800178c:	a30e      	add	r3, pc, #56	; (adr r3, 80017c8 <initializeVars+0x90>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe ff39 	bl	8000608 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	a30c      	add	r3, pc, #48	; (adr r3, 80017d0 <initializeVars+0x98>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7ff f85a 	bl	800085c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff fa02 	bl	8000bb8 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	60bb      	str	r3, [r7, #8]
	float trigger = lastPot;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	607b      	str	r3, [r7, #4]
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	66666666 	.word	0x66666666
 80017cc:	400a6666 	.word	0x400a6666
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40affe00 	.word	0x40affe00

080017d8 <runHW>:

void runHW()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	if((valuePot == 0) && (lastPot = 0) && (tempInit == 0) && (initTempValue == 0) && (trigger == 0)) {
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <runHW+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <runHW+0x50>
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <runHW+0x68>)
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <runHW+0x68>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d015      	beq.n	8001828 <runHW+0x50>
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <runHW+0x6c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d111      	bne.n	8001828 <runHW+0x50>
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <runHW+0x70>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d109      	bne.n	8001828 <runHW+0x50>
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <runHW+0x74>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	d101      	bne.n	8001828 <runHW+0x50>
		initializeVars();
 8001824:	f7ff ff88 	bl	8001738 <initializeVars>
	}
	checkSensorChange();
 8001828:	f7ff fc72 	bl	8001110 <checkSensorChange>
	lightSensorBehaviour();
 800182c:	f7ff fe04 	bl	8001438 <lightSensorBehaviour>
	tempSensorBehaviour();
 8001830:	f7ff fee6 	bl	8001600 <tempSensorBehaviour>
	restartAlarm();
 8001834:	f7ff ff46 	bl	80016c4 <restartAlarm>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000204 	.word	0x20000204
 8001840:	20000208 	.word	0x20000208
 8001844:	2000020c 	.word	0x2000020c
 8001848:	20000210 	.word	0x20000210
 800184c:	20000214 	.word	0x20000214

08001850 <_write>:
#include <string.h>
#include "comunicaciones.h"
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e00b      	b.n	800187a <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	1c4b      	adds	r3, r1, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186c:	2201      	movs	r2, #1
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <_write+0x3c>)
 8001870:	f002 fc1d 	bl	80040ae <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbef      	blt.n	8001862 <_write+0x12>
	}

	return len;
 8001882:	687b      	ldr	r3, [r7, #4]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200002a4 	.word	0x200002a4

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001894:	f000 fd44 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001898:	f000 f816 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189c:	f000 f962 	bl	8001b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a0:	f000 f922 	bl	8001ae8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018a4:	f000 f8f6 	bl	8001a94 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80018a8:	f000 f8ca 	bl	8001a40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018ac:	f000 f876 	bl	800199c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf ("SBC_PRJ at "  __TIME__ "\r\n");
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <main+0x34>)
 80018b2:	f006 fc6b 	bl	800818c <puts>
  //ESP8266_RESET();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018b6:	f002 ffa3 	bl	8004800 <osKernelInitialize>
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
  CONFIGURACION_INICIAL();
 80018ba:	f000 fcc9 	bl	8002250 <CONFIGURACION_INICIAL>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 80018be:	f002 ffc3 	bl	8004848 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <main+0x32>
 80018c4:	08009f58 	.word	0x08009f58

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	; 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 fe7f 	bl	80075da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <SystemClock_Config+0xcc>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <SystemClock_Config+0xd0>)
 8001912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800192c:	2310      	movs	r3, #16
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2302      	movs	r3, #2
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001934:	2300      	movs	r3, #0
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001938:	2310      	movs	r3, #16
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800193c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001942:	2304      	movs	r3, #4
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001946:	2304      	movs	r3, #4
 8001948:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fec8 	bl	80036e4 <HAL_RCC_OscConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800195a:	f000 f9c9 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195e:	230f      	movs	r3, #15
 8001960:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001962:	2302      	movs	r3, #2
 8001964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f002 f92a 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001986:	f000 f9b3 	bl	8001cf0 <Error_Handler>
  }
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	; 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <MX_ADC1_Init+0x9c>)
 80019b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <MX_ADC1_Init+0xa0>)
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019fe:	f000 fd01 	bl	8002404 <HAL_ADC_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a08:	f000 f972 	bl	8001cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_ADC1_Init+0x98>)
 8001a1e:	f000 fe81 	bl	8002724 <HAL_ADC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a28:	f000 f962 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000218 	.word	0x20000218
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	0f000001 	.word	0x0f000001

08001a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART1_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a78:	f002 facc 	bl	8004014 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f935 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000260 	.word	0x20000260
 8001a90:	40011000 	.word	0x40011000

08001a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART2_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001acc:	f002 faa2 	bl	8004014 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f90b 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200002a4 	.word	0x200002a4
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_DMA_Init+0x78>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <MX_DMA_Init+0x78>)
 8001af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_DMA_Init+0x78>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_DMA_Init+0x78>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <MX_DMA_Init+0x78>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_DMA_Init+0x78>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	2010      	movs	r0, #16
 8001b2c:	f001 f903 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b30:	2010      	movs	r0, #16
 8001b32:	f001 f91c 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	203a      	movs	r0, #58	; 0x3a
 8001b3c:	f001 f8fb 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b40:	203a      	movs	r0, #58	; 0x3a
 8001b42:	f001 f914 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	2046      	movs	r0, #70	; 0x46
 8001b4c:	f001 f8f3 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b50:	2046      	movs	r0, #70	; 0x46
 8001b52:	f001 f90c 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a57      	ldr	r2, [pc, #348]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b51      	ldr	r3, [pc, #324]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a42      	ldr	r2, [pc, #264]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <MX_GPIO_Init+0x17c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2102      	movs	r1, #2
 8001bee:	483d      	ldr	r0, [pc, #244]	; (8001ce4 <MX_GPIO_Init+0x180>)
 8001bf0:	f001 fd5e 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|BUZZER_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001bfa:	483b      	ldr	r0, [pc, #236]	; (8001ce8 <MX_GPIO_Init+0x184>)
 8001bfc:	f001 fd58 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	4838      	ldr	r0, [pc, #224]	; (8001ce8 <MX_GPIO_Init+0x184>)
 8001c06:	f001 fd53 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_Pin|LED2_Pin|LED5_Pin|LED1_Pin
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f240 4139 	movw	r1, #1081	; 0x439
 8001c10:	4836      	ldr	r0, [pc, #216]	; (8001cec <MX_GPIO_Init+0x188>)
 8001c12:	f001 fd4d 	bl	80036b0 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	482d      	ldr	r0, [pc, #180]	; (8001ce4 <MX_GPIO_Init+0x180>)
 8001c2e:	f001 fba3 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP8266_RESET_Pin */
  GPIO_InitStruct.Pin = ESP8266_RESET_Pin;
 8001c32:	2302      	movs	r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_RESET_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4826      	ldr	r0, [pc, #152]	; (8001ce4 <MX_GPIO_Init+0x180>)
 8001c4a:	f001 fb95 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED8_Pin BUZZER_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|BUZZER_Pin|LED3_Pin;
 8001c4e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4820      	ldr	r0, [pc, #128]	; (8001ce8 <MX_GPIO_Init+0x184>)
 8001c68:	f001 fb86 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001c6c:	2340      	movs	r3, #64	; 0x40
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4819      	ldr	r0, [pc, #100]	; (8001ce8 <MX_GPIO_Init+0x184>)
 8001c84:	f001 fb78 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED2_Pin LED5_Pin LED1_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED2_Pin|LED5_Pin|LED1_Pin
 8001c88:	f240 4339 	movw	r3, #1081	; 0x439
 8001c8c:	617b      	str	r3, [r7, #20]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4812      	ldr	r0, [pc, #72]	; (8001cec <MX_GPIO_Init+0x188>)
 8001ca2:	f001 fb69 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR1_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin;
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR1_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <MX_GPIO_Init+0x180>)
 8001cba:	f001 fb5d 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR2_Pin */
  GPIO_InitStruct.Pin = PULSADOR2_Pin;
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR2_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <MX_GPIO_Init+0x188>)
 8001cd2:	f001 fb51 	bl	8003378 <HAL_GPIO_Init>

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_MspInit+0x54>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_MspInit+0x54>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_MspInit+0x54>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_MspInit+0x54>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	f06f 0001 	mvn.w	r0, #1
 8001d42:	f000 fff8 	bl	8002d36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_ADC_MspInit+0x7c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d127      	bne.n	8001dc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin|NTC_Pin|POT_Pin;
 8001dae:	2313      	movs	r3, #19
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_ADC_MspInit+0x84>)
 8001dc2:	f001 fad9 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a78      	ldr	r2, [pc, #480]	; (8001fdc <HAL_UART_MspInit+0x200>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 808a 	bne.w	8001f14 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a6e      	ldr	r2, [pc, #440]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4863      	ldr	r0, [pc, #396]	; (8001fe4 <HAL_UART_MspInit+0x208>)
 8001e56:	f001 fa8f 	bl	8003378 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e5c:	4a63      	ldr	r2, [pc, #396]	; (8001fec <HAL_UART_MspInit+0x210>)
 8001e5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e68:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e82:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8e:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e94:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e9a:	4853      	ldr	r0, [pc, #332]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001e9c:	f000 ff82 	bl	8002da4 <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001ea6:	f7ff ff23 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
 8001eb0:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_UART_MspInit+0x20c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001eb6:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001eb8:	4a4e      	ldr	r2, [pc, #312]	; (8001ff4 <HAL_UART_MspInit+0x218>)
 8001eba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ec6:	2240      	movs	r2, #64	; 0x40
 8001ec8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed8:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ede:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ef6:	483e      	ldr	r0, [pc, #248]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001ef8:	f000 ff54 	bl	8002da4 <HAL_DMA_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001f02:	f7ff fef5 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a39      	ldr	r2, [pc, #228]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0c:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <HAL_UART_MspInit+0x214>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f12:	e05e      	b.n	8001fd2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <HAL_UART_MspInit+0x21c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d159      	bne.n	8001fd2 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_UART_MspInit+0x204>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f56:	230c      	movs	r3, #12
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481c      	ldr	r0, [pc, #112]	; (8001fe4 <HAL_UART_MspInit+0x208>)
 8001f72:	f001 fa01 	bl	8003378 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_UART_MspInit+0x224>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f82:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fb6:	4811      	ldr	r0, [pc, #68]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fb8:	f000 fef4 	bl	8002da4 <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8001fc2:	f7ff fe95 	bl	8001cf0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_UART_MspInit+0x220>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fd2:	bf00      	nop
 8001fd4:	3730      	adds	r7, #48	; 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	200002e8 	.word	0x200002e8
 8001fec:	40026440 	.word	0x40026440
 8001ff0:	20000348 	.word	0x20000348
 8001ff4:	400264b8 	.word	0x400264b8
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	200003a8 	.word	0x200003a8
 8002000:	40026088 	.word	0x40026088

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f9c6 	bl	80023c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002038:	f004 f864 	bl	8006104 <xTaskGetSchedulerState>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002042:	f004 fe49 	bl	8006cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Stream5_IRQHandler+0x10>)
 8002052:	f000 ff55 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200003a8 	.word	0x200003a8

08002060 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <DMA2_Stream2_IRQHandler+0x10>)
 8002066:	f000 ff4b 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200002e8 	.word	0x200002e8

08002074 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <DMA2_Stream7_IRQHandler+0x10>)
 800207a:	f000 ff41 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000348 	.word	0x20000348

08002088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
	return 1;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_kill>:

int _kill(int pid, int sig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020a2:	f005 f895 	bl	80071d0 <__errno>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2216      	movs	r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
	return -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_exit>:

void _exit (int status)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffe7 	bl	8002098 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ca:	e7fe      	b.n	80020ca <_exit+0x12>

080020cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	4601      	mov	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
	}

return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f005 f816 	bl	80071d0 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	20000408 	.word	0x20000408
 80021d8:	20014ab0 	.word	0x20014ab0

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <Task_HW>:

#include "tasks.h"
#include "HW.h"


void Task_HW( void *pvParameters ) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	for(;;)
	  {
		printf("startHW\n\r");
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <Task_HW+0x34>)
 800220a:	f005 ff39 	bl	8008080 <iprintf>
		runHW();
 800220e:	f7ff fae3 	bl	80017d8 <runHW>
		{int c;for (c = 0; c < 1000000; c++);}
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e002      	b.n	800221e <Task_HW+0x1e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <Task_HW+0x38>)
 8002222:	4293      	cmp	r3, r2
 8002224:	ddf8      	ble.n	8002218 <Task_HW+0x18>
	    osDelay(1);
 8002226:	2001      	movs	r0, #1
 8002228:	f002 fb34 	bl	8004894 <osDelay>
	    printf("endHW\n\r");
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <Task_HW+0x3c>)
 800222e:	f005 ff27 	bl	8008080 <iprintf>
	  {
 8002232:	e7e9      	b.n	8002208 <Task_HW+0x8>
 8002234:	08009f70 	.word	0x08009f70
 8002238:	000f423f 	.word	0x000f423f
 800223c:	08009f7c 	.word	0x08009f7c

08002240 <Task_WIFI>:
	  }
}
void Task_WIFI( void *pvParameters ) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	for(;;)
	  {
		//ESP8266_Boot();
	    osDelay(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f002 fb23 	bl	8004894 <osDelay>
	  {
 800224e:	e7fb      	b.n	8002248 <Task_WIFI+0x8>

08002250 <CONFIGURACION_INICIAL>:
	  {
	    osDelay(1);
	  }
}

void CONFIGURACION_INICIAL(void){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af02      	add	r7, sp, #8
 BaseType_t res_task;
 res_task=xTaskCreate(Task_HW,"HW",1024,NULL,NORMAL_PRIORITY,NULL);
 8002256:	2300      	movs	r3, #0
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	231b      	movs	r3, #27
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002264:	4914      	ldr	r1, [pc, #80]	; (80022b8 <CONFIGURACION_INICIAL+0x68>)
 8002266:	4815      	ldr	r0, [pc, #84]	; (80022bc <CONFIGURACION_INICIAL+0x6c>)
 8002268:	f003 f961 	bl	800552e <xTaskCreate>
 800226c:	6078      	str	r0, [r7, #4]
 		if( res_task != pdPASS ){
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d006      	beq.n	8002282 <CONFIGURACION_INICIAL+0x32>
 				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002274:	4812      	ldr	r0, [pc, #72]	; (80022c0 <CONFIGURACION_INICIAL+0x70>)
 8002276:	f005 ff89 	bl	800818c <puts>
 				fflush(NULL);
 800227a:	2000      	movs	r0, #0
 800227c:	f005 f870 	bl	8007360 <fflush>
 				while(1);
 8002280:	e7fe      	b.n	8002280 <CONFIGURACION_INICIAL+0x30>
 		}

 res_task=xTaskCreate(Task_WIFI,"WIFI",1024,NULL,NORMAL_PRIORITY ,NULL);
 8002282:	2300      	movs	r3, #0
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	231b      	movs	r3, #27
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <CONFIGURACION_INICIAL+0x74>)
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <CONFIGURACION_INICIAL+0x78>)
 8002294:	f003 f94b 	bl	800552e <xTaskCreate>
 8002298:	6078      	str	r0, [r7, #4]
 			if( res_task != pdPASS ){
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d006      	beq.n	80022ae <CONFIGURACION_INICIAL+0x5e>
 					printf("PANIC: Error al crear Tarea Visualizador\r\n");
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <CONFIGURACION_INICIAL+0x70>)
 80022a2:	f005 ff73 	bl	800818c <puts>
 					fflush(NULL);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f005 f85a 	bl	8007360 <fflush>
 					while(1);
 80022ac:	e7fe      	b.n	80022ac <CONFIGURACION_INICIAL+0x5c>
 			}

}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	08009f84 	.word	0x08009f84
 80022bc:	08002201 	.word	0x08002201
 80022c0:	08009f88 	.word	0x08009f88
 80022c4:	08009fb4 	.word	0x08009fb4
 80022c8:	08002241 	.word	0x08002241

080022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d0:	480d      	ldr	r0, [pc, #52]	; (8002308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022d2:	490e      	ldr	r1, [pc, #56]	; (800230c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022e8:	4c0b      	ldr	r4, [pc, #44]	; (8002318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022f6:	f7ff ff71 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f005 f939 	bl	8007570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fe:	f7ff fac7 	bl	8001890 <main>
  bx  lr    
 8002302:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002310:	0800a3dc 	.word	0x0800a3dc
  ldr r2, =_sbss
 8002314:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002318:	20014ab0 	.word	0x20014ab0

0800231c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <HAL_Init+0x40>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_Init+0x40>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_Init+0x40>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 fce9 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	200f      	movs	r0, #15
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fcd2 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fd01 	bl	8002d8a <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f000 fcc9 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000004 	.word	0x20000004
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_IncTick+0x20>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_IncTick+0x24>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	2000000c 	.word	0x2000000c
 80023e8:	2000040c 	.word	0x2000040c

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000040c 	.word	0x2000040c

08002404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e033      	b.n	8002482 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fc96 	bl	8001d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800244a:	f023 0302 	bic.w	r3, r3, #2
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa96 	bl	8002988 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
 8002472:	e001      	b.n	8002478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Start+0x1a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e097      	b.n	80025d6 <HAL_ADC_Start+0x14a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d018      	beq.n	80024ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024cc:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_ADC_Start+0x158>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_ADC_Start+0x15c>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9a      	lsrs	r2, r3, #18
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d15f      	bne.n	80025bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	d106      	bne.n	800254a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f023 0206 	bic.w	r2, r3, #6
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_ADC_Start+0x160>)
 800255a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002564:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d129      	bne.n	80025d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	e020      	b.n	80025d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <HAL_ADC_Start+0x164>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d11b      	bne.n	80025d4 <HAL_ADC_Start+0x148>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	e00b      	b.n	80025d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000004 	.word	0x20000004
 80025e8:	431bde83 	.word	0x431bde83
 80025ec:	40012300 	.word	0x40012300
 80025f0:	40012000 	.word	0x40012000

080025f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	d113      	bne.n	800263a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800261c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002620:	d10b      	bne.n	800263a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e063      	b.n	8002702 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800263a:	f7ff fed7 	bl	80023ec <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002640:	e021      	b.n	8002686 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d01d      	beq.n	8002686 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_ADC_PollForConversion+0x6c>
 8002650:	f7ff fecc 	bl	80023ec <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d212      	bcs.n	8002686 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d00b      	beq.n	8002686 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e03d      	b.n	8002702 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d1d6      	bne.n	8002642 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0212 	mvn.w	r2, #18
 800269c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d123      	bne.n	8002700 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d11f      	bne.n	8002700 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1c>
 800273c:	2302      	movs	r3, #2
 800273e:	e113      	b.n	8002968 <HAL_ADC_ConfigChannel+0x244>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b09      	cmp	r3, #9
 800274e:	d925      	bls.n	800279c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	3b1e      	subs	r3, #30
 8002766:	2207      	movs	r2, #7
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	4603      	mov	r3, r0
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4403      	add	r3, r0
 800278e:	3b1e      	subs	r3, #30
 8002790:	409a      	lsls	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e022      	b.n	80027e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6919      	ldr	r1, [r3, #16]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4403      	add	r3, r0
 80027d8:	409a      	lsls	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d824      	bhi.n	8002834 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b05      	subs	r3, #5
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
 8002832:	e04c      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d824      	bhi.n	8002886 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b23      	subs	r3, #35	; 0x23
 800284e:	221f      	movs	r2, #31
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b23      	subs	r3, #35	; 0x23
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
 8002884:	e023      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b41      	subs	r3, #65	; 0x41
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b41      	subs	r3, #65	; 0x41
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_ADC_ConfigChannel+0x250>)
 80028d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_ADC_ConfigChannel+0x254>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10f      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1d8>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d10b      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_ADC_ConfigChannel+0x254>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d12b      	bne.n	800295e <HAL_ADC_ConfigChannel+0x23a>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_ADC_ConfigChannel+0x258>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x1f4>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b11      	cmp	r3, #17
 8002916:	d122      	bne.n	800295e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_ADC_ConfigChannel+0x258>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_ADC_ConfigChannel+0x25c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <HAL_ADC_ConfigChannel+0x260>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	0c9a      	lsrs	r2, r3, #18
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002950:	e002      	b.n	8002958 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3b01      	subs	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f9      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012300 	.word	0x40012300
 8002978:	40012000 	.word	0x40012000
 800297c:	10000012 	.word	0x10000012
 8002980:	20000004 	.word	0x20000004
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002990:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <ADC_Init+0x1f0>)
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <ADC_Init+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e00f      	b.n	8002a86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0202 	bic.w	r2, r2, #2
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	005a      	lsls	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ad2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	035a      	lsls	r2, r3, #13
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e007      	b.n	8002afc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	051a      	lsls	r2, r3, #20
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3e:	025a      	lsls	r2, r3, #9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	029a      	lsls	r2, r3, #10
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40012300 	.word	0x40012300
 8002b7c:	0f000001 	.word	0x0f000001

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	; (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	; (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff fb1c 	bl	80023ec <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e099      	b.n	8002ef4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de0:	e00f      	b.n	8002e02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de2:	f7ff fb03 	bl	80023ec <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d908      	bls.n	8002e02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e078      	b.n	8002ef4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e8      	bne.n	8002de2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_DMA_Init+0x158>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4313      	orrs	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0307 	bic.w	r3, r3, #7
 8002e82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d117      	bne.n	8002ec6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f9e9 	bl	8003280 <DMA_CheckFifoParam>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e016      	b.n	8002ef4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9a0 	bl	8003214 <DMA_CalcBaseAndBitshift>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	223f      	movs	r2, #63	; 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	f010803f 	.word	0xf010803f

08002f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f0c:	4b8e      	ldr	r3, [pc, #568]	; (8003148 <HAL_DMA_IRQHandler+0x248>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a8e      	ldr	r2, [pc, #568]	; (800314c <HAL_DMA_IRQHandler+0x24c>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0a9b      	lsrs	r3, r3, #10
 8002f18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01a      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	2208      	movs	r2, #8
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	2201      	movs	r2, #1
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0202 	orr.w	r2, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d012      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2210      	movs	r2, #16
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d043      	beq.n	8003070 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03c      	beq.n	8003070 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d018      	beq.n	8003042 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d024      	beq.n	8003070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
 800302e:	e01f      	b.n	8003070 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
 8003040:	e016      	b.n	8003070 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0208 	bic.w	r2, r2, #8
 800305e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	2220      	movs	r2, #32
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 808f 	beq.w	80031a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8087 	beq.w	80031a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2220      	movs	r2, #32
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d136      	bne.n	8003118 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0216 	bic.w	r2, r2, #22
 80030b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_DMA_IRQHandler+0x1da>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0208 	bic.w	r2, r2, #8
 80030e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	223f      	movs	r2, #63	; 0x3f
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	2b00      	cmp	r3, #0
 800310c:	d07e      	beq.n	800320c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
        }
        return;
 8003116:	e079      	b.n	800320c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01d      	beq.n	8003162 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	2b00      	cmp	r3, #0
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
 8003144:	e02c      	b.n	80031a0 <HAL_DMA_IRQHandler+0x2a0>
 8003146:	bf00      	nop
 8003148:	20000004 	.word	0x20000004
 800314c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d023      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
 8003160:	e01e      	b.n	80031a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10f      	bne.n	8003190 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0210 	bic.w	r2, r2, #16
 800317e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d032      	beq.n	800320e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d022      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2205      	movs	r2, #5
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d307      	bcc.n	80031e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f2      	bne.n	80031cc <HAL_DMA_IRQHandler+0x2cc>
 80031e6:	e000      	b.n	80031ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
 800320a:	e000      	b.n	800320e <HAL_DMA_IRQHandler+0x30e>
        return;
 800320c:	bf00      	nop
    }
  }
}
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3b10      	subs	r3, #16
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <DMA_CalcBaseAndBitshift+0x64>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <DMA_CalcBaseAndBitshift+0x68>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d909      	bls.n	8003256 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
 8003254:	e007      	b.n	8003266 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	aaaaaaab 	.word	0xaaaaaaab
 800327c:	08009fec 	.word	0x08009fec

08003280 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11f      	bne.n	80032da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d856      	bhi.n	800334e <DMA_CheckFifoParam+0xce>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <DMA_CheckFifoParam+0x28>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032cb 	.word	0x080032cb
 80032b0:	080032b9 	.word	0x080032b9
 80032b4:	0800334f 	.word	0x0800334f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d046      	beq.n	8003352 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c8:	e043      	b.n	8003352 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032d2:	d140      	bne.n	8003356 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e03d      	b.n	8003356 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e2:	d121      	bne.n	8003328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d837      	bhi.n	800335a <DMA_CheckFifoParam+0xda>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <DMA_CheckFifoParam+0x70>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003301 	.word	0x08003301
 80032f4:	08003307 	.word	0x08003307
 80032f8:	08003301 	.word	0x08003301
 80032fc:	08003319 	.word	0x08003319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      break;
 8003304:	e030      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d025      	beq.n	800335e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003316:	e022      	b.n	800335e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003320:	d11f      	bne.n	8003362 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003326:	e01c      	b.n	8003362 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d903      	bls.n	8003336 <DMA_CheckFifoParam+0xb6>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d003      	beq.n	800333c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003334:	e018      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      break;
 800333a:	e015      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      break;
 800334c:	e00b      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;
 800334e:	bf00      	nop
 8003350:	e00a      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      break;
 8003352:	bf00      	nop
 8003354:	e008      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      break;
 8003356:	bf00      	nop
 8003358:	e006      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
 800335c:	e004      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      break;   
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
    }
  } 
  
  return status; 
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e159      	b.n	8003648 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8148 	bne.w	8003642 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d005      	beq.n	80033ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d130      	bne.n	800342c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003400:	2201      	movs	r2, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0201 	and.w	r2, r3, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d017      	beq.n	8003468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a2 	beq.w	8003642 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b57      	ldr	r3, [pc, #348]	; (8003660 <HAL_GPIO_Init+0x2e8>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a56      	ldr	r2, [pc, #344]	; (8003660 <HAL_GPIO_Init+0x2e8>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b54      	ldr	r3, [pc, #336]	; (8003660 <HAL_GPIO_Init+0x2e8>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351a:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_GPIO_Init+0x2ec>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a49      	ldr	r2, [pc, #292]	; (8003668 <HAL_GPIO_Init+0x2f0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d019      	beq.n	800357a <HAL_GPIO_Init+0x202>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a48      	ldr	r2, [pc, #288]	; (800366c <HAL_GPIO_Init+0x2f4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x1fe>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a47      	ldr	r2, [pc, #284]	; (8003670 <HAL_GPIO_Init+0x2f8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x1fa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a46      	ldr	r2, [pc, #280]	; (8003674 <HAL_GPIO_Init+0x2fc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x1f6>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a45      	ldr	r2, [pc, #276]	; (8003678 <HAL_GPIO_Init+0x300>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x1f2>
 8003566:	2304      	movs	r3, #4
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x204>
 800356a:	2307      	movs	r3, #7
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x204>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x204>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x204>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x204>
 800357a:	2300      	movs	r3, #0
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800358c:	4935      	ldr	r1, [pc, #212]	; (8003664 <HAL_GPIO_Init+0x2ec>)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359a:	4b38      	ldr	r3, [pc, #224]	; (800367c <HAL_GPIO_Init+0x304>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035be:	4a2f      	ldr	r2, [pc, #188]	; (800367c <HAL_GPIO_Init+0x304>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_GPIO_Init+0x304>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e8:	4a24      	ldr	r2, [pc, #144]	; (800367c <HAL_GPIO_Init+0x304>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_GPIO_Init+0x304>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_GPIO_Init+0x304>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_GPIO_Init+0x304>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_GPIO_Init+0x304>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3301      	adds	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	f67f aea2 	bls.w	8003394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40013800 	.word	0x40013800
 8003668:	40020000 	.word	0x40020000
 800366c:	40020400 	.word	0x40020400
 8003670:	40020800 	.word	0x40020800
 8003674:	40020c00 	.word	0x40020c00
 8003678:	40021000 	.word	0x40021000
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e001      	b.n	80036a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
 80036bc:	4613      	mov	r3, r2
 80036be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036cc:	e003      	b.n	80036d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e267      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d075      	beq.n	80037ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003702:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d00c      	beq.n	8003728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370e:	4b85      	ldr	r3, [pc, #532]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003716:	2b08      	cmp	r3, #8
 8003718:	d112      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371a:	4b82      	ldr	r3, [pc, #520]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003726:	d10b      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4b7e      	ldr	r3, [pc, #504]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05b      	beq.n	80037ec <HAL_RCC_OscConfig+0x108>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d157      	bne.n	80037ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e242      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x74>
 800374a:	4b76      	ldr	r3, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e01d      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x98>
 8003762:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6f      	ldr	r2, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6c      	ldr	r2, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 800377c:	4b69      	ldr	r3, [pc, #420]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800378e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe fe26 	bl	80023ec <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fe fe22 	bl	80023ec <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e207      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0xc0>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe fe12 	bl	80023ec <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fe0e 	bl	80023ec <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1f3      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	4b51      	ldr	r3, [pc, #324]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0xe8>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d11c      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003812:	4b44      	ldr	r3, [pc, #272]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1c7      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4937      	ldr	r1, [pc, #220]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	e03a      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <HAL_RCC_OscConfig+0x244>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fdc7 	bl	80023ec <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe fdc3 	bl	80023ec <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1a8      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4925      	ldr	r1, [pc, #148]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_OscConfig+0x244>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fda6 	bl	80023ec <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fe fda2 	bl	80023ec <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e187      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d036      	beq.n	800393c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCC_OscConfig+0x248>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe fd86 	bl	80023ec <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fe fd82 	bl	80023ec <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e167      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x200>
 8003902:	e01b      	b.n	800393c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x248>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7fe fd6f 	bl	80023ec <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	e00e      	b.n	8003930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003912:	f7fe fd6b 	bl	80023ec <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d907      	bls.n	8003930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e150      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
 8003924:	40023800 	.word	0x40023800
 8003928:	42470000 	.word	0x42470000
 800392c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ea      	bne.n	8003912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8097 	beq.w	8003a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a7c      	ldr	r2, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b7a      	ldr	r3, [pc, #488]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b77      	ldr	r3, [pc, #476]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d118      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a73      	ldr	r2, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003992:	f7fe fd2b 	bl	80023ec <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fe fd27 	bl	80023ec <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e10c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x2ea>
 80039c0:	4b64      	ldr	r3, [pc, #400]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a63      	ldr	r2, [pc, #396]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
 80039cc:	e01c      	b.n	8003a08 <HAL_RCC_OscConfig+0x324>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x30c>
 80039d6:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a5e      	ldr	r2, [pc, #376]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039dc:	f043 0304 	orr.w	r3, r3, #4
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a5b      	ldr	r2, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0x324>
 80039f0:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	4a54      	ldr	r2, [pc, #336]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 0304 	bic.w	r3, r3, #4
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe fcec 	bl	80023ec <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fe fce8 	bl	80023ec <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0cb      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0ee      	beq.n	8003a18 <HAL_RCC_OscConfig+0x334>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fcd6 	bl	80023ec <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fe fcd2 	bl	80023ec <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0b5      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ee      	bne.n	8003a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6c:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a1 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a82:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d05c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d141      	bne.n	8003b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fca6 	bl	80023ec <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe fca2 	bl	80023ec <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e087      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe fc7b 	bl	80023ec <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fc77 	bl	80023ec <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e05c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x416>
 8003b18:	e054      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fc64 	bl	80023ec <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fc60 	bl	80023ec <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e045      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x444>
 8003b46:	e03d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e038      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x4ec>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d028      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d121      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cc      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d90c      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d044      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d119      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e067      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4934      	ldr	r1, [pc, #208]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fb92 	bl	80023ec <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe fb8e 	bl	80023ec <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d20c      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe faf2 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08009fd4 	.word	0x08009fd4
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	20000008 	.word	0x20000008

08003da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b094      	sub	sp, #80	; 0x50
 8003da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dac:	2300      	movs	r3, #0
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	2300      	movs	r3, #0
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db8:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d00d      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	f200 80e1 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd2:	e0db      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003dd8:	e0db      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dda:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dde:	e0d8      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de0:	4b6f      	ldr	r3, [pc, #444]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dea:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d063      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	0159      	lsls	r1, r3, #5
 8003e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e24:	0150      	lsls	r0, r2, #5
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	1a51      	subs	r1, r2, r1
 8003e2e:	6139      	str	r1, [r7, #16]
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e44:	4659      	mov	r1, fp
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	4651      	mov	r1, sl
 8003e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4e:	4651      	mov	r1, sl
 8003e50:	018a      	lsls	r2, r1, #6
 8003e52:	4651      	mov	r1, sl
 8003e54:	ebb2 0801 	subs.w	r8, r2, r1
 8003e58:	4659      	mov	r1, fp
 8003e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e72:	4690      	mov	r8, r2
 8003e74:	4699      	mov	r9, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb18 0303 	adds.w	r3, r8, r3
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	462b      	mov	r3, r5
 8003e80:	eb49 0303 	adc.w	r3, r9, r3
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e92:	4629      	mov	r1, r5
 8003e94:	024b      	lsls	r3, r1, #9
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	024a      	lsls	r2, r1, #9
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eb0:	f7fc fed2 	bl	8000c58 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebc:	e058      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	4611      	mov	r1, r2
 8003eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	f04f 0000 	mov.w	r0, #0
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	0159      	lsls	r1, r3, #5
 8003ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eea:	0150      	lsls	r0, r2, #5
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f10:	ebb2 040a 	subs.w	r4, r2, sl
 8003f14:	eb63 050b 	sbc.w	r5, r3, fp
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	00eb      	lsls	r3, r5, #3
 8003f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f26:	00e2      	lsls	r2, r4, #3
 8003f28:	4614      	mov	r4, r2
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	4643      	mov	r3, r8
 8003f2e:	18e3      	adds	r3, r4, r3
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	464b      	mov	r3, r9
 8003f34:	eb45 0303 	adc.w	r3, r5, r3
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f46:	4629      	mov	r1, r5
 8003f48:	028b      	lsls	r3, r1, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f50:	4621      	mov	r1, r4
 8003f52:	028a      	lsls	r2, r1, #10
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	61fa      	str	r2, [r7, #28]
 8003f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f64:	f7fc fe78 	bl	8000c58 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3750      	adds	r7, #80	; 0x50
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	00f42400 	.word	0x00f42400
 8003fa8:	007a1200 	.word	0x007a1200

08003fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff0 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	0a9b      	lsrs	r3, r3, #10
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	08009fe4 	.word	0x08009fe4

08003fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ff0:	f7ff ffdc 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0b5b      	lsrs	r3, r3, #13
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	08009fe4 	.word	0x08009fe4

08004014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e03f      	b.n	80040a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fece 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	; 0x24
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f929 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b08a      	sub	sp, #40	; 0x28
 80040b2:	af02      	add	r7, sp, #8
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d17c      	bne.n	80041c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_Transmit+0x2c>
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e075      	b.n	80041ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_UART_Transmit+0x3e>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e06e      	b.n	80041ca <HAL_UART_Transmit+0x11c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2221      	movs	r2, #33	; 0x21
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004102:	f7fe f973 	bl	80023ec <HAL_GetTick>
 8004106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	88fa      	ldrh	r2, [r7, #6]
 800410c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411c:	d108      	bne.n	8004130 <HAL_UART_Transmit+0x82>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e003      	b.n	8004138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004140:	e02a      	b.n	8004198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f840 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e036      	b.n	80041ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	3302      	adds	r3, #2
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e007      	b.n	800418a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	3301      	adds	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1cf      	bne.n	8004142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2140      	movs	r1, #64	; 0x40
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f810 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e006      	b.n	80041ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b090      	sub	sp, #64	; 0x40
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	e050      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d04c      	beq.n	8004286 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f2:	f7fe f8fb 	bl	80023ec <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041fe:	429a      	cmp	r2, r3
 8004200:	d241      	bcs.n	8004286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004222:	637a      	str	r2, [r7, #52]	; 0x34
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	613b      	str	r3, [r7, #16]
   return(result);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004256:	623a      	str	r2, [r7, #32]
 8004258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	69f9      	ldr	r1, [r7, #28]
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	61bb      	str	r3, [r7, #24]
   return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e00f      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d09f      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3740      	adds	r7, #64	; 0x40
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b0c0      	sub	sp, #256	; 0x100
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	68d9      	ldr	r1, [r3, #12]
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	ea40 0301 	orr.w	r3, r0, r1
 80042d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004308:	f021 010c 	bic.w	r1, r1, #12
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004316:	430b      	orrs	r3, r1
 8004318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	6999      	ldr	r1, [r3, #24]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	ea40 0301 	orr.w	r3, r0, r1
 8004336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b8f      	ldr	r3, [pc, #572]	; (800457c <UART_SetConfig+0x2cc>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d005      	beq.n	8004350 <UART_SetConfig+0xa0>
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8d      	ldr	r3, [pc, #564]	; (8004580 <UART_SetConfig+0x2d0>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d104      	bne.n	800435a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7ff fe4c 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8004354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004358:	e003      	b.n	8004362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435a:	f7ff fe33 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 800435e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	f040 810c 	bne.w	8004588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800437e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	1891      	adds	r1, r2, r2
 8004388:	65b9      	str	r1, [r7, #88]	; 0x58
 800438a:	415b      	adcs	r3, r3
 800438c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800438e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004392:	4621      	mov	r1, r4
 8004394:	eb12 0801 	adds.w	r8, r2, r1
 8004398:	4629      	mov	r1, r5
 800439a:	eb43 0901 	adc.w	r9, r3, r1
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b2:	4690      	mov	r8, r2
 80043b4:	4699      	mov	r9, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	eb18 0303 	adds.w	r3, r8, r3
 80043bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043c0:	462b      	mov	r3, r5
 80043c2:	eb49 0303 	adc.w	r3, r9, r3
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043de:	460b      	mov	r3, r1
 80043e0:	18db      	adds	r3, r3, r3
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
 80043e4:	4613      	mov	r3, r2
 80043e6:	eb42 0303 	adc.w	r3, r2, r3
 80043ea:	657b      	str	r3, [r7, #84]	; 0x54
 80043ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f4:	f7fc fc30 	bl	8000c58 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <UART_SetConfig+0x2d4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004420:	415b      	adcs	r3, r3
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004428:	4641      	mov	r1, r8
 800442a:	eb12 0a01 	adds.w	sl, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb43 0b01 	adc.w	fp, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004448:	4692      	mov	sl, r2
 800444a:	469b      	mov	fp, r3
 800444c:	4643      	mov	r3, r8
 800444e:	eb1a 0303 	adds.w	r3, sl, r3
 8004452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004456:	464b      	mov	r3, r9
 8004458:	eb4b 0303 	adc.w	r3, fp, r3
 800445c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800446c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
 8004482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800448a:	f7fc fbe5 	bl	8000c58 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4611      	mov	r1, r2
 8004494:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <UART_SetConfig+0x2d4>)
 8004496:	fba3 2301 	umull	r2, r3, r3, r1
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2264      	movs	r2, #100	; 0x64
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	1acb      	subs	r3, r1, r3
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <UART_SetConfig+0x2d4>)
 80044ac:	fba3 2302 	umull	r2, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044b8:	441c      	add	r4, r3
 80044ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d4:	415b      	adcs	r3, r3
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6339      	str	r1, [r7, #48]	; 0x30
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004510:	464b      	mov	r3, r9
 8004512:	460a      	mov	r2, r1
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800452c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004530:	460b      	mov	r3, r1
 8004532:	18db      	adds	r3, r3, r3
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
 8004536:	4613      	mov	r3, r2
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004546:	f7fc fb87 	bl	8000c58 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <UART_SetConfig+0x2d4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <UART_SetConfig+0x2d4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 0207 	and.w	r2, r3, #7
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4422      	add	r2, r4
 8004576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004578:	e105      	b.n	8004786 <UART_SetConfig+0x4d6>
 800457a:	bf00      	nop
 800457c:	40011000 	.word	0x40011000
 8004580:	40011400 	.word	0x40011400
 8004584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	6239      	str	r1, [r7, #32]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045aa:	4641      	mov	r1, r8
 80045ac:	1854      	adds	r4, r2, r1
 80045ae:	4649      	mov	r1, r9
 80045b0:	eb43 0501 	adc.w	r5, r3, r1
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	00eb      	lsls	r3, r5, #3
 80045be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c2:	00e2      	lsls	r2, r4, #3
 80045c4:	4614      	mov	r4, r2
 80045c6:	461d      	mov	r5, r3
 80045c8:	4643      	mov	r3, r8
 80045ca:	18e3      	adds	r3, r4, r3
 80045cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045d0:	464b      	mov	r3, r9
 80045d2:	eb45 0303 	adc.w	r3, r5, r3
 80045d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045f6:	4629      	mov	r1, r5
 80045f8:	008b      	lsls	r3, r1, #2
 80045fa:	4621      	mov	r1, r4
 80045fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004600:	4621      	mov	r1, r4
 8004602:	008a      	lsls	r2, r1, #2
 8004604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004608:	f7fc fb26 	bl	8000c58 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b60      	ldr	r3, [pc, #384]	; (8004794 <UART_SetConfig+0x4e4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	61b9      	str	r1, [r7, #24]
 8004634:	415b      	adcs	r3, r3
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800463c:	4641      	mov	r1, r8
 800463e:	1851      	adds	r1, r2, r1
 8004640:	6139      	str	r1, [r7, #16]
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004654:	4659      	mov	r1, fp
 8004656:	00cb      	lsls	r3, r1, #3
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465e:	4651      	mov	r1, sl
 8004660:	00ca      	lsls	r2, r1, #3
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	4603      	mov	r3, r0
 8004668:	4642      	mov	r2, r8
 800466a:	189b      	adds	r3, r3, r2
 800466c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004670:	464b      	mov	r3, r9
 8004672:	460a      	mov	r2, r1
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	67bb      	str	r3, [r7, #120]	; 0x78
 8004686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004694:	4649      	mov	r1, r9
 8004696:	008b      	lsls	r3, r1, #2
 8004698:	4641      	mov	r1, r8
 800469a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469e:	4641      	mov	r1, r8
 80046a0:	008a      	lsls	r2, r1, #2
 80046a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046a6:	f7fc fad7 	bl	8000c58 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4b39      	ldr	r3, [pc, #228]	; (8004794 <UART_SetConfig+0x4e4>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a34      	ldr	r2, [pc, #208]	; (8004794 <UART_SetConfig+0x4e4>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ce:	441c      	add	r4, r3
 80046d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d4:	2200      	movs	r2, #0
 80046d6:	673b      	str	r3, [r7, #112]	; 0x70
 80046d8:	677a      	str	r2, [r7, #116]	; 0x74
 80046da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046de:	4642      	mov	r2, r8
 80046e0:	464b      	mov	r3, r9
 80046e2:	1891      	adds	r1, r2, r2
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	415b      	adcs	r3, r3
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ee:	4641      	mov	r1, r8
 80046f0:	1851      	adds	r1, r2, r1
 80046f2:	6039      	str	r1, [r7, #0]
 80046f4:	4649      	mov	r1, r9
 80046f6:	414b      	adcs	r3, r1
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004706:	4659      	mov	r1, fp
 8004708:	00cb      	lsls	r3, r1, #3
 800470a:	4651      	mov	r1, sl
 800470c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004710:	4651      	mov	r1, sl
 8004712:	00ca      	lsls	r2, r1, #3
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	4603      	mov	r3, r0
 800471a:	4642      	mov	r2, r8
 800471c:	189b      	adds	r3, r3, r2
 800471e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004720:	464b      	mov	r3, r9
 8004722:	460a      	mov	r2, r1
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	663b      	str	r3, [r7, #96]	; 0x60
 8004734:	667a      	str	r2, [r7, #100]	; 0x64
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004742:	4649      	mov	r1, r9
 8004744:	008b      	lsls	r3, r1, #2
 8004746:	4641      	mov	r1, r8
 8004748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474c:	4641      	mov	r1, r8
 800474e:	008a      	lsls	r2, r1, #2
 8004750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004754:	f7fc fa80 	bl	8000c58 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <UART_SetConfig+0x4e4>)
 800475e:	fba3 1302 	umull	r1, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2164      	movs	r1, #100	; 0x64
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	3332      	adds	r3, #50	; 0x32
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <UART_SetConfig+0x4e4>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4422      	add	r2, r4
 8004784:	609a      	str	r2, [r3, #8]
}
 8004786:	bf00      	nop
 8004788:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004792:	bf00      	nop
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <__NVIC_SetPriority>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0a      	blt.n	80047c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	; (80047e4 <__NVIC_SetPriority+0x4c>)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047c0:	e00a      	b.n	80047d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <__NVIC_SetPriority+0x50>)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3b04      	subs	r3, #4
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	761a      	strb	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000e100 	.word	0xe000e100
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047f0:	2100      	movs	r1, #0
 80047f2:	f06f 0004 	mvn.w	r0, #4
 80047f6:	f7ff ffcf 	bl	8004798 <__NVIC_SetPriority>
#endif
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	603b      	str	r3, [r7, #0]
  return(result);
 800480c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004812:	f06f 0305 	mvn.w	r3, #5
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e00c      	b.n	8004834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <osKernelInitialize+0x44>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d105      	bne.n	800482e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <osKernelInitialize+0x44>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e002      	b.n	8004834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004834:	687b      	ldr	r3, [r7, #4]
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000410 	.word	0x20000410

08004848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484e:	f3ef 8305 	mrs	r3, IPSR
 8004852:	603b      	str	r3, [r7, #0]
  return(result);
 8004854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <osKernelStart+0x1a>
    stat = osErrorISR;
 800485a:	f06f 0305 	mvn.w	r3, #5
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	e010      	b.n	8004884 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <osKernelStart+0x48>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d109      	bne.n	800487e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800486a:	f7ff ffbf 	bl	80047ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <osKernelStart+0x48>)
 8004870:	2202      	movs	r2, #2
 8004872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004874:	f000 ffea 	bl	800584c <vTaskStartScheduler>
      stat = osOK;
 8004878:	2300      	movs	r3, #0
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	e002      	b.n	8004884 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004884:	687b      	ldr	r3, [r7, #4]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000410 	.word	0x20000410

08004894 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800489c:	f3ef 8305 	mrs	r3, IPSR
 80048a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <osDelay+0x1c>
    stat = osErrorISR;
 80048a8:	f06f 0305 	mvn.w	r3, #5
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e007      	b.n	80048c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 ff92 	bl	80057e4 <vTaskDelay>
    }
  }

  return (stat);
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <vApplicationGetIdleTaskMemory+0x30>)
 80048e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000414 	.word	0x20000414
 80048fc:	200004d0 	.word	0x200004d0

08004900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a07      	ldr	r2, [pc, #28]	; (800492c <vApplicationGetTimerTaskMemory+0x2c>)
 8004910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <vApplicationGetTimerTaskMemory+0x30>)
 8004916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	200006d0 	.word	0x200006d0
 8004930:	2000078c 	.word	0x2000078c

08004934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f103 0208 	add.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f103 0208 	add.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f103 0208 	add.w	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d103      	bne.n	80049f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e00c      	b.n	8004a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3308      	adds	r3, #8
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e002      	b.n	8004a04 <vListInsert+0x2e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d2f6      	bcs.n	80049fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6852      	ldr	r2, [r2, #4]
 8004a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d103      	bne.n	8004a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ac6:	f002 f875 	bl	8006bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	441a      	add	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	3b01      	subs	r3, #1
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	441a      	add	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d114      	bne.n	8004b46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01a      	beq.n	8004b5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3310      	adds	r3, #16
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 f929 	bl	8005d80 <xTaskRemoveFromEventList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d012      	beq.n	8004b5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <xQueueGenericReset+0xcc>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	e009      	b.n	8004b5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3310      	adds	r3, #16
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fef2 	bl	8004934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3324      	adds	r3, #36	; 0x24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff feed 	bl	8004934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b5a:	f002 f85b 	bl	8006c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b5e:	2301      	movs	r3, #1
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08e      	sub	sp, #56	; 0x38
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <xQueueGenericCreateStatic+0x52>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <xQueueGenericCreateStatic+0x56>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <xQueueGenericCreateStatic+0x58>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	623b      	str	r3, [r7, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <xQueueGenericCreateStatic+0x7e>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <xQueueGenericCreateStatic+0x82>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueGenericCreateStatic+0x84>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61fb      	str	r3, [r7, #28]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c0a:	2350      	movs	r3, #80	; 0x50
 8004c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d00a      	beq.n	8004c2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61bb      	str	r3, [r7, #24]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00d      	beq.n	8004c52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4613      	mov	r3, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f805 	bl	8004c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3730      	adds	r7, #48	; 0x30
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e002      	b.n	8004c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	69b8      	ldr	r0, [r7, #24]
 8004c8e:	f7ff ff05 	bl	8004a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	; 0x38
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueGenericSend+0x32>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <xQueueGenericSend+0x40>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <xQueueGenericSend+0x44>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <xQueueGenericSend+0x46>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xQueueGenericSend+0x60>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSend+0x6e>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSend+0x72>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSend+0x74>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	623b      	str	r3, [r7, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d32:	f001 f9e7 	bl	8006104 <xTaskGetSchedulerState>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <xQueueGenericSend+0x9e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <xQueueGenericSend+0xa2>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <xQueueGenericSend+0xa4>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	61fb      	str	r3, [r7, #28]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d62:	f001 ff27 	bl	8006bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <xQueueGenericSend+0xd4>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d129      	bne.n	8004dcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d7e:	f000 fa0b 	bl	8005198 <prvCopyDataToQueue>
 8004d82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fff5 	bl	8005d80 <xTaskRemoveFromEventList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <xQueueGenericSend+0x1f8>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	e00a      	b.n	8004dc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004db4:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <xQueueGenericSend+0x1f8>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dc4:	f001 ff26 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e063      	b.n	8004e94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dd2:	f001 ff1f 	bl	8006c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e05c      	b.n	8004e94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f82f 	bl	8005e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dee:	f001 ff11 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004df2:	f000 fd9b 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df6:	f001 fedd 	bl	8006bb4 <vPortEnterCritical>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d103      	bne.n	8004e10 <xQueueGenericSend+0x16c>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSend+0x182>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e26:	f001 fef5 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e2a:	1d3a      	adds	r2, r7, #4
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 f81e 	bl	8005e74 <xTaskCheckForTimeOut>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d124      	bne.n	8004e88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e40:	f000 faa2 	bl	8005388 <prvIsQueueFull>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 ff44 	bl	8005ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5a:	f000 fa2d 	bl	80052b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e5e:	f000 fd73 	bl	8005948 <xTaskResumeAll>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f af7c 	bne.w	8004d62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <xQueueGenericSend+0x1f8>)
 8004e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	e772      	b.n	8004d62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7e:	f000 fa1b 	bl	80052b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e82:	f000 fd61 	bl	8005948 <xTaskResumeAll>
 8004e86:	e76c      	b.n	8004d62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8a:	f000 fa15 	bl	80052b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e8e:	f000 fd5b 	bl	8005948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3738      	adds	r7, #56	; 0x38
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b090      	sub	sp, #64	; 0x40
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <xQueueGenericSendFromISR+0x3c>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <xQueueGenericSendFromISR+0x40>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <xQueueGenericSendFromISR+0x42>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d103      	bne.n	8004f0a <xQueueGenericSendFromISR+0x6a>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <xQueueGenericSendFromISR+0x6e>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <xQueueGenericSendFromISR+0x70>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f2a:	f001 ff25 	bl	8006d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fa      	str	r2, [r7, #28]
 8004f44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <xQueueGenericSendFromISR+0xbc>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d12f      	bne.n	8004fbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f72:	f000 f911 	bl	8005198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d112      	bne.n	8004fa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	3324      	adds	r3, #36	; 0x24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fef7 	bl	8005d80 <xTaskRemoveFromEventList>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e007      	b.n	8004fb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004faa:	3301      	adds	r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	b25a      	sxtb	r2, r3
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fba:	e001      	b.n	8004fc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3740      	adds	r7, #64	; 0x40
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <xQueueReceive+0x30>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	623b      	str	r3, [r7, #32]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <xQueueReceive+0x3e>
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <xQueueReceive+0x42>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <xQueueReceive+0x44>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <xQueueReceive+0x5e>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	61fb      	str	r3, [r7, #28]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005036:	f001 f865 	bl	8006104 <xTaskGetSchedulerState>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <xQueueReceive+0x6e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <xQueueReceive+0x72>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueReceive+0x74>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xQueueReceive+0x8e>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61bb      	str	r3, [r7, #24]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005066:	f001 fda5 	bl	8006bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01f      	beq.n	80050b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507a:	f000 f8f7 	bl	800526c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	1e5a      	subs	r2, r3, #1
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00f      	beq.n	80050ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	3310      	adds	r3, #16
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fe74 	bl	8005d80 <xTaskRemoveFromEventList>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800509e:	4b3d      	ldr	r3, [pc, #244]	; (8005194 <xQueueReceive+0x1bc>)
 80050a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ae:	f001 fdb1 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e069      	b.n	800518a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050bc:	f001 fdaa 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e062      	b.n	800518a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ca:	f107 0310 	add.w	r3, r7, #16
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 feba 	bl	8005e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d8:	f001 fd9c 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050dc:	f000 fc26 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050e0:	f001 fd68 	bl	8006bb4 <vPortEnterCritical>
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d103      	bne.n	80050fa <xQueueReceive+0x122>
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005100:	b25b      	sxtb	r3, r3
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d103      	bne.n	8005110 <xQueueReceive+0x138>
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005110:	f001 fd80 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005114:	1d3a      	adds	r2, r7, #4
 8005116:	f107 0310 	add.w	r3, r7, #16
 800511a:	4611      	mov	r1, r2
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fea9 	bl	8005e74 <xTaskCheckForTimeOut>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d123      	bne.n	8005170 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512a:	f000 f917 	bl	800535c <prvIsQueueEmpty>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fdcf 	bl	8005ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005144:	f000 f8b8 	bl	80052b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005148:	f000 fbfe 	bl	8005948 <xTaskResumeAll>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d189      	bne.n	8005066 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <xQueueReceive+0x1bc>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	e780      	b.n	8005066 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005166:	f000 f8a7 	bl	80052b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800516a:	f000 fbed 	bl	8005948 <xTaskResumeAll>
 800516e:	e77a      	b.n	8005066 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f000 f8a1 	bl	80052b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005176:	f000 fbe7 	bl	8005948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800517a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517c:	f000 f8ee 	bl	800535c <prvIsQueueEmpty>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f43f af6f 	beq.w	8005066 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800518a:	4618      	mov	r0, r3
 800518c:	3730      	adds	r7, #48	; 0x30
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10d      	bne.n	80051d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d14d      	bne.n	800525a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 ffbc 	bl	8006140 <xTaskPriorityDisinherit>
 80051c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	e043      	b.n	800525a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d119      	bne.n	800520c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6858      	ldr	r0, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	461a      	mov	r2, r3
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	f002 f9eb 	bl	80075be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d32b      	bcc.n	800525a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	e026      	b.n	800525a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68d8      	ldr	r0, [r3, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	f002 f9d1 	bl	80075be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	425b      	negs	r3, r3
 8005226:	441a      	add	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d207      	bcs.n	8005248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	425b      	negs	r3, r3
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d105      	bne.n	800525a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	3b01      	subs	r3, #1
 8005258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d303      	bcc.n	80052a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68d9      	ldr	r1, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	461a      	mov	r2, r3
 80052aa:	6838      	ldr	r0, [r7, #0]
 80052ac:	f002 f987 	bl	80075be <memcpy>
	}
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052c0:	f001 fc78 	bl	8006bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052cc:	e011      	b.n	80052f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d012      	beq.n	80052fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3324      	adds	r3, #36	; 0x24
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fd50 	bl	8005d80 <xTaskRemoveFromEventList>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052e6:	f000 fe27 	bl	8005f38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dce9      	bgt.n	80052ce <prvUnlockQueue+0x16>
 80052fa:	e000      	b.n	80052fe <prvUnlockQueue+0x46>
					break;
 80052fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	22ff      	movs	r2, #255	; 0xff
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005306:	f001 fc85 	bl	8006c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800530a:	f001 fc53 	bl	8006bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005316:	e011      	b.n	800533c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d012      	beq.n	8005346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3310      	adds	r3, #16
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fd2b 	bl	8005d80 <xTaskRemoveFromEventList>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005330:	f000 fe02 	bl	8005f38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	3b01      	subs	r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800533c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005340:	2b00      	cmp	r3, #0
 8005342:	dce9      	bgt.n	8005318 <prvUnlockQueue+0x60>
 8005344:	e000      	b.n	8005348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	22ff      	movs	r2, #255	; 0xff
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005350:	f001 fc60 	bl	8006c14 <vPortExitCritical>
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005364:	f001 fc26 	bl	8006bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e001      	b.n	800537a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f001 fc4b 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005390:	f001 fc10 	bl	8006bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539c:	429a      	cmp	r2, r3
 800539e:	d102      	bne.n	80053a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e001      	b.n	80053aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053aa:	f001 fc33 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 80053ae:	68fb      	ldr	r3, [r7, #12]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e014      	b.n	80053f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053c8:	4a0f      	ldr	r2, [pc, #60]	; (8005408 <vQueueAddToRegistry+0x50>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053d4:	490c      	ldr	r1, [pc, #48]	; (8005408 <vQueueAddToRegistry+0x50>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <vQueueAddToRegistry+0x50>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053ea:	e006      	b.n	80053fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b07      	cmp	r3, #7
 80053f6:	d9e7      	bls.n	80053c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000b8c 	.word	0x20000b8c

0800540c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800541c:	f001 fbca 	bl	8006bb4 <vPortEnterCritical>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005426:	b25b      	sxtb	r3, r3
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d103      	bne.n	8005436 <vQueueWaitForMessageRestricted+0x2a>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800543c:	b25b      	sxtb	r3, r3
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d103      	bne.n	800544c <vQueueWaitForMessageRestricted+0x40>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544c:	f001 fbe2 	bl	8006c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3324      	adds	r3, #36	; 0x24
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fc61 	bl	8005d28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7ff ff26 	bl	80052b8 <prvUnlockQueue>
	}
 800546c:	bf00      	nop
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08e      	sub	sp, #56	; 0x38
 8005478:	af04      	add	r7, sp, #16
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	623b      	str	r3, [r7, #32]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xTaskCreateStatic+0x46>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61fb      	str	r3, [r7, #28]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ba:	23bc      	movs	r3, #188	; 0xbc
 80054bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2bbc      	cmp	r3, #188	; 0xbc
 80054c2:	d00a      	beq.n	80054da <xTaskCreateStatic+0x66>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	61bb      	str	r3, [r7, #24]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01e      	beq.n	8005520 <xTaskCreateStatic+0xac>
 80054e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054fa:	2300      	movs	r3, #0
 80054fc:	9303      	str	r3, [sp, #12]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f850 	bl	80055b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800551a:	f000 f8f3 	bl	8005704 <prvAddNewTaskToReadyList>
 800551e:	e001      	b.n	8005524 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005524:	697b      	ldr	r3, [r7, #20]
	}
 8005526:	4618      	mov	r0, r3
 8005528:	3728      	adds	r7, #40	; 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08c      	sub	sp, #48	; 0x30
 8005532:	af04      	add	r7, sp, #16
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f001 fc58 	bl	8006df8 <pvPortMalloc>
 8005548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005550:	20bc      	movs	r0, #188	; 0xbc
 8005552:	f001 fc51 	bl	8006df8 <pvPortMalloc>
 8005556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
 8005564:	e005      	b.n	8005572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005566:	6978      	ldr	r0, [r7, #20]
 8005568:	f001 fd12 	bl	8006f90 <vPortFree>
 800556c:	e001      	b.n	8005572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d017      	beq.n	80055a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005580:	88fa      	ldrh	r2, [r7, #6]
 8005582:	2300      	movs	r3, #0
 8005584:	9303      	str	r3, [sp, #12]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f80e 	bl	80055b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800559c:	69f8      	ldr	r0, [r7, #28]
 800559e:	f000 f8b1 	bl	8005704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	e002      	b.n	80055ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055ae:	69bb      	ldr	r3, [r7, #24]
	}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	461a      	mov	r2, r3
 80055d0:	21a5      	movs	r1, #165	; 0xa5
 80055d2:	f002 f802 	bl	80075da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	3b01      	subs	r3, #1
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	617b      	str	r3, [r7, #20]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01f      	beq.n	8005656 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	e012      	b.n	8005642 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	7819      	ldrb	r1, [r3, #0]
 8005624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	3334      	adds	r3, #52	; 0x34
 800562c:	460a      	mov	r2, r1
 800562e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b0f      	cmp	r3, #15
 8005646:	d9e9      	bls.n	800561c <prvInitialiseNewTask+0x64>
 8005648:	e000      	b.n	800564c <prvInitialiseNewTask+0x94>
			{
				break;
 800564a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005654:	e003      	b.n	800565e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	2b37      	cmp	r3, #55	; 0x37
 8005662:	d901      	bls.n	8005668 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005664:	2337      	movs	r3, #55	; 0x37
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2200      	movs	r2, #0
 8005678:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	3304      	adds	r3, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff f978 	bl	8004974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	3318      	adds	r3, #24
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff f973 	bl	8004974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	3354      	adds	r3, #84	; 0x54
 80056b8:	2260      	movs	r2, #96	; 0x60
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 ff8c 	bl	80075da <memset>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <prvInitialiseNewTask+0x140>)
 80056c6:	659a      	str	r2, [r3, #88]	; 0x58
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <prvInitialiseNewTask+0x144>)
 80056cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	4a0b      	ldr	r2, [pc, #44]	; (8005700 <prvInitialiseNewTask+0x148>)
 80056d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	69b8      	ldr	r0, [r7, #24]
 80056da:	f001 f941 	bl	8006960 <pxPortInitialiseStack>
 80056de:	4602      	mov	r2, r0
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f0:	bf00      	nop
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	0800a014 	.word	0x0800a014
 80056fc:	0800a034 	.word	0x0800a034
 8005700:	08009ff4 	.word	0x08009ff4

08005704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800570c:	f001 fa52 	bl	8006bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005710:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <prvAddNewTaskToReadyList+0xc4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a2c      	ldr	r2, [pc, #176]	; (80057c8 <prvAddNewTaskToReadyList+0xc4>)
 8005718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800571a:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005722:	4a2a      	ldr	r2, [pc, #168]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005728:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <prvAddNewTaskToReadyList+0xc4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d110      	bne.n	8005752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005730:	f000 fc26 	bl	8005f80 <prvInitialiseTaskLists>
 8005734:	e00d      	b.n	8005752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005736:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <prvAddNewTaskToReadyList+0xcc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800573e:	4b23      	ldr	r3, [pc, #140]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d802      	bhi.n	8005752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <prvAddNewTaskToReadyList+0xd0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <prvAddNewTaskToReadyList+0xd0>)
 800575a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <prvAddNewTaskToReadyList+0xd0>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <prvAddNewTaskToReadyList+0xd4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d903      	bls.n	8005778 <prvAddNewTaskToReadyList+0x74>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <prvAddNewTaskToReadyList+0xd4>)
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <prvAddNewTaskToReadyList+0xd8>)
 8005786:	441a      	add	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7ff f8fd 	bl	800498e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005794:	f001 fa3e 	bl	8006c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <prvAddNewTaskToReadyList+0xcc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00e      	beq.n	80057be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d207      	bcs.n	80057be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <prvAddNewTaskToReadyList+0xdc>)
 80057b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	200010a0 	.word	0x200010a0
 80057cc:	20000bcc 	.word	0x20000bcc
 80057d0:	200010ac 	.word	0x200010ac
 80057d4:	200010bc 	.word	0x200010bc
 80057d8:	200010a8 	.word	0x200010a8
 80057dc:	20000bd0 	.word	0x20000bd0
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <vTaskDelay+0x60>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <vTaskDelay+0x30>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60bb      	str	r3, [r7, #8]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005814:	f000 f88a 	bl	800592c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fcfe 	bl	800621c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005820:	f000 f892 	bl	8005948 <xTaskResumeAll>
 8005824:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <vTaskDelay+0x64>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	200010c8 	.word	0x200010c8
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800585a:	463a      	mov	r2, r7
 800585c:	1d39      	adds	r1, r7, #4
 800585e:	f107 0308 	add.w	r3, r7, #8
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff f832 	bl	80048cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	9202      	str	r2, [sp, #8]
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	2300      	movs	r3, #0
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	2300      	movs	r3, #0
 8005878:	460a      	mov	r2, r1
 800587a:	4924      	ldr	r1, [pc, #144]	; (800590c <vTaskStartScheduler+0xc0>)
 800587c:	4824      	ldr	r0, [pc, #144]	; (8005910 <vTaskStartScheduler+0xc4>)
 800587e:	f7ff fdf9 	bl	8005474 <xTaskCreateStatic>
 8005882:	4603      	mov	r3, r0
 8005884:	4a23      	ldr	r2, [pc, #140]	; (8005914 <vTaskStartScheduler+0xc8>)
 8005886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005888:	4b22      	ldr	r3, [pc, #136]	; (8005914 <vTaskStartScheduler+0xc8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e001      	b.n	800589a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058a0:	f000 fd10 	bl	80062c4 <xTimerCreateTimerTask>
 80058a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d11b      	bne.n	80058e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	613b      	str	r3, [r7, #16]
}
 80058be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c0:	4b15      	ldr	r3, [pc, #84]	; (8005918 <vTaskStartScheduler+0xcc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3354      	adds	r3, #84	; 0x54
 80058c6:	4a15      	ldr	r2, [pc, #84]	; (800591c <vTaskStartScheduler+0xd0>)
 80058c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <vTaskStartScheduler+0xd4>)
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295
 80058d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <vTaskStartScheduler+0xd8>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <vTaskStartScheduler+0xdc>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058de:	f001 f8c7 	bl	8006a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058e2:	e00e      	b.n	8005902 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d10a      	bne.n	8005902 <vTaskStartScheduler+0xb6>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <vTaskStartScheduler+0xb4>
}
 8005902:	bf00      	nop
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	08009fbc 	.word	0x08009fbc
 8005910:	08005f51 	.word	0x08005f51
 8005914:	200010c4 	.word	0x200010c4
 8005918:	20000bcc 	.word	0x20000bcc
 800591c:	20000014 	.word	0x20000014
 8005920:	200010c0 	.word	0x200010c0
 8005924:	200010ac 	.word	0x200010ac
 8005928:	200010a4 	.word	0x200010a4

0800592c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <vTaskSuspendAll+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a03      	ldr	r2, [pc, #12]	; (8005944 <vTaskSuspendAll+0x18>)
 8005938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	200010c8 	.word	0x200010c8

08005948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005956:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <xTaskResumeAll+0x118>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <xTaskResumeAll+0x2c>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	603b      	str	r3, [r7, #0]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005974:	f001 f91e 	bl	8006bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <xTaskResumeAll+0x118>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	4a38      	ldr	r2, [pc, #224]	; (8005a60 <xTaskResumeAll+0x118>)
 8005980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005982:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <xTaskResumeAll+0x118>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d162      	bne.n	8005a50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <xTaskResumeAll+0x11c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d05e      	beq.n	8005a50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005992:	e02f      	b.n	80059f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005994:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <xTaskResumeAll+0x120>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3318      	adds	r3, #24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff f851 	bl	8004a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff f84c 	bl	8004a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <xTaskResumeAll+0x124>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d903      	bls.n	80059c4 <xTaskResumeAll+0x7c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <xTaskResumeAll+0x124>)
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4a27      	ldr	r2, [pc, #156]	; (8005a70 <xTaskResumeAll+0x128>)
 80059d2:	441a      	add	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fe ffd7 	bl	800498e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <xTaskResumeAll+0x12c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059ee:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <xTaskResumeAll+0x130>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059f4:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <xTaskResumeAll+0x120>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1cb      	bne.n	8005994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a02:	f000 fb5f 	bl	80060c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a06:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <xTaskResumeAll+0x134>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f000 f847 	bl	8005aa4 <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <xTaskResumeAll+0x130>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f1      	bne.n	8005a12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <xTaskResumeAll+0x134>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a34:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <xTaskResumeAll+0x130>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <xTaskResumeAll+0x138>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a50:	f001 f8e0 	bl	8006c14 <vPortExitCritical>

	return xAlreadyYielded;
 8005a54:	68bb      	ldr	r3, [r7, #8]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	200010c8 	.word	0x200010c8
 8005a64:	200010a0 	.word	0x200010a0
 8005a68:	20001060 	.word	0x20001060
 8005a6c:	200010a8 	.word	0x200010a8
 8005a70:	20000bd0 	.word	0x20000bd0
 8005a74:	20000bcc 	.word	0x20000bcc
 8005a78:	200010b4 	.word	0x200010b4
 8005a7c:	200010b0 	.word	0x200010b0
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <xTaskGetTickCount+0x1c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a90:	687b      	ldr	r3, [r7, #4]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	200010a4 	.word	0x200010a4

08005aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aae:	4b4f      	ldr	r3, [pc, #316]	; (8005bec <xTaskIncrementTick+0x148>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 808f 	bne.w	8005bd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <xTaskIncrementTick+0x14c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac0:	4a4b      	ldr	r2, [pc, #300]	; (8005bf0 <xTaskIncrementTick+0x14c>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d120      	bne.n	8005b0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <xTaskIncrementTick+0x48>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	603b      	str	r3, [r7, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xTaskIncrementTick+0x46>
 8005aec:	4b41      	ldr	r3, [pc, #260]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <xTaskIncrementTick+0x154>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3f      	ldr	r2, [pc, #252]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <xTaskIncrementTick+0x154>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4b3e      	ldr	r3, [pc, #248]	; (8005bfc <xTaskIncrementTick+0x158>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	4a3d      	ldr	r2, [pc, #244]	; (8005bfc <xTaskIncrementTick+0x158>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	f000 fadb 	bl	80060c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b0e:	4b3c      	ldr	r3, [pc, #240]	; (8005c00 <xTaskIncrementTick+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d349      	bcc.n	8005bac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b18:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b22:	4b37      	ldr	r3, [pc, #220]	; (8005c00 <xTaskIncrementTick+0x15c>)
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	601a      	str	r2, [r3, #0]
					break;
 8005b2a:	e03f      	b.n	8005bac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2c:	4b31      	ldr	r3, [pc, #196]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d203      	bcs.n	8005b4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b44:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <xTaskIncrementTick+0x15c>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b4a:	e02f      	b.n	8005bac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe ff79 	bl	8004a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3318      	adds	r3, #24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe ff70 	bl	8004a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <xTaskIncrementTick+0x160>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d903      	bls.n	8005b7c <xTaskIncrementTick+0xd8>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <xTaskIncrementTick+0x160>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <xTaskIncrementTick+0x164>)
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7fe fefb 	bl	800498e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3b8      	bcc.n	8005b18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005baa:	e7b5      	b.n	8005b18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	4915      	ldr	r1, [pc, #84]	; (8005c08 <xTaskIncrementTick+0x164>)
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d901      	bls.n	8005bc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <xTaskIncrementTick+0x16c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e004      	b.n	8005be0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <xTaskIncrementTick+0x170>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <xTaskIncrementTick+0x170>)
 8005bde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005be0:	697b      	ldr	r3, [r7, #20]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200010c8 	.word	0x200010c8
 8005bf0:	200010a4 	.word	0x200010a4
 8005bf4:	20001058 	.word	0x20001058
 8005bf8:	2000105c 	.word	0x2000105c
 8005bfc:	200010b8 	.word	0x200010b8
 8005c00:	200010c0 	.word	0x200010c0
 8005c04:	200010a8 	.word	0x200010a8
 8005c08:	20000bd0 	.word	0x20000bd0
 8005c0c:	20000bcc 	.word	0x20000bcc
 8005c10:	200010b4 	.word	0x200010b4
 8005c14:	200010b0 	.word	0x200010b0

08005c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c1e:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <vTaskSwitchContext+0xb0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c26:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <vTaskSwitchContext+0xb4>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c2c:	e046      	b.n	8005cbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005c2e:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <vTaskSwitchContext+0xb4>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <vTaskSwitchContext+0xb8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e010      	b.n	8005c5e <vTaskSwitchContext+0x46>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	607b      	str	r3, [r7, #4]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <vTaskSwitchContext+0x3e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	491d      	ldr	r1, [pc, #116]	; (8005cd4 <vTaskSwitchContext+0xbc>)
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0e4      	beq.n	8005c3c <vTaskSwitchContext+0x24>
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <vTaskSwitchContext+0xbc>)
 8005c7e:	4413      	add	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	3308      	adds	r3, #8
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d104      	bne.n	8005ca2 <vTaskSwitchContext+0x8a>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <vTaskSwitchContext+0xc0>)
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <vTaskSwitchContext+0xb8>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <vTaskSwitchContext+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3354      	adds	r3, #84	; 0x54
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <vTaskSwitchContext+0xc4>)
 8005cba:	6013      	str	r3, [r2, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	200010c8 	.word	0x200010c8
 8005ccc:	200010b4 	.word	0x200010b4
 8005cd0:	200010a8 	.word	0x200010a8
 8005cd4:	20000bd0 	.word	0x20000bd0
 8005cd8:	20000bcc 	.word	0x20000bcc
 8005cdc:	20000014 	.word	0x20000014

08005ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	60fb      	str	r3, [r7, #12]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <vTaskPlaceOnEventList+0x44>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3318      	adds	r3, #24
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fe fe61 	bl	80049d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d14:	2101      	movs	r1, #1
 8005d16:	6838      	ldr	r0, [r7, #0]
 8005d18:	f000 fa80 	bl	800621c <prvAddCurrentTaskToDelayedList>
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000bcc 	.word	0x20000bcc

08005d28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	617b      	str	r3, [r7, #20]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3318      	adds	r3, #24
 8005d56:	4619      	mov	r1, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7fe fe18 	bl	800498e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f000 fa55 	bl	800621c <prvAddCurrentTaskToDelayedList>
	}
 8005d72:	bf00      	nop
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000bcc 	.word	0x20000bcc

08005d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3318      	adds	r3, #24
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fe49 	bl	8004a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db6:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <xTaskRemoveFromEventList+0xb0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11d      	bne.n	8005dfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe fe40 	bl	8004a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <xTaskRemoveFromEventList+0xb4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <xTaskRemoveFromEventList+0x5c>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	4a16      	ldr	r2, [pc, #88]	; (8005e34 <xTaskRemoveFromEventList+0xb4>)
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <xTaskRemoveFromEventList+0xb8>)
 8005dea:	441a      	add	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7fe fdcb 	bl	800498e <vListInsertEnd>
 8005df8:	e005      	b.n	8005e06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	3318      	adds	r3, #24
 8005dfe:	4619      	mov	r1, r3
 8005e00:	480e      	ldr	r0, [pc, #56]	; (8005e3c <xTaskRemoveFromEventList+0xbc>)
 8005e02:	f7fe fdc4 	bl	800498e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <xTaskRemoveFromEventList+0xc0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d905      	bls.n	8005e20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <xTaskRemoveFromEventList+0xc4>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e001      	b.n	8005e24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e24:	697b      	ldr	r3, [r7, #20]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200010c8 	.word	0x200010c8
 8005e34:	200010a8 	.word	0x200010a8
 8005e38:	20000bd0 	.word	0x20000bd0
 8005e3c:	20001060 	.word	0x20001060
 8005e40:	20000bcc 	.word	0x20000bcc
 8005e44:	200010b4 	.word	0x200010b4

08005e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <vTaskInternalSetTimeOutState+0x24>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <vTaskInternalSetTimeOutState+0x28>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	605a      	str	r2, [r3, #4]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	200010b8 	.word	0x200010b8
 8005e70:	200010a4 	.word	0x200010a4

08005e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	613b      	str	r3, [r7, #16]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	60fb      	str	r3, [r7, #12]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005eb6:	f000 fe7d 	bl	8006bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <xTaskCheckForTimeOut+0xbc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d102      	bne.n	8005eda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	e023      	b.n	8005f22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <xTaskCheckForTimeOut+0xc0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d007      	beq.n	8005ef6 <xTaskCheckForTimeOut+0x82>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	61fb      	str	r3, [r7, #28]
 8005ef4:	e015      	b.n	8005f22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d20b      	bcs.n	8005f18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff ff9b 	bl	8005e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	e004      	b.n	8005f22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f22:	f000 fe77 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 8005f26:	69fb      	ldr	r3, [r7, #28]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	200010a4 	.word	0x200010a4
 8005f34:	200010b8 	.word	0x200010b8

08005f38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f3c:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <vTaskMissedYield+0x14>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	bf00      	nop
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	200010b4 	.word	0x200010b4

08005f50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f58:	f000 f852 	bl	8006000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <prvIdleTask+0x28>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d9f9      	bls.n	8005f58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <prvIdleTask+0x2c>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f74:	e7f0      	b.n	8005f58 <prvIdleTask+0x8>
 8005f76:	bf00      	nop
 8005f78:	20000bd0 	.word	0x20000bd0
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f86:	2300      	movs	r3, #0
 8005f88:	607b      	str	r3, [r7, #4]
 8005f8a:	e00c      	b.n	8005fa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <prvInitialiseTaskLists+0x60>)
 8005f98:	4413      	add	r3, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fcca 	bl	8004934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b37      	cmp	r3, #55	; 0x37
 8005faa:	d9ef      	bls.n	8005f8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fac:	480d      	ldr	r0, [pc, #52]	; (8005fe4 <prvInitialiseTaskLists+0x64>)
 8005fae:	f7fe fcc1 	bl	8004934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fb2:	480d      	ldr	r0, [pc, #52]	; (8005fe8 <prvInitialiseTaskLists+0x68>)
 8005fb4:	f7fe fcbe 	bl	8004934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fb8:	480c      	ldr	r0, [pc, #48]	; (8005fec <prvInitialiseTaskLists+0x6c>)
 8005fba:	f7fe fcbb 	bl	8004934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fbe:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <prvInitialiseTaskLists+0x70>)
 8005fc0:	f7fe fcb8 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fc4:	480b      	ldr	r0, [pc, #44]	; (8005ff4 <prvInitialiseTaskLists+0x74>)
 8005fc6:	f7fe fcb5 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fca:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <prvInitialiseTaskLists+0x78>)
 8005fcc:	4a05      	ldr	r2, [pc, #20]	; (8005fe4 <prvInitialiseTaskLists+0x64>)
 8005fce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <prvInitialiseTaskLists+0x7c>)
 8005fd2:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <prvInitialiseTaskLists+0x68>)
 8005fd4:	601a      	str	r2, [r3, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000bd0 	.word	0x20000bd0
 8005fe4:	20001030 	.word	0x20001030
 8005fe8:	20001044 	.word	0x20001044
 8005fec:	20001060 	.word	0x20001060
 8005ff0:	20001074 	.word	0x20001074
 8005ff4:	2000108c 	.word	0x2000108c
 8005ff8:	20001058 	.word	0x20001058
 8005ffc:	2000105c 	.word	0x2000105c

08006000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006006:	e019      	b.n	800603c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006008:	f000 fdd4 	bl	8006bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <prvCheckTasksWaitingTermination+0x50>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3304      	adds	r3, #4
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fd15 	bl	8004a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <prvCheckTasksWaitingTermination+0x54>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3b01      	subs	r3, #1
 8006024:	4a0b      	ldr	r2, [pc, #44]	; (8006054 <prvCheckTasksWaitingTermination+0x54>)
 8006026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006028:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <prvCheckTasksWaitingTermination+0x58>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3b01      	subs	r3, #1
 800602e:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <prvCheckTasksWaitingTermination+0x58>)
 8006030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006032:	f000 fdef 	bl	8006c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f810 	bl	800605c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <prvCheckTasksWaitingTermination+0x58>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e1      	bne.n	8006008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20001074 	.word	0x20001074
 8006054:	200010a0 	.word	0x200010a0
 8006058:	20001088 	.word	0x20001088

0800605c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3354      	adds	r3, #84	; 0x54
 8006068:	4618      	mov	r0, r3
 800606a:	f002 f8a5 	bl	80081b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006074:	2b00      	cmp	r3, #0
 8006076:	d108      	bne.n	800608a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	4618      	mov	r0, r3
 800607e:	f000 ff87 	bl	8006f90 <vPortFree>
				vPortFree( pxTCB );
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 ff84 	bl	8006f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006088:	e018      	b.n	80060bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006090:	2b01      	cmp	r3, #1
 8006092:	d103      	bne.n	800609c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 ff7b 	bl	8006f90 <vPortFree>
	}
 800609a:	e00f      	b.n	80060bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d00a      	beq.n	80060bc <prvDeleteTCB+0x60>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60fb      	str	r3, [r7, #12]
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <prvDeleteTCB+0x5e>
	}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <prvResetNextTaskUnblockTime+0x38>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <prvResetNextTaskUnblockTime+0x3c>)
 80060d6:	f04f 32ff 	mov.w	r2, #4294967295
 80060da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060dc:	e008      	b.n	80060f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <prvResetNextTaskUnblockTime+0x38>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4a04      	ldr	r2, [pc, #16]	; (8006100 <prvResetNextTaskUnblockTime+0x3c>)
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20001058 	.word	0x20001058
 8006100:	200010c0 	.word	0x200010c0

08006104 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <xTaskGetSchedulerState+0x34>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006112:	2301      	movs	r3, #1
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e008      	b.n	800612a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006118:	4b08      	ldr	r3, [pc, #32]	; (800613c <xTaskGetSchedulerState+0x38>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006120:	2302      	movs	r3, #2
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	e001      	b.n	800612a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800612a:	687b      	ldr	r3, [r7, #4]
	}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	200010ac 	.word	0x200010ac
 800613c:	200010c8 	.word	0x200010c8

08006140 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d056      	beq.n	8006204 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006156:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <xTaskPriorityDisinherit+0xd0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d00a      	beq.n	8006176 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60fb      	str	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60bb      	str	r3, [r7, #8]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	1e5a      	subs	r2, r3, #1
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d02c      	beq.n	8006204 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d128      	bne.n	8006204 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fc46 	bl	8004a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <xTaskPriorityDisinherit+0xd4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d903      	bls.n	80061e4 <xTaskPriorityDisinherit+0xa4>
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <xTaskPriorityDisinherit+0xd4>)
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4a09      	ldr	r2, [pc, #36]	; (8006218 <xTaskPriorityDisinherit+0xd8>)
 80061f2:	441a      	add	r2, r3
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f7fe fbc7 	bl	800498e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006204:	697b      	ldr	r3, [r7, #20]
	}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000bcc 	.word	0x20000bcc
 8006214:	200010a8 	.word	0x200010a8
 8006218:	20000bd0 	.word	0x20000bd0

0800621c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006226:	4b21      	ldr	r3, [pc, #132]	; (80062ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3304      	adds	r3, #4
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fc08 	bl	8004a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d10a      	bne.n	8006256 <prvAddCurrentTaskToDelayedList+0x3a>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4819      	ldr	r0, [pc, #100]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006250:	f7fe fb9d 	bl	800498e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006254:	e026      	b.n	80062a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4413      	add	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800625e:	4b14      	ldr	r3, [pc, #80]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	429a      	cmp	r2, r3
 800626c:	d209      	bcs.n	8006282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fe fbab 	bl	80049d6 <vListInsert>
}
 8006280:	e010      	b.n	80062a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006282:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fe fba1 	bl	80049d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	429a      	cmp	r2, r3
 800629c:	d202      	bcs.n	80062a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800629e:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	200010a4 	.word	0x200010a4
 80062b0:	20000bcc 	.word	0x20000bcc
 80062b4:	2000108c 	.word	0x2000108c
 80062b8:	2000105c 	.word	0x2000105c
 80062bc:	20001058 	.word	0x20001058
 80062c0:	200010c0 	.word	0x200010c0

080062c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062ce:	f000 fb07 	bl	80068e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xTimerCreateTimerTask+0x80>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d021      	beq.n	800631e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062e2:	1d3a      	adds	r2, r7, #4
 80062e4:	f107 0108 	add.w	r1, r7, #8
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fb07 	bl	8004900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	9202      	str	r2, [sp, #8]
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	2302      	movs	r3, #2
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2300      	movs	r3, #0
 8006302:	460a      	mov	r2, r1
 8006304:	4910      	ldr	r1, [pc, #64]	; (8006348 <xTimerCreateTimerTask+0x84>)
 8006306:	4811      	ldr	r0, [pc, #68]	; (800634c <xTimerCreateTimerTask+0x88>)
 8006308:	f7ff f8b4 	bl	8005474 <xTaskCreateStatic>
 800630c:	4603      	mov	r3, r0
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <xTimerCreateTimerTask+0x8c>)
 8006310:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <xTimerCreateTimerTask+0x8c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800631a:	2301      	movs	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	613b      	str	r3, [r7, #16]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800633a:	697b      	ldr	r3, [r7, #20]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200010fc 	.word	0x200010fc
 8006348:	08009fc4 	.word	0x08009fc4
 800634c:	08006489 	.word	0x08006489
 8006350:	20001100 	.word	0x20001100

08006354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	; 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <xTimerGenericCommand+0x2e>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	623b      	str	r3, [r7, #32]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006382:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <xTimerGenericCommand+0x98>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02a      	beq.n	80063e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b05      	cmp	r3, #5
 800639a:	dc18      	bgt.n	80063ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800639c:	f7ff feb2 	bl	8006104 <xTaskGetSchedulerState>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d109      	bne.n	80063ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <xTimerGenericCommand+0x98>)
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f107 0110 	add.w	r1, r7, #16
 80063ae:	2300      	movs	r3, #0
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	f7fe fc77 	bl	8004ca4 <xQueueGenericSend>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24
 80063b8:	e012      	b.n	80063e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063ba:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <xTimerGenericCommand+0x98>)
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	f107 0110 	add.w	r1, r7, #16
 80063c2:	2300      	movs	r3, #0
 80063c4:	2200      	movs	r2, #0
 80063c6:	f7fe fc6d 	bl	8004ca4 <xQueueGenericSend>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24
 80063cc:	e008      	b.n	80063e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <xTimerGenericCommand+0x98>)
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f107 0110 	add.w	r1, r7, #16
 80063d6:	2300      	movs	r3, #0
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	f7fe fd61 	bl	8004ea0 <xQueueGenericSendFromISR>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3728      	adds	r7, #40	; 0x28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200010fc 	.word	0x200010fc

080063f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fa:	4b22      	ldr	r3, [pc, #136]	; (8006484 <prvProcessExpiredTimer+0x94>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fb1d 	bl	8004a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d022      	beq.n	8006462 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	18d1      	adds	r1, r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	6978      	ldr	r0, [r7, #20]
 800642a:	f000 f8d1 	bl	80065d0 <prvInsertTimerInActiveList>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01f      	beq.n	8006474 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006434:	2300      	movs	r3, #0
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	2300      	movs	r3, #0
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	2100      	movs	r1, #0
 800643e:	6978      	ldr	r0, [r7, #20]
 8006440:	f7ff ff88 	bl	8006354 <xTimerGenericCommand>
 8006444:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d113      	bne.n	8006474 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60fb      	str	r3, [r7, #12]
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	6978      	ldr	r0, [r7, #20]
 800647a:	4798      	blx	r3
}
 800647c:	bf00      	nop
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	200010f4 	.word	0x200010f4

08006488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006490:	f107 0308 	add.w	r3, r7, #8
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f857 	bl	8006548 <prvGetNextExpireTime>
 800649a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4619      	mov	r1, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f803 	bl	80064ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064a6:	f000 f8d5 	bl	8006654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064aa:	e7f1      	b.n	8006490 <prvTimerTask+0x8>

080064ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064b6:	f7ff fa39 	bl	800592c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f866 	bl	8006590 <prvSampleTimeNow>
 80064c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d130      	bne.n	800652e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <prvProcessTimerOrBlockTask+0x3c>
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d806      	bhi.n	80064e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064da:	f7ff fa35 	bl	8005948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff85 	bl	80063f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064e6:	e024      	b.n	8006532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <prvProcessTimerOrBlockTask+0x90>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <prvProcessTimerOrBlockTask+0x50>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <prvProcessTimerOrBlockTask+0x52>
 80064fc:	2300      	movs	r3, #0
 80064fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <prvProcessTimerOrBlockTask+0x94>)
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	4619      	mov	r1, r3
 800650e:	f7fe ff7d 	bl	800540c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006512:	f7ff fa19 	bl	8005948 <xTaskResumeAll>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <prvProcessTimerOrBlockTask+0x98>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
}
 800652c:	e001      	b.n	8006532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800652e:	f7ff fa0b 	bl	8005948 <xTaskResumeAll>
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200010f8 	.word	0x200010f8
 8006540:	200010fc 	.word	0x200010fc
 8006544:	e000ed04 	.word	0xe000ed04

08006548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <prvGetNextExpireTime+0x44>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <prvGetNextExpireTime+0x16>
 800655a:	2201      	movs	r2, #1
 800655c:	e000      	b.n	8006560 <prvGetNextExpireTime+0x18>
 800655e:	2200      	movs	r2, #0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800656c:	4b07      	ldr	r3, [pc, #28]	; (800658c <prvGetNextExpireTime+0x44>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e001      	b.n	800657c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800657c:	68fb      	ldr	r3, [r7, #12]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	200010f4 	.word	0x200010f4

08006590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006598:	f7ff fa74 	bl	8005a84 <xTaskGetTickCount>
 800659c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvSampleTimeNow+0x3c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d205      	bcs.n	80065b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065a8:	f000 f936 	bl	8006818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e002      	b.n	80065ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065ba:	4a04      	ldr	r2, [pc, #16]	; (80065cc <prvSampleTimeNow+0x3c>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065c0:	68fb      	ldr	r3, [r7, #12]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20001104 	.word	0x20001104

080065d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d812      	bhi.n	800661c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e01b      	b.n	8006642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <prvInsertTimerInActiveList+0x7c>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7fe f9de 	bl	80049d6 <vListInsert>
 800661a:	e012      	b.n	8006642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d206      	bcs.n	8006632 <prvInsertTimerInActiveList+0x62>
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e007      	b.n	8006642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <prvInsertTimerInActiveList+0x80>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7fe f9ca 	bl	80049d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006642:	697b      	ldr	r3, [r7, #20]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200010f8 	.word	0x200010f8
 8006650:	200010f4 	.word	0x200010f4

08006654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665a:	e0ca      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	da18      	bge.n	8006694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	3304      	adds	r3, #4
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61fb      	str	r3, [r7, #28]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668a:	6850      	ldr	r0, [r2, #4]
 800668c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668e:	6892      	ldr	r2, [r2, #8]
 8006690:	4611      	mov	r1, r2
 8006692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f2c0 80aa 	blt.w	80067f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe f9cb 	bl	8004a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066b2:	463b      	mov	r3, r7
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff ff6b 	bl	8006590 <prvSampleTimeNow>
 80066ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b09      	cmp	r3, #9
 80066c0:	f200 8097 	bhi.w	80067f2 <prvProcessReceivedCommands+0x19e>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <prvProcessReceivedCommands+0x78>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066f5 	.word	0x080066f5
 80066d8:	08006769 	.word	0x08006769
 80066dc:	0800677d 	.word	0x0800677d
 80066e0:	080067c7 	.word	0x080067c7
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	080066f5 	.word	0x080066f5
 80066ec:	08006769 	.word	0x08006769
 80066f0:	0800677d 	.word	0x0800677d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	18d1      	adds	r1, r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006714:	f7ff ff5c 	bl	80065d0 <prvInsertTimerInActiveList>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d069      	beq.n	80067f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d05e      	beq.n	80067f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	441a      	add	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	2100      	movs	r1, #0
 8006744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006746:	f7ff fe05 	bl	8006354 <xTimerGenericCommand>
 800674a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d14f      	bne.n	80067f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	61bb      	str	r3, [r7, #24]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800677a:	e03a      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	617b      	str	r3, [r7, #20]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	18d1      	adds	r1, r2, r3
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c0:	f7ff ff06 	bl	80065d0 <prvInsertTimerInActiveList>
					break;
 80067c4:	e015      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d6:	f000 fbdb 	bl	8006f90 <vPortFree>
 80067da:	e00a      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067ee:	e000      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <prvProcessReceivedCommands+0x1c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1d39      	adds	r1, r7, #4
 80067f8:	2200      	movs	r2, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fbec 	bl	8004fd8 <xQueueReceive>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	f47f af2a 	bne.w	800665c <prvProcessReceivedCommands+0x8>
	}
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	3730      	adds	r7, #48	; 0x30
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200010fc 	.word	0x200010fc

08006818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800681e:	e048      	b.n	80068b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006820:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800682a:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3304      	adds	r3, #4
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe f905 	bl	8004a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02e      	beq.n	80068b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4413      	add	r3, r2
 800685c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d90e      	bls.n	8006884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006872:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fe f8aa 	bl	80049d6 <vListInsert>
 8006882:	e016      	b.n	80068b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006884:	2300      	movs	r3, #0
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	2100      	movs	r1, #0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fd60 	bl	8006354 <xTimerGenericCommand>
 8006894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	603b      	str	r3, [r7, #0]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1b1      	bne.n	8006820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvSwitchTimerLists+0xc4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 80068c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068ca:	4a04      	ldr	r2, [pc, #16]	; (80068dc <prvSwitchTimerLists+0xc4>)
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	200010f4 	.word	0x200010f4
 80068dc:	200010f8 	.word	0x200010f8

080068e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068e6:	f000 f965 	bl	8006bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068ea:	4b15      	ldr	r3, [pc, #84]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d120      	bne.n	8006934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068f2:	4814      	ldr	r0, [pc, #80]	; (8006944 <prvCheckForValidListAndQueue+0x64>)
 80068f4:	f7fe f81e 	bl	8004934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068f8:	4813      	ldr	r0, [pc, #76]	; (8006948 <prvCheckForValidListAndQueue+0x68>)
 80068fa:	f7fe f81b 	bl	8004934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <prvCheckForValidListAndQueue+0x6c>)
 8006900:	4a10      	ldr	r2, [pc, #64]	; (8006944 <prvCheckForValidListAndQueue+0x64>)
 8006902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006904:	4b12      	ldr	r3, [pc, #72]	; (8006950 <prvCheckForValidListAndQueue+0x70>)
 8006906:	4a10      	ldr	r2, [pc, #64]	; (8006948 <prvCheckForValidListAndQueue+0x68>)
 8006908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800690a:	2300      	movs	r3, #0
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <prvCheckForValidListAndQueue+0x74>)
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <prvCheckForValidListAndQueue+0x78>)
 8006912:	2110      	movs	r1, #16
 8006914:	200a      	movs	r0, #10
 8006916:	f7fe f929 	bl	8004b6c <xQueueGenericCreateStatic>
 800691a:	4603      	mov	r3, r0
 800691c:	4a08      	ldr	r2, [pc, #32]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 800691e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	490b      	ldr	r1, [pc, #44]	; (800695c <prvCheckForValidListAndQueue+0x7c>)
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fd42 	bl	80053b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006934:	f000 f96e 	bl	8006c14 <vPortExitCritical>
}
 8006938:	bf00      	nop
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	200010fc 	.word	0x200010fc
 8006944:	200010cc 	.word	0x200010cc
 8006948:	200010e0 	.word	0x200010e0
 800694c:	200010f4 	.word	0x200010f4
 8006950:	200010f8 	.word	0x200010f8
 8006954:	200011a8 	.word	0x200011a8
 8006958:	20001108 	.word	0x20001108
 800695c:	08009fcc 	.word	0x08009fcc

08006960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b04      	subs	r3, #4
 8006970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3b04      	subs	r3, #4
 800697e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f023 0201 	bic.w	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006990:	4a0c      	ldr	r2, [pc, #48]	; (80069c4 <pxPortInitialiseStack+0x64>)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b14      	subs	r3, #20
 800699a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f06f 0202 	mvn.w	r2, #2
 80069ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3b20      	subs	r3, #32
 80069b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069b6:	68fb      	ldr	r3, [r7, #12]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	080069c9 	.word	0x080069c9

080069c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <prvTaskExitError+0x54>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d00a      	beq.n	80069f2 <prvTaskExitError+0x2a>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60fb      	str	r3, [r7, #12]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <prvTaskExitError+0x28>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60bb      	str	r3, [r7, #8]
}
 8006a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a06:	bf00      	nop
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0fc      	beq.n	8006a08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000010 	.word	0x20000010

08006a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <pxCurrentTCBConst2>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	f380 8809 	msr	PSP, r0
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8811 	msr	BASEPRI, r0
 8006a3a:	4770      	bx	lr
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst2>:
 8006a40:	20000bcc 	.word	0x20000bcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a48:	4808      	ldr	r0, [pc, #32]	; (8006a6c <prvPortStartFirstTask+0x24>)
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f380 8808 	msr	MSP, r0
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8814 	msr	CONTROL, r0
 8006a5a:	b662      	cpsie	i
 8006a5c:	b661      	cpsie	f
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	df00      	svc	0
 8006a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a6a:	bf00      	nop
 8006a6c:	e000ed08 	.word	0xe000ed08

08006a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a76:	4b46      	ldr	r3, [pc, #280]	; (8006b90 <xPortStartScheduler+0x120>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a46      	ldr	r2, [pc, #280]	; (8006b94 <xPortStartScheduler+0x124>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10a      	bne.n	8006a96 <xPortStartScheduler+0x26>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a96:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <xPortStartScheduler+0x120>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <xPortStartScheduler+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10a      	bne.n	8006ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ab6:	4b39      	ldr	r3, [pc, #228]	; (8006b9c <xPortStartScheduler+0x12c>)
 8006ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	22ff      	movs	r2, #255	; 0xff
 8006ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <xPortStartScheduler+0x130>)
 8006adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ae4:	e009      	b.n	8006afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ae6:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	4a2d      	ldr	r2, [pc, #180]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d0ef      	beq.n	8006ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b06:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1c3 0307 	rsb	r3, r3, #7
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d00a      	beq.n	8006b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60bb      	str	r3, [r7, #8]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b28:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b46:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b5e:	f000 f8dd 	bl	8006d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b62:	4b12      	ldr	r3, [pc, #72]	; (8006bac <xPortStartScheduler+0x13c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b68:	f000 f8fc 	bl	8006d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <xPortStartScheduler+0x140>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <xPortStartScheduler+0x140>)
 8006b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b78:	f7ff ff66 	bl	8006a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b7c:	f7ff f84c 	bl	8005c18 <vTaskSwitchContext>
	prvTaskExitError();
 8006b80:	f7ff ff22 	bl	80069c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	e000ed00 	.word	0xe000ed00
 8006b94:	410fc271 	.word	0x410fc271
 8006b98:	410fc270 	.word	0x410fc270
 8006b9c:	e000e400 	.word	0xe000e400
 8006ba0:	200011f8 	.word	0x200011f8
 8006ba4:	200011fc 	.word	0x200011fc
 8006ba8:	e000ed20 	.word	0xe000ed20
 8006bac:	20000010 	.word	0x20000010
 8006bb0:	e000ef34 	.word	0xe000ef34

08006bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	607b      	str	r3, [r7, #4]
}
 8006bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bce:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10f      	bne.n	8006c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortEnterCritical+0x5c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	603b      	str	r3, [r7, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <vPortEnterCritical+0x4a>
	}
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20000010 	.word	0x20000010
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <vPortExitCritical+0x50>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <vPortExitCritical+0x24>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <vPortExitCritical+0x50>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <vPortExitCritical+0x50>)
 8006c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <vPortExitCritical+0x50>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <vPortExitCritical+0x42>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f383 8811 	msr	BASEPRI, r3
}
 8006c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20000010 	.word	0x20000010
	...

08006c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c70:	f3ef 8009 	mrs	r0, PSP
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <pxCurrentTCBConst>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	f01e 0f10 	tst.w	lr, #16
 8006c80:	bf08      	it	eq
 8006c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	6010      	str	r0, [r2, #0]
 8006c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c94:	f380 8811 	msr	BASEPRI, r0
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f7fe ffba 	bl	8005c18 <vTaskSwitchContext>
 8006ca4:	f04f 0000 	mov.w	r0, #0
 8006ca8:	f380 8811 	msr	BASEPRI, r0
 8006cac:	bc09      	pop	{r0, r3}
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	6808      	ldr	r0, [r1, #0]
 8006cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb6:	f01e 0f10 	tst.w	lr, #16
 8006cba:	bf08      	it	eq
 8006cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cc0:	f380 8809 	msr	PSP, r0
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w

08006cd0 <pxCurrentTCBConst>:
 8006cd0:	20000bcc 	.word	0x20000bcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop

08006cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
}
 8006cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cf2:	f7fe fed7 	bl	8005aa4 <xTaskIncrementTick>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <xPortSysTickHandler+0x40>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <vPortSetupTimerInterrupt+0x38>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <vPortSetupTimerInterrupt+0x3c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <vPortSetupTimerInterrupt+0x40>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <vPortSetupTimerInterrupt+0x44>)
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d3e:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d40:	2207      	movs	r2, #7
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e010 	.word	0xe000e010
 8006d54:	e000e018 	.word	0xe000e018
 8006d58:	20000004 	.word	0x20000004
 8006d5c:	10624dd3 	.word	0x10624dd3
 8006d60:	e000e014 	.word	0xe000e014

08006d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d74 <vPortEnableVFP+0x10>
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d6e:	6001      	str	r1, [r0, #0]
 8006d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d72:	bf00      	nop
 8006d74:	e000ed88 	.word	0xe000ed88

08006d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d7e:	f3ef 8305 	mrs	r3, IPSR
 8006d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b0f      	cmp	r3, #15
 8006d88:	d914      	bls.n	8006db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <vPortValidateInterruptPriority+0x70>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <vPortValidateInterruptPriority+0x74>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	7afa      	ldrb	r2, [r7, #11]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d20a      	bcs.n	8006db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <vPortValidateInterruptPriority+0x78>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <vPortValidateInterruptPriority+0x7c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d90a      	bls.n	8006dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	603b      	str	r3, [r7, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <vPortValidateInterruptPriority+0x60>
	}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	e000e3f0 	.word	0xe000e3f0
 8006dec:	200011f8 	.word	0x200011f8
 8006df0:	e000ed0c 	.word	0xe000ed0c
 8006df4:	200011fc 	.word	0x200011fc

08006df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e04:	f7fe fd92 	bl	800592c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e08:	4b5b      	ldr	r3, [pc, #364]	; (8006f78 <pvPortMalloc+0x180>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e10:	f000 f920 	bl	8007054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e14:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <pvPortMalloc+0x184>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 8093 	bne.w	8006f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01d      	beq.n	8006e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e28:	2208      	movs	r2, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d014      	beq.n	8006e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f023 0307 	bic.w	r3, r3, #7
 8006e40:	3308      	adds	r3, #8
 8006e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <pvPortMalloc+0x6c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	617b      	str	r3, [r7, #20]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d06e      	beq.n	8006f48 <pvPortMalloc+0x150>
 8006e6a:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <pvPortMalloc+0x188>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d869      	bhi.n	8006f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e74:	4b43      	ldr	r3, [pc, #268]	; (8006f84 <pvPortMalloc+0x18c>)
 8006e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e78:	4b42      	ldr	r3, [pc, #264]	; (8006f84 <pvPortMalloc+0x18c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e7e:	e004      	b.n	8006e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d903      	bls.n	8006e9c <pvPortMalloc+0xa4>
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f1      	bne.n	8006e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e9c:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <pvPortMalloc+0x180>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d050      	beq.n	8006f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2208      	movs	r2, #8
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d91f      	bls.n	8006f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	613b      	str	r3, [r7, #16]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f000 f90a 	bl	800711c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <pvPortMalloc+0x188>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <pvPortMalloc+0x188>)
 8006f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <pvPortMalloc+0x188>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <pvPortMalloc+0x190>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d203      	bcs.n	8006f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <pvPortMalloc+0x188>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <pvPortMalloc+0x190>)
 8006f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <pvPortMalloc+0x184>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <pvPortMalloc+0x194>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <pvPortMalloc+0x194>)
 8006f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f48:	f7fe fcfe 	bl	8005948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <pvPortMalloc+0x174>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <pvPortMalloc+0x172>
	return pvReturn;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3728      	adds	r7, #40	; 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20014a88 	.word	0x20014a88
 8006f7c:	20014a9c 	.word	0x20014a9c
 8006f80:	20014a8c 	.word	0x20014a8c
 8006f84:	20014a80 	.word	0x20014a80
 8006f88:	20014a90 	.word	0x20014a90
 8006f8c:	20014a94 	.word	0x20014a94

08006f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04d      	beq.n	800703e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	425b      	negs	r3, r3
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <vPortFree+0xb8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <vPortFree+0x44>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <vPortFree+0x62>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60bb      	str	r3, [r7, #8]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <vPortFree+0xb8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01e      	beq.n	800703e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11a      	bne.n	800703e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <vPortFree+0xb8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007018:	f7fe fc88 	bl	800592c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <vPortFree+0xbc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4413      	add	r3, r2
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <vPortFree+0xbc>)
 8007028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f000 f876 	bl	800711c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <vPortFree+0xc0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	4a06      	ldr	r2, [pc, #24]	; (8007050 <vPortFree+0xc0>)
 8007038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800703a:	f7fe fc85 	bl	8005948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20014a9c 	.word	0x20014a9c
 800704c:	20014a8c 	.word	0x20014a8c
 8007050:	20014a98 	.word	0x20014a98

08007054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800705a:	4b29      	ldr	r3, [pc, #164]	; (8007100 <prvHeapInit+0xac>)
 800705c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800705e:	4b29      	ldr	r3, [pc, #164]	; (8007104 <prvHeapInit+0xb0>)
 8007060:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3307      	adds	r3, #7
 8007070:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0307 	bic.w	r3, r3, #7
 8007078:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	4a20      	ldr	r2, [pc, #128]	; (8007104 <prvHeapInit+0xb0>)
 8007082:	4413      	add	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800708a:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <prvHeapInit+0xb4>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007090:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <prvHeapInit+0xb4>)
 8007092:	2200      	movs	r2, #0
 8007094:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800709e:	2208      	movs	r2, #8
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0307 	bic.w	r3, r3, #7
 80070ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4a16      	ldr	r2, [pc, #88]	; (800710c <prvHeapInit+0xb8>)
 80070b2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <prvHeapInit+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <prvHeapInit+0xb8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	1ad2      	subs	r2, r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070d2:	4b0e      	ldr	r3, [pc, #56]	; (800710c <prvHeapInit+0xb8>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4a0c      	ldr	r2, [pc, #48]	; (8007110 <prvHeapInit+0xbc>)
 80070e0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4a0b      	ldr	r2, [pc, #44]	; (8007114 <prvHeapInit+0xc0>)
 80070e8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070ea:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <prvHeapInit+0xc4>)
 80070ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070f0:	601a      	str	r2, [r3, #0]
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	00013880 	.word	0x00013880
 8007104:	20001200 	.word	0x20001200
 8007108:	20014a80 	.word	0x20014a80
 800710c:	20014a88 	.word	0x20014a88
 8007110:	20014a90 	.word	0x20014a90
 8007114:	20014a8c 	.word	0x20014a8c
 8007118:	20014a9c 	.word	0x20014a9c

0800711c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007124:	4b28      	ldr	r3, [pc, #160]	; (80071c8 <prvInsertBlockIntoFreeList+0xac>)
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e002      	b.n	8007130 <prvInsertBlockIntoFreeList+0x14>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d8f7      	bhi.n	800712a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	4413      	add	r3, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	d108      	bne.n	800715e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	441a      	add	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	441a      	add	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d118      	bne.n	80071a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <prvInsertBlockIntoFreeList+0xb0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d00d      	beq.n	800719a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e008      	b.n	80071ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800719a:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <prvInsertBlockIntoFreeList+0xb0>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e003      	b.n	80071ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d002      	beq.n	80071ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20014a80 	.word	0x20014a80
 80071cc:	20014a88 	.word	0x20014a88

080071d0 <__errno>:
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <__errno+0x8>)
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000014 	.word	0x20000014

080071dc <__sflush_r>:
 80071dc:	898a      	ldrh	r2, [r1, #12]
 80071de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e2:	4605      	mov	r5, r0
 80071e4:	0710      	lsls	r0, r2, #28
 80071e6:	460c      	mov	r4, r1
 80071e8:	d458      	bmi.n	800729c <__sflush_r+0xc0>
 80071ea:	684b      	ldr	r3, [r1, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	dc05      	bgt.n	80071fc <__sflush_r+0x20>
 80071f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dc02      	bgt.n	80071fc <__sflush_r+0x20>
 80071f6:	2000      	movs	r0, #0
 80071f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d0f9      	beq.n	80071f6 <__sflush_r+0x1a>
 8007202:	2300      	movs	r3, #0
 8007204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007208:	682f      	ldr	r7, [r5, #0]
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	d032      	beq.n	8007274 <__sflush_r+0x98>
 800720e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	075a      	lsls	r2, r3, #29
 8007214:	d505      	bpl.n	8007222 <__sflush_r+0x46>
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	1ac0      	subs	r0, r0, r3
 800721a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800721c:	b10b      	cbz	r3, 8007222 <__sflush_r+0x46>
 800721e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007220:	1ac0      	subs	r0, r0, r3
 8007222:	2300      	movs	r3, #0
 8007224:	4602      	mov	r2, r0
 8007226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007228:	6a21      	ldr	r1, [r4, #32]
 800722a:	4628      	mov	r0, r5
 800722c:	47b0      	blx	r6
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	d106      	bne.n	8007242 <__sflush_r+0x66>
 8007234:	6829      	ldr	r1, [r5, #0]
 8007236:	291d      	cmp	r1, #29
 8007238:	d82c      	bhi.n	8007294 <__sflush_r+0xb8>
 800723a:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <__sflush_r+0x108>)
 800723c:	40ca      	lsrs	r2, r1
 800723e:	07d6      	lsls	r6, r2, #31
 8007240:	d528      	bpl.n	8007294 <__sflush_r+0xb8>
 8007242:	2200      	movs	r2, #0
 8007244:	6062      	str	r2, [r4, #4]
 8007246:	04d9      	lsls	r1, r3, #19
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	d504      	bpl.n	8007258 <__sflush_r+0x7c>
 800724e:	1c42      	adds	r2, r0, #1
 8007250:	d101      	bne.n	8007256 <__sflush_r+0x7a>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b903      	cbnz	r3, 8007258 <__sflush_r+0x7c>
 8007256:	6560      	str	r0, [r4, #84]	; 0x54
 8007258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800725a:	602f      	str	r7, [r5, #0]
 800725c:	2900      	cmp	r1, #0
 800725e:	d0ca      	beq.n	80071f6 <__sflush_r+0x1a>
 8007260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007264:	4299      	cmp	r1, r3
 8007266:	d002      	beq.n	800726e <__sflush_r+0x92>
 8007268:	4628      	mov	r0, r5
 800726a:	f000 f9bf 	bl	80075ec <_free_r>
 800726e:	2000      	movs	r0, #0
 8007270:	6360      	str	r0, [r4, #52]	; 0x34
 8007272:	e7c1      	b.n	80071f8 <__sflush_r+0x1c>
 8007274:	6a21      	ldr	r1, [r4, #32]
 8007276:	2301      	movs	r3, #1
 8007278:	4628      	mov	r0, r5
 800727a:	47b0      	blx	r6
 800727c:	1c41      	adds	r1, r0, #1
 800727e:	d1c7      	bne.n	8007210 <__sflush_r+0x34>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0c4      	beq.n	8007210 <__sflush_r+0x34>
 8007286:	2b1d      	cmp	r3, #29
 8007288:	d001      	beq.n	800728e <__sflush_r+0xb2>
 800728a:	2b16      	cmp	r3, #22
 800728c:	d101      	bne.n	8007292 <__sflush_r+0xb6>
 800728e:	602f      	str	r7, [r5, #0]
 8007290:	e7b1      	b.n	80071f6 <__sflush_r+0x1a>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	e7ad      	b.n	80071f8 <__sflush_r+0x1c>
 800729c:	690f      	ldr	r7, [r1, #16]
 800729e:	2f00      	cmp	r7, #0
 80072a0:	d0a9      	beq.n	80071f6 <__sflush_r+0x1a>
 80072a2:	0793      	lsls	r3, r2, #30
 80072a4:	680e      	ldr	r6, [r1, #0]
 80072a6:	bf08      	it	eq
 80072a8:	694b      	ldreq	r3, [r1, #20]
 80072aa:	600f      	str	r7, [r1, #0]
 80072ac:	bf18      	it	ne
 80072ae:	2300      	movne	r3, #0
 80072b0:	eba6 0807 	sub.w	r8, r6, r7
 80072b4:	608b      	str	r3, [r1, #8]
 80072b6:	f1b8 0f00 	cmp.w	r8, #0
 80072ba:	dd9c      	ble.n	80071f6 <__sflush_r+0x1a>
 80072bc:	6a21      	ldr	r1, [r4, #32]
 80072be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072c0:	4643      	mov	r3, r8
 80072c2:	463a      	mov	r2, r7
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b0      	blx	r6
 80072c8:	2800      	cmp	r0, #0
 80072ca:	dc06      	bgt.n	80072da <__sflush_r+0xfe>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e78e      	b.n	80071f8 <__sflush_r+0x1c>
 80072da:	4407      	add	r7, r0
 80072dc:	eba8 0800 	sub.w	r8, r8, r0
 80072e0:	e7e9      	b.n	80072b6 <__sflush_r+0xda>
 80072e2:	bf00      	nop
 80072e4:	20400001 	.word	0x20400001

080072e8 <_fflush_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	690b      	ldr	r3, [r1, #16]
 80072ec:	4605      	mov	r5, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	b913      	cbnz	r3, 80072f8 <_fflush_r+0x10>
 80072f2:	2500      	movs	r5, #0
 80072f4:	4628      	mov	r0, r5
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	b118      	cbz	r0, 8007302 <_fflush_r+0x1a>
 80072fa:	6983      	ldr	r3, [r0, #24]
 80072fc:	b90b      	cbnz	r3, 8007302 <_fflush_r+0x1a>
 80072fe:	f000 f899 	bl	8007434 <__sinit>
 8007302:	4b14      	ldr	r3, [pc, #80]	; (8007354 <_fflush_r+0x6c>)
 8007304:	429c      	cmp	r4, r3
 8007306:	d11b      	bne.n	8007340 <_fflush_r+0x58>
 8007308:	686c      	ldr	r4, [r5, #4]
 800730a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0ef      	beq.n	80072f2 <_fflush_r+0xa>
 8007312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007314:	07d0      	lsls	r0, r2, #31
 8007316:	d404      	bmi.n	8007322 <_fflush_r+0x3a>
 8007318:	0599      	lsls	r1, r3, #22
 800731a:	d402      	bmi.n	8007322 <_fflush_r+0x3a>
 800731c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731e:	f000 f94c 	bl	80075ba <__retarget_lock_acquire_recursive>
 8007322:	4628      	mov	r0, r5
 8007324:	4621      	mov	r1, r4
 8007326:	f7ff ff59 	bl	80071dc <__sflush_r>
 800732a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800732c:	07da      	lsls	r2, r3, #31
 800732e:	4605      	mov	r5, r0
 8007330:	d4e0      	bmi.n	80072f4 <_fflush_r+0xc>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	059b      	lsls	r3, r3, #22
 8007336:	d4dd      	bmi.n	80072f4 <_fflush_r+0xc>
 8007338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800733a:	f000 f93f 	bl	80075bc <__retarget_lock_release_recursive>
 800733e:	e7d9      	b.n	80072f4 <_fflush_r+0xc>
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <_fflush_r+0x70>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d101      	bne.n	800734a <_fflush_r+0x62>
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	e7df      	b.n	800730a <_fflush_r+0x22>
 800734a:	4b04      	ldr	r3, [pc, #16]	; (800735c <_fflush_r+0x74>)
 800734c:	429c      	cmp	r4, r3
 800734e:	bf08      	it	eq
 8007350:	68ec      	ldreq	r4, [r5, #12]
 8007352:	e7da      	b.n	800730a <_fflush_r+0x22>
 8007354:	0800a014 	.word	0x0800a014
 8007358:	0800a034 	.word	0x0800a034
 800735c:	08009ff4 	.word	0x08009ff4

08007360 <fflush>:
 8007360:	4601      	mov	r1, r0
 8007362:	b920      	cbnz	r0, 800736e <fflush+0xe>
 8007364:	4b04      	ldr	r3, [pc, #16]	; (8007378 <fflush+0x18>)
 8007366:	4905      	ldr	r1, [pc, #20]	; (800737c <fflush+0x1c>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f000 b8e1 	b.w	8007530 <_fwalk_reent>
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <fflush+0x20>)
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	f7ff bfb9 	b.w	80072e8 <_fflush_r>
 8007376:	bf00      	nop
 8007378:	0800a054 	.word	0x0800a054
 800737c:	080072e9 	.word	0x080072e9
 8007380:	20000014 	.word	0x20000014

08007384 <std>:
 8007384:	2300      	movs	r3, #0
 8007386:	b510      	push	{r4, lr}
 8007388:	4604      	mov	r4, r0
 800738a:	e9c0 3300 	strd	r3, r3, [r0]
 800738e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007392:	6083      	str	r3, [r0, #8]
 8007394:	8181      	strh	r1, [r0, #12]
 8007396:	6643      	str	r3, [r0, #100]	; 0x64
 8007398:	81c2      	strh	r2, [r0, #14]
 800739a:	6183      	str	r3, [r0, #24]
 800739c:	4619      	mov	r1, r3
 800739e:	2208      	movs	r2, #8
 80073a0:	305c      	adds	r0, #92	; 0x5c
 80073a2:	f000 f91a 	bl	80075da <memset>
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <std+0x38>)
 80073a8:	6263      	str	r3, [r4, #36]	; 0x24
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <std+0x3c>)
 80073ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <std+0x40>)
 80073b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <std+0x44>)
 80073b4:	6224      	str	r4, [r4, #32]
 80073b6:	6323      	str	r3, [r4, #48]	; 0x30
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	08008291 	.word	0x08008291
 80073c0:	080082b3 	.word	0x080082b3
 80073c4:	080082eb 	.word	0x080082eb
 80073c8:	0800830f 	.word	0x0800830f

080073cc <_cleanup_r>:
 80073cc:	4901      	ldr	r1, [pc, #4]	; (80073d4 <_cleanup_r+0x8>)
 80073ce:	f000 b8af 	b.w	8007530 <_fwalk_reent>
 80073d2:	bf00      	nop
 80073d4:	080072e9 	.word	0x080072e9

080073d8 <__sfmoreglue>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	2268      	movs	r2, #104	; 0x68
 80073dc:	1e4d      	subs	r5, r1, #1
 80073de:	4355      	muls	r5, r2
 80073e0:	460e      	mov	r6, r1
 80073e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073e6:	f000 f96d 	bl	80076c4 <_malloc_r>
 80073ea:	4604      	mov	r4, r0
 80073ec:	b140      	cbz	r0, 8007400 <__sfmoreglue+0x28>
 80073ee:	2100      	movs	r1, #0
 80073f0:	e9c0 1600 	strd	r1, r6, [r0]
 80073f4:	300c      	adds	r0, #12
 80073f6:	60a0      	str	r0, [r4, #8]
 80073f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073fc:	f000 f8ed 	bl	80075da <memset>
 8007400:	4620      	mov	r0, r4
 8007402:	bd70      	pop	{r4, r5, r6, pc}

08007404 <__sfp_lock_acquire>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__sfp_lock_acquire+0x8>)
 8007406:	f000 b8d8 	b.w	80075ba <__retarget_lock_acquire_recursive>
 800740a:	bf00      	nop
 800740c:	20014aa1 	.word	0x20014aa1

08007410 <__sfp_lock_release>:
 8007410:	4801      	ldr	r0, [pc, #4]	; (8007418 <__sfp_lock_release+0x8>)
 8007412:	f000 b8d3 	b.w	80075bc <__retarget_lock_release_recursive>
 8007416:	bf00      	nop
 8007418:	20014aa1 	.word	0x20014aa1

0800741c <__sinit_lock_acquire>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__sinit_lock_acquire+0x8>)
 800741e:	f000 b8cc 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8007422:	bf00      	nop
 8007424:	20014aa2 	.word	0x20014aa2

08007428 <__sinit_lock_release>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__sinit_lock_release+0x8>)
 800742a:	f000 b8c7 	b.w	80075bc <__retarget_lock_release_recursive>
 800742e:	bf00      	nop
 8007430:	20014aa2 	.word	0x20014aa2

08007434 <__sinit>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4604      	mov	r4, r0
 8007438:	f7ff fff0 	bl	800741c <__sinit_lock_acquire>
 800743c:	69a3      	ldr	r3, [r4, #24]
 800743e:	b11b      	cbz	r3, 8007448 <__sinit+0x14>
 8007440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007444:	f7ff bff0 	b.w	8007428 <__sinit_lock_release>
 8007448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800744c:	6523      	str	r3, [r4, #80]	; 0x50
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <__sinit+0x68>)
 8007450:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <__sinit+0x6c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	62a2      	str	r2, [r4, #40]	; 0x28
 8007456:	42a3      	cmp	r3, r4
 8007458:	bf04      	itt	eq
 800745a:	2301      	moveq	r3, #1
 800745c:	61a3      	streq	r3, [r4, #24]
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f820 	bl	80074a4 <__sfp>
 8007464:	6060      	str	r0, [r4, #4]
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f81c 	bl	80074a4 <__sfp>
 800746c:	60a0      	str	r0, [r4, #8]
 800746e:	4620      	mov	r0, r4
 8007470:	f000 f818 	bl	80074a4 <__sfp>
 8007474:	2200      	movs	r2, #0
 8007476:	60e0      	str	r0, [r4, #12]
 8007478:	2104      	movs	r1, #4
 800747a:	6860      	ldr	r0, [r4, #4]
 800747c:	f7ff ff82 	bl	8007384 <std>
 8007480:	68a0      	ldr	r0, [r4, #8]
 8007482:	2201      	movs	r2, #1
 8007484:	2109      	movs	r1, #9
 8007486:	f7ff ff7d 	bl	8007384 <std>
 800748a:	68e0      	ldr	r0, [r4, #12]
 800748c:	2202      	movs	r2, #2
 800748e:	2112      	movs	r1, #18
 8007490:	f7ff ff78 	bl	8007384 <std>
 8007494:	2301      	movs	r3, #1
 8007496:	61a3      	str	r3, [r4, #24]
 8007498:	e7d2      	b.n	8007440 <__sinit+0xc>
 800749a:	bf00      	nop
 800749c:	0800a054 	.word	0x0800a054
 80074a0:	080073cd 	.word	0x080073cd

080074a4 <__sfp>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	4607      	mov	r7, r0
 80074a8:	f7ff ffac 	bl	8007404 <__sfp_lock_acquire>
 80074ac:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <__sfp+0x84>)
 80074ae:	681e      	ldr	r6, [r3, #0]
 80074b0:	69b3      	ldr	r3, [r6, #24]
 80074b2:	b913      	cbnz	r3, 80074ba <__sfp+0x16>
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff ffbd 	bl	8007434 <__sinit>
 80074ba:	3648      	adds	r6, #72	; 0x48
 80074bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	d503      	bpl.n	80074cc <__sfp+0x28>
 80074c4:	6833      	ldr	r3, [r6, #0]
 80074c6:	b30b      	cbz	r3, 800750c <__sfp+0x68>
 80074c8:	6836      	ldr	r6, [r6, #0]
 80074ca:	e7f7      	b.n	80074bc <__sfp+0x18>
 80074cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074d0:	b9d5      	cbnz	r5, 8007508 <__sfp+0x64>
 80074d2:	4b16      	ldr	r3, [pc, #88]	; (800752c <__sfp+0x88>)
 80074d4:	60e3      	str	r3, [r4, #12]
 80074d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074da:	6665      	str	r5, [r4, #100]	; 0x64
 80074dc:	f000 f86c 	bl	80075b8 <__retarget_lock_init_recursive>
 80074e0:	f7ff ff96 	bl	8007410 <__sfp_lock_release>
 80074e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074ec:	6025      	str	r5, [r4, #0]
 80074ee:	61a5      	str	r5, [r4, #24]
 80074f0:	2208      	movs	r2, #8
 80074f2:	4629      	mov	r1, r5
 80074f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074f8:	f000 f86f 	bl	80075da <memset>
 80074fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007504:	4620      	mov	r0, r4
 8007506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007508:	3468      	adds	r4, #104	; 0x68
 800750a:	e7d9      	b.n	80074c0 <__sfp+0x1c>
 800750c:	2104      	movs	r1, #4
 800750e:	4638      	mov	r0, r7
 8007510:	f7ff ff62 	bl	80073d8 <__sfmoreglue>
 8007514:	4604      	mov	r4, r0
 8007516:	6030      	str	r0, [r6, #0]
 8007518:	2800      	cmp	r0, #0
 800751a:	d1d5      	bne.n	80074c8 <__sfp+0x24>
 800751c:	f7ff ff78 	bl	8007410 <__sfp_lock_release>
 8007520:	230c      	movs	r3, #12
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	e7ee      	b.n	8007504 <__sfp+0x60>
 8007526:	bf00      	nop
 8007528:	0800a054 	.word	0x0800a054
 800752c:	ffff0001 	.word	0xffff0001

08007530 <_fwalk_reent>:
 8007530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007534:	4606      	mov	r6, r0
 8007536:	4688      	mov	r8, r1
 8007538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800753c:	2700      	movs	r7, #0
 800753e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007542:	f1b9 0901 	subs.w	r9, r9, #1
 8007546:	d505      	bpl.n	8007554 <_fwalk_reent+0x24>
 8007548:	6824      	ldr	r4, [r4, #0]
 800754a:	2c00      	cmp	r4, #0
 800754c:	d1f7      	bne.n	800753e <_fwalk_reent+0xe>
 800754e:	4638      	mov	r0, r7
 8007550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007554:	89ab      	ldrh	r3, [r5, #12]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d907      	bls.n	800756a <_fwalk_reent+0x3a>
 800755a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800755e:	3301      	adds	r3, #1
 8007560:	d003      	beq.n	800756a <_fwalk_reent+0x3a>
 8007562:	4629      	mov	r1, r5
 8007564:	4630      	mov	r0, r6
 8007566:	47c0      	blx	r8
 8007568:	4307      	orrs	r7, r0
 800756a:	3568      	adds	r5, #104	; 0x68
 800756c:	e7e9      	b.n	8007542 <_fwalk_reent+0x12>
	...

08007570 <__libc_init_array>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4d0d      	ldr	r5, [pc, #52]	; (80075a8 <__libc_init_array+0x38>)
 8007574:	4c0d      	ldr	r4, [pc, #52]	; (80075ac <__libc_init_array+0x3c>)
 8007576:	1b64      	subs	r4, r4, r5
 8007578:	10a4      	asrs	r4, r4, #2
 800757a:	2600      	movs	r6, #0
 800757c:	42a6      	cmp	r6, r4
 800757e:	d109      	bne.n	8007594 <__libc_init_array+0x24>
 8007580:	4d0b      	ldr	r5, [pc, #44]	; (80075b0 <__libc_init_array+0x40>)
 8007582:	4c0c      	ldr	r4, [pc, #48]	; (80075b4 <__libc_init_array+0x44>)
 8007584:	f002 fc78 	bl	8009e78 <_init>
 8007588:	1b64      	subs	r4, r4, r5
 800758a:	10a4      	asrs	r4, r4, #2
 800758c:	2600      	movs	r6, #0
 800758e:	42a6      	cmp	r6, r4
 8007590:	d105      	bne.n	800759e <__libc_init_array+0x2e>
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	f855 3b04 	ldr.w	r3, [r5], #4
 8007598:	4798      	blx	r3
 800759a:	3601      	adds	r6, #1
 800759c:	e7ee      	b.n	800757c <__libc_init_array+0xc>
 800759e:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a2:	4798      	blx	r3
 80075a4:	3601      	adds	r6, #1
 80075a6:	e7f2      	b.n	800758e <__libc_init_array+0x1e>
 80075a8:	0800a3d4 	.word	0x0800a3d4
 80075ac:	0800a3d4 	.word	0x0800a3d4
 80075b0:	0800a3d4 	.word	0x0800a3d4
 80075b4:	0800a3d8 	.word	0x0800a3d8

080075b8 <__retarget_lock_init_recursive>:
 80075b8:	4770      	bx	lr

080075ba <__retarget_lock_acquire_recursive>:
 80075ba:	4770      	bx	lr

080075bc <__retarget_lock_release_recursive>:
 80075bc:	4770      	bx	lr

080075be <memcpy>:
 80075be:	440a      	add	r2, r1
 80075c0:	4291      	cmp	r1, r2
 80075c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80075c6:	d100      	bne.n	80075ca <memcpy+0xc>
 80075c8:	4770      	bx	lr
 80075ca:	b510      	push	{r4, lr}
 80075cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075d4:	4291      	cmp	r1, r2
 80075d6:	d1f9      	bne.n	80075cc <memcpy+0xe>
 80075d8:	bd10      	pop	{r4, pc}

080075da <memset>:
 80075da:	4402      	add	r2, r0
 80075dc:	4603      	mov	r3, r0
 80075de:	4293      	cmp	r3, r2
 80075e0:	d100      	bne.n	80075e4 <memset+0xa>
 80075e2:	4770      	bx	lr
 80075e4:	f803 1b01 	strb.w	r1, [r3], #1
 80075e8:	e7f9      	b.n	80075de <memset+0x4>
	...

080075ec <_free_r>:
 80075ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ee:	2900      	cmp	r1, #0
 80075f0:	d044      	beq.n	800767c <_free_r+0x90>
 80075f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f6:	9001      	str	r0, [sp, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f1a1 0404 	sub.w	r4, r1, #4
 80075fe:	bfb8      	it	lt
 8007600:	18e4      	addlt	r4, r4, r3
 8007602:	f001 fe6b 	bl	80092dc <__malloc_lock>
 8007606:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <_free_r+0x94>)
 8007608:	9801      	ldr	r0, [sp, #4]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	b933      	cbnz	r3, 800761c <_free_r+0x30>
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	6014      	str	r4, [r2, #0]
 8007612:	b003      	add	sp, #12
 8007614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007618:	f001 be66 	b.w	80092e8 <__malloc_unlock>
 800761c:	42a3      	cmp	r3, r4
 800761e:	d908      	bls.n	8007632 <_free_r+0x46>
 8007620:	6825      	ldr	r5, [r4, #0]
 8007622:	1961      	adds	r1, r4, r5
 8007624:	428b      	cmp	r3, r1
 8007626:	bf01      	itttt	eq
 8007628:	6819      	ldreq	r1, [r3, #0]
 800762a:	685b      	ldreq	r3, [r3, #4]
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	e7ed      	b.n	800760e <_free_r+0x22>
 8007632:	461a      	mov	r2, r3
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b10b      	cbz	r3, 800763c <_free_r+0x50>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d9fa      	bls.n	8007632 <_free_r+0x46>
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	1855      	adds	r5, r2, r1
 8007640:	42a5      	cmp	r5, r4
 8007642:	d10b      	bne.n	800765c <_free_r+0x70>
 8007644:	6824      	ldr	r4, [r4, #0]
 8007646:	4421      	add	r1, r4
 8007648:	1854      	adds	r4, r2, r1
 800764a:	42a3      	cmp	r3, r4
 800764c:	6011      	str	r1, [r2, #0]
 800764e:	d1e0      	bne.n	8007612 <_free_r+0x26>
 8007650:	681c      	ldr	r4, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	6053      	str	r3, [r2, #4]
 8007656:	4421      	add	r1, r4
 8007658:	6011      	str	r1, [r2, #0]
 800765a:	e7da      	b.n	8007612 <_free_r+0x26>
 800765c:	d902      	bls.n	8007664 <_free_r+0x78>
 800765e:	230c      	movs	r3, #12
 8007660:	6003      	str	r3, [r0, #0]
 8007662:	e7d6      	b.n	8007612 <_free_r+0x26>
 8007664:	6825      	ldr	r5, [r4, #0]
 8007666:	1961      	adds	r1, r4, r5
 8007668:	428b      	cmp	r3, r1
 800766a:	bf04      	itt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	bf04      	itt	eq
 8007674:	1949      	addeq	r1, r1, r5
 8007676:	6021      	streq	r1, [r4, #0]
 8007678:	6054      	str	r4, [r2, #4]
 800767a:	e7ca      	b.n	8007612 <_free_r+0x26>
 800767c:	b003      	add	sp, #12
 800767e:	bd30      	pop	{r4, r5, pc}
 8007680:	20014aa4 	.word	0x20014aa4

08007684 <sbrk_aligned>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0e      	ldr	r6, [pc, #56]	; (80076c0 <sbrk_aligned+0x3c>)
 8007688:	460c      	mov	r4, r1
 800768a:	6831      	ldr	r1, [r6, #0]
 800768c:	4605      	mov	r5, r0
 800768e:	b911      	cbnz	r1, 8007696 <sbrk_aligned+0x12>
 8007690:	f000 fdee 	bl	8008270 <_sbrk_r>
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 fde9 	bl	8008270 <_sbrk_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d00a      	beq.n	80076b8 <sbrk_aligned+0x34>
 80076a2:	1cc4      	adds	r4, r0, #3
 80076a4:	f024 0403 	bic.w	r4, r4, #3
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d007      	beq.n	80076bc <sbrk_aligned+0x38>
 80076ac:	1a21      	subs	r1, r4, r0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fdde 	bl	8008270 <_sbrk_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d101      	bne.n	80076bc <sbrk_aligned+0x38>
 80076b8:	f04f 34ff 	mov.w	r4, #4294967295
 80076bc:	4620      	mov	r0, r4
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	20014aa8 	.word	0x20014aa8

080076c4 <_malloc_r>:
 80076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c8:	1ccd      	adds	r5, r1, #3
 80076ca:	f025 0503 	bic.w	r5, r5, #3
 80076ce:	3508      	adds	r5, #8
 80076d0:	2d0c      	cmp	r5, #12
 80076d2:	bf38      	it	cc
 80076d4:	250c      	movcc	r5, #12
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	4607      	mov	r7, r0
 80076da:	db01      	blt.n	80076e0 <_malloc_r+0x1c>
 80076dc:	42a9      	cmp	r1, r5
 80076de:	d905      	bls.n	80076ec <_malloc_r+0x28>
 80076e0:	230c      	movs	r3, #12
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	2600      	movs	r6, #0
 80076e6:	4630      	mov	r0, r6
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	4e2e      	ldr	r6, [pc, #184]	; (80077a8 <_malloc_r+0xe4>)
 80076ee:	f001 fdf5 	bl	80092dc <__malloc_lock>
 80076f2:	6833      	ldr	r3, [r6, #0]
 80076f4:	461c      	mov	r4, r3
 80076f6:	bb34      	cbnz	r4, 8007746 <_malloc_r+0x82>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ffc2 	bl	8007684 <sbrk_aligned>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	4604      	mov	r4, r0
 8007704:	d14d      	bne.n	80077a2 <_malloc_r+0xde>
 8007706:	6834      	ldr	r4, [r6, #0]
 8007708:	4626      	mov	r6, r4
 800770a:	2e00      	cmp	r6, #0
 800770c:	d140      	bne.n	8007790 <_malloc_r+0xcc>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	4631      	mov	r1, r6
 8007712:	4638      	mov	r0, r7
 8007714:	eb04 0803 	add.w	r8, r4, r3
 8007718:	f000 fdaa 	bl	8008270 <_sbrk_r>
 800771c:	4580      	cmp	r8, r0
 800771e:	d13a      	bne.n	8007796 <_malloc_r+0xd2>
 8007720:	6821      	ldr	r1, [r4, #0]
 8007722:	3503      	adds	r5, #3
 8007724:	1a6d      	subs	r5, r5, r1
 8007726:	f025 0503 	bic.w	r5, r5, #3
 800772a:	3508      	adds	r5, #8
 800772c:	2d0c      	cmp	r5, #12
 800772e:	bf38      	it	cc
 8007730:	250c      	movcc	r5, #12
 8007732:	4629      	mov	r1, r5
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ffa5 	bl	8007684 <sbrk_aligned>
 800773a:	3001      	adds	r0, #1
 800773c:	d02b      	beq.n	8007796 <_malloc_r+0xd2>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	442b      	add	r3, r5
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	e00e      	b.n	8007764 <_malloc_r+0xa0>
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	1b52      	subs	r2, r2, r5
 800774a:	d41e      	bmi.n	800778a <_malloc_r+0xc6>
 800774c:	2a0b      	cmp	r2, #11
 800774e:	d916      	bls.n	800777e <_malloc_r+0xba>
 8007750:	1961      	adds	r1, r4, r5
 8007752:	42a3      	cmp	r3, r4
 8007754:	6025      	str	r5, [r4, #0]
 8007756:	bf18      	it	ne
 8007758:	6059      	strne	r1, [r3, #4]
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	bf08      	it	eq
 800775e:	6031      	streq	r1, [r6, #0]
 8007760:	5162      	str	r2, [r4, r5]
 8007762:	604b      	str	r3, [r1, #4]
 8007764:	4638      	mov	r0, r7
 8007766:	f104 060b 	add.w	r6, r4, #11
 800776a:	f001 fdbd 	bl	80092e8 <__malloc_unlock>
 800776e:	f026 0607 	bic.w	r6, r6, #7
 8007772:	1d23      	adds	r3, r4, #4
 8007774:	1af2      	subs	r2, r6, r3
 8007776:	d0b6      	beq.n	80076e6 <_malloc_r+0x22>
 8007778:	1b9b      	subs	r3, r3, r6
 800777a:	50a3      	str	r3, [r4, r2]
 800777c:	e7b3      	b.n	80076e6 <_malloc_r+0x22>
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	42a3      	cmp	r3, r4
 8007782:	bf0c      	ite	eq
 8007784:	6032      	streq	r2, [r6, #0]
 8007786:	605a      	strne	r2, [r3, #4]
 8007788:	e7ec      	b.n	8007764 <_malloc_r+0xa0>
 800778a:	4623      	mov	r3, r4
 800778c:	6864      	ldr	r4, [r4, #4]
 800778e:	e7b2      	b.n	80076f6 <_malloc_r+0x32>
 8007790:	4634      	mov	r4, r6
 8007792:	6876      	ldr	r6, [r6, #4]
 8007794:	e7b9      	b.n	800770a <_malloc_r+0x46>
 8007796:	230c      	movs	r3, #12
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4638      	mov	r0, r7
 800779c:	f001 fda4 	bl	80092e8 <__malloc_unlock>
 80077a0:	e7a1      	b.n	80076e6 <_malloc_r+0x22>
 80077a2:	6025      	str	r5, [r4, #0]
 80077a4:	e7de      	b.n	8007764 <_malloc_r+0xa0>
 80077a6:	bf00      	nop
 80077a8:	20014aa4 	.word	0x20014aa4

080077ac <__cvt>:
 80077ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	ec55 4b10 	vmov	r4, r5, d0
 80077b4:	2d00      	cmp	r5, #0
 80077b6:	460e      	mov	r6, r1
 80077b8:	4619      	mov	r1, r3
 80077ba:	462b      	mov	r3, r5
 80077bc:	bfbb      	ittet	lt
 80077be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077c2:	461d      	movlt	r5, r3
 80077c4:	2300      	movge	r3, #0
 80077c6:	232d      	movlt	r3, #45	; 0x2d
 80077c8:	700b      	strb	r3, [r1, #0]
 80077ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077d0:	4691      	mov	r9, r2
 80077d2:	f023 0820 	bic.w	r8, r3, #32
 80077d6:	bfbc      	itt	lt
 80077d8:	4622      	movlt	r2, r4
 80077da:	4614      	movlt	r4, r2
 80077dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077e0:	d005      	beq.n	80077ee <__cvt+0x42>
 80077e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077e6:	d100      	bne.n	80077ea <__cvt+0x3e>
 80077e8:	3601      	adds	r6, #1
 80077ea:	2102      	movs	r1, #2
 80077ec:	e000      	b.n	80077f0 <__cvt+0x44>
 80077ee:	2103      	movs	r1, #3
 80077f0:	ab03      	add	r3, sp, #12
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	ab02      	add	r3, sp, #8
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	ec45 4b10 	vmov	d0, r4, r5
 80077fc:	4653      	mov	r3, sl
 80077fe:	4632      	mov	r2, r6
 8007800:	f000 fefa 	bl	80085f8 <_dtoa_r>
 8007804:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007808:	4607      	mov	r7, r0
 800780a:	d102      	bne.n	8007812 <__cvt+0x66>
 800780c:	f019 0f01 	tst.w	r9, #1
 8007810:	d022      	beq.n	8007858 <__cvt+0xac>
 8007812:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007816:	eb07 0906 	add.w	r9, r7, r6
 800781a:	d110      	bne.n	800783e <__cvt+0x92>
 800781c:	783b      	ldrb	r3, [r7, #0]
 800781e:	2b30      	cmp	r3, #48	; 0x30
 8007820:	d10a      	bne.n	8007838 <__cvt+0x8c>
 8007822:	2200      	movs	r2, #0
 8007824:	2300      	movs	r3, #0
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f9 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800782e:	b918      	cbnz	r0, 8007838 <__cvt+0x8c>
 8007830:	f1c6 0601 	rsb	r6, r6, #1
 8007834:	f8ca 6000 	str.w	r6, [sl]
 8007838:	f8da 3000 	ldr.w	r3, [sl]
 800783c:	4499      	add	r9, r3
 800783e:	2200      	movs	r2, #0
 8007840:	2300      	movs	r3, #0
 8007842:	4620      	mov	r0, r4
 8007844:	4629      	mov	r1, r5
 8007846:	f7f9 f947 	bl	8000ad8 <__aeabi_dcmpeq>
 800784a:	b108      	cbz	r0, 8007850 <__cvt+0xa4>
 800784c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007850:	2230      	movs	r2, #48	; 0x30
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	454b      	cmp	r3, r9
 8007856:	d307      	bcc.n	8007868 <__cvt+0xbc>
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800785c:	1bdb      	subs	r3, r3, r7
 800785e:	4638      	mov	r0, r7
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	b004      	add	sp, #16
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	1c59      	adds	r1, r3, #1
 800786a:	9103      	str	r1, [sp, #12]
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e7f0      	b.n	8007852 <__cvt+0xa6>

08007870 <__exponent>:
 8007870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007872:	4603      	mov	r3, r0
 8007874:	2900      	cmp	r1, #0
 8007876:	bfb8      	it	lt
 8007878:	4249      	neglt	r1, r1
 800787a:	f803 2b02 	strb.w	r2, [r3], #2
 800787e:	bfb4      	ite	lt
 8007880:	222d      	movlt	r2, #45	; 0x2d
 8007882:	222b      	movge	r2, #43	; 0x2b
 8007884:	2909      	cmp	r1, #9
 8007886:	7042      	strb	r2, [r0, #1]
 8007888:	dd2a      	ble.n	80078e0 <__exponent+0x70>
 800788a:	f10d 0407 	add.w	r4, sp, #7
 800788e:	46a4      	mov	ip, r4
 8007890:	270a      	movs	r7, #10
 8007892:	46a6      	mov	lr, r4
 8007894:	460a      	mov	r2, r1
 8007896:	fb91 f6f7 	sdiv	r6, r1, r7
 800789a:	fb07 1516 	mls	r5, r7, r6, r1
 800789e:	3530      	adds	r5, #48	; 0x30
 80078a0:	2a63      	cmp	r2, #99	; 0x63
 80078a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80078a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078aa:	4631      	mov	r1, r6
 80078ac:	dcf1      	bgt.n	8007892 <__exponent+0x22>
 80078ae:	3130      	adds	r1, #48	; 0x30
 80078b0:	f1ae 0502 	sub.w	r5, lr, #2
 80078b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078b8:	1c44      	adds	r4, r0, #1
 80078ba:	4629      	mov	r1, r5
 80078bc:	4561      	cmp	r1, ip
 80078be:	d30a      	bcc.n	80078d6 <__exponent+0x66>
 80078c0:	f10d 0209 	add.w	r2, sp, #9
 80078c4:	eba2 020e 	sub.w	r2, r2, lr
 80078c8:	4565      	cmp	r5, ip
 80078ca:	bf88      	it	hi
 80078cc:	2200      	movhi	r2, #0
 80078ce:	4413      	add	r3, r2
 80078d0:	1a18      	subs	r0, r3, r0
 80078d2:	b003      	add	sp, #12
 80078d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078de:	e7ed      	b.n	80078bc <__exponent+0x4c>
 80078e0:	2330      	movs	r3, #48	; 0x30
 80078e2:	3130      	adds	r1, #48	; 0x30
 80078e4:	7083      	strb	r3, [r0, #2]
 80078e6:	70c1      	strb	r1, [r0, #3]
 80078e8:	1d03      	adds	r3, r0, #4
 80078ea:	e7f1      	b.n	80078d0 <__exponent+0x60>

080078ec <_printf_float>:
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	ed2d 8b02 	vpush	{d8}
 80078f4:	b08d      	sub	sp, #52	; 0x34
 80078f6:	460c      	mov	r4, r1
 80078f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078fc:	4616      	mov	r6, r2
 80078fe:	461f      	mov	r7, r3
 8007900:	4605      	mov	r5, r0
 8007902:	f001 fc67 	bl	80091d4 <_localeconv_r>
 8007906:	f8d0 a000 	ldr.w	sl, [r0]
 800790a:	4650      	mov	r0, sl
 800790c:	f7f8 fc68 	bl	80001e0 <strlen>
 8007910:	2300      	movs	r3, #0
 8007912:	930a      	str	r3, [sp, #40]	; 0x28
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	9305      	str	r3, [sp, #20]
 8007918:	f8d8 3000 	ldr.w	r3, [r8]
 800791c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007920:	3307      	adds	r3, #7
 8007922:	f023 0307 	bic.w	r3, r3, #7
 8007926:	f103 0208 	add.w	r2, r3, #8
 800792a:	f8c8 2000 	str.w	r2, [r8]
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007936:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800793a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800793e:	9307      	str	r3, [sp, #28]
 8007940:	f8cd 8018 	str.w	r8, [sp, #24]
 8007944:	ee08 0a10 	vmov	s16, r0
 8007948:	4b9f      	ldr	r3, [pc, #636]	; (8007bc8 <_printf_float+0x2dc>)
 800794a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	f7f9 f8f3 	bl	8000b3c <__aeabi_dcmpun>
 8007956:	bb88      	cbnz	r0, 80079bc <_printf_float+0xd0>
 8007958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800795c:	4b9a      	ldr	r3, [pc, #616]	; (8007bc8 <_printf_float+0x2dc>)
 800795e:	f04f 32ff 	mov.w	r2, #4294967295
 8007962:	f7f9 f8cd 	bl	8000b00 <__aeabi_dcmple>
 8007966:	bb48      	cbnz	r0, 80079bc <_printf_float+0xd0>
 8007968:	2200      	movs	r2, #0
 800796a:	2300      	movs	r3, #0
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	f7f9 f8bc 	bl	8000aec <__aeabi_dcmplt>
 8007974:	b110      	cbz	r0, 800797c <_printf_float+0x90>
 8007976:	232d      	movs	r3, #45	; 0x2d
 8007978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800797c:	4b93      	ldr	r3, [pc, #588]	; (8007bcc <_printf_float+0x2e0>)
 800797e:	4894      	ldr	r0, [pc, #592]	; (8007bd0 <_printf_float+0x2e4>)
 8007980:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007984:	bf94      	ite	ls
 8007986:	4698      	movls	r8, r3
 8007988:	4680      	movhi	r8, r0
 800798a:	2303      	movs	r3, #3
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	9b05      	ldr	r3, [sp, #20]
 8007990:	f023 0204 	bic.w	r2, r3, #4
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	f04f 0900 	mov.w	r9, #0
 800799a:	9700      	str	r7, [sp, #0]
 800799c:	4633      	mov	r3, r6
 800799e:	aa0b      	add	r2, sp, #44	; 0x2c
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f9d8 	bl	8007d58 <_printf_common>
 80079a8:	3001      	adds	r0, #1
 80079aa:	f040 8090 	bne.w	8007ace <_printf_float+0x1e2>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	b00d      	add	sp, #52	; 0x34
 80079b4:	ecbd 8b02 	vpop	{d8}
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f9 f8ba 	bl	8000b3c <__aeabi_dcmpun>
 80079c8:	b140      	cbz	r0, 80079dc <_printf_float+0xf0>
 80079ca:	464b      	mov	r3, r9
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfbc      	itt	lt
 80079d0:	232d      	movlt	r3, #45	; 0x2d
 80079d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079d6:	487f      	ldr	r0, [pc, #508]	; (8007bd4 <_printf_float+0x2e8>)
 80079d8:	4b7f      	ldr	r3, [pc, #508]	; (8007bd8 <_printf_float+0x2ec>)
 80079da:	e7d1      	b.n	8007980 <_printf_float+0x94>
 80079dc:	6863      	ldr	r3, [r4, #4]
 80079de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079e2:	9206      	str	r2, [sp, #24]
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	d13f      	bne.n	8007a68 <_printf_float+0x17c>
 80079e8:	2306      	movs	r3, #6
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	9b05      	ldr	r3, [sp, #20]
 80079ee:	6861      	ldr	r1, [r4, #4]
 80079f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079f4:	2300      	movs	r3, #0
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	ab0a      	add	r3, sp, #40	; 0x28
 80079fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079fe:	ab09      	add	r3, sp, #36	; 0x24
 8007a00:	ec49 8b10 	vmov	d0, r8, r9
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f7ff fecd 	bl	80077ac <__cvt>
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a16:	2b47      	cmp	r3, #71	; 0x47
 8007a18:	4680      	mov	r8, r0
 8007a1a:	d108      	bne.n	8007a2e <_printf_float+0x142>
 8007a1c:	1cc8      	adds	r0, r1, #3
 8007a1e:	db02      	blt.n	8007a26 <_printf_float+0x13a>
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	4299      	cmp	r1, r3
 8007a24:	dd41      	ble.n	8007aaa <_printf_float+0x1be>
 8007a26:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a2a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a32:	d820      	bhi.n	8007a76 <_printf_float+0x18a>
 8007a34:	3901      	subs	r1, #1
 8007a36:	465a      	mov	r2, fp
 8007a38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a3e:	f7ff ff17 	bl	8007870 <__exponent>
 8007a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a44:	1813      	adds	r3, r2, r0
 8007a46:	2a01      	cmp	r2, #1
 8007a48:	4681      	mov	r9, r0
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	dc02      	bgt.n	8007a54 <_printf_float+0x168>
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	07d2      	lsls	r2, r2, #31
 8007a52:	d501      	bpl.n	8007a58 <_printf_float+0x16c>
 8007a54:	3301      	adds	r3, #1
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d09c      	beq.n	800799a <_printf_float+0xae>
 8007a60:	232d      	movs	r3, #45	; 0x2d
 8007a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a66:	e798      	b.n	800799a <_printf_float+0xae>
 8007a68:	9a06      	ldr	r2, [sp, #24]
 8007a6a:	2a47      	cmp	r2, #71	; 0x47
 8007a6c:	d1be      	bne.n	80079ec <_printf_float+0x100>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1bc      	bne.n	80079ec <_printf_float+0x100>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e7b9      	b.n	80079ea <_printf_float+0xfe>
 8007a76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a7a:	d118      	bne.n	8007aae <_printf_float+0x1c2>
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	dd0b      	ble.n	8007a9a <_printf_float+0x1ae>
 8007a82:	6121      	str	r1, [r4, #16]
 8007a84:	b913      	cbnz	r3, 8007a8c <_printf_float+0x1a0>
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	07d0      	lsls	r0, r2, #31
 8007a8a:	d502      	bpl.n	8007a92 <_printf_float+0x1a6>
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	440b      	add	r3, r1
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a94:	f04f 0900 	mov.w	r9, #0
 8007a98:	e7de      	b.n	8007a58 <_printf_float+0x16c>
 8007a9a:	b913      	cbnz	r3, 8007aa2 <_printf_float+0x1b6>
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	07d2      	lsls	r2, r2, #31
 8007aa0:	d501      	bpl.n	8007aa6 <_printf_float+0x1ba>
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	e7f4      	b.n	8007a90 <_printf_float+0x1a4>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e7f2      	b.n	8007a90 <_printf_float+0x1a4>
 8007aaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	db05      	blt.n	8007ac0 <_printf_float+0x1d4>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	6121      	str	r1, [r4, #16]
 8007ab8:	07d8      	lsls	r0, r3, #31
 8007aba:	d5ea      	bpl.n	8007a92 <_printf_float+0x1a6>
 8007abc:	1c4b      	adds	r3, r1, #1
 8007abe:	e7e7      	b.n	8007a90 <_printf_float+0x1a4>
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	bfd4      	ite	le
 8007ac4:	f1c1 0202 	rsble	r2, r1, #2
 8007ac8:	2201      	movgt	r2, #1
 8007aca:	4413      	add	r3, r2
 8007acc:	e7e0      	b.n	8007a90 <_printf_float+0x1a4>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	055a      	lsls	r2, r3, #21
 8007ad2:	d407      	bmi.n	8007ae4 <_printf_float+0x1f8>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d12c      	bne.n	8007b3c <_printf_float+0x250>
 8007ae2:	e764      	b.n	80079ae <_printf_float+0xc2>
 8007ae4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ae8:	f240 80e0 	bls.w	8007cac <_printf_float+0x3c0>
 8007aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007af0:	2200      	movs	r2, #0
 8007af2:	2300      	movs	r3, #0
 8007af4:	f7f8 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d034      	beq.n	8007b66 <_printf_float+0x27a>
 8007afc:	4a37      	ldr	r2, [pc, #220]	; (8007bdc <_printf_float+0x2f0>)
 8007afe:	2301      	movs	r3, #1
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f af51 	beq.w	80079ae <_printf_float+0xc2>
 8007b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b10:	429a      	cmp	r2, r3
 8007b12:	db02      	blt.n	8007b1a <_printf_float+0x22e>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07d8      	lsls	r0, r3, #31
 8007b18:	d510      	bpl.n	8007b3c <_printf_float+0x250>
 8007b1a:	ee18 3a10 	vmov	r3, s16
 8007b1e:	4652      	mov	r2, sl
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f af41 	beq.w	80079ae <_printf_float+0xc2>
 8007b2c:	f04f 0800 	mov.w	r8, #0
 8007b30:	f104 091a 	add.w	r9, r4, #26
 8007b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b36:	3b01      	subs	r3, #1
 8007b38:	4543      	cmp	r3, r8
 8007b3a:	dc09      	bgt.n	8007b50 <_printf_float+0x264>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	079b      	lsls	r3, r3, #30
 8007b40:	f100 8105 	bmi.w	8007d4e <_printf_float+0x462>
 8007b44:	68e0      	ldr	r0, [r4, #12]
 8007b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b48:	4298      	cmp	r0, r3
 8007b4a:	bfb8      	it	lt
 8007b4c:	4618      	movlt	r0, r3
 8007b4e:	e730      	b.n	80079b2 <_printf_float+0xc6>
 8007b50:	2301      	movs	r3, #1
 8007b52:	464a      	mov	r2, r9
 8007b54:	4631      	mov	r1, r6
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b8      	blx	r7
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	f43f af27 	beq.w	80079ae <_printf_float+0xc2>
 8007b60:	f108 0801 	add.w	r8, r8, #1
 8007b64:	e7e6      	b.n	8007b34 <_printf_float+0x248>
 8007b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	dc39      	bgt.n	8007be0 <_printf_float+0x2f4>
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <_printf_float+0x2f0>)
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4631      	mov	r1, r6
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f af19 	beq.w	80079ae <_printf_float+0xc2>
 8007b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b80:	4313      	orrs	r3, r2
 8007b82:	d102      	bne.n	8007b8a <_printf_float+0x29e>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	07d9      	lsls	r1, r3, #31
 8007b88:	d5d8      	bpl.n	8007b3c <_printf_float+0x250>
 8007b8a:	ee18 3a10 	vmov	r3, s16
 8007b8e:	4652      	mov	r2, sl
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f af09 	beq.w	80079ae <_printf_float+0xc2>
 8007b9c:	f04f 0900 	mov.w	r9, #0
 8007ba0:	f104 0a1a 	add.w	sl, r4, #26
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	425b      	negs	r3, r3
 8007ba8:	454b      	cmp	r3, r9
 8007baa:	dc01      	bgt.n	8007bb0 <_printf_float+0x2c4>
 8007bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bae:	e792      	b.n	8007ad6 <_printf_float+0x1ea>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f aef7 	beq.w	80079ae <_printf_float+0xc2>
 8007bc0:	f109 0901 	add.w	r9, r9, #1
 8007bc4:	e7ee      	b.n	8007ba4 <_printf_float+0x2b8>
 8007bc6:	bf00      	nop
 8007bc8:	7fefffff 	.word	0x7fefffff
 8007bcc:	0800a058 	.word	0x0800a058
 8007bd0:	0800a05c 	.word	0x0800a05c
 8007bd4:	0800a064 	.word	0x0800a064
 8007bd8:	0800a060 	.word	0x0800a060
 8007bdc:	0800a068 	.word	0x0800a068
 8007be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007be4:	429a      	cmp	r2, r3
 8007be6:	bfa8      	it	ge
 8007be8:	461a      	movge	r2, r3
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	4691      	mov	r9, r2
 8007bee:	dc37      	bgt.n	8007c60 <_printf_float+0x374>
 8007bf0:	f04f 0b00 	mov.w	fp, #0
 8007bf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf8:	f104 021a 	add.w	r2, r4, #26
 8007bfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bfe:	9305      	str	r3, [sp, #20]
 8007c00:	eba3 0309 	sub.w	r3, r3, r9
 8007c04:	455b      	cmp	r3, fp
 8007c06:	dc33      	bgt.n	8007c70 <_printf_float+0x384>
 8007c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	db3b      	blt.n	8007c88 <_printf_float+0x39c>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	07da      	lsls	r2, r3, #31
 8007c14:	d438      	bmi.n	8007c88 <_printf_float+0x39c>
 8007c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c18:	9a05      	ldr	r2, [sp, #20]
 8007c1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c1c:	1a9a      	subs	r2, r3, r2
 8007c1e:	eba3 0901 	sub.w	r9, r3, r1
 8007c22:	4591      	cmp	r9, r2
 8007c24:	bfa8      	it	ge
 8007c26:	4691      	movge	r9, r2
 8007c28:	f1b9 0f00 	cmp.w	r9, #0
 8007c2c:	dc35      	bgt.n	8007c9a <_printf_float+0x3ae>
 8007c2e:	f04f 0800 	mov.w	r8, #0
 8007c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c36:	f104 0a1a 	add.w	sl, r4, #26
 8007c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	eba3 0309 	sub.w	r3, r3, r9
 8007c44:	4543      	cmp	r3, r8
 8007c46:	f77f af79 	ble.w	8007b3c <_printf_float+0x250>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	f43f aeaa 	beq.w	80079ae <_printf_float+0xc2>
 8007c5a:	f108 0801 	add.w	r8, r8, #1
 8007c5e:	e7ec      	b.n	8007c3a <_printf_float+0x34e>
 8007c60:	4613      	mov	r3, r2
 8007c62:	4631      	mov	r1, r6
 8007c64:	4642      	mov	r2, r8
 8007c66:	4628      	mov	r0, r5
 8007c68:	47b8      	blx	r7
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d1c0      	bne.n	8007bf0 <_printf_float+0x304>
 8007c6e:	e69e      	b.n	80079ae <_printf_float+0xc2>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	9205      	str	r2, [sp, #20]
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	f43f ae97 	beq.w	80079ae <_printf_float+0xc2>
 8007c80:	9a05      	ldr	r2, [sp, #20]
 8007c82:	f10b 0b01 	add.w	fp, fp, #1
 8007c86:	e7b9      	b.n	8007bfc <_printf_float+0x310>
 8007c88:	ee18 3a10 	vmov	r3, s16
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	d1be      	bne.n	8007c16 <_printf_float+0x32a>
 8007c98:	e689      	b.n	80079ae <_printf_float+0xc2>
 8007c9a:	9a05      	ldr	r2, [sp, #20]
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	4442      	add	r2, r8
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d1c1      	bne.n	8007c2e <_printf_float+0x342>
 8007caa:	e680      	b.n	80079ae <_printf_float+0xc2>
 8007cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cae:	2a01      	cmp	r2, #1
 8007cb0:	dc01      	bgt.n	8007cb6 <_printf_float+0x3ca>
 8007cb2:	07db      	lsls	r3, r3, #31
 8007cb4:	d538      	bpl.n	8007d28 <_printf_float+0x43c>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4642      	mov	r2, r8
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f43f ae74 	beq.w	80079ae <_printf_float+0xc2>
 8007cc6:	ee18 3a10 	vmov	r3, s16
 8007cca:	4652      	mov	r2, sl
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f43f ae6b 	beq.w	80079ae <_printf_float+0xc2>
 8007cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f7f8 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ce4:	b9d8      	cbnz	r0, 8007d1e <_printf_float+0x432>
 8007ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce8:	f108 0201 	add.w	r2, r8, #1
 8007cec:	3b01      	subs	r3, #1
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d10e      	bne.n	8007d16 <_printf_float+0x42a>
 8007cf8:	e659      	b.n	80079ae <_printf_float+0xc2>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f ae52 	beq.w	80079ae <_printf_float+0xc2>
 8007d0a:	f108 0801 	add.w	r8, r8, #1
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	3b01      	subs	r3, #1
 8007d12:	4543      	cmp	r3, r8
 8007d14:	dcf1      	bgt.n	8007cfa <_printf_float+0x40e>
 8007d16:	464b      	mov	r3, r9
 8007d18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d1c:	e6dc      	b.n	8007ad8 <_printf_float+0x1ec>
 8007d1e:	f04f 0800 	mov.w	r8, #0
 8007d22:	f104 0a1a 	add.w	sl, r4, #26
 8007d26:	e7f2      	b.n	8007d0e <_printf_float+0x422>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	e7df      	b.n	8007cee <_printf_float+0x402>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	464a      	mov	r2, r9
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f43f ae38 	beq.w	80079ae <_printf_float+0xc2>
 8007d3e:	f108 0801 	add.w	r8, r8, #1
 8007d42:	68e3      	ldr	r3, [r4, #12]
 8007d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d46:	1a5b      	subs	r3, r3, r1
 8007d48:	4543      	cmp	r3, r8
 8007d4a:	dcf0      	bgt.n	8007d2e <_printf_float+0x442>
 8007d4c:	e6fa      	b.n	8007b44 <_printf_float+0x258>
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	f104 0919 	add.w	r9, r4, #25
 8007d56:	e7f4      	b.n	8007d42 <_printf_float+0x456>

08007d58 <_printf_common>:
 8007d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	4699      	mov	r9, r3
 8007d60:	688a      	ldr	r2, [r1, #8]
 8007d62:	690b      	ldr	r3, [r1, #16]
 8007d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	bfb8      	it	lt
 8007d6c:	4613      	movlt	r3, r2
 8007d6e:	6033      	str	r3, [r6, #0]
 8007d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d74:	4607      	mov	r7, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	b10a      	cbz	r2, 8007d7e <_printf_common+0x26>
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	6033      	str	r3, [r6, #0]
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	0699      	lsls	r1, r3, #26
 8007d82:	bf42      	ittt	mi
 8007d84:	6833      	ldrmi	r3, [r6, #0]
 8007d86:	3302      	addmi	r3, #2
 8007d88:	6033      	strmi	r3, [r6, #0]
 8007d8a:	6825      	ldr	r5, [r4, #0]
 8007d8c:	f015 0506 	ands.w	r5, r5, #6
 8007d90:	d106      	bne.n	8007da0 <_printf_common+0x48>
 8007d92:	f104 0a19 	add.w	sl, r4, #25
 8007d96:	68e3      	ldr	r3, [r4, #12]
 8007d98:	6832      	ldr	r2, [r6, #0]
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	42ab      	cmp	r3, r5
 8007d9e:	dc26      	bgt.n	8007dee <_printf_common+0x96>
 8007da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007da4:	1e13      	subs	r3, r2, #0
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	bf18      	it	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	0692      	lsls	r2, r2, #26
 8007dae:	d42b      	bmi.n	8007e08 <_printf_common+0xb0>
 8007db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007db4:	4649      	mov	r1, r9
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d01e      	beq.n	8007dfc <_printf_common+0xa4>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	68e5      	ldr	r5, [r4, #12]
 8007dc2:	6832      	ldr	r2, [r6, #0]
 8007dc4:	f003 0306 	and.w	r3, r3, #6
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	bf08      	it	eq
 8007dcc:	1aad      	subeq	r5, r5, r2
 8007dce:	68a3      	ldr	r3, [r4, #8]
 8007dd0:	6922      	ldr	r2, [r4, #16]
 8007dd2:	bf0c      	ite	eq
 8007dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dd8:	2500      	movne	r5, #0
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	bfc4      	itt	gt
 8007dde:	1a9b      	subgt	r3, r3, r2
 8007de0:	18ed      	addgt	r5, r5, r3
 8007de2:	2600      	movs	r6, #0
 8007de4:	341a      	adds	r4, #26
 8007de6:	42b5      	cmp	r5, r6
 8007de8:	d11a      	bne.n	8007e20 <_printf_common+0xc8>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e008      	b.n	8007e00 <_printf_common+0xa8>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4652      	mov	r2, sl
 8007df2:	4649      	mov	r1, r9
 8007df4:	4638      	mov	r0, r7
 8007df6:	47c0      	blx	r8
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d103      	bne.n	8007e04 <_printf_common+0xac>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e04:	3501      	adds	r5, #1
 8007e06:	e7c6      	b.n	8007d96 <_printf_common+0x3e>
 8007e08:	18e1      	adds	r1, r4, r3
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	2030      	movs	r0, #48	; 0x30
 8007e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e12:	4422      	add	r2, r4
 8007e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	e7c7      	b.n	8007db0 <_printf_common+0x58>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4622      	mov	r2, r4
 8007e24:	4649      	mov	r1, r9
 8007e26:	4638      	mov	r0, r7
 8007e28:	47c0      	blx	r8
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d0e6      	beq.n	8007dfc <_printf_common+0xa4>
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7d9      	b.n	8007de6 <_printf_common+0x8e>
	...

08007e34 <_printf_i>:
 8007e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e38:	7e0f      	ldrb	r7, [r1, #24]
 8007e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e3c:	2f78      	cmp	r7, #120	; 0x78
 8007e3e:	4691      	mov	r9, r2
 8007e40:	4680      	mov	r8, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	469a      	mov	sl, r3
 8007e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e4a:	d807      	bhi.n	8007e5c <_printf_i+0x28>
 8007e4c:	2f62      	cmp	r7, #98	; 0x62
 8007e4e:	d80a      	bhi.n	8007e66 <_printf_i+0x32>
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	f000 80d8 	beq.w	8008006 <_printf_i+0x1d2>
 8007e56:	2f58      	cmp	r7, #88	; 0x58
 8007e58:	f000 80a3 	beq.w	8007fa2 <_printf_i+0x16e>
 8007e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e64:	e03a      	b.n	8007edc <_printf_i+0xa8>
 8007e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e6a:	2b15      	cmp	r3, #21
 8007e6c:	d8f6      	bhi.n	8007e5c <_printf_i+0x28>
 8007e6e:	a101      	add	r1, pc, #4	; (adr r1, 8007e74 <_printf_i+0x40>)
 8007e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e74:	08007ecd 	.word	0x08007ecd
 8007e78:	08007ee1 	.word	0x08007ee1
 8007e7c:	08007e5d 	.word	0x08007e5d
 8007e80:	08007e5d 	.word	0x08007e5d
 8007e84:	08007e5d 	.word	0x08007e5d
 8007e88:	08007e5d 	.word	0x08007e5d
 8007e8c:	08007ee1 	.word	0x08007ee1
 8007e90:	08007e5d 	.word	0x08007e5d
 8007e94:	08007e5d 	.word	0x08007e5d
 8007e98:	08007e5d 	.word	0x08007e5d
 8007e9c:	08007e5d 	.word	0x08007e5d
 8007ea0:	08007fed 	.word	0x08007fed
 8007ea4:	08007f11 	.word	0x08007f11
 8007ea8:	08007fcf 	.word	0x08007fcf
 8007eac:	08007e5d 	.word	0x08007e5d
 8007eb0:	08007e5d 	.word	0x08007e5d
 8007eb4:	0800800f 	.word	0x0800800f
 8007eb8:	08007e5d 	.word	0x08007e5d
 8007ebc:	08007f11 	.word	0x08007f11
 8007ec0:	08007e5d 	.word	0x08007e5d
 8007ec4:	08007e5d 	.word	0x08007e5d
 8007ec8:	08007fd7 	.word	0x08007fd7
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	1d1a      	adds	r2, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	602a      	str	r2, [r5, #0]
 8007ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0a3      	b.n	8008028 <_printf_i+0x1f4>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	6829      	ldr	r1, [r5, #0]
 8007ee4:	0606      	lsls	r6, r0, #24
 8007ee6:	f101 0304 	add.w	r3, r1, #4
 8007eea:	d50a      	bpl.n	8007f02 <_printf_i+0xce>
 8007eec:	680e      	ldr	r6, [r1, #0]
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	da03      	bge.n	8007efc <_printf_i+0xc8>
 8007ef4:	232d      	movs	r3, #45	; 0x2d
 8007ef6:	4276      	negs	r6, r6
 8007ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007efc:	485e      	ldr	r0, [pc, #376]	; (8008078 <_printf_i+0x244>)
 8007efe:	230a      	movs	r3, #10
 8007f00:	e019      	b.n	8007f36 <_printf_i+0x102>
 8007f02:	680e      	ldr	r6, [r1, #0]
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f0a:	bf18      	it	ne
 8007f0c:	b236      	sxthne	r6, r6
 8007f0e:	e7ef      	b.n	8007ef0 <_printf_i+0xbc>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	6820      	ldr	r0, [r4, #0]
 8007f14:	1d19      	adds	r1, r3, #4
 8007f16:	6029      	str	r1, [r5, #0]
 8007f18:	0601      	lsls	r1, r0, #24
 8007f1a:	d501      	bpl.n	8007f20 <_printf_i+0xec>
 8007f1c:	681e      	ldr	r6, [r3, #0]
 8007f1e:	e002      	b.n	8007f26 <_printf_i+0xf2>
 8007f20:	0646      	lsls	r6, r0, #25
 8007f22:	d5fb      	bpl.n	8007f1c <_printf_i+0xe8>
 8007f24:	881e      	ldrh	r6, [r3, #0]
 8007f26:	4854      	ldr	r0, [pc, #336]	; (8008078 <_printf_i+0x244>)
 8007f28:	2f6f      	cmp	r7, #111	; 0x6f
 8007f2a:	bf0c      	ite	eq
 8007f2c:	2308      	moveq	r3, #8
 8007f2e:	230a      	movne	r3, #10
 8007f30:	2100      	movs	r1, #0
 8007f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f36:	6865      	ldr	r5, [r4, #4]
 8007f38:	60a5      	str	r5, [r4, #8]
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	bfa2      	ittt	ge
 8007f3e:	6821      	ldrge	r1, [r4, #0]
 8007f40:	f021 0104 	bicge.w	r1, r1, #4
 8007f44:	6021      	strge	r1, [r4, #0]
 8007f46:	b90e      	cbnz	r6, 8007f4c <_printf_i+0x118>
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	d04d      	beq.n	8007fe8 <_printf_i+0x1b4>
 8007f4c:	4615      	mov	r5, r2
 8007f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f52:	fb03 6711 	mls	r7, r3, r1, r6
 8007f56:	5dc7      	ldrb	r7, [r0, r7]
 8007f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f5c:	4637      	mov	r7, r6
 8007f5e:	42bb      	cmp	r3, r7
 8007f60:	460e      	mov	r6, r1
 8007f62:	d9f4      	bls.n	8007f4e <_printf_i+0x11a>
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d10b      	bne.n	8007f80 <_printf_i+0x14c>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	07de      	lsls	r6, r3, #31
 8007f6c:	d508      	bpl.n	8007f80 <_printf_i+0x14c>
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	6861      	ldr	r1, [r4, #4]
 8007f72:	4299      	cmp	r1, r3
 8007f74:	bfde      	ittt	le
 8007f76:	2330      	movle	r3, #48	; 0x30
 8007f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f80:	1b52      	subs	r2, r2, r5
 8007f82:	6122      	str	r2, [r4, #16]
 8007f84:	f8cd a000 	str.w	sl, [sp]
 8007f88:	464b      	mov	r3, r9
 8007f8a:	aa03      	add	r2, sp, #12
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f7ff fee2 	bl	8007d58 <_printf_common>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d14c      	bne.n	8008032 <_printf_i+0x1fe>
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	b004      	add	sp, #16
 8007f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa2:	4835      	ldr	r0, [pc, #212]	; (8008078 <_printf_i+0x244>)
 8007fa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fa8:	6829      	ldr	r1, [r5, #0]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fb0:	6029      	str	r1, [r5, #0]
 8007fb2:	061d      	lsls	r5, r3, #24
 8007fb4:	d514      	bpl.n	8007fe0 <_printf_i+0x1ac>
 8007fb6:	07df      	lsls	r7, r3, #31
 8007fb8:	bf44      	itt	mi
 8007fba:	f043 0320 	orrmi.w	r3, r3, #32
 8007fbe:	6023      	strmi	r3, [r4, #0]
 8007fc0:	b91e      	cbnz	r6, 8007fca <_printf_i+0x196>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	f023 0320 	bic.w	r3, r3, #32
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	2310      	movs	r3, #16
 8007fcc:	e7b0      	b.n	8007f30 <_printf_i+0xfc>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	f043 0320 	orr.w	r3, r3, #32
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	2378      	movs	r3, #120	; 0x78
 8007fd8:	4828      	ldr	r0, [pc, #160]	; (800807c <_printf_i+0x248>)
 8007fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fde:	e7e3      	b.n	8007fa8 <_printf_i+0x174>
 8007fe0:	0659      	lsls	r1, r3, #25
 8007fe2:	bf48      	it	mi
 8007fe4:	b2b6      	uxthmi	r6, r6
 8007fe6:	e7e6      	b.n	8007fb6 <_printf_i+0x182>
 8007fe8:	4615      	mov	r5, r2
 8007fea:	e7bb      	b.n	8007f64 <_printf_i+0x130>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	6826      	ldr	r6, [r4, #0]
 8007ff0:	6961      	ldr	r1, [r4, #20]
 8007ff2:	1d18      	adds	r0, r3, #4
 8007ff4:	6028      	str	r0, [r5, #0]
 8007ff6:	0635      	lsls	r5, r6, #24
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	d501      	bpl.n	8008000 <_printf_i+0x1cc>
 8007ffc:	6019      	str	r1, [r3, #0]
 8007ffe:	e002      	b.n	8008006 <_printf_i+0x1d2>
 8008000:	0670      	lsls	r0, r6, #25
 8008002:	d5fb      	bpl.n	8007ffc <_printf_i+0x1c8>
 8008004:	8019      	strh	r1, [r3, #0]
 8008006:	2300      	movs	r3, #0
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	4615      	mov	r5, r2
 800800c:	e7ba      	b.n	8007f84 <_printf_i+0x150>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	1d1a      	adds	r2, r3, #4
 8008012:	602a      	str	r2, [r5, #0]
 8008014:	681d      	ldr	r5, [r3, #0]
 8008016:	6862      	ldr	r2, [r4, #4]
 8008018:	2100      	movs	r1, #0
 800801a:	4628      	mov	r0, r5
 800801c:	f7f8 f8e8 	bl	80001f0 <memchr>
 8008020:	b108      	cbz	r0, 8008026 <_printf_i+0x1f2>
 8008022:	1b40      	subs	r0, r0, r5
 8008024:	6060      	str	r0, [r4, #4]
 8008026:	6863      	ldr	r3, [r4, #4]
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	2300      	movs	r3, #0
 800802c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008030:	e7a8      	b.n	8007f84 <_printf_i+0x150>
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	462a      	mov	r2, r5
 8008036:	4649      	mov	r1, r9
 8008038:	4640      	mov	r0, r8
 800803a:	47d0      	blx	sl
 800803c:	3001      	adds	r0, #1
 800803e:	d0ab      	beq.n	8007f98 <_printf_i+0x164>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	079b      	lsls	r3, r3, #30
 8008044:	d413      	bmi.n	800806e <_printf_i+0x23a>
 8008046:	68e0      	ldr	r0, [r4, #12]
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	4298      	cmp	r0, r3
 800804c:	bfb8      	it	lt
 800804e:	4618      	movlt	r0, r3
 8008050:	e7a4      	b.n	8007f9c <_printf_i+0x168>
 8008052:	2301      	movs	r3, #1
 8008054:	4632      	mov	r2, r6
 8008056:	4649      	mov	r1, r9
 8008058:	4640      	mov	r0, r8
 800805a:	47d0      	blx	sl
 800805c:	3001      	adds	r0, #1
 800805e:	d09b      	beq.n	8007f98 <_printf_i+0x164>
 8008060:	3501      	adds	r5, #1
 8008062:	68e3      	ldr	r3, [r4, #12]
 8008064:	9903      	ldr	r1, [sp, #12]
 8008066:	1a5b      	subs	r3, r3, r1
 8008068:	42ab      	cmp	r3, r5
 800806a:	dcf2      	bgt.n	8008052 <_printf_i+0x21e>
 800806c:	e7eb      	b.n	8008046 <_printf_i+0x212>
 800806e:	2500      	movs	r5, #0
 8008070:	f104 0619 	add.w	r6, r4, #25
 8008074:	e7f5      	b.n	8008062 <_printf_i+0x22e>
 8008076:	bf00      	nop
 8008078:	0800a06a 	.word	0x0800a06a
 800807c:	0800a07b 	.word	0x0800a07b

08008080 <iprintf>:
 8008080:	b40f      	push	{r0, r1, r2, r3}
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <iprintf+0x2c>)
 8008084:	b513      	push	{r0, r1, r4, lr}
 8008086:	681c      	ldr	r4, [r3, #0]
 8008088:	b124      	cbz	r4, 8008094 <iprintf+0x14>
 800808a:	69a3      	ldr	r3, [r4, #24]
 800808c:	b913      	cbnz	r3, 8008094 <iprintf+0x14>
 800808e:	4620      	mov	r0, r4
 8008090:	f7ff f9d0 	bl	8007434 <__sinit>
 8008094:	ab05      	add	r3, sp, #20
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	68a1      	ldr	r1, [r4, #8]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	4620      	mov	r0, r4
 800809e:	f001 fced 	bl	8009a7c <_vfiprintf_r>
 80080a2:	b002      	add	sp, #8
 80080a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a8:	b004      	add	sp, #16
 80080aa:	4770      	bx	lr
 80080ac:	20000014 	.word	0x20000014

080080b0 <_puts_r>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	460e      	mov	r6, r1
 80080b4:	4605      	mov	r5, r0
 80080b6:	b118      	cbz	r0, 80080c0 <_puts_r+0x10>
 80080b8:	6983      	ldr	r3, [r0, #24]
 80080ba:	b90b      	cbnz	r3, 80080c0 <_puts_r+0x10>
 80080bc:	f7ff f9ba 	bl	8007434 <__sinit>
 80080c0:	69ab      	ldr	r3, [r5, #24]
 80080c2:	68ac      	ldr	r4, [r5, #8]
 80080c4:	b913      	cbnz	r3, 80080cc <_puts_r+0x1c>
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7ff f9b4 	bl	8007434 <__sinit>
 80080cc:	4b2c      	ldr	r3, [pc, #176]	; (8008180 <_puts_r+0xd0>)
 80080ce:	429c      	cmp	r4, r3
 80080d0:	d120      	bne.n	8008114 <_puts_r+0x64>
 80080d2:	686c      	ldr	r4, [r5, #4]
 80080d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080d6:	07db      	lsls	r3, r3, #31
 80080d8:	d405      	bmi.n	80080e6 <_puts_r+0x36>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	0598      	lsls	r0, r3, #22
 80080de:	d402      	bmi.n	80080e6 <_puts_r+0x36>
 80080e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e2:	f7ff fa6a 	bl	80075ba <__retarget_lock_acquire_recursive>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	0719      	lsls	r1, r3, #28
 80080ea:	d51d      	bpl.n	8008128 <_puts_r+0x78>
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	b1db      	cbz	r3, 8008128 <_puts_r+0x78>
 80080f0:	3e01      	subs	r6, #1
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080f8:	3b01      	subs	r3, #1
 80080fa:	60a3      	str	r3, [r4, #8]
 80080fc:	bb39      	cbnz	r1, 800814e <_puts_r+0x9e>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da38      	bge.n	8008174 <_puts_r+0xc4>
 8008102:	4622      	mov	r2, r4
 8008104:	210a      	movs	r1, #10
 8008106:	4628      	mov	r0, r5
 8008108:	f000 f906 	bl	8008318 <__swbuf_r>
 800810c:	3001      	adds	r0, #1
 800810e:	d011      	beq.n	8008134 <_puts_r+0x84>
 8008110:	250a      	movs	r5, #10
 8008112:	e011      	b.n	8008138 <_puts_r+0x88>
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <_puts_r+0xd4>)
 8008116:	429c      	cmp	r4, r3
 8008118:	d101      	bne.n	800811e <_puts_r+0x6e>
 800811a:	68ac      	ldr	r4, [r5, #8]
 800811c:	e7da      	b.n	80080d4 <_puts_r+0x24>
 800811e:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <_puts_r+0xd8>)
 8008120:	429c      	cmp	r4, r3
 8008122:	bf08      	it	eq
 8008124:	68ec      	ldreq	r4, [r5, #12]
 8008126:	e7d5      	b.n	80080d4 <_puts_r+0x24>
 8008128:	4621      	mov	r1, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f958 	bl	80083e0 <__swsetup_r>
 8008130:	2800      	cmp	r0, #0
 8008132:	d0dd      	beq.n	80080f0 <_puts_r+0x40>
 8008134:	f04f 35ff 	mov.w	r5, #4294967295
 8008138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800813a:	07da      	lsls	r2, r3, #31
 800813c:	d405      	bmi.n	800814a <_puts_r+0x9a>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	059b      	lsls	r3, r3, #22
 8008142:	d402      	bmi.n	800814a <_puts_r+0x9a>
 8008144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008146:	f7ff fa39 	bl	80075bc <__retarget_lock_release_recursive>
 800814a:	4628      	mov	r0, r5
 800814c:	bd70      	pop	{r4, r5, r6, pc}
 800814e:	2b00      	cmp	r3, #0
 8008150:	da04      	bge.n	800815c <_puts_r+0xac>
 8008152:	69a2      	ldr	r2, [r4, #24]
 8008154:	429a      	cmp	r2, r3
 8008156:	dc06      	bgt.n	8008166 <_puts_r+0xb6>
 8008158:	290a      	cmp	r1, #10
 800815a:	d004      	beq.n	8008166 <_puts_r+0xb6>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	6022      	str	r2, [r4, #0]
 8008162:	7019      	strb	r1, [r3, #0]
 8008164:	e7c5      	b.n	80080f2 <_puts_r+0x42>
 8008166:	4622      	mov	r2, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f000 f8d5 	bl	8008318 <__swbuf_r>
 800816e:	3001      	adds	r0, #1
 8008170:	d1bf      	bne.n	80080f2 <_puts_r+0x42>
 8008172:	e7df      	b.n	8008134 <_puts_r+0x84>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	250a      	movs	r5, #10
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	701d      	strb	r5, [r3, #0]
 800817e:	e7db      	b.n	8008138 <_puts_r+0x88>
 8008180:	0800a014 	.word	0x0800a014
 8008184:	0800a034 	.word	0x0800a034
 8008188:	08009ff4 	.word	0x08009ff4

0800818c <puts>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <puts+0xc>)
 800818e:	4601      	mov	r1, r0
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	f7ff bf8d 	b.w	80080b0 <_puts_r>
 8008196:	bf00      	nop
 8008198:	20000014 	.word	0x20000014

0800819c <cleanup_glue>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	6809      	ldr	r1, [r1, #0]
 80081a2:	4605      	mov	r5, r0
 80081a4:	b109      	cbz	r1, 80081aa <cleanup_glue+0xe>
 80081a6:	f7ff fff9 	bl	800819c <cleanup_glue>
 80081aa:	4621      	mov	r1, r4
 80081ac:	4628      	mov	r0, r5
 80081ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081b2:	f7ff ba1b 	b.w	80075ec <_free_r>
	...

080081b8 <_reclaim_reent>:
 80081b8:	4b2c      	ldr	r3, [pc, #176]	; (800826c <_reclaim_reent+0xb4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4283      	cmp	r3, r0
 80081be:	b570      	push	{r4, r5, r6, lr}
 80081c0:	4604      	mov	r4, r0
 80081c2:	d051      	beq.n	8008268 <_reclaim_reent+0xb0>
 80081c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80081c6:	b143      	cbz	r3, 80081da <_reclaim_reent+0x22>
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d14a      	bne.n	8008264 <_reclaim_reent+0xac>
 80081ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d0:	6819      	ldr	r1, [r3, #0]
 80081d2:	b111      	cbz	r1, 80081da <_reclaim_reent+0x22>
 80081d4:	4620      	mov	r0, r4
 80081d6:	f7ff fa09 	bl	80075ec <_free_r>
 80081da:	6961      	ldr	r1, [r4, #20]
 80081dc:	b111      	cbz	r1, 80081e4 <_reclaim_reent+0x2c>
 80081de:	4620      	mov	r0, r4
 80081e0:	f7ff fa04 	bl	80075ec <_free_r>
 80081e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80081e6:	b111      	cbz	r1, 80081ee <_reclaim_reent+0x36>
 80081e8:	4620      	mov	r0, r4
 80081ea:	f7ff f9ff 	bl	80075ec <_free_r>
 80081ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081f0:	b111      	cbz	r1, 80081f8 <_reclaim_reent+0x40>
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff f9fa 	bl	80075ec <_free_r>
 80081f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80081fa:	b111      	cbz	r1, 8008202 <_reclaim_reent+0x4a>
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7ff f9f5 	bl	80075ec <_free_r>
 8008202:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008204:	b111      	cbz	r1, 800820c <_reclaim_reent+0x54>
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff f9f0 	bl	80075ec <_free_r>
 800820c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800820e:	b111      	cbz	r1, 8008216 <_reclaim_reent+0x5e>
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff f9eb 	bl	80075ec <_free_r>
 8008216:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008218:	b111      	cbz	r1, 8008220 <_reclaim_reent+0x68>
 800821a:	4620      	mov	r0, r4
 800821c:	f7ff f9e6 	bl	80075ec <_free_r>
 8008220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008222:	b111      	cbz	r1, 800822a <_reclaim_reent+0x72>
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff f9e1 	bl	80075ec <_free_r>
 800822a:	69a3      	ldr	r3, [r4, #24]
 800822c:	b1e3      	cbz	r3, 8008268 <_reclaim_reent+0xb0>
 800822e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008230:	4620      	mov	r0, r4
 8008232:	4798      	blx	r3
 8008234:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008236:	b1b9      	cbz	r1, 8008268 <_reclaim_reent+0xb0>
 8008238:	4620      	mov	r0, r4
 800823a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800823e:	f7ff bfad 	b.w	800819c <cleanup_glue>
 8008242:	5949      	ldr	r1, [r1, r5]
 8008244:	b941      	cbnz	r1, 8008258 <_reclaim_reent+0xa0>
 8008246:	3504      	adds	r5, #4
 8008248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800824a:	2d80      	cmp	r5, #128	; 0x80
 800824c:	68d9      	ldr	r1, [r3, #12]
 800824e:	d1f8      	bne.n	8008242 <_reclaim_reent+0x8a>
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff f9cb 	bl	80075ec <_free_r>
 8008256:	e7ba      	b.n	80081ce <_reclaim_reent+0x16>
 8008258:	680e      	ldr	r6, [r1, #0]
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff f9c6 	bl	80075ec <_free_r>
 8008260:	4631      	mov	r1, r6
 8008262:	e7ef      	b.n	8008244 <_reclaim_reent+0x8c>
 8008264:	2500      	movs	r5, #0
 8008266:	e7ef      	b.n	8008248 <_reclaim_reent+0x90>
 8008268:	bd70      	pop	{r4, r5, r6, pc}
 800826a:	bf00      	nop
 800826c:	20000014 	.word	0x20000014

08008270 <_sbrk_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d06      	ldr	r5, [pc, #24]	; (800828c <_sbrk_r+0x1c>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	f7f9 ff78 	bl	8002170 <_sbrk>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_sbrk_r+0x1a>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_sbrk_r+0x1a>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	20014aac 	.word	0x20014aac

08008290 <__sread>:
 8008290:	b510      	push	{r4, lr}
 8008292:	460c      	mov	r4, r1
 8008294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008298:	f001 fd20 	bl	8009cdc <_read_r>
 800829c:	2800      	cmp	r0, #0
 800829e:	bfab      	itete	ge
 80082a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082a2:	89a3      	ldrhlt	r3, [r4, #12]
 80082a4:	181b      	addge	r3, r3, r0
 80082a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082aa:	bfac      	ite	ge
 80082ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80082ae:	81a3      	strhlt	r3, [r4, #12]
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <__swrite>:
 80082b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	461f      	mov	r7, r3
 80082b8:	898b      	ldrh	r3, [r1, #12]
 80082ba:	05db      	lsls	r3, r3, #23
 80082bc:	4605      	mov	r5, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	4616      	mov	r6, r2
 80082c2:	d505      	bpl.n	80082d0 <__swrite+0x1e>
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	2302      	movs	r3, #2
 80082ca:	2200      	movs	r2, #0
 80082cc:	f000 ff86 	bl	80091dc <_lseek_r>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	4632      	mov	r2, r6
 80082de:	463b      	mov	r3, r7
 80082e0:	4628      	mov	r0, r5
 80082e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	f000 b869 	b.w	80083bc <_write_r>

080082ea <__sseek>:
 80082ea:	b510      	push	{r4, lr}
 80082ec:	460c      	mov	r4, r1
 80082ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f2:	f000 ff73 	bl	80091dc <_lseek_r>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	bf15      	itete	ne
 80082fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008306:	81a3      	strheq	r3, [r4, #12]
 8008308:	bf18      	it	ne
 800830a:	81a3      	strhne	r3, [r4, #12]
 800830c:	bd10      	pop	{r4, pc}

0800830e <__sclose>:
 800830e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008312:	f000 b8d3 	b.w	80084bc <_close_r>
	...

08008318 <__swbuf_r>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	460e      	mov	r6, r1
 800831c:	4614      	mov	r4, r2
 800831e:	4605      	mov	r5, r0
 8008320:	b118      	cbz	r0, 800832a <__swbuf_r+0x12>
 8008322:	6983      	ldr	r3, [r0, #24]
 8008324:	b90b      	cbnz	r3, 800832a <__swbuf_r+0x12>
 8008326:	f7ff f885 	bl	8007434 <__sinit>
 800832a:	4b21      	ldr	r3, [pc, #132]	; (80083b0 <__swbuf_r+0x98>)
 800832c:	429c      	cmp	r4, r3
 800832e:	d12b      	bne.n	8008388 <__swbuf_r+0x70>
 8008330:	686c      	ldr	r4, [r5, #4]
 8008332:	69a3      	ldr	r3, [r4, #24]
 8008334:	60a3      	str	r3, [r4, #8]
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	071a      	lsls	r2, r3, #28
 800833a:	d52f      	bpl.n	800839c <__swbuf_r+0x84>
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	b36b      	cbz	r3, 800839c <__swbuf_r+0x84>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	6820      	ldr	r0, [r4, #0]
 8008344:	1ac0      	subs	r0, r0, r3
 8008346:	6963      	ldr	r3, [r4, #20]
 8008348:	b2f6      	uxtb	r6, r6
 800834a:	4283      	cmp	r3, r0
 800834c:	4637      	mov	r7, r6
 800834e:	dc04      	bgt.n	800835a <__swbuf_r+0x42>
 8008350:	4621      	mov	r1, r4
 8008352:	4628      	mov	r0, r5
 8008354:	f7fe ffc8 	bl	80072e8 <_fflush_r>
 8008358:	bb30      	cbnz	r0, 80083a8 <__swbuf_r+0x90>
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	3b01      	subs	r3, #1
 800835e:	60a3      	str	r3, [r4, #8]
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	701e      	strb	r6, [r3, #0]
 8008368:	6963      	ldr	r3, [r4, #20]
 800836a:	3001      	adds	r0, #1
 800836c:	4283      	cmp	r3, r0
 800836e:	d004      	beq.n	800837a <__swbuf_r+0x62>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d506      	bpl.n	8008384 <__swbuf_r+0x6c>
 8008376:	2e0a      	cmp	r6, #10
 8008378:	d104      	bne.n	8008384 <__swbuf_r+0x6c>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f7fe ffb3 	bl	80072e8 <_fflush_r>
 8008382:	b988      	cbnz	r0, 80083a8 <__swbuf_r+0x90>
 8008384:	4638      	mov	r0, r7
 8008386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <__swbuf_r+0x9c>)
 800838a:	429c      	cmp	r4, r3
 800838c:	d101      	bne.n	8008392 <__swbuf_r+0x7a>
 800838e:	68ac      	ldr	r4, [r5, #8]
 8008390:	e7cf      	b.n	8008332 <__swbuf_r+0x1a>
 8008392:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <__swbuf_r+0xa0>)
 8008394:	429c      	cmp	r4, r3
 8008396:	bf08      	it	eq
 8008398:	68ec      	ldreq	r4, [r5, #12]
 800839a:	e7ca      	b.n	8008332 <__swbuf_r+0x1a>
 800839c:	4621      	mov	r1, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f81e 	bl	80083e0 <__swsetup_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d0cb      	beq.n	8008340 <__swbuf_r+0x28>
 80083a8:	f04f 37ff 	mov.w	r7, #4294967295
 80083ac:	e7ea      	b.n	8008384 <__swbuf_r+0x6c>
 80083ae:	bf00      	nop
 80083b0:	0800a014 	.word	0x0800a014
 80083b4:	0800a034 	.word	0x0800a034
 80083b8:	08009ff4 	.word	0x08009ff4

080083bc <_write_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_write_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7f9 fa40 	bl	8001850 <_write>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_write_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_write_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20014aac 	.word	0x20014aac

080083e0 <__swsetup_r>:
 80083e0:	4b32      	ldr	r3, [pc, #200]	; (80084ac <__swsetup_r+0xcc>)
 80083e2:	b570      	push	{r4, r5, r6, lr}
 80083e4:	681d      	ldr	r5, [r3, #0]
 80083e6:	4606      	mov	r6, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	b125      	cbz	r5, 80083f6 <__swsetup_r+0x16>
 80083ec:	69ab      	ldr	r3, [r5, #24]
 80083ee:	b913      	cbnz	r3, 80083f6 <__swsetup_r+0x16>
 80083f0:	4628      	mov	r0, r5
 80083f2:	f7ff f81f 	bl	8007434 <__sinit>
 80083f6:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <__swsetup_r+0xd0>)
 80083f8:	429c      	cmp	r4, r3
 80083fa:	d10f      	bne.n	800841c <__swsetup_r+0x3c>
 80083fc:	686c      	ldr	r4, [r5, #4]
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008404:	0719      	lsls	r1, r3, #28
 8008406:	d42c      	bmi.n	8008462 <__swsetup_r+0x82>
 8008408:	06dd      	lsls	r5, r3, #27
 800840a:	d411      	bmi.n	8008430 <__swsetup_r+0x50>
 800840c:	2309      	movs	r3, #9
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	e03e      	b.n	800849a <__swsetup_r+0xba>
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <__swsetup_r+0xd4>)
 800841e:	429c      	cmp	r4, r3
 8008420:	d101      	bne.n	8008426 <__swsetup_r+0x46>
 8008422:	68ac      	ldr	r4, [r5, #8]
 8008424:	e7eb      	b.n	80083fe <__swsetup_r+0x1e>
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <__swsetup_r+0xd8>)
 8008428:	429c      	cmp	r4, r3
 800842a:	bf08      	it	eq
 800842c:	68ec      	ldreq	r4, [r5, #12]
 800842e:	e7e6      	b.n	80083fe <__swsetup_r+0x1e>
 8008430:	0758      	lsls	r0, r3, #29
 8008432:	d512      	bpl.n	800845a <__swsetup_r+0x7a>
 8008434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008436:	b141      	cbz	r1, 800844a <__swsetup_r+0x6a>
 8008438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800843c:	4299      	cmp	r1, r3
 800843e:	d002      	beq.n	8008446 <__swsetup_r+0x66>
 8008440:	4630      	mov	r0, r6
 8008442:	f7ff f8d3 	bl	80075ec <_free_r>
 8008446:	2300      	movs	r3, #0
 8008448:	6363      	str	r3, [r4, #52]	; 0x34
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	2300      	movs	r3, #0
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f043 0308 	orr.w	r3, r3, #8
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	b94b      	cbnz	r3, 800847a <__swsetup_r+0x9a>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800846c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008470:	d003      	beq.n	800847a <__swsetup_r+0x9a>
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	f000 fee9 	bl	800924c <__smakebuf_r>
 800847a:	89a0      	ldrh	r0, [r4, #12]
 800847c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008480:	f010 0301 	ands.w	r3, r0, #1
 8008484:	d00a      	beq.n	800849c <__swsetup_r+0xbc>
 8008486:	2300      	movs	r3, #0
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	6963      	ldr	r3, [r4, #20]
 800848c:	425b      	negs	r3, r3
 800848e:	61a3      	str	r3, [r4, #24]
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	b943      	cbnz	r3, 80084a6 <__swsetup_r+0xc6>
 8008494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008498:	d1ba      	bne.n	8008410 <__swsetup_r+0x30>
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	0781      	lsls	r1, r0, #30
 800849e:	bf58      	it	pl
 80084a0:	6963      	ldrpl	r3, [r4, #20]
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	e7f4      	b.n	8008490 <__swsetup_r+0xb0>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e7f7      	b.n	800849a <__swsetup_r+0xba>
 80084aa:	bf00      	nop
 80084ac:	20000014 	.word	0x20000014
 80084b0:	0800a014 	.word	0x0800a014
 80084b4:	0800a034 	.word	0x0800a034
 80084b8:	08009ff4 	.word	0x08009ff4

080084bc <_close_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d06      	ldr	r5, [pc, #24]	; (80084d8 <_close_r+0x1c>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	f7f9 fe1d 	bl	8002106 <_close>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d102      	bne.n	80084d6 <_close_r+0x1a>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b103      	cbz	r3, 80084d6 <_close_r+0x1a>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	20014aac 	.word	0x20014aac

080084dc <quorem>:
 80084dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	6903      	ldr	r3, [r0, #16]
 80084e2:	690c      	ldr	r4, [r1, #16]
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	4607      	mov	r7, r0
 80084e8:	f2c0 8081 	blt.w	80085ee <quorem+0x112>
 80084ec:	3c01      	subs	r4, #1
 80084ee:	f101 0814 	add.w	r8, r1, #20
 80084f2:	f100 0514 	add.w	r5, r0, #20
 80084f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008504:	3301      	adds	r3, #1
 8008506:	429a      	cmp	r2, r3
 8008508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800850c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008510:	fbb2 f6f3 	udiv	r6, r2, r3
 8008514:	d331      	bcc.n	800857a <quorem+0x9e>
 8008516:	f04f 0e00 	mov.w	lr, #0
 800851a:	4640      	mov	r0, r8
 800851c:	46ac      	mov	ip, r5
 800851e:	46f2      	mov	sl, lr
 8008520:	f850 2b04 	ldr.w	r2, [r0], #4
 8008524:	b293      	uxth	r3, r2
 8008526:	fb06 e303 	mla	r3, r6, r3, lr
 800852a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800852e:	b29b      	uxth	r3, r3
 8008530:	ebaa 0303 	sub.w	r3, sl, r3
 8008534:	f8dc a000 	ldr.w	sl, [ip]
 8008538:	0c12      	lsrs	r2, r2, #16
 800853a:	fa13 f38a 	uxtah	r3, r3, sl
 800853e:	fb06 e202 	mla	r2, r6, r2, lr
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	9b00      	ldr	r3, [sp, #0]
 8008546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800854a:	b292      	uxth	r2, r2
 800854c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008554:	f8bd 3000 	ldrh.w	r3, [sp]
 8008558:	4581      	cmp	r9, r0
 800855a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800855e:	f84c 3b04 	str.w	r3, [ip], #4
 8008562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008566:	d2db      	bcs.n	8008520 <quorem+0x44>
 8008568:	f855 300b 	ldr.w	r3, [r5, fp]
 800856c:	b92b      	cbnz	r3, 800857a <quorem+0x9e>
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	3b04      	subs	r3, #4
 8008572:	429d      	cmp	r5, r3
 8008574:	461a      	mov	r2, r3
 8008576:	d32e      	bcc.n	80085d6 <quorem+0xfa>
 8008578:	613c      	str	r4, [r7, #16]
 800857a:	4638      	mov	r0, r7
 800857c:	f001 f93c 	bl	80097f8 <__mcmp>
 8008580:	2800      	cmp	r0, #0
 8008582:	db24      	blt.n	80085ce <quorem+0xf2>
 8008584:	3601      	adds	r6, #1
 8008586:	4628      	mov	r0, r5
 8008588:	f04f 0c00 	mov.w	ip, #0
 800858c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008590:	f8d0 e000 	ldr.w	lr, [r0]
 8008594:	b293      	uxth	r3, r2
 8008596:	ebac 0303 	sub.w	r3, ip, r3
 800859a:	0c12      	lsrs	r2, r2, #16
 800859c:	fa13 f38e 	uxtah	r3, r3, lr
 80085a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ae:	45c1      	cmp	r9, r8
 80085b0:	f840 3b04 	str.w	r3, [r0], #4
 80085b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085b8:	d2e8      	bcs.n	800858c <quorem+0xb0>
 80085ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085c2:	b922      	cbnz	r2, 80085ce <quorem+0xf2>
 80085c4:	3b04      	subs	r3, #4
 80085c6:	429d      	cmp	r5, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	d30a      	bcc.n	80085e2 <quorem+0x106>
 80085cc:	613c      	str	r4, [r7, #16]
 80085ce:	4630      	mov	r0, r6
 80085d0:	b003      	add	sp, #12
 80085d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	3b04      	subs	r3, #4
 80085da:	2a00      	cmp	r2, #0
 80085dc:	d1cc      	bne.n	8008578 <quorem+0x9c>
 80085de:	3c01      	subs	r4, #1
 80085e0:	e7c7      	b.n	8008572 <quorem+0x96>
 80085e2:	6812      	ldr	r2, [r2, #0]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d1f0      	bne.n	80085cc <quorem+0xf0>
 80085ea:	3c01      	subs	r4, #1
 80085ec:	e7eb      	b.n	80085c6 <quorem+0xea>
 80085ee:	2000      	movs	r0, #0
 80085f0:	e7ee      	b.n	80085d0 <quorem+0xf4>
 80085f2:	0000      	movs	r0, r0
 80085f4:	0000      	movs	r0, r0
	...

080085f8 <_dtoa_r>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	ed2d 8b04 	vpush	{d8-d9}
 8008600:	ec57 6b10 	vmov	r6, r7, d0
 8008604:	b093      	sub	sp, #76	; 0x4c
 8008606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800860c:	9106      	str	r1, [sp, #24]
 800860e:	ee10 aa10 	vmov	sl, s0
 8008612:	4604      	mov	r4, r0
 8008614:	9209      	str	r2, [sp, #36]	; 0x24
 8008616:	930c      	str	r3, [sp, #48]	; 0x30
 8008618:	46bb      	mov	fp, r7
 800861a:	b975      	cbnz	r5, 800863a <_dtoa_r+0x42>
 800861c:	2010      	movs	r0, #16
 800861e:	f000 fe55 	bl	80092cc <malloc>
 8008622:	4602      	mov	r2, r0
 8008624:	6260      	str	r0, [r4, #36]	; 0x24
 8008626:	b920      	cbnz	r0, 8008632 <_dtoa_r+0x3a>
 8008628:	4ba7      	ldr	r3, [pc, #668]	; (80088c8 <_dtoa_r+0x2d0>)
 800862a:	21ea      	movs	r1, #234	; 0xea
 800862c:	48a7      	ldr	r0, [pc, #668]	; (80088cc <_dtoa_r+0x2d4>)
 800862e:	f001 fb67 	bl	8009d00 <__assert_func>
 8008632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008636:	6005      	str	r5, [r0, #0]
 8008638:	60c5      	str	r5, [r0, #12]
 800863a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800863c:	6819      	ldr	r1, [r3, #0]
 800863e:	b151      	cbz	r1, 8008656 <_dtoa_r+0x5e>
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	604a      	str	r2, [r1, #4]
 8008644:	2301      	movs	r3, #1
 8008646:	4093      	lsls	r3, r2
 8008648:	608b      	str	r3, [r1, #8]
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fe92 	bl	8009374 <_Bfree>
 8008650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	1e3b      	subs	r3, r7, #0
 8008658:	bfaa      	itet	ge
 800865a:	2300      	movge	r3, #0
 800865c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008660:	f8c8 3000 	strge.w	r3, [r8]
 8008664:	4b9a      	ldr	r3, [pc, #616]	; (80088d0 <_dtoa_r+0x2d8>)
 8008666:	bfbc      	itt	lt
 8008668:	2201      	movlt	r2, #1
 800866a:	f8c8 2000 	strlt.w	r2, [r8]
 800866e:	ea33 030b 	bics.w	r3, r3, fp
 8008672:	d11b      	bne.n	80086ac <_dtoa_r+0xb4>
 8008674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008676:	f242 730f 	movw	r3, #9999	; 0x270f
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008680:	4333      	orrs	r3, r6
 8008682:	f000 8592 	beq.w	80091aa <_dtoa_r+0xbb2>
 8008686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008688:	b963      	cbnz	r3, 80086a4 <_dtoa_r+0xac>
 800868a:	4b92      	ldr	r3, [pc, #584]	; (80088d4 <_dtoa_r+0x2dc>)
 800868c:	e022      	b.n	80086d4 <_dtoa_r+0xdc>
 800868e:	4b92      	ldr	r3, [pc, #584]	; (80088d8 <_dtoa_r+0x2e0>)
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	3308      	adds	r3, #8
 8008694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	b013      	add	sp, #76	; 0x4c
 800869c:	ecbd 8b04 	vpop	{d8-d9}
 80086a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a4:	4b8b      	ldr	r3, [pc, #556]	; (80088d4 <_dtoa_r+0x2dc>)
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	3303      	adds	r3, #3
 80086aa:	e7f3      	b.n	8008694 <_dtoa_r+0x9c>
 80086ac:	2200      	movs	r2, #0
 80086ae:	2300      	movs	r3, #0
 80086b0:	4650      	mov	r0, sl
 80086b2:	4659      	mov	r1, fp
 80086b4:	f7f8 fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 80086b8:	ec4b ab19 	vmov	d9, sl, fp
 80086bc:	4680      	mov	r8, r0
 80086be:	b158      	cbz	r0, 80086d8 <_dtoa_r+0xe0>
 80086c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086c2:	2301      	movs	r3, #1
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 856b 	beq.w	80091a4 <_dtoa_r+0xbac>
 80086ce:	4883      	ldr	r0, [pc, #524]	; (80088dc <_dtoa_r+0x2e4>)
 80086d0:	6018      	str	r0, [r3, #0]
 80086d2:	1e43      	subs	r3, r0, #1
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	e7df      	b.n	8008698 <_dtoa_r+0xa0>
 80086d8:	ec4b ab10 	vmov	d0, sl, fp
 80086dc:	aa10      	add	r2, sp, #64	; 0x40
 80086de:	a911      	add	r1, sp, #68	; 0x44
 80086e0:	4620      	mov	r0, r4
 80086e2:	f001 f92f 	bl	8009944 <__d2b>
 80086e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80086ea:	ee08 0a10 	vmov	s16, r0
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	f000 8084 	beq.w	80087fc <_dtoa_r+0x204>
 80086f4:	ee19 3a90 	vmov	r3, s19
 80086f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008700:	4656      	mov	r6, sl
 8008702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800870a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800870e:	4b74      	ldr	r3, [pc, #464]	; (80088e0 <_dtoa_r+0x2e8>)
 8008710:	2200      	movs	r2, #0
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f7 fdbf 	bl	8000298 <__aeabi_dsub>
 800871a:	a365      	add	r3, pc, #404	; (adr r3, 80088b0 <_dtoa_r+0x2b8>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 ff72 	bl	8000608 <__aeabi_dmul>
 8008724:	a364      	add	r3, pc, #400	; (adr r3, 80088b8 <_dtoa_r+0x2c0>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f7 fdb7 	bl	800029c <__adddf3>
 800872e:	4606      	mov	r6, r0
 8008730:	4628      	mov	r0, r5
 8008732:	460f      	mov	r7, r1
 8008734:	f7f7 fefe 	bl	8000534 <__aeabi_i2d>
 8008738:	a361      	add	r3, pc, #388	; (adr r3, 80088c0 <_dtoa_r+0x2c8>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 ff63 	bl	8000608 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
 800874a:	f7f7 fda7 	bl	800029c <__adddf3>
 800874e:	4606      	mov	r6, r0
 8008750:	460f      	mov	r7, r1
 8008752:	f7f8 fa09 	bl	8000b68 <__aeabi_d2iz>
 8008756:	2200      	movs	r2, #0
 8008758:	9000      	str	r0, [sp, #0]
 800875a:	2300      	movs	r3, #0
 800875c:	4630      	mov	r0, r6
 800875e:	4639      	mov	r1, r7
 8008760:	f7f8 f9c4 	bl	8000aec <__aeabi_dcmplt>
 8008764:	b150      	cbz	r0, 800877c <_dtoa_r+0x184>
 8008766:	9800      	ldr	r0, [sp, #0]
 8008768:	f7f7 fee4 	bl	8000534 <__aeabi_i2d>
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	f7f8 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008774:	b910      	cbnz	r0, 800877c <_dtoa_r+0x184>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	9b00      	ldr	r3, [sp, #0]
 800877e:	2b16      	cmp	r3, #22
 8008780:	d85a      	bhi.n	8008838 <_dtoa_r+0x240>
 8008782:	9a00      	ldr	r2, [sp, #0]
 8008784:	4b57      	ldr	r3, [pc, #348]	; (80088e4 <_dtoa_r+0x2ec>)
 8008786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	ec51 0b19 	vmov	r0, r1, d9
 8008792:	f7f8 f9ab 	bl	8000aec <__aeabi_dcmplt>
 8008796:	2800      	cmp	r0, #0
 8008798:	d050      	beq.n	800883c <_dtoa_r+0x244>
 800879a:	9b00      	ldr	r3, [sp, #0]
 800879c:	3b01      	subs	r3, #1
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087a6:	1b5d      	subs	r5, r3, r5
 80087a8:	1e6b      	subs	r3, r5, #1
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	bf45      	ittet	mi
 80087ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80087b2:	9304      	strmi	r3, [sp, #16]
 80087b4:	2300      	movpl	r3, #0
 80087b6:	2300      	movmi	r3, #0
 80087b8:	bf4c      	ite	mi
 80087ba:	9305      	strmi	r3, [sp, #20]
 80087bc:	9304      	strpl	r3, [sp, #16]
 80087be:	9b00      	ldr	r3, [sp, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	db3d      	blt.n	8008840 <_dtoa_r+0x248>
 80087c4:	9b05      	ldr	r3, [sp, #20]
 80087c6:	9a00      	ldr	r2, [sp, #0]
 80087c8:	920a      	str	r2, [sp, #40]	; 0x28
 80087ca:	4413      	add	r3, r2
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9307      	str	r3, [sp, #28]
 80087d2:	9b06      	ldr	r3, [sp, #24]
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	f200 8089 	bhi.w	80088ec <_dtoa_r+0x2f4>
 80087da:	2b05      	cmp	r3, #5
 80087dc:	bfc4      	itt	gt
 80087de:	3b04      	subgt	r3, #4
 80087e0:	9306      	strgt	r3, [sp, #24]
 80087e2:	9b06      	ldr	r3, [sp, #24]
 80087e4:	f1a3 0302 	sub.w	r3, r3, #2
 80087e8:	bfcc      	ite	gt
 80087ea:	2500      	movgt	r5, #0
 80087ec:	2501      	movle	r5, #1
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	f200 8087 	bhi.w	8008902 <_dtoa_r+0x30a>
 80087f4:	e8df f003 	tbb	[pc, r3]
 80087f8:	59383a2d 	.word	0x59383a2d
 80087fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008800:	441d      	add	r5, r3
 8008802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008806:	2b20      	cmp	r3, #32
 8008808:	bfc1      	itttt	gt
 800880a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800880e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008812:	fa0b f303 	lslgt.w	r3, fp, r3
 8008816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800881a:	bfda      	itte	le
 800881c:	f1c3 0320 	rsble	r3, r3, #32
 8008820:	fa06 f003 	lslle.w	r0, r6, r3
 8008824:	4318      	orrgt	r0, r3
 8008826:	f7f7 fe75 	bl	8000514 <__aeabi_ui2d>
 800882a:	2301      	movs	r3, #1
 800882c:	4606      	mov	r6, r0
 800882e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008832:	3d01      	subs	r5, #1
 8008834:	930e      	str	r3, [sp, #56]	; 0x38
 8008836:	e76a      	b.n	800870e <_dtoa_r+0x116>
 8008838:	2301      	movs	r3, #1
 800883a:	e7b2      	b.n	80087a2 <_dtoa_r+0x1aa>
 800883c:	900b      	str	r0, [sp, #44]	; 0x2c
 800883e:	e7b1      	b.n	80087a4 <_dtoa_r+0x1ac>
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	9a00      	ldr	r2, [sp, #0]
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	4253      	negs	r3, r2
 800884a:	9307      	str	r3, [sp, #28]
 800884c:	2300      	movs	r3, #0
 800884e:	930a      	str	r3, [sp, #40]	; 0x28
 8008850:	e7bf      	b.n	80087d2 <_dtoa_r+0x1da>
 8008852:	2300      	movs	r3, #0
 8008854:	9308      	str	r3, [sp, #32]
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	dc55      	bgt.n	8008908 <_dtoa_r+0x310>
 800885c:	2301      	movs	r3, #1
 800885e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008862:	461a      	mov	r2, r3
 8008864:	9209      	str	r2, [sp, #36]	; 0x24
 8008866:	e00c      	b.n	8008882 <_dtoa_r+0x28a>
 8008868:	2301      	movs	r3, #1
 800886a:	e7f3      	b.n	8008854 <_dtoa_r+0x25c>
 800886c:	2300      	movs	r3, #0
 800886e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008870:	9308      	str	r3, [sp, #32]
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	4413      	add	r3, r2
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	3301      	adds	r3, #1
 800887a:	2b01      	cmp	r3, #1
 800887c:	9303      	str	r3, [sp, #12]
 800887e:	bfb8      	it	lt
 8008880:	2301      	movlt	r3, #1
 8008882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008884:	2200      	movs	r2, #0
 8008886:	6042      	str	r2, [r0, #4]
 8008888:	2204      	movs	r2, #4
 800888a:	f102 0614 	add.w	r6, r2, #20
 800888e:	429e      	cmp	r6, r3
 8008890:	6841      	ldr	r1, [r0, #4]
 8008892:	d93d      	bls.n	8008910 <_dtoa_r+0x318>
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fd2d 	bl	80092f4 <_Balloc>
 800889a:	9001      	str	r0, [sp, #4]
 800889c:	2800      	cmp	r0, #0
 800889e:	d13b      	bne.n	8008918 <_dtoa_r+0x320>
 80088a0:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <_dtoa_r+0x2f0>)
 80088a2:	4602      	mov	r2, r0
 80088a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088a8:	e6c0      	b.n	800862c <_dtoa_r+0x34>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e7df      	b.n	800886e <_dtoa_r+0x276>
 80088ae:	bf00      	nop
 80088b0:	636f4361 	.word	0x636f4361
 80088b4:	3fd287a7 	.word	0x3fd287a7
 80088b8:	8b60c8b3 	.word	0x8b60c8b3
 80088bc:	3fc68a28 	.word	0x3fc68a28
 80088c0:	509f79fb 	.word	0x509f79fb
 80088c4:	3fd34413 	.word	0x3fd34413
 80088c8:	0800a099 	.word	0x0800a099
 80088cc:	0800a0b0 	.word	0x0800a0b0
 80088d0:	7ff00000 	.word	0x7ff00000
 80088d4:	0800a095 	.word	0x0800a095
 80088d8:	0800a08c 	.word	0x0800a08c
 80088dc:	0800a069 	.word	0x0800a069
 80088e0:	3ff80000 	.word	0x3ff80000
 80088e4:	0800a1a0 	.word	0x0800a1a0
 80088e8:	0800a10b 	.word	0x0800a10b
 80088ec:	2501      	movs	r5, #1
 80088ee:	2300      	movs	r3, #0
 80088f0:	9306      	str	r3, [sp, #24]
 80088f2:	9508      	str	r5, [sp, #32]
 80088f4:	f04f 33ff 	mov.w	r3, #4294967295
 80088f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2312      	movs	r3, #18
 8008900:	e7b0      	b.n	8008864 <_dtoa_r+0x26c>
 8008902:	2301      	movs	r3, #1
 8008904:	9308      	str	r3, [sp, #32]
 8008906:	e7f5      	b.n	80088f4 <_dtoa_r+0x2fc>
 8008908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800890e:	e7b8      	b.n	8008882 <_dtoa_r+0x28a>
 8008910:	3101      	adds	r1, #1
 8008912:	6041      	str	r1, [r0, #4]
 8008914:	0052      	lsls	r2, r2, #1
 8008916:	e7b8      	b.n	800888a <_dtoa_r+0x292>
 8008918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	2b0e      	cmp	r3, #14
 8008922:	f200 809d 	bhi.w	8008a60 <_dtoa_r+0x468>
 8008926:	2d00      	cmp	r5, #0
 8008928:	f000 809a 	beq.w	8008a60 <_dtoa_r+0x468>
 800892c:	9b00      	ldr	r3, [sp, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd32      	ble.n	8008998 <_dtoa_r+0x3a0>
 8008932:	4ab7      	ldr	r2, [pc, #732]	; (8008c10 <_dtoa_r+0x618>)
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800893c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008940:	9b00      	ldr	r3, [sp, #0]
 8008942:	05d8      	lsls	r0, r3, #23
 8008944:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008948:	d516      	bpl.n	8008978 <_dtoa_r+0x380>
 800894a:	4bb2      	ldr	r3, [pc, #712]	; (8008c14 <_dtoa_r+0x61c>)
 800894c:	ec51 0b19 	vmov	r0, r1, d9
 8008950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008954:	f7f7 ff82 	bl	800085c <__aeabi_ddiv>
 8008958:	f007 070f 	and.w	r7, r7, #15
 800895c:	4682      	mov	sl, r0
 800895e:	468b      	mov	fp, r1
 8008960:	2503      	movs	r5, #3
 8008962:	4eac      	ldr	r6, [pc, #688]	; (8008c14 <_dtoa_r+0x61c>)
 8008964:	b957      	cbnz	r7, 800897c <_dtoa_r+0x384>
 8008966:	4642      	mov	r2, r8
 8008968:	464b      	mov	r3, r9
 800896a:	4650      	mov	r0, sl
 800896c:	4659      	mov	r1, fp
 800896e:	f7f7 ff75 	bl	800085c <__aeabi_ddiv>
 8008972:	4682      	mov	sl, r0
 8008974:	468b      	mov	fp, r1
 8008976:	e028      	b.n	80089ca <_dtoa_r+0x3d2>
 8008978:	2502      	movs	r5, #2
 800897a:	e7f2      	b.n	8008962 <_dtoa_r+0x36a>
 800897c:	07f9      	lsls	r1, r7, #31
 800897e:	d508      	bpl.n	8008992 <_dtoa_r+0x39a>
 8008980:	4640      	mov	r0, r8
 8008982:	4649      	mov	r1, r9
 8008984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008988:	f7f7 fe3e 	bl	8000608 <__aeabi_dmul>
 800898c:	3501      	adds	r5, #1
 800898e:	4680      	mov	r8, r0
 8008990:	4689      	mov	r9, r1
 8008992:	107f      	asrs	r7, r7, #1
 8008994:	3608      	adds	r6, #8
 8008996:	e7e5      	b.n	8008964 <_dtoa_r+0x36c>
 8008998:	f000 809b 	beq.w	8008ad2 <_dtoa_r+0x4da>
 800899c:	9b00      	ldr	r3, [sp, #0]
 800899e:	4f9d      	ldr	r7, [pc, #628]	; (8008c14 <_dtoa_r+0x61c>)
 80089a0:	425e      	negs	r6, r3
 80089a2:	4b9b      	ldr	r3, [pc, #620]	; (8008c10 <_dtoa_r+0x618>)
 80089a4:	f006 020f 	and.w	r2, r6, #15
 80089a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	ec51 0b19 	vmov	r0, r1, d9
 80089b4:	f7f7 fe28 	bl	8000608 <__aeabi_dmul>
 80089b8:	1136      	asrs	r6, r6, #4
 80089ba:	4682      	mov	sl, r0
 80089bc:	468b      	mov	fp, r1
 80089be:	2300      	movs	r3, #0
 80089c0:	2502      	movs	r5, #2
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	d17a      	bne.n	8008abc <_dtoa_r+0x4c4>
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1d3      	bne.n	8008972 <_dtoa_r+0x37a>
 80089ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8082 	beq.w	8008ad6 <_dtoa_r+0x4de>
 80089d2:	4b91      	ldr	r3, [pc, #580]	; (8008c18 <_dtoa_r+0x620>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	4650      	mov	r0, sl
 80089d8:	4659      	mov	r1, fp
 80089da:	f7f8 f887 	bl	8000aec <__aeabi_dcmplt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d079      	beq.n	8008ad6 <_dtoa_r+0x4de>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d076      	beq.n	8008ad6 <_dtoa_r+0x4de>
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd36      	ble.n	8008a5c <_dtoa_r+0x464>
 80089ee:	9b00      	ldr	r3, [sp, #0]
 80089f0:	4650      	mov	r0, sl
 80089f2:	4659      	mov	r1, fp
 80089f4:	1e5f      	subs	r7, r3, #1
 80089f6:	2200      	movs	r2, #0
 80089f8:	4b88      	ldr	r3, [pc, #544]	; (8008c1c <_dtoa_r+0x624>)
 80089fa:	f7f7 fe05 	bl	8000608 <__aeabi_dmul>
 80089fe:	9e02      	ldr	r6, [sp, #8]
 8008a00:	4682      	mov	sl, r0
 8008a02:	468b      	mov	fp, r1
 8008a04:	3501      	adds	r5, #1
 8008a06:	4628      	mov	r0, r5
 8008a08:	f7f7 fd94 	bl	8000534 <__aeabi_i2d>
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	465b      	mov	r3, fp
 8008a10:	f7f7 fdfa 	bl	8000608 <__aeabi_dmul>
 8008a14:	4b82      	ldr	r3, [pc, #520]	; (8008c20 <_dtoa_r+0x628>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	f7f7 fc40 	bl	800029c <__adddf3>
 8008a1c:	46d0      	mov	r8, sl
 8008a1e:	46d9      	mov	r9, fp
 8008a20:	4682      	mov	sl, r0
 8008a22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d158      	bne.n	8008adc <_dtoa_r+0x4e4>
 8008a2a:	4b7e      	ldr	r3, [pc, #504]	; (8008c24 <_dtoa_r+0x62c>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f7 fc31 	bl	8000298 <__aeabi_dsub>
 8008a36:	4652      	mov	r2, sl
 8008a38:	465b      	mov	r3, fp
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	4689      	mov	r9, r1
 8008a3e:	f7f8 f873 	bl	8000b28 <__aeabi_dcmpgt>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f040 8295 	bne.w	8008f72 <_dtoa_r+0x97a>
 8008a48:	4652      	mov	r2, sl
 8008a4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4649      	mov	r1, r9
 8008a52:	f7f8 f84b 	bl	8000aec <__aeabi_dcmplt>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f040 8289 	bne.w	8008f6e <_dtoa_r+0x976>
 8008a5c:	ec5b ab19 	vmov	sl, fp, d9
 8008a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f2c0 8148 	blt.w	8008cf8 <_dtoa_r+0x700>
 8008a68:	9a00      	ldr	r2, [sp, #0]
 8008a6a:	2a0e      	cmp	r2, #14
 8008a6c:	f300 8144 	bgt.w	8008cf8 <_dtoa_r+0x700>
 8008a70:	4b67      	ldr	r3, [pc, #412]	; (8008c10 <_dtoa_r+0x618>)
 8008a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f280 80d5 	bge.w	8008c2c <_dtoa_r+0x634>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f300 80d1 	bgt.w	8008c2c <_dtoa_r+0x634>
 8008a8a:	f040 826f 	bne.w	8008f6c <_dtoa_r+0x974>
 8008a8e:	4b65      	ldr	r3, [pc, #404]	; (8008c24 <_dtoa_r+0x62c>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	4640      	mov	r0, r8
 8008a94:	4649      	mov	r1, r9
 8008a96:	f7f7 fdb7 	bl	8000608 <__aeabi_dmul>
 8008a9a:	4652      	mov	r2, sl
 8008a9c:	465b      	mov	r3, fp
 8008a9e:	f7f8 f839 	bl	8000b14 <__aeabi_dcmpge>
 8008aa2:	9e03      	ldr	r6, [sp, #12]
 8008aa4:	4637      	mov	r7, r6
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f040 8245 	bne.w	8008f36 <_dtoa_r+0x93e>
 8008aac:	9d01      	ldr	r5, [sp, #4]
 8008aae:	2331      	movs	r3, #49	; 0x31
 8008ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	e240      	b.n	8008f3e <_dtoa_r+0x946>
 8008abc:	07f2      	lsls	r2, r6, #31
 8008abe:	d505      	bpl.n	8008acc <_dtoa_r+0x4d4>
 8008ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac4:	f7f7 fda0 	bl	8000608 <__aeabi_dmul>
 8008ac8:	3501      	adds	r5, #1
 8008aca:	2301      	movs	r3, #1
 8008acc:	1076      	asrs	r6, r6, #1
 8008ace:	3708      	adds	r7, #8
 8008ad0:	e777      	b.n	80089c2 <_dtoa_r+0x3ca>
 8008ad2:	2502      	movs	r5, #2
 8008ad4:	e779      	b.n	80089ca <_dtoa_r+0x3d2>
 8008ad6:	9f00      	ldr	r7, [sp, #0]
 8008ad8:	9e03      	ldr	r6, [sp, #12]
 8008ada:	e794      	b.n	8008a06 <_dtoa_r+0x40e>
 8008adc:	9901      	ldr	r1, [sp, #4]
 8008ade:	4b4c      	ldr	r3, [pc, #304]	; (8008c10 <_dtoa_r+0x618>)
 8008ae0:	4431      	add	r1, r6
 8008ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ae4:	9908      	ldr	r1, [sp, #32]
 8008ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d043      	beq.n	8008b7a <_dtoa_r+0x582>
 8008af2:	494d      	ldr	r1, [pc, #308]	; (8008c28 <_dtoa_r+0x630>)
 8008af4:	2000      	movs	r0, #0
 8008af6:	f7f7 feb1 	bl	800085c <__aeabi_ddiv>
 8008afa:	4652      	mov	r2, sl
 8008afc:	465b      	mov	r3, fp
 8008afe:	f7f7 fbcb 	bl	8000298 <__aeabi_dsub>
 8008b02:	9d01      	ldr	r5, [sp, #4]
 8008b04:	4682      	mov	sl, r0
 8008b06:	468b      	mov	fp, r1
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f7f8 f82c 	bl	8000b68 <__aeabi_d2iz>
 8008b10:	4606      	mov	r6, r0
 8008b12:	f7f7 fd0f 	bl	8000534 <__aeabi_i2d>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	f7f7 fbbb 	bl	8000298 <__aeabi_dsub>
 8008b22:	3630      	adds	r6, #48	; 0x30
 8008b24:	f805 6b01 	strb.w	r6, [r5], #1
 8008b28:	4652      	mov	r2, sl
 8008b2a:	465b      	mov	r3, fp
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	f7f7 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d163      	bne.n	8008c00 <_dtoa_r+0x608>
 8008b38:	4642      	mov	r2, r8
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	4936      	ldr	r1, [pc, #216]	; (8008c18 <_dtoa_r+0x620>)
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f7f7 fbaa 	bl	8000298 <__aeabi_dsub>
 8008b44:	4652      	mov	r2, sl
 8008b46:	465b      	mov	r3, fp
 8008b48:	f7f7 ffd0 	bl	8000aec <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f040 80b5 	bne.w	8008cbc <_dtoa_r+0x6c4>
 8008b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b54:	429d      	cmp	r5, r3
 8008b56:	d081      	beq.n	8008a5c <_dtoa_r+0x464>
 8008b58:	4b30      	ldr	r3, [pc, #192]	; (8008c1c <_dtoa_r+0x624>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	4659      	mov	r1, fp
 8008b60:	f7f7 fd52 	bl	8000608 <__aeabi_dmul>
 8008b64:	4b2d      	ldr	r3, [pc, #180]	; (8008c1c <_dtoa_r+0x624>)
 8008b66:	4682      	mov	sl, r0
 8008b68:	468b      	mov	fp, r1
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f7f7 fd4a 	bl	8000608 <__aeabi_dmul>
 8008b74:	4680      	mov	r8, r0
 8008b76:	4689      	mov	r9, r1
 8008b78:	e7c6      	b.n	8008b08 <_dtoa_r+0x510>
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	4659      	mov	r1, fp
 8008b7e:	f7f7 fd43 	bl	8000608 <__aeabi_dmul>
 8008b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b84:	9d01      	ldr	r5, [sp, #4]
 8008b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b88:	4682      	mov	sl, r0
 8008b8a:	468b      	mov	fp, r1
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f7f7 ffea 	bl	8000b68 <__aeabi_d2iz>
 8008b94:	4606      	mov	r6, r0
 8008b96:	f7f7 fccd 	bl	8000534 <__aeabi_i2d>
 8008b9a:	3630      	adds	r6, #48	; 0x30
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	f7f7 fb78 	bl	8000298 <__aeabi_dsub>
 8008ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8008bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4689      	mov	r9, r1
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	d124      	bne.n	8008c04 <_dtoa_r+0x60c>
 8008bba:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <_dtoa_r+0x630>)
 8008bbc:	4650      	mov	r0, sl
 8008bbe:	4659      	mov	r1, fp
 8008bc0:	f7f7 fb6c 	bl	800029c <__adddf3>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4649      	mov	r1, r9
 8008bcc:	f7f7 ffac 	bl	8000b28 <__aeabi_dcmpgt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d173      	bne.n	8008cbc <_dtoa_r+0x6c4>
 8008bd4:	4652      	mov	r2, sl
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	4913      	ldr	r1, [pc, #76]	; (8008c28 <_dtoa_r+0x630>)
 8008bda:	2000      	movs	r0, #0
 8008bdc:	f7f7 fb5c 	bl	8000298 <__aeabi_dsub>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 ff80 	bl	8000aec <__aeabi_dcmplt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f43f af35 	beq.w	8008a5c <_dtoa_r+0x464>
 8008bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bf4:	1e6b      	subs	r3, r5, #1
 8008bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bfc:	2b30      	cmp	r3, #48	; 0x30
 8008bfe:	d0f8      	beq.n	8008bf2 <_dtoa_r+0x5fa>
 8008c00:	9700      	str	r7, [sp, #0]
 8008c02:	e049      	b.n	8008c98 <_dtoa_r+0x6a0>
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <_dtoa_r+0x624>)
 8008c06:	f7f7 fcff 	bl	8000608 <__aeabi_dmul>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	4689      	mov	r9, r1
 8008c0e:	e7bd      	b.n	8008b8c <_dtoa_r+0x594>
 8008c10:	0800a1a0 	.word	0x0800a1a0
 8008c14:	0800a178 	.word	0x0800a178
 8008c18:	3ff00000 	.word	0x3ff00000
 8008c1c:	40240000 	.word	0x40240000
 8008c20:	401c0000 	.word	0x401c0000
 8008c24:	40140000 	.word	0x40140000
 8008c28:	3fe00000 	.word	0x3fe00000
 8008c2c:	9d01      	ldr	r5, [sp, #4]
 8008c2e:	4656      	mov	r6, sl
 8008c30:	465f      	mov	r7, fp
 8008c32:	4642      	mov	r2, r8
 8008c34:	464b      	mov	r3, r9
 8008c36:	4630      	mov	r0, r6
 8008c38:	4639      	mov	r1, r7
 8008c3a:	f7f7 fe0f 	bl	800085c <__aeabi_ddiv>
 8008c3e:	f7f7 ff93 	bl	8000b68 <__aeabi_d2iz>
 8008c42:	4682      	mov	sl, r0
 8008c44:	f7f7 fc76 	bl	8000534 <__aeabi_i2d>
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4630      	mov	r0, r6
 8008c56:	4639      	mov	r1, r7
 8008c58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c5c:	f7f7 fb1c 	bl	8000298 <__aeabi_dsub>
 8008c60:	f805 6b01 	strb.w	r6, [r5], #1
 8008c64:	9e01      	ldr	r6, [sp, #4]
 8008c66:	9f03      	ldr	r7, [sp, #12]
 8008c68:	1bae      	subs	r6, r5, r6
 8008c6a:	42b7      	cmp	r7, r6
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	d135      	bne.n	8008cde <_dtoa_r+0x6e6>
 8008c72:	f7f7 fb13 	bl	800029c <__adddf3>
 8008c76:	4642      	mov	r2, r8
 8008c78:	464b      	mov	r3, r9
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	f7f7 ff53 	bl	8000b28 <__aeabi_dcmpgt>
 8008c82:	b9d0      	cbnz	r0, 8008cba <_dtoa_r+0x6c2>
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 ff24 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c90:	b110      	cbz	r0, 8008c98 <_dtoa_r+0x6a0>
 8008c92:	f01a 0f01 	tst.w	sl, #1
 8008c96:	d110      	bne.n	8008cba <_dtoa_r+0x6c2>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	ee18 1a10 	vmov	r1, s16
 8008c9e:	f000 fb69 	bl	8009374 <_Bfree>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9800      	ldr	r0, [sp, #0]
 8008ca6:	702b      	strb	r3, [r5, #0]
 8008ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008caa:	3001      	adds	r0, #1
 8008cac:	6018      	str	r0, [r3, #0]
 8008cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f43f acf1 	beq.w	8008698 <_dtoa_r+0xa0>
 8008cb6:	601d      	str	r5, [r3, #0]
 8008cb8:	e4ee      	b.n	8008698 <_dtoa_r+0xa0>
 8008cba:	9f00      	ldr	r7, [sp, #0]
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	461d      	mov	r5, r3
 8008cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cc4:	2a39      	cmp	r2, #57	; 0x39
 8008cc6:	d106      	bne.n	8008cd6 <_dtoa_r+0x6de>
 8008cc8:	9a01      	ldr	r2, [sp, #4]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d1f7      	bne.n	8008cbe <_dtoa_r+0x6c6>
 8008cce:	9901      	ldr	r1, [sp, #4]
 8008cd0:	2230      	movs	r2, #48	; 0x30
 8008cd2:	3701      	adds	r7, #1
 8008cd4:	700a      	strb	r2, [r1, #0]
 8008cd6:	781a      	ldrb	r2, [r3, #0]
 8008cd8:	3201      	adds	r2, #1
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	e790      	b.n	8008c00 <_dtoa_r+0x608>
 8008cde:	4ba6      	ldr	r3, [pc, #664]	; (8008f78 <_dtoa_r+0x980>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f7f7 fc91 	bl	8000608 <__aeabi_dmul>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	f7f7 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d09d      	beq.n	8008c32 <_dtoa_r+0x63a>
 8008cf6:	e7cf      	b.n	8008c98 <_dtoa_r+0x6a0>
 8008cf8:	9a08      	ldr	r2, [sp, #32]
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	f000 80d7 	beq.w	8008eae <_dtoa_r+0x8b6>
 8008d00:	9a06      	ldr	r2, [sp, #24]
 8008d02:	2a01      	cmp	r2, #1
 8008d04:	f300 80ba 	bgt.w	8008e7c <_dtoa_r+0x884>
 8008d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	f000 80b2 	beq.w	8008e74 <_dtoa_r+0x87c>
 8008d10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d14:	9e07      	ldr	r6, [sp, #28]
 8008d16:	9d04      	ldr	r5, [sp, #16]
 8008d18:	9a04      	ldr	r2, [sp, #16]
 8008d1a:	441a      	add	r2, r3
 8008d1c:	9204      	str	r2, [sp, #16]
 8008d1e:	9a05      	ldr	r2, [sp, #20]
 8008d20:	2101      	movs	r1, #1
 8008d22:	441a      	add	r2, r3
 8008d24:	4620      	mov	r0, r4
 8008d26:	9205      	str	r2, [sp, #20]
 8008d28:	f000 fbdc 	bl	80094e4 <__i2b>
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	dd0c      	ble.n	8008d4c <_dtoa_r+0x754>
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dd09      	ble.n	8008d4c <_dtoa_r+0x754>
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	bfa8      	it	ge
 8008d3e:	462b      	movge	r3, r5
 8008d40:	1ad2      	subs	r2, r2, r3
 8008d42:	9204      	str	r2, [sp, #16]
 8008d44:	9a05      	ldr	r2, [sp, #20]
 8008d46:	1aed      	subs	r5, r5, r3
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	9305      	str	r3, [sp, #20]
 8008d4c:	9b07      	ldr	r3, [sp, #28]
 8008d4e:	b31b      	cbz	r3, 8008d98 <_dtoa_r+0x7a0>
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 80af 	beq.w	8008eb6 <_dtoa_r+0x8be>
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	dd13      	ble.n	8008d84 <_dtoa_r+0x78c>
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	4632      	mov	r2, r6
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fc7f 	bl	8009664 <__pow5mult>
 8008d66:	ee18 2a10 	vmov	r2, s16
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fbce 	bl	8009510 <__multiply>
 8008d74:	ee18 1a10 	vmov	r1, s16
 8008d78:	4680      	mov	r8, r0
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fafa 	bl	8009374 <_Bfree>
 8008d80:	ee08 8a10 	vmov	s16, r8
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	1b9a      	subs	r2, r3, r6
 8008d88:	d006      	beq.n	8008d98 <_dtoa_r+0x7a0>
 8008d8a:	ee18 1a10 	vmov	r1, s16
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fc68 	bl	8009664 <__pow5mult>
 8008d94:	ee08 0a10 	vmov	s16, r0
 8008d98:	2101      	movs	r1, #1
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fba2 	bl	80094e4 <__i2b>
 8008da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	4606      	mov	r6, r0
 8008da6:	f340 8088 	ble.w	8008eba <_dtoa_r+0x8c2>
 8008daa:	461a      	mov	r2, r3
 8008dac:	4601      	mov	r1, r0
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 fc58 	bl	8009664 <__pow5mult>
 8008db4:	9b06      	ldr	r3, [sp, #24]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	4606      	mov	r6, r0
 8008dba:	f340 8081 	ble.w	8008ec0 <_dtoa_r+0x8c8>
 8008dbe:	f04f 0800 	mov.w	r8, #0
 8008dc2:	6933      	ldr	r3, [r6, #16]
 8008dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dc8:	6918      	ldr	r0, [r3, #16]
 8008dca:	f000 fb3b 	bl	8009444 <__hi0bits>
 8008dce:	f1c0 0020 	rsb	r0, r0, #32
 8008dd2:	9b05      	ldr	r3, [sp, #20]
 8008dd4:	4418      	add	r0, r3
 8008dd6:	f010 001f 	ands.w	r0, r0, #31
 8008dda:	f000 8092 	beq.w	8008f02 <_dtoa_r+0x90a>
 8008dde:	f1c0 0320 	rsb	r3, r0, #32
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	f340 808a 	ble.w	8008efc <_dtoa_r+0x904>
 8008de8:	f1c0 001c 	rsb	r0, r0, #28
 8008dec:	9b04      	ldr	r3, [sp, #16]
 8008dee:	4403      	add	r3, r0
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	9b05      	ldr	r3, [sp, #20]
 8008df4:	4403      	add	r3, r0
 8008df6:	4405      	add	r5, r0
 8008df8:	9305      	str	r3, [sp, #20]
 8008dfa:	9b04      	ldr	r3, [sp, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dd07      	ble.n	8008e10 <_dtoa_r+0x818>
 8008e00:	ee18 1a10 	vmov	r1, s16
 8008e04:	461a      	mov	r2, r3
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 fc86 	bl	8009718 <__lshift>
 8008e0c:	ee08 0a10 	vmov	s16, r0
 8008e10:	9b05      	ldr	r3, [sp, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dd05      	ble.n	8008e22 <_dtoa_r+0x82a>
 8008e16:	4631      	mov	r1, r6
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fc7c 	bl	8009718 <__lshift>
 8008e20:	4606      	mov	r6, r0
 8008e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d06e      	beq.n	8008f06 <_dtoa_r+0x90e>
 8008e28:	ee18 0a10 	vmov	r0, s16
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	f000 fce3 	bl	80097f8 <__mcmp>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	da67      	bge.n	8008f06 <_dtoa_r+0x90e>
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	ee18 1a10 	vmov	r1, s16
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	220a      	movs	r2, #10
 8008e42:	2300      	movs	r3, #0
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fab7 	bl	80093b8 <__multadd>
 8008e4a:	9b08      	ldr	r3, [sp, #32]
 8008e4c:	ee08 0a10 	vmov	s16, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 81b1 	beq.w	80091b8 <_dtoa_r+0xbc0>
 8008e56:	2300      	movs	r3, #0
 8008e58:	4639      	mov	r1, r7
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 faab 	bl	80093b8 <__multadd>
 8008e62:	9b02      	ldr	r3, [sp, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	4607      	mov	r7, r0
 8008e68:	f300 808e 	bgt.w	8008f88 <_dtoa_r+0x990>
 8008e6c:	9b06      	ldr	r3, [sp, #24]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dc51      	bgt.n	8008f16 <_dtoa_r+0x91e>
 8008e72:	e089      	b.n	8008f88 <_dtoa_r+0x990>
 8008e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e7a:	e74b      	b.n	8008d14 <_dtoa_r+0x71c>
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	1e5e      	subs	r6, r3, #1
 8008e80:	9b07      	ldr	r3, [sp, #28]
 8008e82:	42b3      	cmp	r3, r6
 8008e84:	bfbf      	itttt	lt
 8008e86:	9b07      	ldrlt	r3, [sp, #28]
 8008e88:	9607      	strlt	r6, [sp, #28]
 8008e8a:	1af2      	sublt	r2, r6, r3
 8008e8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008e8e:	bfb6      	itet	lt
 8008e90:	189b      	addlt	r3, r3, r2
 8008e92:	1b9e      	subge	r6, r3, r6
 8008e94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	bfb8      	it	lt
 8008e9a:	2600      	movlt	r6, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb7      	itett	lt
 8008ea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ea8:	1a9d      	sublt	r5, r3, r2
 8008eaa:	2300      	movlt	r3, #0
 8008eac:	e734      	b.n	8008d18 <_dtoa_r+0x720>
 8008eae:	9e07      	ldr	r6, [sp, #28]
 8008eb0:	9d04      	ldr	r5, [sp, #16]
 8008eb2:	9f08      	ldr	r7, [sp, #32]
 8008eb4:	e73b      	b.n	8008d2e <_dtoa_r+0x736>
 8008eb6:	9a07      	ldr	r2, [sp, #28]
 8008eb8:	e767      	b.n	8008d8a <_dtoa_r+0x792>
 8008eba:	9b06      	ldr	r3, [sp, #24]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	dc18      	bgt.n	8008ef2 <_dtoa_r+0x8fa>
 8008ec0:	f1ba 0f00 	cmp.w	sl, #0
 8008ec4:	d115      	bne.n	8008ef2 <_dtoa_r+0x8fa>
 8008ec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eca:	b993      	cbnz	r3, 8008ef2 <_dtoa_r+0x8fa>
 8008ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ed0:	0d1b      	lsrs	r3, r3, #20
 8008ed2:	051b      	lsls	r3, r3, #20
 8008ed4:	b183      	cbz	r3, 8008ef8 <_dtoa_r+0x900>
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	9305      	str	r3, [sp, #20]
 8008ee2:	f04f 0801 	mov.w	r8, #1
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f47f af6a 	bne.w	8008dc2 <_dtoa_r+0x7ca>
 8008eee:	2001      	movs	r0, #1
 8008ef0:	e76f      	b.n	8008dd2 <_dtoa_r+0x7da>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	e7f6      	b.n	8008ee6 <_dtoa_r+0x8ee>
 8008ef8:	4698      	mov	r8, r3
 8008efa:	e7f4      	b.n	8008ee6 <_dtoa_r+0x8ee>
 8008efc:	f43f af7d 	beq.w	8008dfa <_dtoa_r+0x802>
 8008f00:	4618      	mov	r0, r3
 8008f02:	301c      	adds	r0, #28
 8008f04:	e772      	b.n	8008dec <_dtoa_r+0x7f4>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dc37      	bgt.n	8008f7c <_dtoa_r+0x984>
 8008f0c:	9b06      	ldr	r3, [sp, #24]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	dd34      	ble.n	8008f7c <_dtoa_r+0x984>
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	9302      	str	r3, [sp, #8]
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	b96b      	cbnz	r3, 8008f36 <_dtoa_r+0x93e>
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fa4a 	bl	80093b8 <__multadd>
 8008f24:	4601      	mov	r1, r0
 8008f26:	4606      	mov	r6, r0
 8008f28:	ee18 0a10 	vmov	r0, s16
 8008f2c:	f000 fc64 	bl	80097f8 <__mcmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	f73f adbb 	bgt.w	8008aac <_dtoa_r+0x4b4>
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	9d01      	ldr	r5, [sp, #4]
 8008f3a:	43db      	mvns	r3, r3
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	f04f 0800 	mov.w	r8, #0
 8008f42:	4631      	mov	r1, r6
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fa15 	bl	8009374 <_Bfree>
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	f43f aea4 	beq.w	8008c98 <_dtoa_r+0x6a0>
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d005      	beq.n	8008f62 <_dtoa_r+0x96a>
 8008f56:	45b8      	cmp	r8, r7
 8008f58:	d003      	beq.n	8008f62 <_dtoa_r+0x96a>
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fa09 	bl	8009374 <_Bfree>
 8008f62:	4639      	mov	r1, r7
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fa05 	bl	8009374 <_Bfree>
 8008f6a:	e695      	b.n	8008c98 <_dtoa_r+0x6a0>
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	4637      	mov	r7, r6
 8008f70:	e7e1      	b.n	8008f36 <_dtoa_r+0x93e>
 8008f72:	9700      	str	r7, [sp, #0]
 8008f74:	4637      	mov	r7, r6
 8008f76:	e599      	b.n	8008aac <_dtoa_r+0x4b4>
 8008f78:	40240000 	.word	0x40240000
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80ca 	beq.w	8009118 <_dtoa_r+0xb20>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	9302      	str	r3, [sp, #8]
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	dd05      	ble.n	8008f98 <_dtoa_r+0x9a0>
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	462a      	mov	r2, r5
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fbc1 	bl	8009718 <__lshift>
 8008f96:	4607      	mov	r7, r0
 8008f98:	f1b8 0f00 	cmp.w	r8, #0
 8008f9c:	d05b      	beq.n	8009056 <_dtoa_r+0xa5e>
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 f9a7 	bl	80092f4 <_Balloc>
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	b928      	cbnz	r0, 8008fb6 <_dtoa_r+0x9be>
 8008faa:	4b87      	ldr	r3, [pc, #540]	; (80091c8 <_dtoa_r+0xbd0>)
 8008fac:	4602      	mov	r2, r0
 8008fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008fb2:	f7ff bb3b 	b.w	800862c <_dtoa_r+0x34>
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	3202      	adds	r2, #2
 8008fba:	0092      	lsls	r2, r2, #2
 8008fbc:	f107 010c 	add.w	r1, r7, #12
 8008fc0:	300c      	adds	r0, #12
 8008fc2:	f7fe fafc 	bl	80075be <memcpy>
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 fba4 	bl	8009718 <__lshift>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	f103 0901 	add.w	r9, r3, #1
 8008fd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008fda:	4413      	add	r3, r2
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	f00a 0301 	and.w	r3, sl, #1
 8008fe2:	46b8      	mov	r8, r7
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	4607      	mov	r7, r0
 8008fe8:	4631      	mov	r1, r6
 8008fea:	ee18 0a10 	vmov	r0, s16
 8008fee:	f7ff fa75 	bl	80084dc <quorem>
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	9002      	str	r0, [sp, #8]
 8008ff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ffa:	ee18 0a10 	vmov	r0, s16
 8008ffe:	f000 fbfb 	bl	80097f8 <__mcmp>
 8009002:	463a      	mov	r2, r7
 8009004:	9003      	str	r0, [sp, #12]
 8009006:	4631      	mov	r1, r6
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fc11 	bl	8009830 <__mdiff>
 800900e:	68c2      	ldr	r2, [r0, #12]
 8009010:	f109 3bff 	add.w	fp, r9, #4294967295
 8009014:	4605      	mov	r5, r0
 8009016:	bb02      	cbnz	r2, 800905a <_dtoa_r+0xa62>
 8009018:	4601      	mov	r1, r0
 800901a:	ee18 0a10 	vmov	r0, s16
 800901e:	f000 fbeb 	bl	80097f8 <__mcmp>
 8009022:	4602      	mov	r2, r0
 8009024:	4629      	mov	r1, r5
 8009026:	4620      	mov	r0, r4
 8009028:	9207      	str	r2, [sp, #28]
 800902a:	f000 f9a3 	bl	8009374 <_Bfree>
 800902e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009032:	ea43 0102 	orr.w	r1, r3, r2
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	430b      	orrs	r3, r1
 800903a:	464d      	mov	r5, r9
 800903c:	d10f      	bne.n	800905e <_dtoa_r+0xa66>
 800903e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009042:	d02a      	beq.n	800909a <_dtoa_r+0xaa2>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dd02      	ble.n	8009050 <_dtoa_r+0xa58>
 800904a:	9b02      	ldr	r3, [sp, #8]
 800904c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009050:	f88b a000 	strb.w	sl, [fp]
 8009054:	e775      	b.n	8008f42 <_dtoa_r+0x94a>
 8009056:	4638      	mov	r0, r7
 8009058:	e7ba      	b.n	8008fd0 <_dtoa_r+0x9d8>
 800905a:	2201      	movs	r2, #1
 800905c:	e7e2      	b.n	8009024 <_dtoa_r+0xa2c>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	db04      	blt.n	800906e <_dtoa_r+0xa76>
 8009064:	9906      	ldr	r1, [sp, #24]
 8009066:	430b      	orrs	r3, r1
 8009068:	9904      	ldr	r1, [sp, #16]
 800906a:	430b      	orrs	r3, r1
 800906c:	d122      	bne.n	80090b4 <_dtoa_r+0xabc>
 800906e:	2a00      	cmp	r2, #0
 8009070:	ddee      	ble.n	8009050 <_dtoa_r+0xa58>
 8009072:	ee18 1a10 	vmov	r1, s16
 8009076:	2201      	movs	r2, #1
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fb4d 	bl	8009718 <__lshift>
 800907e:	4631      	mov	r1, r6
 8009080:	ee08 0a10 	vmov	s16, r0
 8009084:	f000 fbb8 	bl	80097f8 <__mcmp>
 8009088:	2800      	cmp	r0, #0
 800908a:	dc03      	bgt.n	8009094 <_dtoa_r+0xa9c>
 800908c:	d1e0      	bne.n	8009050 <_dtoa_r+0xa58>
 800908e:	f01a 0f01 	tst.w	sl, #1
 8009092:	d0dd      	beq.n	8009050 <_dtoa_r+0xa58>
 8009094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009098:	d1d7      	bne.n	800904a <_dtoa_r+0xa52>
 800909a:	2339      	movs	r3, #57	; 0x39
 800909c:	f88b 3000 	strb.w	r3, [fp]
 80090a0:	462b      	mov	r3, r5
 80090a2:	461d      	mov	r5, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090aa:	2a39      	cmp	r2, #57	; 0x39
 80090ac:	d071      	beq.n	8009192 <_dtoa_r+0xb9a>
 80090ae:	3201      	adds	r2, #1
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e746      	b.n	8008f42 <_dtoa_r+0x94a>
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	dd07      	ble.n	80090c8 <_dtoa_r+0xad0>
 80090b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090bc:	d0ed      	beq.n	800909a <_dtoa_r+0xaa2>
 80090be:	f10a 0301 	add.w	r3, sl, #1
 80090c2:	f88b 3000 	strb.w	r3, [fp]
 80090c6:	e73c      	b.n	8008f42 <_dtoa_r+0x94a>
 80090c8:	9b05      	ldr	r3, [sp, #20]
 80090ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80090ce:	4599      	cmp	r9, r3
 80090d0:	d047      	beq.n	8009162 <_dtoa_r+0xb6a>
 80090d2:	ee18 1a10 	vmov	r1, s16
 80090d6:	2300      	movs	r3, #0
 80090d8:	220a      	movs	r2, #10
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 f96c 	bl	80093b8 <__multadd>
 80090e0:	45b8      	cmp	r8, r7
 80090e2:	ee08 0a10 	vmov	s16, r0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	f04f 020a 	mov.w	r2, #10
 80090ee:	4641      	mov	r1, r8
 80090f0:	4620      	mov	r0, r4
 80090f2:	d106      	bne.n	8009102 <_dtoa_r+0xb0a>
 80090f4:	f000 f960 	bl	80093b8 <__multadd>
 80090f8:	4680      	mov	r8, r0
 80090fa:	4607      	mov	r7, r0
 80090fc:	f109 0901 	add.w	r9, r9, #1
 8009100:	e772      	b.n	8008fe8 <_dtoa_r+0x9f0>
 8009102:	f000 f959 	bl	80093b8 <__multadd>
 8009106:	4639      	mov	r1, r7
 8009108:	4680      	mov	r8, r0
 800910a:	2300      	movs	r3, #0
 800910c:	220a      	movs	r2, #10
 800910e:	4620      	mov	r0, r4
 8009110:	f000 f952 	bl	80093b8 <__multadd>
 8009114:	4607      	mov	r7, r0
 8009116:	e7f1      	b.n	80090fc <_dtoa_r+0xb04>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	9302      	str	r3, [sp, #8]
 800911c:	9d01      	ldr	r5, [sp, #4]
 800911e:	ee18 0a10 	vmov	r0, s16
 8009122:	4631      	mov	r1, r6
 8009124:	f7ff f9da 	bl	80084dc <quorem>
 8009128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	f805 ab01 	strb.w	sl, [r5], #1
 8009132:	1aea      	subs	r2, r5, r3
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	4293      	cmp	r3, r2
 8009138:	dd09      	ble.n	800914e <_dtoa_r+0xb56>
 800913a:	ee18 1a10 	vmov	r1, s16
 800913e:	2300      	movs	r3, #0
 8009140:	220a      	movs	r2, #10
 8009142:	4620      	mov	r0, r4
 8009144:	f000 f938 	bl	80093b8 <__multadd>
 8009148:	ee08 0a10 	vmov	s16, r0
 800914c:	e7e7      	b.n	800911e <_dtoa_r+0xb26>
 800914e:	9b02      	ldr	r3, [sp, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfc8      	it	gt
 8009154:	461d      	movgt	r5, r3
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	bfd8      	it	le
 800915a:	2501      	movle	r5, #1
 800915c:	441d      	add	r5, r3
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	ee18 1a10 	vmov	r1, s16
 8009166:	2201      	movs	r2, #1
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fad5 	bl	8009718 <__lshift>
 800916e:	4631      	mov	r1, r6
 8009170:	ee08 0a10 	vmov	s16, r0
 8009174:	f000 fb40 	bl	80097f8 <__mcmp>
 8009178:	2800      	cmp	r0, #0
 800917a:	dc91      	bgt.n	80090a0 <_dtoa_r+0xaa8>
 800917c:	d102      	bne.n	8009184 <_dtoa_r+0xb8c>
 800917e:	f01a 0f01 	tst.w	sl, #1
 8009182:	d18d      	bne.n	80090a0 <_dtoa_r+0xaa8>
 8009184:	462b      	mov	r3, r5
 8009186:	461d      	mov	r5, r3
 8009188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800918c:	2a30      	cmp	r2, #48	; 0x30
 800918e:	d0fa      	beq.n	8009186 <_dtoa_r+0xb8e>
 8009190:	e6d7      	b.n	8008f42 <_dtoa_r+0x94a>
 8009192:	9a01      	ldr	r2, [sp, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d184      	bne.n	80090a2 <_dtoa_r+0xaaa>
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	2331      	movs	r3, #49	; 0x31
 80091a0:	7013      	strb	r3, [r2, #0]
 80091a2:	e6ce      	b.n	8008f42 <_dtoa_r+0x94a>
 80091a4:	4b09      	ldr	r3, [pc, #36]	; (80091cc <_dtoa_r+0xbd4>)
 80091a6:	f7ff ba95 	b.w	80086d4 <_dtoa_r+0xdc>
 80091aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f47f aa6e 	bne.w	800868e <_dtoa_r+0x96>
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <_dtoa_r+0xbd8>)
 80091b4:	f7ff ba8e 	b.w	80086d4 <_dtoa_r+0xdc>
 80091b8:	9b02      	ldr	r3, [sp, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dcae      	bgt.n	800911c <_dtoa_r+0xb24>
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	f73f aea8 	bgt.w	8008f16 <_dtoa_r+0x91e>
 80091c6:	e7a9      	b.n	800911c <_dtoa_r+0xb24>
 80091c8:	0800a10b 	.word	0x0800a10b
 80091cc:	0800a068 	.word	0x0800a068
 80091d0:	0800a08c 	.word	0x0800a08c

080091d4 <_localeconv_r>:
 80091d4:	4800      	ldr	r0, [pc, #0]	; (80091d8 <_localeconv_r+0x4>)
 80091d6:	4770      	bx	lr
 80091d8:	20000168 	.word	0x20000168

080091dc <_lseek_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	; (80091fc <_lseek_r+0x20>)
 80091e0:	4604      	mov	r4, r0
 80091e2:	4608      	mov	r0, r1
 80091e4:	4611      	mov	r1, r2
 80091e6:	2200      	movs	r2, #0
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f7f8 ffb2 	bl	8002154 <_lseek>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_lseek_r+0x1e>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_lseek_r+0x1e>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20014aac 	.word	0x20014aac

08009200 <__swhatbuf_r>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	460e      	mov	r6, r1
 8009204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009208:	2900      	cmp	r1, #0
 800920a:	b096      	sub	sp, #88	; 0x58
 800920c:	4614      	mov	r4, r2
 800920e:	461d      	mov	r5, r3
 8009210:	da08      	bge.n	8009224 <__swhatbuf_r+0x24>
 8009212:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	602a      	str	r2, [r5, #0]
 800921a:	061a      	lsls	r2, r3, #24
 800921c:	d410      	bmi.n	8009240 <__swhatbuf_r+0x40>
 800921e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009222:	e00e      	b.n	8009242 <__swhatbuf_r+0x42>
 8009224:	466a      	mov	r2, sp
 8009226:	f000 fd9b 	bl	8009d60 <_fstat_r>
 800922a:	2800      	cmp	r0, #0
 800922c:	dbf1      	blt.n	8009212 <__swhatbuf_r+0x12>
 800922e:	9a01      	ldr	r2, [sp, #4]
 8009230:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009234:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009238:	425a      	negs	r2, r3
 800923a:	415a      	adcs	r2, r3
 800923c:	602a      	str	r2, [r5, #0]
 800923e:	e7ee      	b.n	800921e <__swhatbuf_r+0x1e>
 8009240:	2340      	movs	r3, #64	; 0x40
 8009242:	2000      	movs	r0, #0
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	b016      	add	sp, #88	; 0x58
 8009248:	bd70      	pop	{r4, r5, r6, pc}
	...

0800924c <__smakebuf_r>:
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009250:	079d      	lsls	r5, r3, #30
 8009252:	4606      	mov	r6, r0
 8009254:	460c      	mov	r4, r1
 8009256:	d507      	bpl.n	8009268 <__smakebuf_r+0x1c>
 8009258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	2301      	movs	r3, #1
 8009262:	6163      	str	r3, [r4, #20]
 8009264:	b002      	add	sp, #8
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	ab01      	add	r3, sp, #4
 800926a:	466a      	mov	r2, sp
 800926c:	f7ff ffc8 	bl	8009200 <__swhatbuf_r>
 8009270:	9900      	ldr	r1, [sp, #0]
 8009272:	4605      	mov	r5, r0
 8009274:	4630      	mov	r0, r6
 8009276:	f7fe fa25 	bl	80076c4 <_malloc_r>
 800927a:	b948      	cbnz	r0, 8009290 <__smakebuf_r+0x44>
 800927c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009280:	059a      	lsls	r2, r3, #22
 8009282:	d4ef      	bmi.n	8009264 <__smakebuf_r+0x18>
 8009284:	f023 0303 	bic.w	r3, r3, #3
 8009288:	f043 0302 	orr.w	r3, r3, #2
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	e7e3      	b.n	8009258 <__smakebuf_r+0xc>
 8009290:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <__smakebuf_r+0x7c>)
 8009292:	62b3      	str	r3, [r6, #40]	; 0x28
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	6163      	str	r3, [r4, #20]
 80092a2:	9b01      	ldr	r3, [sp, #4]
 80092a4:	6120      	str	r0, [r4, #16]
 80092a6:	b15b      	cbz	r3, 80092c0 <__smakebuf_r+0x74>
 80092a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 fd69 	bl	8009d84 <_isatty_r>
 80092b2:	b128      	cbz	r0, 80092c0 <__smakebuf_r+0x74>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	89a0      	ldrh	r0, [r4, #12]
 80092c2:	4305      	orrs	r5, r0
 80092c4:	81a5      	strh	r5, [r4, #12]
 80092c6:	e7cd      	b.n	8009264 <__smakebuf_r+0x18>
 80092c8:	080073cd 	.word	0x080073cd

080092cc <malloc>:
 80092cc:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <malloc+0xc>)
 80092ce:	4601      	mov	r1, r0
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f7fe b9f7 	b.w	80076c4 <_malloc_r>
 80092d6:	bf00      	nop
 80092d8:	20000014 	.word	0x20000014

080092dc <__malloc_lock>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__malloc_lock+0x8>)
 80092de:	f7fe b96c 	b.w	80075ba <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	20014aa0 	.word	0x20014aa0

080092e8 <__malloc_unlock>:
 80092e8:	4801      	ldr	r0, [pc, #4]	; (80092f0 <__malloc_unlock+0x8>)
 80092ea:	f7fe b967 	b.w	80075bc <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	20014aa0 	.word	0x20014aa0

080092f4 <_Balloc>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092f8:	4604      	mov	r4, r0
 80092fa:	460d      	mov	r5, r1
 80092fc:	b976      	cbnz	r6, 800931c <_Balloc+0x28>
 80092fe:	2010      	movs	r0, #16
 8009300:	f7ff ffe4 	bl	80092cc <malloc>
 8009304:	4602      	mov	r2, r0
 8009306:	6260      	str	r0, [r4, #36]	; 0x24
 8009308:	b920      	cbnz	r0, 8009314 <_Balloc+0x20>
 800930a:	4b18      	ldr	r3, [pc, #96]	; (800936c <_Balloc+0x78>)
 800930c:	4818      	ldr	r0, [pc, #96]	; (8009370 <_Balloc+0x7c>)
 800930e:	2166      	movs	r1, #102	; 0x66
 8009310:	f000 fcf6 	bl	8009d00 <__assert_func>
 8009314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009318:	6006      	str	r6, [r0, #0]
 800931a:	60c6      	str	r6, [r0, #12]
 800931c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800931e:	68f3      	ldr	r3, [r6, #12]
 8009320:	b183      	cbz	r3, 8009344 <_Balloc+0x50>
 8009322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800932a:	b9b8      	cbnz	r0, 800935c <_Balloc+0x68>
 800932c:	2101      	movs	r1, #1
 800932e:	fa01 f605 	lsl.w	r6, r1, r5
 8009332:	1d72      	adds	r2, r6, #5
 8009334:	0092      	lsls	r2, r2, #2
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fb60 	bl	80099fc <_calloc_r>
 800933c:	b160      	cbz	r0, 8009358 <_Balloc+0x64>
 800933e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009342:	e00e      	b.n	8009362 <_Balloc+0x6e>
 8009344:	2221      	movs	r2, #33	; 0x21
 8009346:	2104      	movs	r1, #4
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fb57 	bl	80099fc <_calloc_r>
 800934e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009350:	60f0      	str	r0, [r6, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e4      	bne.n	8009322 <_Balloc+0x2e>
 8009358:	2000      	movs	r0, #0
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	6802      	ldr	r2, [r0, #0]
 800935e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009362:	2300      	movs	r3, #0
 8009364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009368:	e7f7      	b.n	800935a <_Balloc+0x66>
 800936a:	bf00      	nop
 800936c:	0800a099 	.word	0x0800a099
 8009370:	0800a11c 	.word	0x0800a11c

08009374 <_Bfree>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009378:	4605      	mov	r5, r0
 800937a:	460c      	mov	r4, r1
 800937c:	b976      	cbnz	r6, 800939c <_Bfree+0x28>
 800937e:	2010      	movs	r0, #16
 8009380:	f7ff ffa4 	bl	80092cc <malloc>
 8009384:	4602      	mov	r2, r0
 8009386:	6268      	str	r0, [r5, #36]	; 0x24
 8009388:	b920      	cbnz	r0, 8009394 <_Bfree+0x20>
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <_Bfree+0x3c>)
 800938c:	4809      	ldr	r0, [pc, #36]	; (80093b4 <_Bfree+0x40>)
 800938e:	218a      	movs	r1, #138	; 0x8a
 8009390:	f000 fcb6 	bl	8009d00 <__assert_func>
 8009394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009398:	6006      	str	r6, [r0, #0]
 800939a:	60c6      	str	r6, [r0, #12]
 800939c:	b13c      	cbz	r4, 80093ae <_Bfree+0x3a>
 800939e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093a8:	6021      	str	r1, [r4, #0]
 80093aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	0800a099 	.word	0x0800a099
 80093b4:	0800a11c 	.word	0x0800a11c

080093b8 <__multadd>:
 80093b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093bc:	690d      	ldr	r5, [r1, #16]
 80093be:	4607      	mov	r7, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	461e      	mov	r6, r3
 80093c4:	f101 0c14 	add.w	ip, r1, #20
 80093c8:	2000      	movs	r0, #0
 80093ca:	f8dc 3000 	ldr.w	r3, [ip]
 80093ce:	b299      	uxth	r1, r3
 80093d0:	fb02 6101 	mla	r1, r2, r1, r6
 80093d4:	0c1e      	lsrs	r6, r3, #16
 80093d6:	0c0b      	lsrs	r3, r1, #16
 80093d8:	fb02 3306 	mla	r3, r2, r6, r3
 80093dc:	b289      	uxth	r1, r1
 80093de:	3001      	adds	r0, #1
 80093e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093e4:	4285      	cmp	r5, r0
 80093e6:	f84c 1b04 	str.w	r1, [ip], #4
 80093ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093ee:	dcec      	bgt.n	80093ca <__multadd+0x12>
 80093f0:	b30e      	cbz	r6, 8009436 <__multadd+0x7e>
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	42ab      	cmp	r3, r5
 80093f6:	dc19      	bgt.n	800942c <__multadd+0x74>
 80093f8:	6861      	ldr	r1, [r4, #4]
 80093fa:	4638      	mov	r0, r7
 80093fc:	3101      	adds	r1, #1
 80093fe:	f7ff ff79 	bl	80092f4 <_Balloc>
 8009402:	4680      	mov	r8, r0
 8009404:	b928      	cbnz	r0, 8009412 <__multadd+0x5a>
 8009406:	4602      	mov	r2, r0
 8009408:	4b0c      	ldr	r3, [pc, #48]	; (800943c <__multadd+0x84>)
 800940a:	480d      	ldr	r0, [pc, #52]	; (8009440 <__multadd+0x88>)
 800940c:	21b5      	movs	r1, #181	; 0xb5
 800940e:	f000 fc77 	bl	8009d00 <__assert_func>
 8009412:	6922      	ldr	r2, [r4, #16]
 8009414:	3202      	adds	r2, #2
 8009416:	f104 010c 	add.w	r1, r4, #12
 800941a:	0092      	lsls	r2, r2, #2
 800941c:	300c      	adds	r0, #12
 800941e:	f7fe f8ce 	bl	80075be <memcpy>
 8009422:	4621      	mov	r1, r4
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff ffa5 	bl	8009374 <_Bfree>
 800942a:	4644      	mov	r4, r8
 800942c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009430:	3501      	adds	r5, #1
 8009432:	615e      	str	r6, [r3, #20]
 8009434:	6125      	str	r5, [r4, #16]
 8009436:	4620      	mov	r0, r4
 8009438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800943c:	0800a10b 	.word	0x0800a10b
 8009440:	0800a11c 	.word	0x0800a11c

08009444 <__hi0bits>:
 8009444:	0c03      	lsrs	r3, r0, #16
 8009446:	041b      	lsls	r3, r3, #16
 8009448:	b9d3      	cbnz	r3, 8009480 <__hi0bits+0x3c>
 800944a:	0400      	lsls	r0, r0, #16
 800944c:	2310      	movs	r3, #16
 800944e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009452:	bf04      	itt	eq
 8009454:	0200      	lsleq	r0, r0, #8
 8009456:	3308      	addeq	r3, #8
 8009458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800945c:	bf04      	itt	eq
 800945e:	0100      	lsleq	r0, r0, #4
 8009460:	3304      	addeq	r3, #4
 8009462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009466:	bf04      	itt	eq
 8009468:	0080      	lsleq	r0, r0, #2
 800946a:	3302      	addeq	r3, #2
 800946c:	2800      	cmp	r0, #0
 800946e:	db05      	blt.n	800947c <__hi0bits+0x38>
 8009470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009474:	f103 0301 	add.w	r3, r3, #1
 8009478:	bf08      	it	eq
 800947a:	2320      	moveq	r3, #32
 800947c:	4618      	mov	r0, r3
 800947e:	4770      	bx	lr
 8009480:	2300      	movs	r3, #0
 8009482:	e7e4      	b.n	800944e <__hi0bits+0xa>

08009484 <__lo0bits>:
 8009484:	6803      	ldr	r3, [r0, #0]
 8009486:	f013 0207 	ands.w	r2, r3, #7
 800948a:	4601      	mov	r1, r0
 800948c:	d00b      	beq.n	80094a6 <__lo0bits+0x22>
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d423      	bmi.n	80094da <__lo0bits+0x56>
 8009492:	0798      	lsls	r0, r3, #30
 8009494:	bf49      	itett	mi
 8009496:	085b      	lsrmi	r3, r3, #1
 8009498:	089b      	lsrpl	r3, r3, #2
 800949a:	2001      	movmi	r0, #1
 800949c:	600b      	strmi	r3, [r1, #0]
 800949e:	bf5c      	itt	pl
 80094a0:	600b      	strpl	r3, [r1, #0]
 80094a2:	2002      	movpl	r0, #2
 80094a4:	4770      	bx	lr
 80094a6:	b298      	uxth	r0, r3
 80094a8:	b9a8      	cbnz	r0, 80094d6 <__lo0bits+0x52>
 80094aa:	0c1b      	lsrs	r3, r3, #16
 80094ac:	2010      	movs	r0, #16
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	b90a      	cbnz	r2, 80094b6 <__lo0bits+0x32>
 80094b2:	3008      	adds	r0, #8
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	071a      	lsls	r2, r3, #28
 80094b8:	bf04      	itt	eq
 80094ba:	091b      	lsreq	r3, r3, #4
 80094bc:	3004      	addeq	r0, #4
 80094be:	079a      	lsls	r2, r3, #30
 80094c0:	bf04      	itt	eq
 80094c2:	089b      	lsreq	r3, r3, #2
 80094c4:	3002      	addeq	r0, #2
 80094c6:	07da      	lsls	r2, r3, #31
 80094c8:	d403      	bmi.n	80094d2 <__lo0bits+0x4e>
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	f100 0001 	add.w	r0, r0, #1
 80094d0:	d005      	beq.n	80094de <__lo0bits+0x5a>
 80094d2:	600b      	str	r3, [r1, #0]
 80094d4:	4770      	bx	lr
 80094d6:	4610      	mov	r0, r2
 80094d8:	e7e9      	b.n	80094ae <__lo0bits+0x2a>
 80094da:	2000      	movs	r0, #0
 80094dc:	4770      	bx	lr
 80094de:	2020      	movs	r0, #32
 80094e0:	4770      	bx	lr
	...

080094e4 <__i2b>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	2101      	movs	r1, #1
 80094ea:	f7ff ff03 	bl	80092f4 <_Balloc>
 80094ee:	4602      	mov	r2, r0
 80094f0:	b928      	cbnz	r0, 80094fe <__i2b+0x1a>
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <__i2b+0x24>)
 80094f4:	4805      	ldr	r0, [pc, #20]	; (800950c <__i2b+0x28>)
 80094f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094fa:	f000 fc01 	bl	8009d00 <__assert_func>
 80094fe:	2301      	movs	r3, #1
 8009500:	6144      	str	r4, [r0, #20]
 8009502:	6103      	str	r3, [r0, #16]
 8009504:	bd10      	pop	{r4, pc}
 8009506:	bf00      	nop
 8009508:	0800a10b 	.word	0x0800a10b
 800950c:	0800a11c 	.word	0x0800a11c

08009510 <__multiply>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	4691      	mov	r9, r2
 8009516:	690a      	ldr	r2, [r1, #16]
 8009518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800951c:	429a      	cmp	r2, r3
 800951e:	bfb8      	it	lt
 8009520:	460b      	movlt	r3, r1
 8009522:	460c      	mov	r4, r1
 8009524:	bfbc      	itt	lt
 8009526:	464c      	movlt	r4, r9
 8009528:	4699      	movlt	r9, r3
 800952a:	6927      	ldr	r7, [r4, #16]
 800952c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	6861      	ldr	r1, [r4, #4]
 8009534:	eb07 060a 	add.w	r6, r7, sl
 8009538:	42b3      	cmp	r3, r6
 800953a:	b085      	sub	sp, #20
 800953c:	bfb8      	it	lt
 800953e:	3101      	addlt	r1, #1
 8009540:	f7ff fed8 	bl	80092f4 <_Balloc>
 8009544:	b930      	cbnz	r0, 8009554 <__multiply+0x44>
 8009546:	4602      	mov	r2, r0
 8009548:	4b44      	ldr	r3, [pc, #272]	; (800965c <__multiply+0x14c>)
 800954a:	4845      	ldr	r0, [pc, #276]	; (8009660 <__multiply+0x150>)
 800954c:	f240 115d 	movw	r1, #349	; 0x15d
 8009550:	f000 fbd6 	bl	8009d00 <__assert_func>
 8009554:	f100 0514 	add.w	r5, r0, #20
 8009558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800955c:	462b      	mov	r3, r5
 800955e:	2200      	movs	r2, #0
 8009560:	4543      	cmp	r3, r8
 8009562:	d321      	bcc.n	80095a8 <__multiply+0x98>
 8009564:	f104 0314 	add.w	r3, r4, #20
 8009568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800956c:	f109 0314 	add.w	r3, r9, #20
 8009570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009574:	9202      	str	r2, [sp, #8]
 8009576:	1b3a      	subs	r2, r7, r4
 8009578:	3a15      	subs	r2, #21
 800957a:	f022 0203 	bic.w	r2, r2, #3
 800957e:	3204      	adds	r2, #4
 8009580:	f104 0115 	add.w	r1, r4, #21
 8009584:	428f      	cmp	r7, r1
 8009586:	bf38      	it	cc
 8009588:	2204      	movcc	r2, #4
 800958a:	9201      	str	r2, [sp, #4]
 800958c:	9a02      	ldr	r2, [sp, #8]
 800958e:	9303      	str	r3, [sp, #12]
 8009590:	429a      	cmp	r2, r3
 8009592:	d80c      	bhi.n	80095ae <__multiply+0x9e>
 8009594:	2e00      	cmp	r6, #0
 8009596:	dd03      	ble.n	80095a0 <__multiply+0x90>
 8009598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800959c:	2b00      	cmp	r3, #0
 800959e:	d05a      	beq.n	8009656 <__multiply+0x146>
 80095a0:	6106      	str	r6, [r0, #16]
 80095a2:	b005      	add	sp, #20
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	f843 2b04 	str.w	r2, [r3], #4
 80095ac:	e7d8      	b.n	8009560 <__multiply+0x50>
 80095ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80095b2:	f1ba 0f00 	cmp.w	sl, #0
 80095b6:	d024      	beq.n	8009602 <__multiply+0xf2>
 80095b8:	f104 0e14 	add.w	lr, r4, #20
 80095bc:	46a9      	mov	r9, r5
 80095be:	f04f 0c00 	mov.w	ip, #0
 80095c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095c6:	f8d9 1000 	ldr.w	r1, [r9]
 80095ca:	fa1f fb82 	uxth.w	fp, r2
 80095ce:	b289      	uxth	r1, r1
 80095d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80095d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095d8:	f8d9 2000 	ldr.w	r2, [r9]
 80095dc:	4461      	add	r1, ip
 80095de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80095e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095ea:	b289      	uxth	r1, r1
 80095ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095f0:	4577      	cmp	r7, lr
 80095f2:	f849 1b04 	str.w	r1, [r9], #4
 80095f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095fa:	d8e2      	bhi.n	80095c2 <__multiply+0xb2>
 80095fc:	9a01      	ldr	r2, [sp, #4]
 80095fe:	f845 c002 	str.w	ip, [r5, r2]
 8009602:	9a03      	ldr	r2, [sp, #12]
 8009604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009608:	3304      	adds	r3, #4
 800960a:	f1b9 0f00 	cmp.w	r9, #0
 800960e:	d020      	beq.n	8009652 <__multiply+0x142>
 8009610:	6829      	ldr	r1, [r5, #0]
 8009612:	f104 0c14 	add.w	ip, r4, #20
 8009616:	46ae      	mov	lr, r5
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	f8bc b000 	ldrh.w	fp, [ip]
 8009620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009624:	fb09 220b 	mla	r2, r9, fp, r2
 8009628:	4492      	add	sl, r2
 800962a:	b289      	uxth	r1, r1
 800962c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009630:	f84e 1b04 	str.w	r1, [lr], #4
 8009634:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009638:	f8be 1000 	ldrh.w	r1, [lr]
 800963c:	0c12      	lsrs	r2, r2, #16
 800963e:	fb09 1102 	mla	r1, r9, r2, r1
 8009642:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009646:	4567      	cmp	r7, ip
 8009648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800964c:	d8e6      	bhi.n	800961c <__multiply+0x10c>
 800964e:	9a01      	ldr	r2, [sp, #4]
 8009650:	50a9      	str	r1, [r5, r2]
 8009652:	3504      	adds	r5, #4
 8009654:	e79a      	b.n	800958c <__multiply+0x7c>
 8009656:	3e01      	subs	r6, #1
 8009658:	e79c      	b.n	8009594 <__multiply+0x84>
 800965a:	bf00      	nop
 800965c:	0800a10b 	.word	0x0800a10b
 8009660:	0800a11c 	.word	0x0800a11c

08009664 <__pow5mult>:
 8009664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009668:	4615      	mov	r5, r2
 800966a:	f012 0203 	ands.w	r2, r2, #3
 800966e:	4606      	mov	r6, r0
 8009670:	460f      	mov	r7, r1
 8009672:	d007      	beq.n	8009684 <__pow5mult+0x20>
 8009674:	4c25      	ldr	r4, [pc, #148]	; (800970c <__pow5mult+0xa8>)
 8009676:	3a01      	subs	r2, #1
 8009678:	2300      	movs	r3, #0
 800967a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800967e:	f7ff fe9b 	bl	80093b8 <__multadd>
 8009682:	4607      	mov	r7, r0
 8009684:	10ad      	asrs	r5, r5, #2
 8009686:	d03d      	beq.n	8009704 <__pow5mult+0xa0>
 8009688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800968a:	b97c      	cbnz	r4, 80096ac <__pow5mult+0x48>
 800968c:	2010      	movs	r0, #16
 800968e:	f7ff fe1d 	bl	80092cc <malloc>
 8009692:	4602      	mov	r2, r0
 8009694:	6270      	str	r0, [r6, #36]	; 0x24
 8009696:	b928      	cbnz	r0, 80096a4 <__pow5mult+0x40>
 8009698:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <__pow5mult+0xac>)
 800969a:	481e      	ldr	r0, [pc, #120]	; (8009714 <__pow5mult+0xb0>)
 800969c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096a0:	f000 fb2e 	bl	8009d00 <__assert_func>
 80096a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096a8:	6004      	str	r4, [r0, #0]
 80096aa:	60c4      	str	r4, [r0, #12]
 80096ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096b4:	b94c      	cbnz	r4, 80096ca <__pow5mult+0x66>
 80096b6:	f240 2171 	movw	r1, #625	; 0x271
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff ff12 	bl	80094e4 <__i2b>
 80096c0:	2300      	movs	r3, #0
 80096c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80096c6:	4604      	mov	r4, r0
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	f04f 0900 	mov.w	r9, #0
 80096ce:	07eb      	lsls	r3, r5, #31
 80096d0:	d50a      	bpl.n	80096e8 <__pow5mult+0x84>
 80096d2:	4639      	mov	r1, r7
 80096d4:	4622      	mov	r2, r4
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7ff ff1a 	bl	8009510 <__multiply>
 80096dc:	4639      	mov	r1, r7
 80096de:	4680      	mov	r8, r0
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff fe47 	bl	8009374 <_Bfree>
 80096e6:	4647      	mov	r7, r8
 80096e8:	106d      	asrs	r5, r5, #1
 80096ea:	d00b      	beq.n	8009704 <__pow5mult+0xa0>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	b938      	cbnz	r0, 8009700 <__pow5mult+0x9c>
 80096f0:	4622      	mov	r2, r4
 80096f2:	4621      	mov	r1, r4
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7ff ff0b 	bl	8009510 <__multiply>
 80096fa:	6020      	str	r0, [r4, #0]
 80096fc:	f8c0 9000 	str.w	r9, [r0]
 8009700:	4604      	mov	r4, r0
 8009702:	e7e4      	b.n	80096ce <__pow5mult+0x6a>
 8009704:	4638      	mov	r0, r7
 8009706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970a:	bf00      	nop
 800970c:	0800a268 	.word	0x0800a268
 8009710:	0800a099 	.word	0x0800a099
 8009714:	0800a11c 	.word	0x0800a11c

08009718 <__lshift>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	460c      	mov	r4, r1
 800971e:	6849      	ldr	r1, [r1, #4]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	4607      	mov	r7, r0
 800972a:	4691      	mov	r9, r2
 800972c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009730:	f108 0601 	add.w	r6, r8, #1
 8009734:	42b3      	cmp	r3, r6
 8009736:	db0b      	blt.n	8009750 <__lshift+0x38>
 8009738:	4638      	mov	r0, r7
 800973a:	f7ff fddb 	bl	80092f4 <_Balloc>
 800973e:	4605      	mov	r5, r0
 8009740:	b948      	cbnz	r0, 8009756 <__lshift+0x3e>
 8009742:	4602      	mov	r2, r0
 8009744:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <__lshift+0xd8>)
 8009746:	482b      	ldr	r0, [pc, #172]	; (80097f4 <__lshift+0xdc>)
 8009748:	f240 11d9 	movw	r1, #473	; 0x1d9
 800974c:	f000 fad8 	bl	8009d00 <__assert_func>
 8009750:	3101      	adds	r1, #1
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	e7ee      	b.n	8009734 <__lshift+0x1c>
 8009756:	2300      	movs	r3, #0
 8009758:	f100 0114 	add.w	r1, r0, #20
 800975c:	f100 0210 	add.w	r2, r0, #16
 8009760:	4618      	mov	r0, r3
 8009762:	4553      	cmp	r3, sl
 8009764:	db37      	blt.n	80097d6 <__lshift+0xbe>
 8009766:	6920      	ldr	r0, [r4, #16]
 8009768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800976c:	f104 0314 	add.w	r3, r4, #20
 8009770:	f019 091f 	ands.w	r9, r9, #31
 8009774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800977c:	d02f      	beq.n	80097de <__lshift+0xc6>
 800977e:	f1c9 0e20 	rsb	lr, r9, #32
 8009782:	468a      	mov	sl, r1
 8009784:	f04f 0c00 	mov.w	ip, #0
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	fa02 f209 	lsl.w	r2, r2, r9
 800978e:	ea42 020c 	orr.w	r2, r2, ip
 8009792:	f84a 2b04 	str.w	r2, [sl], #4
 8009796:	f853 2b04 	ldr.w	r2, [r3], #4
 800979a:	4298      	cmp	r0, r3
 800979c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097a0:	d8f2      	bhi.n	8009788 <__lshift+0x70>
 80097a2:	1b03      	subs	r3, r0, r4
 80097a4:	3b15      	subs	r3, #21
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	3304      	adds	r3, #4
 80097ac:	f104 0215 	add.w	r2, r4, #21
 80097b0:	4290      	cmp	r0, r2
 80097b2:	bf38      	it	cc
 80097b4:	2304      	movcc	r3, #4
 80097b6:	f841 c003 	str.w	ip, [r1, r3]
 80097ba:	f1bc 0f00 	cmp.w	ip, #0
 80097be:	d001      	beq.n	80097c4 <__lshift+0xac>
 80097c0:	f108 0602 	add.w	r6, r8, #2
 80097c4:	3e01      	subs	r6, #1
 80097c6:	4638      	mov	r0, r7
 80097c8:	612e      	str	r6, [r5, #16]
 80097ca:	4621      	mov	r1, r4
 80097cc:	f7ff fdd2 	bl	8009374 <_Bfree>
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097da:	3301      	adds	r3, #1
 80097dc:	e7c1      	b.n	8009762 <__lshift+0x4a>
 80097de:	3904      	subs	r1, #4
 80097e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097e8:	4298      	cmp	r0, r3
 80097ea:	d8f9      	bhi.n	80097e0 <__lshift+0xc8>
 80097ec:	e7ea      	b.n	80097c4 <__lshift+0xac>
 80097ee:	bf00      	nop
 80097f0:	0800a10b 	.word	0x0800a10b
 80097f4:	0800a11c 	.word	0x0800a11c

080097f8 <__mcmp>:
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	6902      	ldr	r2, [r0, #16]
 80097fc:	690c      	ldr	r4, [r1, #16]
 80097fe:	1b12      	subs	r2, r2, r4
 8009800:	d10e      	bne.n	8009820 <__mcmp+0x28>
 8009802:	f100 0314 	add.w	r3, r0, #20
 8009806:	3114      	adds	r1, #20
 8009808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800980c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009818:	42a5      	cmp	r5, r4
 800981a:	d003      	beq.n	8009824 <__mcmp+0x2c>
 800981c:	d305      	bcc.n	800982a <__mcmp+0x32>
 800981e:	2201      	movs	r2, #1
 8009820:	4610      	mov	r0, r2
 8009822:	bd30      	pop	{r4, r5, pc}
 8009824:	4283      	cmp	r3, r0
 8009826:	d3f3      	bcc.n	8009810 <__mcmp+0x18>
 8009828:	e7fa      	b.n	8009820 <__mcmp+0x28>
 800982a:	f04f 32ff 	mov.w	r2, #4294967295
 800982e:	e7f7      	b.n	8009820 <__mcmp+0x28>

08009830 <__mdiff>:
 8009830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	4606      	mov	r6, r0
 8009838:	4611      	mov	r1, r2
 800983a:	4620      	mov	r0, r4
 800983c:	4690      	mov	r8, r2
 800983e:	f7ff ffdb 	bl	80097f8 <__mcmp>
 8009842:	1e05      	subs	r5, r0, #0
 8009844:	d110      	bne.n	8009868 <__mdiff+0x38>
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff fd53 	bl	80092f4 <_Balloc>
 800984e:	b930      	cbnz	r0, 800985e <__mdiff+0x2e>
 8009850:	4b3a      	ldr	r3, [pc, #232]	; (800993c <__mdiff+0x10c>)
 8009852:	4602      	mov	r2, r0
 8009854:	f240 2132 	movw	r1, #562	; 0x232
 8009858:	4839      	ldr	r0, [pc, #228]	; (8009940 <__mdiff+0x110>)
 800985a:	f000 fa51 	bl	8009d00 <__assert_func>
 800985e:	2301      	movs	r3, #1
 8009860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	bfa4      	itt	ge
 800986a:	4643      	movge	r3, r8
 800986c:	46a0      	movge	r8, r4
 800986e:	4630      	mov	r0, r6
 8009870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009874:	bfa6      	itte	ge
 8009876:	461c      	movge	r4, r3
 8009878:	2500      	movge	r5, #0
 800987a:	2501      	movlt	r5, #1
 800987c:	f7ff fd3a 	bl	80092f4 <_Balloc>
 8009880:	b920      	cbnz	r0, 800988c <__mdiff+0x5c>
 8009882:	4b2e      	ldr	r3, [pc, #184]	; (800993c <__mdiff+0x10c>)
 8009884:	4602      	mov	r2, r0
 8009886:	f44f 7110 	mov.w	r1, #576	; 0x240
 800988a:	e7e5      	b.n	8009858 <__mdiff+0x28>
 800988c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009890:	6926      	ldr	r6, [r4, #16]
 8009892:	60c5      	str	r5, [r0, #12]
 8009894:	f104 0914 	add.w	r9, r4, #20
 8009898:	f108 0514 	add.w	r5, r8, #20
 800989c:	f100 0e14 	add.w	lr, r0, #20
 80098a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098a8:	f108 0210 	add.w	r2, r8, #16
 80098ac:	46f2      	mov	sl, lr
 80098ae:	2100      	movs	r1, #0
 80098b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80098b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098b8:	fa1f f883 	uxth.w	r8, r3
 80098bc:	fa11 f18b 	uxtah	r1, r1, fp
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	eba1 0808 	sub.w	r8, r1, r8
 80098c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098ce:	fa1f f888 	uxth.w	r8, r8
 80098d2:	1419      	asrs	r1, r3, #16
 80098d4:	454e      	cmp	r6, r9
 80098d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098da:	f84a 3b04 	str.w	r3, [sl], #4
 80098de:	d8e7      	bhi.n	80098b0 <__mdiff+0x80>
 80098e0:	1b33      	subs	r3, r6, r4
 80098e2:	3b15      	subs	r3, #21
 80098e4:	f023 0303 	bic.w	r3, r3, #3
 80098e8:	3304      	adds	r3, #4
 80098ea:	3415      	adds	r4, #21
 80098ec:	42a6      	cmp	r6, r4
 80098ee:	bf38      	it	cc
 80098f0:	2304      	movcc	r3, #4
 80098f2:	441d      	add	r5, r3
 80098f4:	4473      	add	r3, lr
 80098f6:	469e      	mov	lr, r3
 80098f8:	462e      	mov	r6, r5
 80098fa:	4566      	cmp	r6, ip
 80098fc:	d30e      	bcc.n	800991c <__mdiff+0xec>
 80098fe:	f10c 0203 	add.w	r2, ip, #3
 8009902:	1b52      	subs	r2, r2, r5
 8009904:	f022 0203 	bic.w	r2, r2, #3
 8009908:	3d03      	subs	r5, #3
 800990a:	45ac      	cmp	ip, r5
 800990c:	bf38      	it	cc
 800990e:	2200      	movcc	r2, #0
 8009910:	441a      	add	r2, r3
 8009912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009916:	b17b      	cbz	r3, 8009938 <__mdiff+0x108>
 8009918:	6107      	str	r7, [r0, #16]
 800991a:	e7a3      	b.n	8009864 <__mdiff+0x34>
 800991c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009920:	fa11 f288 	uxtah	r2, r1, r8
 8009924:	1414      	asrs	r4, r2, #16
 8009926:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800992a:	b292      	uxth	r2, r2
 800992c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009930:	f84e 2b04 	str.w	r2, [lr], #4
 8009934:	1421      	asrs	r1, r4, #16
 8009936:	e7e0      	b.n	80098fa <__mdiff+0xca>
 8009938:	3f01      	subs	r7, #1
 800993a:	e7ea      	b.n	8009912 <__mdiff+0xe2>
 800993c:	0800a10b 	.word	0x0800a10b
 8009940:	0800a11c 	.word	0x0800a11c

08009944 <__d2b>:
 8009944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009948:	4689      	mov	r9, r1
 800994a:	2101      	movs	r1, #1
 800994c:	ec57 6b10 	vmov	r6, r7, d0
 8009950:	4690      	mov	r8, r2
 8009952:	f7ff fccf 	bl	80092f4 <_Balloc>
 8009956:	4604      	mov	r4, r0
 8009958:	b930      	cbnz	r0, 8009968 <__d2b+0x24>
 800995a:	4602      	mov	r2, r0
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <__d2b+0xb0>)
 800995e:	4826      	ldr	r0, [pc, #152]	; (80099f8 <__d2b+0xb4>)
 8009960:	f240 310a 	movw	r1, #778	; 0x30a
 8009964:	f000 f9cc 	bl	8009d00 <__assert_func>
 8009968:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800996c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009970:	bb35      	cbnz	r5, 80099c0 <__d2b+0x7c>
 8009972:	2e00      	cmp	r6, #0
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	d028      	beq.n	80099ca <__d2b+0x86>
 8009978:	4668      	mov	r0, sp
 800997a:	9600      	str	r6, [sp, #0]
 800997c:	f7ff fd82 	bl	8009484 <__lo0bits>
 8009980:	9900      	ldr	r1, [sp, #0]
 8009982:	b300      	cbz	r0, 80099c6 <__d2b+0x82>
 8009984:	9a01      	ldr	r2, [sp, #4]
 8009986:	f1c0 0320 	rsb	r3, r0, #32
 800998a:	fa02 f303 	lsl.w	r3, r2, r3
 800998e:	430b      	orrs	r3, r1
 8009990:	40c2      	lsrs	r2, r0
 8009992:	6163      	str	r3, [r4, #20]
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	61a3      	str	r3, [r4, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	bf14      	ite	ne
 800999e:	2202      	movne	r2, #2
 80099a0:	2201      	moveq	r2, #1
 80099a2:	6122      	str	r2, [r4, #16]
 80099a4:	b1d5      	cbz	r5, 80099dc <__d2b+0x98>
 80099a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099aa:	4405      	add	r5, r0
 80099ac:	f8c9 5000 	str.w	r5, [r9]
 80099b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099b4:	f8c8 0000 	str.w	r0, [r8]
 80099b8:	4620      	mov	r0, r4
 80099ba:	b003      	add	sp, #12
 80099bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099c4:	e7d5      	b.n	8009972 <__d2b+0x2e>
 80099c6:	6161      	str	r1, [r4, #20]
 80099c8:	e7e5      	b.n	8009996 <__d2b+0x52>
 80099ca:	a801      	add	r0, sp, #4
 80099cc:	f7ff fd5a 	bl	8009484 <__lo0bits>
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	2201      	movs	r2, #1
 80099d6:	6122      	str	r2, [r4, #16]
 80099d8:	3020      	adds	r0, #32
 80099da:	e7e3      	b.n	80099a4 <__d2b+0x60>
 80099dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099e4:	f8c9 0000 	str.w	r0, [r9]
 80099e8:	6918      	ldr	r0, [r3, #16]
 80099ea:	f7ff fd2b 	bl	8009444 <__hi0bits>
 80099ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099f2:	e7df      	b.n	80099b4 <__d2b+0x70>
 80099f4:	0800a10b 	.word	0x0800a10b
 80099f8:	0800a11c 	.word	0x0800a11c

080099fc <_calloc_r>:
 80099fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fe:	fba1 2402 	umull	r2, r4, r1, r2
 8009a02:	b94c      	cbnz	r4, 8009a18 <_calloc_r+0x1c>
 8009a04:	4611      	mov	r1, r2
 8009a06:	9201      	str	r2, [sp, #4]
 8009a08:	f7fd fe5c 	bl	80076c4 <_malloc_r>
 8009a0c:	9a01      	ldr	r2, [sp, #4]
 8009a0e:	4605      	mov	r5, r0
 8009a10:	b930      	cbnz	r0, 8009a20 <_calloc_r+0x24>
 8009a12:	4628      	mov	r0, r5
 8009a14:	b003      	add	sp, #12
 8009a16:	bd30      	pop	{r4, r5, pc}
 8009a18:	220c      	movs	r2, #12
 8009a1a:	6002      	str	r2, [r0, #0]
 8009a1c:	2500      	movs	r5, #0
 8009a1e:	e7f8      	b.n	8009a12 <_calloc_r+0x16>
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7fd fdda 	bl	80075da <memset>
 8009a26:	e7f4      	b.n	8009a12 <_calloc_r+0x16>

08009a28 <__sfputc_r>:
 8009a28:	6893      	ldr	r3, [r2, #8]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	b410      	push	{r4}
 8009a30:	6093      	str	r3, [r2, #8]
 8009a32:	da08      	bge.n	8009a46 <__sfputc_r+0x1e>
 8009a34:	6994      	ldr	r4, [r2, #24]
 8009a36:	42a3      	cmp	r3, r4
 8009a38:	db01      	blt.n	8009a3e <__sfputc_r+0x16>
 8009a3a:	290a      	cmp	r1, #10
 8009a3c:	d103      	bne.n	8009a46 <__sfputc_r+0x1e>
 8009a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a42:	f7fe bc69 	b.w	8008318 <__swbuf_r>
 8009a46:	6813      	ldr	r3, [r2, #0]
 8009a48:	1c58      	adds	r0, r3, #1
 8009a4a:	6010      	str	r0, [r2, #0]
 8009a4c:	7019      	strb	r1, [r3, #0]
 8009a4e:	4608      	mov	r0, r1
 8009a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <__sfputs_r>:
 8009a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a58:	4606      	mov	r6, r0
 8009a5a:	460f      	mov	r7, r1
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	18d5      	adds	r5, r2, r3
 8009a60:	42ac      	cmp	r4, r5
 8009a62:	d101      	bne.n	8009a68 <__sfputs_r+0x12>
 8009a64:	2000      	movs	r0, #0
 8009a66:	e007      	b.n	8009a78 <__sfputs_r+0x22>
 8009a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6c:	463a      	mov	r2, r7
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ffda 	bl	8009a28 <__sfputc_r>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d1f3      	bne.n	8009a60 <__sfputs_r+0xa>
 8009a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a7c <_vfiprintf_r>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	460d      	mov	r5, r1
 8009a82:	b09d      	sub	sp, #116	; 0x74
 8009a84:	4614      	mov	r4, r2
 8009a86:	4698      	mov	r8, r3
 8009a88:	4606      	mov	r6, r0
 8009a8a:	b118      	cbz	r0, 8009a94 <_vfiprintf_r+0x18>
 8009a8c:	6983      	ldr	r3, [r0, #24]
 8009a8e:	b90b      	cbnz	r3, 8009a94 <_vfiprintf_r+0x18>
 8009a90:	f7fd fcd0 	bl	8007434 <__sinit>
 8009a94:	4b89      	ldr	r3, [pc, #548]	; (8009cbc <_vfiprintf_r+0x240>)
 8009a96:	429d      	cmp	r5, r3
 8009a98:	d11b      	bne.n	8009ad2 <_vfiprintf_r+0x56>
 8009a9a:	6875      	ldr	r5, [r6, #4]
 8009a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a9e:	07d9      	lsls	r1, r3, #31
 8009aa0:	d405      	bmi.n	8009aae <_vfiprintf_r+0x32>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	059a      	lsls	r2, r3, #22
 8009aa6:	d402      	bmi.n	8009aae <_vfiprintf_r+0x32>
 8009aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aaa:	f7fd fd86 	bl	80075ba <__retarget_lock_acquire_recursive>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	071b      	lsls	r3, r3, #28
 8009ab2:	d501      	bpl.n	8009ab8 <_vfiprintf_r+0x3c>
 8009ab4:	692b      	ldr	r3, [r5, #16]
 8009ab6:	b9eb      	cbnz	r3, 8009af4 <_vfiprintf_r+0x78>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7fe fc90 	bl	80083e0 <__swsetup_r>
 8009ac0:	b1c0      	cbz	r0, 8009af4 <_vfiprintf_r+0x78>
 8009ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac4:	07dc      	lsls	r4, r3, #31
 8009ac6:	d50e      	bpl.n	8009ae6 <_vfiprintf_r+0x6a>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	b01d      	add	sp, #116	; 0x74
 8009ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad2:	4b7b      	ldr	r3, [pc, #492]	; (8009cc0 <_vfiprintf_r+0x244>)
 8009ad4:	429d      	cmp	r5, r3
 8009ad6:	d101      	bne.n	8009adc <_vfiprintf_r+0x60>
 8009ad8:	68b5      	ldr	r5, [r6, #8]
 8009ada:	e7df      	b.n	8009a9c <_vfiprintf_r+0x20>
 8009adc:	4b79      	ldr	r3, [pc, #484]	; (8009cc4 <_vfiprintf_r+0x248>)
 8009ade:	429d      	cmp	r5, r3
 8009ae0:	bf08      	it	eq
 8009ae2:	68f5      	ldreq	r5, [r6, #12]
 8009ae4:	e7da      	b.n	8009a9c <_vfiprintf_r+0x20>
 8009ae6:	89ab      	ldrh	r3, [r5, #12]
 8009ae8:	0598      	lsls	r0, r3, #22
 8009aea:	d4ed      	bmi.n	8009ac8 <_vfiprintf_r+0x4c>
 8009aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aee:	f7fd fd65 	bl	80075bc <__retarget_lock_release_recursive>
 8009af2:	e7e9      	b.n	8009ac8 <_vfiprintf_r+0x4c>
 8009af4:	2300      	movs	r3, #0
 8009af6:	9309      	str	r3, [sp, #36]	; 0x24
 8009af8:	2320      	movs	r3, #32
 8009afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b02:	2330      	movs	r3, #48	; 0x30
 8009b04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cc8 <_vfiprintf_r+0x24c>
 8009b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b0c:	f04f 0901 	mov.w	r9, #1
 8009b10:	4623      	mov	r3, r4
 8009b12:	469a      	mov	sl, r3
 8009b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b18:	b10a      	cbz	r2, 8009b1e <_vfiprintf_r+0xa2>
 8009b1a:	2a25      	cmp	r2, #37	; 0x25
 8009b1c:	d1f9      	bne.n	8009b12 <_vfiprintf_r+0x96>
 8009b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b22:	d00b      	beq.n	8009b3c <_vfiprintf_r+0xc0>
 8009b24:	465b      	mov	r3, fp
 8009b26:	4622      	mov	r2, r4
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7ff ff93 	bl	8009a56 <__sfputs_r>
 8009b30:	3001      	adds	r0, #1
 8009b32:	f000 80aa 	beq.w	8009c8a <_vfiprintf_r+0x20e>
 8009b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b38:	445a      	add	r2, fp
 8009b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80a2 	beq.w	8009c8a <_vfiprintf_r+0x20e>
 8009b46:	2300      	movs	r3, #0
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b50:	f10a 0a01 	add.w	sl, sl, #1
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b5e:	4654      	mov	r4, sl
 8009b60:	2205      	movs	r2, #5
 8009b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b66:	4858      	ldr	r0, [pc, #352]	; (8009cc8 <_vfiprintf_r+0x24c>)
 8009b68:	f7f6 fb42 	bl	80001f0 <memchr>
 8009b6c:	9a04      	ldr	r2, [sp, #16]
 8009b6e:	b9d8      	cbnz	r0, 8009ba8 <_vfiprintf_r+0x12c>
 8009b70:	06d1      	lsls	r1, r2, #27
 8009b72:	bf44      	itt	mi
 8009b74:	2320      	movmi	r3, #32
 8009b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b7a:	0713      	lsls	r3, r2, #28
 8009b7c:	bf44      	itt	mi
 8009b7e:	232b      	movmi	r3, #43	; 0x2b
 8009b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b84:	f89a 3000 	ldrb.w	r3, [sl]
 8009b88:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8a:	d015      	beq.n	8009bb8 <_vfiprintf_r+0x13c>
 8009b8c:	9a07      	ldr	r2, [sp, #28]
 8009b8e:	4654      	mov	r4, sl
 8009b90:	2000      	movs	r0, #0
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4621      	mov	r1, r4
 8009b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b9c:	3b30      	subs	r3, #48	; 0x30
 8009b9e:	2b09      	cmp	r3, #9
 8009ba0:	d94e      	bls.n	8009c40 <_vfiprintf_r+0x1c4>
 8009ba2:	b1b0      	cbz	r0, 8009bd2 <_vfiprintf_r+0x156>
 8009ba4:	9207      	str	r2, [sp, #28]
 8009ba6:	e014      	b.n	8009bd2 <_vfiprintf_r+0x156>
 8009ba8:	eba0 0308 	sub.w	r3, r0, r8
 8009bac:	fa09 f303 	lsl.w	r3, r9, r3
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	46a2      	mov	sl, r4
 8009bb6:	e7d2      	b.n	8009b5e <_vfiprintf_r+0xe2>
 8009bb8:	9b03      	ldr	r3, [sp, #12]
 8009bba:	1d19      	adds	r1, r3, #4
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	9103      	str	r1, [sp, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	bfbb      	ittet	lt
 8009bc4:	425b      	neglt	r3, r3
 8009bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bca:	9307      	strge	r3, [sp, #28]
 8009bcc:	9307      	strlt	r3, [sp, #28]
 8009bce:	bfb8      	it	lt
 8009bd0:	9204      	strlt	r2, [sp, #16]
 8009bd2:	7823      	ldrb	r3, [r4, #0]
 8009bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8009bd6:	d10c      	bne.n	8009bf2 <_vfiprintf_r+0x176>
 8009bd8:	7863      	ldrb	r3, [r4, #1]
 8009bda:	2b2a      	cmp	r3, #42	; 0x2a
 8009bdc:	d135      	bne.n	8009c4a <_vfiprintf_r+0x1ce>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	1d1a      	adds	r2, r3, #4
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	9203      	str	r2, [sp, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bfb8      	it	lt
 8009bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bee:	3402      	adds	r4, #2
 8009bf0:	9305      	str	r3, [sp, #20]
 8009bf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cd8 <_vfiprintf_r+0x25c>
 8009bf6:	7821      	ldrb	r1, [r4, #0]
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	4650      	mov	r0, sl
 8009bfc:	f7f6 faf8 	bl	80001f0 <memchr>
 8009c00:	b140      	cbz	r0, 8009c14 <_vfiprintf_r+0x198>
 8009c02:	2340      	movs	r3, #64	; 0x40
 8009c04:	eba0 000a 	sub.w	r0, r0, sl
 8009c08:	fa03 f000 	lsl.w	r0, r3, r0
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	4303      	orrs	r3, r0
 8009c10:	3401      	adds	r4, #1
 8009c12:	9304      	str	r3, [sp, #16]
 8009c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c18:	482c      	ldr	r0, [pc, #176]	; (8009ccc <_vfiprintf_r+0x250>)
 8009c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c1e:	2206      	movs	r2, #6
 8009c20:	f7f6 fae6 	bl	80001f0 <memchr>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d03f      	beq.n	8009ca8 <_vfiprintf_r+0x22c>
 8009c28:	4b29      	ldr	r3, [pc, #164]	; (8009cd0 <_vfiprintf_r+0x254>)
 8009c2a:	bb1b      	cbnz	r3, 8009c74 <_vfiprintf_r+0x1f8>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	3307      	adds	r3, #7
 8009c30:	f023 0307 	bic.w	r3, r3, #7
 8009c34:	3308      	adds	r3, #8
 8009c36:	9303      	str	r3, [sp, #12]
 8009c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3a:	443b      	add	r3, r7
 8009c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3e:	e767      	b.n	8009b10 <_vfiprintf_r+0x94>
 8009c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c44:	460c      	mov	r4, r1
 8009c46:	2001      	movs	r0, #1
 8009c48:	e7a5      	b.n	8009b96 <_vfiprintf_r+0x11a>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	3401      	adds	r4, #1
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f04f 0c0a 	mov.w	ip, #10
 8009c56:	4620      	mov	r0, r4
 8009c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c5c:	3a30      	subs	r2, #48	; 0x30
 8009c5e:	2a09      	cmp	r2, #9
 8009c60:	d903      	bls.n	8009c6a <_vfiprintf_r+0x1ee>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0c5      	beq.n	8009bf2 <_vfiprintf_r+0x176>
 8009c66:	9105      	str	r1, [sp, #20]
 8009c68:	e7c3      	b.n	8009bf2 <_vfiprintf_r+0x176>
 8009c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c6e:	4604      	mov	r4, r0
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7f0      	b.n	8009c56 <_vfiprintf_r+0x1da>
 8009c74:	ab03      	add	r3, sp, #12
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4b16      	ldr	r3, [pc, #88]	; (8009cd4 <_vfiprintf_r+0x258>)
 8009c7c:	a904      	add	r1, sp, #16
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f7fd fe34 	bl	80078ec <_printf_float>
 8009c84:	4607      	mov	r7, r0
 8009c86:	1c78      	adds	r0, r7, #1
 8009c88:	d1d6      	bne.n	8009c38 <_vfiprintf_r+0x1bc>
 8009c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c8c:	07d9      	lsls	r1, r3, #31
 8009c8e:	d405      	bmi.n	8009c9c <_vfiprintf_r+0x220>
 8009c90:	89ab      	ldrh	r3, [r5, #12]
 8009c92:	059a      	lsls	r2, r3, #22
 8009c94:	d402      	bmi.n	8009c9c <_vfiprintf_r+0x220>
 8009c96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c98:	f7fd fc90 	bl	80075bc <__retarget_lock_release_recursive>
 8009c9c:	89ab      	ldrh	r3, [r5, #12]
 8009c9e:	065b      	lsls	r3, r3, #25
 8009ca0:	f53f af12 	bmi.w	8009ac8 <_vfiprintf_r+0x4c>
 8009ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ca6:	e711      	b.n	8009acc <_vfiprintf_r+0x50>
 8009ca8:	ab03      	add	r3, sp, #12
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	462a      	mov	r2, r5
 8009cae:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <_vfiprintf_r+0x258>)
 8009cb0:	a904      	add	r1, sp, #16
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7fe f8be 	bl	8007e34 <_printf_i>
 8009cb8:	e7e4      	b.n	8009c84 <_vfiprintf_r+0x208>
 8009cba:	bf00      	nop
 8009cbc:	0800a014 	.word	0x0800a014
 8009cc0:	0800a034 	.word	0x0800a034
 8009cc4:	08009ff4 	.word	0x08009ff4
 8009cc8:	0800a274 	.word	0x0800a274
 8009ccc:	0800a27e 	.word	0x0800a27e
 8009cd0:	080078ed 	.word	0x080078ed
 8009cd4:	08009a57 	.word	0x08009a57
 8009cd8:	0800a27a 	.word	0x0800a27a

08009cdc <_read_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	; (8009cfc <_read_r+0x20>)
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	4608      	mov	r0, r1
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	602a      	str	r2, [r5, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f7f8 f9ee 	bl	80020cc <_read>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_read_r+0x1e>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_read_r+0x1e>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	20014aac 	.word	0x20014aac

08009d00 <__assert_func>:
 8009d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d02:	4614      	mov	r4, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <__assert_func+0x2c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	68d8      	ldr	r0, [r3, #12]
 8009d0e:	b14c      	cbz	r4, 8009d24 <__assert_func+0x24>
 8009d10:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <__assert_func+0x30>)
 8009d12:	9100      	str	r1, [sp, #0]
 8009d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d18:	4906      	ldr	r1, [pc, #24]	; (8009d34 <__assert_func+0x34>)
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	f000 f80e 	bl	8009d3c <fiprintf>
 8009d20:	f000 f85f 	bl	8009de2 <abort>
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <__assert_func+0x38>)
 8009d26:	461c      	mov	r4, r3
 8009d28:	e7f3      	b.n	8009d12 <__assert_func+0x12>
 8009d2a:	bf00      	nop
 8009d2c:	20000014 	.word	0x20000014
 8009d30:	0800a285 	.word	0x0800a285
 8009d34:	0800a292 	.word	0x0800a292
 8009d38:	0800a2c0 	.word	0x0800a2c0

08009d3c <fiprintf>:
 8009d3c:	b40e      	push	{r1, r2, r3}
 8009d3e:	b503      	push	{r0, r1, lr}
 8009d40:	4601      	mov	r1, r0
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <fiprintf+0x20>)
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f7ff fe95 	bl	8009a7c <_vfiprintf_r>
 8009d52:	b002      	add	sp, #8
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	20000014 	.word	0x20000014

08009d60 <_fstat_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d07      	ldr	r5, [pc, #28]	; (8009d80 <_fstat_r+0x20>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f7f8 f9d6 	bl	800211e <_fstat>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d102      	bne.n	8009d7c <_fstat_r+0x1c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b103      	cbz	r3, 8009d7c <_fstat_r+0x1c>
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	20014aac 	.word	0x20014aac

08009d84 <_isatty_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4d06      	ldr	r5, [pc, #24]	; (8009da0 <_isatty_r+0x1c>)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	f7f8 f9d5 	bl	800213e <_isatty>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_isatty_r+0x1a>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_isatty_r+0x1a>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20014aac 	.word	0x20014aac

08009da4 <__ascii_mbtowc>:
 8009da4:	b082      	sub	sp, #8
 8009da6:	b901      	cbnz	r1, 8009daa <__ascii_mbtowc+0x6>
 8009da8:	a901      	add	r1, sp, #4
 8009daa:	b142      	cbz	r2, 8009dbe <__ascii_mbtowc+0x1a>
 8009dac:	b14b      	cbz	r3, 8009dc2 <__ascii_mbtowc+0x1e>
 8009dae:	7813      	ldrb	r3, [r2, #0]
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	7812      	ldrb	r2, [r2, #0]
 8009db4:	1e10      	subs	r0, r2, #0
 8009db6:	bf18      	it	ne
 8009db8:	2001      	movne	r0, #1
 8009dba:	b002      	add	sp, #8
 8009dbc:	4770      	bx	lr
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	e7fb      	b.n	8009dba <__ascii_mbtowc+0x16>
 8009dc2:	f06f 0001 	mvn.w	r0, #1
 8009dc6:	e7f8      	b.n	8009dba <__ascii_mbtowc+0x16>

08009dc8 <__ascii_wctomb>:
 8009dc8:	b149      	cbz	r1, 8009dde <__ascii_wctomb+0x16>
 8009dca:	2aff      	cmp	r2, #255	; 0xff
 8009dcc:	bf85      	ittet	hi
 8009dce:	238a      	movhi	r3, #138	; 0x8a
 8009dd0:	6003      	strhi	r3, [r0, #0]
 8009dd2:	700a      	strbls	r2, [r1, #0]
 8009dd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009dd8:	bf98      	it	ls
 8009dda:	2001      	movls	r0, #1
 8009ddc:	4770      	bx	lr
 8009dde:	4608      	mov	r0, r1
 8009de0:	4770      	bx	lr

08009de2 <abort>:
 8009de2:	b508      	push	{r3, lr}
 8009de4:	2006      	movs	r0, #6
 8009de6:	f000 f82b 	bl	8009e40 <raise>
 8009dea:	2001      	movs	r0, #1
 8009dec:	f7f8 f964 	bl	80020b8 <_exit>

08009df0 <_raise_r>:
 8009df0:	291f      	cmp	r1, #31
 8009df2:	b538      	push	{r3, r4, r5, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	460d      	mov	r5, r1
 8009df8:	d904      	bls.n	8009e04 <_raise_r+0x14>
 8009dfa:	2316      	movs	r3, #22
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e06:	b112      	cbz	r2, 8009e0e <_raise_r+0x1e>
 8009e08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e0c:	b94b      	cbnz	r3, 8009e22 <_raise_r+0x32>
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 f830 	bl	8009e74 <_getpid_r>
 8009e14:	462a      	mov	r2, r5
 8009e16:	4601      	mov	r1, r0
 8009e18:	4620      	mov	r0, r4
 8009e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e1e:	f000 b817 	b.w	8009e50 <_kill_r>
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d00a      	beq.n	8009e3c <_raise_r+0x4c>
 8009e26:	1c59      	adds	r1, r3, #1
 8009e28:	d103      	bne.n	8009e32 <_raise_r+0x42>
 8009e2a:	2316      	movs	r3, #22
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e7e7      	b.n	8009e02 <_raise_r+0x12>
 8009e32:	2400      	movs	r4, #0
 8009e34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e38:	4628      	mov	r0, r5
 8009e3a:	4798      	blx	r3
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e7e0      	b.n	8009e02 <_raise_r+0x12>

08009e40 <raise>:
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <raise+0xc>)
 8009e42:	4601      	mov	r1, r0
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f7ff bfd3 	b.w	8009df0 <_raise_r>
 8009e4a:	bf00      	nop
 8009e4c:	20000014 	.word	0x20000014

08009e50 <_kill_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_kill_r+0x20>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	602b      	str	r3, [r5, #0]
 8009e5e:	f7f8 f91b 	bl	8002098 <_kill>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d102      	bne.n	8009e6c <_kill_r+0x1c>
 8009e66:	682b      	ldr	r3, [r5, #0]
 8009e68:	b103      	cbz	r3, 8009e6c <_kill_r+0x1c>
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	bd38      	pop	{r3, r4, r5, pc}
 8009e6e:	bf00      	nop
 8009e70:	20014aac 	.word	0x20014aac

08009e74 <_getpid_r>:
 8009e74:	f7f8 b908 	b.w	8002088 <_getpid>

08009e78 <_init>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr

08009e84 <_fini>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr
