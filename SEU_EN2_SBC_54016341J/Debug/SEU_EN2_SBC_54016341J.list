
SEU_EN2_SBC_54016341J.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  0800d360  0800d360  0001d360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de04  0800de04  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800de04  0800de04  0001de04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de0c  0800de0c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800de14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000158e4  200001f0  0800e004  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015ad4  0800e004  00025ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbc9  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000419e  00000000  00000000  0003bde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00041510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007251  00000000  00000000  00042978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6eb  00000000  00000000  00049bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d5d  00000000  00000000  000642b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  00105064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d344 	.word	0x0800d344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800d344 	.word	0x0800d344

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b9aa 	b.w	8000f84 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f83c 	bl	8000cb4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__aeabi_d2ulz+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_dmul>
 8000c86:	f7ff ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc52 	bl	8000534 <__aeabi_ui2d>
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f7ff fcc8 	bl	8000628 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fb0a 	bl	80002b8 <__aeabi_dsub>
 8000ca4:	f7ff ff98 	bl	8000bd8 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <__udivmoddi4>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	9d08      	ldr	r5, [sp, #32]
 8000cba:	4604      	mov	r4, r0
 8000cbc:	468e      	mov	lr, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d14d      	bne.n	8000d5e <__udivmoddi4+0xaa>
 8000cc2:	428a      	cmp	r2, r1
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	d969      	bls.n	8000d9c <__udivmoddi4+0xe8>
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	b152      	cbz	r2, 8000ce4 <__udivmoddi4+0x30>
 8000cce:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd2:	f1c2 0120 	rsb	r1, r2, #32
 8000cd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cde:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce2:	4094      	lsls	r4, r2
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	0c21      	lsrs	r1, r4, #16
 8000cea:	fbbe f6f8 	udiv	r6, lr, r8
 8000cee:	fa1f f78c 	uxth.w	r7, ip
 8000cf2:	fb08 e316 	mls	r3, r8, r6, lr
 8000cf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfa:	fb06 f107 	mul.w	r1, r6, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x64>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 811f 	bcs.w	8000f4c <__udivmoddi4+0x298>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 811c 	bls.w	8000f4c <__udivmoddi4+0x298>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 f707 	mul.w	r7, r0, r7
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x92>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x29c>
 8000d3c:	42a7      	cmp	r7, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x29c>
 8000d42:	4464      	add	r4, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	1be4      	subs	r4, r4, r7
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa4>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xc2>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80ef 	beq.w	8000f46 <__udivmoddi4+0x292>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x160>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd4>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80f9 	bhi.w	8000f7a <__udivmoddi4+0x2c6>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	469e      	mov	lr, r3
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa4>
 8000d96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa4>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xec>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 8092 	bne.w	8000ece <__udivmoddi4+0x21a>
 8000daa:	eba1 010c 	sub.w	r1, r1, ip
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb0e f003 	mul.w	r0, lr, r3
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x12c>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x12a>
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2c0>
 8000dde:	4643      	mov	r3, r8
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x156>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x154>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2ca>
 8000e08:	4608      	mov	r0, r1
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x9a>
 8000e14:	f1c6 0720 	rsb	r7, r6, #32
 8000e18:	40b3      	lsls	r3, r6
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa20 f407 	lsr.w	r4, r0, r7
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	40f9      	lsrs	r1, r7
 8000e2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e32:	fa00 f306 	lsl.w	r3, r0, r6
 8000e36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3a:	0c20      	lsrs	r0, r4, #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fb09 1118 	mls	r1, r9, r8, r1
 8000e44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e48:	fb08 f00e 	mul.w	r0, r8, lr
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b8>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2bc>
 8000e60:	4288      	cmp	r0, r1
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2bc>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1a09      	subs	r1, r1, r0
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e74:	fb09 1110 	mls	r1, r9, r0, r1
 8000e78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e80:	458e      	cmp	lr, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1e2>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2b4>
 8000e8e:	458e      	cmp	lr, r1
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2b4>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ea2:	42a1      	cmp	r1, r4
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46a6      	mov	lr, r4
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x2a4>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x2a0>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x212>
 8000eae:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000eb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eba:	fa22 f306 	lsr.w	r3, r2, r6
 8000ebe:	40f1      	lsrs	r1, r6
 8000ec0:	431f      	orrs	r7, r3
 8000ec2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	f1c2 0320 	rsb	r3, r2, #32
 8000ed2:	40d8      	lsrs	r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa21 f303 	lsr.w	r3, r1, r3
 8000edc:	4091      	lsls	r1, r2
 8000ede:	4301      	orrs	r1, r0
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eec:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef0:	0c0b      	lsrs	r3, r1, #16
 8000ef2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ef6:	fb00 f60e 	mul.w	r6, r0, lr
 8000efa:	429e      	cmp	r6, r3
 8000efc:	fa04 f402 	lsl.w	r4, r4, r2
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x260>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b8>
 8000f0c:	429e      	cmp	r6, r3
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b8>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1b9b      	subs	r3, r3, r6
 8000f16:	b289      	uxth	r1, r1
 8000f18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f24:	fb06 f30e 	mul.w	r3, r6, lr
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x28a>
 8000f2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2b0>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2b0>
 8000f3a:	3e02      	subs	r6, #2
 8000f3c:	4461      	add	r1, ip
 8000f3e:	1ac9      	subs	r1, r1, r3
 8000f40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0x104>
 8000f46:	462e      	mov	r6, r5
 8000f48:	4628      	mov	r0, r5
 8000f4a:	e705      	b.n	8000d58 <__udivmoddi4+0xa4>
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	e6e3      	b.n	8000d18 <__udivmoddi4+0x64>
 8000f50:	4618      	mov	r0, r3
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x92>
 8000f54:	454b      	cmp	r3, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f8>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f8>
 8000f64:	4646      	mov	r6, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x28a>
 8000f68:	4620      	mov	r0, r4
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1e2>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x260>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b8>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	4461      	add	r1, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x12c>
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	e709      	b.n	8000d92 <__udivmoddi4+0xde>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x156>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <case_insensitive_strcmp+0x16>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e056      	b.n	8001050 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d10d      	bne.n	8000fc6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e050      	b.n	8001050 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e04a      	b.n	8001050 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <case_insensitive_strcmp+0xd4>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <case_insensitive_strcmp+0x5e>
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f103 0220 	add.w	r2, r3, #32
 8000fe4:	e000      	b.n	8000fe8 <case_insensitive_strcmp+0x60>
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	73bb      	strb	r3, [r7, #14]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	491a      	ldr	r1, [pc, #104]	; (800105c <case_insensitive_strcmp+0xd4>)
 8000ff4:	440b      	add	r3, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d102      	bne.n	8001006 <case_insensitive_strcmp+0x7e>
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	3320      	adds	r3, #32
 8001004:	e000      	b.n	8001008 <case_insensitive_strcmp+0x80>
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	429a      	cmp	r2, r3
 800100a:	d0d0      	beq.n	8000fae <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	737b      	strb	r3, [r7, #13]
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	3301      	adds	r3, #1
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <case_insensitive_strcmp+0xd4>)
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d103      	bne.n	800102c <case_insensitive_strcmp+0xa4>
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	f103 0220 	add.w	r2, r3, #32
 800102a:	e000      	b.n	800102e <case_insensitive_strcmp+0xa6>
 800102c:	7b7a      	ldrb	r2, [r7, #13]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	733b      	strb	r3, [r7, #12]
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	4908      	ldr	r1, [pc, #32]	; (800105c <case_insensitive_strcmp+0xd4>)
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <case_insensitive_strcmp+0xc4>
 8001046:	7b3b      	ldrb	r3, [r7, #12]
 8001048:	3320      	adds	r3, #32
 800104a:	e000      	b.n	800104e <case_insensitive_strcmp+0xc6>
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	1ad3      	subs	r3, r2, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	0800d960 	.word	0x0800d960

08001060 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <cJSON_strdup+0x1c>
    {
        return NULL;
 8001078:	2300      	movs	r3, #0
 800107a:	e015      	b.n	80010a8 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff f8b9 	bl	80001f4 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	3301      	adds	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	4798      	blx	r3
 8001090:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <cJSON_strdup+0x3c>
    {
        return NULL;
 8001098:	2300      	movs	r3, #0
 800109a:	e005      	b.n	80010a8 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	68b8      	ldr	r0, [r7, #8]
 80010a2:	f008 f82d 	bl	8009100 <memcpy>

    return copy;
 80010a6:	68bb      	ldr	r3, [r7, #8]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	4798      	blx	r3
 80010c0:	60f8      	str	r0, [r7, #12]
    if (node)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010c8:	2228      	movs	r2, #40	; 0x28
 80010ca:	2100      	movs	r1, #0
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f008 f825 	bl	800911c <memset>
    }

    return node;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010e8:	e037      	b.n	800115a <cJSON_Delete+0x7e>
    {
        next = item->next;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d108      	bne.n	800110e <cJSON_Delete+0x32>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ffe7 	bl	80010dc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <cJSON_Delete+0x52>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <cJSON_Delete+0x90>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6912      	ldr	r2, [r2, #16]
 800112a:	4610      	mov	r0, r2
 800112c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <cJSON_Delete+0x72>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <cJSON_Delete+0x90>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6a12      	ldr	r2, [r2, #32]
 800114a:	4610      	mov	r0, r2
 800114c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <cJSON_Delete+0x90>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
        item = next;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1c4      	bne.n	80010ea <cJSON_Delete+0xe>
    }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001174:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b098      	sub	sp, #96	; 0x60
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    double number = 0;
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001196:	2300      	movs	r3, #0
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800119a:	f7ff ffe9 	bl	8001170 <get_decimal_point>
 800119e:	4603      	mov	r3, r0
 80011a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <parse_number+0x36>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <parse_number+0x3a>
    {
        return false;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e0c6      	b.n	8001348 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011be:	e063      	b.n	8001288 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6899      	ldr	r1, [r3, #8]
 80011c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ca:	440b      	add	r3, r1
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b45      	cmp	r3, #69	; 0x45
 80011d2:	dc3d      	bgt.n	8001250 <parse_number+0xd0>
 80011d4:	2b2b      	cmp	r3, #43	; 0x2b
 80011d6:	db66      	blt.n	80012a6 <parse_number+0x126>
 80011d8:	3b2b      	subs	r3, #43	; 0x2b
 80011da:	2b1a      	cmp	r3, #26
 80011dc:	d863      	bhi.n	80012a6 <parse_number+0x126>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <parse_number+0x64>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	08001255 	.word	0x08001255
 80011e8:	080012a7 	.word	0x080012a7
 80011ec:	08001255 	.word	0x08001255
 80011f0:	08001273 	.word	0x08001273
 80011f4:	080012a7 	.word	0x080012a7
 80011f8:	08001255 	.word	0x08001255
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001255 	.word	0x08001255
 8001204:	08001255 	.word	0x08001255
 8001208:	08001255 	.word	0x08001255
 800120c:	08001255 	.word	0x08001255
 8001210:	08001255 	.word	0x08001255
 8001214:	08001255 	.word	0x08001255
 8001218:	08001255 	.word	0x08001255
 800121c:	08001255 	.word	0x08001255
 8001220:	080012a7 	.word	0x080012a7
 8001224:	080012a7 	.word	0x080012a7
 8001228:	080012a7 	.word	0x080012a7
 800122c:	080012a7 	.word	0x080012a7
 8001230:	080012a7 	.word	0x080012a7
 8001234:	080012a7 	.word	0x080012a7
 8001238:	080012a7 	.word	0x080012a7
 800123c:	080012a7 	.word	0x080012a7
 8001240:	080012a7 	.word	0x080012a7
 8001244:	080012a7 	.word	0x080012a7
 8001248:	080012a7 	.word	0x080012a7
 800124c:	08001255 	.word	0x08001255
 8001250:	2b65      	cmp	r3, #101	; 0x65
 8001252:	d128      	bne.n	80012a6 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6899      	ldr	r1, [r3, #8]
 800125c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125e:	440b      	add	r3, r1
 8001260:	4413      	add	r3, r2
 8001262:	7819      	ldrb	r1, [r3, #0]
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126a:	4413      	add	r3, r2
 800126c:	460a      	mov	r2, r1
 800126e:	701a      	strb	r2, [r3, #0]
                break;
 8001270:	e007      	b.n	8001282 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001272:	f107 0208 	add.w	r2, r7, #8
 8001276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001278:	4413      	add	r3, r2
 800127a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800127e:	701a      	strb	r2, [r3, #0]
                break;
 8001280:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001284:	3301      	adds	r3, #1
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128a:	2b3e      	cmp	r3, #62	; 0x3e
 800128c:	d80d      	bhi.n	80012aa <parse_number+0x12a>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00a      	beq.n	80012aa <parse_number+0x12a>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129a:	441a      	add	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d38d      	bcc.n	80011c0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80012a4:	e001      	b.n	80012aa <parse_number+0x12a>
                goto loop_end;
 80012a6:	bf00      	nop
 80012a8:	e000      	b.n	80012ac <parse_number+0x12c>
loop_end:
 80012aa:	bf00      	nop
    number_c_string[i] = '\0';
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b2:	4413      	add	r3, r2
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f009 fc06 	bl	800aad4 <strtod>
 80012c8:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80012cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d101      	bne.n	80012da <parse_number+0x15a>
    {
        return false; /* parse_error */
 80012d6:	2300      	movs	r3, #0
 80012d8:	e036      	b.n	8001348 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012e0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012e4:	a31b      	add	r3, pc, #108	; (adr r3, 8001354 <parse_number+0x1d4>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012ee:	f7ff fc21 	bl	8000b34 <__aeabi_dcmpge>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	e015      	b.n	800132e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <parse_number+0x1d0>)
 8001308:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800130c:	f7ff fc08 	bl	8000b20 <__aeabi_dcmple>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	e006      	b.n	800132e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001320:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001324:	f7ff fc30 	bl	8000b88 <__aeabi_d2iz>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2208      	movs	r2, #8
 8001332:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800133a:	f107 0208 	add.w	r2, r7, #8
 800133e:	1a8a      	subs	r2, r1, r2
 8001340:	441a      	add	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	609a      	str	r2, [r3, #8]
    return true;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3760      	adds	r7, #96	; 0x60
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	c1e00000 	.word	0xc1e00000
 8001354:	ffc00000 	.word	0xffc00000
 8001358:	41dfffff 	.word	0x41dfffff

0800135c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	e04c      	b.n	800140c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b2f      	cmp	r3, #47	; 0x2f
 800137c:	d90f      	bls.n	800139e <parse_hex4+0x42>
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b39      	cmp	r3, #57	; 0x39
 8001388:	d809      	bhi.n	800139e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	3b30      	subs	r3, #48	; 0x30
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e02d      	b.n	80013fa <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d90f      	bls.n	80013ca <parse_hex4+0x6e>
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b46      	cmp	r3, #70	; 0x46
 80013b4:	d809      	bhi.n	80013ca <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	3b37      	subs	r3, #55	; 0x37
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e017      	b.n	80013fa <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b60      	cmp	r3, #96	; 0x60
 80013d4:	d90f      	bls.n	80013f6 <parse_hex4+0x9a>
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b66      	cmp	r3, #102	; 0x66
 80013e0:	d809      	bhi.n	80013f6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	3b57      	subs	r3, #87	; 0x57
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e001      	b.n	80013fa <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e00c      	b.n	8001414 <parse_hex4+0xb8>
        }

        if (i < 3)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d802      	bhi.n	8001406 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3301      	adds	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d9af      	bls.n	8001372 <parse_hex4+0x16>
        }
    }

    return h;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b05      	cmp	r3, #5
 8001458:	f340 80b7 	ble.w	80015ca <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3302      	adds	r3, #2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff7b 	bl	800135c <parse_hex4>
 8001466:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800146e:	d304      	bcc.n	800147a <utf16_literal_to_utf8+0x5a>
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001476:	f0c0 80aa 	bcc.w	80015ce <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001480:	d337      	bcc.n	80014f2 <utf16_literal_to_utf8+0xd2>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001488:	d233      	bcs.n	80014f2 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	3306      	adds	r3, #6
 800148e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001494:	230c      	movs	r3, #12
 8001496:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	f340 8096 	ble.w	80015d2 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b5c      	cmp	r3, #92	; 0x5c
 80014ac:	f040 8093 	bne.w	80015d6 <utf16_literal_to_utf8+0x1b6>
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b75      	cmp	r3, #117	; 0x75
 80014b8:	f040 808d 	bne.w	80015d6 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3302      	adds	r3, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff4b 	bl	800135c <parse_hex4>
 80014c6:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80014ce:	f0c0 8084 	bcc.w	80015da <utf16_literal_to_utf8+0x1ba>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80014d8:	d27f      	bcs.n	80015da <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	029a      	lsls	r2, r3, #10
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <utf16_literal_to_utf8+0x1cc>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014e8:	4313      	orrs	r3, r2
 80014ea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80014f0:	e004      	b.n	80014fc <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014f2:	2306      	movs	r3, #6
 80014f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001500:	d803      	bhi.n	800150a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001508:	e01f      	b.n	800154a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001510:	d206      	bcs.n	8001520 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001518:	23c0      	movs	r3, #192	; 0xc0
 800151a:	f887 3020 	strb.w	r3, [r7, #32]
 800151e:	e014      	b.n	800154a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d206      	bcs.n	8001536 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001528:	2303      	movs	r3, #3
 800152a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800152e:	23e0      	movs	r3, #224	; 0xe0
 8001530:	f887 3020 	strb.w	r3, [r7, #32]
 8001534:	e009      	b.n	800154a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800153c:	d24f      	bcs.n	80015de <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800153e:	2304      	movs	r3, #4
 8001540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001544:	23f0      	movs	r3, #240	; 0xf0
 8001546:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800154a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800154e:	3b01      	subs	r3, #1
 8001550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001554:	e015      	b.n	8001582 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800155e:	b2da      	uxtb	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001568:	440b      	add	r3, r1
 800156a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001578:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800157c:	3b01      	subs	r3, #1
 800157e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001582:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e5      	bne.n	8001556 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800158a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800158e:	2b01      	cmp	r3, #1
 8001590:	d909      	bls.n	80015a6 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	b2d9      	uxtb	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800159e:	430a      	orrs	r2, r1
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e007      	b.n	80015b6 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015be:	441a      	add	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015c8:	e00b      	b.n	80015e2 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015ca:	bf00      	nop
 80015cc:	e008      	b.n	80015e0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015ce:	bf00      	nop
 80015d0:	e006      	b.n	80015e0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015d2:	bf00      	nop
 80015d4:	e004      	b.n	80015e0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015d6:	bf00      	nop
 80015d8:	e002      	b.n	80015e0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015da:	bf00      	nop
 80015dc:	e000      	b.n	80015e0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015de:	bf00      	nop

fail:
    return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	000ffc00 	.word	0x000ffc00

080015f0 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	3301      	adds	r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	3301      	adds	r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b22      	cmp	r3, #34	; 0x22
 800162c:	f040 8102 	bne.w	8001834 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001638:	e017      	b.n	800166a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b5c      	cmp	r3, #92	; 0x5c
 8001640:	d110      	bne.n	8001664 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	f080 80f0 	bcs.w	8001838 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	3301      	adds	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
                input_end++;
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	3301      	adds	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	3301      	adds	r3, #1
 8001668:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a3a      	ldr	r2, [r7, #32]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	d203      	bcs.n	8001684 <parse_string+0x94>
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b22      	cmp	r3, #34	; 0x22
 8001682:	d1da      	bne.n	800163a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a3a      	ldr	r2, [r7, #32]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	461a      	mov	r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	f080 80d2 	bcs.w	800183c <parse_string+0x24c>
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b22      	cmp	r3, #34	; 0x22
 800169e:	f040 80cd 	bne.w	800183c <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	3201      	adds	r2, #1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4798      	blx	r3
 80016c4:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80b9 	beq.w	8001840 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016d2:	e093      	b.n	80017fc <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b5c      	cmp	r3, #92	; 0x5c
 80016da:	d008      	beq.n	80016ee <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	1c53      	adds	r3, r2, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	60f9      	str	r1, [r7, #12]
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e086      	b.n	80017fc <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016f2:	6a3a      	ldr	r2, [r7, #32]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f340 80a3 	ble.w	8001844 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3301      	adds	r3, #1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b75      	cmp	r3, #117	; 0x75
 8001706:	f300 809f 	bgt.w	8001848 <parse_string+0x258>
 800170a:	2b5c      	cmp	r3, #92	; 0x5c
 800170c:	da04      	bge.n	8001718 <parse_string+0x128>
 800170e:	2b22      	cmp	r3, #34	; 0x22
 8001710:	d05c      	beq.n	80017cc <parse_string+0x1dc>
 8001712:	2b2f      	cmp	r3, #47	; 0x2f
 8001714:	d05a      	beq.n	80017cc <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001716:	e097      	b.n	8001848 <parse_string+0x258>
            switch (input_pointer[1])
 8001718:	3b5c      	subs	r3, #92	; 0x5c
 800171a:	2b19      	cmp	r3, #25
 800171c:	f200 8094 	bhi.w	8001848 <parse_string+0x258>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <parse_string+0x138>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	080017cd 	.word	0x080017cd
 800172c:	08001849 	.word	0x08001849
 8001730:	08001849 	.word	0x08001849
 8001734:	08001849 	.word	0x08001849
 8001738:	08001849 	.word	0x08001849
 800173c:	08001849 	.word	0x08001849
 8001740:	08001791 	.word	0x08001791
 8001744:	08001849 	.word	0x08001849
 8001748:	08001849 	.word	0x08001849
 800174c:	08001849 	.word	0x08001849
 8001750:	0800179d 	.word	0x0800179d
 8001754:	08001849 	.word	0x08001849
 8001758:	08001849 	.word	0x08001849
 800175c:	08001849 	.word	0x08001849
 8001760:	08001849 	.word	0x08001849
 8001764:	08001849 	.word	0x08001849
 8001768:	08001849 	.word	0x08001849
 800176c:	08001849 	.word	0x08001849
 8001770:	080017a9 	.word	0x080017a9
 8001774:	08001849 	.word	0x08001849
 8001778:	08001849 	.word	0x08001849
 800177c:	08001849 	.word	0x08001849
 8001780:	080017b5 	.word	0x080017b5
 8001784:	08001849 	.word	0x08001849
 8001788:	080017c1 	.word	0x080017c1
 800178c:	080017db 	.word	0x080017db
                    *output_pointer++ = '\b';
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60fa      	str	r2, [r7, #12]
 8001796:	2208      	movs	r2, #8
 8001798:	701a      	strb	r2, [r3, #0]
                    break;
 800179a:	e02b      	b.n	80017f4 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	220c      	movs	r2, #12
 80017a4:	701a      	strb	r2, [r3, #0]
                    break;
 80017a6:	e025      	b.n	80017f4 <parse_string+0x204>
                    *output_pointer++ = '\n';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	220a      	movs	r2, #10
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e01f      	b.n	80017f4 <parse_string+0x204>
                    *output_pointer++ = '\r';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220d      	movs	r2, #13
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e019      	b.n	80017f4 <parse_string+0x204>
                    *output_pointer++ = '\t';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	2209      	movs	r2, #9
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e013      	b.n	80017f4 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	7852      	ldrb	r2, [r2, #1]
 80017d6:	701a      	strb	r2, [r3, #0]
                    break;
 80017d8:	e00c      	b.n	80017f4 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	461a      	mov	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017e4:	f7ff fe1c 	bl	8001420 <utf16_literal_to_utf8>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d02c      	beq.n	800184c <parse_string+0x25c>
                    break;
 80017f2:	bf00      	nop
            }
            input_pointer += sequence_length;
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	4413      	add	r3, r2
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80017fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	429a      	cmp	r2, r3
 8001802:	f4ff af67 	bcc.w	80016d4 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2210      	movs	r2, #16
 8001810:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	461a      	mov	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	609a      	str	r2, [r3, #8]

    return true;
 8001830:	2301      	movs	r3, #1
 8001832:	e01e      	b.n	8001872 <parse_string+0x282>
        goto fail;
 8001834:	bf00      	nop
 8001836:	e00a      	b.n	800184e <parse_string+0x25e>
                    goto fail;
 8001838:	bf00      	nop
 800183a:	e008      	b.n	800184e <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800183c:	bf00      	nop
 800183e:	e006      	b.n	800184e <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001840:	bf00      	nop
 8001842:	e004      	b.n	800184e <parse_string+0x25e>
                goto fail;
 8001844:	bf00      	nop
 8001846:	e002      	b.n	800184e <parse_string+0x25e>
                    goto fail;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <parse_string+0x25e>
                        goto fail;
 800184c:	bf00      	nop

fail:
    if (output != NULL)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	69f8      	ldr	r0, [r7, #28]
 800185a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	461a      	mov	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop

0800187c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <buffer_skip_whitespace+0x16>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001892:	2300      	movs	r3, #0
 8001894:	e02c      	b.n	80018f0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <buffer_skip_whitespace+0x2c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d306      	bcc.n	80018b6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	e021      	b.n	80018f0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00d      	beq.n	80018d8 <buffer_skip_whitespace+0x5c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <buffer_skip_whitespace+0x5c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d9e9      	bls.n	80018ac <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d104      	bne.n	80018ee <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <skip_utf8_bom+0x1e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <skip_utf8_bom+0x1e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <skip_utf8_bom+0x22>
    {
        return NULL;
 800191a:	2300      	movs	r3, #0
 800191c:	e01c      	b.n	8001958 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d018      	beq.n	8001956 <skip_utf8_bom+0x5a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	1d1a      	adds	r2, r3, #4
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d211      	bcs.n	8001956 <skip_utf8_bom+0x5a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4413      	add	r3, r2
 800193c:	2203      	movs	r2, #3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <skip_utf8_bom+0x64>)
 8001940:	4618      	mov	r0, r3
 8001942:	f008 fa90 	bl	8009e66 <strncmp>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d104      	bne.n	8001956 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	1cda      	adds	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	0800d398 	.word	0x0800d398

08001964 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001976:	2300      	movs	r3, #0
 8001978:	e00c      	b.n	8001994 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7fe fc3a 	bl	80001f4 <strlen>
 8001980:	4603      	mov	r3, r0
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	6979      	ldr	r1, [r7, #20]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f805 	bl	800199c <cJSON_ParseWithLengthOpts>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d042      	beq.n	8001a5a <cJSON_ParseWithLengthOpts+0xbe>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03f      	beq.n	8001a5a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019e6:	4a39      	ldr	r2, [pc, #228]	; (8001acc <cJSON_ParseWithLengthOpts+0x130>)
 80019e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80019f2:	4836      	ldr	r0, [pc, #216]	; (8001acc <cJSON_ParseWithLengthOpts+0x130>)
 80019f4:	f7ff fb5c 	bl	80010b0 <cJSON_New_Item>
 80019f8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80019fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d02e      	beq.n	8001a5e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff79 	bl	80018fc <skip_utf8_bom>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff35 	bl	800187c <buffer_skip_whitespace>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a18:	f000 f868 	bl	8001aec <parse_value>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01f      	beq.n	8001a62 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff25 	bl	800187c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d215      	bcs.n	8001a66 <cJSON_ParseWithLengthOpts+0xca>
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	441a      	add	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	e031      	b.n	8001abe <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a5a:	bf00      	nop
 8001a5c:	e004      	b.n	8001a68 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a5e:	bf00      	nop
 8001a60:	e002      	b.n	8001a68 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a66:	bf00      	nop

fail:
    if (item != NULL)
 8001a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a70:	f7ff fb34 	bl	80010dc <cJSON_Delete>
    }

    if (value != NULL)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d020      	beq.n	8001abc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d202      	bcs.n	8001a90 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e005      	b.n	8001a9c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ab8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3738      	adds	r7, #56	; 0x38
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000020c 	.word	0x2000020c
 8001acc:	20000000 	.word	0x20000000

08001ad0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff41 	bl	8001964 <cJSON_ParseWithOpts>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <parse_value+0x18>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b04:	2300      	movs	r3, #0
 8001b06:	e0d2      	b.n	8001cae <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01d      	beq.n	8001b4a <parse_value+0x5e>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	1d1a      	adds	r2, r3, #4
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d816      	bhi.n	8001b4a <parse_value+0x5e>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	2204      	movs	r2, #4
 8001b28:	4963      	ldr	r1, [pc, #396]	; (8001cb8 <parse_value+0x1cc>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f008 f99b 	bl	8009e66 <strncmp>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	1d1a      	adds	r2, r3, #4
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	609a      	str	r2, [r3, #8]
        return true;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0b1      	b.n	8001cae <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01d      	beq.n	8001b8c <parse_value+0xa0>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	1d5a      	adds	r2, r3, #5
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d816      	bhi.n	8001b8c <parse_value+0xa0>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4413      	add	r3, r2
 8001b68:	2205      	movs	r2, #5
 8001b6a:	4954      	ldr	r1, [pc, #336]	; (8001cbc <parse_value+0x1d0>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f008 f97a 	bl	8009e66 <strncmp>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	1d5a      	adds	r2, r3, #5
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	609a      	str	r2, [r3, #8]
        return true;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e090      	b.n	8001cae <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d020      	beq.n	8001bd4 <parse_value+0xe8>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	1d1a      	adds	r2, r3, #4
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d819      	bhi.n	8001bd4 <parse_value+0xe8>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2204      	movs	r2, #4
 8001bac:	4944      	ldr	r1, [pc, #272]	; (8001cc0 <parse_value+0x1d4>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f008 f959 	bl	8009e66 <strncmp>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	1d1a      	adds	r2, r3, #4
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	609a      	str	r2, [r3, #8]
        return true;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e06c      	b.n	8001cae <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d013      	beq.n	8001c02 <parse_value+0x116>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d20d      	bcs.n	8001c02 <parse_value+0x116>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b22      	cmp	r3, #34	; 0x22
 8001bf4:	d105      	bne.n	8001c02 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fcf9 	bl	80015f0 <parse_string>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	e055      	b.n	8001cae <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <parse_value+0x164>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d21d      	bcs.n	8001c50 <parse_value+0x164>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b2d      	cmp	r3, #45	; 0x2d
 8001c22:	d00f      	beq.n	8001c44 <parse_value+0x158>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2f      	cmp	r3, #47	; 0x2f
 8001c32:	d90d      	bls.n	8001c50 <parse_value+0x164>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b39      	cmp	r3, #57	; 0x39
 8001c42:	d805      	bhi.n	8001c50 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fa9a 	bl	8001180 <parse_number>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	e02e      	b.n	8001cae <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d013      	beq.n	8001c7e <parse_value+0x192>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20d      	bcs.n	8001c7e <parse_value+0x192>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b5b      	cmp	r3, #91	; 0x5b
 8001c70:	d105      	bne.n	8001c7e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f825 	bl	8001cc4 <parse_array>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	e017      	b.n	8001cae <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <parse_value+0x1c0>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d20d      	bcs.n	8001cac <parse_value+0x1c0>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b7b      	cmp	r3, #123	; 0x7b
 8001c9e:	d105      	bne.n	8001cac <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8d2 	bl	8001e4c <parse_object>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	e000      	b.n	8001cae <parse_value+0x1c2>
    }

    return false;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	0800d36c 	.word	0x0800d36c
 8001cbc:	0800d39c 	.word	0x0800d39c
 8001cc0:	0800d3a4 	.word	0x0800d3a4

08001cc4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cde:	d301      	bcc.n	8001ce4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e0af      	b.n	8001e44 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b5b      	cmp	r3, #91	; 0x5b
 8001cfc:	f040 8094 	bne.w	8001e28 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d0a:	6838      	ldr	r0, [r7, #0]
 8001d0c:	f7ff fdb6 	bl	800187c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <parse_array+0x6e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d207      	bcs.n	8001d32 <parse_array+0x6e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b5d      	cmp	r3, #93	; 0x5d
 8001d30:	d061      	beq.n	8001df6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <parse_array+0x80>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d305      	bcc.n	8001d50 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d4e:	e072      	b.n	8001e36 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f9a6 	bl	80010b0 <cJSON_New_Item>
 8001d64:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d05f      	beq.n	8001e2c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e007      	b.n	8001d8c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f7ff fd70 	bl	800187c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	6938      	ldr	r0, [r7, #16]
 8001da0:	f7ff fea4 	bl	8001aec <parse_value>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d042      	beq.n	8001e30 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	f7ff fd66 	bl	800187c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <parse_array+0x10e>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d207      	bcs.n	8001dd2 <parse_array+0x10e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b2c      	cmp	r3, #44	; 0x2c
 8001dd0:	d0c3      	beq.n	8001d5a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d02d      	beq.n	8001e34 <parse_array+0x170>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d227      	bcs.n	8001e34 <parse_array+0x170>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b5d      	cmp	r3, #93	; 0x5d
 8001df2:	d11f      	bne.n	8001e34 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001df4:	e000      	b.n	8001df8 <parse_array+0x134>
        goto success;
 8001df6:	bf00      	nop
    input_buffer->depth--;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <parse_array+0x14a>
        head->prev = current_item;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	609a      	str	r2, [r3, #8]

    return true;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e00d      	b.n	8001e44 <parse_array+0x180>
        goto fail;
 8001e28:	bf00      	nop
 8001e2a:	e004      	b.n	8001e36 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e2c:	bf00      	nop
 8001e2e:	e002      	b.n	8001e36 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e34:	bf00      	nop

fail:
    if (head != NULL)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f7ff f94d 	bl	80010dc <cJSON_Delete>
    }

    return false;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e66:	d301      	bcc.n	8001e6c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e0ea      	b.n	8002042 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80d0 	beq.w	800201e <parse_object+0x1d2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	f080 80c9 	bcs.w	800201e <parse_object+0x1d2>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b7b      	cmp	r3, #123	; 0x7b
 8001e9a:	f040 80c0 	bne.w	800201e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001ea8:	6838      	ldr	r0, [r7, #0]
 8001eaa:	f7ff fce7 	bl	800187c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <parse_object+0x86>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d208      	bcs.n	8001ed2 <parse_object+0x86>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b7d      	cmp	r3, #125	; 0x7d
 8001ece:	f000 808d 	beq.w	8001fec <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <parse_object+0x98>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d305      	bcc.n	8001ef0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	609a      	str	r2, [r3, #8]
        goto fail;
 8001eee:	e0a1      	b.n	8002034 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	3310      	adds	r3, #16
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f8d6 	bl	80010b0 <cJSON_New_Item>
 8001f04:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 808a 	beq.w	8002022 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e007      	b.n	8001f2e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f7ff fc9f 	bl	800187c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	6938      	ldr	r0, [r7, #16]
 8001f42:	f7ff fb55 	bl	80015f0 <parse_string>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d06c      	beq.n	8002026 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f4c:	6838      	ldr	r0, [r7, #0]
 8001f4e:	f7ff fc95 	bl	800187c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d061      	beq.n	800202a <parse_object+0x1de>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d25b      	bcs.n	800202a <parse_object+0x1de>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b3a      	cmp	r3, #58	; 0x3a
 8001f80:	d153      	bne.n	800202a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f7ff fc75 	bl	800187c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	f7ff fda9 	bl	8001aec <parse_value>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d046      	beq.n	800202e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f7ff fc6b 	bl	800187c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <parse_object+0x17c>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <parse_object+0x17c>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001fc6:	d098      	beq.n	8001efa <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d031      	beq.n	8002032 <parse_object+0x1e6>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d22b      	bcs.n	8002032 <parse_object+0x1e6>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b7d      	cmp	r3, #125	; 0x7d
 8001fe8:	d123      	bne.n	8002032 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001fea:	e000      	b.n	8001fee <parse_object+0x1a2>
        goto success; /* empty object */
 8001fec:	bf00      	nop
    input_buffer->depth--;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <parse_object+0x1b8>
        head->prev = current_item;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	60da      	str	r2, [r3, #12]
    item->child = head;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	609a      	str	r2, [r3, #8]
    return true;
 800201a:	2301      	movs	r3, #1
 800201c:	e011      	b.n	8002042 <parse_object+0x1f6>
        goto fail; /* not an object */
 800201e:	bf00      	nop
 8002020:	e008      	b.n	8002034 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002022:	bf00      	nop
 8002024:	e006      	b.n	8002034 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002026:	bf00      	nop
 8002028:	e004      	b.n	8002034 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800202a:	bf00      	nop
 800202c:	e002      	b.n	8002034 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800202e:	bf00      	nop
 8002030:	e000      	b.n	8002034 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002032:	bf00      	nop

fail:
    if (head != NULL)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7ff f84e 	bl	80010dc <cJSON_Delete>
    }

    return false;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <get_object_item+0x1c>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <get_object_item+0x20>
    {
        return NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	e033      	b.n	80020d2 <get_object_item+0x88>
    }

    current_element = object->child;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d017      	beq.n	80020a6 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002076:	e002      	b.n	800207e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <get_object_item+0x74>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d018      	beq.n	80020be <get_object_item+0x74>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4619      	mov	r1, r3
 8002092:	68b8      	ldr	r0, [r7, #8]
 8002094:	f7fe f8a4 	bl	80001e0 <strcmp>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ec      	bne.n	8002078 <get_object_item+0x2e>
 800209e:	e00e      	b.n	80020be <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <get_object_item+0x74>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4619      	mov	r1, r3
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f7fe ff68 	bl	8000f88 <case_insensitive_strcmp>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <get_object_item+0x82>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <get_object_item+0x86>
        return NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <get_object_item+0x88>
    }

    return current_element;
 80020d0:	697b      	ldr	r3, [r7, #20]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffae 	bl	800204a <get_object_item>
 80020ee:	4603      	mov	r3, r0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	605a      	str	r2, [r3, #4]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <add_item_to_array+0x22>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <add_item_to_array+0x22>
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d101      	bne.n	8002140 <add_item_to_array+0x26>
    {
        return false;
 800213c:	2300      	movs	r3, #0
 800213e:	e01e      	b.n	800217e <add_item_to_array+0x64>
    }

    child = array->child;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e00d      	b.n	800217c <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ffc2 	bl	80020f8 <suffix_object>
            array->child->prev = item;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffc1 	bl	800211a <add_item_to_array>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80021aa:	687b      	ldr	r3, [r7, #4]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <add_item_to_object+0x30>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <add_item_to_object+0x30>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <add_item_to_object+0x30>
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d101      	bne.n	80021ec <add_item_to_object+0x34>
    {
        return false;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e036      	b.n	800225a <add_item_to_object+0xa2>
    }

    if (constant_key)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80021f2:	68b8      	ldr	r0, [r7, #8]
 80021f4:	f7ff ffd5 	bl	80021a2 <cast_away_const>
 80021f8:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e00e      	b.n	8002224 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002206:	6839      	ldr	r1, [r7, #0]
 8002208:	68b8      	ldr	r0, [r7, #8]
 800220a:	f7fe ff29 	bl	8001060 <cJSON_strdup>
 800220e:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <add_item_to_object+0x62>
        {
            return false;
 8002216:	2300      	movs	r3, #0
 8002218:	e01f      	b.n	800225a <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002222:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <add_item_to_object+0x8c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6a12      	ldr	r2, [r2, #32]
 8002240:	4610      	mov	r0, r2
 8002242:	4798      	blx	r3
    }

    item->string = new_key;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff ff61 	bl	800211a <add_item_to_array>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8002270:	2300      	movs	r3, #0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <cJSON_AddItemToObject+0x28>)
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff ff9c 	bl	80021b8 <add_item_to_object>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000

08002290 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002298:	480f      	ldr	r0, [pc, #60]	; (80022d8 <cJSON_CreateString+0x48>)
 800229a:	f7fe ff09 	bl	80010b0 <cJSON_New_Item>
 800229e:	60f8      	str	r0, [r7, #12]
    if(item)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2210      	movs	r2, #16
 80022aa:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80022ac:	490a      	ldr	r1, [pc, #40]	; (80022d8 <cJSON_CreateString+0x48>)
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fed6 	bl	8001060 <cJSON_strdup>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d104      	bne.n	80022cc <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7fe ff0a 	bl	80010dc <cJSON_Delete>
            return NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <cJSON_CreateString+0x3e>
        }
    }

    return item;
 80022cc:	68fb      	ldr	r3, [r7, #12]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80022e2:	4807      	ldr	r0, [pc, #28]	; (8002300 <cJSON_CreateArray+0x24>)
 80022e4:	f7fe fee4 	bl	80010b0 <cJSON_New_Item>
 80022e8:	6078      	str	r0, [r7, #4]
    if(item)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	60da      	str	r2, [r3, #12]
    }

    return item;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000000 	.word	0x20000000

08002304 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <cJSON_CreateObject+0x24>)
 800230c:	f7fe fed0 	bl	80010b0 <cJSON_New_Item>
 8002310:	6078      	str	r0, [r7, #4]
    if (item)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800231e:	687b      	ldr	r3, [r7, #4]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000000 	.word	0x20000000

0800232c <_write>:
#include <string.h>
#include "comunicaciones.h"
#include "main.h"

int _write(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00b      	b.n	8002356 <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	1c4b      	adds	r3, r1, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002348:	2201      	movs	r2, #1
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <_write+0x3c>)
 800234c:	f002 ff1f 	bl	800518e <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	dbef      	blt.n	800233e <_write+0x12>
	}

	return len;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200002a0 	.word	0x200002a0

0800236c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002370:	f001 f89a 	bl	80034a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002374:	f000 f816 	bl	80023a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002378:	f000 f962 	bl	8002640 <MX_GPIO_Init>
  MX_DMA_Init();
 800237c:	f000 f922 	bl	80025c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002380:	f000 f8f6 	bl	8002570 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002384:	f000 f8ca 	bl	800251c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002388:	f000 f876 	bl	8002478 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf ("SBC_PRJ at "  __TIME__ "\r\n");
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <main+0x34>)
 800238e:	f007 fc9d 	bl	8009ccc <puts>
  //ESP8266_RESET();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002392:	f003 fd9f 	bl	8005ed4 <osKernelInitialize>
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
  CONFIGURACION_INICIAL();
 8002396:	f001 f803 	bl	80033a0 <CONFIGURACION_INICIAL>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 800239a:	f003 fdbf 	bl	8005f1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800239e:	e7fe      	b.n	800239e <main+0x32>
 80023a0:	0800d3c4 	.word	0x0800d3c4

080023a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b094      	sub	sp, #80	; 0x50
 80023a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023aa:	f107 0320 	add.w	r3, r7, #32
 80023ae:	2230      	movs	r2, #48	; 0x30
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f006 feb2 	bl	800911c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <SystemClock_Config+0xcc>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <SystemClock_Config+0xcc>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6413      	str	r3, [r2, #64]	; 0x40
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <SystemClock_Config+0xcc>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <SystemClock_Config+0xd0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <SystemClock_Config+0xd0>)
 80023ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <SystemClock_Config+0xd0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002404:	2301      	movs	r3, #1
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002408:	2310      	movs	r3, #16
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240c:	2302      	movs	r3, #2
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002414:	2310      	movs	r3, #16
 8002416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002418:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800241e:	2304      	movs	r3, #4
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002422:	2304      	movs	r3, #4
 8002424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002426:	f107 0320 	add.w	r3, r7, #32
 800242a:	4618      	mov	r0, r3
 800242c:	f002 f9ca 	bl	80047c4 <HAL_RCC_OscConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002436:	f000 f9c9 	bl	80027cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243a:	230f      	movs	r3, #15
 800243c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fc2c 	bl	8004cb4 <HAL_RCC_ClockConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002462:	f000 f9b3 	bl	80027cc <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3750      	adds	r7, #80	; 0x50
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000

08002478 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800247e:	463b      	mov	r3, r7
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <MX_ADC1_Init+0x98>)
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <MX_ADC1_Init+0x9c>)
 800248e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <MX_ADC1_Init+0x98>)
 8002492:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002496:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_ADC1_Init+0x98>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <MX_ADC1_Init+0x98>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_ADC1_Init+0x98>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <MX_ADC1_Init+0x98>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_ADC1_Init+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_ADC1_Init+0x98>)
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <MX_ADC1_Init+0xa0>)
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_ADC1_Init+0x98>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_ADC1_Init+0x98>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_ADC1_Init+0x98>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_ADC1_Init+0x98>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <MX_ADC1_Init+0x98>)
 80024da:	f001 f857 	bl	800358c <HAL_ADC_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80024e4:	f000 f972 	bl	80027cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f4:	463b      	mov	r3, r7
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_ADC1_Init+0x98>)
 80024fa:	f001 f88b 	bl	8003614 <HAL_ADC_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002504:	f000 f962 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000214 	.word	0x20000214
 8002514:	40012000 	.word	0x40012000
 8002518:	0f000001 	.word	0x0f000001

0800251c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <MX_USART1_UART_Init+0x50>)
 8002524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_USART1_UART_Init+0x4c>)
 8002554:	f002 fdce 	bl	80050f4 <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800255e:	f000 f935 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000025c 	.word	0x2000025c
 800256c:	40011000 	.word	0x40011000

08002570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <MX_USART2_UART_Init+0x50>)
 8002578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 800257c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 8002596:	220c      	movs	r2, #12
 8002598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_USART2_UART_Init+0x4c>)
 80025a8:	f002 fda4 	bl	80050f4 <HAL_UART_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025b2:	f000 f90b 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200002a0 	.word	0x200002a0
 80025c0:	40004400 	.word	0x40004400

080025c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <MX_DMA_Init+0x78>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a1a      	ldr	r2, [pc, #104]	; (800263c <MX_DMA_Init+0x78>)
 80025d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_DMA_Init+0x78>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_DMA_Init+0x78>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <MX_DMA_Init+0x78>)
 80025f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_DMA_Init+0x78>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2105      	movs	r1, #5
 8002606:	2010      	movs	r0, #16
 8002608:	f001 fb23 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800260c:	2010      	movs	r0, #16
 800260e:	f001 fb3c 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2105      	movs	r1, #5
 8002616:	203a      	movs	r0, #58	; 0x3a
 8002618:	f001 fb1b 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800261c:	203a      	movs	r0, #58	; 0x3a
 800261e:	f001 fb34 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2105      	movs	r1, #5
 8002626:	2046      	movs	r0, #70	; 0x46
 8002628:	f001 fb13 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800262c:	2046      	movs	r0, #70	; 0x46
 800262e:	f001 fb2c 	bl	8003c8a <HAL_NVIC_EnableIRQ>

}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b58      	ldr	r3, [pc, #352]	; (80027bc <MX_GPIO_Init+0x17c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a57      	ldr	r2, [pc, #348]	; (80027bc <MX_GPIO_Init+0x17c>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b55      	ldr	r3, [pc, #340]	; (80027bc <MX_GPIO_Init+0x17c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b51      	ldr	r3, [pc, #324]	; (80027bc <MX_GPIO_Init+0x17c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a50      	ldr	r2, [pc, #320]	; (80027bc <MX_GPIO_Init+0x17c>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <MX_GPIO_Init+0x17c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <MX_GPIO_Init+0x17c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a49      	ldr	r2, [pc, #292]	; (80027bc <MX_GPIO_Init+0x17c>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <MX_GPIO_Init+0x17c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	4b43      	ldr	r3, [pc, #268]	; (80027bc <MX_GPIO_Init+0x17c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a42      	ldr	r2, [pc, #264]	; (80027bc <MX_GPIO_Init+0x17c>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b40      	ldr	r3, [pc, #256]	; (80027bc <MX_GPIO_Init+0x17c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2102      	movs	r1, #2
 80026ca:	483d      	ldr	r0, [pc, #244]	; (80027c0 <MX_GPIO_Init+0x180>)
 80026cc:	f002 f860 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|BUZZER_Pin|LED3_Pin, GPIO_PIN_RESET);
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80026d6:	483b      	ldr	r0, [pc, #236]	; (80027c4 <MX_GPIO_Init+0x184>)
 80026d8:	f002 f85a 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	4838      	ldr	r0, [pc, #224]	; (80027c4 <MX_GPIO_Init+0x184>)
 80026e2:	f002 f855 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_Pin|LED2_Pin|LED5_Pin|LED1_Pin
 80026e6:	2200      	movs	r2, #0
 80026e8:	f240 4139 	movw	r1, #1081	; 0x439
 80026ec:	4836      	ldr	r0, [pc, #216]	; (80027c8 <MX_GPIO_Init+0x188>)
 80026ee:	f002 f84f 	bl	8004790 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	482d      	ldr	r0, [pc, #180]	; (80027c0 <MX_GPIO_Init+0x180>)
 800270a:	f001 febd 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP8266_RESET_Pin */
  GPIO_InitStruct.Pin = ESP8266_RESET_Pin;
 800270e:	2302      	movs	r3, #2
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_RESET_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4826      	ldr	r0, [pc, #152]	; (80027c0 <MX_GPIO_Init+0x180>)
 8002726:	f001 feaf 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED8_Pin BUZZER_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|BUZZER_Pin|LED3_Pin;
 800272a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800272e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002730:	2301      	movs	r3, #1
 8002732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	4820      	ldr	r0, [pc, #128]	; (80027c4 <MX_GPIO_Init+0x184>)
 8002744:	f001 fea0 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002754:	2302      	movs	r3, #2
 8002756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	4819      	ldr	r0, [pc, #100]	; (80027c4 <MX_GPIO_Init+0x184>)
 8002760:	f001 fe92 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED2_Pin LED5_Pin LED1_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED2_Pin|LED5_Pin|LED1_Pin
 8002764:	f240 4339 	movw	r3, #1081	; 0x439
 8002768:	617b      	str	r3, [r7, #20]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276a:	2301      	movs	r3, #1
 800276c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4812      	ldr	r0, [pc, #72]	; (80027c8 <MX_GPIO_Init+0x188>)
 800277e:	f001 fe83 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR1_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin;
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR1_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <MX_GPIO_Init+0x180>)
 8002796:	f001 fe77 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR2_Pin */
  GPIO_InitStruct.Pin = PULSADOR2_Pin;
 800279a:	2340      	movs	r3, #64	; 0x40
 800279c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR2_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4806      	ldr	r0, [pc, #24]	; (80027c8 <MX_GPIO_Init+0x188>)
 80027ae:	f001 fe6b 	bl	8004488 <HAL_GPIO_Init>

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <Error_Handler+0x8>
	...

080027d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_MspInit+0x54>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_MspInit+0x54>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_MspInit+0x54>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_MspInit+0x54>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_MspInit+0x54>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_MspInit+0x54>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	210f      	movs	r1, #15
 800281a:	f06f 0001 	mvn.w	r0, #1
 800281e:	f001 fa18 	bl	8003c52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_ADC_MspInit+0x7c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d127      	bne.n	80028a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_ADC_MspInit+0x80>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin|NTC_Pin|POT_Pin;
 800288a:	2313      	movs	r3, #19
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800288e:	2303      	movs	r3, #3
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <HAL_ADC_MspInit+0x84>)
 800289e:	f001 fdf3 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40012000 	.word	0x40012000
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020000 	.word	0x40020000

080028b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a78      	ldr	r2, [pc, #480]	; (8002ab8 <HAL_UART_MspInit+0x200>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 808a 	bne.w	80029f0 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_UART_MspInit+0x204>)
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	4a75      	ldr	r2, [pc, #468]	; (8002abc <HAL_UART_MspInit+0x204>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	6453      	str	r3, [r2, #68]	; 0x44
 80028ec:	4b73      	ldr	r3, [pc, #460]	; (8002abc <HAL_UART_MspInit+0x204>)
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_UART_MspInit+0x204>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	4a6e      	ldr	r2, [pc, #440]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6313      	str	r3, [r2, #48]	; 0x30
 8002908:	4b6c      	ldr	r3, [pc, #432]	; (8002abc <HAL_UART_MspInit+0x204>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002914:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002926:	2307      	movs	r3, #7
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4863      	ldr	r0, [pc, #396]	; (8002ac0 <HAL_UART_MspInit+0x208>)
 8002932:	f001 fda9 	bl	8004488 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002938:	4a63      	ldr	r2, [pc, #396]	; (8002ac8 <HAL_UART_MspInit+0x210>)
 800293a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800293c:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 800293e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002942:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002944:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800294a:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002956:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002958:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295e:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800296a:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002970:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002972:	2200      	movs	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002976:	4853      	ldr	r0, [pc, #332]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 8002978:	f001 f9a6 	bl	8003cc8 <HAL_DMA_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002982:	f7ff ff23 	bl	80027cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
 800298c:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_UART_MspInit+0x20c>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_UART_MspInit+0x214>)
 8002994:	4a4e      	ldr	r2, [pc, #312]	; (8002ad0 <HAL_UART_MspInit+0x218>)
 8002996:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_UART_MspInit+0x214>)
 800299a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800299e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b4:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029d2:	483e      	ldr	r0, [pc, #248]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029d4:	f001 f978 	bl	8003cc8 <HAL_DMA_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80029de:	f7ff fef5 	bl	80027cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a39      	ldr	r2, [pc, #228]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_UART_MspInit+0x214>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029ee:	e05e      	b.n	8002aae <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_UART_MspInit+0x21c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d159      	bne.n	8002aae <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a27      	ldr	r2, [pc, #156]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_UART_MspInit+0x204>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a32:	230c      	movs	r3, #12
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a42:	2307      	movs	r3, #7
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <HAL_UART_MspInit+0x208>)
 8002a4e:	f001 fd1b 	bl	8004488 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a54:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_UART_MspInit+0x224>)
 8002a56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a92:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002a94:	f001 f918 	bl	8003cc8 <HAL_DMA_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8002a9e:	f7ff fe95 	bl	80027cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_UART_MspInit+0x220>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002aae:	bf00      	nop
 8002ab0:	3730      	adds	r7, #48	; 0x30
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	200002e4 	.word	0x200002e4
 8002ac8:	40026440 	.word	0x40026440
 8002acc:	20000344 	.word	0x20000344
 8002ad0:	400264b8 	.word	0x400264b8
 8002ad4:	40004400 	.word	0x40004400
 8002ad8:	200003a4 	.word	0x200003a4
 8002adc:	40026088 	.word	0x40026088

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x4>

08002af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <UsageFault_Handler+0x4>

08002afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b10:	f000 fd1c 	bl	800354c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b14:	f004 ff84 	bl	8007a20 <xTaskGetSchedulerState>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b1e:	f005 fe6b 	bl	80087f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA1_Stream5_IRQHandler+0x10>)
 8002b2e:	f001 fa41 	bl	8003fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003a4 	.word	0x200003a4

08002b3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <DMA2_Stream2_IRQHandler+0x10>)
 8002b42:	f001 fa37 	bl	8003fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200002e4 	.word	0x200002e4

08002b50 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA2_Stream7_IRQHandler+0x10>)
 8002b56:	f001 fa2d 	bl	8003fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000344 	.word	0x20000344

08002b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_kill>:

int _kill(int pid, int sig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b7e:	f006 f8b7 	bl	8008cf0 <__errno>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2216      	movs	r2, #22
 8002b86:	601a      	str	r2, [r3, #0]
	return -1;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_exit>:

void _exit (int status)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ba6:	e7fe      	b.n	8002ba6 <_exit+0x12>

08002ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e00a      	b.n	8002bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bba:	f3af 8000 	nop.w
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	60ba      	str	r2, [r7, #8]
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbf0      	blt.n	8002bba <_read+0x12>
	}

return len;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <_isatty>:

int _isatty(int file)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
	return 1;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f006 f838 	bl	8008cf0 <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20020000 	.word	0x20020000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	20000c04 	.word	0x20000c04
 8002cb4:	20015ad8 	.word	0x20015ad8

08002cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <bprintf>:
     }
	 IObuff->puts(IObuff,(BUFF_ITEM_t *)cad,strlen(cad));
}


void bprintf ( const char *fmt, ...){
 8002cdc:	b40f      	push	{r0, r1, r2, r3}
 8002cde:	b5b0      	push	{r4, r5, r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
	  va_list ap;


	  va_start(ap, fmt);
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	607b      	str	r3, [r7, #4]
	  vsprintf(bprint_buff,fmt,ap);
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	69b9      	ldr	r1, [r7, #24]
 8002cee:	480b      	ldr	r0, [pc, #44]	; (8002d1c <bprintf+0x40>)
 8002cf0:	f007 ff12 	bl	800ab18 <vsiprintf>
	  va_end(ap);
 	  IObuff->puts(IObuff,(BUFF_ITEM_t *)bprint_buff,strlen(bprint_buff));
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <bprintf+0x44>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691c      	ldr	r4, [r3, #16]
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <bprintf+0x44>)
 8002cfc:	681d      	ldr	r5, [r3, #0]
 8002cfe:	4807      	ldr	r0, [pc, #28]	; (8002d1c <bprintf+0x40>)
 8002d00:	f7fd fa78 	bl	80001f4 <strlen>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	4904      	ldr	r1, [pc, #16]	; (8002d1c <bprintf+0x40>)
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	47a0      	blx	r4

}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002d18:	b004      	add	sp, #16
 8002d1a:	4770      	bx	lr
 8002d1c:	20000c24 	.word	0x20000c24
 8002d20:	20001424 	.word	0x20001424

08002d24 <WIFI_RESET>:
uint32_t global_wifi_ready;

uint8_t aux_buff_WIFI[2048];
uint8_t buff_WIFI_response[2048];

void WIFI_RESET(void){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
	// RESET
	unsigned int ct;
	uint32_t global_wifi_ready = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2102      	movs	r1, #2
 8002d32:	481e      	ldr	r0, [pc, #120]	; (8002dac <WIFI_RESET+0x88>)
 8002d34:	f001 fd2c 	bl	8004790 <HAL_GPIO_WritePin>
	for (ct=0;ct<1000000;ct++);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	e002      	b.n	8002d44 <WIFI_RESET+0x20>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3301      	adds	r3, #1
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <WIFI_RESET+0x8c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d9f8      	bls.n	8002d3e <WIFI_RESET+0x1a>
	HAL_UART_Init(&huart1);
 8002d4c:	4819      	ldr	r0, [pc, #100]	; (8002db4 <WIFI_RESET+0x90>)
 8002d4e:	f002 f9d1 	bl	80050f4 <HAL_UART_Init>
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	e007      	b.n	8002d68 <WIFI_RESET+0x44>
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <WIFI_RESET+0x94>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3301      	adds	r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d3f3      	bcc.n	8002d58 <WIFI_RESET+0x34>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8002d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d74:	4910      	ldr	r1, [pc, #64]	; (8002db8 <WIFI_RESET+0x94>)
 8002d76:	480f      	ldr	r0, [pc, #60]	; (8002db4 <WIFI_RESET+0x90>)
 8002d78:	f002 fa9b 	bl	80052b2 <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_SET);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2102      	movs	r1, #2
 8002d80:	480a      	ldr	r0, [pc, #40]	; (8002dac <WIFI_RESET+0x88>)
 8002d82:	f001 fd05 	bl	8004790 <HAL_GPIO_WritePin>

	vTaskDelay(1000/portTICK_RATE_MS );
 8002d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d8a:	f004 f9b9 	bl	8007100 <vTaskDelay>
   	HAL_UART_DMAStop(&huart1);
 8002d8e:	4809      	ldr	r0, [pc, #36]	; (8002db4 <WIFI_RESET+0x90>)
 8002d90:	f002 fabf 	bl	8005312 <HAL_UART_DMAStop>
	printf("XXXXX %s",buff_recv);
 8002d94:	4908      	ldr	r1, [pc, #32]	; (8002db8 <WIFI_RESET+0x94>)
 8002d96:	4809      	ldr	r0, [pc, #36]	; (8002dbc <WIFI_RESET+0x98>)
 8002d98:	f006 ff12 	bl	8009bc0 <iprintf>
	printf("XXXXX\r\n\n\n\n");
 8002d9c:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <WIFI_RESET+0x9c>)
 8002d9e:	f006 ff95 	bl	8009ccc <puts>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40020800 	.word	0x40020800
 8002db0:	000f423f 	.word	0x000f423f
 8002db4:	2000025c 	.word	0x2000025c
 8002db8:	20000404 	.word	0x20000404
 8002dbc:	0800d3dc 	.word	0x0800d3dc
 8002dc0:	0800d3e8 	.word	0x0800d3e8

08002dc4 <WIFI_Boot>:


void WIFI_Boot(void)

{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
	unsigned int ct;

 	printf("Reseting...\r\n");
 8002dca:	4842      	ldr	r0, [pc, #264]	; (8002ed4 <WIFI_Boot+0x110>)
 8002dcc:	f006 ff7e 	bl	8009ccc <puts>

 	WIFI_RESET();
 8002dd0:	f7ff ffa8 	bl	8002d24 <WIFI_RESET>
 	printf("Init...\r\n");
 8002dd4:	4840      	ldr	r0, [pc, #256]	; (8002ed8 <WIFI_Boot+0x114>)
 8002dd6:	f006 ff79 	bl	8009ccc <puts>

 	HAL_UART_Init(&huart1);
 8002dda:	4840      	ldr	r0, [pc, #256]	; (8002edc <WIFI_Boot+0x118>)
 8002ddc:	f002 f98a 	bl	80050f4 <HAL_UART_Init>

 	// version
 	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	e007      	b.n	8002df6 <WIFI_Boot+0x32>
 8002de6:	4a3e      	ldr	r2, [pc, #248]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3301      	adds	r3, #1
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d3f3      	bcc.n	8002de6 <WIFI_Boot+0x22>
 	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8002dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e02:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e04:	4835      	ldr	r0, [pc, #212]	; (8002edc <WIFI_Boot+0x118>)
 8002e06:	f002 fa54 	bl	80052b2 <HAL_UART_Receive_DMA>
 	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT\r\n",strlen("AT\r\n"),10000);
 8002e0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e0e:	2204      	movs	r2, #4
 8002e10:	4934      	ldr	r1, [pc, #208]	; (8002ee4 <WIFI_Boot+0x120>)
 8002e12:	4832      	ldr	r0, [pc, #200]	; (8002edc <WIFI_Boot+0x118>)
 8002e14:	f002 f9bb 	bl	800518e <HAL_UART_Transmit>
	 vTaskDelay(100/portTICK_RATE_MS );
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	f004 f971 	bl	8007100 <vTaskDelay>
 	HAL_UART_DMAStop(&huart1);
 8002e1e:	482f      	ldr	r0, [pc, #188]	; (8002edc <WIFI_Boot+0x118>)
 8002e20:	f002 fa77 	bl	8005312 <HAL_UART_DMAStop>
	printf("1: %s",buff_recv);
 8002e24:	492e      	ldr	r1, [pc, #184]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e26:	4830      	ldr	r0, [pc, #192]	; (8002ee8 <WIFI_Boot+0x124>)
 8002e28:	f006 feca 	bl	8009bc0 <iprintf>

	printf("2: %s",buff_recv);
*/

	// Pon en modo station=1,  station+access_point=3
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	e007      	b.n	8002e42 <WIFI_Boot+0x7e>
 8002e32:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e48:	d3f3      	bcc.n	8002e32 <WIFI_Boot+0x6e>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8002e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e4e:	4924      	ldr	r1, [pc, #144]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e50:	4822      	ldr	r0, [pc, #136]	; (8002edc <WIFI_Boot+0x118>)
 8002e52:	f002 fa2e 	bl	80052b2 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 8002e56:	4b25      	ldr	r3, [pc, #148]	; (8002eec <WIFI_Boot+0x128>)
 8002e58:	220d      	movs	r2, #13
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <WIFI_Boot+0x12c>)
 8002e5c:	481f      	ldr	r0, [pc, #124]	; (8002edc <WIFI_Boot+0x118>)
 8002e5e:	f002 f996 	bl	800518e <HAL_UART_Transmit>
	 vTaskDelay(100/portTICK_RATE_MS );
 8002e62:	2064      	movs	r0, #100	; 0x64
 8002e64:	f004 f94c 	bl	8007100 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8002e68:	481c      	ldr	r0, [pc, #112]	; (8002edc <WIFI_Boot+0x118>)
 8002e6a:	f002 fa52 	bl	8005312 <HAL_UART_DMAStop>
	printf("3: %s",buff_recv);
 8002e6e:	491c      	ldr	r1, [pc, #112]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e70:	4820      	ldr	r0, [pc, #128]	; (8002ef4 <WIFI_Boot+0x130>)
 8002e72:	f006 fea5 	bl	8009bc0 <iprintf>

	// Programa la contraseña del access-point
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	e007      	b.n	8002e8c <WIFI_Boot+0xc8>
 8002e7c:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e92:	d3f3      	bcc.n	8002e7c <WIFI_Boot+0xb8>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8002e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e98:	4911      	ldr	r1, [pc, #68]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <WIFI_Boot+0x118>)
 8002e9c:	f002 fa09 	bl	80052b2 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1,( unsigned char *) "AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n",strlen("AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n"),10000);
 8002ea0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ea4:	2224      	movs	r2, #36	; 0x24
 8002ea6:	4914      	ldr	r1, [pc, #80]	; (8002ef8 <WIFI_Boot+0x134>)
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <WIFI_Boot+0x118>)
 8002eaa:	f002 f970 	bl	800518e <HAL_UART_Transmit>
	vTaskDelay(5000/portTICK_RATE_MS );
 8002eae:	f241 3088 	movw	r0, #5000	; 0x1388
 8002eb2:	f004 f925 	bl	8007100 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8002eb6:	4809      	ldr	r0, [pc, #36]	; (8002edc <WIFI_Boot+0x118>)
 8002eb8:	f002 fa2b 	bl	8005312 <HAL_UART_DMAStop>
	printf("4: %s",buff_recv);
 8002ebc:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <WIFI_Boot+0x11c>)
 8002ebe:	480f      	ldr	r0, [pc, #60]	; (8002efc <WIFI_Boot+0x138>)
 8002ec0:	f006 fe7e 	bl	8009bc0 <iprintf>
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
	vTaskDelay(5000/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	printf("5: %s",buff_recv);*/

	global_wifi_ready = 1;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <WIFI_Boot+0x13c>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	0800d3f4 	.word	0x0800d3f4
 8002ed8:	0800d404 	.word	0x0800d404
 8002edc:	2000025c 	.word	0x2000025c
 8002ee0:	20000404 	.word	0x20000404
 8002ee4:	0800d410 	.word	0x0800d410
 8002ee8:	0800d418 	.word	0x0800d418
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	0800d420 	.word	0x0800d420
 8002ef4:	0800d430 	.word	0x0800d430
 8002ef8:	0800d438 	.word	0x0800d438
 8002efc:	0800d460 	.word	0x0800d460
 8002f00:	2000142c 	.word	0x2000142c

08002f04 <checkWIFI>:

int checkWIFI() {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
	int ct;
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e007      	b.n	8002f20 <checkWIFI+0x1c>
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <checkWIFI+0x6c>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f26:	dbf3      	blt.n	8002f10 <checkWIFI+0xc>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8002f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2c:	4910      	ldr	r1, [pc, #64]	; (8002f70 <checkWIFI+0x6c>)
 8002f2e:	4811      	ldr	r0, [pc, #68]	; (8002f74 <checkWIFI+0x70>)
 8002f30:	f002 f9bf 	bl	80052b2 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 8002f34:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f38:	220a      	movs	r2, #10
 8002f3a:	490f      	ldr	r1, [pc, #60]	; (8002f78 <checkWIFI+0x74>)
 8002f3c:	480d      	ldr	r0, [pc, #52]	; (8002f74 <checkWIFI+0x70>)
 8002f3e:	f002 f926 	bl	800518e <HAL_UART_Transmit>
	vTaskDelay(2000/portTICK_RATE_MS );
 8002f42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f46:	f004 f8db 	bl	8007100 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8002f4a:	480a      	ldr	r0, [pc, #40]	; (8002f74 <checkWIFI+0x70>)
 8002f4c:	f002 f9e1 	bl	8005312 <HAL_UART_DMAStop>
	printf("5: %s",buff_recv);
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <checkWIFI+0x6c>)
 8002f52:	480a      	ldr	r0, [pc, #40]	; (8002f7c <checkWIFI+0x78>)
 8002f54:	f006 fe34 	bl	8009bc0 <iprintf>

	if (buff_recv[0] != 0) {
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <checkWIFI+0x6c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <checkWIFI+0x60>
		return 1;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <checkWIFI+0x62>
	}
	return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000404 	.word	0x20000404
 8002f74:	2000025c 	.word	0x2000025c
 8002f78:	0800d468 	.word	0x0800d468
 8002f7c:	0800d474 	.word	0x0800d474

08002f80 <WRITE>:
#include "task_TIME.h"


#include "cJSON.h"

void WRITE(){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0

	printf("WRITE!");
 8002f86:	48af      	ldr	r0, [pc, #700]	; (8003244 <WRITE+0x2c4>)
 8002f88:	f006 fe1a 	bl	8009bc0 <iprintf>
	int signal;
	CJSON_PUBLIC(cJSON *) jsons1;

 	cJSON *name = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28

 	cJSON *root, *contextResponses, *contextElement, *attributes, *alarma, *alarma_src, *intensidadLuz, *temperatura, *statusCode;
 	root = cJSON_CreateObject();
 8002f90:	f7ff f9b8 	bl	8002304 <cJSON_CreateObject>
 8002f94:	6278      	str	r0, [r7, #36]	; 0x24
 	contextResponses = cJSON_CreateArray();
 8002f96:	f7ff f9a1 	bl	80022dc <cJSON_CreateArray>
 8002f9a:	6238      	str	r0, [r7, #32]

 	cJSON_AddItemToObject(root, "contextResponse", contextResponses);
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	49aa      	ldr	r1, [pc, #680]	; (8003248 <WRITE+0x2c8>)
 8002fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fa2:	f7ff f95f 	bl	8002264 <cJSON_AddItemToObject>

 	contextElement = cJSON_CreateObject();
 8002fa6:	f7ff f9ad 	bl	8002304 <cJSON_CreateObject>
 8002faa:	61f8      	str	r0, [r7, #28]
 	cJSON_AddItemToArray(contextResponses, contextElement);
 8002fac:	69f9      	ldr	r1, [r7, #28]
 8002fae:	6a38      	ldr	r0, [r7, #32]
 8002fb0:	f7ff f8e9 	bl	8002186 <cJSON_AddItemToArray>
 	cJSON_AddItemToObject(contextElement, "type", cJSON_CreateString("Sensor"));
 8002fb4:	48a5      	ldr	r0, [pc, #660]	; (800324c <WRITE+0x2cc>)
 8002fb6:	f7ff f96b 	bl	8002290 <cJSON_CreateString>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	49a4      	ldr	r1, [pc, #656]	; (8003250 <WRITE+0x2d0>)
 8002fc0:	69f8      	ldr	r0, [r7, #28]
 8002fc2:	f7ff f94f 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(contextElement, "isPattern", cJSON_CreateString("false"));
 8002fc6:	48a3      	ldr	r0, [pc, #652]	; (8003254 <WRITE+0x2d4>)
 8002fc8:	f7ff f962 	bl	8002290 <cJSON_CreateString>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	49a1      	ldr	r1, [pc, #644]	; (8003258 <WRITE+0x2d8>)
 8002fd2:	69f8      	ldr	r0, [r7, #28]
 8002fd4:	f7ff f946 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(contextElement, "id", cJSON_CreateString("SensorSEU_SBC00"));
 8002fd8:	48a0      	ldr	r0, [pc, #640]	; (800325c <WRITE+0x2dc>)
 8002fda:	f7ff f959 	bl	8002290 <cJSON_CreateString>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	499f      	ldr	r1, [pc, #636]	; (8003260 <WRITE+0x2e0>)
 8002fe4:	69f8      	ldr	r0, [r7, #28]
 8002fe6:	f7ff f93d 	bl	8002264 <cJSON_AddItemToObject>

 	attributes = cJSON_CreateArray();
 8002fea:	f7ff f977 	bl	80022dc <cJSON_CreateArray>
 8002fee:	61b8      	str	r0, [r7, #24]
 	cJSON_AddItemToObject(attributes, "attributes", contextElement);
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	499c      	ldr	r1, [pc, #624]	; (8003264 <WRITE+0x2e4>)
 8002ff4:	69b8      	ldr	r0, [r7, #24]
 8002ff6:	f7ff f935 	bl	8002264 <cJSON_AddItemToObject>

 	alarma = cJSON_CreateObject();
 8002ffa:	f7ff f983 	bl	8002304 <cJSON_CreateObject>
 8002ffe:	6178      	str	r0, [r7, #20]
 	cJSON_AddItemToObject(alarma, "name", cJSON_CreateString("Alarma"));
 8003000:	4899      	ldr	r0, [pc, #612]	; (8003268 <WRITE+0x2e8>)
 8003002:	f7ff f945 	bl	8002290 <cJSON_CreateString>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	4998      	ldr	r1, [pc, #608]	; (800326c <WRITE+0x2ec>)
 800300c:	6978      	ldr	r0, [r7, #20]
 800300e:	f7ff f929 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(alarma, "type", cJSON_CreateString("boolean"));
 8003012:	4897      	ldr	r0, [pc, #604]	; (8003270 <WRITE+0x2f0>)
 8003014:	f7ff f93c 	bl	8002290 <cJSON_CreateString>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	498c      	ldr	r1, [pc, #560]	; (8003250 <WRITE+0x2d0>)
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff f920 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(alarma, "value", cJSON_CreateString("F")); //Need to get current Value
 8003024:	4893      	ldr	r0, [pc, #588]	; (8003274 <WRITE+0x2f4>)
 8003026:	f7ff f933 	bl	8002290 <cJSON_CreateString>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4992      	ldr	r1, [pc, #584]	; (8003278 <WRITE+0x2f8>)
 8003030:	6978      	ldr	r0, [r7, #20]
 8003032:	f7ff f917 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToArray(attributes, alarma);
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	69b8      	ldr	r0, [r7, #24]
 800303a:	f7ff f8a4 	bl	8002186 <cJSON_AddItemToArray>

 	alarma_src = cJSON_CreateObject();
 800303e:	f7ff f961 	bl	8002304 <cJSON_CreateObject>
 8003042:	6138      	str	r0, [r7, #16]
 	cJSON_AddItemToObject(alarma_src, "name", cJSON_CreateString("Alarma_src"));
 8003044:	488d      	ldr	r0, [pc, #564]	; (800327c <WRITE+0x2fc>)
 8003046:	f7ff f923 	bl	8002290 <cJSON_CreateString>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	4987      	ldr	r1, [pc, #540]	; (800326c <WRITE+0x2ec>)
 8003050:	6938      	ldr	r0, [r7, #16]
 8003052:	f7ff f907 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(alarma_src, "type", cJSON_CreateString("string"));
 8003056:	488a      	ldr	r0, [pc, #552]	; (8003280 <WRITE+0x300>)
 8003058:	f7ff f91a 	bl	8002290 <cJSON_CreateString>
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	497b      	ldr	r1, [pc, #492]	; (8003250 <WRITE+0x2d0>)
 8003062:	6938      	ldr	r0, [r7, #16]
 8003064:	f7ff f8fe 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(alarma_src, "value", cJSON_CreateString("SensorSEU_SBC003")); //Need to get current Value
 8003068:	4886      	ldr	r0, [pc, #536]	; (8003284 <WRITE+0x304>)
 800306a:	f7ff f911 	bl	8002290 <cJSON_CreateString>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	4981      	ldr	r1, [pc, #516]	; (8003278 <WRITE+0x2f8>)
 8003074:	6938      	ldr	r0, [r7, #16]
 8003076:	f7ff f8f5 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToArray(attributes, alarma);
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	69b8      	ldr	r0, [r7, #24]
 800307e:	f7ff f882 	bl	8002186 <cJSON_AddItemToArray>

 	intensidadLuz = cJSON_CreateObject();
 8003082:	f7ff f93f 	bl	8002304 <cJSON_CreateObject>
 8003086:	60f8      	str	r0, [r7, #12]
 	cJSON_AddItemToObject(intensidadLuz, "name", cJSON_CreateString("IntensidadLuz"));
 8003088:	487f      	ldr	r0, [pc, #508]	; (8003288 <WRITE+0x308>)
 800308a:	f7ff f901 	bl	8002290 <cJSON_CreateString>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	4976      	ldr	r1, [pc, #472]	; (800326c <WRITE+0x2ec>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff f8e5 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(intensidadLuz, "type", cJSON_CreateString("floatArray"));
 800309a:	487c      	ldr	r0, [pc, #496]	; (800328c <WRITE+0x30c>)
 800309c:	f7ff f8f8 	bl	8002290 <cJSON_CreateString>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	496a      	ldr	r1, [pc, #424]	; (8003250 <WRITE+0x2d0>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff f8dc 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(intensidadLuz, "value", cJSON_CreateString("72.96, 100.0,0.0,79.60")); //Need to get current Value
 80030ac:	4878      	ldr	r0, [pc, #480]	; (8003290 <WRITE+0x310>)
 80030ae:	f7ff f8ef 	bl	8002290 <cJSON_CreateString>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4970      	ldr	r1, [pc, #448]	; (8003278 <WRITE+0x2f8>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff f8d3 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToArray(attributes, intensidadLuz);
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	69b8      	ldr	r0, [r7, #24]
 80030c2:	f7ff f860 	bl	8002186 <cJSON_AddItemToArray>

 	temperatura = cJSON_CreateObject();
 80030c6:	f7ff f91d 	bl	8002304 <cJSON_CreateObject>
 80030ca:	60b8      	str	r0, [r7, #8]
 	cJSON_AddItemToObject(temperatura, "name", cJSON_CreateString("Temperatura"));
 80030cc:	4871      	ldr	r0, [pc, #452]	; (8003294 <WRITE+0x314>)
 80030ce:	f7ff f8df 	bl	8002290 <cJSON_CreateString>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <WRITE+0x2ec>)
 80030d8:	68b8      	ldr	r0, [r7, #8]
 80030da:	f7ff f8c3 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(temperatura, "type", cJSON_CreateString("floatArray"));
 80030de:	486b      	ldr	r0, [pc, #428]	; (800328c <WRITE+0x30c>)
 80030e0:	f7ff f8d6 	bl	8002290 <cJSON_CreateString>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4959      	ldr	r1, [pc, #356]	; (8003250 <WRITE+0x2d0>)
 80030ea:	68b8      	ldr	r0, [r7, #8]
 80030ec:	f7ff f8ba 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(temperatura, "value", cJSON_CreateString("72.96, 100.0,0.0,79.60"));
 80030f0:	4867      	ldr	r0, [pc, #412]	; (8003290 <WRITE+0x310>)
 80030f2:	f7ff f8cd 	bl	8002290 <cJSON_CreateString>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	495f      	ldr	r1, [pc, #380]	; (8003278 <WRITE+0x2f8>)
 80030fc:	68b8      	ldr	r0, [r7, #8]
 80030fe:	f7ff f8b1 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToArray(attributes, temperatura);
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	69b8      	ldr	r0, [r7, #24]
 8003106:	f7ff f83e 	bl	8002186 <cJSON_AddItemToArray>

 	statusCode = cJSON_CreateObject();
 800310a:	f7ff f8fb 	bl	8002304 <cJSON_CreateObject>
 800310e:	6078      	str	r0, [r7, #4]
 	cJSON_AddItemToObject(statusCode, "code", cJSON_CreateString("200"));
 8003110:	4861      	ldr	r0, [pc, #388]	; (8003298 <WRITE+0x318>)
 8003112:	f7ff f8bd 	bl	8002290 <cJSON_CreateString>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4960      	ldr	r1, [pc, #384]	; (800329c <WRITE+0x31c>)
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff f8a1 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(statusCode, "reasonPhrase", cJSON_CreateString("OK"));
 8003122:	485f      	ldr	r0, [pc, #380]	; (80032a0 <WRITE+0x320>)
 8003124:	f7ff f8b4 	bl	8002290 <cJSON_CreateString>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	495d      	ldr	r1, [pc, #372]	; (80032a4 <WRITE+0x324>)
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff f898 	bl	8002264 <cJSON_AddItemToObject>
 	cJSON_AddItemToObject(contextResponses, "statusCode", statusCode);
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	495c      	ldr	r1, [pc, #368]	; (80032a8 <WRITE+0x328>)
 8003138:	6a38      	ldr	r0, [r7, #32]
 800313a:	f7ff f893 	bl	8002264 <cJSON_AddItemToObject>


	while (1){
		signal=1;
 800313e:	2301      	movs	r3, #1
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
		printf("Trying to write");
 8003142:	485a      	ldr	r0, [pc, #360]	; (80032ac <WRITE+0x32c>)
 8003144:	f006 fd3c 	bl	8009bc0 <iprintf>
		do {
			if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <WRITE+0x330>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fb8b 	bl	800686c <xQueueSemaphoreTake>
 8003156:	4603      	mov	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d004      	beq.n	8003166 <WRITE+0x1e6>
				printf("\r\n\n\nHARAKIRI!!\n\n\n");
 800315c:	4855      	ldr	r0, [pc, #340]	; (80032b4 <WRITE+0x334>)
 800315e:	f006 fdb5 	bl	8009ccc <puts>
		   		HAL_NVIC_SystemReset();
 8003162:	f000 fda0 	bl	8003ca6 <HAL_NVIC_SystemReset>
			}

			// aquí tengo la exclusión mutua asegurada.
			if (COMM_request.command==0){ //nada quiere nada
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <WRITE+0x338>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d110      	bne.n	8003190 <WRITE+0x210>
				COMM_request.command=1;
 800316e:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <WRITE+0x338>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
				COMM_request.result=0;
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <WRITE+0x338>)
 8003176:	2200      	movs	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
				COMM_request.dst_port=80;
 800317a:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <WRITE+0x338>)
 800317c:	2250      	movs	r2, #80	; 0x50
 800317e:	609a      	str	r2, [r3, #8]
				COMM_request.dst_address=(uint8_t *)"pperez-seu-or.disca.upv.es:1026";
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <WRITE+0x338>)
 8003182:	4a4e      	ldr	r2, [pc, #312]	; (80032bc <WRITE+0x33c>)
 8003184:	60da      	str	r2, [r3, #12]
				//string request = "POST /v1/updateContext -H 'Content-Type: application/json' -d '" + cJSON_Print(root) +"' HTTP/1.1\r\n\r\n";
				COMM_request.HTTP_request=(uint8_t *) 	"POST /v1/updateContext \r\n 'Content-Type: application/json' \r\n '{ \"contextResponses\": [{\"contextElement\" : {\"type\" : \"Sensor\",\"isPattern\" : \"false\",\"id\" : \"SensorSEU_SBC00\",\"attributes\" : [{\"name\" :\"Alarma\",\"type\" : \"boolean\",\"value\" : \"F\"},{\"name\" : \"Alarma_src\",\"type\" : \"string\",\"value\" : \"SensorSEU_SBC003\"},{\"name\" :\"IntensidadLuz\",\"type\" : \"floatArray\",\"value\" : \"72.96, 100.0,0.0,79.60\"},{\"name\" : \"Temperatura\",\"type\" :\"floatArray\",\"value\" : \"29.31, 32.0, 25.0, 30.59\"}]},\"statusCode\" : {\"code\" : \"200\",\"reasonPhrase\" : \"OK\"}}]}' HTTP/1.1\r\n\r\n";
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <WRITE+0x338>)
 8003188:	4a4d      	ldr	r2, [pc, #308]	; (80032c0 <WRITE+0x340>)
 800318a:	611a      	str	r2, [r3, #16]
				signal=0;
 800318c:	2300      	movs	r3, #0
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		    xSemaphoreGive(COMM_xSem); // i’m going out critical section
 8003190:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <WRITE+0x330>)
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	f003 f8ed 	bl	8006378 <xQueueGenericSend>
		}while(signal);
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1d1      	bne.n	8003148 <WRITE+0x1c8>

  		// Here you must parse json response in COMM_request.response item
		do
		{

			if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 80031a4:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <WRITE+0x330>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f644 6120 	movw	r1, #20000	; 0x4e20
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fb5d 	bl	800686c <xQueueSemaphoreTake>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d01e      	beq.n	80031f6 <WRITE+0x276>
			printf("\r\n\n\nHARAKIRI!!\n\n\n");
 80031b8:	483e      	ldr	r0, [pc, #248]	; (80032b4 <WRITE+0x334>)
 80031ba:	f006 fd87 	bl	8009ccc <puts>
			HAL_NVIC_SystemReset();
 80031be:	f000 fd72 	bl	8003ca6 <HAL_NVIC_SystemReset>
			}

			while (COMM_request.result==0){
 80031c2:	e018      	b.n	80031f6 <WRITE+0x276>
				xSemaphoreGive(COMM_xSem); // i’m going out critical section
 80031c4:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <WRITE+0x330>)
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	2300      	movs	r3, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	f003 f8d3 	bl	8006378 <xQueueGenericSend>
				vTaskDelay(100/portTICK_RATE_MS );
 80031d2:	2064      	movs	r0, #100	; 0x64
 80031d4:	f003 ff94 	bl	8007100 <vTaskDelay>
				if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <WRITE+0x330>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f644 6120 	movw	r1, #20000	; 0x4e20
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 fb43 	bl	800686c <xQueueSemaphoreTake>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d004      	beq.n	80031f6 <WRITE+0x276>
					printf("\r\n\n\nHARAKIRI!!\n\n\n");
 80031ec:	4831      	ldr	r0, [pc, #196]	; (80032b4 <WRITE+0x334>)
 80031ee:	f006 fd6d 	bl	8009ccc <puts>
					HAL_NVIC_SystemReset();
 80031f2:	f000 fd58 	bl	8003ca6 <HAL_NVIC_SystemReset>
			while (COMM_request.result==0){
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <WRITE+0x338>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0e2      	beq.n	80031c4 <WRITE+0x244>
				}
			}
		}
		while(COMM_request.result==0);
 80031fe:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <WRITE+0x338>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ce      	beq.n	80031a4 <WRITE+0x224>
		xSemaphoreGive(COMM_xSem); // i’m going out critical section
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <WRITE+0x330>)
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	2300      	movs	r3, #0
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	f003 f8b2 	bl	8006378 <xQueueGenericSend>

////
	jsons1 = cJSON_Parse((const char *)COMM_request.HTTP_response);
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <WRITE+0x338>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fc59 	bl	8001ad0 <cJSON_Parse>
 800321e:	6038      	str	r0, [r7, #0]
	if (jsons1) {
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d052      	beq.n	80032cc <WRITE+0x34c>
				name = cJSON_GetObjectItem(jsons1, "utc_datetime");
 8003226:	4927      	ldr	r1, [pc, #156]	; (80032c4 <WRITE+0x344>)
 8003228:	6838      	ldr	r0, [r7, #0]
 800322a:	f7fe ff56 	bl	80020da <cJSON_GetObjectItem>
 800322e:	62b8      	str	r0, [r7, #40]	; 0x28
				printf("%s \r\n",name->valuestring);
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4619      	mov	r1, r3
 8003236:	4824      	ldr	r0, [pc, #144]	; (80032c8 <WRITE+0x348>)
 8003238:	f006 fcc2 	bl	8009bc0 <iprintf>
				cJSON_Delete(jsons1);
 800323c:	6838      	ldr	r0, [r7, #0]
 800323e:	f7fd ff4d 	bl	80010dc <cJSON_Delete>
 8003242:	e046      	b.n	80032d2 <WRITE+0x352>
 8003244:	0800d4b8 	.word	0x0800d4b8
 8003248:	0800d4c0 	.word	0x0800d4c0
 800324c:	0800d4d0 	.word	0x0800d4d0
 8003250:	0800d4d8 	.word	0x0800d4d8
 8003254:	0800d4e0 	.word	0x0800d4e0
 8003258:	0800d4e8 	.word	0x0800d4e8
 800325c:	0800d4f4 	.word	0x0800d4f4
 8003260:	0800d504 	.word	0x0800d504
 8003264:	0800d508 	.word	0x0800d508
 8003268:	0800d514 	.word	0x0800d514
 800326c:	0800d51c 	.word	0x0800d51c
 8003270:	0800d524 	.word	0x0800d524
 8003274:	0800d52c 	.word	0x0800d52c
 8003278:	0800d530 	.word	0x0800d530
 800327c:	0800d538 	.word	0x0800d538
 8003280:	0800d544 	.word	0x0800d544
 8003284:	0800d54c 	.word	0x0800d54c
 8003288:	0800d560 	.word	0x0800d560
 800328c:	0800d570 	.word	0x0800d570
 8003290:	0800d57c 	.word	0x0800d57c
 8003294:	0800d594 	.word	0x0800d594
 8003298:	0800d5a0 	.word	0x0800d5a0
 800329c:	0800d5a4 	.word	0x0800d5a4
 80032a0:	0800d5ac 	.word	0x0800d5ac
 80032a4:	0800d5b0 	.word	0x0800d5b0
 80032a8:	0800d5c0 	.word	0x0800d5c0
 80032ac:	0800d5cc 	.word	0x0800d5cc
 80032b0:	20000c20 	.word	0x20000c20
 80032b4:	0800d5dc 	.word	0x0800d5dc
 80032b8:	20000c08 	.word	0x20000c08
 80032bc:	0800d5f0 	.word	0x0800d5f0
 80032c0:	0800d610 	.word	0x0800d610
 80032c4:	0800d838 	.word	0x0800d838
 80032c8:	0800d848 	.word	0x0800d848
	}
	else
		printf("Response error task_WRITE\r\n");
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <WRITE+0x380>)
 80032ce:	f006 fcfd 	bl	8009ccc <puts>

////

		COMM_request.command=0;
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <WRITE+0x384>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
		COMM_request.result=0;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <WRITE+0x384>)
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]

		xSemaphoreGive(COMM_xSem); // i’m going out critical section
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <WRITE+0x388>)
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	2300      	movs	r3, #0
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	f003 f846 	bl	8006378 <xQueueGenericSend>

  		vTaskDelay(10/portTICK_RATE_MS );
 80032ec:	200a      	movs	r0, #10
 80032ee:	f003 ff07 	bl	8007100 <vTaskDelay>
		global_time_it++;
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <WRITE+0x38c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <WRITE+0x38c>)
 80032fa:	6013      	str	r3, [r2, #0]
		signal=1;
 80032fc:	e71f      	b.n	800313e <WRITE+0x1be>
 80032fe:	bf00      	nop
 8003300:	0800d850 	.word	0x0800d850
 8003304:	20000c08 	.word	0x20000c08
 8003308:	20000c20 	.word	0x20000c20
 800330c:	20001428 	.word	0x20001428

08003310 <Task_HW>:
#include "task_WIFI.h"
#include "semphr.h"

SemaphoreHandle_t WIFI_xSem = NULL;

void Task_HW( void *pvParameters ) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	for(;;)
	  {
		//runHW();
	    osDelay(1);
 8003318:	2001      	movs	r0, #1
 800331a:	f002 fe25 	bl	8005f68 <osDelay>
	  {
 800331e:	e7fb      	b.n	8003318 <Task_HW+0x8>

08003320 <Task_WIFI>:
	  }
}
void Task_WIFI( void *pvParameters ) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	WIFI_Boot();
 8003328:	f7ff fd4c 	bl	8002dc4 <WIFI_Boot>
	printf("\n\nboot done \n\n\r");
 800332c:	480b      	ldr	r0, [pc, #44]	; (800335c <Task_WIFI+0x3c>)
 800332e:	f006 fc47 	bl	8009bc0 <iprintf>
	for(;;)
	  {
		printf("checking wifi\n\n\r");
 8003332:	480b      	ldr	r0, [pc, #44]	; (8003360 <Task_WIFI+0x40>)
 8003334:	f006 fc44 	bl	8009bc0 <iprintf>
		int wifi = checkWIFI();
 8003338:	f7ff fde4 	bl	8002f04 <checkWIFI>
 800333c:	60f8      	str	r0, [r7, #12]
		printf("wifi int = %d\n\r", wifi);
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	4808      	ldr	r0, [pc, #32]	; (8003364 <Task_WIFI+0x44>)
 8003342:	f006 fc3d 	bl	8009bc0 <iprintf>
		if(wifi = 0) {
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <Task_WIFI+0x34>
			WIFI_Boot();
 8003350:	f7ff fd38 	bl	8002dc4 <WIFI_Boot>
		}
		osDelay(1);
 8003354:	2001      	movs	r0, #1
 8003356:	f002 fe07 	bl	8005f68 <osDelay>
	  {
 800335a:	e7ea      	b.n	8003332 <Task_WIFI+0x12>
 800335c:	0800d86c 	.word	0x0800d86c
 8003360:	0800d87c 	.word	0x0800d87c
 8003364:	0800d890 	.word	0x0800d890

08003368 <Task_WRITE>:
	  }
}

void Task_WRITE() {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	while(global_wifi_ready == 0) {
 800336c:	e006      	b.n	800337c <Task_WRITE+0x14>
		printf("\n\n wifi not ready \n\n\r");
 800336e:	4809      	ldr	r0, [pc, #36]	; (8003394 <Task_WRITE+0x2c>)
 8003370:	f006 fc26 	bl	8009bc0 <iprintf>
		osDelay(5000);
 8003374:	f241 3088 	movw	r0, #5000	; 0x1388
 8003378:	f002 fdf6 	bl	8005f68 <osDelay>
	while(global_wifi_ready == 0) {
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <Task_WRITE+0x30>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f4      	beq.n	800336e <Task_WRITE+0x6>
	}
	printf("wifi ready");
 8003384:	4805      	ldr	r0, [pc, #20]	; (800339c <Task_WRITE+0x34>)
 8003386:	f006 fc1b 	bl	8009bc0 <iprintf>
	WRITE();
 800338a:	f7ff fdf9 	bl	8002f80 <WRITE>
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	0800d8a0 	.word	0x0800d8a0
 8003398:	2000142c 	.word	0x2000142c
 800339c:	0800d8b8 	.word	0x0800d8b8

080033a0 <CONFIGURACION_INICIAL>:
	  {
	    osDelay(1);
	  }
}

void CONFIGURACION_INICIAL(void){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af02      	add	r7, sp, #8
 BaseType_t res_task;
 res_task=xTaskCreate(Task_HW,"HW",2048,NULL,NORMAL_PRIORITY,NULL);
 80033a6:	2300      	movs	r3, #0
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	231b      	movs	r3, #27
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b4:	491f      	ldr	r1, [pc, #124]	; (8003434 <CONFIGURACION_INICIAL+0x94>)
 80033b6:	4820      	ldr	r0, [pc, #128]	; (8003438 <CONFIGURACION_INICIAL+0x98>)
 80033b8:	f003 fd47 	bl	8006e4a <xTaskCreate>
 80033bc:	6078      	str	r0, [r7, #4]
 		if( res_task != pdPASS ){
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d006      	beq.n	80033d2 <CONFIGURACION_INICIAL+0x32>
 				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 80033c4:	481d      	ldr	r0, [pc, #116]	; (800343c <CONFIGURACION_INICIAL+0x9c>)
 80033c6:	f006 fc81 	bl	8009ccc <puts>
 				fflush(NULL);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f005 fd58 	bl	8008e80 <fflush>
 				while(1);
 80033d0:	e7fe      	b.n	80033d0 <CONFIGURACION_INICIAL+0x30>
 		}

 res_task=xTaskCreate(Task_WIFI,"WIFI",2048,NULL,NORMAL_PRIORITY ,NULL);
 80033d2:	2300      	movs	r3, #0
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	231b      	movs	r3, #27
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2300      	movs	r3, #0
 80033dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e0:	4917      	ldr	r1, [pc, #92]	; (8003440 <CONFIGURACION_INICIAL+0xa0>)
 80033e2:	4818      	ldr	r0, [pc, #96]	; (8003444 <CONFIGURACION_INICIAL+0xa4>)
 80033e4:	f003 fd31 	bl	8006e4a <xTaskCreate>
 80033e8:	6078      	str	r0, [r7, #4]
 			if( res_task != pdPASS ){
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d006      	beq.n	80033fe <CONFIGURACION_INICIAL+0x5e>
 					printf("PANIC: Error al crear Tarea Visualizador\r\n");
 80033f0:	4812      	ldr	r0, [pc, #72]	; (800343c <CONFIGURACION_INICIAL+0x9c>)
 80033f2:	f006 fc6b 	bl	8009ccc <puts>
 					fflush(NULL);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f005 fd42 	bl	8008e80 <fflush>
 					while(1);
 80033fc:	e7fe      	b.n	80033fc <CONFIGURACION_INICIAL+0x5c>
 			}

 res_task=xTaskCreate( Task_WRITE,"WRITE",2048,NULL,	NORMAL_PRIORITY,NULL);
 80033fe:	2300      	movs	r3, #0
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	231b      	movs	r3, #27
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2300      	movs	r3, #0
 8003408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <CONFIGURACION_INICIAL+0xa8>)
 800340e:	480f      	ldr	r0, [pc, #60]	; (800344c <CONFIGURACION_INICIAL+0xac>)
 8003410:	f003 fd1b 	bl	8006e4a <xTaskCreate>
 8003414:	6078      	str	r0, [r7, #4]
 	 	 	if( res_task != pdPASS ){
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d006      	beq.n	800342a <CONFIGURACION_INICIAL+0x8a>
 					bprintf("PANIC: Error al crear Tarea TIME\r\n");
 800341c:	480c      	ldr	r0, [pc, #48]	; (8003450 <CONFIGURACION_INICIAL+0xb0>)
 800341e:	f7ff fc5d 	bl	8002cdc <bprintf>
 					fflush(NULL);
 8003422:	2000      	movs	r0, #0
 8003424:	f005 fd2c 	bl	8008e80 <fflush>
 					while(1);
 8003428:	e7fe      	b.n	8003428 <CONFIGURACION_INICIAL+0x88>
 				}

}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	0800d8c4 	.word	0x0800d8c4
 8003438:	08003311 	.word	0x08003311
 800343c:	0800d8c8 	.word	0x0800d8c8
 8003440:	0800d8f4 	.word	0x0800d8f4
 8003444:	08003321 	.word	0x08003321
 8003448:	0800d8fc 	.word	0x0800d8fc
 800344c:	08003369 	.word	0x08003369
 8003450:	0800d904 	.word	0x0800d904

08003454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800348c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800345a:	490e      	ldr	r1, [pc, #56]	; (8003494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800345c:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003460:	e002      	b.n	8003468 <LoopCopyDataInit>

08003462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003466:	3304      	adds	r3, #4

08003468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800346c:	d3f9      	bcc.n	8003462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346e:	4a0b      	ldr	r2, [pc, #44]	; (800349c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003470:	4c0b      	ldr	r4, [pc, #44]	; (80034a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003474:	e001      	b.n	800347a <LoopFillZerobss>

08003476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003478:	3204      	adds	r2, #4

0800347a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800347c:	d3fb      	bcc.n	8003476 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800347e:	f7ff fc1b 	bl	8002cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003482:	f005 fe05 	bl	8009090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003486:	f7fe ff71 	bl	800236c <main>
  bx  lr    
 800348a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800348c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003494:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003498:	0800de14 	.word	0x0800de14
  ldr r2, =_sbss
 800349c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80034a0:	20015ad4 	.word	0x20015ad4

080034a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a4:	e7fe      	b.n	80034a4 <ADC_IRQHandler>
	...

080034a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_Init+0x40>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <HAL_Init+0x40>)
 80034b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_Init+0x40>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_Init+0x40>)
 80034be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_Init+0x40>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_Init+0x40>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f000 fbb3 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034d6:	200f      	movs	r0, #15
 80034d8:	f000 f808 	bl	80034ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034dc:	f7ff f97c 	bl	80027d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023c00 	.word	0x40023c00

080034ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_InitTick+0x54>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_InitTick+0x58>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003502:	fbb3 f3f1 	udiv	r3, r3, r1
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fbcf 	bl	8003cae <HAL_SYSTICK_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e00e      	b.n	8003538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b0f      	cmp	r3, #15
 800351e:	d80a      	bhi.n	8003536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003520:	2200      	movs	r2, #0
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f000 fb93 	bl	8003c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <HAL_InitTick+0x5c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e000      	b.n	8003538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000000c 	.word	0x2000000c
 8003544:	20000014 	.word	0x20000014
 8003548:	20000010 	.word	0x20000010

0800354c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x20>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_IncTick+0x24>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_IncTick+0x24>)
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000014 	.word	0x20000014
 8003570:	20001430 	.word	0x20001430

08003574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_GetTick+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20001430 	.word	0x20001430

0800358c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e033      	b.n	800360a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff f940 	bl	8002830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d118      	bne.n	80035fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035d2:	f023 0302 	bic.w	r3, r3, #2
 80035d6:	f043 0202 	orr.w	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f94a 	bl	8003878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
 80035fa:	e001      	b.n	8003600 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x1c>
 800362c:	2302      	movs	r3, #2
 800362e:	e113      	b.n	8003858 <HAL_ADC_ConfigChannel+0x244>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b09      	cmp	r3, #9
 800363e:	d925      	bls.n	800368c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68d9      	ldr	r1, [r3, #12]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	3b1e      	subs	r3, #30
 8003656:	2207      	movs	r2, #7
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43da      	mvns	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	400a      	ands	r2, r1
 8003664:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68d9      	ldr	r1, [r3, #12]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	4618      	mov	r0, r3
 8003678:	4603      	mov	r3, r0
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4403      	add	r3, r0
 800367e:	3b1e      	subs	r3, #30
 8003680:	409a      	lsls	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e022      	b.n	80036d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6919      	ldr	r1, [r3, #16]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	2207      	movs	r2, #7
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	400a      	ands	r2, r1
 80036ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6919      	ldr	r1, [r3, #16]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4403      	add	r3, r0
 80036c8:	409a      	lsls	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d824      	bhi.n	8003724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	3b05      	subs	r3, #5
 80036ec:	221f      	movs	r2, #31
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	400a      	ands	r2, r1
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	4618      	mov	r0, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	3b05      	subs	r3, #5
 8003716:	fa00 f203 	lsl.w	r2, r0, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
 8003722:	e04c      	b.n	80037be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d824      	bhi.n	8003776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	3b23      	subs	r3, #35	; 0x23
 800373e:	221f      	movs	r2, #31
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43da      	mvns	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	400a      	ands	r2, r1
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	4618      	mov	r0, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	3b23      	subs	r3, #35	; 0x23
 8003768:	fa00 f203 	lsl.w	r2, r0, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
 8003774:	e023      	b.n	80037be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	3b41      	subs	r3, #65	; 0x41
 8003788:	221f      	movs	r2, #31
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	400a      	ands	r2, r1
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	4618      	mov	r0, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	3b41      	subs	r3, #65	; 0x41
 80037b2:	fa00 f203 	lsl.w	r2, r0, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037be:	4b29      	ldr	r3, [pc, #164]	; (8003864 <HAL_ADC_ConfigChannel+0x250>)
 80037c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_ADC_ConfigChannel+0x254>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10f      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1d8>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b12      	cmp	r3, #18
 80037d2:	d10b      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_ADC_ConfigChannel+0x254>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d12b      	bne.n	800384e <HAL_ADC_ConfigChannel+0x23a>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_ADC_ConfigChannel+0x258>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <HAL_ADC_ConfigChannel+0x1f4>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b11      	cmp	r3, #17
 8003806:	d122      	bne.n	800384e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a11      	ldr	r2, [pc, #68]	; (800386c <HAL_ADC_ConfigChannel+0x258>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_ADC_ConfigChannel+0x25c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a11      	ldr	r2, [pc, #68]	; (8003874 <HAL_ADC_ConfigChannel+0x260>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9a      	lsrs	r2, r3, #18
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003840:	e002      	b.n	8003848 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3b01      	subs	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f9      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40012300 	.word	0x40012300
 8003868:	40012000 	.word	0x40012000
 800386c:	10000012 	.word	0x10000012
 8003870:	2000000c 	.word	0x2000000c
 8003874:	431bde83 	.word	0x431bde83

08003878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003880:	4b79      	ldr	r3, [pc, #484]	; (8003a68 <ADC_Init+0x1f0>)
 8003882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <ADC_Init+0x1f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800391e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	e00f      	b.n	8003976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0202 	bic.w	r2, r2, #2
 8003984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6899      	ldr	r1, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7e1b      	ldrb	r3, [r3, #24]
 8003990:	005a      	lsls	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	3b01      	subs	r3, #1
 80039d0:	035a      	lsls	r2, r3, #13
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e007      	b.n	80039ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	051a      	lsls	r2, r3, #20
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a2e:	025a      	lsls	r2, r3, #9
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6899      	ldr	r1, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	029a      	lsls	r2, r3, #10
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40012300 	.word	0x40012300
 8003a6c:	0f000001 	.word	0x0f000001

08003a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aa2:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	60d3      	str	r3, [r2, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 0307 	and.w	r3, r3, #7
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db0b      	blt.n	8003afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	f003 021f 	and.w	r2, r3, #31
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <__NVIC_EnableIRQ+0x38>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2001      	movs	r0, #1
 8003af6:	fa00 f202 	lsl.w	r2, r0, r2
 8003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000e100 	.word	0xe000e100

08003b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	6039      	str	r1, [r7, #0]
 8003b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	db0a      	blt.n	8003b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	490c      	ldr	r1, [pc, #48]	; (8003b5c <__NVIC_SetPriority+0x4c>)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	0112      	lsls	r2, r2, #4
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	440b      	add	r3, r1
 8003b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b38:	e00a      	b.n	8003b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4908      	ldr	r1, [pc, #32]	; (8003b60 <__NVIC_SetPriority+0x50>)
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	3b04      	subs	r3, #4
 8003b48:	0112      	lsls	r2, r2, #4
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	761a      	strb	r2, [r3, #24]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e100 	.word	0xe000e100
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	; 0x24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f1c3 0307 	rsb	r3, r3, #7
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	bf28      	it	cs
 8003b82:	2304      	movcs	r3, #4
 8003b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d902      	bls.n	8003b94 <NVIC_EncodePriority+0x30>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3b03      	subs	r3, #3
 8003b92:	e000      	b.n	8003b96 <NVIC_EncodePriority+0x32>
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bac:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	43d9      	mvns	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	4313      	orrs	r3, r2
         );
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bd0:	f3bf 8f4f 	dsb	sy
}
 8003bd4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <__NVIC_SystemReset+0x24>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003bde:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <__NVIC_SystemReset+0x24>)
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <__NVIC_SystemReset+0x28>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003be6:	f3bf 8f4f 	dsb	sy
}
 8003bea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <__NVIC_SystemReset+0x20>
 8003bf0:	e000ed00 	.word	0xe000ed00
 8003bf4:	05fa0004 	.word	0x05fa0004

08003bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c08:	d301      	bcc.n	8003c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <SysTick_Config+0x40>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c16:	210f      	movs	r1, #15
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f7ff ff78 	bl	8003b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <SysTick_Config+0x40>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SysTick_Config+0x40>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	e000e010 	.word	0xe000e010

08003c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff13 	bl	8003a70 <__NVIC_SetPriorityGrouping>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c64:	f7ff ff28 	bl	8003ab8 <__NVIC_GetPriorityGrouping>
 8003c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff ff78 	bl	8003b64 <NVIC_EncodePriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff47 	bl	8003b10 <__NVIC_SetPriority>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff1b 	bl	8003ad4 <__NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003caa:	f7ff ff8f 	bl	8003bcc <__NVIC_SystemReset>

08003cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ff9e 	bl	8003bf8 <SysTick_Config>
 8003cbc:	4603      	mov	r3, r0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cd4:	f7ff fc4e 	bl	8003574 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e099      	b.n	8003e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d04:	e00f      	b.n	8003d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d06:	f7ff fc35 	bl	8003574 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d908      	bls.n	8003d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e078      	b.n	8003e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e8      	bne.n	8003d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <HAL_DMA_Init+0x158>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d107      	bne.n	8003d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d117      	bne.n	8003dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00e      	beq.n	8003dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fadf 	bl	8004390 <DMA_CheckFifoParam>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003de6:	2301      	movs	r3, #1
 8003de8:	e016      	b.n	8003e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa96 	bl	8004324 <DMA_CalcBaseAndBitshift>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	223f      	movs	r2, #63	; 0x3f
 8003e02:	409a      	lsls	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	f010803f 	.word	0xf010803f

08003e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_DMA_Start_IT+0x26>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e040      	b.n	8003ecc <HAL_DMA_Start_IT+0xa8>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d12f      	bne.n	8003ebe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa28 	bl	80042c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	223f      	movs	r2, #63	; 0x3f
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0216 	orr.w	r2, r2, #22
 8003e92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e005      	b.n	8003eca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee2:	f7ff fb47 	bl	8003574 <HAL_GetTick>
 8003ee6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d008      	beq.n	8003f06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2280      	movs	r2, #128	; 0x80
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e052      	b.n	8003fac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0216 	bic.w	r2, r2, #22
 8003f14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <HAL_DMA_Abort+0x62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0208 	bic.w	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f56:	e013      	b.n	8003f80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f58:	f7ff fb0c 	bl	8003574 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d90c      	bls.n	8003f80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e015      	b.n	8003fac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e4      	bne.n	8003f58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	223f      	movs	r2, #63	; 0x3f
 8003f94:	409a      	lsls	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	; (80041fc <HAL_DMA_IRQHandler+0x248>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a8e      	ldr	r2, [pc, #568]	; (8004200 <HAL_DMA_IRQHandler+0x24c>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	0a9b      	lsrs	r3, r3, #10
 8003fcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	2208      	movs	r2, #8
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01a      	beq.n	8004020 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	2208      	movs	r2, #8
 800400e:	409a      	lsls	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	2201      	movs	r2, #1
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d012      	beq.n	8004056 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	2201      	movs	r2, #1
 8004044:	409a      	lsls	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	2204      	movs	r2, #4
 800405c:	409a      	lsls	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d012      	beq.n	800408c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	2204      	movs	r2, #4
 800407a:	409a      	lsls	r2, r3
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f043 0204 	orr.w	r2, r3, #4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	2210      	movs	r2, #16
 8004092:	409a      	lsls	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d043      	beq.n	8004124 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03c      	beq.n	8004124 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	2210      	movs	r2, #16
 80040b0:	409a      	lsls	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d024      	beq.n	8004124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
 80040e2:	e01f      	b.n	8004124 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01b      	beq.n	8004124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e016      	b.n	8004124 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0208 	bic.w	r2, r2, #8
 8004112:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	2220      	movs	r2, #32
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 808f 	beq.w	8004254 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8087 	beq.w	8004254 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	2220      	movs	r2, #32
 800414c:	409a      	lsls	r2, r3
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b05      	cmp	r3, #5
 800415c:	d136      	bne.n	80041cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0216 	bic.w	r2, r2, #22
 800416c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800417c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <HAL_DMA_IRQHandler+0x1da>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0208 	bic.w	r2, r2, #8
 800419c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a2:	223f      	movs	r2, #63	; 0x3f
 80041a4:	409a      	lsls	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d07e      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
        }
        return;
 80041ca:	e079      	b.n	80042c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01d      	beq.n	8004216 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d031      	beq.n	8004254 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
 80041f8:	e02c      	b.n	8004254 <HAL_DMA_IRQHandler+0x2a0>
 80041fa:	bf00      	nop
 80041fc:	2000000c 	.word	0x2000000c
 8004200:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d023      	beq.n	8004254 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e01e      	b.n	8004254 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10f      	bne.n	8004244 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0210 	bic.w	r2, r2, #16
 8004232:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	2b00      	cmp	r3, #0
 800425a:	d032      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d022      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2205      	movs	r2, #5
 800426c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3301      	adds	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	d307      	bcc.n	800429c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f2      	bne.n	8004280 <HAL_DMA_IRQHandler+0x2cc>
 800429a:	e000      	b.n	800429e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800429c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
 80042be:	e000      	b.n	80042c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042c0:	bf00      	nop
    }
  }
}
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d108      	bne.n	8004308 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004306:	e007      	b.n	8004318 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	3b10      	subs	r3, #16
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <DMA_CalcBaseAndBitshift+0x64>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <DMA_CalcBaseAndBitshift+0x68>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d909      	bls.n	8004366 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	659a      	str	r2, [r3, #88]	; 0x58
 8004364:	e007      	b.n	8004376 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	aaaaaaab 	.word	0xaaaaaaab
 800438c:	0800d958 	.word	0x0800d958

08004390 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d11f      	bne.n	80043ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d856      	bhi.n	800445e <DMA_CheckFifoParam+0xce>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <DMA_CheckFifoParam+0x28>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043db 	.word	0x080043db
 80043c0:	080043c9 	.word	0x080043c9
 80043c4:	0800445f 	.word	0x0800445f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d046      	beq.n	8004462 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e043      	b.n	8004462 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043e2:	d140      	bne.n	8004466 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e8:	e03d      	b.n	8004466 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	d121      	bne.n	8004438 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d837      	bhi.n	800446a <DMA_CheckFifoParam+0xda>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <DMA_CheckFifoParam+0x70>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004411 	.word	0x08004411
 8004404:	08004417 	.word	0x08004417
 8004408:	08004411 	.word	0x08004411
 800440c:	08004429 	.word	0x08004429
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      break;
 8004414:	e030      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d025      	beq.n	800446e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004426:	e022      	b.n	800446e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004430:	d11f      	bne.n	8004472 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004436:	e01c      	b.n	8004472 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d903      	bls.n	8004446 <DMA_CheckFifoParam+0xb6>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d003      	beq.n	800444c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004444:	e018      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      break;
 800444a:	e015      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      break;
 800445c:	e00b      	b.n	8004476 <DMA_CheckFifoParam+0xe6>
      break;
 800445e:	bf00      	nop
 8004460:	e00a      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      break;
 8004462:	bf00      	nop
 8004464:	e008      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      break;
 8004466:	bf00      	nop
 8004468:	e006      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      break;
 800446a:	bf00      	nop
 800446c:	e004      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      break;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      break;   
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <DMA_CheckFifoParam+0xe8>
      break;
 8004476:	bf00      	nop
    }
  } 
  
  return status; 
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e159      	b.n	8004758 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044a4:	2201      	movs	r2, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	f040 8148 	bne.w	8004752 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d005      	beq.n	80044da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d130      	bne.n	800453c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	2203      	movs	r2, #3
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004510:	2201      	movs	r2, #1
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 0201 	and.w	r2, r3, #1
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b03      	cmp	r3, #3
 8004546:	d017      	beq.n	8004578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d123      	bne.n	80045cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	220f      	movs	r2, #15
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	08da      	lsrs	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3208      	adds	r2, #8
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	2203      	movs	r2, #3
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0203 	and.w	r2, r3, #3
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a2 	beq.w	8004752 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	4b57      	ldr	r3, [pc, #348]	; (8004770 <HAL_GPIO_Init+0x2e8>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	4a56      	ldr	r2, [pc, #344]	; (8004770 <HAL_GPIO_Init+0x2e8>)
 8004618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461c:	6453      	str	r3, [r2, #68]	; 0x44
 800461e:	4b54      	ldr	r3, [pc, #336]	; (8004770 <HAL_GPIO_Init+0x2e8>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462a:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_GPIO_Init+0x2ec>)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	3302      	adds	r3, #2
 8004632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	220f      	movs	r2, #15
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a49      	ldr	r2, [pc, #292]	; (8004778 <HAL_GPIO_Init+0x2f0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d019      	beq.n	800468a <HAL_GPIO_Init+0x202>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a48      	ldr	r2, [pc, #288]	; (800477c <HAL_GPIO_Init+0x2f4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_GPIO_Init+0x1fe>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a47      	ldr	r2, [pc, #284]	; (8004780 <HAL_GPIO_Init+0x2f8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00d      	beq.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a46      	ldr	r2, [pc, #280]	; (8004784 <HAL_GPIO_Init+0x2fc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <HAL_GPIO_Init+0x1f6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a45      	ldr	r2, [pc, #276]	; (8004788 <HAL_GPIO_Init+0x300>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_GPIO_Init+0x1f2>
 8004676:	2304      	movs	r3, #4
 8004678:	e008      	b.n	800468c <HAL_GPIO_Init+0x204>
 800467a:	2307      	movs	r3, #7
 800467c:	e006      	b.n	800468c <HAL_GPIO_Init+0x204>
 800467e:	2303      	movs	r3, #3
 8004680:	e004      	b.n	800468c <HAL_GPIO_Init+0x204>
 8004682:	2302      	movs	r3, #2
 8004684:	e002      	b.n	800468c <HAL_GPIO_Init+0x204>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_GPIO_Init+0x204>
 800468a:	2300      	movs	r3, #0
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	f002 0203 	and.w	r2, r2, #3
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	4093      	lsls	r3, r2
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800469c:	4935      	ldr	r1, [pc, #212]	; (8004774 <HAL_GPIO_Init+0x2ec>)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	3302      	adds	r3, #2
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046aa:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_GPIO_Init+0x304>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ce:	4a2f      	ldr	r2, [pc, #188]	; (800478c <HAL_GPIO_Init+0x304>)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d4:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_GPIO_Init+0x304>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <HAL_GPIO_Init+0x304>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <HAL_GPIO_Init+0x304>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <HAL_GPIO_Init+0x304>)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004728:	4b18      	ldr	r3, [pc, #96]	; (800478c <HAL_GPIO_Init+0x304>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800474c:	4a0f      	ldr	r2, [pc, #60]	; (800478c <HAL_GPIO_Init+0x304>)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	f67f aea2 	bls.w	80044a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	40013800 	.word	0x40013800
 8004778:	40020000 	.word	0x40020000
 800477c:	40020400 	.word	0x40020400
 8004780:	40020800 	.word	0x40020800
 8004784:	40020c00 	.word	0x40020c00
 8004788:	40021000 	.word	0x40021000
 800478c:	40013c00 	.word	0x40013c00

08004790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
 800479c:	4613      	mov	r3, r2
 800479e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a0:	787b      	ldrb	r3, [r7, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ac:	e003      	b.n	80047b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	041a      	lsls	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	619a      	str	r2, [r3, #24]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e267      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d075      	beq.n	80048ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e2:	4b88      	ldr	r3, [pc, #544]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d00c      	beq.n	8004808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ee:	4b85      	ldr	r3, [pc, #532]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d112      	bne.n	8004820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fa:	4b82      	ldr	r3, [pc, #520]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004806:	d10b      	bne.n	8004820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	4b7e      	ldr	r3, [pc, #504]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05b      	beq.n	80048cc <HAL_RCC_OscConfig+0x108>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d157      	bne.n	80048cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e242      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x74>
 800482a:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a75      	ldr	r2, [pc, #468]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e01d      	b.n	8004874 <HAL_RCC_OscConfig+0xb0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004840:	d10c      	bne.n	800485c <HAL_RCC_OscConfig+0x98>
 8004842:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a6f      	ldr	r2, [pc, #444]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b6d      	ldr	r3, [pc, #436]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6c      	ldr	r2, [pc, #432]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e00b      	b.n	8004874 <HAL_RCC_OscConfig+0xb0>
 800485c:	4b69      	ldr	r3, [pc, #420]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a68      	ldr	r2, [pc, #416]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 800486e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fe fe7a 	bl	8003574 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fe fe76 	bl	8003574 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e207      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b5b      	ldr	r3, [pc, #364]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0xc0>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7fe fe66 	bl	8003574 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ac:	f7fe fe62 	bl	8003574 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	; 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e1f3      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048be:	4b51      	ldr	r3, [pc, #324]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0xe8>
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d063      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048da:	4b4a      	ldr	r3, [pc, #296]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d11c      	bne.n	800492c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f2:	4b44      	ldr	r3, [pc, #272]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d116      	bne.n	800492c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fe:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_RCC_OscConfig+0x152>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d001      	beq.n	8004916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e1c7      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4937      	ldr	r1, [pc, #220]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	e03a      	b.n	80049a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004934:	4b34      	ldr	r3, [pc, #208]	; (8004a08 <HAL_RCC_OscConfig+0x244>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fe fe1b 	bl	8003574 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004942:	f7fe fe17 	bl	8003574 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e1a8      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4925      	ldr	r1, [pc, #148]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	e015      	b.n	80049a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCC_OscConfig+0x244>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fdfa 	bl	8003574 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004984:	f7fe fdf6 	bl	8003574 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e187      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d036      	beq.n	8004a1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCC_OscConfig+0x248>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fe fdda 	bl	8003574 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fe fdd6 	bl	8003574 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e167      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_OscConfig+0x240>)
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x200>
 80049e2:	e01b      	b.n	8004a1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCC_OscConfig+0x248>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ea:	f7fe fdc3 	bl	8003574 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f0:	e00e      	b.n	8004a10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f2:	f7fe fdbf 	bl	8003574 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d907      	bls.n	8004a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e150      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
 8004a04:	40023800 	.word	0x40023800
 8004a08:	42470000 	.word	0x42470000
 8004a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1ea      	bne.n	80049f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8097 	beq.w	8004b58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a2e:	4b81      	ldr	r3, [pc, #516]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	4b7d      	ldr	r3, [pc, #500]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a7c      	ldr	r2, [pc, #496]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b7a      	ldr	r3, [pc, #488]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b77      	ldr	r3, [pc, #476]	; (8004c38 <HAL_RCC_OscConfig+0x474>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a66:	4b74      	ldr	r3, [pc, #464]	; (8004c38 <HAL_RCC_OscConfig+0x474>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a73      	ldr	r2, [pc, #460]	; (8004c38 <HAL_RCC_OscConfig+0x474>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fe fd7f 	bl	8003574 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fe fd7b 	bl	8003574 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e10c      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCC_OscConfig+0x474>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d106      	bne.n	8004aae <HAL_RCC_OscConfig+0x2ea>
 8004aa0:	4b64      	ldr	r3, [pc, #400]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a63      	ldr	r2, [pc, #396]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	e01c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x324>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x30c>
 8004ab6:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a5e      	ldr	r2, [pc, #376]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004abc:	f043 0304 	orr.w	r3, r3, #4
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac2:	4b5c      	ldr	r3, [pc, #368]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a5b      	ldr	r2, [pc, #364]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0x324>
 8004ad0:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a57      	ldr	r2, [pc, #348]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
 8004adc:	4b55      	ldr	r3, [pc, #340]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a54      	ldr	r2, [pc, #336]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	f023 0304 	bic.w	r3, r3, #4
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fe fd40 	bl	8003574 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fe fd3c 	bl	8003574 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e0cb      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0e:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ee      	beq.n	8004af8 <HAL_RCC_OscConfig+0x334>
 8004b1a:	e014      	b.n	8004b46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b1c:	f7fe fd2a 	bl	8003574 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fe fd26 	bl	8003574 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e0b5      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ee      	bne.n	8004b24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4a38      	ldr	r2, [pc, #224]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80a1 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b62:	4b34      	ldr	r3, [pc, #208]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d05c      	beq.n	8004c28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d141      	bne.n	8004bfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <HAL_RCC_OscConfig+0x478>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fcfa 	bl	8003574 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fe fcf6 	bl	8003574 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e087      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	019b      	lsls	r3, r3, #6
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	085b      	lsrs	r3, r3, #1
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	491b      	ldr	r1, [pc, #108]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <HAL_RCC_OscConfig+0x478>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fe fccf 	bl	8003574 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fe fccb 	bl	8003574 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e05c      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bec:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x416>
 8004bf8:	e054      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <HAL_RCC_OscConfig+0x478>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7fe fcb8 	bl	8003574 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fe fcb4 	bl	8003574 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e045      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0x444>
 8004c26:	e03d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d107      	bne.n	8004c40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e038      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <HAL_RCC_OscConfig+0x4ec>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d028      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d121      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d11a      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d111      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800

08004cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0cc      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d90c      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0b8      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d08:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a58      	ldr	r2, [pc, #352]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d20:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4a52      	ldr	r2, [pc, #328]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b50      	ldr	r3, [pc, #320]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	494d      	ldr	r1, [pc, #308]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d044      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d119      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d003      	beq.n	8004d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e06f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e067      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4934      	ldr	r1, [pc, #208]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da4:	f7fe fbe6 	bl	8003574 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fe fbe2 	bl	8003574 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e04f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d20c      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e032      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e08:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4916      	ldr	r1, [pc, #88]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	490e      	ldr	r1, [pc, #56]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e3a:	f000 f821 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	490a      	ldr	r1, [pc, #40]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004e4c:	5ccb      	ldrb	r3, [r1, r3]
 8004e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e52:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fb46 	bl	80034ec <HAL_InitTick>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023c00 	.word	0x40023c00
 8004e70:	40023800 	.word	0x40023800
 8004e74:	0800d940 	.word	0x0800d940
 8004e78:	2000000c 	.word	0x2000000c
 8004e7c:	20000010 	.word	0x20000010

08004e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e84:	b094      	sub	sp, #80	; 0x50
 8004e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e90:	2300      	movs	r3, #0
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e98:	4b79      	ldr	r3, [pc, #484]	; (8005080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	f200 80e1 	bhi.w	800506c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0x3a>
 8004eb2:	e0db      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b73      	ldr	r3, [pc, #460]	; (8005084 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004eb8:	e0db      	b.n	8005072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eba:	4b73      	ldr	r3, [pc, #460]	; (8005088 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ebc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ebe:	e0d8      	b.n	8005072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec0:	4b6f      	ldr	r3, [pc, #444]	; (8005080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eca:	4b6d      	ldr	r3, [pc, #436]	; (8005080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d063      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed6:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	2200      	movs	r2, #0
 8004ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eea:	2300      	movs	r3, #0
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
 8004eee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	f04f 0000 	mov.w	r0, #0
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	0159      	lsls	r1, r3, #5
 8004f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f04:	0150      	lsls	r0, r2, #5
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	1a51      	subs	r1, r2, r1
 8004f0e:	6139      	str	r1, [r7, #16]
 8004f10:	4629      	mov	r1, r5
 8004f12:	eb63 0301 	sbc.w	r3, r3, r1
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f24:	4659      	mov	r1, fp
 8004f26:	018b      	lsls	r3, r1, #6
 8004f28:	4651      	mov	r1, sl
 8004f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f2e:	4651      	mov	r1, sl
 8004f30:	018a      	lsls	r2, r1, #6
 8004f32:	4651      	mov	r1, sl
 8004f34:	ebb2 0801 	subs.w	r8, r2, r1
 8004f38:	4659      	mov	r1, fp
 8004f3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f52:	4690      	mov	r8, r2
 8004f54:	4699      	mov	r9, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	eb18 0303 	adds.w	r3, r8, r3
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	462b      	mov	r3, r5
 8004f60:	eb49 0303 	adc.w	r3, r9, r3
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f72:	4629      	mov	r1, r5
 8004f74:	024b      	lsls	r3, r1, #9
 8004f76:	4621      	mov	r1, r4
 8004f78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	024a      	lsls	r2, r1, #9
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f86:	2200      	movs	r2, #0
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f90:	f7fb fe42 	bl	8000c18 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9c:	e058      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9e:	4b38      	ldr	r3, [pc, #224]	; (8005080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	4611      	mov	r1, r2
 8004faa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fae:	623b      	str	r3, [r7, #32]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	f04f 0000 	mov.w	r0, #0
 8004fc0:	f04f 0100 	mov.w	r1, #0
 8004fc4:	0159      	lsls	r1, r3, #5
 8004fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fca:	0150      	lsls	r0, r2, #5
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ff0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ff4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	00eb      	lsls	r3, r5, #3
 8005002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005006:	00e2      	lsls	r2, r4, #3
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	4643      	mov	r3, r8
 800500e:	18e3      	adds	r3, r4, r3
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	464b      	mov	r3, r9
 8005014:	eb45 0303 	adc.w	r3, r5, r3
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005026:	4629      	mov	r1, r5
 8005028:	028b      	lsls	r3, r1, #10
 800502a:	4621      	mov	r1, r4
 800502c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005030:	4621      	mov	r1, r4
 8005032:	028a      	lsls	r2, r1, #10
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503a:	2200      	movs	r2, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	61fa      	str	r2, [r7, #28]
 8005040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005044:	f7fb fde8 	bl	8000c18 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4613      	mov	r3, r2
 800504e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_GetSysClockFreq+0x200>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	3301      	adds	r3, #1
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800506a:	e002      	b.n	8005072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetSysClockFreq+0x204>)
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005074:	4618      	mov	r0, r3
 8005076:	3750      	adds	r7, #80	; 0x50
 8005078:	46bd      	mov	sp, r7
 800507a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507e:	bf00      	nop
 8005080:	40023800 	.word	0x40023800
 8005084:	00f42400 	.word	0x00f42400
 8005088:	007a1200 	.word	0x007a1200

0800508c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	2000000c 	.word	0x2000000c

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a8:	f7ff fff0 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800d950 	.word	0x0800d950

080050cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050d0:	f7ff ffdc 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	0b5b      	lsrs	r3, r3, #13
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	4903      	ldr	r1, [pc, #12]	; (80050f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050e2:	5ccb      	ldrb	r3, [r1, r3]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800d950 	.word	0x0800d950

080050f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e03f      	b.n	8005186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fd fbcc 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	; 0x24
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fc23 	bl	8005984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800514c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800515c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800516c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b08a      	sub	sp, #40	; 0x28
 8005192:	af02      	add	r7, sp, #8
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d17c      	bne.n	80052a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_UART_Transmit+0x2c>
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e075      	b.n	80052aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_UART_Transmit+0x3e>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e06e      	b.n	80052aa <HAL_UART_Transmit+0x11c>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2221      	movs	r2, #33	; 0x21
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e2:	f7fe f9c7 	bl	8003574 <HAL_GetTick>
 80051e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88fa      	ldrh	r2, [r7, #6]
 80051f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fc:	d108      	bne.n	8005210 <HAL_UART_Transmit+0x82>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	e003      	b.n	8005218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005220:	e02a      	b.n	8005278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fa11 	bl	8005654 <UART_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e036      	b.n	80052aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	3302      	adds	r3, #2
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	e007      	b.n	800526a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	3301      	adds	r3, #1
 8005268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1cf      	bne.n	8005222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	2140      	movs	r1, #64	; 0x40
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f9e1 	bl	8005654 <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e000      	b.n	80052aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d11d      	bne.n	8005308 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_UART_Receive_DMA+0x26>
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e016      	b.n	800530a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Receive_DMA+0x38>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e00f      	b.n	800530a <HAL_UART_Receive_DMA+0x58>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	461a      	mov	r2, r3
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fa16 	bl	8005730 <UART_Start_Receive_DMA>
 8005304:	4603      	mov	r3, r0
 8005306:	e000      	b.n	800530a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b090      	sub	sp, #64	; 0x40
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b21      	cmp	r3, #33	; 0x21
 800533e:	d128      	bne.n	8005392 <HAL_UART_DMAStop+0x80>
 8005340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d025      	beq.n	8005392 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	623b      	str	r3, [r7, #32]
   return(result);
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005366:	633a      	str	r2, [r7, #48]	; 0x30
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800536c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fda4 	bl	8003ed4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fa6d 	bl	800586c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b22      	cmp	r3, #34	; 0x22
 80053b2:	d128      	bne.n	8005406 <HAL_UART_DMAStop+0xf4>
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d025      	beq.n	8005406 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053da:	61fa      	str	r2, [r7, #28]
 80053dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	617b      	str	r3, [r7, #20]
   return(result);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e5      	bne.n	80053ba <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fd6a 	bl	8003ed4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa5b 	bl	80058bc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3740      	adds	r7, #64	; 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b09c      	sub	sp, #112	; 0x70
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d172      	bne.n	8005566 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005482:	2200      	movs	r2, #0
 8005484:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549c:	66bb      	str	r3, [r7, #104]	; 0x68
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80054a8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e5      	bne.n	8005486 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	667b      	str	r3, [r7, #100]	; 0x64
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054da:	647a      	str	r2, [r7, #68]	; 0x44
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3314      	adds	r3, #20
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	623b      	str	r3, [r7, #32]
   return(result);
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005504:	663b      	str	r3, [r7, #96]	; 0x60
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3314      	adds	r3, #20
 800550c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800550e:	633a      	str	r2, [r7, #48]	; 0x30
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e5      	bne.n	80054ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	2b01      	cmp	r3, #1
 8005530:	d119      	bne.n	8005566 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	60fb      	str	r3, [r7, #12]
   return(result);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f023 0310 	bic.w	r3, r3, #16
 8005548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005552:	61fa      	str	r2, [r7, #28]
 8005554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	69b9      	ldr	r1, [r7, #24]
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	617b      	str	r3, [r7, #20]
   return(result);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	2b01      	cmp	r3, #1
 800556c:	d106      	bne.n	800557c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005572:	4619      	mov	r1, r3
 8005574:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005576:	f7ff ff69 	bl	800544c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800557a:	e002      	b.n	8005582 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800557c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800557e:	f7ff ff47 	bl	8005410 <HAL_UART_RxCpltCallback>
}
 8005582:	bf00      	nop
 8005584:	3770      	adds	r7, #112	; 0x70
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	2b01      	cmp	r3, #1
 800559e:	d108      	bne.n	80055b2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4619      	mov	r1, r3
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff4e 	bl	800544c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055b0:	e002      	b.n	80055b8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff ff36 	bl	8005424 <HAL_UART_RxHalfCpltCallback>
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b21      	cmp	r3, #33	; 0x21
 80055f2:	d108      	bne.n	8005606 <UART_DMAError+0x46>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2200      	movs	r2, #0
 80055fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005600:	68b8      	ldr	r0, [r7, #8]
 8005602:	f000 f933 	bl	800586c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b22      	cmp	r3, #34	; 0x22
 8005626:	d108      	bne.n	800563a <UART_DMAError+0x7a>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2200      	movs	r2, #0
 8005632:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005634:	68b8      	ldr	r0, [r7, #8]
 8005636:	f000 f941 	bl	80058bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0210 	orr.w	r2, r3, #16
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005646:	68b8      	ldr	r0, [r7, #8]
 8005648:	f7ff fef6 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b090      	sub	sp, #64	; 0x40
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005664:	e050      	b.n	8005708 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d04c      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800566e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <UART_WaitOnFlagUntilTimeout+0x30>
 8005674:	f7fd ff7e 	bl	8003574 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005680:	429a      	cmp	r2, r3
 8005682:	d241      	bcs.n	8005708 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056a4:	637a      	str	r2, [r7, #52]	; 0x34
 80056a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	613b      	str	r3, [r7, #16]
   return(result);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d8:	623a      	str	r2, [r7, #32]
 80056da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	69f9      	ldr	r1, [r7, #28]
 80056de:	6a3a      	ldr	r2, [r7, #32]
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e5      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e00f      	b.n	8005728 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	429a      	cmp	r2, r3
 8005724:	d09f      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3740      	adds	r7, #64	; 0x40
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b098      	sub	sp, #96	; 0x60
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2222      	movs	r2, #34	; 0x22
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	4a40      	ldr	r2, [pc, #256]	; (8005860 <UART_Start_Receive_DMA+0x130>)
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	4a3f      	ldr	r2, [pc, #252]	; (8005864 <UART_Start_Receive_DMA+0x134>)
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	4a3e      	ldr	r2, [pc, #248]	; (8005868 <UART_Start_Receive_DMA+0x138>)
 800576e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	2200      	movs	r2, #0
 8005776:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005778:	f107 0308 	add.w	r3, r7, #8
 800577c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	f7fe fb48 	bl	8003e24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d019      	beq.n	80057ee <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80057dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	657b      	str	r3, [r7, #84]	; 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800580e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	617b      	str	r3, [r7, #20]
   return(result);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005838:	653b      	str	r3, [r7, #80]	; 0x50
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005842:	627a      	str	r2, [r7, #36]	; 0x24
 8005844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6a39      	ldr	r1, [r7, #32]
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3760      	adds	r7, #96	; 0x60
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	08005465 	.word	0x08005465
 8005864:	0800558b 	.word	0x0800558b
 8005868:	080055c1 	.word	0x080055c1

0800586c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	60bb      	str	r3, [r7, #8]
   return(result);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	61ba      	str	r2, [r7, #24]
 8005896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6979      	ldr	r1, [r7, #20]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80058b0:	bf00      	nop
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b095      	sub	sp, #84	; 0x54
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058e4:	643a      	str	r2, [r7, #64]	; 0x40
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	61fb      	str	r3, [r7, #28]
   return(result);
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3314      	adds	r3, #20
 8005916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	2b01      	cmp	r3, #1
 8005932:	d119      	bne.n	8005968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	60bb      	str	r3, [r7, #8]
   return(result);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f023 0310 	bic.w	r3, r3, #16
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005954:	61ba      	str	r2, [r7, #24]
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	613b      	str	r3, [r7, #16]
   return(result);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005976:	bf00      	nop
 8005978:	3754      	adds	r7, #84	; 0x54
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b0c0      	sub	sp, #256	; 0x100
 800598a:	af00      	add	r7, sp, #0
 800598c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a0:	68d9      	ldr	r1, [r3, #12]
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	ea40 0301 	orr.w	r3, r0, r1
 80059ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059dc:	f021 010c 	bic.w	r1, r1, #12
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ea:	430b      	orrs	r3, r1
 80059ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	6999      	ldr	r1, [r3, #24]
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	ea40 0301 	orr.w	r3, r0, r1
 8005a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b8f      	ldr	r3, [pc, #572]	; (8005c50 <UART_SetConfig+0x2cc>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d005      	beq.n	8005a24 <UART_SetConfig+0xa0>
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <UART_SetConfig+0x2d0>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d104      	bne.n	8005a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7ff fb52 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8005a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a2c:	e003      	b.n	8005a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f7ff fb39 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8005a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	f040 810c 	bne.w	8005c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	1891      	adds	r1, r2, r2
 8005a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a5e:	415b      	adcs	r3, r3
 8005a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a66:	4621      	mov	r1, r4
 8005a68:	eb12 0801 	adds.w	r8, r2, r1
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	eb43 0901 	adc.w	r9, r3, r1
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a86:	4690      	mov	r8, r2
 8005a88:	4699      	mov	r9, r3
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	eb18 0303 	adds.w	r3, r8, r3
 8005a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a94:	462b      	mov	r3, r5
 8005a96:	eb49 0303 	adc.w	r3, r9, r3
 8005a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	18db      	adds	r3, r3, r3
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab8:	4613      	mov	r3, r2
 8005aba:	eb42 0303 	adc.w	r3, r2, r3
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ac8:	f7fb f8a6 	bl	8000c18 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	011c      	lsls	r4, r3, #4
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005af4:	415b      	adcs	r3, r3
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005afc:	4641      	mov	r1, r8
 8005afe:	eb12 0a01 	adds.w	sl, r2, r1
 8005b02:	4649      	mov	r1, r9
 8005b04:	eb43 0b01 	adc.w	fp, r3, r1
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1c:	4692      	mov	sl, r2
 8005b1e:	469b      	mov	fp, r3
 8005b20:	4643      	mov	r3, r8
 8005b22:	eb1a 0303 	adds.w	r3, sl, r3
 8005b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	18db      	adds	r3, r3, r3
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4e:	4613      	mov	r3, r2
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b5e:	f7fb f85b 	bl	8000c18 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2264      	movs	r2, #100	; 0x64
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	1acb      	subs	r3, r1, r3
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b7e:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b80:	fba3 2302 	umull	r2, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b8c:	441c      	add	r4, r3
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	1891      	adds	r1, r2, r2
 8005ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ba8:	415b      	adcs	r3, r3
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	1851      	adds	r1, r2, r1
 8005bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	414b      	adcs	r3, r1
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bc8:	4659      	mov	r1, fp
 8005bca:	00cb      	lsls	r3, r1, #3
 8005bcc:	4651      	mov	r1, sl
 8005bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	00ca      	lsls	r2, r1, #3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4642      	mov	r2, r8
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be4:	464b      	mov	r3, r9
 8005be6:	460a      	mov	r2, r1
 8005be8:	eb42 0303 	adc.w	r3, r2, r3
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c04:	460b      	mov	r3, r1
 8005c06:	18db      	adds	r3, r3, r3
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c1a:	f7fa fffd 	bl	8000c18 <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	2164      	movs	r1, #100	; 0x64
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 0207 	and.w	r2, r3, #7
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4422      	add	r2, r4
 8005c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c4c:	e105      	b.n	8005e5a <UART_SetConfig+0x4d6>
 8005c4e:	bf00      	nop
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40011400 	.word	0x40011400
 8005c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c6e:	4642      	mov	r2, r8
 8005c70:	464b      	mov	r3, r9
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	6239      	str	r1, [r7, #32]
 8005c76:	415b      	adcs	r3, r3
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7e:	4641      	mov	r1, r8
 8005c80:	1854      	adds	r4, r2, r1
 8005c82:	4649      	mov	r1, r9
 8005c84:	eb43 0501 	adc.w	r5, r3, r1
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	00eb      	lsls	r3, r5, #3
 8005c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c96:	00e2      	lsls	r2, r4, #3
 8005c98:	4614      	mov	r4, r2
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	18e3      	adds	r3, r4, r3
 8005ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	eb45 0303 	adc.w	r3, r5, r3
 8005caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cca:	4629      	mov	r1, r5
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	4621      	mov	r1, r4
 8005cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	008a      	lsls	r2, r1, #2
 8005cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cdc:	f7fa ff9c 	bl	8000c18 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b60      	ldr	r3, [pc, #384]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011c      	lsls	r4, r3, #4
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	61b9      	str	r1, [r7, #24]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6139      	str	r1, [r7, #16]
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d68:	4649      	mov	r1, r9
 8005d6a:	008b      	lsls	r3, r1, #2
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d72:	4641      	mov	r1, r8
 8005d74:	008a      	lsls	r2, r1, #2
 8005d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d7a:	f7fa ff4d 	bl	8000c18 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a34      	ldr	r2, [pc, #208]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	441c      	add	r4, r3
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	673b      	str	r3, [r7, #112]	; 0x70
 8005dac:	677a      	str	r2, [r7, #116]	; 0x74
 8005dae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005db2:	4642      	mov	r2, r8
 8005db4:	464b      	mov	r3, r9
 8005db6:	1891      	adds	r1, r2, r2
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	415b      	adcs	r3, r3
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	1851      	adds	r1, r2, r1
 8005dc6:	6039      	str	r1, [r7, #0]
 8005dc8:	4649      	mov	r1, r9
 8005dca:	414b      	adcs	r3, r1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dda:	4659      	mov	r1, fp
 8005ddc:	00cb      	lsls	r3, r1, #3
 8005dde:	4651      	mov	r1, sl
 8005de0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de4:	4651      	mov	r1, sl
 8005de6:	00ca      	lsls	r2, r1, #3
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	4642      	mov	r2, r8
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005df4:	464b      	mov	r3, r9
 8005df6:	460a      	mov	r2, r1
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
 8005e08:	667a      	str	r2, [r7, #100]	; 0x64
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e16:	4649      	mov	r1, r9
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4641      	mov	r1, r8
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e28:	f7fa fef6 	bl	8000c18 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 1302 	umull	r1, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2164      	movs	r1, #100	; 0x64
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	3332      	adds	r3, #50	; 0x32
 8005e44:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4422      	add	r2, r4
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <__NVIC_SetPriority>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	6039      	str	r1, [r7, #0]
 8005e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	db0a      	blt.n	8005e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	490c      	ldr	r1, [pc, #48]	; (8005eb8 <__NVIC_SetPriority+0x4c>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	440b      	add	r3, r1
 8005e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e94:	e00a      	b.n	8005eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4908      	ldr	r1, [pc, #32]	; (8005ebc <__NVIC_SetPriority+0x50>)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	0112      	lsls	r2, r2, #4
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	761a      	strb	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	e000e100 	.word	0xe000e100
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	f06f 0004 	mvn.w	r0, #4
 8005eca:	f7ff ffcf 	bl	8005e6c <__NVIC_SetPriority>
#endif
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eda:	f3ef 8305 	mrs	r3, IPSR
 8005ede:	603b      	str	r3, [r7, #0]
  return(result);
 8005ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ee6:	f06f 0305 	mvn.w	r3, #5
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e00c      	b.n	8005f08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <osKernelInitialize+0x44>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <osKernelInitialize+0x44>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	607b      	str	r3, [r7, #4]
 8005f00:	e002      	b.n	8005f08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
 8005f06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f08:	687b      	ldr	r3, [r7, #4]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20001434 	.word	0x20001434

08005f1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f22:	f3ef 8305 	mrs	r3, IPSR
 8005f26:	603b      	str	r3, [r7, #0]
  return(result);
 8005f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f2e:	f06f 0305 	mvn.w	r3, #5
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	e010      	b.n	8005f58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <osKernelStart+0x48>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d109      	bne.n	8005f52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f3e:	f7ff ffbf 	bl	8005ec0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <osKernelStart+0x48>)
 8005f44:	2202      	movs	r2, #2
 8005f46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f48:	f001 f90e 	bl	8007168 <vTaskStartScheduler>
      stat = osOK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	e002      	b.n	8005f58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f58:	687b      	ldr	r3, [r7, #4]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20001434 	.word	0x20001434

08005f68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f70:	f3ef 8305 	mrs	r3, IPSR
 8005f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <osDelay+0x1c>
    stat = osErrorISR;
 8005f7c:	f06f 0305 	mvn.w	r3, #5
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e007      	b.n	8005f94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 f8b6 	bl	8007100 <vTaskDelay>
    }
  }

  return (stat);
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8005fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8005fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2280      	movs	r2, #128	; 0x80
 8005fbc:	601a      	str	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	20001438 	.word	0x20001438
 8005fd0:	200014f4 	.word	0x200014f4

08005fd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a07      	ldr	r2, [pc, #28]	; (8006000 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a06      	ldr	r2, [pc, #24]	; (8006004 <vApplicationGetTimerTaskMemory+0x30>)
 8005fea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	200016f4 	.word	0x200016f4
 8006004:	200017b0 	.word	0x200017b0

08006008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f103 0208 	add.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f103 0208 	add.w	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f103 0208 	add.w	r2, r3, #8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d103      	bne.n	80060ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e00c      	b.n	80060e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3308      	adds	r3, #8
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e002      	b.n	80060d8 <vListInsert+0x2e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d2f6      	bcs.n	80060d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6892      	ldr	r2, [r2, #8]
 8006132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d103      	bne.n	8006150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1e5a      	subs	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800619a:	f002 fa9b 	bl	80086d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061aa:	fb01 f303 	mul.w	r3, r1, r3
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ca:	3b01      	subs	r3, #1
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d114      	bne.n	800621a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3310      	adds	r3, #16
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fa4d 	bl	800769c <xTaskRemoveFromEventList>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <xQueueGenericReset+0xcc>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	e009      	b.n	800622e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3310      	adds	r3, #16
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fef2 	bl	8006008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff feed 	bl	8006008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800622e:	f002 fa81 	bl	8008734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006232:	2301      	movs	r3, #1
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	; 0x38
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <xQueueGenericCreateStatic+0x52>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <xQueueGenericCreateStatic+0x56>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueGenericCreateStatic+0x58>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <xQueueGenericCreateStatic+0x7e>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <xQueueGenericCreateStatic+0x82>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueGenericCreateStatic+0x84>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61fb      	str	r3, [r7, #28]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062de:	2350      	movs	r3, #80	; 0x50
 80062e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b50      	cmp	r3, #80	; 0x50
 80062e6:	d00a      	beq.n	80062fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	61bb      	str	r3, [r7, #24]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006312:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f805 	bl	8006330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	; 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	e002      	b.n	8006352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800635e:	2101      	movs	r1, #1
 8006360:	69b8      	ldr	r0, [r7, #24]
 8006362:	f7ff ff05 	bl	8006170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08e      	sub	sp, #56	; 0x38
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericSend+0x32>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <xQueueGenericSend+0x40>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <xQueueGenericSend+0x44>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <xQueueGenericSend+0x46>
 80063bc:	2300      	movs	r3, #0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <xQueueGenericSend+0x60>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d103      	bne.n	80063e6 <xQueueGenericSend+0x6e>
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <xQueueGenericSend+0x72>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <xQueueGenericSend+0x74>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <xQueueGenericSend+0x8e>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	623b      	str	r3, [r7, #32]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006406:	f001 fb0b 	bl	8007a20 <xTaskGetSchedulerState>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xQueueGenericSend+0x9e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <xQueueGenericSend+0xa2>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xQueueGenericSend+0xa4>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <xQueueGenericSend+0xbe>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	61fb      	str	r3, [r7, #28]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006436:	f002 f94d 	bl	80086d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <xQueueGenericSend+0xd4>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d129      	bne.n	80064a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006452:	f000 fb2f 	bl	8006ab4 <prvCopyDataToQueue>
 8006456:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d010      	beq.n	8006482 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	3324      	adds	r3, #36	; 0x24
 8006464:	4618      	mov	r0, r3
 8006466:	f001 f919 	bl	800769c <xTaskRemoveFromEventList>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d013      	beq.n	8006498 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006470:	4b3f      	ldr	r3, [pc, #252]	; (8006570 <xQueueGenericSend+0x1f8>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	e00a      	b.n	8006498 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006488:	4b39      	ldr	r3, [pc, #228]	; (8006570 <xQueueGenericSend+0x1f8>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006498:	f002 f94c 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 800649c:	2301      	movs	r3, #1
 800649e:	e063      	b.n	8006568 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064a6:	f002 f945 	bl	8008734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e05c      	b.n	8006568 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 f953 	bl	8007764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064c2:	f002 f937 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064c6:	f000 febf 	bl	8007248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ca:	f002 f903 	bl	80086d4 <vPortEnterCritical>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d4:	b25b      	sxtb	r3, r3
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d103      	bne.n	80064e4 <xQueueGenericSend+0x16c>
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d103      	bne.n	80064fa <xQueueGenericSend+0x182>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fa:	f002 f91b 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064fe:	1d3a      	adds	r2, r7, #4
 8006500:	f107 0314 	add.w	r3, r7, #20
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f942 	bl	8007790 <xTaskCheckForTimeOut>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d124      	bne.n	800655c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006514:	f000 fbc6 	bl	8006ca4 <prvIsQueueFull>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d018      	beq.n	8006550 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	3310      	adds	r3, #16
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f001 f868 	bl	80075fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800652c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800652e:	f000 fb51 	bl	8006bd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006532:	f000 fe97 	bl	8007264 <xTaskResumeAll>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f af7c 	bne.w	8006436 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <xQueueGenericSend+0x1f8>)
 8006540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	e772      	b.n	8006436 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006552:	f000 fb3f 	bl	8006bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006556:	f000 fe85 	bl	8007264 <xTaskResumeAll>
 800655a:	e76c      	b.n	8006436 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800655c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800655e:	f000 fb39 	bl	8006bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006562:	f000 fe7f 	bl	8007264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006568:	4618      	mov	r0, r3
 800656a:	3738      	adds	r7, #56	; 0x38
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b090      	sub	sp, #64	; 0x40
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <xQueueGenericSendFromISR+0x3c>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <xQueueGenericSendFromISR+0x40>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <xQueueGenericSendFromISR+0x42>
 80065b4:	2300      	movs	r3, #0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d103      	bne.n	80065de <xQueueGenericSendFromISR+0x6a>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSendFromISR+0x6e>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericSendFromISR+0x70>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	623b      	str	r3, [r7, #32]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065fe:	f002 f94b 	bl	8008898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006602:	f3ef 8211 	mrs	r2, BASEPRI
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fa      	str	r2, [r7, #28]
 8006618:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800661a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <xQueueGenericSendFromISR+0xbc>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d12f      	bne.n	8006690 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006646:	f000 fa35 	bl	8006ab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800664a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d112      	bne.n	800667a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d016      	beq.n	800668a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	3324      	adds	r3, #36	; 0x24
 8006660:	4618      	mov	r0, r3
 8006662:	f001 f81b 	bl	800769c <xTaskRemoveFromEventList>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e007      	b.n	800668a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800667a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800667e:	3301      	adds	r3, #1
 8006680:	b2db      	uxtb	r3, r3
 8006682:	b25a      	sxtb	r2, r3
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800668a:	2301      	movs	r3, #1
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800668e:	e001      	b.n	8006694 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800669e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3740      	adds	r7, #64	; 0x40
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <xQueueReceive+0x30>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	623b      	str	r3, [r7, #32]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <xQueueReceive+0x3e>
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <xQueueReceive+0x42>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <xQueueReceive+0x44>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueReceive+0x5e>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61fb      	str	r3, [r7, #28]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800670a:	f001 f989 	bl	8007a20 <xTaskGetSchedulerState>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <xQueueReceive+0x6e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <xQueueReceive+0x72>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <xQueueReceive+0x74>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xQueueReceive+0x8e>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	61bb      	str	r3, [r7, #24]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800673a:	f001 ffcb 	bl	80086d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01f      	beq.n	800678a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674e:	f000 fa1b 	bl	8006b88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	1e5a      	subs	r2, r3, #1
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00f      	beq.n	8006782 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	3310      	adds	r3, #16
 8006766:	4618      	mov	r0, r3
 8006768:	f000 ff98 	bl	800769c <xTaskRemoveFromEventList>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006772:	4b3d      	ldr	r3, [pc, #244]	; (8006868 <xQueueReceive+0x1bc>)
 8006774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006782:	f001 ffd7 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006786:	2301      	movs	r3, #1
 8006788:	e069      	b.n	800685e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006790:	f001 ffd0 	bl	8008734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006794:	2300      	movs	r3, #0
 8006796:	e062      	b.n	800685e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800679e:	f107 0310 	add.w	r3, r7, #16
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 ffde 	bl	8007764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067ac:	f001 ffc2 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067b0:	f000 fd4a 	bl	8007248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067b4:	f001 ff8e 	bl	80086d4 <vPortEnterCritical>
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d103      	bne.n	80067ce <xQueueReceive+0x122>
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d103      	bne.n	80067e4 <xQueueReceive+0x138>
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067e4:	f001 ffa6 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e8:	1d3a      	adds	r2, r7, #4
 80067ea:	f107 0310 	add.w	r3, r7, #16
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ffcd 	bl	8007790 <xTaskCheckForTimeOut>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d123      	bne.n	8006844 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fe:	f000 fa3b 	bl	8006c78 <prvIsQueueEmpty>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d017      	beq.n	8006838 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	3324      	adds	r3, #36	; 0x24
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fef3 	bl	80075fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006818:	f000 f9dc 	bl	8006bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800681c:	f000 fd22 	bl	8007264 <xTaskResumeAll>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d189      	bne.n	800673a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <xQueueReceive+0x1bc>)
 8006828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	e780      	b.n	800673a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683a:	f000 f9cb 	bl	8006bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800683e:	f000 fd11 	bl	8007264 <xTaskResumeAll>
 8006842:	e77a      	b.n	800673a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006846:	f000 f9c5 	bl	8006bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800684a:	f000 fd0b 	bl	8007264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800684e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006850:	f000 fa12 	bl	8006c78 <prvIsQueueEmpty>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	f43f af6f 	beq.w	800673a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800685c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800685e:	4618      	mov	r0, r3
 8006860:	3730      	adds	r7, #48	; 0x30
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08e      	sub	sp, #56	; 0x38
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006876:	2300      	movs	r3, #0
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	623b      	str	r3, [r7, #32]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	61fb      	str	r3, [r7, #28]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068bc:	f001 f8b0 	bl	8007a20 <xTaskGetSchedulerState>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <xQueueSemaphoreTake+0x60>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <xQueueSemaphoreTake+0x64>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <xQueueSemaphoreTake+0x66>
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	61bb      	str	r3, [r7, #24]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ec:	f001 fef2 	bl	80086d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d024      	beq.n	8006946 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	1e5a      	subs	r2, r3, #1
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800690c:	f001 f9fe 	bl	8007d0c <pvTaskIncrementMutexHeldCount>
 8006910:	4602      	mov	r2, r0
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00f      	beq.n	800693e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	3310      	adds	r3, #16
 8006922:	4618      	mov	r0, r3
 8006924:	f000 feba 	bl	800769c <xTaskRemoveFromEventList>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800692e:	4b54      	ldr	r3, [pc, #336]	; (8006a80 <xQueueSemaphoreTake+0x214>)
 8006930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800693e:	f001 fef9 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006942:	2301      	movs	r3, #1
 8006944:	e097      	b.n	8006a76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d111      	bne.n	8006970 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	617b      	str	r3, [r7, #20]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006968:	f001 fee4 	bl	8008734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800696c:	2300      	movs	r3, #0
 800696e:	e082      	b.n	8006a76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006976:	f107 030c 	add.w	r3, r7, #12
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fef2 	bl	8007764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006984:	f001 fed6 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006988:	f000 fc5e 	bl	8007248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800698c:	f001 fea2 	bl	80086d4 <vPortEnterCritical>
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006996:	b25b      	sxtb	r3, r3
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d103      	bne.n	80069a6 <xQueueSemaphoreTake+0x13a>
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d103      	bne.n	80069bc <xQueueSemaphoreTake+0x150>
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069bc:	f001 feba 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069c0:	463a      	mov	r2, r7
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fee1 	bl	8007790 <xTaskCheckForTimeOut>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d132      	bne.n	8006a3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069d6:	f000 f94f 	bl	8006c78 <prvIsQueueEmpty>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d026      	beq.n	8006a2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80069e8:	f001 fe74 	bl	80086d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 f833 	bl	8007a5c <xTaskPriorityInherit>
 80069f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069f8:	f001 fe9c 	bl	8008734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	3324      	adds	r3, #36	; 0x24
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	4611      	mov	r1, r2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fdf9 	bl	80075fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a0c:	f000 f8e2 	bl	8006bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a10:	f000 fc28 	bl	8007264 <xTaskResumeAll>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f47f af68 	bne.w	80068ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <xQueueSemaphoreTake+0x214>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	e75e      	b.n	80068ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a30:	f000 f8d0 	bl	8006bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a34:	f000 fc16 	bl	8007264 <xTaskResumeAll>
 8006a38:	e758      	b.n	80068ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a3c:	f000 f8ca 	bl	8006bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a40:	f000 fc10 	bl	8007264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a46:	f000 f917 	bl	8006c78 <prvIsQueueEmpty>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f43f af4d 	beq.w	80068ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00d      	beq.n	8006a74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a58:	f001 fe3c 	bl	80086d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a5e:	f000 f811 	bl	8006a84 <prvGetDisinheritPriorityAfterTimeout>
 8006a62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 f8cc 	bl	8007c08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a70:	f001 fe60 	bl	8008734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3738      	adds	r7, #56	; 0x38
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d006      	beq.n	8006aa2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e001      	b.n	8006aa6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
	}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d14d      	bne.n	8006b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f824 	bl	8007b2c <xTaskPriorityDisinherit>
 8006ae4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	609a      	str	r2, [r3, #8]
 8006aec:	e043      	b.n	8006b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d119      	bne.n	8006b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6858      	ldr	r0, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	461a      	mov	r2, r3
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	f002 fafe 	bl	8009100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	441a      	add	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d32b      	bcc.n	8006b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	e026      	b.n	8006b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68d8      	ldr	r0, [r3, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	461a      	mov	r2, r3
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	f002 fae4 	bl	8009100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	425b      	negs	r3, r3
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d207      	bcs.n	8006b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	425b      	negs	r3, r3
 8006b5e:	441a      	add	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d105      	bne.n	8006b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b7e:	697b      	ldr	r3, [r7, #20]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d018      	beq.n	8006bcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	441a      	add	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d303      	bcc.n	8006bbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68d9      	ldr	r1, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6838      	ldr	r0, [r7, #0]
 8006bc8:	f002 fa9a 	bl	8009100 <memcpy>
	}
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bdc:	f001 fd7a 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be8:	e011      	b.n	8006c0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d012      	beq.n	8006c18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3324      	adds	r3, #36	; 0x24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fd50 	bl	800769c <xTaskRemoveFromEventList>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c02:	f000 fe27 	bl	8007854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	dce9      	bgt.n	8006bea <prvUnlockQueue+0x16>
 8006c16:	e000      	b.n	8006c1a <prvUnlockQueue+0x46>
					break;
 8006c18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 fd87 	bl	8008734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c26:	f001 fd55 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c32:	e011      	b.n	8006c58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d012      	beq.n	8006c62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3310      	adds	r3, #16
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fd2b 	bl	800769c <xTaskRemoveFromEventList>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c4c:	f000 fe02 	bl	8007854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dce9      	bgt.n	8006c34 <prvUnlockQueue+0x60>
 8006c60:	e000      	b.n	8006c64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c6c:	f001 fd62 	bl	8008734 <vPortExitCritical>
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c80:	f001 fd28 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e001      	b.n	8006c96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c96:	f001 fd4d 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cac:	f001 fd12 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d102      	bne.n	8006cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e001      	b.n	8006cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cc6:	f001 fd35 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e014      	b.n	8006d0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ce4:	4a0f      	ldr	r2, [pc, #60]	; (8006d24 <vQueueAddToRegistry+0x50>)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10b      	bne.n	8006d08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cf0:	490c      	ldr	r1, [pc, #48]	; (8006d24 <vQueueAddToRegistry+0x50>)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <vQueueAddToRegistry+0x50>)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d06:	e006      	b.n	8006d16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b07      	cmp	r3, #7
 8006d12:	d9e7      	bls.n	8006ce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20001bb0 	.word	0x20001bb0

08006d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d38:	f001 fccc 	bl	80086d4 <vPortEnterCritical>
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d42:	b25b      	sxtb	r3, r3
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d103      	bne.n	8006d52 <vQueueWaitForMessageRestricted+0x2a>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d103      	bne.n	8006d68 <vQueueWaitForMessageRestricted+0x40>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d68:	f001 fce4 	bl	8008734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fc61 	bl	8007644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff26 	bl	8006bd4 <prvUnlockQueue>
	}
 8006d88:	bf00      	nop
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08e      	sub	sp, #56	; 0x38
 8006d94:	af04      	add	r7, sp, #16
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xTaskCreateStatic+0x2a>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	623b      	str	r3, [r7, #32]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	61fb      	str	r3, [r7, #28]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dd6:	23bc      	movs	r3, #188	; 0xbc
 8006dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2bbc      	cmp	r3, #188	; 0xbc
 8006dde:	d00a      	beq.n	8006df6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61bb      	str	r3, [r7, #24]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006df6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01e      	beq.n	8006e3c <xTaskCreateStatic+0xac>
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e16:	2300      	movs	r3, #0
 8006e18:	9303      	str	r3, [sp, #12]
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	9302      	str	r3, [sp, #8]
 8006e1e:	f107 0314 	add.w	r3, r7, #20
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f850 	bl	8006ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e36:	f000 f8f3 	bl	8007020 <prvAddNewTaskToReadyList>
 8006e3a:	e001      	b.n	8006e40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e40:	697b      	ldr	r3, [r7, #20]
	}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3728      	adds	r7, #40	; 0x28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b08c      	sub	sp, #48	; 0x30
 8006e4e:	af04      	add	r7, sp, #16
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 fd5a 	bl	8008918 <pvPortMalloc>
 8006e64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00e      	beq.n	8006e8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e6c:	20bc      	movs	r0, #188	; 0xbc
 8006e6e:	f001 fd53 	bl	8008918 <pvPortMalloc>
 8006e72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e80:	e005      	b.n	8006e8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e82:	6978      	ldr	r0, [r7, #20]
 8006e84:	f001 fe14 	bl	8008ab0 <vPortFree>
 8006e88:	e001      	b.n	8006e8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d017      	beq.n	8006ec4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	9302      	str	r3, [sp, #8]
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f80e 	bl	8006ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eb8:	69f8      	ldr	r0, [r7, #28]
 8006eba:	f000 f8b1 	bl	8007020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	e002      	b.n	8006eca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eca:	69bb      	ldr	r3, [r7, #24]
	}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	461a      	mov	r2, r3
 8006eec:	21a5      	movs	r1, #165	; 0xa5
 8006eee:	f002 f915 	bl	800911c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006efc:	3b01      	subs	r3, #1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01f      	beq.n	8006f72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e012      	b.n	8006f5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	7819      	ldrb	r1, [r3, #0]
 8006f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	3334      	adds	r3, #52	; 0x34
 8006f48:	460a      	mov	r2, r1
 8006f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d006      	beq.n	8006f66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b0f      	cmp	r3, #15
 8006f62:	d9e9      	bls.n	8006f38 <prvInitialiseNewTask+0x64>
 8006f64:	e000      	b.n	8006f68 <prvInitialiseNewTask+0x94>
			{
				break;
 8006f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f70:	e003      	b.n	8006f7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	2b37      	cmp	r3, #55	; 0x37
 8006f7e:	d901      	bls.n	8006f84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f80:	2337      	movs	r3, #55	; 0x37
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	2200      	movs	r2, #0
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff f854 	bl	8006048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff f84f 	bl	8006048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	3354      	adds	r3, #84	; 0x54
 8006fd4:	2260      	movs	r2, #96	; 0x60
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f002 f89f 	bl	800911c <memset>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	4a0c      	ldr	r2, [pc, #48]	; (8007014 <prvInitialiseNewTask+0x140>)
 8006fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	; (8007018 <prvInitialiseNewTask+0x144>)
 8006fe8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <prvInitialiseNewTask+0x148>)
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	69b8      	ldr	r0, [r7, #24]
 8006ff6:	f001 fa3f 	bl	8008478 <pxPortInitialiseStack>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800700c:	bf00      	nop
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	0800da84 	.word	0x0800da84
 8007018:	0800daa4 	.word	0x0800daa4
 800701c:	0800da64 	.word	0x0800da64

08007020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007028:	f001 fb54 	bl	80086d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800702c:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <prvAddNewTaskToReadyList+0xc4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3301      	adds	r3, #1
 8007032:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <prvAddNewTaskToReadyList+0xc4>)
 8007034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007036:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <prvAddNewTaskToReadyList+0xc8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800703e:	4a2a      	ldr	r2, [pc, #168]	; (80070e8 <prvAddNewTaskToReadyList+0xc8>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007044:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <prvAddNewTaskToReadyList+0xc4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d110      	bne.n	800706e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800704c:	f000 fc26 	bl	800789c <prvInitialiseTaskLists>
 8007050:	e00d      	b.n	800706e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <prvAddNewTaskToReadyList+0xcc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800705a:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <prvAddNewTaskToReadyList+0xc8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d802      	bhi.n	800706e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007068:	4a1f      	ldr	r2, [pc, #124]	; (80070e8 <prvAddNewTaskToReadyList+0xc8>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800706e:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <prvAddNewTaskToReadyList+0xd0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3301      	adds	r3, #1
 8007074:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <prvAddNewTaskToReadyList+0xd0>)
 8007076:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007078:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <prvAddNewTaskToReadyList+0xd0>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <prvAddNewTaskToReadyList+0xd4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d903      	bls.n	8007094 <prvAddNewTaskToReadyList+0x74>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <prvAddNewTaskToReadyList+0xd4>)
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <prvAddNewTaskToReadyList+0xd8>)
 80070a2:	441a      	add	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f7fe ffd9 	bl	8006062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070b0:	f001 fb40 	bl	8008734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <prvAddNewTaskToReadyList+0xcc>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <prvAddNewTaskToReadyList+0xc8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d207      	bcs.n	80070da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070ca:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <prvAddNewTaskToReadyList+0xdc>)
 80070cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	200020c4 	.word	0x200020c4
 80070e8:	20001bf0 	.word	0x20001bf0
 80070ec:	200020d0 	.word	0x200020d0
 80070f0:	200020e0 	.word	0x200020e0
 80070f4:	200020cc 	.word	0x200020cc
 80070f8:	20001bf4 	.word	0x20001bf4
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d017      	beq.n	8007142 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007112:	4b13      	ldr	r3, [pc, #76]	; (8007160 <vTaskDelay+0x60>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <vTaskDelay+0x30>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	60bb      	str	r3, [r7, #8]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007130:	f000 f88a 	bl	8007248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007134:	2100      	movs	r1, #0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fdfc 	bl	8007d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800713c:	f000 f892 	bl	8007264 <xTaskResumeAll>
 8007140:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <vTaskDelay+0x64>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	200020ec 	.word	0x200020ec
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007176:	463a      	mov	r2, r7
 8007178:	1d39      	adds	r1, r7, #4
 800717a:	f107 0308 	add.w	r3, r7, #8
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe ff0e 	bl	8005fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	2300      	movs	r3, #0
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	460a      	mov	r2, r1
 8007196:	4924      	ldr	r1, [pc, #144]	; (8007228 <vTaskStartScheduler+0xc0>)
 8007198:	4824      	ldr	r0, [pc, #144]	; (800722c <vTaskStartScheduler+0xc4>)
 800719a:	f7ff fdf9 	bl	8006d90 <xTaskCreateStatic>
 800719e:	4603      	mov	r3, r0
 80071a0:	4a23      	ldr	r2, [pc, #140]	; (8007230 <vTaskStartScheduler+0xc8>)
 80071a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071a4:	4b22      	ldr	r3, [pc, #136]	; (8007230 <vTaskStartScheduler+0xc8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071ac:	2301      	movs	r3, #1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e001      	b.n	80071b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d102      	bne.n	80071c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071bc:	f000 fe0e 	bl	8007ddc <xTimerCreateTimerTask>
 80071c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d11b      	bne.n	8007200 <vTaskStartScheduler+0x98>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	613b      	str	r3, [r7, #16]
}
 80071da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <vTaskStartScheduler+0xcc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3354      	adds	r3, #84	; 0x54
 80071e2:	4a15      	ldr	r2, [pc, #84]	; (8007238 <vTaskStartScheduler+0xd0>)
 80071e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071e6:	4b15      	ldr	r3, [pc, #84]	; (800723c <vTaskStartScheduler+0xd4>)
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <vTaskStartScheduler+0xd8>)
 80071f0:	2201      	movs	r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071f4:	4b13      	ldr	r3, [pc, #76]	; (8007244 <vTaskStartScheduler+0xdc>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071fa:	f001 f9c9 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071fe:	e00e      	b.n	800721e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d10a      	bne.n	800721e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <vTaskStartScheduler+0xb4>
}
 800721e:	bf00      	nop
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	0800d928 	.word	0x0800d928
 800722c:	0800786d 	.word	0x0800786d
 8007230:	200020e8 	.word	0x200020e8
 8007234:	20001bf0 	.word	0x20001bf0
 8007238:	2000001c 	.word	0x2000001c
 800723c:	200020e4 	.word	0x200020e4
 8007240:	200020d0 	.word	0x200020d0
 8007244:	200020c8 	.word	0x200020c8

08007248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <vTaskSuspendAll+0x18>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	4a03      	ldr	r2, [pc, #12]	; (8007260 <vTaskSuspendAll+0x18>)
 8007254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200020ec 	.word	0x200020ec

08007264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007272:	4b42      	ldr	r3, [pc, #264]	; (800737c <xTaskResumeAll+0x118>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <xTaskResumeAll+0x2c>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	603b      	str	r3, [r7, #0]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007290:	f001 fa20 	bl	80086d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007294:	4b39      	ldr	r3, [pc, #228]	; (800737c <xTaskResumeAll+0x118>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	4a38      	ldr	r2, [pc, #224]	; (800737c <xTaskResumeAll+0x118>)
 800729c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729e:	4b37      	ldr	r3, [pc, #220]	; (800737c <xTaskResumeAll+0x118>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d162      	bne.n	800736c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072a6:	4b36      	ldr	r3, [pc, #216]	; (8007380 <xTaskResumeAll+0x11c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d05e      	beq.n	800736c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ae:	e02f      	b.n	8007310 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b0:	4b34      	ldr	r3, [pc, #208]	; (8007384 <xTaskResumeAll+0x120>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3318      	adds	r3, #24
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe ff2d 	bl	800611c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe ff28 	bl	800611c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4b2d      	ldr	r3, [pc, #180]	; (8007388 <xTaskResumeAll+0x124>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d903      	bls.n	80072e0 <xTaskResumeAll+0x7c>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	4a2a      	ldr	r2, [pc, #168]	; (8007388 <xTaskResumeAll+0x124>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <xTaskResumeAll+0x128>)
 80072ee:	441a      	add	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe feb3 	bl	8006062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	4b23      	ldr	r3, [pc, #140]	; (8007390 <xTaskResumeAll+0x12c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <xTaskResumeAll+0x130>)
 800730c:	2201      	movs	r2, #1
 800730e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007310:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <xTaskResumeAll+0x120>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1cb      	bne.n	80072b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800731e:	f000 fb5f 	bl	80079e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007322:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <xTaskResumeAll+0x134>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800732e:	f000 f847 	bl	80073c0 <xTaskIncrementTick>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007338:	4b16      	ldr	r3, [pc, #88]	; (8007394 <xTaskResumeAll+0x130>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3b01      	subs	r3, #1
 8007342:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f1      	bne.n	800732e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800734a:	4b13      	ldr	r3, [pc, #76]	; (8007398 <xTaskResumeAll+0x134>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007350:	4b10      	ldr	r3, [pc, #64]	; (8007394 <xTaskResumeAll+0x130>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <xTaskResumeAll+0x138>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800736c:	f001 f9e2 	bl	8008734 <vPortExitCritical>

	return xAlreadyYielded;
 8007370:	68bb      	ldr	r3, [r7, #8]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200020ec 	.word	0x200020ec
 8007380:	200020c4 	.word	0x200020c4
 8007384:	20002084 	.word	0x20002084
 8007388:	200020cc 	.word	0x200020cc
 800738c:	20001bf4 	.word	0x20001bf4
 8007390:	20001bf0 	.word	0x20001bf0
 8007394:	200020d8 	.word	0x200020d8
 8007398:	200020d4 	.word	0x200020d4
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <xTaskGetTickCount+0x1c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073ac:	687b      	ldr	r3, [r7, #4]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	200020c8 	.word	0x200020c8

080073c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ca:	4b4f      	ldr	r3, [pc, #316]	; (8007508 <xTaskIncrementTick+0x148>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 808f 	bne.w	80074f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073d4:	4b4d      	ldr	r3, [pc, #308]	; (800750c <xTaskIncrementTick+0x14c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073dc:	4a4b      	ldr	r2, [pc, #300]	; (800750c <xTaskIncrementTick+0x14c>)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d120      	bne.n	800742a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073e8:	4b49      	ldr	r3, [pc, #292]	; (8007510 <xTaskIncrementTick+0x150>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <xTaskIncrementTick+0x48>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	603b      	str	r3, [r7, #0]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <xTaskIncrementTick+0x46>
 8007408:	4b41      	ldr	r3, [pc, #260]	; (8007510 <xTaskIncrementTick+0x150>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	4b41      	ldr	r3, [pc, #260]	; (8007514 <xTaskIncrementTick+0x154>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a3f      	ldr	r2, [pc, #252]	; (8007510 <xTaskIncrementTick+0x150>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	4a3f      	ldr	r2, [pc, #252]	; (8007514 <xTaskIncrementTick+0x154>)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	4b3e      	ldr	r3, [pc, #248]	; (8007518 <xTaskIncrementTick+0x158>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a3d      	ldr	r2, [pc, #244]	; (8007518 <xTaskIncrementTick+0x158>)
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	f000 fadb 	bl	80079e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800742a:	4b3c      	ldr	r3, [pc, #240]	; (800751c <xTaskIncrementTick+0x15c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	429a      	cmp	r2, r3
 8007432:	d349      	bcc.n	80074c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007434:	4b36      	ldr	r3, [pc, #216]	; (8007510 <xTaskIncrementTick+0x150>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800743e:	4b37      	ldr	r3, [pc, #220]	; (800751c <xTaskIncrementTick+0x15c>)
 8007440:	f04f 32ff 	mov.w	r2, #4294967295
 8007444:	601a      	str	r2, [r3, #0]
					break;
 8007446:	e03f      	b.n	80074c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007448:	4b31      	ldr	r3, [pc, #196]	; (8007510 <xTaskIncrementTick+0x150>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d203      	bcs.n	8007468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007460:	4a2e      	ldr	r2, [pc, #184]	; (800751c <xTaskIncrementTick+0x15c>)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007466:	e02f      	b.n	80074c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3304      	adds	r3, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fe55 	bl	800611c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3318      	adds	r3, #24
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fe4c 	bl	800611c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <xTaskIncrementTick+0x160>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d903      	bls.n	8007498 <xTaskIncrementTick+0xd8>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	4a22      	ldr	r2, [pc, #136]	; (8007520 <xTaskIncrementTick+0x160>)
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4a1f      	ldr	r2, [pc, #124]	; (8007524 <xTaskIncrementTick+0x164>)
 80074a6:	441a      	add	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f7fe fdd7 	bl	8006062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b8:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <xTaskIncrementTick+0x168>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	429a      	cmp	r2, r3
 80074c0:	d3b8      	bcc.n	8007434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c6:	e7b5      	b.n	8007434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074c8:	4b17      	ldr	r3, [pc, #92]	; (8007528 <xTaskIncrementTick+0x168>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	4915      	ldr	r1, [pc, #84]	; (8007524 <xTaskIncrementTick+0x164>)
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d901      	bls.n	80074e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074e4:	4b11      	ldr	r3, [pc, #68]	; (800752c <xTaskIncrementTick+0x16c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80074ec:	2301      	movs	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e004      	b.n	80074fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <xTaskIncrementTick+0x170>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <xTaskIncrementTick+0x170>)
 80074fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074fc:	697b      	ldr	r3, [r7, #20]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200020ec 	.word	0x200020ec
 800750c:	200020c8 	.word	0x200020c8
 8007510:	2000207c 	.word	0x2000207c
 8007514:	20002080 	.word	0x20002080
 8007518:	200020dc 	.word	0x200020dc
 800751c:	200020e4 	.word	0x200020e4
 8007520:	200020cc 	.word	0x200020cc
 8007524:	20001bf4 	.word	0x20001bf4
 8007528:	20001bf0 	.word	0x20001bf0
 800752c:	200020d8 	.word	0x200020d8
 8007530:	200020d4 	.word	0x200020d4

08007534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800753a:	4b2a      	ldr	r3, [pc, #168]	; (80075e4 <vTaskSwitchContext+0xb0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <vTaskSwitchContext+0xb4>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007548:	e046      	b.n	80075d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800754a:	4b27      	ldr	r3, [pc, #156]	; (80075e8 <vTaskSwitchContext+0xb4>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007550:	4b26      	ldr	r3, [pc, #152]	; (80075ec <vTaskSwitchContext+0xb8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e010      	b.n	800757a <vTaskSwitchContext+0x46>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <vTaskSwitchContext+0x40>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <vTaskSwitchContext+0x3e>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3b01      	subs	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	491d      	ldr	r1, [pc, #116]	; (80075f0 <vTaskSwitchContext+0xbc>)
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0e4      	beq.n	8007558 <vTaskSwitchContext+0x24>
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <vTaskSwitchContext+0xbc>)
 800759a:	4413      	add	r3, r2
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	605a      	str	r2, [r3, #4]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3308      	adds	r3, #8
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d104      	bne.n	80075be <vTaskSwitchContext+0x8a>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	605a      	str	r2, [r3, #4]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a0b      	ldr	r2, [pc, #44]	; (80075f4 <vTaskSwitchContext+0xc0>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <vTaskSwitchContext+0xb8>)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <vTaskSwitchContext+0xc0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3354      	adds	r3, #84	; 0x54
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <vTaskSwitchContext+0xc4>)
 80075d6:	6013      	str	r3, [r2, #0]
}
 80075d8:	bf00      	nop
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	200020ec 	.word	0x200020ec
 80075e8:	200020d8 	.word	0x200020d8
 80075ec:	200020cc 	.word	0x200020cc
 80075f0:	20001bf4 	.word	0x20001bf4
 80075f4:	20001bf0 	.word	0x20001bf0
 80075f8:	2000001c 	.word	0x2000001c

080075fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <vTaskPlaceOnEventList+0x44>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3318      	adds	r3, #24
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fe fd3d 	bl	80060aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007630:	2101      	movs	r1, #1
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f000 fb7e 	bl	8007d34 <prvAddCurrentTaskToDelayedList>
}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20001bf0 	.word	0x20001bf0

08007644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	617b      	str	r3, [r7, #20]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vTaskPlaceOnEventListRestricted+0x54>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3318      	adds	r3, #24
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7fe fcf4 	bl	8006062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	68b8      	ldr	r0, [r7, #8]
 800768a:	f000 fb53 	bl	8007d34 <prvAddCurrentTaskToDelayedList>
	}
 800768e:	bf00      	nop
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20001bf0 	.word	0x20001bf0

0800769c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60fb      	str	r3, [r7, #12]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3318      	adds	r3, #24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe fd25 	bl	800611c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076d2:	4b1e      	ldr	r3, [pc, #120]	; (800774c <xTaskRemoveFromEventList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11d      	bne.n	8007716 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fd1c 	bl	800611c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <xTaskRemoveFromEventList+0xb4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d903      	bls.n	80076f8 <xTaskRemoveFromEventList+0x5c>
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a16      	ldr	r2, [pc, #88]	; (8007750 <xTaskRemoveFromEventList+0xb4>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4a13      	ldr	r2, [pc, #76]	; (8007754 <xTaskRemoveFromEventList+0xb8>)
 8007706:	441a      	add	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fe fca7 	bl	8006062 <vListInsertEnd>
 8007714:	e005      	b.n	8007722 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	3318      	adds	r3, #24
 800771a:	4619      	mov	r1, r3
 800771c:	480e      	ldr	r0, [pc, #56]	; (8007758 <xTaskRemoveFromEventList+0xbc>)
 800771e:	f7fe fca0 	bl	8006062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007726:	4b0d      	ldr	r3, [pc, #52]	; (800775c <xTaskRemoveFromEventList+0xc0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	429a      	cmp	r2, r3
 800772e:	d905      	bls.n	800773c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007730:	2301      	movs	r3, #1
 8007732:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007734:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <xTaskRemoveFromEventList+0xc4>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e001      	b.n	8007740 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007740:	697b      	ldr	r3, [r7, #20]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200020ec 	.word	0x200020ec
 8007750:	200020cc 	.word	0x200020cc
 8007754:	20001bf4 	.word	0x20001bf4
 8007758:	20002084 	.word	0x20002084
 800775c:	20001bf0 	.word	0x20001bf0
 8007760:	200020d8 	.word	0x200020d8

08007764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <vTaskInternalSetTimeOutState+0x24>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <vTaskInternalSetTimeOutState+0x28>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	605a      	str	r2, [r3, #4]
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	200020dc 	.word	0x200020dc
 800778c:	200020c8 	.word	0x200020c8

08007790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077d2:	f000 ff7f 	bl	80086d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077d6:	4b1d      	ldr	r3, [pc, #116]	; (800784c <xTaskCheckForTimeOut+0xbc>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d102      	bne.n	80077f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e023      	b.n	800783e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b15      	ldr	r3, [pc, #84]	; (8007850 <xTaskCheckForTimeOut+0xc0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d007      	beq.n	8007812 <xTaskCheckForTimeOut+0x82>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	429a      	cmp	r2, r3
 800780a:	d302      	bcc.n	8007812 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e015      	b.n	800783e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	429a      	cmp	r2, r3
 800781a:	d20b      	bcs.n	8007834 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff9b 	bl	8007764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	e004      	b.n	800783e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800783a:	2301      	movs	r3, #1
 800783c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800783e:	f000 ff79 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8007842:	69fb      	ldr	r3, [r7, #28]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200020c8 	.word	0x200020c8
 8007850:	200020dc 	.word	0x200020dc

08007854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007858:	4b03      	ldr	r3, [pc, #12]	; (8007868 <vTaskMissedYield+0x14>)
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
}
 800785e:	bf00      	nop
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	200020d8 	.word	0x200020d8

0800786c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007874:	f000 f852 	bl	800791c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007878:	4b06      	ldr	r3, [pc, #24]	; (8007894 <prvIdleTask+0x28>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d9f9      	bls.n	8007874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <prvIdleTask+0x2c>)
 8007882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007890:	e7f0      	b.n	8007874 <prvIdleTask+0x8>
 8007892:	bf00      	nop
 8007894:	20001bf4 	.word	0x20001bf4
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a2:	2300      	movs	r3, #0
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	e00c      	b.n	80078c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4a12      	ldr	r2, [pc, #72]	; (80078fc <prvInitialiseTaskLists+0x60>)
 80078b4:	4413      	add	r3, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fba6 	bl	8006008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3301      	adds	r3, #1
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b37      	cmp	r3, #55	; 0x37
 80078c6:	d9ef      	bls.n	80078a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078c8:	480d      	ldr	r0, [pc, #52]	; (8007900 <prvInitialiseTaskLists+0x64>)
 80078ca:	f7fe fb9d 	bl	8006008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078ce:	480d      	ldr	r0, [pc, #52]	; (8007904 <prvInitialiseTaskLists+0x68>)
 80078d0:	f7fe fb9a 	bl	8006008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078d4:	480c      	ldr	r0, [pc, #48]	; (8007908 <prvInitialiseTaskLists+0x6c>)
 80078d6:	f7fe fb97 	bl	8006008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078da:	480c      	ldr	r0, [pc, #48]	; (800790c <prvInitialiseTaskLists+0x70>)
 80078dc:	f7fe fb94 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078e0:	480b      	ldr	r0, [pc, #44]	; (8007910 <prvInitialiseTaskLists+0x74>)
 80078e2:	f7fe fb91 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078e6:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <prvInitialiseTaskLists+0x78>)
 80078e8:	4a05      	ldr	r2, [pc, #20]	; (8007900 <prvInitialiseTaskLists+0x64>)
 80078ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <prvInitialiseTaskLists+0x7c>)
 80078ee:	4a05      	ldr	r2, [pc, #20]	; (8007904 <prvInitialiseTaskLists+0x68>)
 80078f0:	601a      	str	r2, [r3, #0]
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20001bf4 	.word	0x20001bf4
 8007900:	20002054 	.word	0x20002054
 8007904:	20002068 	.word	0x20002068
 8007908:	20002084 	.word	0x20002084
 800790c:	20002098 	.word	0x20002098
 8007910:	200020b0 	.word	0x200020b0
 8007914:	2000207c 	.word	0x2000207c
 8007918:	20002080 	.word	0x20002080

0800791c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007922:	e019      	b.n	8007958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007924:	f000 fed6 	bl	80086d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007928:	4b10      	ldr	r3, [pc, #64]	; (800796c <prvCheckTasksWaitingTermination+0x50>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fbf1 	bl	800611c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800793a:	4b0d      	ldr	r3, [pc, #52]	; (8007970 <prvCheckTasksWaitingTermination+0x54>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3b01      	subs	r3, #1
 8007940:	4a0b      	ldr	r2, [pc, #44]	; (8007970 <prvCheckTasksWaitingTermination+0x54>)
 8007942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <prvCheckTasksWaitingTermination+0x58>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3b01      	subs	r3, #1
 800794a:	4a0a      	ldr	r2, [pc, #40]	; (8007974 <prvCheckTasksWaitingTermination+0x58>)
 800794c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800794e:	f000 fef1 	bl	8008734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f810 	bl	8007978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007958:	4b06      	ldr	r3, [pc, #24]	; (8007974 <prvCheckTasksWaitingTermination+0x58>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e1      	bne.n	8007924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20002098 	.word	0x20002098
 8007970:	200020c4 	.word	0x200020c4
 8007974:	200020ac 	.word	0x200020ac

08007978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3354      	adds	r3, #84	; 0x54
 8007984:	4618      	mov	r0, r3
 8007986:	f002 f9bf 	bl	8009d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007990:	2b00      	cmp	r3, #0
 8007992:	d108      	bne.n	80079a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	4618      	mov	r0, r3
 800799a:	f001 f889 	bl	8008ab0 <vPortFree>
				vPortFree( pxTCB );
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 f886 	bl	8008ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079a4:	e018      	b.n	80079d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d103      	bne.n	80079b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f87d 	bl	8008ab0 <vPortFree>
	}
 80079b6:	e00f      	b.n	80079d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d00a      	beq.n	80079d8 <prvDeleteTCB+0x60>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60fb      	str	r3, [r7, #12]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <prvDeleteTCB+0x5e>
	}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <prvResetNextTaskUnblockTime+0x38>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <prvResetNextTaskUnblockTime+0x3c>)
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079f8:	e008      	b.n	8007a0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fa:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <prvResetNextTaskUnblockTime+0x38>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <prvResetNextTaskUnblockTime+0x3c>)
 8007a0a:	6013      	str	r3, [r2, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	2000207c 	.word	0x2000207c
 8007a1c:	200020e4 	.word	0x200020e4

08007a20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <xTaskGetSchedulerState+0x34>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	e008      	b.n	8007a46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a34:	4b08      	ldr	r3, [pc, #32]	; (8007a58 <xTaskGetSchedulerState+0x38>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	607b      	str	r3, [r7, #4]
 8007a40:	e001      	b.n	8007a46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a42:	2300      	movs	r3, #0
 8007a44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a46:	687b      	ldr	r3, [r7, #4]
	}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	200020d0 	.word	0x200020d0
 8007a58:	200020ec 	.word	0x200020ec

08007a5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d051      	beq.n	8007b16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a76:	4b2a      	ldr	r3, [pc, #168]	; (8007b20 <xTaskPriorityInherit+0xc4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d241      	bcs.n	8007b04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	db06      	blt.n	8007a96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a88:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <xTaskPriorityInherit+0xc4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6959      	ldr	r1, [r3, #20]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4a1f      	ldr	r2, [pc, #124]	; (8007b24 <xTaskPriorityInherit+0xc8>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d122      	bne.n	8007af4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fb32 	bl	800611c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ab8:	4b19      	ldr	r3, [pc, #100]	; (8007b20 <xTaskPriorityInherit+0xc4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <xTaskPriorityInherit+0xcc>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d903      	bls.n	8007ad6 <xTaskPriorityInherit+0x7a>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	4a15      	ldr	r2, [pc, #84]	; (8007b28 <xTaskPriorityInherit+0xcc>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <xTaskPriorityInherit+0xc8>)
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe fab8 	bl	8006062 <vListInsertEnd>
 8007af2:	e004      	b.n	8007afe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <xTaskPriorityInherit+0xc4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007afe:	2301      	movs	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	e008      	b.n	8007b16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <xTaskPriorityInherit+0xc4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d201      	bcs.n	8007b16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b16:	68fb      	ldr	r3, [r7, #12]
	}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001bf0 	.word	0x20001bf0
 8007b24:	20001bf4 	.word	0x20001bf4
 8007b28:	200020cc 	.word	0x200020cc

08007b2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d056      	beq.n	8007bf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b42:	4b2e      	ldr	r3, [pc, #184]	; (8007bfc <xTaskPriorityDisinherit+0xd0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d00a      	beq.n	8007b62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	60fb      	str	r3, [r7, #12]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	60bb      	str	r3, [r7, #8]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b84:	1e5a      	subs	r2, r3, #1
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d02c      	beq.n	8007bf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d128      	bne.n	8007bf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe faba 	bl	800611c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <xTaskPriorityDisinherit+0xd4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d903      	bls.n	8007bd0 <xTaskPriorityDisinherit+0xa4>
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <xTaskPriorityDisinherit+0xd4>)
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4a09      	ldr	r2, [pc, #36]	; (8007c04 <xTaskPriorityDisinherit+0xd8>)
 8007bde:	441a      	add	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fe fa3b 	bl	8006062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bf0:	697b      	ldr	r3, [r7, #20]
	}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20001bf0 	.word	0x20001bf0
 8007c00:	200020cc 	.word	0x200020cc
 8007c04:	20001bf4 	.word	0x20001bf4

08007c08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d06a      	beq.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60fb      	str	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d902      	bls.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e002      	b.n	8007c54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d04b      	beq.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d146      	bne.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d10a      	bne.n	8007c88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	69fa      	ldr	r2, [r7, #28]
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db04      	blt.n	8007ca6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	6959      	ldr	r1, [r3, #20]
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007cb6:	4413      	add	r3, r2
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	d11c      	bne.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fa2b 	bl	800611c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cca:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d903      	bls.n	8007cda <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	; (8007d08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a07      	ldr	r2, [pc, #28]	; (8007d04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ce8:	441a      	add	r2, r3
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe f9b6 	bl	8006062 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cf6:	bf00      	nop
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20001bf0 	.word	0x20001bf0
 8007d04:	20001bf4 	.word	0x20001bf4
 8007d08:	200020cc 	.word	0x200020cc

08007d0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d1e:	3201      	adds	r2, #1
 8007d20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007d22:	4b03      	ldr	r3, [pc, #12]	; (8007d30 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d24:	681b      	ldr	r3, [r3, #0]
	}
 8007d26:	4618      	mov	r0, r3
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20001bf0 	.word	0x20001bf0

08007d34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d3e:	4b21      	ldr	r3, [pc, #132]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d44:	4b20      	ldr	r3, [pc, #128]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe f9e6 	bl	800611c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d10a      	bne.n	8007d6e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4619      	mov	r1, r3
 8007d66:	4819      	ldr	r0, [pc, #100]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x98>)
 8007d68:	f7fe f97b 	bl	8006062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d6c:	e026      	b.n	8007dbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d209      	bcs.n	8007d9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f7fe f989 	bl	80060aa <vListInsert>
}
 8007d98:	e010      	b.n	8007dbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d9a:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f7fe f97f 	bl	80060aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d202      	bcs.n	8007dbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007db6:	4a08      	ldr	r2, [pc, #32]	; (8007dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6013      	str	r3, [r2, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200020c8 	.word	0x200020c8
 8007dc8:	20001bf0 	.word	0x20001bf0
 8007dcc:	200020b0 	.word	0x200020b0
 8007dd0:	20002080 	.word	0x20002080
 8007dd4:	2000207c 	.word	0x2000207c
 8007dd8:	200020e4 	.word	0x200020e4

08007ddc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007de6:	f000 fb07 	bl	80083f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dea:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <xTimerCreateTimerTask+0x80>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d021      	beq.n	8007e36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dfa:	1d3a      	adds	r2, r7, #4
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	f107 030c 	add.w	r3, r7, #12
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe f8e5 	bl	8005fd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	9202      	str	r2, [sp, #8]
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	2302      	movs	r3, #2
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	4910      	ldr	r1, [pc, #64]	; (8007e60 <xTimerCreateTimerTask+0x84>)
 8007e1e:	4811      	ldr	r0, [pc, #68]	; (8007e64 <xTimerCreateTimerTask+0x88>)
 8007e20:	f7fe ffb6 	bl	8006d90 <xTaskCreateStatic>
 8007e24:	4603      	mov	r3, r0
 8007e26:	4a10      	ldr	r2, [pc, #64]	; (8007e68 <xTimerCreateTimerTask+0x8c>)
 8007e28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e2a:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <xTimerCreateTimerTask+0x8c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e32:	2301      	movs	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	613b      	str	r3, [r7, #16]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e52:	697b      	ldr	r3, [r7, #20]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20002120 	.word	0x20002120
 8007e60:	0800d930 	.word	0x0800d930
 8007e64:	08007fa1 	.word	0x08007fa1
 8007e68:	20002124 	.word	0x20002124

08007e6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	623b      	str	r3, [r7, #32]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e9a:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <xTimerGenericCommand+0x98>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d02a      	beq.n	8007ef8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b05      	cmp	r3, #5
 8007eb2:	dc18      	bgt.n	8007ee6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007eb4:	f7ff fdb4 	bl	8007a20 <xTaskGetSchedulerState>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d109      	bne.n	8007ed2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <xTimerGenericCommand+0x98>)
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f107 0110 	add.w	r1, r7, #16
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eca:	f7fe fa55 	bl	8006378 <xQueueGenericSend>
 8007ece:	6278      	str	r0, [r7, #36]	; 0x24
 8007ed0:	e012      	b.n	8007ef8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	; (8007f04 <xTimerGenericCommand+0x98>)
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	f107 0110 	add.w	r1, r7, #16
 8007eda:	2300      	movs	r3, #0
 8007edc:	2200      	movs	r2, #0
 8007ede:	f7fe fa4b 	bl	8006378 <xQueueGenericSend>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ee4:	e008      	b.n	8007ef8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ee6:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <xTimerGenericCommand+0x98>)
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f107 0110 	add.w	r1, r7, #16
 8007eee:	2300      	movs	r3, #0
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	f7fe fb3f 	bl	8006574 <xQueueGenericSendFromISR>
 8007ef6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3728      	adds	r7, #40	; 0x28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20002120 	.word	0x20002120

08007f08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f12:	4b22      	ldr	r3, [pc, #136]	; (8007f9c <prvProcessExpiredTimer+0x94>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe f8fb 	bl	800611c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d022      	beq.n	8007f7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	18d1      	adds	r1, r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	6978      	ldr	r0, [r7, #20]
 8007f42:	f000 f8d1 	bl	80080e8 <prvInsertTimerInActiveList>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01f      	beq.n	8007f8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	2100      	movs	r1, #0
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	f7ff ff88 	bl	8007e6c <xTimerGenericCommand>
 8007f5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d113      	bne.n	8007f8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	60fb      	str	r3, [r7, #12]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	6978      	ldr	r0, [r7, #20]
 8007f92:	4798      	blx	r3
}
 8007f94:	bf00      	nop
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20002118 	.word	0x20002118

08007fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fa8:	f107 0308 	add.w	r3, r7, #8
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f857 	bl	8008060 <prvGetNextExpireTime>
 8007fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f803 	bl	8007fc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fbe:	f000 f8d5 	bl	800816c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fc2:	e7f1      	b.n	8007fa8 <prvTimerTask+0x8>

08007fc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fce:	f7ff f93b 	bl	8007248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f866 	bl	80080a8 <prvSampleTimeNow>
 8007fdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d130      	bne.n	8008046 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <prvProcessTimerOrBlockTask+0x3c>
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d806      	bhi.n	8008000 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ff2:	f7ff f937 	bl	8007264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff ff85 	bl	8007f08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ffe:	e024      	b.n	800804a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d008      	beq.n	8008018 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <prvProcessTimerOrBlockTask+0x90>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <prvProcessTimerOrBlockTask+0x50>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <prvProcessTimerOrBlockTask+0x52>
 8008014:	2300      	movs	r3, #0
 8008016:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008018:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <prvProcessTimerOrBlockTask+0x94>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4619      	mov	r1, r3
 8008026:	f7fe fe7f 	bl	8006d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800802a:	f7ff f91b 	bl	8007264 <xTaskResumeAll>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008034:	4b09      	ldr	r3, [pc, #36]	; (800805c <prvProcessTimerOrBlockTask+0x98>)
 8008036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	f3bf 8f6f 	isb	sy
}
 8008044:	e001      	b.n	800804a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008046:	f7ff f90d 	bl	8007264 <xTaskResumeAll>
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	2000211c 	.word	0x2000211c
 8008058:	20002120 	.word	0x20002120
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008068:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <prvGetNextExpireTime+0x44>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <prvGetNextExpireTime+0x16>
 8008072:	2201      	movs	r2, #1
 8008074:	e000      	b.n	8008078 <prvGetNextExpireTime+0x18>
 8008076:	2200      	movs	r2, #0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d105      	bne.n	8008090 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <prvGetNextExpireTime+0x44>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	e001      	b.n	8008094 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008094:	68fb      	ldr	r3, [r7, #12]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20002118 	.word	0x20002118

080080a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080b0:	f7ff f976 	bl	80073a0 <xTaskGetTickCount>
 80080b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <prvSampleTimeNow+0x3c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d205      	bcs.n	80080cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080c0:	f000 f936 	bl	8008330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	e002      	b.n	80080d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080d2:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <prvSampleTimeNow+0x3c>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080d8:	68fb      	ldr	r3, [r7, #12]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20002128 	.word	0x20002128

080080e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d812      	bhi.n	8008134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	1ad2      	subs	r2, r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	e01b      	b.n	800815a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <prvInsertTimerInActiveList+0x7c>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3304      	adds	r3, #4
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f7fd ffbc 	bl	80060aa <vListInsert>
 8008132:	e012      	b.n	800815a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d206      	bcs.n	800814a <prvInsertTimerInActiveList+0x62>
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d302      	bcc.n	800814a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e007      	b.n	800815a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800814a:	4b07      	ldr	r3, [pc, #28]	; (8008168 <prvInsertTimerInActiveList+0x80>)
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7fd ffa8 	bl	80060aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800815a:	697b      	ldr	r3, [r7, #20]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	2000211c 	.word	0x2000211c
 8008168:	20002118 	.word	0x20002118

0800816c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08e      	sub	sp, #56	; 0x38
 8008170:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008172:	e0ca      	b.n	800830a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	da18      	bge.n	80081ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	3304      	adds	r3, #4
 800817e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	61fb      	str	r3, [r7, #28]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a2:	6850      	ldr	r0, [r2, #4]
 80081a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a6:	6892      	ldr	r2, [r2, #8]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f2c0 80aa 	blt.w	8008308 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	3304      	adds	r3, #4
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fd ffa9 	bl	800611c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ca:	463b      	mov	r3, r7
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff ff6b 	bl	80080a8 <prvSampleTimeNow>
 80081d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	f200 8097 	bhi.w	800830a <prvProcessReceivedCommands+0x19e>
 80081dc:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <prvProcessReceivedCommands+0x78>)
 80081de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e2:	bf00      	nop
 80081e4:	0800820d 	.word	0x0800820d
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	0800820d 	.word	0x0800820d
 80081f0:	08008281 	.word	0x08008281
 80081f4:	08008295 	.word	0x08008295
 80081f8:	080082df 	.word	0x080082df
 80081fc:	0800820d 	.word	0x0800820d
 8008200:	0800820d 	.word	0x0800820d
 8008204:	08008281 	.word	0x08008281
 8008208:	08008295 	.word	0x08008295
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	18d1      	adds	r1, r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800822a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822c:	f7ff ff5c 	bl	80080e8 <prvInsertTimerInActiveList>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d069      	beq.n	800830a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d05e      	beq.n	800830a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	441a      	add	r2, r3
 8008254:	2300      	movs	r3, #0
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	2100      	movs	r1, #0
 800825c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825e:	f7ff fe05 	bl	8007e6c <xTimerGenericCommand>
 8008262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d14f      	bne.n	800830a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	61bb      	str	r3, [r7, #24]
}
 800827c:	bf00      	nop
 800827e:	e7fe      	b.n	800827e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008292:	e03a      	b.n	800830a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	617b      	str	r3, [r7, #20]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	18d1      	adds	r1, r2, r3
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d8:	f7ff ff06 	bl	80080e8 <prvInsertTimerInActiveList>
					break;
 80082dc:	e015      	b.n	800830a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d103      	bne.n	80082f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80082ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ee:	f000 fbdf 	bl	8008ab0 <vPortFree>
 80082f2:	e00a      	b.n	800830a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008306:	e000      	b.n	800830a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008308:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800830a:	4b08      	ldr	r3, [pc, #32]	; (800832c <prvProcessReceivedCommands+0x1c0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	1d39      	adds	r1, r7, #4
 8008310:	2200      	movs	r2, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe f9ca 	bl	80066ac <xQueueReceive>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	f47f af2a 	bne.w	8008174 <prvProcessReceivedCommands+0x8>
	}
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	3730      	adds	r7, #48	; 0x30
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20002120 	.word	0x20002120

08008330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008336:	e048      	b.n	80083ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008338:	4b2d      	ldr	r3, [pc, #180]	; (80083f0 <prvSwitchTimerLists+0xc0>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008342:	4b2b      	ldr	r3, [pc, #172]	; (80083f0 <prvSwitchTimerLists+0xc0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3304      	adds	r3, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd fee3 	bl	800611c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d02e      	beq.n	80083ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	429a      	cmp	r2, r3
 800837c:	d90e      	bls.n	800839c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800838a:	4b19      	ldr	r3, [pc, #100]	; (80083f0 <prvSwitchTimerLists+0xc0>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3304      	adds	r3, #4
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7fd fe88 	bl	80060aa <vListInsert>
 800839a:	e016      	b.n	80083ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800839c:	2300      	movs	r3, #0
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2300      	movs	r3, #0
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	2100      	movs	r1, #0
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff fd60 	bl	8007e6c <xTimerGenericCommand>
 80083ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	603b      	str	r3, [r7, #0]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <prvSwitchTimerLists+0xc0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1b1      	bne.n	8008338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <prvSwitchTimerLists+0xc0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <prvSwitchTimerLists+0xc4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a04      	ldr	r2, [pc, #16]	; (80083f0 <prvSwitchTimerLists+0xc0>)
 80083e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083e2:	4a04      	ldr	r2, [pc, #16]	; (80083f4 <prvSwitchTimerLists+0xc4>)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6013      	str	r3, [r2, #0]
}
 80083e8:	bf00      	nop
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20002118 	.word	0x20002118
 80083f4:	2000211c 	.word	0x2000211c

080083f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083fe:	f000 f969 	bl	80086d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <prvCheckForValidListAndQueue+0x60>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d120      	bne.n	800844c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800840a:	4814      	ldr	r0, [pc, #80]	; (800845c <prvCheckForValidListAndQueue+0x64>)
 800840c:	f7fd fdfc 	bl	8006008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008410:	4813      	ldr	r0, [pc, #76]	; (8008460 <prvCheckForValidListAndQueue+0x68>)
 8008412:	f7fd fdf9 	bl	8006008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008416:	4b13      	ldr	r3, [pc, #76]	; (8008464 <prvCheckForValidListAndQueue+0x6c>)
 8008418:	4a10      	ldr	r2, [pc, #64]	; (800845c <prvCheckForValidListAndQueue+0x64>)
 800841a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <prvCheckForValidListAndQueue+0x70>)
 800841e:	4a10      	ldr	r2, [pc, #64]	; (8008460 <prvCheckForValidListAndQueue+0x68>)
 8008420:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008422:	2300      	movs	r3, #0
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	4b11      	ldr	r3, [pc, #68]	; (800846c <prvCheckForValidListAndQueue+0x74>)
 8008428:	4a11      	ldr	r2, [pc, #68]	; (8008470 <prvCheckForValidListAndQueue+0x78>)
 800842a:	2110      	movs	r1, #16
 800842c:	200a      	movs	r0, #10
 800842e:	f7fd ff07 	bl	8006240 <xQueueGenericCreateStatic>
 8008432:	4603      	mov	r3, r0
 8008434:	4a08      	ldr	r2, [pc, #32]	; (8008458 <prvCheckForValidListAndQueue+0x60>)
 8008436:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <prvCheckForValidListAndQueue+0x60>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <prvCheckForValidListAndQueue+0x60>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	490b      	ldr	r1, [pc, #44]	; (8008474 <prvCheckForValidListAndQueue+0x7c>)
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fc44 	bl	8006cd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800844c:	f000 f972 	bl	8008734 <vPortExitCritical>
}
 8008450:	bf00      	nop
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20002120 	.word	0x20002120
 800845c:	200020f0 	.word	0x200020f0
 8008460:	20002104 	.word	0x20002104
 8008464:	20002118 	.word	0x20002118
 8008468:	2000211c 	.word	0x2000211c
 800846c:	200021cc 	.word	0x200021cc
 8008470:	2000212c 	.word	0x2000212c
 8008474:	0800d938 	.word	0x0800d938

08008478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3b04      	subs	r3, #4
 8008488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3b04      	subs	r3, #4
 8008496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f023 0201 	bic.w	r2, r3, #1
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3b04      	subs	r3, #4
 80084a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084a8:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <pxPortInitialiseStack+0x64>)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b14      	subs	r3, #20
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b04      	subs	r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f06f 0202 	mvn.w	r2, #2
 80084c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3b20      	subs	r3, #32
 80084cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ce:	68fb      	ldr	r3, [r7, #12]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	080084e1 	.word	0x080084e1

080084e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <prvTaskExitError+0x54>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f2:	d00a      	beq.n	800850a <prvTaskExitError+0x2a>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60fb      	str	r3, [r7, #12]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <prvTaskExitError+0x28>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60bb      	str	r3, [r7, #8]
}
 800851c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800851e:	bf00      	nop
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0fc      	beq.n	8008520 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008526:	bf00      	nop
 8008528:	bf00      	nop
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	20000018 	.word	0x20000018
	...

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	20001bf0 	.word	0x20001bf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <xPortStartScheduler+0x120>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a46      	ldr	r2, [pc, #280]	; (80086b4 <xPortStartScheduler+0x124>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10a      	bne.n	80085b6 <xPortStartScheduler+0x26>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b6:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <xPortStartScheduler+0x128>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x46>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <xPortStartScheduler+0x12c>)
 80085d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	22ff      	movs	r2, #255	; 0xff
 80085e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	4b31      	ldr	r3, [pc, #196]	; (80086c0 <xPortStartScheduler+0x130>)
 80085fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085fe:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <xPortStartScheduler+0x134>)
 8008600:	2207      	movs	r2, #7
 8008602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008604:	e009      	b.n	800861a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <xPortStartScheduler+0x134>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a2d      	ldr	r2, [pc, #180]	; (80086c4 <xPortStartScheduler+0x134>)
 800860e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d0ef      	beq.n	8008606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008626:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1c3 0307 	rsb	r3, r3, #7
 800862e:	2b04      	cmp	r3, #4
 8008630:	d00a      	beq.n	8008648 <xPortStartScheduler+0xb8>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60bb      	str	r3, [r7, #8]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008648:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <xPortStartScheduler+0x134>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <xPortStartScheduler+0x134>)
 8008650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <xPortStartScheduler+0x134>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800865a:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <xPortStartScheduler+0x134>)
 800865c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <xPortStartScheduler+0x138>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <xPortStartScheduler+0x138>)
 800866c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <xPortStartScheduler+0x138>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <xPortStartScheduler+0x138>)
 8008678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800867c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800867e:	f000 f8dd 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <xPortStartScheduler+0x13c>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008688:	f000 f8fc 	bl	8008884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800868c:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <xPortStartScheduler+0x140>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <xPortStartScheduler+0x140>)
 8008692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008698:	f7ff ff66 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800869c:	f7fe ff4a 	bl	8007534 <vTaskSwitchContext>
	prvTaskExitError();
 80086a0:	f7ff ff1e 	bl	80084e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	410fc271 	.word	0x410fc271
 80086b8:	410fc270 	.word	0x410fc270
 80086bc:	e000e400 	.word	0xe000e400
 80086c0:	2000221c 	.word	0x2000221c
 80086c4:	20002220 	.word	0x20002220
 80086c8:	e000ed20 	.word	0xe000ed20
 80086cc:	20000018 	.word	0x20000018
 80086d0:	e000ef34 	.word	0xe000ef34

080086d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ee:	4b0f      	ldr	r3, [pc, #60]	; (800872c <vPortEnterCritical+0x58>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <vPortEnterCritical+0x58>)
 80086f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <vPortEnterCritical+0x58>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d10f      	bne.n	8008720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortEnterCritical+0x5c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <vPortEnterCritical+0x4c>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	603b      	str	r3, [r7, #0]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortEnterCritical+0x4a>
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	20000018 	.word	0x20000018
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800873a:	4b12      	ldr	r3, [pc, #72]	; (8008784 <vPortExitCritical+0x50>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <vPortExitCritical+0x24>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	607b      	str	r3, [r7, #4]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <vPortExitCritical+0x50>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	4a09      	ldr	r2, [pc, #36]	; (8008784 <vPortExitCritical+0x50>)
 8008760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <vPortExitCritical+0x42>
 800876a:	2300      	movs	r3, #0
 800876c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f383 8811 	msr	BASEPRI, r3
}
 8008774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000018 	.word	0x20000018
	...

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7fe feb8 	bl	8007534 <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20001bf0 	.word	0x20001bf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7fe fdd5 	bl	80073c0 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <xPortSysTickHandler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <vPortSetupTimerInterrupt+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <vPortSetupTimerInterrupt+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <vPortSetupTimerInterrupt+0x44>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b04      	ldr	r3, [pc, #16]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e010 	.word	0xe000e010
 8008874:	e000e018 	.word	0xe000e018
 8008878:	2000000c 	.word	0x2000000c
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	e000e014 	.word	0xe000e014

08008884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008894 <vPortEnableVFP+0x10>
 8008888:	6801      	ldr	r1, [r0, #0]
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800888e:	6001      	str	r1, [r0, #0]
 8008890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008892:	bf00      	nop
 8008894:	e000ed88 	.word	0xe000ed88

08008898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800889e:	f3ef 8305 	mrs	r3, IPSR
 80088a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d914      	bls.n	80088d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088aa:	4a17      	ldr	r2, [pc, #92]	; (8008908 <vPortValidateInterruptPriority+0x70>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <vPortValidateInterruptPriority+0x74>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	7afa      	ldrb	r2, [r7, #11]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d20a      	bcs.n	80088d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088d4:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <vPortValidateInterruptPriority+0x78>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <vPortValidateInterruptPriority+0x7c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d90a      	bls.n	80088fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	603b      	str	r3, [r7, #0]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <vPortValidateInterruptPriority+0x60>
	}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	e000e3f0 	.word	0xe000e3f0
 800890c:	2000221c 	.word	0x2000221c
 8008910:	e000ed0c 	.word	0xe000ed0c
 8008914:	20002220 	.word	0x20002220

08008918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008924:	f7fe fc90 	bl	8007248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008928:	4b5b      	ldr	r3, [pc, #364]	; (8008a98 <pvPortMalloc+0x180>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008930:	f000 f920 	bl	8008b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008934:	4b59      	ldr	r3, [pc, #356]	; (8008a9c <pvPortMalloc+0x184>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8093 	bne.w	8008a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01d      	beq.n	8008984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008948:	2208      	movs	r2, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d014      	beq.n	8008984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	3308      	adds	r3, #8
 8008962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <pvPortMalloc+0x6c>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	617b      	str	r3, [r7, #20]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d06e      	beq.n	8008a68 <pvPortMalloc+0x150>
 800898a:	4b45      	ldr	r3, [pc, #276]	; (8008aa0 <pvPortMalloc+0x188>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d869      	bhi.n	8008a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008994:	4b43      	ldr	r3, [pc, #268]	; (8008aa4 <pvPortMalloc+0x18c>)
 8008996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008998:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <pvPortMalloc+0x18c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899e:	e004      	b.n	80089aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d903      	bls.n	80089bc <pvPortMalloc+0xa4>
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f1      	bne.n	80089a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089bc:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <pvPortMalloc+0x180>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d050      	beq.n	8008a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2208      	movs	r2, #8
 80089cc:	4413      	add	r3, r2
 80089ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	2308      	movs	r3, #8
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d91f      	bls.n	8008a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <pvPortMalloc+0xf8>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	613b      	str	r3, [r7, #16]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a22:	69b8      	ldr	r0, [r7, #24]
 8008a24:	f000 f90a 	bl	8008c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a28:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	4a1b      	ldr	r2, [pc, #108]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b1b      	ldr	r3, [pc, #108]	; (8008aa8 <pvPortMalloc+0x190>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d203      	bcs.n	8008a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a42:	4b17      	ldr	r3, [pc, #92]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <pvPortMalloc+0x190>)
 8008a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <pvPortMalloc+0x184>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <pvPortMalloc+0x194>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3301      	adds	r3, #1
 8008a64:	4a11      	ldr	r2, [pc, #68]	; (8008aac <pvPortMalloc+0x194>)
 8008a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a68:	f7fe fbfc 	bl	8007264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <pvPortMalloc+0x174>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60fb      	str	r3, [r7, #12]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <pvPortMalloc+0x172>
	return pvReturn;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3728      	adds	r7, #40	; 0x28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20015aac 	.word	0x20015aac
 8008a9c:	20015ac0 	.word	0x20015ac0
 8008aa0:	20015ab0 	.word	0x20015ab0
 8008aa4:	20015aa4 	.word	0x20015aa4
 8008aa8:	20015ab4 	.word	0x20015ab4
 8008aac:	20015ab8 	.word	0x20015ab8

08008ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d04d      	beq.n	8008b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ac2:	2308      	movs	r3, #8
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <vPortFree+0xb8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <vPortFree+0x44>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <vPortFree+0x62>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	60bb      	str	r3, [r7, #8]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <vPortFree+0xb8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01e      	beq.n	8008b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11a      	bne.n	8008b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <vPortFree+0xb8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	43db      	mvns	r3, r3
 8008b32:	401a      	ands	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b38:	f7fe fb86 	bl	8007248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <vPortFree+0xbc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4413      	add	r3, r2
 8008b46:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <vPortFree+0xbc>)
 8008b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b4a:	6938      	ldr	r0, [r7, #16]
 8008b4c:	f000 f876 	bl	8008c3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <vPortFree+0xc0>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	4a06      	ldr	r2, [pc, #24]	; (8008b70 <vPortFree+0xc0>)
 8008b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b5a:	f7fe fb83 	bl	8007264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20015ac0 	.word	0x20015ac0
 8008b6c:	20015ab0 	.word	0x20015ab0
 8008b70:	20015abc 	.word	0x20015abc

08008b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b7a:	4b29      	ldr	r3, [pc, #164]	; (8008c20 <prvHeapInit+0xac>)
 8008b7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b7e:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <prvHeapInit+0xb0>)
 8008b80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00c      	beq.n	8008ba6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f023 0307 	bic.w	r3, r3, #7
 8008b98:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	4a20      	ldr	r2, [pc, #128]	; (8008c24 <prvHeapInit+0xb0>)
 8008ba2:	4413      	add	r3, r2
 8008ba4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008baa:	4a1f      	ldr	r2, [pc, #124]	; (8008c28 <prvHeapInit+0xb4>)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <prvHeapInit+0xb4>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	4413      	add	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 0307 	bic.w	r3, r3, #7
 8008bcc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <prvHeapInit+0xb8>)
 8008bd2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bd4:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <prvHeapInit+0xb8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bdc:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <prvHeapInit+0xb8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	1ad2      	subs	r2, r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bf2:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <prvHeapInit+0xb8>)
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4a0c      	ldr	r2, [pc, #48]	; (8008c30 <prvHeapInit+0xbc>)
 8008c00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <prvHeapInit+0xc0>)
 8008c08:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c0a:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <prvHeapInit+0xc4>)
 8008c0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	00013880 	.word	0x00013880
 8008c24:	20002224 	.word	0x20002224
 8008c28:	20015aa4 	.word	0x20015aa4
 8008c2c:	20015aac 	.word	0x20015aac
 8008c30:	20015ab4 	.word	0x20015ab4
 8008c34:	20015ab0 	.word	0x20015ab0
 8008c38:	20015ac0 	.word	0x20015ac0

08008c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c44:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <prvInsertBlockIntoFreeList+0xac>)
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e002      	b.n	8008c50 <prvInsertBlockIntoFreeList+0x14>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d8f7      	bhi.n	8008c4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d108      	bne.n	8008c7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	441a      	add	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d118      	bne.n	8008cc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4b15      	ldr	r3, [pc, #84]	; (8008cec <prvInsertBlockIntoFreeList+0xb0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d00d      	beq.n	8008cba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	441a      	add	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e008      	b.n	8008ccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cba:	4b0c      	ldr	r3, [pc, #48]	; (8008cec <prvInsertBlockIntoFreeList+0xb0>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	e003      	b.n	8008ccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d002      	beq.n	8008cda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20015aa4 	.word	0x20015aa4
 8008cec:	20015aac 	.word	0x20015aac

08008cf0 <__errno>:
 8008cf0:	4b01      	ldr	r3, [pc, #4]	; (8008cf8 <__errno+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	2000001c 	.word	0x2000001c

08008cfc <__sflush_r>:
 8008cfc:	898a      	ldrh	r2, [r1, #12]
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	4605      	mov	r5, r0
 8008d04:	0710      	lsls	r0, r2, #28
 8008d06:	460c      	mov	r4, r1
 8008d08:	d458      	bmi.n	8008dbc <__sflush_r+0xc0>
 8008d0a:	684b      	ldr	r3, [r1, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dc05      	bgt.n	8008d1c <__sflush_r+0x20>
 8008d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dc02      	bgt.n	8008d1c <__sflush_r+0x20>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	d0f9      	beq.n	8008d16 <__sflush_r+0x1a>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d28:	682f      	ldr	r7, [r5, #0]
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	d032      	beq.n	8008d94 <__sflush_r+0x98>
 8008d2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	075a      	lsls	r2, r3, #29
 8008d34:	d505      	bpl.n	8008d42 <__sflush_r+0x46>
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	1ac0      	subs	r0, r0, r3
 8008d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d3c:	b10b      	cbz	r3, 8008d42 <__sflush_r+0x46>
 8008d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d40:	1ac0      	subs	r0, r0, r3
 8008d42:	2300      	movs	r3, #0
 8008d44:	4602      	mov	r2, r0
 8008d46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d48:	6a21      	ldr	r1, [r4, #32]
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b0      	blx	r6
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	d106      	bne.n	8008d62 <__sflush_r+0x66>
 8008d54:	6829      	ldr	r1, [r5, #0]
 8008d56:	291d      	cmp	r1, #29
 8008d58:	d82c      	bhi.n	8008db4 <__sflush_r+0xb8>
 8008d5a:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <__sflush_r+0x108>)
 8008d5c:	40ca      	lsrs	r2, r1
 8008d5e:	07d6      	lsls	r6, r2, #31
 8008d60:	d528      	bpl.n	8008db4 <__sflush_r+0xb8>
 8008d62:	2200      	movs	r2, #0
 8008d64:	6062      	str	r2, [r4, #4]
 8008d66:	04d9      	lsls	r1, r3, #19
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	d504      	bpl.n	8008d78 <__sflush_r+0x7c>
 8008d6e:	1c42      	adds	r2, r0, #1
 8008d70:	d101      	bne.n	8008d76 <__sflush_r+0x7a>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b903      	cbnz	r3, 8008d78 <__sflush_r+0x7c>
 8008d76:	6560      	str	r0, [r4, #84]	; 0x54
 8008d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d7a:	602f      	str	r7, [r5, #0]
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d0ca      	beq.n	8008d16 <__sflush_r+0x1a>
 8008d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d84:	4299      	cmp	r1, r3
 8008d86:	d002      	beq.n	8008d8e <__sflush_r+0x92>
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f000 f9cf 	bl	800912c <_free_r>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	6360      	str	r0, [r4, #52]	; 0x34
 8008d92:	e7c1      	b.n	8008d18 <__sflush_r+0x1c>
 8008d94:	6a21      	ldr	r1, [r4, #32]
 8008d96:	2301      	movs	r3, #1
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b0      	blx	r6
 8008d9c:	1c41      	adds	r1, r0, #1
 8008d9e:	d1c7      	bne.n	8008d30 <__sflush_r+0x34>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0c4      	beq.n	8008d30 <__sflush_r+0x34>
 8008da6:	2b1d      	cmp	r3, #29
 8008da8:	d001      	beq.n	8008dae <__sflush_r+0xb2>
 8008daa:	2b16      	cmp	r3, #22
 8008dac:	d101      	bne.n	8008db2 <__sflush_r+0xb6>
 8008dae:	602f      	str	r7, [r5, #0]
 8008db0:	e7b1      	b.n	8008d16 <__sflush_r+0x1a>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	e7ad      	b.n	8008d18 <__sflush_r+0x1c>
 8008dbc:	690f      	ldr	r7, [r1, #16]
 8008dbe:	2f00      	cmp	r7, #0
 8008dc0:	d0a9      	beq.n	8008d16 <__sflush_r+0x1a>
 8008dc2:	0793      	lsls	r3, r2, #30
 8008dc4:	680e      	ldr	r6, [r1, #0]
 8008dc6:	bf08      	it	eq
 8008dc8:	694b      	ldreq	r3, [r1, #20]
 8008dca:	600f      	str	r7, [r1, #0]
 8008dcc:	bf18      	it	ne
 8008dce:	2300      	movne	r3, #0
 8008dd0:	eba6 0807 	sub.w	r8, r6, r7
 8008dd4:	608b      	str	r3, [r1, #8]
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	dd9c      	ble.n	8008d16 <__sflush_r+0x1a>
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008de0:	4643      	mov	r3, r8
 8008de2:	463a      	mov	r2, r7
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b0      	blx	r6
 8008de8:	2800      	cmp	r0, #0
 8008dea:	dc06      	bgt.n	8008dfa <__sflush_r+0xfe>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e78e      	b.n	8008d18 <__sflush_r+0x1c>
 8008dfa:	4407      	add	r7, r0
 8008dfc:	eba8 0800 	sub.w	r8, r8, r0
 8008e00:	e7e9      	b.n	8008dd6 <__sflush_r+0xda>
 8008e02:	bf00      	nop
 8008e04:	20400001 	.word	0x20400001

08008e08 <_fflush_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	b913      	cbnz	r3, 8008e18 <_fflush_r+0x10>
 8008e12:	2500      	movs	r5, #0
 8008e14:	4628      	mov	r0, r5
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	b118      	cbz	r0, 8008e22 <_fflush_r+0x1a>
 8008e1a:	6983      	ldr	r3, [r0, #24]
 8008e1c:	b90b      	cbnz	r3, 8008e22 <_fflush_r+0x1a>
 8008e1e:	f000 f899 	bl	8008f54 <__sinit>
 8008e22:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <_fflush_r+0x6c>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d11b      	bne.n	8008e60 <_fflush_r+0x58>
 8008e28:	686c      	ldr	r4, [r5, #4]
 8008e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0ef      	beq.n	8008e12 <_fflush_r+0xa>
 8008e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e34:	07d0      	lsls	r0, r2, #31
 8008e36:	d404      	bmi.n	8008e42 <_fflush_r+0x3a>
 8008e38:	0599      	lsls	r1, r3, #22
 8008e3a:	d402      	bmi.n	8008e42 <_fflush_r+0x3a>
 8008e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e3e:	f000 f94c 	bl	80090da <__retarget_lock_acquire_recursive>
 8008e42:	4628      	mov	r0, r5
 8008e44:	4621      	mov	r1, r4
 8008e46:	f7ff ff59 	bl	8008cfc <__sflush_r>
 8008e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e4c:	07da      	lsls	r2, r3, #31
 8008e4e:	4605      	mov	r5, r0
 8008e50:	d4e0      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	059b      	lsls	r3, r3, #22
 8008e56:	d4dd      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5a:	f000 f93f 	bl	80090dc <__retarget_lock_release_recursive>
 8008e5e:	e7d9      	b.n	8008e14 <_fflush_r+0xc>
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <_fflush_r+0x70>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d101      	bne.n	8008e6a <_fflush_r+0x62>
 8008e66:	68ac      	ldr	r4, [r5, #8]
 8008e68:	e7df      	b.n	8008e2a <_fflush_r+0x22>
 8008e6a:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <_fflush_r+0x74>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	bf08      	it	eq
 8008e70:	68ec      	ldreq	r4, [r5, #12]
 8008e72:	e7da      	b.n	8008e2a <_fflush_r+0x22>
 8008e74:	0800da84 	.word	0x0800da84
 8008e78:	0800daa4 	.word	0x0800daa4
 8008e7c:	0800da64 	.word	0x0800da64

08008e80 <fflush>:
 8008e80:	4601      	mov	r1, r0
 8008e82:	b920      	cbnz	r0, 8008e8e <fflush+0xe>
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <fflush+0x18>)
 8008e86:	4905      	ldr	r1, [pc, #20]	; (8008e9c <fflush+0x1c>)
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f000 b8e1 	b.w	8009050 <_fwalk_reent>
 8008e8e:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <fflush+0x20>)
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	f7ff bfb9 	b.w	8008e08 <_fflush_r>
 8008e96:	bf00      	nop
 8008e98:	0800dac4 	.word	0x0800dac4
 8008e9c:	08008e09 	.word	0x08008e09
 8008ea0:	2000001c 	.word	0x2000001c

08008ea4 <std>:
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8008eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eb2:	6083      	str	r3, [r0, #8]
 8008eb4:	8181      	strh	r1, [r0, #12]
 8008eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8008eb8:	81c2      	strh	r2, [r0, #14]
 8008eba:	6183      	str	r3, [r0, #24]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	305c      	adds	r0, #92	; 0x5c
 8008ec2:	f000 f92b 	bl	800911c <memset>
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <std+0x38>)
 8008ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8008eca:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <std+0x3c>)
 8008ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <std+0x40>)
 8008ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <std+0x44>)
 8008ed4:	6224      	str	r4, [r4, #32]
 8008ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ed8:	bd10      	pop	{r4, pc}
 8008eda:	bf00      	nop
 8008edc:	08009de1 	.word	0x08009de1
 8008ee0:	08009e03 	.word	0x08009e03
 8008ee4:	08009e3b 	.word	0x08009e3b
 8008ee8:	08009e5f 	.word	0x08009e5f

08008eec <_cleanup_r>:
 8008eec:	4901      	ldr	r1, [pc, #4]	; (8008ef4 <_cleanup_r+0x8>)
 8008eee:	f000 b8af 	b.w	8009050 <_fwalk_reent>
 8008ef2:	bf00      	nop
 8008ef4:	08008e09 	.word	0x08008e09

08008ef8 <__sfmoreglue>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	2268      	movs	r2, #104	; 0x68
 8008efc:	1e4d      	subs	r5, r1, #1
 8008efe:	4355      	muls	r5, r2
 8008f00:	460e      	mov	r6, r1
 8008f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f06:	f000 f97d 	bl	8009204 <_malloc_r>
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	b140      	cbz	r0, 8008f20 <__sfmoreglue+0x28>
 8008f0e:	2100      	movs	r1, #0
 8008f10:	e9c0 1600 	strd	r1, r6, [r0]
 8008f14:	300c      	adds	r0, #12
 8008f16:	60a0      	str	r0, [r4, #8]
 8008f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f1c:	f000 f8fe 	bl	800911c <memset>
 8008f20:	4620      	mov	r0, r4
 8008f22:	bd70      	pop	{r4, r5, r6, pc}

08008f24 <__sfp_lock_acquire>:
 8008f24:	4801      	ldr	r0, [pc, #4]	; (8008f2c <__sfp_lock_acquire+0x8>)
 8008f26:	f000 b8d8 	b.w	80090da <__retarget_lock_acquire_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	20015ac5 	.word	0x20015ac5

08008f30 <__sfp_lock_release>:
 8008f30:	4801      	ldr	r0, [pc, #4]	; (8008f38 <__sfp_lock_release+0x8>)
 8008f32:	f000 b8d3 	b.w	80090dc <__retarget_lock_release_recursive>
 8008f36:	bf00      	nop
 8008f38:	20015ac5 	.word	0x20015ac5

08008f3c <__sinit_lock_acquire>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__sinit_lock_acquire+0x8>)
 8008f3e:	f000 b8cc 	b.w	80090da <__retarget_lock_acquire_recursive>
 8008f42:	bf00      	nop
 8008f44:	20015ac6 	.word	0x20015ac6

08008f48 <__sinit_lock_release>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__sinit_lock_release+0x8>)
 8008f4a:	f000 b8c7 	b.w	80090dc <__retarget_lock_release_recursive>
 8008f4e:	bf00      	nop
 8008f50:	20015ac6 	.word	0x20015ac6

08008f54 <__sinit>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	4604      	mov	r4, r0
 8008f58:	f7ff fff0 	bl	8008f3c <__sinit_lock_acquire>
 8008f5c:	69a3      	ldr	r3, [r4, #24]
 8008f5e:	b11b      	cbz	r3, 8008f68 <__sinit+0x14>
 8008f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f64:	f7ff bff0 	b.w	8008f48 <__sinit_lock_release>
 8008f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <__sinit+0x68>)
 8008f70:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <__sinit+0x6c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f76:	42a3      	cmp	r3, r4
 8008f78:	bf04      	itt	eq
 8008f7a:	2301      	moveq	r3, #1
 8008f7c:	61a3      	streq	r3, [r4, #24]
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 f820 	bl	8008fc4 <__sfp>
 8008f84:	6060      	str	r0, [r4, #4]
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 f81c 	bl	8008fc4 <__sfp>
 8008f8c:	60a0      	str	r0, [r4, #8]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 f818 	bl	8008fc4 <__sfp>
 8008f94:	2200      	movs	r2, #0
 8008f96:	60e0      	str	r0, [r4, #12]
 8008f98:	2104      	movs	r1, #4
 8008f9a:	6860      	ldr	r0, [r4, #4]
 8008f9c:	f7ff ff82 	bl	8008ea4 <std>
 8008fa0:	68a0      	ldr	r0, [r4, #8]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	2109      	movs	r1, #9
 8008fa6:	f7ff ff7d 	bl	8008ea4 <std>
 8008faa:	68e0      	ldr	r0, [r4, #12]
 8008fac:	2202      	movs	r2, #2
 8008fae:	2112      	movs	r1, #18
 8008fb0:	f7ff ff78 	bl	8008ea4 <std>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	61a3      	str	r3, [r4, #24]
 8008fb8:	e7d2      	b.n	8008f60 <__sinit+0xc>
 8008fba:	bf00      	nop
 8008fbc:	0800dac4 	.word	0x0800dac4
 8008fc0:	08008eed 	.word	0x08008eed

08008fc4 <__sfp>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	f7ff ffac 	bl	8008f24 <__sfp_lock_acquire>
 8008fcc:	4b1e      	ldr	r3, [pc, #120]	; (8009048 <__sfp+0x84>)
 8008fce:	681e      	ldr	r6, [r3, #0]
 8008fd0:	69b3      	ldr	r3, [r6, #24]
 8008fd2:	b913      	cbnz	r3, 8008fda <__sfp+0x16>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff ffbd 	bl	8008f54 <__sinit>
 8008fda:	3648      	adds	r6, #72	; 0x48
 8008fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	d503      	bpl.n	8008fec <__sfp+0x28>
 8008fe4:	6833      	ldr	r3, [r6, #0]
 8008fe6:	b30b      	cbz	r3, 800902c <__sfp+0x68>
 8008fe8:	6836      	ldr	r6, [r6, #0]
 8008fea:	e7f7      	b.n	8008fdc <__sfp+0x18>
 8008fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ff0:	b9d5      	cbnz	r5, 8009028 <__sfp+0x64>
 8008ff2:	4b16      	ldr	r3, [pc, #88]	; (800904c <__sfp+0x88>)
 8008ff4:	60e3      	str	r3, [r4, #12]
 8008ff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8008ffc:	f000 f86c 	bl	80090d8 <__retarget_lock_init_recursive>
 8009000:	f7ff ff96 	bl	8008f30 <__sfp_lock_release>
 8009004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800900c:	6025      	str	r5, [r4, #0]
 800900e:	61a5      	str	r5, [r4, #24]
 8009010:	2208      	movs	r2, #8
 8009012:	4629      	mov	r1, r5
 8009014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009018:	f000 f880 	bl	800911c <memset>
 800901c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009024:	4620      	mov	r0, r4
 8009026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009028:	3468      	adds	r4, #104	; 0x68
 800902a:	e7d9      	b.n	8008fe0 <__sfp+0x1c>
 800902c:	2104      	movs	r1, #4
 800902e:	4638      	mov	r0, r7
 8009030:	f7ff ff62 	bl	8008ef8 <__sfmoreglue>
 8009034:	4604      	mov	r4, r0
 8009036:	6030      	str	r0, [r6, #0]
 8009038:	2800      	cmp	r0, #0
 800903a:	d1d5      	bne.n	8008fe8 <__sfp+0x24>
 800903c:	f7ff ff78 	bl	8008f30 <__sfp_lock_release>
 8009040:	230c      	movs	r3, #12
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	e7ee      	b.n	8009024 <__sfp+0x60>
 8009046:	bf00      	nop
 8009048:	0800dac4 	.word	0x0800dac4
 800904c:	ffff0001 	.word	0xffff0001

08009050 <_fwalk_reent>:
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009054:	4606      	mov	r6, r0
 8009056:	4688      	mov	r8, r1
 8009058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800905c:	2700      	movs	r7, #0
 800905e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009062:	f1b9 0901 	subs.w	r9, r9, #1
 8009066:	d505      	bpl.n	8009074 <_fwalk_reent+0x24>
 8009068:	6824      	ldr	r4, [r4, #0]
 800906a:	2c00      	cmp	r4, #0
 800906c:	d1f7      	bne.n	800905e <_fwalk_reent+0xe>
 800906e:	4638      	mov	r0, r7
 8009070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009074:	89ab      	ldrh	r3, [r5, #12]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d907      	bls.n	800908a <_fwalk_reent+0x3a>
 800907a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800907e:	3301      	adds	r3, #1
 8009080:	d003      	beq.n	800908a <_fwalk_reent+0x3a>
 8009082:	4629      	mov	r1, r5
 8009084:	4630      	mov	r0, r6
 8009086:	47c0      	blx	r8
 8009088:	4307      	orrs	r7, r0
 800908a:	3568      	adds	r5, #104	; 0x68
 800908c:	e7e9      	b.n	8009062 <_fwalk_reent+0x12>
	...

08009090 <__libc_init_array>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	4d0d      	ldr	r5, [pc, #52]	; (80090c8 <__libc_init_array+0x38>)
 8009094:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <__libc_init_array+0x3c>)
 8009096:	1b64      	subs	r4, r4, r5
 8009098:	10a4      	asrs	r4, r4, #2
 800909a:	2600      	movs	r6, #0
 800909c:	42a6      	cmp	r6, r4
 800909e:	d109      	bne.n	80090b4 <__libc_init_array+0x24>
 80090a0:	4d0b      	ldr	r5, [pc, #44]	; (80090d0 <__libc_init_array+0x40>)
 80090a2:	4c0c      	ldr	r4, [pc, #48]	; (80090d4 <__libc_init_array+0x44>)
 80090a4:	f004 f94e 	bl	800d344 <_init>
 80090a8:	1b64      	subs	r4, r4, r5
 80090aa:	10a4      	asrs	r4, r4, #2
 80090ac:	2600      	movs	r6, #0
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	d105      	bne.n	80090be <__libc_init_array+0x2e>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b8:	4798      	blx	r3
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7ee      	b.n	800909c <__libc_init_array+0xc>
 80090be:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c2:	4798      	blx	r3
 80090c4:	3601      	adds	r6, #1
 80090c6:	e7f2      	b.n	80090ae <__libc_init_array+0x1e>
 80090c8:	0800de0c 	.word	0x0800de0c
 80090cc:	0800de0c 	.word	0x0800de0c
 80090d0:	0800de0c 	.word	0x0800de0c
 80090d4:	0800de10 	.word	0x0800de10

080090d8 <__retarget_lock_init_recursive>:
 80090d8:	4770      	bx	lr

080090da <__retarget_lock_acquire_recursive>:
 80090da:	4770      	bx	lr

080090dc <__retarget_lock_release_recursive>:
 80090dc:	4770      	bx	lr
	...

080090e0 <malloc>:
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <malloc+0xc>)
 80090e2:	4601      	mov	r1, r0
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f000 b88d 	b.w	8009204 <_malloc_r>
 80090ea:	bf00      	nop
 80090ec:	2000001c 	.word	0x2000001c

080090f0 <free>:
 80090f0:	4b02      	ldr	r3, [pc, #8]	; (80090fc <free+0xc>)
 80090f2:	4601      	mov	r1, r0
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f000 b819 	b.w	800912c <_free_r>
 80090fa:	bf00      	nop
 80090fc:	2000001c 	.word	0x2000001c

08009100 <memcpy>:
 8009100:	440a      	add	r2, r1
 8009102:	4291      	cmp	r1, r2
 8009104:	f100 33ff 	add.w	r3, r0, #4294967295
 8009108:	d100      	bne.n	800910c <memcpy+0xc>
 800910a:	4770      	bx	lr
 800910c:	b510      	push	{r4, lr}
 800910e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009116:	4291      	cmp	r1, r2
 8009118:	d1f9      	bne.n	800910e <memcpy+0xe>
 800911a:	bd10      	pop	{r4, pc}

0800911c <memset>:
 800911c:	4402      	add	r2, r0
 800911e:	4603      	mov	r3, r0
 8009120:	4293      	cmp	r3, r2
 8009122:	d100      	bne.n	8009126 <memset+0xa>
 8009124:	4770      	bx	lr
 8009126:	f803 1b01 	strb.w	r1, [r3], #1
 800912a:	e7f9      	b.n	8009120 <memset+0x4>

0800912c <_free_r>:
 800912c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800912e:	2900      	cmp	r1, #0
 8009130:	d044      	beq.n	80091bc <_free_r+0x90>
 8009132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009136:	9001      	str	r0, [sp, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f1a1 0404 	sub.w	r4, r1, #4
 800913e:	bfb8      	it	lt
 8009140:	18e4      	addlt	r4, r4, r3
 8009142:	f003 f84d 	bl	800c1e0 <__malloc_lock>
 8009146:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <_free_r+0x94>)
 8009148:	9801      	ldr	r0, [sp, #4]
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	b933      	cbnz	r3, 800915c <_free_r+0x30>
 800914e:	6063      	str	r3, [r4, #4]
 8009150:	6014      	str	r4, [r2, #0]
 8009152:	b003      	add	sp, #12
 8009154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009158:	f003 b848 	b.w	800c1ec <__malloc_unlock>
 800915c:	42a3      	cmp	r3, r4
 800915e:	d908      	bls.n	8009172 <_free_r+0x46>
 8009160:	6825      	ldr	r5, [r4, #0]
 8009162:	1961      	adds	r1, r4, r5
 8009164:	428b      	cmp	r3, r1
 8009166:	bf01      	itttt	eq
 8009168:	6819      	ldreq	r1, [r3, #0]
 800916a:	685b      	ldreq	r3, [r3, #4]
 800916c:	1949      	addeq	r1, r1, r5
 800916e:	6021      	streq	r1, [r4, #0]
 8009170:	e7ed      	b.n	800914e <_free_r+0x22>
 8009172:	461a      	mov	r2, r3
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	b10b      	cbz	r3, 800917c <_free_r+0x50>
 8009178:	42a3      	cmp	r3, r4
 800917a:	d9fa      	bls.n	8009172 <_free_r+0x46>
 800917c:	6811      	ldr	r1, [r2, #0]
 800917e:	1855      	adds	r5, r2, r1
 8009180:	42a5      	cmp	r5, r4
 8009182:	d10b      	bne.n	800919c <_free_r+0x70>
 8009184:	6824      	ldr	r4, [r4, #0]
 8009186:	4421      	add	r1, r4
 8009188:	1854      	adds	r4, r2, r1
 800918a:	42a3      	cmp	r3, r4
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	d1e0      	bne.n	8009152 <_free_r+0x26>
 8009190:	681c      	ldr	r4, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	6053      	str	r3, [r2, #4]
 8009196:	4421      	add	r1, r4
 8009198:	6011      	str	r1, [r2, #0]
 800919a:	e7da      	b.n	8009152 <_free_r+0x26>
 800919c:	d902      	bls.n	80091a4 <_free_r+0x78>
 800919e:	230c      	movs	r3, #12
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	e7d6      	b.n	8009152 <_free_r+0x26>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf04      	itt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	bf04      	itt	eq
 80091b4:	1949      	addeq	r1, r1, r5
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	6054      	str	r4, [r2, #4]
 80091ba:	e7ca      	b.n	8009152 <_free_r+0x26>
 80091bc:	b003      	add	sp, #12
 80091be:	bd30      	pop	{r4, r5, pc}
 80091c0:	20015ac8 	.word	0x20015ac8

080091c4 <sbrk_aligned>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4e0e      	ldr	r6, [pc, #56]	; (8009200 <sbrk_aligned+0x3c>)
 80091c8:	460c      	mov	r4, r1
 80091ca:	6831      	ldr	r1, [r6, #0]
 80091cc:	4605      	mov	r5, r0
 80091ce:	b911      	cbnz	r1, 80091d6 <sbrk_aligned+0x12>
 80091d0:	f000 fdf6 	bl	8009dc0 <_sbrk_r>
 80091d4:	6030      	str	r0, [r6, #0]
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 fdf1 	bl	8009dc0 <_sbrk_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d00a      	beq.n	80091f8 <sbrk_aligned+0x34>
 80091e2:	1cc4      	adds	r4, r0, #3
 80091e4:	f024 0403 	bic.w	r4, r4, #3
 80091e8:	42a0      	cmp	r0, r4
 80091ea:	d007      	beq.n	80091fc <sbrk_aligned+0x38>
 80091ec:	1a21      	subs	r1, r4, r0
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 fde6 	bl	8009dc0 <_sbrk_r>
 80091f4:	3001      	adds	r0, #1
 80091f6:	d101      	bne.n	80091fc <sbrk_aligned+0x38>
 80091f8:	f04f 34ff 	mov.w	r4, #4294967295
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	20015acc 	.word	0x20015acc

08009204 <_malloc_r>:
 8009204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	1ccd      	adds	r5, r1, #3
 800920a:	f025 0503 	bic.w	r5, r5, #3
 800920e:	3508      	adds	r5, #8
 8009210:	2d0c      	cmp	r5, #12
 8009212:	bf38      	it	cc
 8009214:	250c      	movcc	r5, #12
 8009216:	2d00      	cmp	r5, #0
 8009218:	4607      	mov	r7, r0
 800921a:	db01      	blt.n	8009220 <_malloc_r+0x1c>
 800921c:	42a9      	cmp	r1, r5
 800921e:	d905      	bls.n	800922c <_malloc_r+0x28>
 8009220:	230c      	movs	r3, #12
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	2600      	movs	r6, #0
 8009226:	4630      	mov	r0, r6
 8009228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922c:	4e2e      	ldr	r6, [pc, #184]	; (80092e8 <_malloc_r+0xe4>)
 800922e:	f002 ffd7 	bl	800c1e0 <__malloc_lock>
 8009232:	6833      	ldr	r3, [r6, #0]
 8009234:	461c      	mov	r4, r3
 8009236:	bb34      	cbnz	r4, 8009286 <_malloc_r+0x82>
 8009238:	4629      	mov	r1, r5
 800923a:	4638      	mov	r0, r7
 800923c:	f7ff ffc2 	bl	80091c4 <sbrk_aligned>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	4604      	mov	r4, r0
 8009244:	d14d      	bne.n	80092e2 <_malloc_r+0xde>
 8009246:	6834      	ldr	r4, [r6, #0]
 8009248:	4626      	mov	r6, r4
 800924a:	2e00      	cmp	r6, #0
 800924c:	d140      	bne.n	80092d0 <_malloc_r+0xcc>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	4631      	mov	r1, r6
 8009252:	4638      	mov	r0, r7
 8009254:	eb04 0803 	add.w	r8, r4, r3
 8009258:	f000 fdb2 	bl	8009dc0 <_sbrk_r>
 800925c:	4580      	cmp	r8, r0
 800925e:	d13a      	bne.n	80092d6 <_malloc_r+0xd2>
 8009260:	6821      	ldr	r1, [r4, #0]
 8009262:	3503      	adds	r5, #3
 8009264:	1a6d      	subs	r5, r5, r1
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	4629      	mov	r1, r5
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ffa5 	bl	80091c4 <sbrk_aligned>
 800927a:	3001      	adds	r0, #1
 800927c:	d02b      	beq.n	80092d6 <_malloc_r+0xd2>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	442b      	add	r3, r5
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	e00e      	b.n	80092a4 <_malloc_r+0xa0>
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	1b52      	subs	r2, r2, r5
 800928a:	d41e      	bmi.n	80092ca <_malloc_r+0xc6>
 800928c:	2a0b      	cmp	r2, #11
 800928e:	d916      	bls.n	80092be <_malloc_r+0xba>
 8009290:	1961      	adds	r1, r4, r5
 8009292:	42a3      	cmp	r3, r4
 8009294:	6025      	str	r5, [r4, #0]
 8009296:	bf18      	it	ne
 8009298:	6059      	strne	r1, [r3, #4]
 800929a:	6863      	ldr	r3, [r4, #4]
 800929c:	bf08      	it	eq
 800929e:	6031      	streq	r1, [r6, #0]
 80092a0:	5162      	str	r2, [r4, r5]
 80092a2:	604b      	str	r3, [r1, #4]
 80092a4:	4638      	mov	r0, r7
 80092a6:	f104 060b 	add.w	r6, r4, #11
 80092aa:	f002 ff9f 	bl	800c1ec <__malloc_unlock>
 80092ae:	f026 0607 	bic.w	r6, r6, #7
 80092b2:	1d23      	adds	r3, r4, #4
 80092b4:	1af2      	subs	r2, r6, r3
 80092b6:	d0b6      	beq.n	8009226 <_malloc_r+0x22>
 80092b8:	1b9b      	subs	r3, r3, r6
 80092ba:	50a3      	str	r3, [r4, r2]
 80092bc:	e7b3      	b.n	8009226 <_malloc_r+0x22>
 80092be:	6862      	ldr	r2, [r4, #4]
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	bf0c      	ite	eq
 80092c4:	6032      	streq	r2, [r6, #0]
 80092c6:	605a      	strne	r2, [r3, #4]
 80092c8:	e7ec      	b.n	80092a4 <_malloc_r+0xa0>
 80092ca:	4623      	mov	r3, r4
 80092cc:	6864      	ldr	r4, [r4, #4]
 80092ce:	e7b2      	b.n	8009236 <_malloc_r+0x32>
 80092d0:	4634      	mov	r4, r6
 80092d2:	6876      	ldr	r6, [r6, #4]
 80092d4:	e7b9      	b.n	800924a <_malloc_r+0x46>
 80092d6:	230c      	movs	r3, #12
 80092d8:	603b      	str	r3, [r7, #0]
 80092da:	4638      	mov	r0, r7
 80092dc:	f002 ff86 	bl	800c1ec <__malloc_unlock>
 80092e0:	e7a1      	b.n	8009226 <_malloc_r+0x22>
 80092e2:	6025      	str	r5, [r4, #0]
 80092e4:	e7de      	b.n	80092a4 <_malloc_r+0xa0>
 80092e6:	bf00      	nop
 80092e8:	20015ac8 	.word	0x20015ac8

080092ec <__cvt>:
 80092ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f0:	ec55 4b10 	vmov	r4, r5, d0
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	460e      	mov	r6, r1
 80092f8:	4619      	mov	r1, r3
 80092fa:	462b      	mov	r3, r5
 80092fc:	bfbb      	ittet	lt
 80092fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009302:	461d      	movlt	r5, r3
 8009304:	2300      	movge	r3, #0
 8009306:	232d      	movlt	r3, #45	; 0x2d
 8009308:	700b      	strb	r3, [r1, #0]
 800930a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800930c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009310:	4691      	mov	r9, r2
 8009312:	f023 0820 	bic.w	r8, r3, #32
 8009316:	bfbc      	itt	lt
 8009318:	4622      	movlt	r2, r4
 800931a:	4614      	movlt	r4, r2
 800931c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009320:	d005      	beq.n	800932e <__cvt+0x42>
 8009322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009326:	d100      	bne.n	800932a <__cvt+0x3e>
 8009328:	3601      	adds	r6, #1
 800932a:	2102      	movs	r1, #2
 800932c:	e000      	b.n	8009330 <__cvt+0x44>
 800932e:	2103      	movs	r1, #3
 8009330:	ab03      	add	r3, sp, #12
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	ab02      	add	r3, sp, #8
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	ec45 4b10 	vmov	d0, r4, r5
 800933c:	4653      	mov	r3, sl
 800933e:	4632      	mov	r2, r6
 8009340:	f001 fd62 	bl	800ae08 <_dtoa_r>
 8009344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009348:	4607      	mov	r7, r0
 800934a:	d102      	bne.n	8009352 <__cvt+0x66>
 800934c:	f019 0f01 	tst.w	r9, #1
 8009350:	d022      	beq.n	8009398 <__cvt+0xac>
 8009352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009356:	eb07 0906 	add.w	r9, r7, r6
 800935a:	d110      	bne.n	800937e <__cvt+0x92>
 800935c:	783b      	ldrb	r3, [r7, #0]
 800935e:	2b30      	cmp	r3, #48	; 0x30
 8009360:	d10a      	bne.n	8009378 <__cvt+0x8c>
 8009362:	2200      	movs	r2, #0
 8009364:	2300      	movs	r3, #0
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	f7f7 fbc5 	bl	8000af8 <__aeabi_dcmpeq>
 800936e:	b918      	cbnz	r0, 8009378 <__cvt+0x8c>
 8009370:	f1c6 0601 	rsb	r6, r6, #1
 8009374:	f8ca 6000 	str.w	r6, [sl]
 8009378:	f8da 3000 	ldr.w	r3, [sl]
 800937c:	4499      	add	r9, r3
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	f7f7 fbb7 	bl	8000af8 <__aeabi_dcmpeq>
 800938a:	b108      	cbz	r0, 8009390 <__cvt+0xa4>
 800938c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009390:	2230      	movs	r2, #48	; 0x30
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	454b      	cmp	r3, r9
 8009396:	d307      	bcc.n	80093a8 <__cvt+0xbc>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800939c:	1bdb      	subs	r3, r3, r7
 800939e:	4638      	mov	r0, r7
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	b004      	add	sp, #16
 80093a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a8:	1c59      	adds	r1, r3, #1
 80093aa:	9103      	str	r1, [sp, #12]
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e7f0      	b.n	8009392 <__cvt+0xa6>

080093b0 <__exponent>:
 80093b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b2:	4603      	mov	r3, r0
 80093b4:	2900      	cmp	r1, #0
 80093b6:	bfb8      	it	lt
 80093b8:	4249      	neglt	r1, r1
 80093ba:	f803 2b02 	strb.w	r2, [r3], #2
 80093be:	bfb4      	ite	lt
 80093c0:	222d      	movlt	r2, #45	; 0x2d
 80093c2:	222b      	movge	r2, #43	; 0x2b
 80093c4:	2909      	cmp	r1, #9
 80093c6:	7042      	strb	r2, [r0, #1]
 80093c8:	dd2a      	ble.n	8009420 <__exponent+0x70>
 80093ca:	f10d 0407 	add.w	r4, sp, #7
 80093ce:	46a4      	mov	ip, r4
 80093d0:	270a      	movs	r7, #10
 80093d2:	46a6      	mov	lr, r4
 80093d4:	460a      	mov	r2, r1
 80093d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80093da:	fb07 1516 	mls	r5, r7, r6, r1
 80093de:	3530      	adds	r5, #48	; 0x30
 80093e0:	2a63      	cmp	r2, #99	; 0x63
 80093e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80093e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093ea:	4631      	mov	r1, r6
 80093ec:	dcf1      	bgt.n	80093d2 <__exponent+0x22>
 80093ee:	3130      	adds	r1, #48	; 0x30
 80093f0:	f1ae 0502 	sub.w	r5, lr, #2
 80093f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093f8:	1c44      	adds	r4, r0, #1
 80093fa:	4629      	mov	r1, r5
 80093fc:	4561      	cmp	r1, ip
 80093fe:	d30a      	bcc.n	8009416 <__exponent+0x66>
 8009400:	f10d 0209 	add.w	r2, sp, #9
 8009404:	eba2 020e 	sub.w	r2, r2, lr
 8009408:	4565      	cmp	r5, ip
 800940a:	bf88      	it	hi
 800940c:	2200      	movhi	r2, #0
 800940e:	4413      	add	r3, r2
 8009410:	1a18      	subs	r0, r3, r0
 8009412:	b003      	add	sp, #12
 8009414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800941a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800941e:	e7ed      	b.n	80093fc <__exponent+0x4c>
 8009420:	2330      	movs	r3, #48	; 0x30
 8009422:	3130      	adds	r1, #48	; 0x30
 8009424:	7083      	strb	r3, [r0, #2]
 8009426:	70c1      	strb	r1, [r0, #3]
 8009428:	1d03      	adds	r3, r0, #4
 800942a:	e7f1      	b.n	8009410 <__exponent+0x60>

0800942c <_printf_float>:
 800942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	ed2d 8b02 	vpush	{d8}
 8009434:	b08d      	sub	sp, #52	; 0x34
 8009436:	460c      	mov	r4, r1
 8009438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800943c:	4616      	mov	r6, r2
 800943e:	461f      	mov	r7, r3
 8009440:	4605      	mov	r5, r0
 8009442:	f002 fe3f 	bl	800c0c4 <_localeconv_r>
 8009446:	f8d0 a000 	ldr.w	sl, [r0]
 800944a:	4650      	mov	r0, sl
 800944c:	f7f6 fed2 	bl	80001f4 <strlen>
 8009450:	2300      	movs	r3, #0
 8009452:	930a      	str	r3, [sp, #40]	; 0x28
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	9305      	str	r3, [sp, #20]
 8009458:	f8d8 3000 	ldr.w	r3, [r8]
 800945c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009460:	3307      	adds	r3, #7
 8009462:	f023 0307 	bic.w	r3, r3, #7
 8009466:	f103 0208 	add.w	r2, r3, #8
 800946a:	f8c8 2000 	str.w	r2, [r8]
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800947a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	f8cd 8018 	str.w	r8, [sp, #24]
 8009484:	ee08 0a10 	vmov	s16, r0
 8009488:	4b9f      	ldr	r3, [pc, #636]	; (8009708 <_printf_float+0x2dc>)
 800948a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800948e:	f04f 32ff 	mov.w	r2, #4294967295
 8009492:	f7f7 fb63 	bl	8000b5c <__aeabi_dcmpun>
 8009496:	bb88      	cbnz	r0, 80094fc <_printf_float+0xd0>
 8009498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800949c:	4b9a      	ldr	r3, [pc, #616]	; (8009708 <_printf_float+0x2dc>)
 800949e:	f04f 32ff 	mov.w	r2, #4294967295
 80094a2:	f7f7 fb3d 	bl	8000b20 <__aeabi_dcmple>
 80094a6:	bb48      	cbnz	r0, 80094fc <_printf_float+0xd0>
 80094a8:	2200      	movs	r2, #0
 80094aa:	2300      	movs	r3, #0
 80094ac:	4640      	mov	r0, r8
 80094ae:	4649      	mov	r1, r9
 80094b0:	f7f7 fb2c 	bl	8000b0c <__aeabi_dcmplt>
 80094b4:	b110      	cbz	r0, 80094bc <_printf_float+0x90>
 80094b6:	232d      	movs	r3, #45	; 0x2d
 80094b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094bc:	4b93      	ldr	r3, [pc, #588]	; (800970c <_printf_float+0x2e0>)
 80094be:	4894      	ldr	r0, [pc, #592]	; (8009710 <_printf_float+0x2e4>)
 80094c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80094c4:	bf94      	ite	ls
 80094c6:	4698      	movls	r8, r3
 80094c8:	4680      	movhi	r8, r0
 80094ca:	2303      	movs	r3, #3
 80094cc:	6123      	str	r3, [r4, #16]
 80094ce:	9b05      	ldr	r3, [sp, #20]
 80094d0:	f023 0204 	bic.w	r2, r3, #4
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	f04f 0900 	mov.w	r9, #0
 80094da:	9700      	str	r7, [sp, #0]
 80094dc:	4633      	mov	r3, r6
 80094de:	aa0b      	add	r2, sp, #44	; 0x2c
 80094e0:	4621      	mov	r1, r4
 80094e2:	4628      	mov	r0, r5
 80094e4:	f000 f9d8 	bl	8009898 <_printf_common>
 80094e8:	3001      	adds	r0, #1
 80094ea:	f040 8090 	bne.w	800960e <_printf_float+0x1e2>
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	b00d      	add	sp, #52	; 0x34
 80094f4:	ecbd 8b02 	vpop	{d8}
 80094f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fc:	4642      	mov	r2, r8
 80094fe:	464b      	mov	r3, r9
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	f7f7 fb2a 	bl	8000b5c <__aeabi_dcmpun>
 8009508:	b140      	cbz	r0, 800951c <_printf_float+0xf0>
 800950a:	464b      	mov	r3, r9
 800950c:	2b00      	cmp	r3, #0
 800950e:	bfbc      	itt	lt
 8009510:	232d      	movlt	r3, #45	; 0x2d
 8009512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009516:	487f      	ldr	r0, [pc, #508]	; (8009714 <_printf_float+0x2e8>)
 8009518:	4b7f      	ldr	r3, [pc, #508]	; (8009718 <_printf_float+0x2ec>)
 800951a:	e7d1      	b.n	80094c0 <_printf_float+0x94>
 800951c:	6863      	ldr	r3, [r4, #4]
 800951e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009522:	9206      	str	r2, [sp, #24]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	d13f      	bne.n	80095a8 <_printf_float+0x17c>
 8009528:	2306      	movs	r3, #6
 800952a:	6063      	str	r3, [r4, #4]
 800952c:	9b05      	ldr	r3, [sp, #20]
 800952e:	6861      	ldr	r1, [r4, #4]
 8009530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009534:	2300      	movs	r3, #0
 8009536:	9303      	str	r3, [sp, #12]
 8009538:	ab0a      	add	r3, sp, #40	; 0x28
 800953a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800953e:	ab09      	add	r3, sp, #36	; 0x24
 8009540:	ec49 8b10 	vmov	d0, r8, r9
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800954c:	4628      	mov	r0, r5
 800954e:	f7ff fecd 	bl	80092ec <__cvt>
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009556:	2b47      	cmp	r3, #71	; 0x47
 8009558:	4680      	mov	r8, r0
 800955a:	d108      	bne.n	800956e <_printf_float+0x142>
 800955c:	1cc8      	adds	r0, r1, #3
 800955e:	db02      	blt.n	8009566 <_printf_float+0x13a>
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	4299      	cmp	r1, r3
 8009564:	dd41      	ble.n	80095ea <_printf_float+0x1be>
 8009566:	f1ab 0b02 	sub.w	fp, fp, #2
 800956a:	fa5f fb8b 	uxtb.w	fp, fp
 800956e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009572:	d820      	bhi.n	80095b6 <_printf_float+0x18a>
 8009574:	3901      	subs	r1, #1
 8009576:	465a      	mov	r2, fp
 8009578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800957c:	9109      	str	r1, [sp, #36]	; 0x24
 800957e:	f7ff ff17 	bl	80093b0 <__exponent>
 8009582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009584:	1813      	adds	r3, r2, r0
 8009586:	2a01      	cmp	r2, #1
 8009588:	4681      	mov	r9, r0
 800958a:	6123      	str	r3, [r4, #16]
 800958c:	dc02      	bgt.n	8009594 <_printf_float+0x168>
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	07d2      	lsls	r2, r2, #31
 8009592:	d501      	bpl.n	8009598 <_printf_float+0x16c>
 8009594:	3301      	adds	r3, #1
 8009596:	6123      	str	r3, [r4, #16]
 8009598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800959c:	2b00      	cmp	r3, #0
 800959e:	d09c      	beq.n	80094da <_printf_float+0xae>
 80095a0:	232d      	movs	r3, #45	; 0x2d
 80095a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a6:	e798      	b.n	80094da <_printf_float+0xae>
 80095a8:	9a06      	ldr	r2, [sp, #24]
 80095aa:	2a47      	cmp	r2, #71	; 0x47
 80095ac:	d1be      	bne.n	800952c <_printf_float+0x100>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1bc      	bne.n	800952c <_printf_float+0x100>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e7b9      	b.n	800952a <_printf_float+0xfe>
 80095b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80095ba:	d118      	bne.n	80095ee <_printf_float+0x1c2>
 80095bc:	2900      	cmp	r1, #0
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	dd0b      	ble.n	80095da <_printf_float+0x1ae>
 80095c2:	6121      	str	r1, [r4, #16]
 80095c4:	b913      	cbnz	r3, 80095cc <_printf_float+0x1a0>
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	07d0      	lsls	r0, r2, #31
 80095ca:	d502      	bpl.n	80095d2 <_printf_float+0x1a6>
 80095cc:	3301      	adds	r3, #1
 80095ce:	440b      	add	r3, r1
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80095d4:	f04f 0900 	mov.w	r9, #0
 80095d8:	e7de      	b.n	8009598 <_printf_float+0x16c>
 80095da:	b913      	cbnz	r3, 80095e2 <_printf_float+0x1b6>
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	07d2      	lsls	r2, r2, #31
 80095e0:	d501      	bpl.n	80095e6 <_printf_float+0x1ba>
 80095e2:	3302      	adds	r3, #2
 80095e4:	e7f4      	b.n	80095d0 <_printf_float+0x1a4>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e7f2      	b.n	80095d0 <_printf_float+0x1a4>
 80095ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80095ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f0:	4299      	cmp	r1, r3
 80095f2:	db05      	blt.n	8009600 <_printf_float+0x1d4>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	6121      	str	r1, [r4, #16]
 80095f8:	07d8      	lsls	r0, r3, #31
 80095fa:	d5ea      	bpl.n	80095d2 <_printf_float+0x1a6>
 80095fc:	1c4b      	adds	r3, r1, #1
 80095fe:	e7e7      	b.n	80095d0 <_printf_float+0x1a4>
 8009600:	2900      	cmp	r1, #0
 8009602:	bfd4      	ite	le
 8009604:	f1c1 0202 	rsble	r2, r1, #2
 8009608:	2201      	movgt	r2, #1
 800960a:	4413      	add	r3, r2
 800960c:	e7e0      	b.n	80095d0 <_printf_float+0x1a4>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	055a      	lsls	r2, r3, #21
 8009612:	d407      	bmi.n	8009624 <_printf_float+0x1f8>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	4642      	mov	r2, r8
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	d12c      	bne.n	800967c <_printf_float+0x250>
 8009622:	e764      	b.n	80094ee <_printf_float+0xc2>
 8009624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009628:	f240 80e0 	bls.w	80097ec <_printf_float+0x3c0>
 800962c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009630:	2200      	movs	r2, #0
 8009632:	2300      	movs	r3, #0
 8009634:	f7f7 fa60 	bl	8000af8 <__aeabi_dcmpeq>
 8009638:	2800      	cmp	r0, #0
 800963a:	d034      	beq.n	80096a6 <_printf_float+0x27a>
 800963c:	4a37      	ldr	r2, [pc, #220]	; (800971c <_printf_float+0x2f0>)
 800963e:	2301      	movs	r3, #1
 8009640:	4631      	mov	r1, r6
 8009642:	4628      	mov	r0, r5
 8009644:	47b8      	blx	r7
 8009646:	3001      	adds	r0, #1
 8009648:	f43f af51 	beq.w	80094ee <_printf_float+0xc2>
 800964c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009650:	429a      	cmp	r2, r3
 8009652:	db02      	blt.n	800965a <_printf_float+0x22e>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	07d8      	lsls	r0, r3, #31
 8009658:	d510      	bpl.n	800967c <_printf_float+0x250>
 800965a:	ee18 3a10 	vmov	r3, s16
 800965e:	4652      	mov	r2, sl
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af41 	beq.w	80094ee <_printf_float+0xc2>
 800966c:	f04f 0800 	mov.w	r8, #0
 8009670:	f104 091a 	add.w	r9, r4, #26
 8009674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009676:	3b01      	subs	r3, #1
 8009678:	4543      	cmp	r3, r8
 800967a:	dc09      	bgt.n	8009690 <_printf_float+0x264>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	079b      	lsls	r3, r3, #30
 8009680:	f100 8105 	bmi.w	800988e <_printf_float+0x462>
 8009684:	68e0      	ldr	r0, [r4, #12]
 8009686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009688:	4298      	cmp	r0, r3
 800968a:	bfb8      	it	lt
 800968c:	4618      	movlt	r0, r3
 800968e:	e730      	b.n	80094f2 <_printf_float+0xc6>
 8009690:	2301      	movs	r3, #1
 8009692:	464a      	mov	r2, r9
 8009694:	4631      	mov	r1, r6
 8009696:	4628      	mov	r0, r5
 8009698:	47b8      	blx	r7
 800969a:	3001      	adds	r0, #1
 800969c:	f43f af27 	beq.w	80094ee <_printf_float+0xc2>
 80096a0:	f108 0801 	add.w	r8, r8, #1
 80096a4:	e7e6      	b.n	8009674 <_printf_float+0x248>
 80096a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dc39      	bgt.n	8009720 <_printf_float+0x2f4>
 80096ac:	4a1b      	ldr	r2, [pc, #108]	; (800971c <_printf_float+0x2f0>)
 80096ae:	2301      	movs	r3, #1
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f af19 	beq.w	80094ee <_printf_float+0xc2>
 80096bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c0:	4313      	orrs	r3, r2
 80096c2:	d102      	bne.n	80096ca <_printf_float+0x29e>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	d5d8      	bpl.n	800967c <_printf_float+0x250>
 80096ca:	ee18 3a10 	vmov	r3, s16
 80096ce:	4652      	mov	r2, sl
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	f43f af09 	beq.w	80094ee <_printf_float+0xc2>
 80096dc:	f04f 0900 	mov.w	r9, #0
 80096e0:	f104 0a1a 	add.w	sl, r4, #26
 80096e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e6:	425b      	negs	r3, r3
 80096e8:	454b      	cmp	r3, r9
 80096ea:	dc01      	bgt.n	80096f0 <_printf_float+0x2c4>
 80096ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ee:	e792      	b.n	8009616 <_printf_float+0x1ea>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4652      	mov	r2, sl
 80096f4:	4631      	mov	r1, r6
 80096f6:	4628      	mov	r0, r5
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	f43f aef7 	beq.w	80094ee <_printf_float+0xc2>
 8009700:	f109 0901 	add.w	r9, r9, #1
 8009704:	e7ee      	b.n	80096e4 <_printf_float+0x2b8>
 8009706:	bf00      	nop
 8009708:	7fefffff 	.word	0x7fefffff
 800970c:	0800dac8 	.word	0x0800dac8
 8009710:	0800dacc 	.word	0x0800dacc
 8009714:	0800dad4 	.word	0x0800dad4
 8009718:	0800dad0 	.word	0x0800dad0
 800971c:	0800dad8 	.word	0x0800dad8
 8009720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009724:	429a      	cmp	r2, r3
 8009726:	bfa8      	it	ge
 8009728:	461a      	movge	r2, r3
 800972a:	2a00      	cmp	r2, #0
 800972c:	4691      	mov	r9, r2
 800972e:	dc37      	bgt.n	80097a0 <_printf_float+0x374>
 8009730:	f04f 0b00 	mov.w	fp, #0
 8009734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009738:	f104 021a 	add.w	r2, r4, #26
 800973c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800973e:	9305      	str	r3, [sp, #20]
 8009740:	eba3 0309 	sub.w	r3, r3, r9
 8009744:	455b      	cmp	r3, fp
 8009746:	dc33      	bgt.n	80097b0 <_printf_float+0x384>
 8009748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800974c:	429a      	cmp	r2, r3
 800974e:	db3b      	blt.n	80097c8 <_printf_float+0x39c>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	07da      	lsls	r2, r3, #31
 8009754:	d438      	bmi.n	80097c8 <_printf_float+0x39c>
 8009756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009758:	9a05      	ldr	r2, [sp, #20]
 800975a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975c:	1a9a      	subs	r2, r3, r2
 800975e:	eba3 0901 	sub.w	r9, r3, r1
 8009762:	4591      	cmp	r9, r2
 8009764:	bfa8      	it	ge
 8009766:	4691      	movge	r9, r2
 8009768:	f1b9 0f00 	cmp.w	r9, #0
 800976c:	dc35      	bgt.n	80097da <_printf_float+0x3ae>
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009776:	f104 0a1a 	add.w	sl, r4, #26
 800977a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	eba3 0309 	sub.w	r3, r3, r9
 8009784:	4543      	cmp	r3, r8
 8009786:	f77f af79 	ble.w	800967c <_printf_float+0x250>
 800978a:	2301      	movs	r3, #1
 800978c:	4652      	mov	r2, sl
 800978e:	4631      	mov	r1, r6
 8009790:	4628      	mov	r0, r5
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	f43f aeaa 	beq.w	80094ee <_printf_float+0xc2>
 800979a:	f108 0801 	add.w	r8, r8, #1
 800979e:	e7ec      	b.n	800977a <_printf_float+0x34e>
 80097a0:	4613      	mov	r3, r2
 80097a2:	4631      	mov	r1, r6
 80097a4:	4642      	mov	r2, r8
 80097a6:	4628      	mov	r0, r5
 80097a8:	47b8      	blx	r7
 80097aa:	3001      	adds	r0, #1
 80097ac:	d1c0      	bne.n	8009730 <_printf_float+0x304>
 80097ae:	e69e      	b.n	80094ee <_printf_float+0xc2>
 80097b0:	2301      	movs	r3, #1
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	9205      	str	r2, [sp, #20]
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f43f ae97 	beq.w	80094ee <_printf_float+0xc2>
 80097c0:	9a05      	ldr	r2, [sp, #20]
 80097c2:	f10b 0b01 	add.w	fp, fp, #1
 80097c6:	e7b9      	b.n	800973c <_printf_float+0x310>
 80097c8:	ee18 3a10 	vmov	r3, s16
 80097cc:	4652      	mov	r2, sl
 80097ce:	4631      	mov	r1, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	d1be      	bne.n	8009756 <_printf_float+0x32a>
 80097d8:	e689      	b.n	80094ee <_printf_float+0xc2>
 80097da:	9a05      	ldr	r2, [sp, #20]
 80097dc:	464b      	mov	r3, r9
 80097de:	4442      	add	r2, r8
 80097e0:	4631      	mov	r1, r6
 80097e2:	4628      	mov	r0, r5
 80097e4:	47b8      	blx	r7
 80097e6:	3001      	adds	r0, #1
 80097e8:	d1c1      	bne.n	800976e <_printf_float+0x342>
 80097ea:	e680      	b.n	80094ee <_printf_float+0xc2>
 80097ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ee:	2a01      	cmp	r2, #1
 80097f0:	dc01      	bgt.n	80097f6 <_printf_float+0x3ca>
 80097f2:	07db      	lsls	r3, r3, #31
 80097f4:	d538      	bpl.n	8009868 <_printf_float+0x43c>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4642      	mov	r2, r8
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	f43f ae74 	beq.w	80094ee <_printf_float+0xc2>
 8009806:	ee18 3a10 	vmov	r3, s16
 800980a:	4652      	mov	r2, sl
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f ae6b 	beq.w	80094ee <_printf_float+0xc2>
 8009818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	f7f7 f96a 	bl	8000af8 <__aeabi_dcmpeq>
 8009824:	b9d8      	cbnz	r0, 800985e <_printf_float+0x432>
 8009826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009828:	f108 0201 	add.w	r2, r8, #1
 800982c:	3b01      	subs	r3, #1
 800982e:	4631      	mov	r1, r6
 8009830:	4628      	mov	r0, r5
 8009832:	47b8      	blx	r7
 8009834:	3001      	adds	r0, #1
 8009836:	d10e      	bne.n	8009856 <_printf_float+0x42a>
 8009838:	e659      	b.n	80094ee <_printf_float+0xc2>
 800983a:	2301      	movs	r3, #1
 800983c:	4652      	mov	r2, sl
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	f43f ae52 	beq.w	80094ee <_printf_float+0xc2>
 800984a:	f108 0801 	add.w	r8, r8, #1
 800984e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009850:	3b01      	subs	r3, #1
 8009852:	4543      	cmp	r3, r8
 8009854:	dcf1      	bgt.n	800983a <_printf_float+0x40e>
 8009856:	464b      	mov	r3, r9
 8009858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800985c:	e6dc      	b.n	8009618 <_printf_float+0x1ec>
 800985e:	f04f 0800 	mov.w	r8, #0
 8009862:	f104 0a1a 	add.w	sl, r4, #26
 8009866:	e7f2      	b.n	800984e <_printf_float+0x422>
 8009868:	2301      	movs	r3, #1
 800986a:	4642      	mov	r2, r8
 800986c:	e7df      	b.n	800982e <_printf_float+0x402>
 800986e:	2301      	movs	r3, #1
 8009870:	464a      	mov	r2, r9
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	47b8      	blx	r7
 8009878:	3001      	adds	r0, #1
 800987a:	f43f ae38 	beq.w	80094ee <_printf_float+0xc2>
 800987e:	f108 0801 	add.w	r8, r8, #1
 8009882:	68e3      	ldr	r3, [r4, #12]
 8009884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009886:	1a5b      	subs	r3, r3, r1
 8009888:	4543      	cmp	r3, r8
 800988a:	dcf0      	bgt.n	800986e <_printf_float+0x442>
 800988c:	e6fa      	b.n	8009684 <_printf_float+0x258>
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	f104 0919 	add.w	r9, r4, #25
 8009896:	e7f4      	b.n	8009882 <_printf_float+0x456>

08009898 <_printf_common>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	4616      	mov	r6, r2
 800989e:	4699      	mov	r9, r3
 80098a0:	688a      	ldr	r2, [r1, #8]
 80098a2:	690b      	ldr	r3, [r1, #16]
 80098a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	bfb8      	it	lt
 80098ac:	4613      	movlt	r3, r2
 80098ae:	6033      	str	r3, [r6, #0]
 80098b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b4:	4607      	mov	r7, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	b10a      	cbz	r2, 80098be <_printf_common+0x26>
 80098ba:	3301      	adds	r3, #1
 80098bc:	6033      	str	r3, [r6, #0]
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	0699      	lsls	r1, r3, #26
 80098c2:	bf42      	ittt	mi
 80098c4:	6833      	ldrmi	r3, [r6, #0]
 80098c6:	3302      	addmi	r3, #2
 80098c8:	6033      	strmi	r3, [r6, #0]
 80098ca:	6825      	ldr	r5, [r4, #0]
 80098cc:	f015 0506 	ands.w	r5, r5, #6
 80098d0:	d106      	bne.n	80098e0 <_printf_common+0x48>
 80098d2:	f104 0a19 	add.w	sl, r4, #25
 80098d6:	68e3      	ldr	r3, [r4, #12]
 80098d8:	6832      	ldr	r2, [r6, #0]
 80098da:	1a9b      	subs	r3, r3, r2
 80098dc:	42ab      	cmp	r3, r5
 80098de:	dc26      	bgt.n	800992e <_printf_common+0x96>
 80098e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098e4:	1e13      	subs	r3, r2, #0
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	bf18      	it	ne
 80098ea:	2301      	movne	r3, #1
 80098ec:	0692      	lsls	r2, r2, #26
 80098ee:	d42b      	bmi.n	8009948 <_printf_common+0xb0>
 80098f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f4:	4649      	mov	r1, r9
 80098f6:	4638      	mov	r0, r7
 80098f8:	47c0      	blx	r8
 80098fa:	3001      	adds	r0, #1
 80098fc:	d01e      	beq.n	800993c <_printf_common+0xa4>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	68e5      	ldr	r5, [r4, #12]
 8009902:	6832      	ldr	r2, [r6, #0]
 8009904:	f003 0306 	and.w	r3, r3, #6
 8009908:	2b04      	cmp	r3, #4
 800990a:	bf08      	it	eq
 800990c:	1aad      	subeq	r5, r5, r2
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	6922      	ldr	r2, [r4, #16]
 8009912:	bf0c      	ite	eq
 8009914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009918:	2500      	movne	r5, #0
 800991a:	4293      	cmp	r3, r2
 800991c:	bfc4      	itt	gt
 800991e:	1a9b      	subgt	r3, r3, r2
 8009920:	18ed      	addgt	r5, r5, r3
 8009922:	2600      	movs	r6, #0
 8009924:	341a      	adds	r4, #26
 8009926:	42b5      	cmp	r5, r6
 8009928:	d11a      	bne.n	8009960 <_printf_common+0xc8>
 800992a:	2000      	movs	r0, #0
 800992c:	e008      	b.n	8009940 <_printf_common+0xa8>
 800992e:	2301      	movs	r3, #1
 8009930:	4652      	mov	r2, sl
 8009932:	4649      	mov	r1, r9
 8009934:	4638      	mov	r0, r7
 8009936:	47c0      	blx	r8
 8009938:	3001      	adds	r0, #1
 800993a:	d103      	bne.n	8009944 <_printf_common+0xac>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009944:	3501      	adds	r5, #1
 8009946:	e7c6      	b.n	80098d6 <_printf_common+0x3e>
 8009948:	18e1      	adds	r1, r4, r3
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	2030      	movs	r0, #48	; 0x30
 800994e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009952:	4422      	add	r2, r4
 8009954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800995c:	3302      	adds	r3, #2
 800995e:	e7c7      	b.n	80098f0 <_printf_common+0x58>
 8009960:	2301      	movs	r3, #1
 8009962:	4622      	mov	r2, r4
 8009964:	4649      	mov	r1, r9
 8009966:	4638      	mov	r0, r7
 8009968:	47c0      	blx	r8
 800996a:	3001      	adds	r0, #1
 800996c:	d0e6      	beq.n	800993c <_printf_common+0xa4>
 800996e:	3601      	adds	r6, #1
 8009970:	e7d9      	b.n	8009926 <_printf_common+0x8e>
	...

08009974 <_printf_i>:
 8009974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009978:	7e0f      	ldrb	r7, [r1, #24]
 800997a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800997c:	2f78      	cmp	r7, #120	; 0x78
 800997e:	4691      	mov	r9, r2
 8009980:	4680      	mov	r8, r0
 8009982:	460c      	mov	r4, r1
 8009984:	469a      	mov	sl, r3
 8009986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800998a:	d807      	bhi.n	800999c <_printf_i+0x28>
 800998c:	2f62      	cmp	r7, #98	; 0x62
 800998e:	d80a      	bhi.n	80099a6 <_printf_i+0x32>
 8009990:	2f00      	cmp	r7, #0
 8009992:	f000 80d8 	beq.w	8009b46 <_printf_i+0x1d2>
 8009996:	2f58      	cmp	r7, #88	; 0x58
 8009998:	f000 80a3 	beq.w	8009ae2 <_printf_i+0x16e>
 800999c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a4:	e03a      	b.n	8009a1c <_printf_i+0xa8>
 80099a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099aa:	2b15      	cmp	r3, #21
 80099ac:	d8f6      	bhi.n	800999c <_printf_i+0x28>
 80099ae:	a101      	add	r1, pc, #4	; (adr r1, 80099b4 <_printf_i+0x40>)
 80099b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099b4:	08009a0d 	.word	0x08009a0d
 80099b8:	08009a21 	.word	0x08009a21
 80099bc:	0800999d 	.word	0x0800999d
 80099c0:	0800999d 	.word	0x0800999d
 80099c4:	0800999d 	.word	0x0800999d
 80099c8:	0800999d 	.word	0x0800999d
 80099cc:	08009a21 	.word	0x08009a21
 80099d0:	0800999d 	.word	0x0800999d
 80099d4:	0800999d 	.word	0x0800999d
 80099d8:	0800999d 	.word	0x0800999d
 80099dc:	0800999d 	.word	0x0800999d
 80099e0:	08009b2d 	.word	0x08009b2d
 80099e4:	08009a51 	.word	0x08009a51
 80099e8:	08009b0f 	.word	0x08009b0f
 80099ec:	0800999d 	.word	0x0800999d
 80099f0:	0800999d 	.word	0x0800999d
 80099f4:	08009b4f 	.word	0x08009b4f
 80099f8:	0800999d 	.word	0x0800999d
 80099fc:	08009a51 	.word	0x08009a51
 8009a00:	0800999d 	.word	0x0800999d
 8009a04:	0800999d 	.word	0x0800999d
 8009a08:	08009b17 	.word	0x08009b17
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	1d1a      	adds	r2, r3, #4
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	602a      	str	r2, [r5, #0]
 8009a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e0a3      	b.n	8009b68 <_printf_i+0x1f4>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	6829      	ldr	r1, [r5, #0]
 8009a24:	0606      	lsls	r6, r0, #24
 8009a26:	f101 0304 	add.w	r3, r1, #4
 8009a2a:	d50a      	bpl.n	8009a42 <_printf_i+0xce>
 8009a2c:	680e      	ldr	r6, [r1, #0]
 8009a2e:	602b      	str	r3, [r5, #0]
 8009a30:	2e00      	cmp	r6, #0
 8009a32:	da03      	bge.n	8009a3c <_printf_i+0xc8>
 8009a34:	232d      	movs	r3, #45	; 0x2d
 8009a36:	4276      	negs	r6, r6
 8009a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a3c:	485e      	ldr	r0, [pc, #376]	; (8009bb8 <_printf_i+0x244>)
 8009a3e:	230a      	movs	r3, #10
 8009a40:	e019      	b.n	8009a76 <_printf_i+0x102>
 8009a42:	680e      	ldr	r6, [r1, #0]
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a4a:	bf18      	it	ne
 8009a4c:	b236      	sxthne	r6, r6
 8009a4e:	e7ef      	b.n	8009a30 <_printf_i+0xbc>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	6820      	ldr	r0, [r4, #0]
 8009a54:	1d19      	adds	r1, r3, #4
 8009a56:	6029      	str	r1, [r5, #0]
 8009a58:	0601      	lsls	r1, r0, #24
 8009a5a:	d501      	bpl.n	8009a60 <_printf_i+0xec>
 8009a5c:	681e      	ldr	r6, [r3, #0]
 8009a5e:	e002      	b.n	8009a66 <_printf_i+0xf2>
 8009a60:	0646      	lsls	r6, r0, #25
 8009a62:	d5fb      	bpl.n	8009a5c <_printf_i+0xe8>
 8009a64:	881e      	ldrh	r6, [r3, #0]
 8009a66:	4854      	ldr	r0, [pc, #336]	; (8009bb8 <_printf_i+0x244>)
 8009a68:	2f6f      	cmp	r7, #111	; 0x6f
 8009a6a:	bf0c      	ite	eq
 8009a6c:	2308      	moveq	r3, #8
 8009a6e:	230a      	movne	r3, #10
 8009a70:	2100      	movs	r1, #0
 8009a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a76:	6865      	ldr	r5, [r4, #4]
 8009a78:	60a5      	str	r5, [r4, #8]
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	bfa2      	ittt	ge
 8009a7e:	6821      	ldrge	r1, [r4, #0]
 8009a80:	f021 0104 	bicge.w	r1, r1, #4
 8009a84:	6021      	strge	r1, [r4, #0]
 8009a86:	b90e      	cbnz	r6, 8009a8c <_printf_i+0x118>
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	d04d      	beq.n	8009b28 <_printf_i+0x1b4>
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a92:	fb03 6711 	mls	r7, r3, r1, r6
 8009a96:	5dc7      	ldrb	r7, [r0, r7]
 8009a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a9c:	4637      	mov	r7, r6
 8009a9e:	42bb      	cmp	r3, r7
 8009aa0:	460e      	mov	r6, r1
 8009aa2:	d9f4      	bls.n	8009a8e <_printf_i+0x11a>
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d10b      	bne.n	8009ac0 <_printf_i+0x14c>
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	07de      	lsls	r6, r3, #31
 8009aac:	d508      	bpl.n	8009ac0 <_printf_i+0x14c>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	6861      	ldr	r1, [r4, #4]
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	bfde      	ittt	le
 8009ab6:	2330      	movle	r3, #48	; 0x30
 8009ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ac0:	1b52      	subs	r2, r2, r5
 8009ac2:	6122      	str	r2, [r4, #16]
 8009ac4:	f8cd a000 	str.w	sl, [sp]
 8009ac8:	464b      	mov	r3, r9
 8009aca:	aa03      	add	r2, sp, #12
 8009acc:	4621      	mov	r1, r4
 8009ace:	4640      	mov	r0, r8
 8009ad0:	f7ff fee2 	bl	8009898 <_printf_common>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d14c      	bne.n	8009b72 <_printf_i+0x1fe>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	b004      	add	sp, #16
 8009ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae2:	4835      	ldr	r0, [pc, #212]	; (8009bb8 <_printf_i+0x244>)
 8009ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ae8:	6829      	ldr	r1, [r5, #0]
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009af0:	6029      	str	r1, [r5, #0]
 8009af2:	061d      	lsls	r5, r3, #24
 8009af4:	d514      	bpl.n	8009b20 <_printf_i+0x1ac>
 8009af6:	07df      	lsls	r7, r3, #31
 8009af8:	bf44      	itt	mi
 8009afa:	f043 0320 	orrmi.w	r3, r3, #32
 8009afe:	6023      	strmi	r3, [r4, #0]
 8009b00:	b91e      	cbnz	r6, 8009b0a <_printf_i+0x196>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	f023 0320 	bic.w	r3, r3, #32
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	2310      	movs	r3, #16
 8009b0c:	e7b0      	b.n	8009a70 <_printf_i+0xfc>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f043 0320 	orr.w	r3, r3, #32
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	2378      	movs	r3, #120	; 0x78
 8009b18:	4828      	ldr	r0, [pc, #160]	; (8009bbc <_printf_i+0x248>)
 8009b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b1e:	e7e3      	b.n	8009ae8 <_printf_i+0x174>
 8009b20:	0659      	lsls	r1, r3, #25
 8009b22:	bf48      	it	mi
 8009b24:	b2b6      	uxthmi	r6, r6
 8009b26:	e7e6      	b.n	8009af6 <_printf_i+0x182>
 8009b28:	4615      	mov	r5, r2
 8009b2a:	e7bb      	b.n	8009aa4 <_printf_i+0x130>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	6826      	ldr	r6, [r4, #0]
 8009b30:	6961      	ldr	r1, [r4, #20]
 8009b32:	1d18      	adds	r0, r3, #4
 8009b34:	6028      	str	r0, [r5, #0]
 8009b36:	0635      	lsls	r5, r6, #24
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	d501      	bpl.n	8009b40 <_printf_i+0x1cc>
 8009b3c:	6019      	str	r1, [r3, #0]
 8009b3e:	e002      	b.n	8009b46 <_printf_i+0x1d2>
 8009b40:	0670      	lsls	r0, r6, #25
 8009b42:	d5fb      	bpl.n	8009b3c <_printf_i+0x1c8>
 8009b44:	8019      	strh	r1, [r3, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	4615      	mov	r5, r2
 8009b4c:	e7ba      	b.n	8009ac4 <_printf_i+0x150>
 8009b4e:	682b      	ldr	r3, [r5, #0]
 8009b50:	1d1a      	adds	r2, r3, #4
 8009b52:	602a      	str	r2, [r5, #0]
 8009b54:	681d      	ldr	r5, [r3, #0]
 8009b56:	6862      	ldr	r2, [r4, #4]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f7f6 fb58 	bl	8000210 <memchr>
 8009b60:	b108      	cbz	r0, 8009b66 <_printf_i+0x1f2>
 8009b62:	1b40      	subs	r0, r0, r5
 8009b64:	6060      	str	r0, [r4, #4]
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b70:	e7a8      	b.n	8009ac4 <_printf_i+0x150>
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	462a      	mov	r2, r5
 8009b76:	4649      	mov	r1, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	47d0      	blx	sl
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d0ab      	beq.n	8009ad8 <_printf_i+0x164>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	079b      	lsls	r3, r3, #30
 8009b84:	d413      	bmi.n	8009bae <_printf_i+0x23a>
 8009b86:	68e0      	ldr	r0, [r4, #12]
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	bfb8      	it	lt
 8009b8e:	4618      	movlt	r0, r3
 8009b90:	e7a4      	b.n	8009adc <_printf_i+0x168>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4632      	mov	r2, r6
 8009b96:	4649      	mov	r1, r9
 8009b98:	4640      	mov	r0, r8
 8009b9a:	47d0      	blx	sl
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d09b      	beq.n	8009ad8 <_printf_i+0x164>
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	9903      	ldr	r1, [sp, #12]
 8009ba6:	1a5b      	subs	r3, r3, r1
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	dcf2      	bgt.n	8009b92 <_printf_i+0x21e>
 8009bac:	e7eb      	b.n	8009b86 <_printf_i+0x212>
 8009bae:	2500      	movs	r5, #0
 8009bb0:	f104 0619 	add.w	r6, r4, #25
 8009bb4:	e7f5      	b.n	8009ba2 <_printf_i+0x22e>
 8009bb6:	bf00      	nop
 8009bb8:	0800dada 	.word	0x0800dada
 8009bbc:	0800daeb 	.word	0x0800daeb

08009bc0 <iprintf>:
 8009bc0:	b40f      	push	{r0, r1, r2, r3}
 8009bc2:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <iprintf+0x2c>)
 8009bc4:	b513      	push	{r0, r1, r4, lr}
 8009bc6:	681c      	ldr	r4, [r3, #0]
 8009bc8:	b124      	cbz	r4, 8009bd4 <iprintf+0x14>
 8009bca:	69a3      	ldr	r3, [r4, #24]
 8009bcc:	b913      	cbnz	r3, 8009bd4 <iprintf+0x14>
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f7ff f9c0 	bl	8008f54 <__sinit>
 8009bd4:	ab05      	add	r3, sp, #20
 8009bd6:	9a04      	ldr	r2, [sp, #16]
 8009bd8:	68a1      	ldr	r1, [r4, #8]
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f003 f997 	bl	800cf10 <_vfiprintf_r>
 8009be2:	b002      	add	sp, #8
 8009be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be8:	b004      	add	sp, #16
 8009bea:	4770      	bx	lr
 8009bec:	2000001c 	.word	0x2000001c

08009bf0 <_puts_r>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	b118      	cbz	r0, 8009c00 <_puts_r+0x10>
 8009bf8:	6983      	ldr	r3, [r0, #24]
 8009bfa:	b90b      	cbnz	r3, 8009c00 <_puts_r+0x10>
 8009bfc:	f7ff f9aa 	bl	8008f54 <__sinit>
 8009c00:	69ab      	ldr	r3, [r5, #24]
 8009c02:	68ac      	ldr	r4, [r5, #8]
 8009c04:	b913      	cbnz	r3, 8009c0c <_puts_r+0x1c>
 8009c06:	4628      	mov	r0, r5
 8009c08:	f7ff f9a4 	bl	8008f54 <__sinit>
 8009c0c:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <_puts_r+0xd0>)
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	d120      	bne.n	8009c54 <_puts_r+0x64>
 8009c12:	686c      	ldr	r4, [r5, #4]
 8009c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c16:	07db      	lsls	r3, r3, #31
 8009c18:	d405      	bmi.n	8009c26 <_puts_r+0x36>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	0598      	lsls	r0, r3, #22
 8009c1e:	d402      	bmi.n	8009c26 <_puts_r+0x36>
 8009c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c22:	f7ff fa5a 	bl	80090da <__retarget_lock_acquire_recursive>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	0719      	lsls	r1, r3, #28
 8009c2a:	d51d      	bpl.n	8009c68 <_puts_r+0x78>
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	b1db      	cbz	r3, 8009c68 <_puts_r+0x78>
 8009c30:	3e01      	subs	r6, #1
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	60a3      	str	r3, [r4, #8]
 8009c3c:	bb39      	cbnz	r1, 8009c8e <_puts_r+0x9e>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da38      	bge.n	8009cb4 <_puts_r+0xc4>
 8009c42:	4622      	mov	r2, r4
 8009c44:	210a      	movs	r1, #10
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 ff70 	bl	800ab2c <__swbuf_r>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d011      	beq.n	8009c74 <_puts_r+0x84>
 8009c50:	250a      	movs	r5, #10
 8009c52:	e011      	b.n	8009c78 <_puts_r+0x88>
 8009c54:	4b1b      	ldr	r3, [pc, #108]	; (8009cc4 <_puts_r+0xd4>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d101      	bne.n	8009c5e <_puts_r+0x6e>
 8009c5a:	68ac      	ldr	r4, [r5, #8]
 8009c5c:	e7da      	b.n	8009c14 <_puts_r+0x24>
 8009c5e:	4b1a      	ldr	r3, [pc, #104]	; (8009cc8 <_puts_r+0xd8>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	bf08      	it	eq
 8009c64:	68ec      	ldreq	r4, [r5, #12]
 8009c66:	e7d5      	b.n	8009c14 <_puts_r+0x24>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 ffc2 	bl	800abf4 <__swsetup_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d0dd      	beq.n	8009c30 <_puts_r+0x40>
 8009c74:	f04f 35ff 	mov.w	r5, #4294967295
 8009c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c7a:	07da      	lsls	r2, r3, #31
 8009c7c:	d405      	bmi.n	8009c8a <_puts_r+0x9a>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	059b      	lsls	r3, r3, #22
 8009c82:	d402      	bmi.n	8009c8a <_puts_r+0x9a>
 8009c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c86:	f7ff fa29 	bl	80090dc <__retarget_lock_release_recursive>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	da04      	bge.n	8009c9c <_puts_r+0xac>
 8009c92:	69a2      	ldr	r2, [r4, #24]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	dc06      	bgt.n	8009ca6 <_puts_r+0xb6>
 8009c98:	290a      	cmp	r1, #10
 8009c9a:	d004      	beq.n	8009ca6 <_puts_r+0xb6>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	6022      	str	r2, [r4, #0]
 8009ca2:	7019      	strb	r1, [r3, #0]
 8009ca4:	e7c5      	b.n	8009c32 <_puts_r+0x42>
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f000 ff3f 	bl	800ab2c <__swbuf_r>
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d1bf      	bne.n	8009c32 <_puts_r+0x42>
 8009cb2:	e7df      	b.n	8009c74 <_puts_r+0x84>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	250a      	movs	r5, #10
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	6022      	str	r2, [r4, #0]
 8009cbc:	701d      	strb	r5, [r3, #0]
 8009cbe:	e7db      	b.n	8009c78 <_puts_r+0x88>
 8009cc0:	0800da84 	.word	0x0800da84
 8009cc4:	0800daa4 	.word	0x0800daa4
 8009cc8:	0800da64 	.word	0x0800da64

08009ccc <puts>:
 8009ccc:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <puts+0xc>)
 8009cce:	4601      	mov	r1, r0
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	f7ff bf8d 	b.w	8009bf0 <_puts_r>
 8009cd6:	bf00      	nop
 8009cd8:	2000001c 	.word	0x2000001c

08009cdc <realloc>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <realloc+0xc>)
 8009cde:	460a      	mov	r2, r1
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	f002 bf5f 	b.w	800cba6 <_realloc_r>
 8009ce8:	2000001c 	.word	0x2000001c

08009cec <cleanup_glue>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	460c      	mov	r4, r1
 8009cf0:	6809      	ldr	r1, [r1, #0]
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b109      	cbz	r1, 8009cfa <cleanup_glue+0xe>
 8009cf6:	f7ff fff9 	bl	8009cec <cleanup_glue>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d02:	f7ff ba13 	b.w	800912c <_free_r>
	...

08009d08 <_reclaim_reent>:
 8009d08:	4b2c      	ldr	r3, [pc, #176]	; (8009dbc <_reclaim_reent+0xb4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	b570      	push	{r4, r5, r6, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	d051      	beq.n	8009db8 <_reclaim_reent+0xb0>
 8009d14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d16:	b143      	cbz	r3, 8009d2a <_reclaim_reent+0x22>
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d14a      	bne.n	8009db4 <_reclaim_reent+0xac>
 8009d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d20:	6819      	ldr	r1, [r3, #0]
 8009d22:	b111      	cbz	r1, 8009d2a <_reclaim_reent+0x22>
 8009d24:	4620      	mov	r0, r4
 8009d26:	f7ff fa01 	bl	800912c <_free_r>
 8009d2a:	6961      	ldr	r1, [r4, #20]
 8009d2c:	b111      	cbz	r1, 8009d34 <_reclaim_reent+0x2c>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f7ff f9fc 	bl	800912c <_free_r>
 8009d34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d36:	b111      	cbz	r1, 8009d3e <_reclaim_reent+0x36>
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f7ff f9f7 	bl	800912c <_free_r>
 8009d3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d40:	b111      	cbz	r1, 8009d48 <_reclaim_reent+0x40>
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff f9f2 	bl	800912c <_free_r>
 8009d48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d4a:	b111      	cbz	r1, 8009d52 <_reclaim_reent+0x4a>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7ff f9ed 	bl	800912c <_free_r>
 8009d52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d54:	b111      	cbz	r1, 8009d5c <_reclaim_reent+0x54>
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7ff f9e8 	bl	800912c <_free_r>
 8009d5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d5e:	b111      	cbz	r1, 8009d66 <_reclaim_reent+0x5e>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff f9e3 	bl	800912c <_free_r>
 8009d66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d68:	b111      	cbz	r1, 8009d70 <_reclaim_reent+0x68>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff f9de 	bl	800912c <_free_r>
 8009d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d72:	b111      	cbz	r1, 8009d7a <_reclaim_reent+0x72>
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff f9d9 	bl	800912c <_free_r>
 8009d7a:	69a3      	ldr	r3, [r4, #24]
 8009d7c:	b1e3      	cbz	r3, 8009db8 <_reclaim_reent+0xb0>
 8009d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d80:	4620      	mov	r0, r4
 8009d82:	4798      	blx	r3
 8009d84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d86:	b1b9      	cbz	r1, 8009db8 <_reclaim_reent+0xb0>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d8e:	f7ff bfad 	b.w	8009cec <cleanup_glue>
 8009d92:	5949      	ldr	r1, [r1, r5]
 8009d94:	b941      	cbnz	r1, 8009da8 <_reclaim_reent+0xa0>
 8009d96:	3504      	adds	r5, #4
 8009d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d9a:	2d80      	cmp	r5, #128	; 0x80
 8009d9c:	68d9      	ldr	r1, [r3, #12]
 8009d9e:	d1f8      	bne.n	8009d92 <_reclaim_reent+0x8a>
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7ff f9c3 	bl	800912c <_free_r>
 8009da6:	e7ba      	b.n	8009d1e <_reclaim_reent+0x16>
 8009da8:	680e      	ldr	r6, [r1, #0]
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff f9be 	bl	800912c <_free_r>
 8009db0:	4631      	mov	r1, r6
 8009db2:	e7ef      	b.n	8009d94 <_reclaim_reent+0x8c>
 8009db4:	2500      	movs	r5, #0
 8009db6:	e7ef      	b.n	8009d98 <_reclaim_reent+0x90>
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	bf00      	nop
 8009dbc:	2000001c 	.word	0x2000001c

08009dc0 <_sbrk_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d06      	ldr	r5, [pc, #24]	; (8009ddc <_sbrk_r+0x1c>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7f8 ff3e 	bl	8002c4c <_sbrk>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_sbrk_r+0x1a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_sbrk_r+0x1a>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	20015ad0 	.word	0x20015ad0

08009de0 <__sread>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	460c      	mov	r4, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	f003 f9c2 	bl	800d170 <_read_r>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	bfab      	itete	ge
 8009df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009df2:	89a3      	ldrhlt	r3, [r4, #12]
 8009df4:	181b      	addge	r3, r3, r0
 8009df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dfa:	bfac      	ite	ge
 8009dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dfe:	81a3      	strhlt	r3, [r4, #12]
 8009e00:	bd10      	pop	{r4, pc}

08009e02 <__swrite>:
 8009e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	461f      	mov	r7, r3
 8009e08:	898b      	ldrh	r3, [r1, #12]
 8009e0a:	05db      	lsls	r3, r3, #23
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	4616      	mov	r6, r2
 8009e12:	d505      	bpl.n	8009e20 <__swrite+0x1e>
 8009e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e18:	2302      	movs	r3, #2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f002 f956 	bl	800c0cc <_lseek_r>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	4628      	mov	r0, r5
 8009e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e36:	f000 becb 	b.w	800abd0 <_write_r>

08009e3a <__sseek>:
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e42:	f002 f943 	bl	800c0cc <_lseek_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	bf15      	itete	ne
 8009e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e56:	81a3      	strheq	r3, [r4, #12]
 8009e58:	bf18      	it	ne
 8009e5a:	81a3      	strhne	r3, [r4, #12]
 8009e5c:	bd10      	pop	{r4, pc}

08009e5e <__sclose>:
 8009e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e62:	f000 bf35 	b.w	800acd0 <_close_r>

08009e66 <strncmp>:
 8009e66:	b510      	push	{r4, lr}
 8009e68:	b17a      	cbz	r2, 8009e8a <strncmp+0x24>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	3901      	subs	r1, #1
 8009e6e:	1884      	adds	r4, r0, r2
 8009e70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e78:	4290      	cmp	r0, r2
 8009e7a:	d101      	bne.n	8009e80 <strncmp+0x1a>
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	d101      	bne.n	8009e84 <strncmp+0x1e>
 8009e80:	1a80      	subs	r0, r0, r2
 8009e82:	bd10      	pop	{r4, pc}
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d1f3      	bne.n	8009e70 <strncmp+0xa>
 8009e88:	e7fa      	b.n	8009e80 <strncmp+0x1a>
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	e7f9      	b.n	8009e82 <strncmp+0x1c>

08009e8e <sulp>:
 8009e8e:	b570      	push	{r4, r5, r6, lr}
 8009e90:	4604      	mov	r4, r0
 8009e92:	460d      	mov	r5, r1
 8009e94:	ec45 4b10 	vmov	d0, r4, r5
 8009e98:	4616      	mov	r6, r2
 8009e9a:	f002 fd1f 	bl	800c8dc <__ulp>
 8009e9e:	ec51 0b10 	vmov	r0, r1, d0
 8009ea2:	b17e      	cbz	r6, 8009ec4 <sulp+0x36>
 8009ea4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009ea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dd09      	ble.n	8009ec4 <sulp+0x36>
 8009eb0:	051b      	lsls	r3, r3, #20
 8009eb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009eb6:	2400      	movs	r4, #0
 8009eb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	f7f6 fbb2 	bl	8000628 <__aeabi_dmul>
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ec8 <_strtod_l>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	ed2d 8b02 	vpush	{d8}
 8009ed0:	b09d      	sub	sp, #116	; 0x74
 8009ed2:	461f      	mov	r7, r3
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9318      	str	r3, [sp, #96]	; 0x60
 8009ed8:	4ba2      	ldr	r3, [pc, #648]	; (800a164 <_strtod_l+0x29c>)
 8009eda:	9213      	str	r2, [sp, #76]	; 0x4c
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	4688      	mov	r8, r1
 8009ee6:	f7f6 f985 	bl	80001f4 <strlen>
 8009eea:	f04f 0a00 	mov.w	sl, #0
 8009eee:	4605      	mov	r5, r0
 8009ef0:	f04f 0b00 	mov.w	fp, #0
 8009ef4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009efa:	781a      	ldrb	r2, [r3, #0]
 8009efc:	2a2b      	cmp	r2, #43	; 0x2b
 8009efe:	d04e      	beq.n	8009f9e <_strtod_l+0xd6>
 8009f00:	d83b      	bhi.n	8009f7a <_strtod_l+0xb2>
 8009f02:	2a0d      	cmp	r2, #13
 8009f04:	d834      	bhi.n	8009f70 <_strtod_l+0xa8>
 8009f06:	2a08      	cmp	r2, #8
 8009f08:	d834      	bhi.n	8009f74 <_strtod_l+0xac>
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	d03e      	beq.n	8009f8c <_strtod_l+0xc4>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	930a      	str	r3, [sp, #40]	; 0x28
 8009f12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009f14:	7833      	ldrb	r3, [r6, #0]
 8009f16:	2b30      	cmp	r3, #48	; 0x30
 8009f18:	f040 80b0 	bne.w	800a07c <_strtod_l+0x1b4>
 8009f1c:	7873      	ldrb	r3, [r6, #1]
 8009f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f22:	2b58      	cmp	r3, #88	; 0x58
 8009f24:	d168      	bne.n	8009ff8 <_strtod_l+0x130>
 8009f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	ab18      	add	r3, sp, #96	; 0x60
 8009f2c:	9702      	str	r7, [sp, #8]
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4a8d      	ldr	r2, [pc, #564]	; (800a168 <_strtod_l+0x2a0>)
 8009f32:	ab19      	add	r3, sp, #100	; 0x64
 8009f34:	a917      	add	r1, sp, #92	; 0x5c
 8009f36:	4620      	mov	r0, r4
 8009f38:	f001 fdbc 	bl	800bab4 <__gethex>
 8009f3c:	f010 0707 	ands.w	r7, r0, #7
 8009f40:	4605      	mov	r5, r0
 8009f42:	d005      	beq.n	8009f50 <_strtod_l+0x88>
 8009f44:	2f06      	cmp	r7, #6
 8009f46:	d12c      	bne.n	8009fa2 <_strtod_l+0xda>
 8009f48:	3601      	adds	r6, #1
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 8590 	bne.w	800aa78 <_strtod_l+0xbb0>
 8009f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5a:	b1eb      	cbz	r3, 8009f98 <_strtod_l+0xd0>
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f62:	ec43 2b10 	vmov	d0, r2, r3
 8009f66:	b01d      	add	sp, #116	; 0x74
 8009f68:	ecbd 8b02 	vpop	{d8}
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	2a20      	cmp	r2, #32
 8009f72:	d1cc      	bne.n	8009f0e <_strtod_l+0x46>
 8009f74:	3301      	adds	r3, #1
 8009f76:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f78:	e7be      	b.n	8009ef8 <_strtod_l+0x30>
 8009f7a:	2a2d      	cmp	r2, #45	; 0x2d
 8009f7c:	d1c7      	bne.n	8009f0e <_strtod_l+0x46>
 8009f7e:	2201      	movs	r2, #1
 8009f80:	920a      	str	r2, [sp, #40]	; 0x28
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1c2      	bne.n	8009f12 <_strtod_l+0x4a>
 8009f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f040 856e 	bne.w	800aa74 <_strtod_l+0xbac>
 8009f98:	4652      	mov	r2, sl
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	e7e1      	b.n	8009f62 <_strtod_l+0x9a>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	e7ee      	b.n	8009f80 <_strtod_l+0xb8>
 8009fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009fa4:	b13a      	cbz	r2, 8009fb6 <_strtod_l+0xee>
 8009fa6:	2135      	movs	r1, #53	; 0x35
 8009fa8:	a81a      	add	r0, sp, #104	; 0x68
 8009faa:	f002 fda2 	bl	800caf2 <__copybits>
 8009fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f002 f961 	bl	800c278 <_Bfree>
 8009fb6:	3f01      	subs	r7, #1
 8009fb8:	2f04      	cmp	r7, #4
 8009fba:	d806      	bhi.n	8009fca <_strtod_l+0x102>
 8009fbc:	e8df f007 	tbb	[pc, r7]
 8009fc0:	1714030a 	.word	0x1714030a
 8009fc4:	0a          	.byte	0x0a
 8009fc5:	00          	.byte	0x00
 8009fc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009fca:	0728      	lsls	r0, r5, #28
 8009fcc:	d5c0      	bpl.n	8009f50 <_strtod_l+0x88>
 8009fce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009fd2:	e7bd      	b.n	8009f50 <_strtod_l+0x88>
 8009fd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009fd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009fe2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009fe6:	e7f0      	b.n	8009fca <_strtod_l+0x102>
 8009fe8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a16c <_strtod_l+0x2a4>
 8009fec:	e7ed      	b.n	8009fca <_strtod_l+0x102>
 8009fee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ff6:	e7e8      	b.n	8009fca <_strtod_l+0x102>
 8009ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ffe:	785b      	ldrb	r3, [r3, #1]
 800a000:	2b30      	cmp	r3, #48	; 0x30
 800a002:	d0f9      	beq.n	8009ff8 <_strtod_l+0x130>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0a3      	beq.n	8009f50 <_strtod_l+0x88>
 800a008:	2301      	movs	r3, #1
 800a00a:	f04f 0900 	mov.w	r9, #0
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a012:	9308      	str	r3, [sp, #32]
 800a014:	f8cd 901c 	str.w	r9, [sp, #28]
 800a018:	464f      	mov	r7, r9
 800a01a:	220a      	movs	r2, #10
 800a01c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a01e:	7806      	ldrb	r6, [r0, #0]
 800a020:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a024:	b2d9      	uxtb	r1, r3
 800a026:	2909      	cmp	r1, #9
 800a028:	d92a      	bls.n	800a080 <_strtod_l+0x1b8>
 800a02a:	9905      	ldr	r1, [sp, #20]
 800a02c:	462a      	mov	r2, r5
 800a02e:	f7ff ff1a 	bl	8009e66 <strncmp>
 800a032:	b398      	cbz	r0, 800a09c <_strtod_l+0x1d4>
 800a034:	2000      	movs	r0, #0
 800a036:	4632      	mov	r2, r6
 800a038:	463d      	mov	r5, r7
 800a03a:	9005      	str	r0, [sp, #20]
 800a03c:	4603      	mov	r3, r0
 800a03e:	2a65      	cmp	r2, #101	; 0x65
 800a040:	d001      	beq.n	800a046 <_strtod_l+0x17e>
 800a042:	2a45      	cmp	r2, #69	; 0x45
 800a044:	d118      	bne.n	800a078 <_strtod_l+0x1b0>
 800a046:	b91d      	cbnz	r5, 800a050 <_strtod_l+0x188>
 800a048:	9a04      	ldr	r2, [sp, #16]
 800a04a:	4302      	orrs	r2, r0
 800a04c:	d09e      	beq.n	8009f8c <_strtod_l+0xc4>
 800a04e:	2500      	movs	r5, #0
 800a050:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a054:	f108 0201 	add.w	r2, r8, #1
 800a058:	9217      	str	r2, [sp, #92]	; 0x5c
 800a05a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a05e:	2a2b      	cmp	r2, #43	; 0x2b
 800a060:	d075      	beq.n	800a14e <_strtod_l+0x286>
 800a062:	2a2d      	cmp	r2, #45	; 0x2d
 800a064:	d07b      	beq.n	800a15e <_strtod_l+0x296>
 800a066:	f04f 0c00 	mov.w	ip, #0
 800a06a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a06e:	2909      	cmp	r1, #9
 800a070:	f240 8082 	bls.w	800a178 <_strtod_l+0x2b0>
 800a074:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a078:	2600      	movs	r6, #0
 800a07a:	e09d      	b.n	800a1b8 <_strtod_l+0x2f0>
 800a07c:	2300      	movs	r3, #0
 800a07e:	e7c4      	b.n	800a00a <_strtod_l+0x142>
 800a080:	2f08      	cmp	r7, #8
 800a082:	bfd8      	it	le
 800a084:	9907      	ldrle	r1, [sp, #28]
 800a086:	f100 0001 	add.w	r0, r0, #1
 800a08a:	bfda      	itte	le
 800a08c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a090:	9307      	strle	r3, [sp, #28]
 800a092:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a096:	3701      	adds	r7, #1
 800a098:	9017      	str	r0, [sp, #92]	; 0x5c
 800a09a:	e7bf      	b.n	800a01c <_strtod_l+0x154>
 800a09c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a09e:	195a      	adds	r2, r3, r5
 800a0a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0a2:	5d5a      	ldrb	r2, [r3, r5]
 800a0a4:	2f00      	cmp	r7, #0
 800a0a6:	d037      	beq.n	800a118 <_strtod_l+0x250>
 800a0a8:	9005      	str	r0, [sp, #20]
 800a0aa:	463d      	mov	r5, r7
 800a0ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a0b0:	2b09      	cmp	r3, #9
 800a0b2:	d912      	bls.n	800a0da <_strtod_l+0x212>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e7c2      	b.n	800a03e <_strtod_l+0x176>
 800a0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0be:	785a      	ldrb	r2, [r3, #1]
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	2a30      	cmp	r2, #48	; 0x30
 800a0c4:	d0f8      	beq.n	800a0b8 <_strtod_l+0x1f0>
 800a0c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	f200 84d9 	bhi.w	800aa82 <_strtod_l+0xbba>
 800a0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0d2:	9005      	str	r0, [sp, #20]
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	9308      	str	r3, [sp, #32]
 800a0d8:	4605      	mov	r5, r0
 800a0da:	3a30      	subs	r2, #48	; 0x30
 800a0dc:	f100 0301 	add.w	r3, r0, #1
 800a0e0:	d014      	beq.n	800a10c <_strtod_l+0x244>
 800a0e2:	9905      	ldr	r1, [sp, #20]
 800a0e4:	4419      	add	r1, r3
 800a0e6:	9105      	str	r1, [sp, #20]
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	eb00 0e05 	add.w	lr, r0, r5
 800a0ee:	210a      	movs	r1, #10
 800a0f0:	4573      	cmp	r3, lr
 800a0f2:	d113      	bne.n	800a11c <_strtod_l+0x254>
 800a0f4:	182b      	adds	r3, r5, r0
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	f105 0501 	add.w	r5, r5, #1
 800a0fc:	4405      	add	r5, r0
 800a0fe:	dc1c      	bgt.n	800a13a <_strtod_l+0x272>
 800a100:	9907      	ldr	r1, [sp, #28]
 800a102:	230a      	movs	r3, #10
 800a104:	fb03 2301 	mla	r3, r3, r1, r2
 800a108:	9307      	str	r3, [sp, #28]
 800a10a:	2300      	movs	r3, #0
 800a10c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a10e:	1c51      	adds	r1, r2, #1
 800a110:	9117      	str	r1, [sp, #92]	; 0x5c
 800a112:	7852      	ldrb	r2, [r2, #1]
 800a114:	4618      	mov	r0, r3
 800a116:	e7c9      	b.n	800a0ac <_strtod_l+0x1e4>
 800a118:	4638      	mov	r0, r7
 800a11a:	e7d2      	b.n	800a0c2 <_strtod_l+0x1fa>
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	dc04      	bgt.n	800a12a <_strtod_l+0x262>
 800a120:	9e07      	ldr	r6, [sp, #28]
 800a122:	434e      	muls	r6, r1
 800a124:	9607      	str	r6, [sp, #28]
 800a126:	3301      	adds	r3, #1
 800a128:	e7e2      	b.n	800a0f0 <_strtod_l+0x228>
 800a12a:	f103 0c01 	add.w	ip, r3, #1
 800a12e:	f1bc 0f10 	cmp.w	ip, #16
 800a132:	bfd8      	it	le
 800a134:	fb01 f909 	mulle.w	r9, r1, r9
 800a138:	e7f5      	b.n	800a126 <_strtod_l+0x25e>
 800a13a:	2d10      	cmp	r5, #16
 800a13c:	bfdc      	itt	le
 800a13e:	230a      	movle	r3, #10
 800a140:	fb03 2909 	mlale	r9, r3, r9, r2
 800a144:	e7e1      	b.n	800a10a <_strtod_l+0x242>
 800a146:	2300      	movs	r3, #0
 800a148:	9305      	str	r3, [sp, #20]
 800a14a:	2301      	movs	r3, #1
 800a14c:	e77c      	b.n	800a048 <_strtod_l+0x180>
 800a14e:	f04f 0c00 	mov.w	ip, #0
 800a152:	f108 0202 	add.w	r2, r8, #2
 800a156:	9217      	str	r2, [sp, #92]	; 0x5c
 800a158:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a15c:	e785      	b.n	800a06a <_strtod_l+0x1a2>
 800a15e:	f04f 0c01 	mov.w	ip, #1
 800a162:	e7f6      	b.n	800a152 <_strtod_l+0x28a>
 800a164:	0800dc48 	.word	0x0800dc48
 800a168:	0800dafc 	.word	0x0800dafc
 800a16c:	7ff00000 	.word	0x7ff00000
 800a170:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a172:	1c51      	adds	r1, r2, #1
 800a174:	9117      	str	r1, [sp, #92]	; 0x5c
 800a176:	7852      	ldrb	r2, [r2, #1]
 800a178:	2a30      	cmp	r2, #48	; 0x30
 800a17a:	d0f9      	beq.n	800a170 <_strtod_l+0x2a8>
 800a17c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a180:	2908      	cmp	r1, #8
 800a182:	f63f af79 	bhi.w	800a078 <_strtod_l+0x1b0>
 800a186:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a18a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a18c:	9206      	str	r2, [sp, #24]
 800a18e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a190:	1c51      	adds	r1, r2, #1
 800a192:	9117      	str	r1, [sp, #92]	; 0x5c
 800a194:	7852      	ldrb	r2, [r2, #1]
 800a196:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a19a:	2e09      	cmp	r6, #9
 800a19c:	d937      	bls.n	800a20e <_strtod_l+0x346>
 800a19e:	9e06      	ldr	r6, [sp, #24]
 800a1a0:	1b89      	subs	r1, r1, r6
 800a1a2:	2908      	cmp	r1, #8
 800a1a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a1a8:	dc02      	bgt.n	800a1b0 <_strtod_l+0x2e8>
 800a1aa:	4576      	cmp	r6, lr
 800a1ac:	bfa8      	it	ge
 800a1ae:	4676      	movge	r6, lr
 800a1b0:	f1bc 0f00 	cmp.w	ip, #0
 800a1b4:	d000      	beq.n	800a1b8 <_strtod_l+0x2f0>
 800a1b6:	4276      	negs	r6, r6
 800a1b8:	2d00      	cmp	r5, #0
 800a1ba:	d14d      	bne.n	800a258 <_strtod_l+0x390>
 800a1bc:	9904      	ldr	r1, [sp, #16]
 800a1be:	4301      	orrs	r1, r0
 800a1c0:	f47f aec6 	bne.w	8009f50 <_strtod_l+0x88>
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f47f aee1 	bne.w	8009f8c <_strtod_l+0xc4>
 800a1ca:	2a69      	cmp	r2, #105	; 0x69
 800a1cc:	d027      	beq.n	800a21e <_strtod_l+0x356>
 800a1ce:	dc24      	bgt.n	800a21a <_strtod_l+0x352>
 800a1d0:	2a49      	cmp	r2, #73	; 0x49
 800a1d2:	d024      	beq.n	800a21e <_strtod_l+0x356>
 800a1d4:	2a4e      	cmp	r2, #78	; 0x4e
 800a1d6:	f47f aed9 	bne.w	8009f8c <_strtod_l+0xc4>
 800a1da:	499f      	ldr	r1, [pc, #636]	; (800a458 <_strtod_l+0x590>)
 800a1dc:	a817      	add	r0, sp, #92	; 0x5c
 800a1de:	f001 fec1 	bl	800bf64 <__match>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f43f aed2 	beq.w	8009f8c <_strtod_l+0xc4>
 800a1e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b28      	cmp	r3, #40	; 0x28
 800a1ee:	d12d      	bne.n	800a24c <_strtod_l+0x384>
 800a1f0:	499a      	ldr	r1, [pc, #616]	; (800a45c <_strtod_l+0x594>)
 800a1f2:	aa1a      	add	r2, sp, #104	; 0x68
 800a1f4:	a817      	add	r0, sp, #92	; 0x5c
 800a1f6:	f001 fec9 	bl	800bf8c <__hexnan>
 800a1fa:	2805      	cmp	r0, #5
 800a1fc:	d126      	bne.n	800a24c <_strtod_l+0x384>
 800a1fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a200:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a204:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a208:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a20c:	e6a0      	b.n	8009f50 <_strtod_l+0x88>
 800a20e:	210a      	movs	r1, #10
 800a210:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a214:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a218:	e7b9      	b.n	800a18e <_strtod_l+0x2c6>
 800a21a:	2a6e      	cmp	r2, #110	; 0x6e
 800a21c:	e7db      	b.n	800a1d6 <_strtod_l+0x30e>
 800a21e:	4990      	ldr	r1, [pc, #576]	; (800a460 <_strtod_l+0x598>)
 800a220:	a817      	add	r0, sp, #92	; 0x5c
 800a222:	f001 fe9f 	bl	800bf64 <__match>
 800a226:	2800      	cmp	r0, #0
 800a228:	f43f aeb0 	beq.w	8009f8c <_strtod_l+0xc4>
 800a22c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a22e:	498d      	ldr	r1, [pc, #564]	; (800a464 <_strtod_l+0x59c>)
 800a230:	3b01      	subs	r3, #1
 800a232:	a817      	add	r0, sp, #92	; 0x5c
 800a234:	9317      	str	r3, [sp, #92]	; 0x5c
 800a236:	f001 fe95 	bl	800bf64 <__match>
 800a23a:	b910      	cbnz	r0, 800a242 <_strtod_l+0x37a>
 800a23c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a23e:	3301      	adds	r3, #1
 800a240:	9317      	str	r3, [sp, #92]	; 0x5c
 800a242:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a474 <_strtod_l+0x5ac>
 800a246:	f04f 0a00 	mov.w	sl, #0
 800a24a:	e681      	b.n	8009f50 <_strtod_l+0x88>
 800a24c:	4886      	ldr	r0, [pc, #536]	; (800a468 <_strtod_l+0x5a0>)
 800a24e:	f002 ffa3 	bl	800d198 <nan>
 800a252:	ec5b ab10 	vmov	sl, fp, d0
 800a256:	e67b      	b.n	8009f50 <_strtod_l+0x88>
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	9807      	ldr	r0, [sp, #28]
 800a25c:	1af3      	subs	r3, r6, r3
 800a25e:	2f00      	cmp	r7, #0
 800a260:	bf08      	it	eq
 800a262:	462f      	moveq	r7, r5
 800a264:	2d10      	cmp	r5, #16
 800a266:	9306      	str	r3, [sp, #24]
 800a268:	46a8      	mov	r8, r5
 800a26a:	bfa8      	it	ge
 800a26c:	f04f 0810 	movge.w	r8, #16
 800a270:	f7f6 f960 	bl	8000534 <__aeabi_ui2d>
 800a274:	2d09      	cmp	r5, #9
 800a276:	4682      	mov	sl, r0
 800a278:	468b      	mov	fp, r1
 800a27a:	dd13      	ble.n	800a2a4 <_strtod_l+0x3dc>
 800a27c:	4b7b      	ldr	r3, [pc, #492]	; (800a46c <_strtod_l+0x5a4>)
 800a27e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a282:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a286:	f7f6 f9cf 	bl	8000628 <__aeabi_dmul>
 800a28a:	4682      	mov	sl, r0
 800a28c:	4648      	mov	r0, r9
 800a28e:	468b      	mov	fp, r1
 800a290:	f7f6 f950 	bl	8000534 <__aeabi_ui2d>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4650      	mov	r0, sl
 800a29a:	4659      	mov	r1, fp
 800a29c:	f7f6 f80e 	bl	80002bc <__adddf3>
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	468b      	mov	fp, r1
 800a2a4:	2d0f      	cmp	r5, #15
 800a2a6:	dc38      	bgt.n	800a31a <_strtod_l+0x452>
 800a2a8:	9b06      	ldr	r3, [sp, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f43f ae50 	beq.w	8009f50 <_strtod_l+0x88>
 800a2b0:	dd24      	ble.n	800a2fc <_strtod_l+0x434>
 800a2b2:	2b16      	cmp	r3, #22
 800a2b4:	dc0b      	bgt.n	800a2ce <_strtod_l+0x406>
 800a2b6:	496d      	ldr	r1, [pc, #436]	; (800a46c <_strtod_l+0x5a4>)
 800a2b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	465b      	mov	r3, fp
 800a2c4:	f7f6 f9b0 	bl	8000628 <__aeabi_dmul>
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	468b      	mov	fp, r1
 800a2cc:	e640      	b.n	8009f50 <_strtod_l+0x88>
 800a2ce:	9a06      	ldr	r2, [sp, #24]
 800a2d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	db20      	blt.n	800a31a <_strtod_l+0x452>
 800a2d8:	4c64      	ldr	r4, [pc, #400]	; (800a46c <_strtod_l+0x5a4>)
 800a2da:	f1c5 050f 	rsb	r5, r5, #15
 800a2de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a2e2:	4652      	mov	r2, sl
 800a2e4:	465b      	mov	r3, fp
 800a2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ea:	f7f6 f99d 	bl	8000628 <__aeabi_dmul>
 800a2ee:	9b06      	ldr	r3, [sp, #24]
 800a2f0:	1b5d      	subs	r5, r3, r5
 800a2f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a2f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2fa:	e7e3      	b.n	800a2c4 <_strtod_l+0x3fc>
 800a2fc:	9b06      	ldr	r3, [sp, #24]
 800a2fe:	3316      	adds	r3, #22
 800a300:	db0b      	blt.n	800a31a <_strtod_l+0x452>
 800a302:	9b05      	ldr	r3, [sp, #20]
 800a304:	1b9e      	subs	r6, r3, r6
 800a306:	4b59      	ldr	r3, [pc, #356]	; (800a46c <_strtod_l+0x5a4>)
 800a308:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a30c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a310:	4650      	mov	r0, sl
 800a312:	4659      	mov	r1, fp
 800a314:	f7f6 fab2 	bl	800087c <__aeabi_ddiv>
 800a318:	e7d6      	b.n	800a2c8 <_strtod_l+0x400>
 800a31a:	9b06      	ldr	r3, [sp, #24]
 800a31c:	eba5 0808 	sub.w	r8, r5, r8
 800a320:	4498      	add	r8, r3
 800a322:	f1b8 0f00 	cmp.w	r8, #0
 800a326:	dd74      	ble.n	800a412 <_strtod_l+0x54a>
 800a328:	f018 030f 	ands.w	r3, r8, #15
 800a32c:	d00a      	beq.n	800a344 <_strtod_l+0x47c>
 800a32e:	494f      	ldr	r1, [pc, #316]	; (800a46c <_strtod_l+0x5a4>)
 800a330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a334:	4652      	mov	r2, sl
 800a336:	465b      	mov	r3, fp
 800a338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a33c:	f7f6 f974 	bl	8000628 <__aeabi_dmul>
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	f038 080f 	bics.w	r8, r8, #15
 800a348:	d04f      	beq.n	800a3ea <_strtod_l+0x522>
 800a34a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a34e:	dd22      	ble.n	800a396 <_strtod_l+0x4ce>
 800a350:	2500      	movs	r5, #0
 800a352:	462e      	mov	r6, r5
 800a354:	9507      	str	r5, [sp, #28]
 800a356:	9505      	str	r5, [sp, #20]
 800a358:	2322      	movs	r3, #34	; 0x22
 800a35a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a474 <_strtod_l+0x5ac>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	f04f 0a00 	mov.w	sl, #0
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f43f adf2 	beq.w	8009f50 <_strtod_l+0x88>
 800a36c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a36e:	4620      	mov	r0, r4
 800a370:	f001 ff82 	bl	800c278 <_Bfree>
 800a374:	9905      	ldr	r1, [sp, #20]
 800a376:	4620      	mov	r0, r4
 800a378:	f001 ff7e 	bl	800c278 <_Bfree>
 800a37c:	4631      	mov	r1, r6
 800a37e:	4620      	mov	r0, r4
 800a380:	f001 ff7a 	bl	800c278 <_Bfree>
 800a384:	9907      	ldr	r1, [sp, #28]
 800a386:	4620      	mov	r0, r4
 800a388:	f001 ff76 	bl	800c278 <_Bfree>
 800a38c:	4629      	mov	r1, r5
 800a38e:	4620      	mov	r0, r4
 800a390:	f001 ff72 	bl	800c278 <_Bfree>
 800a394:	e5dc      	b.n	8009f50 <_strtod_l+0x88>
 800a396:	4b36      	ldr	r3, [pc, #216]	; (800a470 <_strtod_l+0x5a8>)
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	2300      	movs	r3, #0
 800a39c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	4659      	mov	r1, fp
 800a3a4:	4699      	mov	r9, r3
 800a3a6:	f1b8 0f01 	cmp.w	r8, #1
 800a3aa:	dc21      	bgt.n	800a3f0 <_strtod_l+0x528>
 800a3ac:	b10b      	cbz	r3, 800a3b2 <_strtod_l+0x4ea>
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	468b      	mov	fp, r1
 800a3b2:	4b2f      	ldr	r3, [pc, #188]	; (800a470 <_strtod_l+0x5a8>)
 800a3b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a3b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a3bc:	4652      	mov	r2, sl
 800a3be:	465b      	mov	r3, fp
 800a3c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a3c4:	f7f6 f930 	bl	8000628 <__aeabi_dmul>
 800a3c8:	4b2a      	ldr	r3, [pc, #168]	; (800a474 <_strtod_l+0x5ac>)
 800a3ca:	460a      	mov	r2, r1
 800a3cc:	400b      	ands	r3, r1
 800a3ce:	492a      	ldr	r1, [pc, #168]	; (800a478 <_strtod_l+0x5b0>)
 800a3d0:	428b      	cmp	r3, r1
 800a3d2:	4682      	mov	sl, r0
 800a3d4:	d8bc      	bhi.n	800a350 <_strtod_l+0x488>
 800a3d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a3da:	428b      	cmp	r3, r1
 800a3dc:	bf86      	itte	hi
 800a3de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a47c <_strtod_l+0x5b4>
 800a3e2:	f04f 3aff 	movhi.w	sl, #4294967295
 800a3e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	e084      	b.n	800a4fa <_strtod_l+0x632>
 800a3f0:	f018 0f01 	tst.w	r8, #1
 800a3f4:	d005      	beq.n	800a402 <_strtod_l+0x53a>
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f6 f914 	bl	8000628 <__aeabi_dmul>
 800a400:	2301      	movs	r3, #1
 800a402:	9a04      	ldr	r2, [sp, #16]
 800a404:	3208      	adds	r2, #8
 800a406:	f109 0901 	add.w	r9, r9, #1
 800a40a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a40e:	9204      	str	r2, [sp, #16]
 800a410:	e7c9      	b.n	800a3a6 <_strtod_l+0x4de>
 800a412:	d0ea      	beq.n	800a3ea <_strtod_l+0x522>
 800a414:	f1c8 0800 	rsb	r8, r8, #0
 800a418:	f018 020f 	ands.w	r2, r8, #15
 800a41c:	d00a      	beq.n	800a434 <_strtod_l+0x56c>
 800a41e:	4b13      	ldr	r3, [pc, #76]	; (800a46c <_strtod_l+0x5a4>)
 800a420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a424:	4650      	mov	r0, sl
 800a426:	4659      	mov	r1, fp
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f7f6 fa26 	bl	800087c <__aeabi_ddiv>
 800a430:	4682      	mov	sl, r0
 800a432:	468b      	mov	fp, r1
 800a434:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a438:	d0d7      	beq.n	800a3ea <_strtod_l+0x522>
 800a43a:	f1b8 0f1f 	cmp.w	r8, #31
 800a43e:	dd1f      	ble.n	800a480 <_strtod_l+0x5b8>
 800a440:	2500      	movs	r5, #0
 800a442:	462e      	mov	r6, r5
 800a444:	9507      	str	r5, [sp, #28]
 800a446:	9505      	str	r5, [sp, #20]
 800a448:	2322      	movs	r3, #34	; 0x22
 800a44a:	f04f 0a00 	mov.w	sl, #0
 800a44e:	f04f 0b00 	mov.w	fp, #0
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	e786      	b.n	800a364 <_strtod_l+0x49c>
 800a456:	bf00      	nop
 800a458:	0800dad5 	.word	0x0800dad5
 800a45c:	0800db10 	.word	0x0800db10
 800a460:	0800dacd 	.word	0x0800dacd
 800a464:	0800db53 	.word	0x0800db53
 800a468:	0800de00 	.word	0x0800de00
 800a46c:	0800dce0 	.word	0x0800dce0
 800a470:	0800dcb8 	.word	0x0800dcb8
 800a474:	7ff00000 	.word	0x7ff00000
 800a478:	7ca00000 	.word	0x7ca00000
 800a47c:	7fefffff 	.word	0x7fefffff
 800a480:	f018 0310 	ands.w	r3, r8, #16
 800a484:	bf18      	it	ne
 800a486:	236a      	movne	r3, #106	; 0x6a
 800a488:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a838 <_strtod_l+0x970>
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	4650      	mov	r0, sl
 800a490:	4659      	mov	r1, fp
 800a492:	2300      	movs	r3, #0
 800a494:	f018 0f01 	tst.w	r8, #1
 800a498:	d004      	beq.n	800a4a4 <_strtod_l+0x5dc>
 800a49a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a49e:	f7f6 f8c3 	bl	8000628 <__aeabi_dmul>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a4a8:	f109 0908 	add.w	r9, r9, #8
 800a4ac:	d1f2      	bne.n	800a494 <_strtod_l+0x5cc>
 800a4ae:	b10b      	cbz	r3, 800a4b4 <_strtod_l+0x5ec>
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	b1c3      	cbz	r3, 800a4ea <_strtod_l+0x622>
 800a4b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a4bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	4659      	mov	r1, fp
 800a4c4:	dd11      	ble.n	800a4ea <_strtod_l+0x622>
 800a4c6:	2b1f      	cmp	r3, #31
 800a4c8:	f340 8124 	ble.w	800a714 <_strtod_l+0x84c>
 800a4cc:	2b34      	cmp	r3, #52	; 0x34
 800a4ce:	bfde      	ittt	le
 800a4d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a4d4:	f04f 33ff 	movle.w	r3, #4294967295
 800a4d8:	fa03 f202 	lslle.w	r2, r3, r2
 800a4dc:	f04f 0a00 	mov.w	sl, #0
 800a4e0:	bfcc      	ite	gt
 800a4e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a4e6:	ea02 0b01 	andle.w	fp, r2, r1
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	4659      	mov	r1, fp
 800a4f2:	f7f6 fb01 	bl	8000af8 <__aeabi_dcmpeq>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d1a2      	bne.n	800a440 <_strtod_l+0x578>
 800a4fa:	9b07      	ldr	r3, [sp, #28]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	9908      	ldr	r1, [sp, #32]
 800a500:	462b      	mov	r3, r5
 800a502:	463a      	mov	r2, r7
 800a504:	4620      	mov	r0, r4
 800a506:	f001 ff1f 	bl	800c348 <__s2b>
 800a50a:	9007      	str	r0, [sp, #28]
 800a50c:	2800      	cmp	r0, #0
 800a50e:	f43f af1f 	beq.w	800a350 <_strtod_l+0x488>
 800a512:	9b05      	ldr	r3, [sp, #20]
 800a514:	1b9e      	subs	r6, r3, r6
 800a516:	9b06      	ldr	r3, [sp, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfb4      	ite	lt
 800a51c:	4633      	movlt	r3, r6
 800a51e:	2300      	movge	r3, #0
 800a520:	930c      	str	r3, [sp, #48]	; 0x30
 800a522:	9b06      	ldr	r3, [sp, #24]
 800a524:	2500      	movs	r5, #0
 800a526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a52a:	9312      	str	r3, [sp, #72]	; 0x48
 800a52c:	462e      	mov	r6, r5
 800a52e:	9b07      	ldr	r3, [sp, #28]
 800a530:	4620      	mov	r0, r4
 800a532:	6859      	ldr	r1, [r3, #4]
 800a534:	f001 fe60 	bl	800c1f8 <_Balloc>
 800a538:	9005      	str	r0, [sp, #20]
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f43f af0c 	beq.w	800a358 <_strtod_l+0x490>
 800a540:	9b07      	ldr	r3, [sp, #28]
 800a542:	691a      	ldr	r2, [r3, #16]
 800a544:	3202      	adds	r2, #2
 800a546:	f103 010c 	add.w	r1, r3, #12
 800a54a:	0092      	lsls	r2, r2, #2
 800a54c:	300c      	adds	r0, #12
 800a54e:	f7fe fdd7 	bl	8009100 <memcpy>
 800a552:	ec4b ab10 	vmov	d0, sl, fp
 800a556:	aa1a      	add	r2, sp, #104	; 0x68
 800a558:	a919      	add	r1, sp, #100	; 0x64
 800a55a:	4620      	mov	r0, r4
 800a55c:	f002 fa3a 	bl	800c9d4 <__d2b>
 800a560:	ec4b ab18 	vmov	d8, sl, fp
 800a564:	9018      	str	r0, [sp, #96]	; 0x60
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f aef6 	beq.w	800a358 <_strtod_l+0x490>
 800a56c:	2101      	movs	r1, #1
 800a56e:	4620      	mov	r0, r4
 800a570:	f001 ff84 	bl	800c47c <__i2b>
 800a574:	4606      	mov	r6, r0
 800a576:	2800      	cmp	r0, #0
 800a578:	f43f aeee 	beq.w	800a358 <_strtod_l+0x490>
 800a57c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a57e:	9904      	ldr	r1, [sp, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	bfab      	itete	ge
 800a584:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a586:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a588:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a58a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a58e:	bfac      	ite	ge
 800a590:	eb03 0902 	addge.w	r9, r3, r2
 800a594:	1ad7      	sublt	r7, r2, r3
 800a596:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a598:	eba3 0801 	sub.w	r8, r3, r1
 800a59c:	4490      	add	r8, r2
 800a59e:	4ba1      	ldr	r3, [pc, #644]	; (800a824 <_strtod_l+0x95c>)
 800a5a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5a4:	4598      	cmp	r8, r3
 800a5a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a5aa:	f280 80c7 	bge.w	800a73c <_strtod_l+0x874>
 800a5ae:	eba3 0308 	sub.w	r3, r3, r8
 800a5b2:	2b1f      	cmp	r3, #31
 800a5b4:	eba2 0203 	sub.w	r2, r2, r3
 800a5b8:	f04f 0101 	mov.w	r1, #1
 800a5bc:	f300 80b1 	bgt.w	800a722 <_strtod_l+0x85a>
 800a5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9308      	str	r3, [sp, #32]
 800a5ca:	eb09 0802 	add.w	r8, r9, r2
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	45c1      	cmp	r9, r8
 800a5d2:	4417      	add	r7, r2
 800a5d4:	441f      	add	r7, r3
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	bfa8      	it	ge
 800a5da:	4643      	movge	r3, r8
 800a5dc:	42bb      	cmp	r3, r7
 800a5de:	bfa8      	it	ge
 800a5e0:	463b      	movge	r3, r7
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bfc2      	ittt	gt
 800a5e6:	eba8 0803 	subgt.w	r8, r8, r3
 800a5ea:	1aff      	subgt	r7, r7, r3
 800a5ec:	eba9 0903 	subgt.w	r9, r9, r3
 800a5f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	dd17      	ble.n	800a626 <_strtod_l+0x75e>
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f001 fffe 	bl	800c5fc <__pow5mult>
 800a600:	4606      	mov	r6, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	f43f aea8 	beq.w	800a358 <_strtod_l+0x490>
 800a608:	4601      	mov	r1, r0
 800a60a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a60c:	4620      	mov	r0, r4
 800a60e:	f001 ff4b 	bl	800c4a8 <__multiply>
 800a612:	900b      	str	r0, [sp, #44]	; 0x2c
 800a614:	2800      	cmp	r0, #0
 800a616:	f43f ae9f 	beq.w	800a358 <_strtod_l+0x490>
 800a61a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a61c:	4620      	mov	r0, r4
 800a61e:	f001 fe2b 	bl	800c278 <_Bfree>
 800a622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a624:	9318      	str	r3, [sp, #96]	; 0x60
 800a626:	f1b8 0f00 	cmp.w	r8, #0
 800a62a:	f300 808c 	bgt.w	800a746 <_strtod_l+0x87e>
 800a62e:	9b06      	ldr	r3, [sp, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dd08      	ble.n	800a646 <_strtod_l+0x77e>
 800a634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a636:	9905      	ldr	r1, [sp, #20]
 800a638:	4620      	mov	r0, r4
 800a63a:	f001 ffdf 	bl	800c5fc <__pow5mult>
 800a63e:	9005      	str	r0, [sp, #20]
 800a640:	2800      	cmp	r0, #0
 800a642:	f43f ae89 	beq.w	800a358 <_strtod_l+0x490>
 800a646:	2f00      	cmp	r7, #0
 800a648:	dd08      	ble.n	800a65c <_strtod_l+0x794>
 800a64a:	9905      	ldr	r1, [sp, #20]
 800a64c:	463a      	mov	r2, r7
 800a64e:	4620      	mov	r0, r4
 800a650:	f002 f82e 	bl	800c6b0 <__lshift>
 800a654:	9005      	str	r0, [sp, #20]
 800a656:	2800      	cmp	r0, #0
 800a658:	f43f ae7e 	beq.w	800a358 <_strtod_l+0x490>
 800a65c:	f1b9 0f00 	cmp.w	r9, #0
 800a660:	dd08      	ble.n	800a674 <_strtod_l+0x7ac>
 800a662:	4631      	mov	r1, r6
 800a664:	464a      	mov	r2, r9
 800a666:	4620      	mov	r0, r4
 800a668:	f002 f822 	bl	800c6b0 <__lshift>
 800a66c:	4606      	mov	r6, r0
 800a66e:	2800      	cmp	r0, #0
 800a670:	f43f ae72 	beq.w	800a358 <_strtod_l+0x490>
 800a674:	9a05      	ldr	r2, [sp, #20]
 800a676:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a678:	4620      	mov	r0, r4
 800a67a:	f002 f8a5 	bl	800c7c8 <__mdiff>
 800a67e:	4605      	mov	r5, r0
 800a680:	2800      	cmp	r0, #0
 800a682:	f43f ae69 	beq.w	800a358 <_strtod_l+0x490>
 800a686:	68c3      	ldr	r3, [r0, #12]
 800a688:	930b      	str	r3, [sp, #44]	; 0x2c
 800a68a:	2300      	movs	r3, #0
 800a68c:	60c3      	str	r3, [r0, #12]
 800a68e:	4631      	mov	r1, r6
 800a690:	f002 f87e 	bl	800c790 <__mcmp>
 800a694:	2800      	cmp	r0, #0
 800a696:	da60      	bge.n	800a75a <_strtod_l+0x892>
 800a698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a69a:	ea53 030a 	orrs.w	r3, r3, sl
 800a69e:	f040 8082 	bne.w	800a7a6 <_strtod_l+0x8de>
 800a6a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d17d      	bne.n	800a7a6 <_strtod_l+0x8de>
 800a6aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6ae:	0d1b      	lsrs	r3, r3, #20
 800a6b0:	051b      	lsls	r3, r3, #20
 800a6b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a6b6:	d976      	bls.n	800a7a6 <_strtod_l+0x8de>
 800a6b8:	696b      	ldr	r3, [r5, #20]
 800a6ba:	b913      	cbnz	r3, 800a6c2 <_strtod_l+0x7fa>
 800a6bc:	692b      	ldr	r3, [r5, #16]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	dd71      	ble.n	800a7a6 <_strtod_l+0x8de>
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f001 fff2 	bl	800c6b0 <__lshift>
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	f002 f85e 	bl	800c790 <__mcmp>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	dd66      	ble.n	800a7a6 <_strtod_l+0x8de>
 800a6d8:	9904      	ldr	r1, [sp, #16]
 800a6da:	4a53      	ldr	r2, [pc, #332]	; (800a828 <_strtod_l+0x960>)
 800a6dc:	465b      	mov	r3, fp
 800a6de:	2900      	cmp	r1, #0
 800a6e0:	f000 8081 	beq.w	800a7e6 <_strtod_l+0x91e>
 800a6e4:	ea02 010b 	and.w	r1, r2, fp
 800a6e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a6ec:	dc7b      	bgt.n	800a7e6 <_strtod_l+0x91e>
 800a6ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a6f2:	f77f aea9 	ble.w	800a448 <_strtod_l+0x580>
 800a6f6:	4b4d      	ldr	r3, [pc, #308]	; (800a82c <_strtod_l+0x964>)
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	4659      	mov	r1, fp
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f7f5 ff93 	bl	8000628 <__aeabi_dmul>
 800a702:	460b      	mov	r3, r1
 800a704:	4303      	orrs	r3, r0
 800a706:	bf08      	it	eq
 800a708:	2322      	moveq	r3, #34	; 0x22
 800a70a:	4682      	mov	sl, r0
 800a70c:	468b      	mov	fp, r1
 800a70e:	bf08      	it	eq
 800a710:	6023      	streq	r3, [r4, #0]
 800a712:	e62b      	b.n	800a36c <_strtod_l+0x4a4>
 800a714:	f04f 32ff 	mov.w	r2, #4294967295
 800a718:	fa02 f303 	lsl.w	r3, r2, r3
 800a71c:	ea03 0a0a 	and.w	sl, r3, sl
 800a720:	e6e3      	b.n	800a4ea <_strtod_l+0x622>
 800a722:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a726:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a72a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a72e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a732:	fa01 f308 	lsl.w	r3, r1, r8
 800a736:	9308      	str	r3, [sp, #32]
 800a738:	910d      	str	r1, [sp, #52]	; 0x34
 800a73a:	e746      	b.n	800a5ca <_strtod_l+0x702>
 800a73c:	2300      	movs	r3, #0
 800a73e:	9308      	str	r3, [sp, #32]
 800a740:	2301      	movs	r3, #1
 800a742:	930d      	str	r3, [sp, #52]	; 0x34
 800a744:	e741      	b.n	800a5ca <_strtod_l+0x702>
 800a746:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a748:	4642      	mov	r2, r8
 800a74a:	4620      	mov	r0, r4
 800a74c:	f001 ffb0 	bl	800c6b0 <__lshift>
 800a750:	9018      	str	r0, [sp, #96]	; 0x60
 800a752:	2800      	cmp	r0, #0
 800a754:	f47f af6b 	bne.w	800a62e <_strtod_l+0x766>
 800a758:	e5fe      	b.n	800a358 <_strtod_l+0x490>
 800a75a:	465f      	mov	r7, fp
 800a75c:	d16e      	bne.n	800a83c <_strtod_l+0x974>
 800a75e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a764:	b342      	cbz	r2, 800a7b8 <_strtod_l+0x8f0>
 800a766:	4a32      	ldr	r2, [pc, #200]	; (800a830 <_strtod_l+0x968>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d128      	bne.n	800a7be <_strtod_l+0x8f6>
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	4651      	mov	r1, sl
 800a770:	b1eb      	cbz	r3, 800a7ae <_strtod_l+0x8e6>
 800a772:	4b2d      	ldr	r3, [pc, #180]	; (800a828 <_strtod_l+0x960>)
 800a774:	403b      	ands	r3, r7
 800a776:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a77a:	f04f 32ff 	mov.w	r2, #4294967295
 800a77e:	d819      	bhi.n	800a7b4 <_strtod_l+0x8ec>
 800a780:	0d1b      	lsrs	r3, r3, #20
 800a782:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a786:	fa02 f303 	lsl.w	r3, r2, r3
 800a78a:	4299      	cmp	r1, r3
 800a78c:	d117      	bne.n	800a7be <_strtod_l+0x8f6>
 800a78e:	4b29      	ldr	r3, [pc, #164]	; (800a834 <_strtod_l+0x96c>)
 800a790:	429f      	cmp	r7, r3
 800a792:	d102      	bne.n	800a79a <_strtod_l+0x8d2>
 800a794:	3101      	adds	r1, #1
 800a796:	f43f addf 	beq.w	800a358 <_strtod_l+0x490>
 800a79a:	4b23      	ldr	r3, [pc, #140]	; (800a828 <_strtod_l+0x960>)
 800a79c:	403b      	ands	r3, r7
 800a79e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a7a2:	f04f 0a00 	mov.w	sl, #0
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1a4      	bne.n	800a6f6 <_strtod_l+0x82e>
 800a7ac:	e5de      	b.n	800a36c <_strtod_l+0x4a4>
 800a7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b2:	e7ea      	b.n	800a78a <_strtod_l+0x8c2>
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	e7e8      	b.n	800a78a <_strtod_l+0x8c2>
 800a7b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a7bc:	d08c      	beq.n	800a6d8 <_strtod_l+0x810>
 800a7be:	9b08      	ldr	r3, [sp, #32]
 800a7c0:	b1db      	cbz	r3, 800a7fa <_strtod_l+0x932>
 800a7c2:	423b      	tst	r3, r7
 800a7c4:	d0ef      	beq.n	800a7a6 <_strtod_l+0x8de>
 800a7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c8:	9a04      	ldr	r2, [sp, #16]
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	4659      	mov	r1, fp
 800a7ce:	b1c3      	cbz	r3, 800a802 <_strtod_l+0x93a>
 800a7d0:	f7ff fb5d 	bl	8009e8e <sulp>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	ec51 0b18 	vmov	r0, r1, d8
 800a7dc:	f7f5 fd6e 	bl	80002bc <__adddf3>
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	468b      	mov	fp, r1
 800a7e4:	e7df      	b.n	800a7a6 <_strtod_l+0x8de>
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a7ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a7f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a7f4:	f04f 3aff 	mov.w	sl, #4294967295
 800a7f8:	e7d5      	b.n	800a7a6 <_strtod_l+0x8de>
 800a7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7fc:	ea13 0f0a 	tst.w	r3, sl
 800a800:	e7e0      	b.n	800a7c4 <_strtod_l+0x8fc>
 800a802:	f7ff fb44 	bl	8009e8e <sulp>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	ec51 0b18 	vmov	r0, r1, d8
 800a80e:	f7f5 fd53 	bl	80002b8 <__aeabi_dsub>
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	4682      	mov	sl, r0
 800a818:	468b      	mov	fp, r1
 800a81a:	f7f6 f96d 	bl	8000af8 <__aeabi_dcmpeq>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d0c1      	beq.n	800a7a6 <_strtod_l+0x8de>
 800a822:	e611      	b.n	800a448 <_strtod_l+0x580>
 800a824:	fffffc02 	.word	0xfffffc02
 800a828:	7ff00000 	.word	0x7ff00000
 800a82c:	39500000 	.word	0x39500000
 800a830:	000fffff 	.word	0x000fffff
 800a834:	7fefffff 	.word	0x7fefffff
 800a838:	0800db28 	.word	0x0800db28
 800a83c:	4631      	mov	r1, r6
 800a83e:	4628      	mov	r0, r5
 800a840:	f002 f924 	bl	800ca8c <__ratio>
 800a844:	ec59 8b10 	vmov	r8, r9, d0
 800a848:	ee10 0a10 	vmov	r0, s0
 800a84c:	2200      	movs	r2, #0
 800a84e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a852:	4649      	mov	r1, r9
 800a854:	f7f6 f964 	bl	8000b20 <__aeabi_dcmple>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d07a      	beq.n	800a952 <_strtod_l+0xa8a>
 800a85c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d04a      	beq.n	800a8f8 <_strtod_l+0xa30>
 800a862:	4b95      	ldr	r3, [pc, #596]	; (800aab8 <_strtod_l+0xbf0>)
 800a864:	2200      	movs	r2, #0
 800a866:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a86a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aab8 <_strtod_l+0xbf0>
 800a86e:	f04f 0800 	mov.w	r8, #0
 800a872:	4b92      	ldr	r3, [pc, #584]	; (800aabc <_strtod_l+0xbf4>)
 800a874:	403b      	ands	r3, r7
 800a876:	930d      	str	r3, [sp, #52]	; 0x34
 800a878:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a87a:	4b91      	ldr	r3, [pc, #580]	; (800aac0 <_strtod_l+0xbf8>)
 800a87c:	429a      	cmp	r2, r3
 800a87e:	f040 80b0 	bne.w	800a9e2 <_strtod_l+0xb1a>
 800a882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a886:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a88a:	ec4b ab10 	vmov	d0, sl, fp
 800a88e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a892:	f002 f823 	bl	800c8dc <__ulp>
 800a896:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a89a:	ec53 2b10 	vmov	r2, r3, d0
 800a89e:	f7f5 fec3 	bl	8000628 <__aeabi_dmul>
 800a8a2:	4652      	mov	r2, sl
 800a8a4:	465b      	mov	r3, fp
 800a8a6:	f7f5 fd09 	bl	80002bc <__adddf3>
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4983      	ldr	r1, [pc, #524]	; (800aabc <_strtod_l+0xbf4>)
 800a8ae:	4a85      	ldr	r2, [pc, #532]	; (800aac4 <_strtod_l+0xbfc>)
 800a8b0:	4019      	ands	r1, r3
 800a8b2:	4291      	cmp	r1, r2
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	d960      	bls.n	800a97a <_strtod_l+0xab2>
 800a8b8:	ee18 3a90 	vmov	r3, s17
 800a8bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d104      	bne.n	800a8ce <_strtod_l+0xa06>
 800a8c4:	ee18 3a10 	vmov	r3, s16
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	f43f ad45 	beq.w	800a358 <_strtod_l+0x490>
 800a8ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aad0 <_strtod_l+0xc08>
 800a8d2:	f04f 3aff 	mov.w	sl, #4294967295
 800a8d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f001 fccd 	bl	800c278 <_Bfree>
 800a8de:	9905      	ldr	r1, [sp, #20]
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f001 fcc9 	bl	800c278 <_Bfree>
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f001 fcc5 	bl	800c278 <_Bfree>
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f001 fcc1 	bl	800c278 <_Bfree>
 800a8f6:	e61a      	b.n	800a52e <_strtod_l+0x666>
 800a8f8:	f1ba 0f00 	cmp.w	sl, #0
 800a8fc:	d11b      	bne.n	800a936 <_strtod_l+0xa6e>
 800a8fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a902:	b9f3      	cbnz	r3, 800a942 <_strtod_l+0xa7a>
 800a904:	4b6c      	ldr	r3, [pc, #432]	; (800aab8 <_strtod_l+0xbf0>)
 800a906:	2200      	movs	r2, #0
 800a908:	4640      	mov	r0, r8
 800a90a:	4649      	mov	r1, r9
 800a90c:	f7f6 f8fe 	bl	8000b0c <__aeabi_dcmplt>
 800a910:	b9d0      	cbnz	r0, 800a948 <_strtod_l+0xa80>
 800a912:	4640      	mov	r0, r8
 800a914:	4649      	mov	r1, r9
 800a916:	4b6c      	ldr	r3, [pc, #432]	; (800aac8 <_strtod_l+0xc00>)
 800a918:	2200      	movs	r2, #0
 800a91a:	f7f5 fe85 	bl	8000628 <__aeabi_dmul>
 800a91e:	4680      	mov	r8, r0
 800a920:	4689      	mov	r9, r1
 800a922:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a926:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a92a:	9315      	str	r3, [sp, #84]	; 0x54
 800a92c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a930:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a934:	e79d      	b.n	800a872 <_strtod_l+0x9aa>
 800a936:	f1ba 0f01 	cmp.w	sl, #1
 800a93a:	d102      	bne.n	800a942 <_strtod_l+0xa7a>
 800a93c:	2f00      	cmp	r7, #0
 800a93e:	f43f ad83 	beq.w	800a448 <_strtod_l+0x580>
 800a942:	4b62      	ldr	r3, [pc, #392]	; (800aacc <_strtod_l+0xc04>)
 800a944:	2200      	movs	r2, #0
 800a946:	e78e      	b.n	800a866 <_strtod_l+0x99e>
 800a948:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aac8 <_strtod_l+0xc00>
 800a94c:	f04f 0800 	mov.w	r8, #0
 800a950:	e7e7      	b.n	800a922 <_strtod_l+0xa5a>
 800a952:	4b5d      	ldr	r3, [pc, #372]	; (800aac8 <_strtod_l+0xc00>)
 800a954:	4640      	mov	r0, r8
 800a956:	4649      	mov	r1, r9
 800a958:	2200      	movs	r2, #0
 800a95a:	f7f5 fe65 	bl	8000628 <__aeabi_dmul>
 800a95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a960:	4680      	mov	r8, r0
 800a962:	4689      	mov	r9, r1
 800a964:	b933      	cbnz	r3, 800a974 <_strtod_l+0xaac>
 800a966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a96a:	900e      	str	r0, [sp, #56]	; 0x38
 800a96c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a96e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a972:	e7dd      	b.n	800a930 <_strtod_l+0xa68>
 800a974:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a978:	e7f9      	b.n	800a96e <_strtod_l+0xaa6>
 800a97a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1a8      	bne.n	800a8d6 <_strtod_l+0xa0e>
 800a984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a98a:	0d1b      	lsrs	r3, r3, #20
 800a98c:	051b      	lsls	r3, r3, #20
 800a98e:	429a      	cmp	r2, r3
 800a990:	d1a1      	bne.n	800a8d6 <_strtod_l+0xa0e>
 800a992:	4640      	mov	r0, r8
 800a994:	4649      	mov	r1, r9
 800a996:	f7f6 f957 	bl	8000c48 <__aeabi_d2lz>
 800a99a:	f7f5 fe17 	bl	80005cc <__aeabi_l2d>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	f7f5 fc87 	bl	80002b8 <__aeabi_dsub>
 800a9aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9b0:	ea43 030a 	orr.w	r3, r3, sl
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	d055      	beq.n	800aa68 <_strtod_l+0xba0>
 800a9bc:	a336      	add	r3, pc, #216	; (adr r3, 800aa98 <_strtod_l+0xbd0>)
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	f7f6 f8a3 	bl	8000b0c <__aeabi_dcmplt>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	f47f acd0 	bne.w	800a36c <_strtod_l+0x4a4>
 800a9cc:	a334      	add	r3, pc, #208	; (adr r3, 800aaa0 <_strtod_l+0xbd8>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f6 f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f af7b 	beq.w	800a8d6 <_strtod_l+0xa0e>
 800a9e0:	e4c4      	b.n	800a36c <_strtod_l+0x4a4>
 800a9e2:	9b04      	ldr	r3, [sp, #16]
 800a9e4:	b333      	cbz	r3, 800aa34 <_strtod_l+0xb6c>
 800a9e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9ec:	d822      	bhi.n	800aa34 <_strtod_l+0xb6c>
 800a9ee:	a32e      	add	r3, pc, #184	; (adr r3, 800aaa8 <_strtod_l+0xbe0>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	f7f6 f892 	bl	8000b20 <__aeabi_dcmple>
 800a9fc:	b1a0      	cbz	r0, 800aa28 <_strtod_l+0xb60>
 800a9fe:	4649      	mov	r1, r9
 800aa00:	4640      	mov	r0, r8
 800aa02:	f7f6 f8e9 	bl	8000bd8 <__aeabi_d2uiz>
 800aa06:	2801      	cmp	r0, #1
 800aa08:	bf38      	it	cc
 800aa0a:	2001      	movcc	r0, #1
 800aa0c:	f7f5 fd92 	bl	8000534 <__aeabi_ui2d>
 800aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa12:	4680      	mov	r8, r0
 800aa14:	4689      	mov	r9, r1
 800aa16:	bb23      	cbnz	r3, 800aa62 <_strtod_l+0xb9a>
 800aa18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa1c:	9010      	str	r0, [sp, #64]	; 0x40
 800aa1e:	9311      	str	r3, [sp, #68]	; 0x44
 800aa20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	9309      	str	r3, [sp, #36]	; 0x24
 800aa34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa38:	eeb0 0a48 	vmov.f32	s0, s16
 800aa3c:	eef0 0a68 	vmov.f32	s1, s17
 800aa40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa44:	f001 ff4a 	bl	800c8dc <__ulp>
 800aa48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa4c:	ec53 2b10 	vmov	r2, r3, d0
 800aa50:	f7f5 fdea 	bl	8000628 <__aeabi_dmul>
 800aa54:	ec53 2b18 	vmov	r2, r3, d8
 800aa58:	f7f5 fc30 	bl	80002bc <__adddf3>
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	468b      	mov	fp, r1
 800aa60:	e78d      	b.n	800a97e <_strtod_l+0xab6>
 800aa62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800aa66:	e7db      	b.n	800aa20 <_strtod_l+0xb58>
 800aa68:	a311      	add	r3, pc, #68	; (adr r3, 800aab0 <_strtod_l+0xbe8>)
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f7f6 f84d 	bl	8000b0c <__aeabi_dcmplt>
 800aa72:	e7b2      	b.n	800a9da <_strtod_l+0xb12>
 800aa74:	2300      	movs	r3, #0
 800aa76:	930a      	str	r3, [sp, #40]	; 0x28
 800aa78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	f7ff ba6b 	b.w	8009f58 <_strtod_l+0x90>
 800aa82:	2a65      	cmp	r2, #101	; 0x65
 800aa84:	f43f ab5f 	beq.w	800a146 <_strtod_l+0x27e>
 800aa88:	2a45      	cmp	r2, #69	; 0x45
 800aa8a:	f43f ab5c 	beq.w	800a146 <_strtod_l+0x27e>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f7ff bb94 	b.w	800a1bc <_strtod_l+0x2f4>
 800aa94:	f3af 8000 	nop.w
 800aa98:	94a03595 	.word	0x94a03595
 800aa9c:	3fdfffff 	.word	0x3fdfffff
 800aaa0:	35afe535 	.word	0x35afe535
 800aaa4:	3fe00000 	.word	0x3fe00000
 800aaa8:	ffc00000 	.word	0xffc00000
 800aaac:	41dfffff 	.word	0x41dfffff
 800aab0:	94a03595 	.word	0x94a03595
 800aab4:	3fcfffff 	.word	0x3fcfffff
 800aab8:	3ff00000 	.word	0x3ff00000
 800aabc:	7ff00000 	.word	0x7ff00000
 800aac0:	7fe00000 	.word	0x7fe00000
 800aac4:	7c9fffff 	.word	0x7c9fffff
 800aac8:	3fe00000 	.word	0x3fe00000
 800aacc:	bff00000 	.word	0xbff00000
 800aad0:	7fefffff 	.word	0x7fefffff

0800aad4 <strtod>:
 800aad4:	460a      	mov	r2, r1
 800aad6:	4601      	mov	r1, r0
 800aad8:	4802      	ldr	r0, [pc, #8]	; (800aae4 <strtod+0x10>)
 800aada:	4b03      	ldr	r3, [pc, #12]	; (800aae8 <strtod+0x14>)
 800aadc:	6800      	ldr	r0, [r0, #0]
 800aade:	f7ff b9f3 	b.w	8009ec8 <_strtod_l>
 800aae2:	bf00      	nop
 800aae4:	2000001c 	.word	0x2000001c
 800aae8:	20000084 	.word	0x20000084

0800aaec <_vsiprintf_r>:
 800aaec:	b500      	push	{lr}
 800aaee:	b09b      	sub	sp, #108	; 0x6c
 800aaf0:	9100      	str	r1, [sp, #0]
 800aaf2:	9104      	str	r1, [sp, #16]
 800aaf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aaf8:	9105      	str	r1, [sp, #20]
 800aafa:	9102      	str	r1, [sp, #8]
 800aafc:	4905      	ldr	r1, [pc, #20]	; (800ab14 <_vsiprintf_r+0x28>)
 800aafe:	9103      	str	r1, [sp, #12]
 800ab00:	4669      	mov	r1, sp
 800ab02:	f002 f8db 	bl	800ccbc <_svfiprintf_r>
 800ab06:	9b00      	ldr	r3, [sp, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	b01b      	add	sp, #108	; 0x6c
 800ab0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab12:	bf00      	nop
 800ab14:	ffff0208 	.word	0xffff0208

0800ab18 <vsiprintf>:
 800ab18:	4613      	mov	r3, r2
 800ab1a:	460a      	mov	r2, r1
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	4802      	ldr	r0, [pc, #8]	; (800ab28 <vsiprintf+0x10>)
 800ab20:	6800      	ldr	r0, [r0, #0]
 800ab22:	f7ff bfe3 	b.w	800aaec <_vsiprintf_r>
 800ab26:	bf00      	nop
 800ab28:	2000001c 	.word	0x2000001c

0800ab2c <__swbuf_r>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	460e      	mov	r6, r1
 800ab30:	4614      	mov	r4, r2
 800ab32:	4605      	mov	r5, r0
 800ab34:	b118      	cbz	r0, 800ab3e <__swbuf_r+0x12>
 800ab36:	6983      	ldr	r3, [r0, #24]
 800ab38:	b90b      	cbnz	r3, 800ab3e <__swbuf_r+0x12>
 800ab3a:	f7fe fa0b 	bl	8008f54 <__sinit>
 800ab3e:	4b21      	ldr	r3, [pc, #132]	; (800abc4 <__swbuf_r+0x98>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	d12b      	bne.n	800ab9c <__swbuf_r+0x70>
 800ab44:	686c      	ldr	r4, [r5, #4]
 800ab46:	69a3      	ldr	r3, [r4, #24]
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	071a      	lsls	r2, r3, #28
 800ab4e:	d52f      	bpl.n	800abb0 <__swbuf_r+0x84>
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	b36b      	cbz	r3, 800abb0 <__swbuf_r+0x84>
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	6820      	ldr	r0, [r4, #0]
 800ab58:	1ac0      	subs	r0, r0, r3
 800ab5a:	6963      	ldr	r3, [r4, #20]
 800ab5c:	b2f6      	uxtb	r6, r6
 800ab5e:	4283      	cmp	r3, r0
 800ab60:	4637      	mov	r7, r6
 800ab62:	dc04      	bgt.n	800ab6e <__swbuf_r+0x42>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f7fe f94e 	bl	8008e08 <_fflush_r>
 800ab6c:	bb30      	cbnz	r0, 800abbc <__swbuf_r+0x90>
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	60a3      	str	r3, [r4, #8]
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	6022      	str	r2, [r4, #0]
 800ab7a:	701e      	strb	r6, [r3, #0]
 800ab7c:	6963      	ldr	r3, [r4, #20]
 800ab7e:	3001      	adds	r0, #1
 800ab80:	4283      	cmp	r3, r0
 800ab82:	d004      	beq.n	800ab8e <__swbuf_r+0x62>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	07db      	lsls	r3, r3, #31
 800ab88:	d506      	bpl.n	800ab98 <__swbuf_r+0x6c>
 800ab8a:	2e0a      	cmp	r6, #10
 800ab8c:	d104      	bne.n	800ab98 <__swbuf_r+0x6c>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	f7fe f939 	bl	8008e08 <_fflush_r>
 800ab96:	b988      	cbnz	r0, 800abbc <__swbuf_r+0x90>
 800ab98:	4638      	mov	r0, r7
 800ab9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9c:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <__swbuf_r+0x9c>)
 800ab9e:	429c      	cmp	r4, r3
 800aba0:	d101      	bne.n	800aba6 <__swbuf_r+0x7a>
 800aba2:	68ac      	ldr	r4, [r5, #8]
 800aba4:	e7cf      	b.n	800ab46 <__swbuf_r+0x1a>
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <__swbuf_r+0xa0>)
 800aba8:	429c      	cmp	r4, r3
 800abaa:	bf08      	it	eq
 800abac:	68ec      	ldreq	r4, [r5, #12]
 800abae:	e7ca      	b.n	800ab46 <__swbuf_r+0x1a>
 800abb0:	4621      	mov	r1, r4
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 f81e 	bl	800abf4 <__swsetup_r>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d0cb      	beq.n	800ab54 <__swbuf_r+0x28>
 800abbc:	f04f 37ff 	mov.w	r7, #4294967295
 800abc0:	e7ea      	b.n	800ab98 <__swbuf_r+0x6c>
 800abc2:	bf00      	nop
 800abc4:	0800da84 	.word	0x0800da84
 800abc8:	0800daa4 	.word	0x0800daa4
 800abcc:	0800da64 	.word	0x0800da64

0800abd0 <_write_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d07      	ldr	r5, [pc, #28]	; (800abf0 <_write_r+0x20>)
 800abd4:	4604      	mov	r4, r0
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	602a      	str	r2, [r5, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f7f7 fba4 	bl	800232c <_write>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_write_r+0x1e>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_write_r+0x1e>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20015ad0 	.word	0x20015ad0

0800abf4 <__swsetup_r>:
 800abf4:	4b32      	ldr	r3, [pc, #200]	; (800acc0 <__swsetup_r+0xcc>)
 800abf6:	b570      	push	{r4, r5, r6, lr}
 800abf8:	681d      	ldr	r5, [r3, #0]
 800abfa:	4606      	mov	r6, r0
 800abfc:	460c      	mov	r4, r1
 800abfe:	b125      	cbz	r5, 800ac0a <__swsetup_r+0x16>
 800ac00:	69ab      	ldr	r3, [r5, #24]
 800ac02:	b913      	cbnz	r3, 800ac0a <__swsetup_r+0x16>
 800ac04:	4628      	mov	r0, r5
 800ac06:	f7fe f9a5 	bl	8008f54 <__sinit>
 800ac0a:	4b2e      	ldr	r3, [pc, #184]	; (800acc4 <__swsetup_r+0xd0>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	d10f      	bne.n	800ac30 <__swsetup_r+0x3c>
 800ac10:	686c      	ldr	r4, [r5, #4]
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac18:	0719      	lsls	r1, r3, #28
 800ac1a:	d42c      	bmi.n	800ac76 <__swsetup_r+0x82>
 800ac1c:	06dd      	lsls	r5, r3, #27
 800ac1e:	d411      	bmi.n	800ac44 <__swsetup_r+0x50>
 800ac20:	2309      	movs	r3, #9
 800ac22:	6033      	str	r3, [r6, #0]
 800ac24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2e:	e03e      	b.n	800acae <__swsetup_r+0xba>
 800ac30:	4b25      	ldr	r3, [pc, #148]	; (800acc8 <__swsetup_r+0xd4>)
 800ac32:	429c      	cmp	r4, r3
 800ac34:	d101      	bne.n	800ac3a <__swsetup_r+0x46>
 800ac36:	68ac      	ldr	r4, [r5, #8]
 800ac38:	e7eb      	b.n	800ac12 <__swsetup_r+0x1e>
 800ac3a:	4b24      	ldr	r3, [pc, #144]	; (800accc <__swsetup_r+0xd8>)
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	bf08      	it	eq
 800ac40:	68ec      	ldreq	r4, [r5, #12]
 800ac42:	e7e6      	b.n	800ac12 <__swsetup_r+0x1e>
 800ac44:	0758      	lsls	r0, r3, #29
 800ac46:	d512      	bpl.n	800ac6e <__swsetup_r+0x7a>
 800ac48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac4a:	b141      	cbz	r1, 800ac5e <__swsetup_r+0x6a>
 800ac4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac50:	4299      	cmp	r1, r3
 800ac52:	d002      	beq.n	800ac5a <__swsetup_r+0x66>
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7fe fa69 	bl	800912c <_free_r>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	2300      	movs	r3, #0
 800ac68:	6063      	str	r3, [r4, #4]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f043 0308 	orr.w	r3, r3, #8
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	b94b      	cbnz	r3, 800ac8e <__swsetup_r+0x9a>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac84:	d003      	beq.n	800ac8e <__swsetup_r+0x9a>
 800ac86:	4621      	mov	r1, r4
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f001 fa57 	bl	800c13c <__smakebuf_r>
 800ac8e:	89a0      	ldrh	r0, [r4, #12]
 800ac90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac94:	f010 0301 	ands.w	r3, r0, #1
 800ac98:	d00a      	beq.n	800acb0 <__swsetup_r+0xbc>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60a3      	str	r3, [r4, #8]
 800ac9e:	6963      	ldr	r3, [r4, #20]
 800aca0:	425b      	negs	r3, r3
 800aca2:	61a3      	str	r3, [r4, #24]
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	b943      	cbnz	r3, 800acba <__swsetup_r+0xc6>
 800aca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acac:	d1ba      	bne.n	800ac24 <__swsetup_r+0x30>
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	0781      	lsls	r1, r0, #30
 800acb2:	bf58      	it	pl
 800acb4:	6963      	ldrpl	r3, [r4, #20]
 800acb6:	60a3      	str	r3, [r4, #8]
 800acb8:	e7f4      	b.n	800aca4 <__swsetup_r+0xb0>
 800acba:	2000      	movs	r0, #0
 800acbc:	e7f7      	b.n	800acae <__swsetup_r+0xba>
 800acbe:	bf00      	nop
 800acc0:	2000001c 	.word	0x2000001c
 800acc4:	0800da84 	.word	0x0800da84
 800acc8:	0800daa4 	.word	0x0800daa4
 800accc:	0800da64 	.word	0x0800da64

0800acd0 <_close_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	; (800acec <_close_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f7 ff81 	bl	8002be2 <_close>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_close_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_close_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20015ad0 	.word	0x20015ad0

0800acf0 <quorem>:
 800acf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	6903      	ldr	r3, [r0, #16]
 800acf6:	690c      	ldr	r4, [r1, #16]
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	4607      	mov	r7, r0
 800acfc:	f2c0 8081 	blt.w	800ae02 <quorem+0x112>
 800ad00:	3c01      	subs	r4, #1
 800ad02:	f101 0814 	add.w	r8, r1, #20
 800ad06:	f100 0514 	add.w	r5, r0, #20
 800ad0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad24:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad28:	d331      	bcc.n	800ad8e <quorem+0x9e>
 800ad2a:	f04f 0e00 	mov.w	lr, #0
 800ad2e:	4640      	mov	r0, r8
 800ad30:	46ac      	mov	ip, r5
 800ad32:	46f2      	mov	sl, lr
 800ad34:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad38:	b293      	uxth	r3, r2
 800ad3a:	fb06 e303 	mla	r3, r6, r3, lr
 800ad3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	ebaa 0303 	sub.w	r3, sl, r3
 800ad48:	f8dc a000 	ldr.w	sl, [ip]
 800ad4c:	0c12      	lsrs	r2, r2, #16
 800ad4e:	fa13 f38a 	uxtah	r3, r3, sl
 800ad52:	fb06 e202 	mla	r2, r6, r2, lr
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	9b00      	ldr	r3, [sp, #0]
 800ad5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad5e:	b292      	uxth	r2, r2
 800ad60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad68:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad6c:	4581      	cmp	r9, r0
 800ad6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad72:	f84c 3b04 	str.w	r3, [ip], #4
 800ad76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad7a:	d2db      	bcs.n	800ad34 <quorem+0x44>
 800ad7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad80:	b92b      	cbnz	r3, 800ad8e <quorem+0x9e>
 800ad82:	9b01      	ldr	r3, [sp, #4]
 800ad84:	3b04      	subs	r3, #4
 800ad86:	429d      	cmp	r5, r3
 800ad88:	461a      	mov	r2, r3
 800ad8a:	d32e      	bcc.n	800adea <quorem+0xfa>
 800ad8c:	613c      	str	r4, [r7, #16]
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f001 fcfe 	bl	800c790 <__mcmp>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	db24      	blt.n	800ade2 <quorem+0xf2>
 800ad98:	3601      	adds	r6, #1
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	f04f 0c00 	mov.w	ip, #0
 800ada0:	f858 2b04 	ldr.w	r2, [r8], #4
 800ada4:	f8d0 e000 	ldr.w	lr, [r0]
 800ada8:	b293      	uxth	r3, r2
 800adaa:	ebac 0303 	sub.w	r3, ip, r3
 800adae:	0c12      	lsrs	r2, r2, #16
 800adb0:	fa13 f38e 	uxtah	r3, r3, lr
 800adb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800adb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adc2:	45c1      	cmp	r9, r8
 800adc4:	f840 3b04 	str.w	r3, [r0], #4
 800adc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800adcc:	d2e8      	bcs.n	800ada0 <quorem+0xb0>
 800adce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800add2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800add6:	b922      	cbnz	r2, 800ade2 <quorem+0xf2>
 800add8:	3b04      	subs	r3, #4
 800adda:	429d      	cmp	r5, r3
 800addc:	461a      	mov	r2, r3
 800adde:	d30a      	bcc.n	800adf6 <quorem+0x106>
 800ade0:	613c      	str	r4, [r7, #16]
 800ade2:	4630      	mov	r0, r6
 800ade4:	b003      	add	sp, #12
 800ade6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adea:	6812      	ldr	r2, [r2, #0]
 800adec:	3b04      	subs	r3, #4
 800adee:	2a00      	cmp	r2, #0
 800adf0:	d1cc      	bne.n	800ad8c <quorem+0x9c>
 800adf2:	3c01      	subs	r4, #1
 800adf4:	e7c7      	b.n	800ad86 <quorem+0x96>
 800adf6:	6812      	ldr	r2, [r2, #0]
 800adf8:	3b04      	subs	r3, #4
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d1f0      	bne.n	800ade0 <quorem+0xf0>
 800adfe:	3c01      	subs	r4, #1
 800ae00:	e7eb      	b.n	800adda <quorem+0xea>
 800ae02:	2000      	movs	r0, #0
 800ae04:	e7ee      	b.n	800ade4 <quorem+0xf4>
	...

0800ae08 <_dtoa_r>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	ed2d 8b04 	vpush	{d8-d9}
 800ae10:	ec57 6b10 	vmov	r6, r7, d0
 800ae14:	b093      	sub	sp, #76	; 0x4c
 800ae16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae1c:	9106      	str	r1, [sp, #24]
 800ae1e:	ee10 aa10 	vmov	sl, s0
 800ae22:	4604      	mov	r4, r0
 800ae24:	9209      	str	r2, [sp, #36]	; 0x24
 800ae26:	930c      	str	r3, [sp, #48]	; 0x30
 800ae28:	46bb      	mov	fp, r7
 800ae2a:	b975      	cbnz	r5, 800ae4a <_dtoa_r+0x42>
 800ae2c:	2010      	movs	r0, #16
 800ae2e:	f7fe f957 	bl	80090e0 <malloc>
 800ae32:	4602      	mov	r2, r0
 800ae34:	6260      	str	r0, [r4, #36]	; 0x24
 800ae36:	b920      	cbnz	r0, 800ae42 <_dtoa_r+0x3a>
 800ae38:	4ba7      	ldr	r3, [pc, #668]	; (800b0d8 <_dtoa_r+0x2d0>)
 800ae3a:	21ea      	movs	r1, #234	; 0xea
 800ae3c:	48a7      	ldr	r0, [pc, #668]	; (800b0dc <_dtoa_r+0x2d4>)
 800ae3e:	f002 f9c1 	bl	800d1c4 <__assert_func>
 800ae42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae46:	6005      	str	r5, [r0, #0]
 800ae48:	60c5      	str	r5, [r0, #12]
 800ae4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae4c:	6819      	ldr	r1, [r3, #0]
 800ae4e:	b151      	cbz	r1, 800ae66 <_dtoa_r+0x5e>
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	604a      	str	r2, [r1, #4]
 800ae54:	2301      	movs	r3, #1
 800ae56:	4093      	lsls	r3, r2
 800ae58:	608b      	str	r3, [r1, #8]
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f001 fa0c 	bl	800c278 <_Bfree>
 800ae60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	1e3b      	subs	r3, r7, #0
 800ae68:	bfaa      	itet	ge
 800ae6a:	2300      	movge	r3, #0
 800ae6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae70:	f8c8 3000 	strge.w	r3, [r8]
 800ae74:	4b9a      	ldr	r3, [pc, #616]	; (800b0e0 <_dtoa_r+0x2d8>)
 800ae76:	bfbc      	itt	lt
 800ae78:	2201      	movlt	r2, #1
 800ae7a:	f8c8 2000 	strlt.w	r2, [r8]
 800ae7e:	ea33 030b 	bics.w	r3, r3, fp
 800ae82:	d11b      	bne.n	800aebc <_dtoa_r+0xb4>
 800ae84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae86:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae90:	4333      	orrs	r3, r6
 800ae92:	f000 8592 	beq.w	800b9ba <_dtoa_r+0xbb2>
 800ae96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae98:	b963      	cbnz	r3, 800aeb4 <_dtoa_r+0xac>
 800ae9a:	4b92      	ldr	r3, [pc, #584]	; (800b0e4 <_dtoa_r+0x2dc>)
 800ae9c:	e022      	b.n	800aee4 <_dtoa_r+0xdc>
 800ae9e:	4b92      	ldr	r3, [pc, #584]	; (800b0e8 <_dtoa_r+0x2e0>)
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	3308      	adds	r3, #8
 800aea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	9801      	ldr	r0, [sp, #4]
 800aeaa:	b013      	add	sp, #76	; 0x4c
 800aeac:	ecbd 8b04 	vpop	{d8-d9}
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	4b8b      	ldr	r3, [pc, #556]	; (800b0e4 <_dtoa_r+0x2dc>)
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	3303      	adds	r3, #3
 800aeba:	e7f3      	b.n	800aea4 <_dtoa_r+0x9c>
 800aebc:	2200      	movs	r2, #0
 800aebe:	2300      	movs	r3, #0
 800aec0:	4650      	mov	r0, sl
 800aec2:	4659      	mov	r1, fp
 800aec4:	f7f5 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 800aec8:	ec4b ab19 	vmov	d9, sl, fp
 800aecc:	4680      	mov	r8, r0
 800aece:	b158      	cbz	r0, 800aee8 <_dtoa_r+0xe0>
 800aed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aed2:	2301      	movs	r3, #1
 800aed4:	6013      	str	r3, [r2, #0]
 800aed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 856b 	beq.w	800b9b4 <_dtoa_r+0xbac>
 800aede:	4883      	ldr	r0, [pc, #524]	; (800b0ec <_dtoa_r+0x2e4>)
 800aee0:	6018      	str	r0, [r3, #0]
 800aee2:	1e43      	subs	r3, r0, #1
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	e7df      	b.n	800aea8 <_dtoa_r+0xa0>
 800aee8:	ec4b ab10 	vmov	d0, sl, fp
 800aeec:	aa10      	add	r2, sp, #64	; 0x40
 800aeee:	a911      	add	r1, sp, #68	; 0x44
 800aef0:	4620      	mov	r0, r4
 800aef2:	f001 fd6f 	bl	800c9d4 <__d2b>
 800aef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aefa:	ee08 0a10 	vmov	s16, r0
 800aefe:	2d00      	cmp	r5, #0
 800af00:	f000 8084 	beq.w	800b00c <_dtoa_r+0x204>
 800af04:	ee19 3a90 	vmov	r3, s19
 800af08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af10:	4656      	mov	r6, sl
 800af12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af1e:	4b74      	ldr	r3, [pc, #464]	; (800b0f0 <_dtoa_r+0x2e8>)
 800af20:	2200      	movs	r2, #0
 800af22:	4630      	mov	r0, r6
 800af24:	4639      	mov	r1, r7
 800af26:	f7f5 f9c7 	bl	80002b8 <__aeabi_dsub>
 800af2a:	a365      	add	r3, pc, #404	; (adr r3, 800b0c0 <_dtoa_r+0x2b8>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f7f5 fb7a 	bl	8000628 <__aeabi_dmul>
 800af34:	a364      	add	r3, pc, #400	; (adr r3, 800b0c8 <_dtoa_r+0x2c0>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f7f5 f9bf 	bl	80002bc <__adddf3>
 800af3e:	4606      	mov	r6, r0
 800af40:	4628      	mov	r0, r5
 800af42:	460f      	mov	r7, r1
 800af44:	f7f5 fb06 	bl	8000554 <__aeabi_i2d>
 800af48:	a361      	add	r3, pc, #388	; (adr r3, 800b0d0 <_dtoa_r+0x2c8>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 fb6b 	bl	8000628 <__aeabi_dmul>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	4630      	mov	r0, r6
 800af58:	4639      	mov	r1, r7
 800af5a:	f7f5 f9af 	bl	80002bc <__adddf3>
 800af5e:	4606      	mov	r6, r0
 800af60:	460f      	mov	r7, r1
 800af62:	f7f5 fe11 	bl	8000b88 <__aeabi_d2iz>
 800af66:	2200      	movs	r2, #0
 800af68:	9000      	str	r0, [sp, #0]
 800af6a:	2300      	movs	r3, #0
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 fdcc 	bl	8000b0c <__aeabi_dcmplt>
 800af74:	b150      	cbz	r0, 800af8c <_dtoa_r+0x184>
 800af76:	9800      	ldr	r0, [sp, #0]
 800af78:	f7f5 faec 	bl	8000554 <__aeabi_i2d>
 800af7c:	4632      	mov	r2, r6
 800af7e:	463b      	mov	r3, r7
 800af80:	f7f5 fdba 	bl	8000af8 <__aeabi_dcmpeq>
 800af84:	b910      	cbnz	r0, 800af8c <_dtoa_r+0x184>
 800af86:	9b00      	ldr	r3, [sp, #0]
 800af88:	3b01      	subs	r3, #1
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	9b00      	ldr	r3, [sp, #0]
 800af8e:	2b16      	cmp	r3, #22
 800af90:	d85a      	bhi.n	800b048 <_dtoa_r+0x240>
 800af92:	9a00      	ldr	r2, [sp, #0]
 800af94:	4b57      	ldr	r3, [pc, #348]	; (800b0f4 <_dtoa_r+0x2ec>)
 800af96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	ec51 0b19 	vmov	r0, r1, d9
 800afa2:	f7f5 fdb3 	bl	8000b0c <__aeabi_dcmplt>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d050      	beq.n	800b04c <_dtoa_r+0x244>
 800afaa:	9b00      	ldr	r3, [sp, #0]
 800afac:	3b01      	subs	r3, #1
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	2300      	movs	r3, #0
 800afb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800afb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afb6:	1b5d      	subs	r5, r3, r5
 800afb8:	1e6b      	subs	r3, r5, #1
 800afba:	9305      	str	r3, [sp, #20]
 800afbc:	bf45      	ittet	mi
 800afbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800afc2:	9304      	strmi	r3, [sp, #16]
 800afc4:	2300      	movpl	r3, #0
 800afc6:	2300      	movmi	r3, #0
 800afc8:	bf4c      	ite	mi
 800afca:	9305      	strmi	r3, [sp, #20]
 800afcc:	9304      	strpl	r3, [sp, #16]
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	db3d      	blt.n	800b050 <_dtoa_r+0x248>
 800afd4:	9b05      	ldr	r3, [sp, #20]
 800afd6:	9a00      	ldr	r2, [sp, #0]
 800afd8:	920a      	str	r2, [sp, #40]	; 0x28
 800afda:	4413      	add	r3, r2
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	2300      	movs	r3, #0
 800afe0:	9307      	str	r3, [sp, #28]
 800afe2:	9b06      	ldr	r3, [sp, #24]
 800afe4:	2b09      	cmp	r3, #9
 800afe6:	f200 8089 	bhi.w	800b0fc <_dtoa_r+0x2f4>
 800afea:	2b05      	cmp	r3, #5
 800afec:	bfc4      	itt	gt
 800afee:	3b04      	subgt	r3, #4
 800aff0:	9306      	strgt	r3, [sp, #24]
 800aff2:	9b06      	ldr	r3, [sp, #24]
 800aff4:	f1a3 0302 	sub.w	r3, r3, #2
 800aff8:	bfcc      	ite	gt
 800affa:	2500      	movgt	r5, #0
 800affc:	2501      	movle	r5, #1
 800affe:	2b03      	cmp	r3, #3
 800b000:	f200 8087 	bhi.w	800b112 <_dtoa_r+0x30a>
 800b004:	e8df f003 	tbb	[pc, r3]
 800b008:	59383a2d 	.word	0x59383a2d
 800b00c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b010:	441d      	add	r5, r3
 800b012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b016:	2b20      	cmp	r3, #32
 800b018:	bfc1      	itttt	gt
 800b01a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b01e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b022:	fa0b f303 	lslgt.w	r3, fp, r3
 800b026:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b02a:	bfda      	itte	le
 800b02c:	f1c3 0320 	rsble	r3, r3, #32
 800b030:	fa06 f003 	lslle.w	r0, r6, r3
 800b034:	4318      	orrgt	r0, r3
 800b036:	f7f5 fa7d 	bl	8000534 <__aeabi_ui2d>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4606      	mov	r6, r0
 800b03e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b042:	3d01      	subs	r5, #1
 800b044:	930e      	str	r3, [sp, #56]	; 0x38
 800b046:	e76a      	b.n	800af1e <_dtoa_r+0x116>
 800b048:	2301      	movs	r3, #1
 800b04a:	e7b2      	b.n	800afb2 <_dtoa_r+0x1aa>
 800b04c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b04e:	e7b1      	b.n	800afb4 <_dtoa_r+0x1ac>
 800b050:	9b04      	ldr	r3, [sp, #16]
 800b052:	9a00      	ldr	r2, [sp, #0]
 800b054:	1a9b      	subs	r3, r3, r2
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	4253      	negs	r3, r2
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	2300      	movs	r3, #0
 800b05e:	930a      	str	r3, [sp, #40]	; 0x28
 800b060:	e7bf      	b.n	800afe2 <_dtoa_r+0x1da>
 800b062:	2300      	movs	r3, #0
 800b064:	9308      	str	r3, [sp, #32]
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dc55      	bgt.n	800b118 <_dtoa_r+0x310>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b072:	461a      	mov	r2, r3
 800b074:	9209      	str	r2, [sp, #36]	; 0x24
 800b076:	e00c      	b.n	800b092 <_dtoa_r+0x28a>
 800b078:	2301      	movs	r3, #1
 800b07a:	e7f3      	b.n	800b064 <_dtoa_r+0x25c>
 800b07c:	2300      	movs	r3, #0
 800b07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b080:	9308      	str	r3, [sp, #32]
 800b082:	9b00      	ldr	r3, [sp, #0]
 800b084:	4413      	add	r3, r2
 800b086:	9302      	str	r3, [sp, #8]
 800b088:	3301      	adds	r3, #1
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	9303      	str	r3, [sp, #12]
 800b08e:	bfb8      	it	lt
 800b090:	2301      	movlt	r3, #1
 800b092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b094:	2200      	movs	r2, #0
 800b096:	6042      	str	r2, [r0, #4]
 800b098:	2204      	movs	r2, #4
 800b09a:	f102 0614 	add.w	r6, r2, #20
 800b09e:	429e      	cmp	r6, r3
 800b0a0:	6841      	ldr	r1, [r0, #4]
 800b0a2:	d93d      	bls.n	800b120 <_dtoa_r+0x318>
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f001 f8a7 	bl	800c1f8 <_Balloc>
 800b0aa:	9001      	str	r0, [sp, #4]
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d13b      	bne.n	800b128 <_dtoa_r+0x320>
 800b0b0:	4b11      	ldr	r3, [pc, #68]	; (800b0f8 <_dtoa_r+0x2f0>)
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0b8:	e6c0      	b.n	800ae3c <_dtoa_r+0x34>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e7df      	b.n	800b07e <_dtoa_r+0x276>
 800b0be:	bf00      	nop
 800b0c0:	636f4361 	.word	0x636f4361
 800b0c4:	3fd287a7 	.word	0x3fd287a7
 800b0c8:	8b60c8b3 	.word	0x8b60c8b3
 800b0cc:	3fc68a28 	.word	0x3fc68a28
 800b0d0:	509f79fb 	.word	0x509f79fb
 800b0d4:	3fd34413 	.word	0x3fd34413
 800b0d8:	0800db5d 	.word	0x0800db5d
 800b0dc:	0800db74 	.word	0x0800db74
 800b0e0:	7ff00000 	.word	0x7ff00000
 800b0e4:	0800db59 	.word	0x0800db59
 800b0e8:	0800db50 	.word	0x0800db50
 800b0ec:	0800dad9 	.word	0x0800dad9
 800b0f0:	3ff80000 	.word	0x3ff80000
 800b0f4:	0800dce0 	.word	0x0800dce0
 800b0f8:	0800dbcf 	.word	0x0800dbcf
 800b0fc:	2501      	movs	r5, #1
 800b0fe:	2300      	movs	r3, #0
 800b100:	9306      	str	r3, [sp, #24]
 800b102:	9508      	str	r5, [sp, #32]
 800b104:	f04f 33ff 	mov.w	r3, #4294967295
 800b108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b10c:	2200      	movs	r2, #0
 800b10e:	2312      	movs	r3, #18
 800b110:	e7b0      	b.n	800b074 <_dtoa_r+0x26c>
 800b112:	2301      	movs	r3, #1
 800b114:	9308      	str	r3, [sp, #32]
 800b116:	e7f5      	b.n	800b104 <_dtoa_r+0x2fc>
 800b118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b11e:	e7b8      	b.n	800b092 <_dtoa_r+0x28a>
 800b120:	3101      	adds	r1, #1
 800b122:	6041      	str	r1, [r0, #4]
 800b124:	0052      	lsls	r2, r2, #1
 800b126:	e7b8      	b.n	800b09a <_dtoa_r+0x292>
 800b128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b12a:	9a01      	ldr	r2, [sp, #4]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	2b0e      	cmp	r3, #14
 800b132:	f200 809d 	bhi.w	800b270 <_dtoa_r+0x468>
 800b136:	2d00      	cmp	r5, #0
 800b138:	f000 809a 	beq.w	800b270 <_dtoa_r+0x468>
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dd32      	ble.n	800b1a8 <_dtoa_r+0x3a0>
 800b142:	4ab7      	ldr	r2, [pc, #732]	; (800b420 <_dtoa_r+0x618>)
 800b144:	f003 030f 	and.w	r3, r3, #15
 800b148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b14c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b150:	9b00      	ldr	r3, [sp, #0]
 800b152:	05d8      	lsls	r0, r3, #23
 800b154:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b158:	d516      	bpl.n	800b188 <_dtoa_r+0x380>
 800b15a:	4bb2      	ldr	r3, [pc, #712]	; (800b424 <_dtoa_r+0x61c>)
 800b15c:	ec51 0b19 	vmov	r0, r1, d9
 800b160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b164:	f7f5 fb8a 	bl	800087c <__aeabi_ddiv>
 800b168:	f007 070f 	and.w	r7, r7, #15
 800b16c:	4682      	mov	sl, r0
 800b16e:	468b      	mov	fp, r1
 800b170:	2503      	movs	r5, #3
 800b172:	4eac      	ldr	r6, [pc, #688]	; (800b424 <_dtoa_r+0x61c>)
 800b174:	b957      	cbnz	r7, 800b18c <_dtoa_r+0x384>
 800b176:	4642      	mov	r2, r8
 800b178:	464b      	mov	r3, r9
 800b17a:	4650      	mov	r0, sl
 800b17c:	4659      	mov	r1, fp
 800b17e:	f7f5 fb7d 	bl	800087c <__aeabi_ddiv>
 800b182:	4682      	mov	sl, r0
 800b184:	468b      	mov	fp, r1
 800b186:	e028      	b.n	800b1da <_dtoa_r+0x3d2>
 800b188:	2502      	movs	r5, #2
 800b18a:	e7f2      	b.n	800b172 <_dtoa_r+0x36a>
 800b18c:	07f9      	lsls	r1, r7, #31
 800b18e:	d508      	bpl.n	800b1a2 <_dtoa_r+0x39a>
 800b190:	4640      	mov	r0, r8
 800b192:	4649      	mov	r1, r9
 800b194:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b198:	f7f5 fa46 	bl	8000628 <__aeabi_dmul>
 800b19c:	3501      	adds	r5, #1
 800b19e:	4680      	mov	r8, r0
 800b1a0:	4689      	mov	r9, r1
 800b1a2:	107f      	asrs	r7, r7, #1
 800b1a4:	3608      	adds	r6, #8
 800b1a6:	e7e5      	b.n	800b174 <_dtoa_r+0x36c>
 800b1a8:	f000 809b 	beq.w	800b2e2 <_dtoa_r+0x4da>
 800b1ac:	9b00      	ldr	r3, [sp, #0]
 800b1ae:	4f9d      	ldr	r7, [pc, #628]	; (800b424 <_dtoa_r+0x61c>)
 800b1b0:	425e      	negs	r6, r3
 800b1b2:	4b9b      	ldr	r3, [pc, #620]	; (800b420 <_dtoa_r+0x618>)
 800b1b4:	f006 020f 	and.w	r2, r6, #15
 800b1b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	ec51 0b19 	vmov	r0, r1, d9
 800b1c4:	f7f5 fa30 	bl	8000628 <__aeabi_dmul>
 800b1c8:	1136      	asrs	r6, r6, #4
 800b1ca:	4682      	mov	sl, r0
 800b1cc:	468b      	mov	fp, r1
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	2502      	movs	r5, #2
 800b1d2:	2e00      	cmp	r6, #0
 800b1d4:	d17a      	bne.n	800b2cc <_dtoa_r+0x4c4>
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1d3      	bne.n	800b182 <_dtoa_r+0x37a>
 800b1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 8082 	beq.w	800b2e6 <_dtoa_r+0x4de>
 800b1e2:	4b91      	ldr	r3, [pc, #580]	; (800b428 <_dtoa_r+0x620>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	4659      	mov	r1, fp
 800b1ea:	f7f5 fc8f 	bl	8000b0c <__aeabi_dcmplt>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d079      	beq.n	800b2e6 <_dtoa_r+0x4de>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d076      	beq.n	800b2e6 <_dtoa_r+0x4de>
 800b1f8:	9b02      	ldr	r3, [sp, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dd36      	ble.n	800b26c <_dtoa_r+0x464>
 800b1fe:	9b00      	ldr	r3, [sp, #0]
 800b200:	4650      	mov	r0, sl
 800b202:	4659      	mov	r1, fp
 800b204:	1e5f      	subs	r7, r3, #1
 800b206:	2200      	movs	r2, #0
 800b208:	4b88      	ldr	r3, [pc, #544]	; (800b42c <_dtoa_r+0x624>)
 800b20a:	f7f5 fa0d 	bl	8000628 <__aeabi_dmul>
 800b20e:	9e02      	ldr	r6, [sp, #8]
 800b210:	4682      	mov	sl, r0
 800b212:	468b      	mov	fp, r1
 800b214:	3501      	adds	r5, #1
 800b216:	4628      	mov	r0, r5
 800b218:	f7f5 f99c 	bl	8000554 <__aeabi_i2d>
 800b21c:	4652      	mov	r2, sl
 800b21e:	465b      	mov	r3, fp
 800b220:	f7f5 fa02 	bl	8000628 <__aeabi_dmul>
 800b224:	4b82      	ldr	r3, [pc, #520]	; (800b430 <_dtoa_r+0x628>)
 800b226:	2200      	movs	r2, #0
 800b228:	f7f5 f848 	bl	80002bc <__adddf3>
 800b22c:	46d0      	mov	r8, sl
 800b22e:	46d9      	mov	r9, fp
 800b230:	4682      	mov	sl, r0
 800b232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b236:	2e00      	cmp	r6, #0
 800b238:	d158      	bne.n	800b2ec <_dtoa_r+0x4e4>
 800b23a:	4b7e      	ldr	r3, [pc, #504]	; (800b434 <_dtoa_r+0x62c>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	4640      	mov	r0, r8
 800b240:	4649      	mov	r1, r9
 800b242:	f7f5 f839 	bl	80002b8 <__aeabi_dsub>
 800b246:	4652      	mov	r2, sl
 800b248:	465b      	mov	r3, fp
 800b24a:	4680      	mov	r8, r0
 800b24c:	4689      	mov	r9, r1
 800b24e:	f7f5 fc7b 	bl	8000b48 <__aeabi_dcmpgt>
 800b252:	2800      	cmp	r0, #0
 800b254:	f040 8295 	bne.w	800b782 <_dtoa_r+0x97a>
 800b258:	4652      	mov	r2, sl
 800b25a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b25e:	4640      	mov	r0, r8
 800b260:	4649      	mov	r1, r9
 800b262:	f7f5 fc53 	bl	8000b0c <__aeabi_dcmplt>
 800b266:	2800      	cmp	r0, #0
 800b268:	f040 8289 	bne.w	800b77e <_dtoa_r+0x976>
 800b26c:	ec5b ab19 	vmov	sl, fp, d9
 800b270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b272:	2b00      	cmp	r3, #0
 800b274:	f2c0 8148 	blt.w	800b508 <_dtoa_r+0x700>
 800b278:	9a00      	ldr	r2, [sp, #0]
 800b27a:	2a0e      	cmp	r2, #14
 800b27c:	f300 8144 	bgt.w	800b508 <_dtoa_r+0x700>
 800b280:	4b67      	ldr	r3, [pc, #412]	; (800b420 <_dtoa_r+0x618>)
 800b282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f280 80d5 	bge.w	800b43c <_dtoa_r+0x634>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f300 80d1 	bgt.w	800b43c <_dtoa_r+0x634>
 800b29a:	f040 826f 	bne.w	800b77c <_dtoa_r+0x974>
 800b29e:	4b65      	ldr	r3, [pc, #404]	; (800b434 <_dtoa_r+0x62c>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f5 f9bf 	bl	8000628 <__aeabi_dmul>
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	f7f5 fc41 	bl	8000b34 <__aeabi_dcmpge>
 800b2b2:	9e03      	ldr	r6, [sp, #12]
 800b2b4:	4637      	mov	r7, r6
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f040 8245 	bne.w	800b746 <_dtoa_r+0x93e>
 800b2bc:	9d01      	ldr	r5, [sp, #4]
 800b2be:	2331      	movs	r3, #49	; 0x31
 800b2c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b2c4:	9b00      	ldr	r3, [sp, #0]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	e240      	b.n	800b74e <_dtoa_r+0x946>
 800b2cc:	07f2      	lsls	r2, r6, #31
 800b2ce:	d505      	bpl.n	800b2dc <_dtoa_r+0x4d4>
 800b2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d4:	f7f5 f9a8 	bl	8000628 <__aeabi_dmul>
 800b2d8:	3501      	adds	r5, #1
 800b2da:	2301      	movs	r3, #1
 800b2dc:	1076      	asrs	r6, r6, #1
 800b2de:	3708      	adds	r7, #8
 800b2e0:	e777      	b.n	800b1d2 <_dtoa_r+0x3ca>
 800b2e2:	2502      	movs	r5, #2
 800b2e4:	e779      	b.n	800b1da <_dtoa_r+0x3d2>
 800b2e6:	9f00      	ldr	r7, [sp, #0]
 800b2e8:	9e03      	ldr	r6, [sp, #12]
 800b2ea:	e794      	b.n	800b216 <_dtoa_r+0x40e>
 800b2ec:	9901      	ldr	r1, [sp, #4]
 800b2ee:	4b4c      	ldr	r3, [pc, #304]	; (800b420 <_dtoa_r+0x618>)
 800b2f0:	4431      	add	r1, r6
 800b2f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b2f4:	9908      	ldr	r1, [sp, #32]
 800b2f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2fe:	2900      	cmp	r1, #0
 800b300:	d043      	beq.n	800b38a <_dtoa_r+0x582>
 800b302:	494d      	ldr	r1, [pc, #308]	; (800b438 <_dtoa_r+0x630>)
 800b304:	2000      	movs	r0, #0
 800b306:	f7f5 fab9 	bl	800087c <__aeabi_ddiv>
 800b30a:	4652      	mov	r2, sl
 800b30c:	465b      	mov	r3, fp
 800b30e:	f7f4 ffd3 	bl	80002b8 <__aeabi_dsub>
 800b312:	9d01      	ldr	r5, [sp, #4]
 800b314:	4682      	mov	sl, r0
 800b316:	468b      	mov	fp, r1
 800b318:	4649      	mov	r1, r9
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7f5 fc34 	bl	8000b88 <__aeabi_d2iz>
 800b320:	4606      	mov	r6, r0
 800b322:	f7f5 f917 	bl	8000554 <__aeabi_i2d>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4640      	mov	r0, r8
 800b32c:	4649      	mov	r1, r9
 800b32e:	f7f4 ffc3 	bl	80002b8 <__aeabi_dsub>
 800b332:	3630      	adds	r6, #48	; 0x30
 800b334:	f805 6b01 	strb.w	r6, [r5], #1
 800b338:	4652      	mov	r2, sl
 800b33a:	465b      	mov	r3, fp
 800b33c:	4680      	mov	r8, r0
 800b33e:	4689      	mov	r9, r1
 800b340:	f7f5 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 800b344:	2800      	cmp	r0, #0
 800b346:	d163      	bne.n	800b410 <_dtoa_r+0x608>
 800b348:	4642      	mov	r2, r8
 800b34a:	464b      	mov	r3, r9
 800b34c:	4936      	ldr	r1, [pc, #216]	; (800b428 <_dtoa_r+0x620>)
 800b34e:	2000      	movs	r0, #0
 800b350:	f7f4 ffb2 	bl	80002b8 <__aeabi_dsub>
 800b354:	4652      	mov	r2, sl
 800b356:	465b      	mov	r3, fp
 800b358:	f7f5 fbd8 	bl	8000b0c <__aeabi_dcmplt>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f040 80b5 	bne.w	800b4cc <_dtoa_r+0x6c4>
 800b362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b364:	429d      	cmp	r5, r3
 800b366:	d081      	beq.n	800b26c <_dtoa_r+0x464>
 800b368:	4b30      	ldr	r3, [pc, #192]	; (800b42c <_dtoa_r+0x624>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	4650      	mov	r0, sl
 800b36e:	4659      	mov	r1, fp
 800b370:	f7f5 f95a 	bl	8000628 <__aeabi_dmul>
 800b374:	4b2d      	ldr	r3, [pc, #180]	; (800b42c <_dtoa_r+0x624>)
 800b376:	4682      	mov	sl, r0
 800b378:	468b      	mov	fp, r1
 800b37a:	4640      	mov	r0, r8
 800b37c:	4649      	mov	r1, r9
 800b37e:	2200      	movs	r2, #0
 800b380:	f7f5 f952 	bl	8000628 <__aeabi_dmul>
 800b384:	4680      	mov	r8, r0
 800b386:	4689      	mov	r9, r1
 800b388:	e7c6      	b.n	800b318 <_dtoa_r+0x510>
 800b38a:	4650      	mov	r0, sl
 800b38c:	4659      	mov	r1, fp
 800b38e:	f7f5 f94b 	bl	8000628 <__aeabi_dmul>
 800b392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b394:	9d01      	ldr	r5, [sp, #4]
 800b396:	930f      	str	r3, [sp, #60]	; 0x3c
 800b398:	4682      	mov	sl, r0
 800b39a:	468b      	mov	fp, r1
 800b39c:	4649      	mov	r1, r9
 800b39e:	4640      	mov	r0, r8
 800b3a0:	f7f5 fbf2 	bl	8000b88 <__aeabi_d2iz>
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	f7f5 f8d5 	bl	8000554 <__aeabi_i2d>
 800b3aa:	3630      	adds	r6, #48	; 0x30
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f4 ff80 	bl	80002b8 <__aeabi_dsub>
 800b3b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b3bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3be:	429d      	cmp	r5, r3
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	4689      	mov	r9, r1
 800b3c4:	f04f 0200 	mov.w	r2, #0
 800b3c8:	d124      	bne.n	800b414 <_dtoa_r+0x60c>
 800b3ca:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <_dtoa_r+0x630>)
 800b3cc:	4650      	mov	r0, sl
 800b3ce:	4659      	mov	r1, fp
 800b3d0:	f7f4 ff74 	bl	80002bc <__adddf3>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f5 fbb4 	bl	8000b48 <__aeabi_dcmpgt>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d173      	bne.n	800b4cc <_dtoa_r+0x6c4>
 800b3e4:	4652      	mov	r2, sl
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	4913      	ldr	r1, [pc, #76]	; (800b438 <_dtoa_r+0x630>)
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	f7f4 ff64 	bl	80002b8 <__aeabi_dsub>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	f7f5 fb88 	bl	8000b0c <__aeabi_dcmplt>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f43f af35 	beq.w	800b26c <_dtoa_r+0x464>
 800b402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b404:	1e6b      	subs	r3, r5, #1
 800b406:	930f      	str	r3, [sp, #60]	; 0x3c
 800b408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b40c:	2b30      	cmp	r3, #48	; 0x30
 800b40e:	d0f8      	beq.n	800b402 <_dtoa_r+0x5fa>
 800b410:	9700      	str	r7, [sp, #0]
 800b412:	e049      	b.n	800b4a8 <_dtoa_r+0x6a0>
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <_dtoa_r+0x624>)
 800b416:	f7f5 f907 	bl	8000628 <__aeabi_dmul>
 800b41a:	4680      	mov	r8, r0
 800b41c:	4689      	mov	r9, r1
 800b41e:	e7bd      	b.n	800b39c <_dtoa_r+0x594>
 800b420:	0800dce0 	.word	0x0800dce0
 800b424:	0800dcb8 	.word	0x0800dcb8
 800b428:	3ff00000 	.word	0x3ff00000
 800b42c:	40240000 	.word	0x40240000
 800b430:	401c0000 	.word	0x401c0000
 800b434:	40140000 	.word	0x40140000
 800b438:	3fe00000 	.word	0x3fe00000
 800b43c:	9d01      	ldr	r5, [sp, #4]
 800b43e:	4656      	mov	r6, sl
 800b440:	465f      	mov	r7, fp
 800b442:	4642      	mov	r2, r8
 800b444:	464b      	mov	r3, r9
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f5 fa17 	bl	800087c <__aeabi_ddiv>
 800b44e:	f7f5 fb9b 	bl	8000b88 <__aeabi_d2iz>
 800b452:	4682      	mov	sl, r0
 800b454:	f7f5 f87e 	bl	8000554 <__aeabi_i2d>
 800b458:	4642      	mov	r2, r8
 800b45a:	464b      	mov	r3, r9
 800b45c:	f7f5 f8e4 	bl	8000628 <__aeabi_dmul>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b46c:	f7f4 ff24 	bl	80002b8 <__aeabi_dsub>
 800b470:	f805 6b01 	strb.w	r6, [r5], #1
 800b474:	9e01      	ldr	r6, [sp, #4]
 800b476:	9f03      	ldr	r7, [sp, #12]
 800b478:	1bae      	subs	r6, r5, r6
 800b47a:	42b7      	cmp	r7, r6
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	d135      	bne.n	800b4ee <_dtoa_r+0x6e6>
 800b482:	f7f4 ff1b 	bl	80002bc <__adddf3>
 800b486:	4642      	mov	r2, r8
 800b488:	464b      	mov	r3, r9
 800b48a:	4606      	mov	r6, r0
 800b48c:	460f      	mov	r7, r1
 800b48e:	f7f5 fb5b 	bl	8000b48 <__aeabi_dcmpgt>
 800b492:	b9d0      	cbnz	r0, 800b4ca <_dtoa_r+0x6c2>
 800b494:	4642      	mov	r2, r8
 800b496:	464b      	mov	r3, r9
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 fb2c 	bl	8000af8 <__aeabi_dcmpeq>
 800b4a0:	b110      	cbz	r0, 800b4a8 <_dtoa_r+0x6a0>
 800b4a2:	f01a 0f01 	tst.w	sl, #1
 800b4a6:	d110      	bne.n	800b4ca <_dtoa_r+0x6c2>
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	ee18 1a10 	vmov	r1, s16
 800b4ae:	f000 fee3 	bl	800c278 <_Bfree>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9800      	ldr	r0, [sp, #0]
 800b4b6:	702b      	strb	r3, [r5, #0]
 800b4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	6018      	str	r0, [r3, #0]
 800b4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f43f acf1 	beq.w	800aea8 <_dtoa_r+0xa0>
 800b4c6:	601d      	str	r5, [r3, #0]
 800b4c8:	e4ee      	b.n	800aea8 <_dtoa_r+0xa0>
 800b4ca:	9f00      	ldr	r7, [sp, #0]
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	461d      	mov	r5, r3
 800b4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4d4:	2a39      	cmp	r2, #57	; 0x39
 800b4d6:	d106      	bne.n	800b4e6 <_dtoa_r+0x6de>
 800b4d8:	9a01      	ldr	r2, [sp, #4]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d1f7      	bne.n	800b4ce <_dtoa_r+0x6c6>
 800b4de:	9901      	ldr	r1, [sp, #4]
 800b4e0:	2230      	movs	r2, #48	; 0x30
 800b4e2:	3701      	adds	r7, #1
 800b4e4:	700a      	strb	r2, [r1, #0]
 800b4e6:	781a      	ldrb	r2, [r3, #0]
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	701a      	strb	r2, [r3, #0]
 800b4ec:	e790      	b.n	800b410 <_dtoa_r+0x608>
 800b4ee:	4ba6      	ldr	r3, [pc, #664]	; (800b788 <_dtoa_r+0x980>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f7f5 f899 	bl	8000628 <__aeabi_dmul>
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	460f      	mov	r7, r1
 800b4fe:	f7f5 fafb 	bl	8000af8 <__aeabi_dcmpeq>
 800b502:	2800      	cmp	r0, #0
 800b504:	d09d      	beq.n	800b442 <_dtoa_r+0x63a>
 800b506:	e7cf      	b.n	800b4a8 <_dtoa_r+0x6a0>
 800b508:	9a08      	ldr	r2, [sp, #32]
 800b50a:	2a00      	cmp	r2, #0
 800b50c:	f000 80d7 	beq.w	800b6be <_dtoa_r+0x8b6>
 800b510:	9a06      	ldr	r2, [sp, #24]
 800b512:	2a01      	cmp	r2, #1
 800b514:	f300 80ba 	bgt.w	800b68c <_dtoa_r+0x884>
 800b518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b51a:	2a00      	cmp	r2, #0
 800b51c:	f000 80b2 	beq.w	800b684 <_dtoa_r+0x87c>
 800b520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b524:	9e07      	ldr	r6, [sp, #28]
 800b526:	9d04      	ldr	r5, [sp, #16]
 800b528:	9a04      	ldr	r2, [sp, #16]
 800b52a:	441a      	add	r2, r3
 800b52c:	9204      	str	r2, [sp, #16]
 800b52e:	9a05      	ldr	r2, [sp, #20]
 800b530:	2101      	movs	r1, #1
 800b532:	441a      	add	r2, r3
 800b534:	4620      	mov	r0, r4
 800b536:	9205      	str	r2, [sp, #20]
 800b538:	f000 ffa0 	bl	800c47c <__i2b>
 800b53c:	4607      	mov	r7, r0
 800b53e:	2d00      	cmp	r5, #0
 800b540:	dd0c      	ble.n	800b55c <_dtoa_r+0x754>
 800b542:	9b05      	ldr	r3, [sp, #20]
 800b544:	2b00      	cmp	r3, #0
 800b546:	dd09      	ble.n	800b55c <_dtoa_r+0x754>
 800b548:	42ab      	cmp	r3, r5
 800b54a:	9a04      	ldr	r2, [sp, #16]
 800b54c:	bfa8      	it	ge
 800b54e:	462b      	movge	r3, r5
 800b550:	1ad2      	subs	r2, r2, r3
 800b552:	9204      	str	r2, [sp, #16]
 800b554:	9a05      	ldr	r2, [sp, #20]
 800b556:	1aed      	subs	r5, r5, r3
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	9305      	str	r3, [sp, #20]
 800b55c:	9b07      	ldr	r3, [sp, #28]
 800b55e:	b31b      	cbz	r3, 800b5a8 <_dtoa_r+0x7a0>
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	2b00      	cmp	r3, #0
 800b564:	f000 80af 	beq.w	800b6c6 <_dtoa_r+0x8be>
 800b568:	2e00      	cmp	r6, #0
 800b56a:	dd13      	ble.n	800b594 <_dtoa_r+0x78c>
 800b56c:	4639      	mov	r1, r7
 800b56e:	4632      	mov	r2, r6
 800b570:	4620      	mov	r0, r4
 800b572:	f001 f843 	bl	800c5fc <__pow5mult>
 800b576:	ee18 2a10 	vmov	r2, s16
 800b57a:	4601      	mov	r1, r0
 800b57c:	4607      	mov	r7, r0
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 ff92 	bl	800c4a8 <__multiply>
 800b584:	ee18 1a10 	vmov	r1, s16
 800b588:	4680      	mov	r8, r0
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fe74 	bl	800c278 <_Bfree>
 800b590:	ee08 8a10 	vmov	s16, r8
 800b594:	9b07      	ldr	r3, [sp, #28]
 800b596:	1b9a      	subs	r2, r3, r6
 800b598:	d006      	beq.n	800b5a8 <_dtoa_r+0x7a0>
 800b59a:	ee18 1a10 	vmov	r1, s16
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f001 f82c 	bl	800c5fc <__pow5mult>
 800b5a4:	ee08 0a10 	vmov	s16, r0
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 ff66 	bl	800c47c <__i2b>
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	f340 8088 	ble.w	800b6ca <_dtoa_r+0x8c2>
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4601      	mov	r1, r0
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f001 f81c 	bl	800c5fc <__pow5mult>
 800b5c4:	9b06      	ldr	r3, [sp, #24]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	f340 8081 	ble.w	800b6d0 <_dtoa_r+0x8c8>
 800b5ce:	f04f 0800 	mov.w	r8, #0
 800b5d2:	6933      	ldr	r3, [r6, #16]
 800b5d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5d8:	6918      	ldr	r0, [r3, #16]
 800b5da:	f000 feff 	bl	800c3dc <__hi0bits>
 800b5de:	f1c0 0020 	rsb	r0, r0, #32
 800b5e2:	9b05      	ldr	r3, [sp, #20]
 800b5e4:	4418      	add	r0, r3
 800b5e6:	f010 001f 	ands.w	r0, r0, #31
 800b5ea:	f000 8092 	beq.w	800b712 <_dtoa_r+0x90a>
 800b5ee:	f1c0 0320 	rsb	r3, r0, #32
 800b5f2:	2b04      	cmp	r3, #4
 800b5f4:	f340 808a 	ble.w	800b70c <_dtoa_r+0x904>
 800b5f8:	f1c0 001c 	rsb	r0, r0, #28
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	4403      	add	r3, r0
 800b600:	9304      	str	r3, [sp, #16]
 800b602:	9b05      	ldr	r3, [sp, #20]
 800b604:	4403      	add	r3, r0
 800b606:	4405      	add	r5, r0
 800b608:	9305      	str	r3, [sp, #20]
 800b60a:	9b04      	ldr	r3, [sp, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd07      	ble.n	800b620 <_dtoa_r+0x818>
 800b610:	ee18 1a10 	vmov	r1, s16
 800b614:	461a      	mov	r2, r3
 800b616:	4620      	mov	r0, r4
 800b618:	f001 f84a 	bl	800c6b0 <__lshift>
 800b61c:	ee08 0a10 	vmov	s16, r0
 800b620:	9b05      	ldr	r3, [sp, #20]
 800b622:	2b00      	cmp	r3, #0
 800b624:	dd05      	ble.n	800b632 <_dtoa_r+0x82a>
 800b626:	4631      	mov	r1, r6
 800b628:	461a      	mov	r2, r3
 800b62a:	4620      	mov	r0, r4
 800b62c:	f001 f840 	bl	800c6b0 <__lshift>
 800b630:	4606      	mov	r6, r0
 800b632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d06e      	beq.n	800b716 <_dtoa_r+0x90e>
 800b638:	ee18 0a10 	vmov	r0, s16
 800b63c:	4631      	mov	r1, r6
 800b63e:	f001 f8a7 	bl	800c790 <__mcmp>
 800b642:	2800      	cmp	r0, #0
 800b644:	da67      	bge.n	800b716 <_dtoa_r+0x90e>
 800b646:	9b00      	ldr	r3, [sp, #0]
 800b648:	3b01      	subs	r3, #1
 800b64a:	ee18 1a10 	vmov	r1, s16
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	220a      	movs	r2, #10
 800b652:	2300      	movs	r3, #0
 800b654:	4620      	mov	r0, r4
 800b656:	f000 fe31 	bl	800c2bc <__multadd>
 800b65a:	9b08      	ldr	r3, [sp, #32]
 800b65c:	ee08 0a10 	vmov	s16, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 81b1 	beq.w	800b9c8 <_dtoa_r+0xbc0>
 800b666:	2300      	movs	r3, #0
 800b668:	4639      	mov	r1, r7
 800b66a:	220a      	movs	r2, #10
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 fe25 	bl	800c2bc <__multadd>
 800b672:	9b02      	ldr	r3, [sp, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	4607      	mov	r7, r0
 800b678:	f300 808e 	bgt.w	800b798 <_dtoa_r+0x990>
 800b67c:	9b06      	ldr	r3, [sp, #24]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	dc51      	bgt.n	800b726 <_dtoa_r+0x91e>
 800b682:	e089      	b.n	800b798 <_dtoa_r+0x990>
 800b684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b68a:	e74b      	b.n	800b524 <_dtoa_r+0x71c>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	1e5e      	subs	r6, r3, #1
 800b690:	9b07      	ldr	r3, [sp, #28]
 800b692:	42b3      	cmp	r3, r6
 800b694:	bfbf      	itttt	lt
 800b696:	9b07      	ldrlt	r3, [sp, #28]
 800b698:	9607      	strlt	r6, [sp, #28]
 800b69a:	1af2      	sublt	r2, r6, r3
 800b69c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b69e:	bfb6      	itet	lt
 800b6a0:	189b      	addlt	r3, r3, r2
 800b6a2:	1b9e      	subge	r6, r3, r6
 800b6a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b6a6:	9b03      	ldr	r3, [sp, #12]
 800b6a8:	bfb8      	it	lt
 800b6aa:	2600      	movlt	r6, #0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bfb7      	itett	lt
 800b6b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b6b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b6b8:	1a9d      	sublt	r5, r3, r2
 800b6ba:	2300      	movlt	r3, #0
 800b6bc:	e734      	b.n	800b528 <_dtoa_r+0x720>
 800b6be:	9e07      	ldr	r6, [sp, #28]
 800b6c0:	9d04      	ldr	r5, [sp, #16]
 800b6c2:	9f08      	ldr	r7, [sp, #32]
 800b6c4:	e73b      	b.n	800b53e <_dtoa_r+0x736>
 800b6c6:	9a07      	ldr	r2, [sp, #28]
 800b6c8:	e767      	b.n	800b59a <_dtoa_r+0x792>
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	dc18      	bgt.n	800b702 <_dtoa_r+0x8fa>
 800b6d0:	f1ba 0f00 	cmp.w	sl, #0
 800b6d4:	d115      	bne.n	800b702 <_dtoa_r+0x8fa>
 800b6d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6da:	b993      	cbnz	r3, 800b702 <_dtoa_r+0x8fa>
 800b6dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6e0:	0d1b      	lsrs	r3, r3, #20
 800b6e2:	051b      	lsls	r3, r3, #20
 800b6e4:	b183      	cbz	r3, 800b708 <_dtoa_r+0x900>
 800b6e6:	9b04      	ldr	r3, [sp, #16]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	9304      	str	r3, [sp, #16]
 800b6ec:	9b05      	ldr	r3, [sp, #20]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	9305      	str	r3, [sp, #20]
 800b6f2:	f04f 0801 	mov.w	r8, #1
 800b6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f47f af6a 	bne.w	800b5d2 <_dtoa_r+0x7ca>
 800b6fe:	2001      	movs	r0, #1
 800b700:	e76f      	b.n	800b5e2 <_dtoa_r+0x7da>
 800b702:	f04f 0800 	mov.w	r8, #0
 800b706:	e7f6      	b.n	800b6f6 <_dtoa_r+0x8ee>
 800b708:	4698      	mov	r8, r3
 800b70a:	e7f4      	b.n	800b6f6 <_dtoa_r+0x8ee>
 800b70c:	f43f af7d 	beq.w	800b60a <_dtoa_r+0x802>
 800b710:	4618      	mov	r0, r3
 800b712:	301c      	adds	r0, #28
 800b714:	e772      	b.n	800b5fc <_dtoa_r+0x7f4>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dc37      	bgt.n	800b78c <_dtoa_r+0x984>
 800b71c:	9b06      	ldr	r3, [sp, #24]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	dd34      	ble.n	800b78c <_dtoa_r+0x984>
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	b96b      	cbnz	r3, 800b746 <_dtoa_r+0x93e>
 800b72a:	4631      	mov	r1, r6
 800b72c:	2205      	movs	r2, #5
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 fdc4 	bl	800c2bc <__multadd>
 800b734:	4601      	mov	r1, r0
 800b736:	4606      	mov	r6, r0
 800b738:	ee18 0a10 	vmov	r0, s16
 800b73c:	f001 f828 	bl	800c790 <__mcmp>
 800b740:	2800      	cmp	r0, #0
 800b742:	f73f adbb 	bgt.w	800b2bc <_dtoa_r+0x4b4>
 800b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b748:	9d01      	ldr	r5, [sp, #4]
 800b74a:	43db      	mvns	r3, r3
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	f04f 0800 	mov.w	r8, #0
 800b752:	4631      	mov	r1, r6
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fd8f 	bl	800c278 <_Bfree>
 800b75a:	2f00      	cmp	r7, #0
 800b75c:	f43f aea4 	beq.w	800b4a8 <_dtoa_r+0x6a0>
 800b760:	f1b8 0f00 	cmp.w	r8, #0
 800b764:	d005      	beq.n	800b772 <_dtoa_r+0x96a>
 800b766:	45b8      	cmp	r8, r7
 800b768:	d003      	beq.n	800b772 <_dtoa_r+0x96a>
 800b76a:	4641      	mov	r1, r8
 800b76c:	4620      	mov	r0, r4
 800b76e:	f000 fd83 	bl	800c278 <_Bfree>
 800b772:	4639      	mov	r1, r7
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fd7f 	bl	800c278 <_Bfree>
 800b77a:	e695      	b.n	800b4a8 <_dtoa_r+0x6a0>
 800b77c:	2600      	movs	r6, #0
 800b77e:	4637      	mov	r7, r6
 800b780:	e7e1      	b.n	800b746 <_dtoa_r+0x93e>
 800b782:	9700      	str	r7, [sp, #0]
 800b784:	4637      	mov	r7, r6
 800b786:	e599      	b.n	800b2bc <_dtoa_r+0x4b4>
 800b788:	40240000 	.word	0x40240000
 800b78c:	9b08      	ldr	r3, [sp, #32]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 80ca 	beq.w	800b928 <_dtoa_r+0xb20>
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	9302      	str	r3, [sp, #8]
 800b798:	2d00      	cmp	r5, #0
 800b79a:	dd05      	ble.n	800b7a8 <_dtoa_r+0x9a0>
 800b79c:	4639      	mov	r1, r7
 800b79e:	462a      	mov	r2, r5
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 ff85 	bl	800c6b0 <__lshift>
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ac:	d05b      	beq.n	800b866 <_dtoa_r+0xa5e>
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fd21 	bl	800c1f8 <_Balloc>
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	b928      	cbnz	r0, 800b7c6 <_dtoa_r+0x9be>
 800b7ba:	4b87      	ldr	r3, [pc, #540]	; (800b9d8 <_dtoa_r+0xbd0>)
 800b7bc:	4602      	mov	r2, r0
 800b7be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b7c2:	f7ff bb3b 	b.w	800ae3c <_dtoa_r+0x34>
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	3202      	adds	r2, #2
 800b7ca:	0092      	lsls	r2, r2, #2
 800b7cc:	f107 010c 	add.w	r1, r7, #12
 800b7d0:	300c      	adds	r0, #12
 800b7d2:	f7fd fc95 	bl	8009100 <memcpy>
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 ff68 	bl	800c6b0 <__lshift>
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	f103 0901 	add.w	r9, r3, #1
 800b7e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	9305      	str	r3, [sp, #20]
 800b7ee:	f00a 0301 	and.w	r3, sl, #1
 800b7f2:	46b8      	mov	r8, r7
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	ee18 0a10 	vmov	r0, s16
 800b7fe:	f7ff fa77 	bl	800acf0 <quorem>
 800b802:	4641      	mov	r1, r8
 800b804:	9002      	str	r0, [sp, #8]
 800b806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b80a:	ee18 0a10 	vmov	r0, s16
 800b80e:	f000 ffbf 	bl	800c790 <__mcmp>
 800b812:	463a      	mov	r2, r7
 800b814:	9003      	str	r0, [sp, #12]
 800b816:	4631      	mov	r1, r6
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 ffd5 	bl	800c7c8 <__mdiff>
 800b81e:	68c2      	ldr	r2, [r0, #12]
 800b820:	f109 3bff 	add.w	fp, r9, #4294967295
 800b824:	4605      	mov	r5, r0
 800b826:	bb02      	cbnz	r2, 800b86a <_dtoa_r+0xa62>
 800b828:	4601      	mov	r1, r0
 800b82a:	ee18 0a10 	vmov	r0, s16
 800b82e:	f000 ffaf 	bl	800c790 <__mcmp>
 800b832:	4602      	mov	r2, r0
 800b834:	4629      	mov	r1, r5
 800b836:	4620      	mov	r0, r4
 800b838:	9207      	str	r2, [sp, #28]
 800b83a:	f000 fd1d 	bl	800c278 <_Bfree>
 800b83e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b842:	ea43 0102 	orr.w	r1, r3, r2
 800b846:	9b04      	ldr	r3, [sp, #16]
 800b848:	430b      	orrs	r3, r1
 800b84a:	464d      	mov	r5, r9
 800b84c:	d10f      	bne.n	800b86e <_dtoa_r+0xa66>
 800b84e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b852:	d02a      	beq.n	800b8aa <_dtoa_r+0xaa2>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	dd02      	ble.n	800b860 <_dtoa_r+0xa58>
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b860:	f88b a000 	strb.w	sl, [fp]
 800b864:	e775      	b.n	800b752 <_dtoa_r+0x94a>
 800b866:	4638      	mov	r0, r7
 800b868:	e7ba      	b.n	800b7e0 <_dtoa_r+0x9d8>
 800b86a:	2201      	movs	r2, #1
 800b86c:	e7e2      	b.n	800b834 <_dtoa_r+0xa2c>
 800b86e:	9b03      	ldr	r3, [sp, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	db04      	blt.n	800b87e <_dtoa_r+0xa76>
 800b874:	9906      	ldr	r1, [sp, #24]
 800b876:	430b      	orrs	r3, r1
 800b878:	9904      	ldr	r1, [sp, #16]
 800b87a:	430b      	orrs	r3, r1
 800b87c:	d122      	bne.n	800b8c4 <_dtoa_r+0xabc>
 800b87e:	2a00      	cmp	r2, #0
 800b880:	ddee      	ble.n	800b860 <_dtoa_r+0xa58>
 800b882:	ee18 1a10 	vmov	r1, s16
 800b886:	2201      	movs	r2, #1
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 ff11 	bl	800c6b0 <__lshift>
 800b88e:	4631      	mov	r1, r6
 800b890:	ee08 0a10 	vmov	s16, r0
 800b894:	f000 ff7c 	bl	800c790 <__mcmp>
 800b898:	2800      	cmp	r0, #0
 800b89a:	dc03      	bgt.n	800b8a4 <_dtoa_r+0xa9c>
 800b89c:	d1e0      	bne.n	800b860 <_dtoa_r+0xa58>
 800b89e:	f01a 0f01 	tst.w	sl, #1
 800b8a2:	d0dd      	beq.n	800b860 <_dtoa_r+0xa58>
 800b8a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8a8:	d1d7      	bne.n	800b85a <_dtoa_r+0xa52>
 800b8aa:	2339      	movs	r3, #57	; 0x39
 800b8ac:	f88b 3000 	strb.w	r3, [fp]
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	461d      	mov	r5, r3
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8ba:	2a39      	cmp	r2, #57	; 0x39
 800b8bc:	d071      	beq.n	800b9a2 <_dtoa_r+0xb9a>
 800b8be:	3201      	adds	r2, #1
 800b8c0:	701a      	strb	r2, [r3, #0]
 800b8c2:	e746      	b.n	800b752 <_dtoa_r+0x94a>
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	dd07      	ble.n	800b8d8 <_dtoa_r+0xad0>
 800b8c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8cc:	d0ed      	beq.n	800b8aa <_dtoa_r+0xaa2>
 800b8ce:	f10a 0301 	add.w	r3, sl, #1
 800b8d2:	f88b 3000 	strb.w	r3, [fp]
 800b8d6:	e73c      	b.n	800b752 <_dtoa_r+0x94a>
 800b8d8:	9b05      	ldr	r3, [sp, #20]
 800b8da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b8de:	4599      	cmp	r9, r3
 800b8e0:	d047      	beq.n	800b972 <_dtoa_r+0xb6a>
 800b8e2:	ee18 1a10 	vmov	r1, s16
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	220a      	movs	r2, #10
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fce6 	bl	800c2bc <__multadd>
 800b8f0:	45b8      	cmp	r8, r7
 800b8f2:	ee08 0a10 	vmov	s16, r0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	f04f 020a 	mov.w	r2, #10
 800b8fe:	4641      	mov	r1, r8
 800b900:	4620      	mov	r0, r4
 800b902:	d106      	bne.n	800b912 <_dtoa_r+0xb0a>
 800b904:	f000 fcda 	bl	800c2bc <__multadd>
 800b908:	4680      	mov	r8, r0
 800b90a:	4607      	mov	r7, r0
 800b90c:	f109 0901 	add.w	r9, r9, #1
 800b910:	e772      	b.n	800b7f8 <_dtoa_r+0x9f0>
 800b912:	f000 fcd3 	bl	800c2bc <__multadd>
 800b916:	4639      	mov	r1, r7
 800b918:	4680      	mov	r8, r0
 800b91a:	2300      	movs	r3, #0
 800b91c:	220a      	movs	r2, #10
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 fccc 	bl	800c2bc <__multadd>
 800b924:	4607      	mov	r7, r0
 800b926:	e7f1      	b.n	800b90c <_dtoa_r+0xb04>
 800b928:	9b03      	ldr	r3, [sp, #12]
 800b92a:	9302      	str	r3, [sp, #8]
 800b92c:	9d01      	ldr	r5, [sp, #4]
 800b92e:	ee18 0a10 	vmov	r0, s16
 800b932:	4631      	mov	r1, r6
 800b934:	f7ff f9dc 	bl	800acf0 <quorem>
 800b938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b93c:	9b01      	ldr	r3, [sp, #4]
 800b93e:	f805 ab01 	strb.w	sl, [r5], #1
 800b942:	1aea      	subs	r2, r5, r3
 800b944:	9b02      	ldr	r3, [sp, #8]
 800b946:	4293      	cmp	r3, r2
 800b948:	dd09      	ble.n	800b95e <_dtoa_r+0xb56>
 800b94a:	ee18 1a10 	vmov	r1, s16
 800b94e:	2300      	movs	r3, #0
 800b950:	220a      	movs	r2, #10
 800b952:	4620      	mov	r0, r4
 800b954:	f000 fcb2 	bl	800c2bc <__multadd>
 800b958:	ee08 0a10 	vmov	s16, r0
 800b95c:	e7e7      	b.n	800b92e <_dtoa_r+0xb26>
 800b95e:	9b02      	ldr	r3, [sp, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	bfc8      	it	gt
 800b964:	461d      	movgt	r5, r3
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	bfd8      	it	le
 800b96a:	2501      	movle	r5, #1
 800b96c:	441d      	add	r5, r3
 800b96e:	f04f 0800 	mov.w	r8, #0
 800b972:	ee18 1a10 	vmov	r1, s16
 800b976:	2201      	movs	r2, #1
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 fe99 	bl	800c6b0 <__lshift>
 800b97e:	4631      	mov	r1, r6
 800b980:	ee08 0a10 	vmov	s16, r0
 800b984:	f000 ff04 	bl	800c790 <__mcmp>
 800b988:	2800      	cmp	r0, #0
 800b98a:	dc91      	bgt.n	800b8b0 <_dtoa_r+0xaa8>
 800b98c:	d102      	bne.n	800b994 <_dtoa_r+0xb8c>
 800b98e:	f01a 0f01 	tst.w	sl, #1
 800b992:	d18d      	bne.n	800b8b0 <_dtoa_r+0xaa8>
 800b994:	462b      	mov	r3, r5
 800b996:	461d      	mov	r5, r3
 800b998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b99c:	2a30      	cmp	r2, #48	; 0x30
 800b99e:	d0fa      	beq.n	800b996 <_dtoa_r+0xb8e>
 800b9a0:	e6d7      	b.n	800b752 <_dtoa_r+0x94a>
 800b9a2:	9a01      	ldr	r2, [sp, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d184      	bne.n	800b8b2 <_dtoa_r+0xaaa>
 800b9a8:	9b00      	ldr	r3, [sp, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	2331      	movs	r3, #49	; 0x31
 800b9b0:	7013      	strb	r3, [r2, #0]
 800b9b2:	e6ce      	b.n	800b752 <_dtoa_r+0x94a>
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <_dtoa_r+0xbd4>)
 800b9b6:	f7ff ba95 	b.w	800aee4 <_dtoa_r+0xdc>
 800b9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f47f aa6e 	bne.w	800ae9e <_dtoa_r+0x96>
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <_dtoa_r+0xbd8>)
 800b9c4:	f7ff ba8e 	b.w	800aee4 <_dtoa_r+0xdc>
 800b9c8:	9b02      	ldr	r3, [sp, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dcae      	bgt.n	800b92c <_dtoa_r+0xb24>
 800b9ce:	9b06      	ldr	r3, [sp, #24]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	f73f aea8 	bgt.w	800b726 <_dtoa_r+0x91e>
 800b9d6:	e7a9      	b.n	800b92c <_dtoa_r+0xb24>
 800b9d8:	0800dbcf 	.word	0x0800dbcf
 800b9dc:	0800dad8 	.word	0x0800dad8
 800b9e0:	0800db50 	.word	0x0800db50

0800b9e4 <rshift>:
 800b9e4:	6903      	ldr	r3, [r0, #16]
 800b9e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9f2:	f100 0414 	add.w	r4, r0, #20
 800b9f6:	dd45      	ble.n	800ba84 <rshift+0xa0>
 800b9f8:	f011 011f 	ands.w	r1, r1, #31
 800b9fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba04:	d10c      	bne.n	800ba20 <rshift+0x3c>
 800ba06:	f100 0710 	add.w	r7, r0, #16
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	42b1      	cmp	r1, r6
 800ba0e:	d334      	bcc.n	800ba7a <rshift+0x96>
 800ba10:	1a9b      	subs	r3, r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	1eea      	subs	r2, r5, #3
 800ba16:	4296      	cmp	r6, r2
 800ba18:	bf38      	it	cc
 800ba1a:	2300      	movcc	r3, #0
 800ba1c:	4423      	add	r3, r4
 800ba1e:	e015      	b.n	800ba4c <rshift+0x68>
 800ba20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba24:	f1c1 0820 	rsb	r8, r1, #32
 800ba28:	40cf      	lsrs	r7, r1
 800ba2a:	f105 0e04 	add.w	lr, r5, #4
 800ba2e:	46a1      	mov	r9, r4
 800ba30:	4576      	cmp	r6, lr
 800ba32:	46f4      	mov	ip, lr
 800ba34:	d815      	bhi.n	800ba62 <rshift+0x7e>
 800ba36:	1a9a      	subs	r2, r3, r2
 800ba38:	0092      	lsls	r2, r2, #2
 800ba3a:	3a04      	subs	r2, #4
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	42ae      	cmp	r6, r5
 800ba40:	bf38      	it	cc
 800ba42:	2200      	movcc	r2, #0
 800ba44:	18a3      	adds	r3, r4, r2
 800ba46:	50a7      	str	r7, [r4, r2]
 800ba48:	b107      	cbz	r7, 800ba4c <rshift+0x68>
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	1b1a      	subs	r2, r3, r4
 800ba4e:	42a3      	cmp	r3, r4
 800ba50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba54:	bf08      	it	eq
 800ba56:	2300      	moveq	r3, #0
 800ba58:	6102      	str	r2, [r0, #16]
 800ba5a:	bf08      	it	eq
 800ba5c:	6143      	streq	r3, [r0, #20]
 800ba5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba62:	f8dc c000 	ldr.w	ip, [ip]
 800ba66:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba6a:	ea4c 0707 	orr.w	r7, ip, r7
 800ba6e:	f849 7b04 	str.w	r7, [r9], #4
 800ba72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba76:	40cf      	lsrs	r7, r1
 800ba78:	e7da      	b.n	800ba30 <rshift+0x4c>
 800ba7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba82:	e7c3      	b.n	800ba0c <rshift+0x28>
 800ba84:	4623      	mov	r3, r4
 800ba86:	e7e1      	b.n	800ba4c <rshift+0x68>

0800ba88 <__hexdig_fun>:
 800ba88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d802      	bhi.n	800ba96 <__hexdig_fun+0xe>
 800ba90:	3820      	subs	r0, #32
 800ba92:	b2c0      	uxtb	r0, r0
 800ba94:	4770      	bx	lr
 800ba96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	d801      	bhi.n	800baa2 <__hexdig_fun+0x1a>
 800ba9e:	3847      	subs	r0, #71	; 0x47
 800baa0:	e7f7      	b.n	800ba92 <__hexdig_fun+0xa>
 800baa2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800baa6:	2b05      	cmp	r3, #5
 800baa8:	d801      	bhi.n	800baae <__hexdig_fun+0x26>
 800baaa:	3827      	subs	r0, #39	; 0x27
 800baac:	e7f1      	b.n	800ba92 <__hexdig_fun+0xa>
 800baae:	2000      	movs	r0, #0
 800bab0:	4770      	bx	lr
	...

0800bab4 <__gethex>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	ed2d 8b02 	vpush	{d8}
 800babc:	b089      	sub	sp, #36	; 0x24
 800babe:	ee08 0a10 	vmov	s16, r0
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	4bb4      	ldr	r3, [pc, #720]	; (800bd98 <__gethex+0x2e4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	4618      	mov	r0, r3
 800bacc:	468b      	mov	fp, r1
 800bace:	4690      	mov	r8, r2
 800bad0:	f7f4 fb90 	bl	80001f4 <strlen>
 800bad4:	9b01      	ldr	r3, [sp, #4]
 800bad6:	f8db 2000 	ldr.w	r2, [fp]
 800bada:	4403      	add	r3, r0
 800badc:	4682      	mov	sl, r0
 800bade:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bae2:	9305      	str	r3, [sp, #20]
 800bae4:	1c93      	adds	r3, r2, #2
 800bae6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800baea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800baee:	32fe      	adds	r2, #254	; 0xfe
 800baf0:	18d1      	adds	r1, r2, r3
 800baf2:	461f      	mov	r7, r3
 800baf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800baf8:	9100      	str	r1, [sp, #0]
 800bafa:	2830      	cmp	r0, #48	; 0x30
 800bafc:	d0f8      	beq.n	800baf0 <__gethex+0x3c>
 800bafe:	f7ff ffc3 	bl	800ba88 <__hexdig_fun>
 800bb02:	4604      	mov	r4, r0
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d13a      	bne.n	800bb7e <__gethex+0xca>
 800bb08:	9901      	ldr	r1, [sp, #4]
 800bb0a:	4652      	mov	r2, sl
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7fe f9aa 	bl	8009e66 <strncmp>
 800bb12:	4605      	mov	r5, r0
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d168      	bne.n	800bbea <__gethex+0x136>
 800bb18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bb1c:	eb07 060a 	add.w	r6, r7, sl
 800bb20:	f7ff ffb2 	bl	800ba88 <__hexdig_fun>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d062      	beq.n	800bbee <__gethex+0x13a>
 800bb28:	4633      	mov	r3, r6
 800bb2a:	7818      	ldrb	r0, [r3, #0]
 800bb2c:	2830      	cmp	r0, #48	; 0x30
 800bb2e:	461f      	mov	r7, r3
 800bb30:	f103 0301 	add.w	r3, r3, #1
 800bb34:	d0f9      	beq.n	800bb2a <__gethex+0x76>
 800bb36:	f7ff ffa7 	bl	800ba88 <__hexdig_fun>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	fab0 f480 	clz	r4, r0
 800bb40:	0964      	lsrs	r4, r4, #5
 800bb42:	4635      	mov	r5, r6
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	463a      	mov	r2, r7
 800bb48:	4616      	mov	r6, r2
 800bb4a:	3201      	adds	r2, #1
 800bb4c:	7830      	ldrb	r0, [r6, #0]
 800bb4e:	f7ff ff9b 	bl	800ba88 <__hexdig_fun>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1f8      	bne.n	800bb48 <__gethex+0x94>
 800bb56:	9901      	ldr	r1, [sp, #4]
 800bb58:	4652      	mov	r2, sl
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7fe f983 	bl	8009e66 <strncmp>
 800bb60:	b980      	cbnz	r0, 800bb84 <__gethex+0xd0>
 800bb62:	b94d      	cbnz	r5, 800bb78 <__gethex+0xc4>
 800bb64:	eb06 050a 	add.w	r5, r6, sl
 800bb68:	462a      	mov	r2, r5
 800bb6a:	4616      	mov	r6, r2
 800bb6c:	3201      	adds	r2, #1
 800bb6e:	7830      	ldrb	r0, [r6, #0]
 800bb70:	f7ff ff8a 	bl	800ba88 <__hexdig_fun>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d1f8      	bne.n	800bb6a <__gethex+0xb6>
 800bb78:	1bad      	subs	r5, r5, r6
 800bb7a:	00ad      	lsls	r5, r5, #2
 800bb7c:	e004      	b.n	800bb88 <__gethex+0xd4>
 800bb7e:	2400      	movs	r4, #0
 800bb80:	4625      	mov	r5, r4
 800bb82:	e7e0      	b.n	800bb46 <__gethex+0x92>
 800bb84:	2d00      	cmp	r5, #0
 800bb86:	d1f7      	bne.n	800bb78 <__gethex+0xc4>
 800bb88:	7833      	ldrb	r3, [r6, #0]
 800bb8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb8e:	2b50      	cmp	r3, #80	; 0x50
 800bb90:	d13b      	bne.n	800bc0a <__gethex+0x156>
 800bb92:	7873      	ldrb	r3, [r6, #1]
 800bb94:	2b2b      	cmp	r3, #43	; 0x2b
 800bb96:	d02c      	beq.n	800bbf2 <__gethex+0x13e>
 800bb98:	2b2d      	cmp	r3, #45	; 0x2d
 800bb9a:	d02e      	beq.n	800bbfa <__gethex+0x146>
 800bb9c:	1c71      	adds	r1, r6, #1
 800bb9e:	f04f 0900 	mov.w	r9, #0
 800bba2:	7808      	ldrb	r0, [r1, #0]
 800bba4:	f7ff ff70 	bl	800ba88 <__hexdig_fun>
 800bba8:	1e43      	subs	r3, r0, #1
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b18      	cmp	r3, #24
 800bbae:	d82c      	bhi.n	800bc0a <__gethex+0x156>
 800bbb0:	f1a0 0210 	sub.w	r2, r0, #16
 800bbb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbb8:	f7ff ff66 	bl	800ba88 <__hexdig_fun>
 800bbbc:	1e43      	subs	r3, r0, #1
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b18      	cmp	r3, #24
 800bbc2:	d91d      	bls.n	800bc00 <__gethex+0x14c>
 800bbc4:	f1b9 0f00 	cmp.w	r9, #0
 800bbc8:	d000      	beq.n	800bbcc <__gethex+0x118>
 800bbca:	4252      	negs	r2, r2
 800bbcc:	4415      	add	r5, r2
 800bbce:	f8cb 1000 	str.w	r1, [fp]
 800bbd2:	b1e4      	cbz	r4, 800bc0e <__gethex+0x15a>
 800bbd4:	9b00      	ldr	r3, [sp, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bf14      	ite	ne
 800bbda:	2700      	movne	r7, #0
 800bbdc:	2706      	moveq	r7, #6
 800bbde:	4638      	mov	r0, r7
 800bbe0:	b009      	add	sp, #36	; 0x24
 800bbe2:	ecbd 8b02 	vpop	{d8}
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	463e      	mov	r6, r7
 800bbec:	4625      	mov	r5, r4
 800bbee:	2401      	movs	r4, #1
 800bbf0:	e7ca      	b.n	800bb88 <__gethex+0xd4>
 800bbf2:	f04f 0900 	mov.w	r9, #0
 800bbf6:	1cb1      	adds	r1, r6, #2
 800bbf8:	e7d3      	b.n	800bba2 <__gethex+0xee>
 800bbfa:	f04f 0901 	mov.w	r9, #1
 800bbfe:	e7fa      	b.n	800bbf6 <__gethex+0x142>
 800bc00:	230a      	movs	r3, #10
 800bc02:	fb03 0202 	mla	r2, r3, r2, r0
 800bc06:	3a10      	subs	r2, #16
 800bc08:	e7d4      	b.n	800bbb4 <__gethex+0x100>
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	e7df      	b.n	800bbce <__gethex+0x11a>
 800bc0e:	1bf3      	subs	r3, r6, r7
 800bc10:	3b01      	subs	r3, #1
 800bc12:	4621      	mov	r1, r4
 800bc14:	2b07      	cmp	r3, #7
 800bc16:	dc0b      	bgt.n	800bc30 <__gethex+0x17c>
 800bc18:	ee18 0a10 	vmov	r0, s16
 800bc1c:	f000 faec 	bl	800c1f8 <_Balloc>
 800bc20:	4604      	mov	r4, r0
 800bc22:	b940      	cbnz	r0, 800bc36 <__gethex+0x182>
 800bc24:	4b5d      	ldr	r3, [pc, #372]	; (800bd9c <__gethex+0x2e8>)
 800bc26:	4602      	mov	r2, r0
 800bc28:	21de      	movs	r1, #222	; 0xde
 800bc2a:	485d      	ldr	r0, [pc, #372]	; (800bda0 <__gethex+0x2ec>)
 800bc2c:	f001 faca 	bl	800d1c4 <__assert_func>
 800bc30:	3101      	adds	r1, #1
 800bc32:	105b      	asrs	r3, r3, #1
 800bc34:	e7ee      	b.n	800bc14 <__gethex+0x160>
 800bc36:	f100 0914 	add.w	r9, r0, #20
 800bc3a:	f04f 0b00 	mov.w	fp, #0
 800bc3e:	f1ca 0301 	rsb	r3, sl, #1
 800bc42:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc46:	f8cd b000 	str.w	fp, [sp]
 800bc4a:	9306      	str	r3, [sp, #24]
 800bc4c:	42b7      	cmp	r7, r6
 800bc4e:	d340      	bcc.n	800bcd2 <__gethex+0x21e>
 800bc50:	9802      	ldr	r0, [sp, #8]
 800bc52:	9b00      	ldr	r3, [sp, #0]
 800bc54:	f840 3b04 	str.w	r3, [r0], #4
 800bc58:	eba0 0009 	sub.w	r0, r0, r9
 800bc5c:	1080      	asrs	r0, r0, #2
 800bc5e:	0146      	lsls	r6, r0, #5
 800bc60:	6120      	str	r0, [r4, #16]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fbba 	bl	800c3dc <__hi0bits>
 800bc68:	1a30      	subs	r0, r6, r0
 800bc6a:	f8d8 6000 	ldr.w	r6, [r8]
 800bc6e:	42b0      	cmp	r0, r6
 800bc70:	dd63      	ble.n	800bd3a <__gethex+0x286>
 800bc72:	1b87      	subs	r7, r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	4620      	mov	r0, r4
 800bc78:	f000 ff5e 	bl	800cb38 <__any_on>
 800bc7c:	4682      	mov	sl, r0
 800bc7e:	b1a8      	cbz	r0, 800bcac <__gethex+0x1f8>
 800bc80:	1e7b      	subs	r3, r7, #1
 800bc82:	1159      	asrs	r1, r3, #5
 800bc84:	f003 021f 	and.w	r2, r3, #31
 800bc88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc8c:	f04f 0a01 	mov.w	sl, #1
 800bc90:	fa0a f202 	lsl.w	r2, sl, r2
 800bc94:	420a      	tst	r2, r1
 800bc96:	d009      	beq.n	800bcac <__gethex+0x1f8>
 800bc98:	4553      	cmp	r3, sl
 800bc9a:	dd05      	ble.n	800bca8 <__gethex+0x1f4>
 800bc9c:	1eb9      	subs	r1, r7, #2
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 ff4a 	bl	800cb38 <__any_on>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d145      	bne.n	800bd34 <__gethex+0x280>
 800bca8:	f04f 0a02 	mov.w	sl, #2
 800bcac:	4639      	mov	r1, r7
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7ff fe98 	bl	800b9e4 <rshift>
 800bcb4:	443d      	add	r5, r7
 800bcb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcba:	42ab      	cmp	r3, r5
 800bcbc:	da4c      	bge.n	800bd58 <__gethex+0x2a4>
 800bcbe:	ee18 0a10 	vmov	r0, s16
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	f000 fad8 	bl	800c278 <_Bfree>
 800bcc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcca:	2300      	movs	r3, #0
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	27a3      	movs	r7, #163	; 0xa3
 800bcd0:	e785      	b.n	800bbde <__gethex+0x12a>
 800bcd2:	1e73      	subs	r3, r6, #1
 800bcd4:	9a05      	ldr	r2, [sp, #20]
 800bcd6:	9303      	str	r3, [sp, #12]
 800bcd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d019      	beq.n	800bd14 <__gethex+0x260>
 800bce0:	f1bb 0f20 	cmp.w	fp, #32
 800bce4:	d107      	bne.n	800bcf6 <__gethex+0x242>
 800bce6:	9b02      	ldr	r3, [sp, #8]
 800bce8:	9a00      	ldr	r2, [sp, #0]
 800bcea:	f843 2b04 	str.w	r2, [r3], #4
 800bcee:	9302      	str	r3, [sp, #8]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	469b      	mov	fp, r3
 800bcf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bcfa:	f7ff fec5 	bl	800ba88 <__hexdig_fun>
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	f000 000f 	and.w	r0, r0, #15
 800bd04:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd08:	4303      	orrs	r3, r0
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	f10b 0b04 	add.w	fp, fp, #4
 800bd10:	9b03      	ldr	r3, [sp, #12]
 800bd12:	e00d      	b.n	800bd30 <__gethex+0x27c>
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	9a06      	ldr	r2, [sp, #24]
 800bd18:	4413      	add	r3, r2
 800bd1a:	42bb      	cmp	r3, r7
 800bd1c:	d3e0      	bcc.n	800bce0 <__gethex+0x22c>
 800bd1e:	4618      	mov	r0, r3
 800bd20:	9901      	ldr	r1, [sp, #4]
 800bd22:	9307      	str	r3, [sp, #28]
 800bd24:	4652      	mov	r2, sl
 800bd26:	f7fe f89e 	bl	8009e66 <strncmp>
 800bd2a:	9b07      	ldr	r3, [sp, #28]
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d1d7      	bne.n	800bce0 <__gethex+0x22c>
 800bd30:	461e      	mov	r6, r3
 800bd32:	e78b      	b.n	800bc4c <__gethex+0x198>
 800bd34:	f04f 0a03 	mov.w	sl, #3
 800bd38:	e7b8      	b.n	800bcac <__gethex+0x1f8>
 800bd3a:	da0a      	bge.n	800bd52 <__gethex+0x29e>
 800bd3c:	1a37      	subs	r7, r6, r0
 800bd3e:	4621      	mov	r1, r4
 800bd40:	ee18 0a10 	vmov	r0, s16
 800bd44:	463a      	mov	r2, r7
 800bd46:	f000 fcb3 	bl	800c6b0 <__lshift>
 800bd4a:	1bed      	subs	r5, r5, r7
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	f100 0914 	add.w	r9, r0, #20
 800bd52:	f04f 0a00 	mov.w	sl, #0
 800bd56:	e7ae      	b.n	800bcb6 <__gethex+0x202>
 800bd58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd5c:	42a8      	cmp	r0, r5
 800bd5e:	dd72      	ble.n	800be46 <__gethex+0x392>
 800bd60:	1b45      	subs	r5, r0, r5
 800bd62:	42ae      	cmp	r6, r5
 800bd64:	dc36      	bgt.n	800bdd4 <__gethex+0x320>
 800bd66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d02a      	beq.n	800bdc4 <__gethex+0x310>
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d02c      	beq.n	800bdcc <__gethex+0x318>
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d11c      	bne.n	800bdb0 <__gethex+0x2fc>
 800bd76:	42ae      	cmp	r6, r5
 800bd78:	d11a      	bne.n	800bdb0 <__gethex+0x2fc>
 800bd7a:	2e01      	cmp	r6, #1
 800bd7c:	d112      	bne.n	800bda4 <__gethex+0x2f0>
 800bd7e:	9a04      	ldr	r2, [sp, #16]
 800bd80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	2301      	movs	r3, #1
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	f8c9 3000 	str.w	r3, [r9]
 800bd8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd90:	2762      	movs	r7, #98	; 0x62
 800bd92:	601c      	str	r4, [r3, #0]
 800bd94:	e723      	b.n	800bbde <__gethex+0x12a>
 800bd96:	bf00      	nop
 800bd98:	0800dc48 	.word	0x0800dc48
 800bd9c:	0800dbcf 	.word	0x0800dbcf
 800bda0:	0800dbe0 	.word	0x0800dbe0
 800bda4:	1e71      	subs	r1, r6, #1
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 fec6 	bl	800cb38 <__any_on>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d1e6      	bne.n	800bd7e <__gethex+0x2ca>
 800bdb0:	ee18 0a10 	vmov	r0, s16
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	f000 fa5f 	bl	800c278 <_Bfree>
 800bdba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	2750      	movs	r7, #80	; 0x50
 800bdc2:	e70c      	b.n	800bbde <__gethex+0x12a>
 800bdc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1f2      	bne.n	800bdb0 <__gethex+0x2fc>
 800bdca:	e7d8      	b.n	800bd7e <__gethex+0x2ca>
 800bdcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1d5      	bne.n	800bd7e <__gethex+0x2ca>
 800bdd2:	e7ed      	b.n	800bdb0 <__gethex+0x2fc>
 800bdd4:	1e6f      	subs	r7, r5, #1
 800bdd6:	f1ba 0f00 	cmp.w	sl, #0
 800bdda:	d131      	bne.n	800be40 <__gethex+0x38c>
 800bddc:	b127      	cbz	r7, 800bde8 <__gethex+0x334>
 800bdde:	4639      	mov	r1, r7
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 fea9 	bl	800cb38 <__any_on>
 800bde6:	4682      	mov	sl, r0
 800bde8:	117b      	asrs	r3, r7, #5
 800bdea:	2101      	movs	r1, #1
 800bdec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bdf0:	f007 071f 	and.w	r7, r7, #31
 800bdf4:	fa01 f707 	lsl.w	r7, r1, r7
 800bdf8:	421f      	tst	r7, r3
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	bf18      	it	ne
 800be00:	f04a 0a02 	orrne.w	sl, sl, #2
 800be04:	1b76      	subs	r6, r6, r5
 800be06:	f7ff fded 	bl	800b9e4 <rshift>
 800be0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be0e:	2702      	movs	r7, #2
 800be10:	f1ba 0f00 	cmp.w	sl, #0
 800be14:	d048      	beq.n	800bea8 <__gethex+0x3f4>
 800be16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d015      	beq.n	800be4a <__gethex+0x396>
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d017      	beq.n	800be52 <__gethex+0x39e>
 800be22:	2b01      	cmp	r3, #1
 800be24:	d109      	bne.n	800be3a <__gethex+0x386>
 800be26:	f01a 0f02 	tst.w	sl, #2
 800be2a:	d006      	beq.n	800be3a <__gethex+0x386>
 800be2c:	f8d9 0000 	ldr.w	r0, [r9]
 800be30:	ea4a 0a00 	orr.w	sl, sl, r0
 800be34:	f01a 0f01 	tst.w	sl, #1
 800be38:	d10e      	bne.n	800be58 <__gethex+0x3a4>
 800be3a:	f047 0710 	orr.w	r7, r7, #16
 800be3e:	e033      	b.n	800bea8 <__gethex+0x3f4>
 800be40:	f04f 0a01 	mov.w	sl, #1
 800be44:	e7d0      	b.n	800bde8 <__gethex+0x334>
 800be46:	2701      	movs	r7, #1
 800be48:	e7e2      	b.n	800be10 <__gethex+0x35c>
 800be4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be4c:	f1c3 0301 	rsb	r3, r3, #1
 800be50:	9315      	str	r3, [sp, #84]	; 0x54
 800be52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be54:	2b00      	cmp	r3, #0
 800be56:	d0f0      	beq.n	800be3a <__gethex+0x386>
 800be58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be5c:	f104 0314 	add.w	r3, r4, #20
 800be60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be68:	f04f 0c00 	mov.w	ip, #0
 800be6c:	4618      	mov	r0, r3
 800be6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be72:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be76:	d01c      	beq.n	800beb2 <__gethex+0x3fe>
 800be78:	3201      	adds	r2, #1
 800be7a:	6002      	str	r2, [r0, #0]
 800be7c:	2f02      	cmp	r7, #2
 800be7e:	f104 0314 	add.w	r3, r4, #20
 800be82:	d13f      	bne.n	800bf04 <__gethex+0x450>
 800be84:	f8d8 2000 	ldr.w	r2, [r8]
 800be88:	3a01      	subs	r2, #1
 800be8a:	42b2      	cmp	r2, r6
 800be8c:	d10a      	bne.n	800bea4 <__gethex+0x3f0>
 800be8e:	1171      	asrs	r1, r6, #5
 800be90:	2201      	movs	r2, #1
 800be92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be96:	f006 061f 	and.w	r6, r6, #31
 800be9a:	fa02 f606 	lsl.w	r6, r2, r6
 800be9e:	421e      	tst	r6, r3
 800bea0:	bf18      	it	ne
 800bea2:	4617      	movne	r7, r2
 800bea4:	f047 0720 	orr.w	r7, r7, #32
 800bea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800beaa:	601c      	str	r4, [r3, #0]
 800beac:	9b04      	ldr	r3, [sp, #16]
 800beae:	601d      	str	r5, [r3, #0]
 800beb0:	e695      	b.n	800bbde <__gethex+0x12a>
 800beb2:	4299      	cmp	r1, r3
 800beb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800beb8:	d8d8      	bhi.n	800be6c <__gethex+0x3b8>
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	459b      	cmp	fp, r3
 800bebe:	db19      	blt.n	800bef4 <__gethex+0x440>
 800bec0:	6861      	ldr	r1, [r4, #4]
 800bec2:	ee18 0a10 	vmov	r0, s16
 800bec6:	3101      	adds	r1, #1
 800bec8:	f000 f996 	bl	800c1f8 <_Balloc>
 800becc:	4681      	mov	r9, r0
 800bece:	b918      	cbnz	r0, 800bed8 <__gethex+0x424>
 800bed0:	4b1a      	ldr	r3, [pc, #104]	; (800bf3c <__gethex+0x488>)
 800bed2:	4602      	mov	r2, r0
 800bed4:	2184      	movs	r1, #132	; 0x84
 800bed6:	e6a8      	b.n	800bc2a <__gethex+0x176>
 800bed8:	6922      	ldr	r2, [r4, #16]
 800beda:	3202      	adds	r2, #2
 800bedc:	f104 010c 	add.w	r1, r4, #12
 800bee0:	0092      	lsls	r2, r2, #2
 800bee2:	300c      	adds	r0, #12
 800bee4:	f7fd f90c 	bl	8009100 <memcpy>
 800bee8:	4621      	mov	r1, r4
 800beea:	ee18 0a10 	vmov	r0, s16
 800beee:	f000 f9c3 	bl	800c278 <_Bfree>
 800bef2:	464c      	mov	r4, r9
 800bef4:	6923      	ldr	r3, [r4, #16]
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800befc:	6122      	str	r2, [r4, #16]
 800befe:	2201      	movs	r2, #1
 800bf00:	615a      	str	r2, [r3, #20]
 800bf02:	e7bb      	b.n	800be7c <__gethex+0x3c8>
 800bf04:	6922      	ldr	r2, [r4, #16]
 800bf06:	455a      	cmp	r2, fp
 800bf08:	dd0b      	ble.n	800bf22 <__gethex+0x46e>
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f7ff fd69 	bl	800b9e4 <rshift>
 800bf12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf16:	3501      	adds	r5, #1
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	f6ff aed0 	blt.w	800bcbe <__gethex+0x20a>
 800bf1e:	2701      	movs	r7, #1
 800bf20:	e7c0      	b.n	800bea4 <__gethex+0x3f0>
 800bf22:	f016 061f 	ands.w	r6, r6, #31
 800bf26:	d0fa      	beq.n	800bf1e <__gethex+0x46a>
 800bf28:	4453      	add	r3, sl
 800bf2a:	f1c6 0620 	rsb	r6, r6, #32
 800bf2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf32:	f000 fa53 	bl	800c3dc <__hi0bits>
 800bf36:	42b0      	cmp	r0, r6
 800bf38:	dbe7      	blt.n	800bf0a <__gethex+0x456>
 800bf3a:	e7f0      	b.n	800bf1e <__gethex+0x46a>
 800bf3c:	0800dbcf 	.word	0x0800dbcf

0800bf40 <L_shift>:
 800bf40:	f1c2 0208 	rsb	r2, r2, #8
 800bf44:	0092      	lsls	r2, r2, #2
 800bf46:	b570      	push	{r4, r5, r6, lr}
 800bf48:	f1c2 0620 	rsb	r6, r2, #32
 800bf4c:	6843      	ldr	r3, [r0, #4]
 800bf4e:	6804      	ldr	r4, [r0, #0]
 800bf50:	fa03 f506 	lsl.w	r5, r3, r6
 800bf54:	432c      	orrs	r4, r5
 800bf56:	40d3      	lsrs	r3, r2
 800bf58:	6004      	str	r4, [r0, #0]
 800bf5a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf5e:	4288      	cmp	r0, r1
 800bf60:	d3f4      	bcc.n	800bf4c <L_shift+0xc>
 800bf62:	bd70      	pop	{r4, r5, r6, pc}

0800bf64 <__match>:
 800bf64:	b530      	push	{r4, r5, lr}
 800bf66:	6803      	ldr	r3, [r0, #0]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf6e:	b914      	cbnz	r4, 800bf76 <__match+0x12>
 800bf70:	6003      	str	r3, [r0, #0]
 800bf72:	2001      	movs	r0, #1
 800bf74:	bd30      	pop	{r4, r5, pc}
 800bf76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf7e:	2d19      	cmp	r5, #25
 800bf80:	bf98      	it	ls
 800bf82:	3220      	addls	r2, #32
 800bf84:	42a2      	cmp	r2, r4
 800bf86:	d0f0      	beq.n	800bf6a <__match+0x6>
 800bf88:	2000      	movs	r0, #0
 800bf8a:	e7f3      	b.n	800bf74 <__match+0x10>

0800bf8c <__hexnan>:
 800bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	680b      	ldr	r3, [r1, #0]
 800bf92:	115e      	asrs	r6, r3, #5
 800bf94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf98:	f013 031f 	ands.w	r3, r3, #31
 800bf9c:	b087      	sub	sp, #28
 800bf9e:	bf18      	it	ne
 800bfa0:	3604      	addne	r6, #4
 800bfa2:	2500      	movs	r5, #0
 800bfa4:	1f37      	subs	r7, r6, #4
 800bfa6:	4690      	mov	r8, r2
 800bfa8:	6802      	ldr	r2, [r0, #0]
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	4682      	mov	sl, r0
 800bfae:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfb2:	46b9      	mov	r9, r7
 800bfb4:	463c      	mov	r4, r7
 800bfb6:	9502      	str	r5, [sp, #8]
 800bfb8:	46ab      	mov	fp, r5
 800bfba:	7851      	ldrb	r1, [r2, #1]
 800bfbc:	1c53      	adds	r3, r2, #1
 800bfbe:	9303      	str	r3, [sp, #12]
 800bfc0:	b341      	cbz	r1, 800c014 <__hexnan+0x88>
 800bfc2:	4608      	mov	r0, r1
 800bfc4:	9205      	str	r2, [sp, #20]
 800bfc6:	9104      	str	r1, [sp, #16]
 800bfc8:	f7ff fd5e 	bl	800ba88 <__hexdig_fun>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d14f      	bne.n	800c070 <__hexnan+0xe4>
 800bfd0:	9904      	ldr	r1, [sp, #16]
 800bfd2:	9a05      	ldr	r2, [sp, #20]
 800bfd4:	2920      	cmp	r1, #32
 800bfd6:	d818      	bhi.n	800c00a <__hexnan+0x7e>
 800bfd8:	9b02      	ldr	r3, [sp, #8]
 800bfda:	459b      	cmp	fp, r3
 800bfdc:	dd13      	ble.n	800c006 <__hexnan+0x7a>
 800bfde:	454c      	cmp	r4, r9
 800bfe0:	d206      	bcs.n	800bff0 <__hexnan+0x64>
 800bfe2:	2d07      	cmp	r5, #7
 800bfe4:	dc04      	bgt.n	800bff0 <__hexnan+0x64>
 800bfe6:	462a      	mov	r2, r5
 800bfe8:	4649      	mov	r1, r9
 800bfea:	4620      	mov	r0, r4
 800bfec:	f7ff ffa8 	bl	800bf40 <L_shift>
 800bff0:	4544      	cmp	r4, r8
 800bff2:	d950      	bls.n	800c096 <__hexnan+0x10a>
 800bff4:	2300      	movs	r3, #0
 800bff6:	f1a4 0904 	sub.w	r9, r4, #4
 800bffa:	f844 3c04 	str.w	r3, [r4, #-4]
 800bffe:	f8cd b008 	str.w	fp, [sp, #8]
 800c002:	464c      	mov	r4, r9
 800c004:	461d      	mov	r5, r3
 800c006:	9a03      	ldr	r2, [sp, #12]
 800c008:	e7d7      	b.n	800bfba <__hexnan+0x2e>
 800c00a:	2929      	cmp	r1, #41	; 0x29
 800c00c:	d156      	bne.n	800c0bc <__hexnan+0x130>
 800c00e:	3202      	adds	r2, #2
 800c010:	f8ca 2000 	str.w	r2, [sl]
 800c014:	f1bb 0f00 	cmp.w	fp, #0
 800c018:	d050      	beq.n	800c0bc <__hexnan+0x130>
 800c01a:	454c      	cmp	r4, r9
 800c01c:	d206      	bcs.n	800c02c <__hexnan+0xa0>
 800c01e:	2d07      	cmp	r5, #7
 800c020:	dc04      	bgt.n	800c02c <__hexnan+0xa0>
 800c022:	462a      	mov	r2, r5
 800c024:	4649      	mov	r1, r9
 800c026:	4620      	mov	r0, r4
 800c028:	f7ff ff8a 	bl	800bf40 <L_shift>
 800c02c:	4544      	cmp	r4, r8
 800c02e:	d934      	bls.n	800c09a <__hexnan+0x10e>
 800c030:	f1a8 0204 	sub.w	r2, r8, #4
 800c034:	4623      	mov	r3, r4
 800c036:	f853 1b04 	ldr.w	r1, [r3], #4
 800c03a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c03e:	429f      	cmp	r7, r3
 800c040:	d2f9      	bcs.n	800c036 <__hexnan+0xaa>
 800c042:	1b3b      	subs	r3, r7, r4
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	3304      	adds	r3, #4
 800c04a:	3401      	adds	r4, #1
 800c04c:	3e03      	subs	r6, #3
 800c04e:	42b4      	cmp	r4, r6
 800c050:	bf88      	it	hi
 800c052:	2304      	movhi	r3, #4
 800c054:	4443      	add	r3, r8
 800c056:	2200      	movs	r2, #0
 800c058:	f843 2b04 	str.w	r2, [r3], #4
 800c05c:	429f      	cmp	r7, r3
 800c05e:	d2fb      	bcs.n	800c058 <__hexnan+0xcc>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	b91b      	cbnz	r3, 800c06c <__hexnan+0xe0>
 800c064:	4547      	cmp	r7, r8
 800c066:	d127      	bne.n	800c0b8 <__hexnan+0x12c>
 800c068:	2301      	movs	r3, #1
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	2005      	movs	r0, #5
 800c06e:	e026      	b.n	800c0be <__hexnan+0x132>
 800c070:	3501      	adds	r5, #1
 800c072:	2d08      	cmp	r5, #8
 800c074:	f10b 0b01 	add.w	fp, fp, #1
 800c078:	dd06      	ble.n	800c088 <__hexnan+0xfc>
 800c07a:	4544      	cmp	r4, r8
 800c07c:	d9c3      	bls.n	800c006 <__hexnan+0x7a>
 800c07e:	2300      	movs	r3, #0
 800c080:	f844 3c04 	str.w	r3, [r4, #-4]
 800c084:	2501      	movs	r5, #1
 800c086:	3c04      	subs	r4, #4
 800c088:	6822      	ldr	r2, [r4, #0]
 800c08a:	f000 000f 	and.w	r0, r0, #15
 800c08e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c092:	6022      	str	r2, [r4, #0]
 800c094:	e7b7      	b.n	800c006 <__hexnan+0x7a>
 800c096:	2508      	movs	r5, #8
 800c098:	e7b5      	b.n	800c006 <__hexnan+0x7a>
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d0df      	beq.n	800c060 <__hexnan+0xd4>
 800c0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a4:	f1c3 0320 	rsb	r3, r3, #32
 800c0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c0b0:	401a      	ands	r2, r3
 800c0b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800c0b6:	e7d3      	b.n	800c060 <__hexnan+0xd4>
 800c0b8:	3f04      	subs	r7, #4
 800c0ba:	e7d1      	b.n	800c060 <__hexnan+0xd4>
 800c0bc:	2004      	movs	r0, #4
 800c0be:	b007      	add	sp, #28
 800c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0c4 <_localeconv_r>:
 800c0c4:	4800      	ldr	r0, [pc, #0]	; (800c0c8 <_localeconv_r+0x4>)
 800c0c6:	4770      	bx	lr
 800c0c8:	20000174 	.word	0x20000174

0800c0cc <_lseek_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	; (800c0ec <_lseek_r+0x20>)
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	602a      	str	r2, [r5, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f7f6 fda8 	bl	8002c30 <_lseek>
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	d102      	bne.n	800c0ea <_lseek_r+0x1e>
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	b103      	cbz	r3, 800c0ea <_lseek_r+0x1e>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	20015ad0 	.word	0x20015ad0

0800c0f0 <__swhatbuf_r>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	460e      	mov	r6, r1
 800c0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f8:	2900      	cmp	r1, #0
 800c0fa:	b096      	sub	sp, #88	; 0x58
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	461d      	mov	r5, r3
 800c100:	da08      	bge.n	800c114 <__swhatbuf_r+0x24>
 800c102:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	602a      	str	r2, [r5, #0]
 800c10a:	061a      	lsls	r2, r3, #24
 800c10c:	d410      	bmi.n	800c130 <__swhatbuf_r+0x40>
 800c10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c112:	e00e      	b.n	800c132 <__swhatbuf_r+0x42>
 800c114:	466a      	mov	r2, sp
 800c116:	f001 f885 	bl	800d224 <_fstat_r>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	dbf1      	blt.n	800c102 <__swhatbuf_r+0x12>
 800c11e:	9a01      	ldr	r2, [sp, #4]
 800c120:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c124:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c128:	425a      	negs	r2, r3
 800c12a:	415a      	adcs	r2, r3
 800c12c:	602a      	str	r2, [r5, #0]
 800c12e:	e7ee      	b.n	800c10e <__swhatbuf_r+0x1e>
 800c130:	2340      	movs	r3, #64	; 0x40
 800c132:	2000      	movs	r0, #0
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	b016      	add	sp, #88	; 0x58
 800c138:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c13c <__smakebuf_r>:
 800c13c:	898b      	ldrh	r3, [r1, #12]
 800c13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c140:	079d      	lsls	r5, r3, #30
 800c142:	4606      	mov	r6, r0
 800c144:	460c      	mov	r4, r1
 800c146:	d507      	bpl.n	800c158 <__smakebuf_r+0x1c>
 800c148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	2301      	movs	r3, #1
 800c152:	6163      	str	r3, [r4, #20]
 800c154:	b002      	add	sp, #8
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	ab01      	add	r3, sp, #4
 800c15a:	466a      	mov	r2, sp
 800c15c:	f7ff ffc8 	bl	800c0f0 <__swhatbuf_r>
 800c160:	9900      	ldr	r1, [sp, #0]
 800c162:	4605      	mov	r5, r0
 800c164:	4630      	mov	r0, r6
 800c166:	f7fd f84d 	bl	8009204 <_malloc_r>
 800c16a:	b948      	cbnz	r0, 800c180 <__smakebuf_r+0x44>
 800c16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c170:	059a      	lsls	r2, r3, #22
 800c172:	d4ef      	bmi.n	800c154 <__smakebuf_r+0x18>
 800c174:	f023 0303 	bic.w	r3, r3, #3
 800c178:	f043 0302 	orr.w	r3, r3, #2
 800c17c:	81a3      	strh	r3, [r4, #12]
 800c17e:	e7e3      	b.n	800c148 <__smakebuf_r+0xc>
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <__smakebuf_r+0x7c>)
 800c182:	62b3      	str	r3, [r6, #40]	; 0x28
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	6020      	str	r0, [r4, #0]
 800c188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	9b00      	ldr	r3, [sp, #0]
 800c190:	6163      	str	r3, [r4, #20]
 800c192:	9b01      	ldr	r3, [sp, #4]
 800c194:	6120      	str	r0, [r4, #16]
 800c196:	b15b      	cbz	r3, 800c1b0 <__smakebuf_r+0x74>
 800c198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c19c:	4630      	mov	r0, r6
 800c19e:	f001 f853 	bl	800d248 <_isatty_r>
 800c1a2:	b128      	cbz	r0, 800c1b0 <__smakebuf_r+0x74>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f023 0303 	bic.w	r3, r3, #3
 800c1aa:	f043 0301 	orr.w	r3, r3, #1
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	89a0      	ldrh	r0, [r4, #12]
 800c1b2:	4305      	orrs	r5, r0
 800c1b4:	81a5      	strh	r5, [r4, #12]
 800c1b6:	e7cd      	b.n	800c154 <__smakebuf_r+0x18>
 800c1b8:	08008eed 	.word	0x08008eed

0800c1bc <__ascii_mbtowc>:
 800c1bc:	b082      	sub	sp, #8
 800c1be:	b901      	cbnz	r1, 800c1c2 <__ascii_mbtowc+0x6>
 800c1c0:	a901      	add	r1, sp, #4
 800c1c2:	b142      	cbz	r2, 800c1d6 <__ascii_mbtowc+0x1a>
 800c1c4:	b14b      	cbz	r3, 800c1da <__ascii_mbtowc+0x1e>
 800c1c6:	7813      	ldrb	r3, [r2, #0]
 800c1c8:	600b      	str	r3, [r1, #0]
 800c1ca:	7812      	ldrb	r2, [r2, #0]
 800c1cc:	1e10      	subs	r0, r2, #0
 800c1ce:	bf18      	it	ne
 800c1d0:	2001      	movne	r0, #1
 800c1d2:	b002      	add	sp, #8
 800c1d4:	4770      	bx	lr
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	e7fb      	b.n	800c1d2 <__ascii_mbtowc+0x16>
 800c1da:	f06f 0001 	mvn.w	r0, #1
 800c1de:	e7f8      	b.n	800c1d2 <__ascii_mbtowc+0x16>

0800c1e0 <__malloc_lock>:
 800c1e0:	4801      	ldr	r0, [pc, #4]	; (800c1e8 <__malloc_lock+0x8>)
 800c1e2:	f7fc bf7a 	b.w	80090da <__retarget_lock_acquire_recursive>
 800c1e6:	bf00      	nop
 800c1e8:	20015ac4 	.word	0x20015ac4

0800c1ec <__malloc_unlock>:
 800c1ec:	4801      	ldr	r0, [pc, #4]	; (800c1f4 <__malloc_unlock+0x8>)
 800c1ee:	f7fc bf75 	b.w	80090dc <__retarget_lock_release_recursive>
 800c1f2:	bf00      	nop
 800c1f4:	20015ac4 	.word	0x20015ac4

0800c1f8 <_Balloc>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	b976      	cbnz	r6, 800c220 <_Balloc+0x28>
 800c202:	2010      	movs	r0, #16
 800c204:	f7fc ff6c 	bl	80090e0 <malloc>
 800c208:	4602      	mov	r2, r0
 800c20a:	6260      	str	r0, [r4, #36]	; 0x24
 800c20c:	b920      	cbnz	r0, 800c218 <_Balloc+0x20>
 800c20e:	4b18      	ldr	r3, [pc, #96]	; (800c270 <_Balloc+0x78>)
 800c210:	4818      	ldr	r0, [pc, #96]	; (800c274 <_Balloc+0x7c>)
 800c212:	2166      	movs	r1, #102	; 0x66
 800c214:	f000 ffd6 	bl	800d1c4 <__assert_func>
 800c218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c21c:	6006      	str	r6, [r0, #0]
 800c21e:	60c6      	str	r6, [r0, #12]
 800c220:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c222:	68f3      	ldr	r3, [r6, #12]
 800c224:	b183      	cbz	r3, 800c248 <_Balloc+0x50>
 800c226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c22e:	b9b8      	cbnz	r0, 800c260 <_Balloc+0x68>
 800c230:	2101      	movs	r1, #1
 800c232:	fa01 f605 	lsl.w	r6, r1, r5
 800c236:	1d72      	adds	r2, r6, #5
 800c238:	0092      	lsls	r2, r2, #2
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 fc9d 	bl	800cb7a <_calloc_r>
 800c240:	b160      	cbz	r0, 800c25c <_Balloc+0x64>
 800c242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c246:	e00e      	b.n	800c266 <_Balloc+0x6e>
 800c248:	2221      	movs	r2, #33	; 0x21
 800c24a:	2104      	movs	r1, #4
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fc94 	bl	800cb7a <_calloc_r>
 800c252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c254:	60f0      	str	r0, [r6, #12]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e4      	bne.n	800c226 <_Balloc+0x2e>
 800c25c:	2000      	movs	r0, #0
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	6802      	ldr	r2, [r0, #0]
 800c262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c266:	2300      	movs	r3, #0
 800c268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c26c:	e7f7      	b.n	800c25e <_Balloc+0x66>
 800c26e:	bf00      	nop
 800c270:	0800db5d 	.word	0x0800db5d
 800c274:	0800dc5c 	.word	0x0800dc5c

0800c278 <_Bfree>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c27c:	4605      	mov	r5, r0
 800c27e:	460c      	mov	r4, r1
 800c280:	b976      	cbnz	r6, 800c2a0 <_Bfree+0x28>
 800c282:	2010      	movs	r0, #16
 800c284:	f7fc ff2c 	bl	80090e0 <malloc>
 800c288:	4602      	mov	r2, r0
 800c28a:	6268      	str	r0, [r5, #36]	; 0x24
 800c28c:	b920      	cbnz	r0, 800c298 <_Bfree+0x20>
 800c28e:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <_Bfree+0x3c>)
 800c290:	4809      	ldr	r0, [pc, #36]	; (800c2b8 <_Bfree+0x40>)
 800c292:	218a      	movs	r1, #138	; 0x8a
 800c294:	f000 ff96 	bl	800d1c4 <__assert_func>
 800c298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c29c:	6006      	str	r6, [r0, #0]
 800c29e:	60c6      	str	r6, [r0, #12]
 800c2a0:	b13c      	cbz	r4, 800c2b2 <_Bfree+0x3a>
 800c2a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c2a4:	6862      	ldr	r2, [r4, #4]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2ac:	6021      	str	r1, [r4, #0]
 800c2ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}
 800c2b4:	0800db5d 	.word	0x0800db5d
 800c2b8:	0800dc5c 	.word	0x0800dc5c

0800c2bc <__multadd>:
 800c2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c0:	690d      	ldr	r5, [r1, #16]
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	461e      	mov	r6, r3
 800c2c8:	f101 0c14 	add.w	ip, r1, #20
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c2d2:	b299      	uxth	r1, r3
 800c2d4:	fb02 6101 	mla	r1, r2, r1, r6
 800c2d8:	0c1e      	lsrs	r6, r3, #16
 800c2da:	0c0b      	lsrs	r3, r1, #16
 800c2dc:	fb02 3306 	mla	r3, r2, r6, r3
 800c2e0:	b289      	uxth	r1, r1
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2e8:	4285      	cmp	r5, r0
 800c2ea:	f84c 1b04 	str.w	r1, [ip], #4
 800c2ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2f2:	dcec      	bgt.n	800c2ce <__multadd+0x12>
 800c2f4:	b30e      	cbz	r6, 800c33a <__multadd+0x7e>
 800c2f6:	68a3      	ldr	r3, [r4, #8]
 800c2f8:	42ab      	cmp	r3, r5
 800c2fa:	dc19      	bgt.n	800c330 <__multadd+0x74>
 800c2fc:	6861      	ldr	r1, [r4, #4]
 800c2fe:	4638      	mov	r0, r7
 800c300:	3101      	adds	r1, #1
 800c302:	f7ff ff79 	bl	800c1f8 <_Balloc>
 800c306:	4680      	mov	r8, r0
 800c308:	b928      	cbnz	r0, 800c316 <__multadd+0x5a>
 800c30a:	4602      	mov	r2, r0
 800c30c:	4b0c      	ldr	r3, [pc, #48]	; (800c340 <__multadd+0x84>)
 800c30e:	480d      	ldr	r0, [pc, #52]	; (800c344 <__multadd+0x88>)
 800c310:	21b5      	movs	r1, #181	; 0xb5
 800c312:	f000 ff57 	bl	800d1c4 <__assert_func>
 800c316:	6922      	ldr	r2, [r4, #16]
 800c318:	3202      	adds	r2, #2
 800c31a:	f104 010c 	add.w	r1, r4, #12
 800c31e:	0092      	lsls	r2, r2, #2
 800c320:	300c      	adds	r0, #12
 800c322:	f7fc feed 	bl	8009100 <memcpy>
 800c326:	4621      	mov	r1, r4
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff ffa5 	bl	800c278 <_Bfree>
 800c32e:	4644      	mov	r4, r8
 800c330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c334:	3501      	adds	r5, #1
 800c336:	615e      	str	r6, [r3, #20]
 800c338:	6125      	str	r5, [r4, #16]
 800c33a:	4620      	mov	r0, r4
 800c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c340:	0800dbcf 	.word	0x0800dbcf
 800c344:	0800dc5c 	.word	0x0800dc5c

0800c348 <__s2b>:
 800c348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c34c:	460c      	mov	r4, r1
 800c34e:	4615      	mov	r5, r2
 800c350:	461f      	mov	r7, r3
 800c352:	2209      	movs	r2, #9
 800c354:	3308      	adds	r3, #8
 800c356:	4606      	mov	r6, r0
 800c358:	fb93 f3f2 	sdiv	r3, r3, r2
 800c35c:	2100      	movs	r1, #0
 800c35e:	2201      	movs	r2, #1
 800c360:	429a      	cmp	r2, r3
 800c362:	db09      	blt.n	800c378 <__s2b+0x30>
 800c364:	4630      	mov	r0, r6
 800c366:	f7ff ff47 	bl	800c1f8 <_Balloc>
 800c36a:	b940      	cbnz	r0, 800c37e <__s2b+0x36>
 800c36c:	4602      	mov	r2, r0
 800c36e:	4b19      	ldr	r3, [pc, #100]	; (800c3d4 <__s2b+0x8c>)
 800c370:	4819      	ldr	r0, [pc, #100]	; (800c3d8 <__s2b+0x90>)
 800c372:	21ce      	movs	r1, #206	; 0xce
 800c374:	f000 ff26 	bl	800d1c4 <__assert_func>
 800c378:	0052      	lsls	r2, r2, #1
 800c37a:	3101      	adds	r1, #1
 800c37c:	e7f0      	b.n	800c360 <__s2b+0x18>
 800c37e:	9b08      	ldr	r3, [sp, #32]
 800c380:	6143      	str	r3, [r0, #20]
 800c382:	2d09      	cmp	r5, #9
 800c384:	f04f 0301 	mov.w	r3, #1
 800c388:	6103      	str	r3, [r0, #16]
 800c38a:	dd16      	ble.n	800c3ba <__s2b+0x72>
 800c38c:	f104 0909 	add.w	r9, r4, #9
 800c390:	46c8      	mov	r8, r9
 800c392:	442c      	add	r4, r5
 800c394:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c398:	4601      	mov	r1, r0
 800c39a:	3b30      	subs	r3, #48	; 0x30
 800c39c:	220a      	movs	r2, #10
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f7ff ff8c 	bl	800c2bc <__multadd>
 800c3a4:	45a0      	cmp	r8, r4
 800c3a6:	d1f5      	bne.n	800c394 <__s2b+0x4c>
 800c3a8:	f1a5 0408 	sub.w	r4, r5, #8
 800c3ac:	444c      	add	r4, r9
 800c3ae:	1b2d      	subs	r5, r5, r4
 800c3b0:	1963      	adds	r3, r4, r5
 800c3b2:	42bb      	cmp	r3, r7
 800c3b4:	db04      	blt.n	800c3c0 <__s2b+0x78>
 800c3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ba:	340a      	adds	r4, #10
 800c3bc:	2509      	movs	r5, #9
 800c3be:	e7f6      	b.n	800c3ae <__s2b+0x66>
 800c3c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	3b30      	subs	r3, #48	; 0x30
 800c3c8:	220a      	movs	r2, #10
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7ff ff76 	bl	800c2bc <__multadd>
 800c3d0:	e7ee      	b.n	800c3b0 <__s2b+0x68>
 800c3d2:	bf00      	nop
 800c3d4:	0800dbcf 	.word	0x0800dbcf
 800c3d8:	0800dc5c 	.word	0x0800dc5c

0800c3dc <__hi0bits>:
 800c3dc:	0c03      	lsrs	r3, r0, #16
 800c3de:	041b      	lsls	r3, r3, #16
 800c3e0:	b9d3      	cbnz	r3, 800c418 <__hi0bits+0x3c>
 800c3e2:	0400      	lsls	r0, r0, #16
 800c3e4:	2310      	movs	r3, #16
 800c3e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3ea:	bf04      	itt	eq
 800c3ec:	0200      	lsleq	r0, r0, #8
 800c3ee:	3308      	addeq	r3, #8
 800c3f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3f4:	bf04      	itt	eq
 800c3f6:	0100      	lsleq	r0, r0, #4
 800c3f8:	3304      	addeq	r3, #4
 800c3fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3fe:	bf04      	itt	eq
 800c400:	0080      	lsleq	r0, r0, #2
 800c402:	3302      	addeq	r3, #2
 800c404:	2800      	cmp	r0, #0
 800c406:	db05      	blt.n	800c414 <__hi0bits+0x38>
 800c408:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c40c:	f103 0301 	add.w	r3, r3, #1
 800c410:	bf08      	it	eq
 800c412:	2320      	moveq	r3, #32
 800c414:	4618      	mov	r0, r3
 800c416:	4770      	bx	lr
 800c418:	2300      	movs	r3, #0
 800c41a:	e7e4      	b.n	800c3e6 <__hi0bits+0xa>

0800c41c <__lo0bits>:
 800c41c:	6803      	ldr	r3, [r0, #0]
 800c41e:	f013 0207 	ands.w	r2, r3, #7
 800c422:	4601      	mov	r1, r0
 800c424:	d00b      	beq.n	800c43e <__lo0bits+0x22>
 800c426:	07da      	lsls	r2, r3, #31
 800c428:	d423      	bmi.n	800c472 <__lo0bits+0x56>
 800c42a:	0798      	lsls	r0, r3, #30
 800c42c:	bf49      	itett	mi
 800c42e:	085b      	lsrmi	r3, r3, #1
 800c430:	089b      	lsrpl	r3, r3, #2
 800c432:	2001      	movmi	r0, #1
 800c434:	600b      	strmi	r3, [r1, #0]
 800c436:	bf5c      	itt	pl
 800c438:	600b      	strpl	r3, [r1, #0]
 800c43a:	2002      	movpl	r0, #2
 800c43c:	4770      	bx	lr
 800c43e:	b298      	uxth	r0, r3
 800c440:	b9a8      	cbnz	r0, 800c46e <__lo0bits+0x52>
 800c442:	0c1b      	lsrs	r3, r3, #16
 800c444:	2010      	movs	r0, #16
 800c446:	b2da      	uxtb	r2, r3
 800c448:	b90a      	cbnz	r2, 800c44e <__lo0bits+0x32>
 800c44a:	3008      	adds	r0, #8
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	071a      	lsls	r2, r3, #28
 800c450:	bf04      	itt	eq
 800c452:	091b      	lsreq	r3, r3, #4
 800c454:	3004      	addeq	r0, #4
 800c456:	079a      	lsls	r2, r3, #30
 800c458:	bf04      	itt	eq
 800c45a:	089b      	lsreq	r3, r3, #2
 800c45c:	3002      	addeq	r0, #2
 800c45e:	07da      	lsls	r2, r3, #31
 800c460:	d403      	bmi.n	800c46a <__lo0bits+0x4e>
 800c462:	085b      	lsrs	r3, r3, #1
 800c464:	f100 0001 	add.w	r0, r0, #1
 800c468:	d005      	beq.n	800c476 <__lo0bits+0x5a>
 800c46a:	600b      	str	r3, [r1, #0]
 800c46c:	4770      	bx	lr
 800c46e:	4610      	mov	r0, r2
 800c470:	e7e9      	b.n	800c446 <__lo0bits+0x2a>
 800c472:	2000      	movs	r0, #0
 800c474:	4770      	bx	lr
 800c476:	2020      	movs	r0, #32
 800c478:	4770      	bx	lr
	...

0800c47c <__i2b>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	460c      	mov	r4, r1
 800c480:	2101      	movs	r1, #1
 800c482:	f7ff feb9 	bl	800c1f8 <_Balloc>
 800c486:	4602      	mov	r2, r0
 800c488:	b928      	cbnz	r0, 800c496 <__i2b+0x1a>
 800c48a:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <__i2b+0x24>)
 800c48c:	4805      	ldr	r0, [pc, #20]	; (800c4a4 <__i2b+0x28>)
 800c48e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c492:	f000 fe97 	bl	800d1c4 <__assert_func>
 800c496:	2301      	movs	r3, #1
 800c498:	6144      	str	r4, [r0, #20]
 800c49a:	6103      	str	r3, [r0, #16]
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	bf00      	nop
 800c4a0:	0800dbcf 	.word	0x0800dbcf
 800c4a4:	0800dc5c 	.word	0x0800dc5c

0800c4a8 <__multiply>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	4691      	mov	r9, r2
 800c4ae:	690a      	ldr	r2, [r1, #16]
 800c4b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	bfb8      	it	lt
 800c4b8:	460b      	movlt	r3, r1
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	bfbc      	itt	lt
 800c4be:	464c      	movlt	r4, r9
 800c4c0:	4699      	movlt	r9, r3
 800c4c2:	6927      	ldr	r7, [r4, #16]
 800c4c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	6861      	ldr	r1, [r4, #4]
 800c4cc:	eb07 060a 	add.w	r6, r7, sl
 800c4d0:	42b3      	cmp	r3, r6
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	bfb8      	it	lt
 800c4d6:	3101      	addlt	r1, #1
 800c4d8:	f7ff fe8e 	bl	800c1f8 <_Balloc>
 800c4dc:	b930      	cbnz	r0, 800c4ec <__multiply+0x44>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	4b44      	ldr	r3, [pc, #272]	; (800c5f4 <__multiply+0x14c>)
 800c4e2:	4845      	ldr	r0, [pc, #276]	; (800c5f8 <__multiply+0x150>)
 800c4e4:	f240 115d 	movw	r1, #349	; 0x15d
 800c4e8:	f000 fe6c 	bl	800d1c4 <__assert_func>
 800c4ec:	f100 0514 	add.w	r5, r0, #20
 800c4f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4543      	cmp	r3, r8
 800c4fa:	d321      	bcc.n	800c540 <__multiply+0x98>
 800c4fc:	f104 0314 	add.w	r3, r4, #20
 800c500:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c504:	f109 0314 	add.w	r3, r9, #20
 800c508:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c50c:	9202      	str	r2, [sp, #8]
 800c50e:	1b3a      	subs	r2, r7, r4
 800c510:	3a15      	subs	r2, #21
 800c512:	f022 0203 	bic.w	r2, r2, #3
 800c516:	3204      	adds	r2, #4
 800c518:	f104 0115 	add.w	r1, r4, #21
 800c51c:	428f      	cmp	r7, r1
 800c51e:	bf38      	it	cc
 800c520:	2204      	movcc	r2, #4
 800c522:	9201      	str	r2, [sp, #4]
 800c524:	9a02      	ldr	r2, [sp, #8]
 800c526:	9303      	str	r3, [sp, #12]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d80c      	bhi.n	800c546 <__multiply+0x9e>
 800c52c:	2e00      	cmp	r6, #0
 800c52e:	dd03      	ble.n	800c538 <__multiply+0x90>
 800c530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c534:	2b00      	cmp	r3, #0
 800c536:	d05a      	beq.n	800c5ee <__multiply+0x146>
 800c538:	6106      	str	r6, [r0, #16]
 800c53a:	b005      	add	sp, #20
 800c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c540:	f843 2b04 	str.w	r2, [r3], #4
 800c544:	e7d8      	b.n	800c4f8 <__multiply+0x50>
 800c546:	f8b3 a000 	ldrh.w	sl, [r3]
 800c54a:	f1ba 0f00 	cmp.w	sl, #0
 800c54e:	d024      	beq.n	800c59a <__multiply+0xf2>
 800c550:	f104 0e14 	add.w	lr, r4, #20
 800c554:	46a9      	mov	r9, r5
 800c556:	f04f 0c00 	mov.w	ip, #0
 800c55a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c55e:	f8d9 1000 	ldr.w	r1, [r9]
 800c562:	fa1f fb82 	uxth.w	fp, r2
 800c566:	b289      	uxth	r1, r1
 800c568:	fb0a 110b 	mla	r1, sl, fp, r1
 800c56c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c570:	f8d9 2000 	ldr.w	r2, [r9]
 800c574:	4461      	add	r1, ip
 800c576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c57a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c57e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c582:	b289      	uxth	r1, r1
 800c584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c588:	4577      	cmp	r7, lr
 800c58a:	f849 1b04 	str.w	r1, [r9], #4
 800c58e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c592:	d8e2      	bhi.n	800c55a <__multiply+0xb2>
 800c594:	9a01      	ldr	r2, [sp, #4]
 800c596:	f845 c002 	str.w	ip, [r5, r2]
 800c59a:	9a03      	ldr	r2, [sp, #12]
 800c59c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	f1b9 0f00 	cmp.w	r9, #0
 800c5a6:	d020      	beq.n	800c5ea <__multiply+0x142>
 800c5a8:	6829      	ldr	r1, [r5, #0]
 800c5aa:	f104 0c14 	add.w	ip, r4, #20
 800c5ae:	46ae      	mov	lr, r5
 800c5b0:	f04f 0a00 	mov.w	sl, #0
 800c5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c5b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c5c0:	4492      	add	sl, r2
 800c5c2:	b289      	uxth	r1, r1
 800c5c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c5cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5d0:	f8be 1000 	ldrh.w	r1, [lr]
 800c5d4:	0c12      	lsrs	r2, r2, #16
 800c5d6:	fb09 1102 	mla	r1, r9, r2, r1
 800c5da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5de:	4567      	cmp	r7, ip
 800c5e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5e4:	d8e6      	bhi.n	800c5b4 <__multiply+0x10c>
 800c5e6:	9a01      	ldr	r2, [sp, #4]
 800c5e8:	50a9      	str	r1, [r5, r2]
 800c5ea:	3504      	adds	r5, #4
 800c5ec:	e79a      	b.n	800c524 <__multiply+0x7c>
 800c5ee:	3e01      	subs	r6, #1
 800c5f0:	e79c      	b.n	800c52c <__multiply+0x84>
 800c5f2:	bf00      	nop
 800c5f4:	0800dbcf 	.word	0x0800dbcf
 800c5f8:	0800dc5c 	.word	0x0800dc5c

0800c5fc <__pow5mult>:
 800c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c600:	4615      	mov	r5, r2
 800c602:	f012 0203 	ands.w	r2, r2, #3
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	d007      	beq.n	800c61c <__pow5mult+0x20>
 800c60c:	4c25      	ldr	r4, [pc, #148]	; (800c6a4 <__pow5mult+0xa8>)
 800c60e:	3a01      	subs	r2, #1
 800c610:	2300      	movs	r3, #0
 800c612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c616:	f7ff fe51 	bl	800c2bc <__multadd>
 800c61a:	4607      	mov	r7, r0
 800c61c:	10ad      	asrs	r5, r5, #2
 800c61e:	d03d      	beq.n	800c69c <__pow5mult+0xa0>
 800c620:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c622:	b97c      	cbnz	r4, 800c644 <__pow5mult+0x48>
 800c624:	2010      	movs	r0, #16
 800c626:	f7fc fd5b 	bl	80090e0 <malloc>
 800c62a:	4602      	mov	r2, r0
 800c62c:	6270      	str	r0, [r6, #36]	; 0x24
 800c62e:	b928      	cbnz	r0, 800c63c <__pow5mult+0x40>
 800c630:	4b1d      	ldr	r3, [pc, #116]	; (800c6a8 <__pow5mult+0xac>)
 800c632:	481e      	ldr	r0, [pc, #120]	; (800c6ac <__pow5mult+0xb0>)
 800c634:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c638:	f000 fdc4 	bl	800d1c4 <__assert_func>
 800c63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c640:	6004      	str	r4, [r0, #0]
 800c642:	60c4      	str	r4, [r0, #12]
 800c644:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c64c:	b94c      	cbnz	r4, 800c662 <__pow5mult+0x66>
 800c64e:	f240 2171 	movw	r1, #625	; 0x271
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff ff12 	bl	800c47c <__i2b>
 800c658:	2300      	movs	r3, #0
 800c65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c65e:	4604      	mov	r4, r0
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	f04f 0900 	mov.w	r9, #0
 800c666:	07eb      	lsls	r3, r5, #31
 800c668:	d50a      	bpl.n	800c680 <__pow5mult+0x84>
 800c66a:	4639      	mov	r1, r7
 800c66c:	4622      	mov	r2, r4
 800c66e:	4630      	mov	r0, r6
 800c670:	f7ff ff1a 	bl	800c4a8 <__multiply>
 800c674:	4639      	mov	r1, r7
 800c676:	4680      	mov	r8, r0
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff fdfd 	bl	800c278 <_Bfree>
 800c67e:	4647      	mov	r7, r8
 800c680:	106d      	asrs	r5, r5, #1
 800c682:	d00b      	beq.n	800c69c <__pow5mult+0xa0>
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	b938      	cbnz	r0, 800c698 <__pow5mult+0x9c>
 800c688:	4622      	mov	r2, r4
 800c68a:	4621      	mov	r1, r4
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff ff0b 	bl	800c4a8 <__multiply>
 800c692:	6020      	str	r0, [r4, #0]
 800c694:	f8c0 9000 	str.w	r9, [r0]
 800c698:	4604      	mov	r4, r0
 800c69a:	e7e4      	b.n	800c666 <__pow5mult+0x6a>
 800c69c:	4638      	mov	r0, r7
 800c69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a2:	bf00      	nop
 800c6a4:	0800dda8 	.word	0x0800dda8
 800c6a8:	0800db5d 	.word	0x0800db5d
 800c6ac:	0800dc5c 	.word	0x0800dc5c

0800c6b0 <__lshift>:
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	6849      	ldr	r1, [r1, #4]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	4691      	mov	r9, r2
 800c6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6c8:	f108 0601 	add.w	r6, r8, #1
 800c6cc:	42b3      	cmp	r3, r6
 800c6ce:	db0b      	blt.n	800c6e8 <__lshift+0x38>
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff fd91 	bl	800c1f8 <_Balloc>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b948      	cbnz	r0, 800c6ee <__lshift+0x3e>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	4b2a      	ldr	r3, [pc, #168]	; (800c788 <__lshift+0xd8>)
 800c6de:	482b      	ldr	r0, [pc, #172]	; (800c78c <__lshift+0xdc>)
 800c6e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6e4:	f000 fd6e 	bl	800d1c4 <__assert_func>
 800c6e8:	3101      	adds	r1, #1
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	e7ee      	b.n	800c6cc <__lshift+0x1c>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f100 0114 	add.w	r1, r0, #20
 800c6f4:	f100 0210 	add.w	r2, r0, #16
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	4553      	cmp	r3, sl
 800c6fc:	db37      	blt.n	800c76e <__lshift+0xbe>
 800c6fe:	6920      	ldr	r0, [r4, #16]
 800c700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c704:	f104 0314 	add.w	r3, r4, #20
 800c708:	f019 091f 	ands.w	r9, r9, #31
 800c70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c710:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c714:	d02f      	beq.n	800c776 <__lshift+0xc6>
 800c716:	f1c9 0e20 	rsb	lr, r9, #32
 800c71a:	468a      	mov	sl, r1
 800c71c:	f04f 0c00 	mov.w	ip, #0
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	fa02 f209 	lsl.w	r2, r2, r9
 800c726:	ea42 020c 	orr.w	r2, r2, ip
 800c72a:	f84a 2b04 	str.w	r2, [sl], #4
 800c72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c732:	4298      	cmp	r0, r3
 800c734:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c738:	d8f2      	bhi.n	800c720 <__lshift+0x70>
 800c73a:	1b03      	subs	r3, r0, r4
 800c73c:	3b15      	subs	r3, #21
 800c73e:	f023 0303 	bic.w	r3, r3, #3
 800c742:	3304      	adds	r3, #4
 800c744:	f104 0215 	add.w	r2, r4, #21
 800c748:	4290      	cmp	r0, r2
 800c74a:	bf38      	it	cc
 800c74c:	2304      	movcc	r3, #4
 800c74e:	f841 c003 	str.w	ip, [r1, r3]
 800c752:	f1bc 0f00 	cmp.w	ip, #0
 800c756:	d001      	beq.n	800c75c <__lshift+0xac>
 800c758:	f108 0602 	add.w	r6, r8, #2
 800c75c:	3e01      	subs	r6, #1
 800c75e:	4638      	mov	r0, r7
 800c760:	612e      	str	r6, [r5, #16]
 800c762:	4621      	mov	r1, r4
 800c764:	f7ff fd88 	bl	800c278 <_Bfree>
 800c768:	4628      	mov	r0, r5
 800c76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c772:	3301      	adds	r3, #1
 800c774:	e7c1      	b.n	800c6fa <__lshift+0x4a>
 800c776:	3904      	subs	r1, #4
 800c778:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c780:	4298      	cmp	r0, r3
 800c782:	d8f9      	bhi.n	800c778 <__lshift+0xc8>
 800c784:	e7ea      	b.n	800c75c <__lshift+0xac>
 800c786:	bf00      	nop
 800c788:	0800dbcf 	.word	0x0800dbcf
 800c78c:	0800dc5c 	.word	0x0800dc5c

0800c790 <__mcmp>:
 800c790:	b530      	push	{r4, r5, lr}
 800c792:	6902      	ldr	r2, [r0, #16]
 800c794:	690c      	ldr	r4, [r1, #16]
 800c796:	1b12      	subs	r2, r2, r4
 800c798:	d10e      	bne.n	800c7b8 <__mcmp+0x28>
 800c79a:	f100 0314 	add.w	r3, r0, #20
 800c79e:	3114      	adds	r1, #20
 800c7a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7b0:	42a5      	cmp	r5, r4
 800c7b2:	d003      	beq.n	800c7bc <__mcmp+0x2c>
 800c7b4:	d305      	bcc.n	800c7c2 <__mcmp+0x32>
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	bd30      	pop	{r4, r5, pc}
 800c7bc:	4283      	cmp	r3, r0
 800c7be:	d3f3      	bcc.n	800c7a8 <__mcmp+0x18>
 800c7c0:	e7fa      	b.n	800c7b8 <__mcmp+0x28>
 800c7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c6:	e7f7      	b.n	800c7b8 <__mcmp+0x28>

0800c7c8 <__mdiff>:
 800c7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	460c      	mov	r4, r1
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4690      	mov	r8, r2
 800c7d6:	f7ff ffdb 	bl	800c790 <__mcmp>
 800c7da:	1e05      	subs	r5, r0, #0
 800c7dc:	d110      	bne.n	800c800 <__mdiff+0x38>
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7ff fd09 	bl	800c1f8 <_Balloc>
 800c7e6:	b930      	cbnz	r0, 800c7f6 <__mdiff+0x2e>
 800c7e8:	4b3a      	ldr	r3, [pc, #232]	; (800c8d4 <__mdiff+0x10c>)
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	f240 2132 	movw	r1, #562	; 0x232
 800c7f0:	4839      	ldr	r0, [pc, #228]	; (800c8d8 <__mdiff+0x110>)
 800c7f2:	f000 fce7 	bl	800d1c4 <__assert_func>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c800:	bfa4      	itt	ge
 800c802:	4643      	movge	r3, r8
 800c804:	46a0      	movge	r8, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c80c:	bfa6      	itte	ge
 800c80e:	461c      	movge	r4, r3
 800c810:	2500      	movge	r5, #0
 800c812:	2501      	movlt	r5, #1
 800c814:	f7ff fcf0 	bl	800c1f8 <_Balloc>
 800c818:	b920      	cbnz	r0, 800c824 <__mdiff+0x5c>
 800c81a:	4b2e      	ldr	r3, [pc, #184]	; (800c8d4 <__mdiff+0x10c>)
 800c81c:	4602      	mov	r2, r0
 800c81e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c822:	e7e5      	b.n	800c7f0 <__mdiff+0x28>
 800c824:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c828:	6926      	ldr	r6, [r4, #16]
 800c82a:	60c5      	str	r5, [r0, #12]
 800c82c:	f104 0914 	add.w	r9, r4, #20
 800c830:	f108 0514 	add.w	r5, r8, #20
 800c834:	f100 0e14 	add.w	lr, r0, #20
 800c838:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c83c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c840:	f108 0210 	add.w	r2, r8, #16
 800c844:	46f2      	mov	sl, lr
 800c846:	2100      	movs	r1, #0
 800c848:	f859 3b04 	ldr.w	r3, [r9], #4
 800c84c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c850:	fa1f f883 	uxth.w	r8, r3
 800c854:	fa11 f18b 	uxtah	r1, r1, fp
 800c858:	0c1b      	lsrs	r3, r3, #16
 800c85a:	eba1 0808 	sub.w	r8, r1, r8
 800c85e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c862:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c866:	fa1f f888 	uxth.w	r8, r8
 800c86a:	1419      	asrs	r1, r3, #16
 800c86c:	454e      	cmp	r6, r9
 800c86e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c872:	f84a 3b04 	str.w	r3, [sl], #4
 800c876:	d8e7      	bhi.n	800c848 <__mdiff+0x80>
 800c878:	1b33      	subs	r3, r6, r4
 800c87a:	3b15      	subs	r3, #21
 800c87c:	f023 0303 	bic.w	r3, r3, #3
 800c880:	3304      	adds	r3, #4
 800c882:	3415      	adds	r4, #21
 800c884:	42a6      	cmp	r6, r4
 800c886:	bf38      	it	cc
 800c888:	2304      	movcc	r3, #4
 800c88a:	441d      	add	r5, r3
 800c88c:	4473      	add	r3, lr
 800c88e:	469e      	mov	lr, r3
 800c890:	462e      	mov	r6, r5
 800c892:	4566      	cmp	r6, ip
 800c894:	d30e      	bcc.n	800c8b4 <__mdiff+0xec>
 800c896:	f10c 0203 	add.w	r2, ip, #3
 800c89a:	1b52      	subs	r2, r2, r5
 800c89c:	f022 0203 	bic.w	r2, r2, #3
 800c8a0:	3d03      	subs	r5, #3
 800c8a2:	45ac      	cmp	ip, r5
 800c8a4:	bf38      	it	cc
 800c8a6:	2200      	movcc	r2, #0
 800c8a8:	441a      	add	r2, r3
 800c8aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c8ae:	b17b      	cbz	r3, 800c8d0 <__mdiff+0x108>
 800c8b0:	6107      	str	r7, [r0, #16]
 800c8b2:	e7a3      	b.n	800c7fc <__mdiff+0x34>
 800c8b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8b8:	fa11 f288 	uxtah	r2, r1, r8
 800c8bc:	1414      	asrs	r4, r2, #16
 800c8be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8c2:	b292      	uxth	r2, r2
 800c8c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8c8:	f84e 2b04 	str.w	r2, [lr], #4
 800c8cc:	1421      	asrs	r1, r4, #16
 800c8ce:	e7e0      	b.n	800c892 <__mdiff+0xca>
 800c8d0:	3f01      	subs	r7, #1
 800c8d2:	e7ea      	b.n	800c8aa <__mdiff+0xe2>
 800c8d4:	0800dbcf 	.word	0x0800dbcf
 800c8d8:	0800dc5c 	.word	0x0800dc5c

0800c8dc <__ulp>:
 800c8dc:	b082      	sub	sp, #8
 800c8de:	ed8d 0b00 	vstr	d0, [sp]
 800c8e2:	9b01      	ldr	r3, [sp, #4]
 800c8e4:	4912      	ldr	r1, [pc, #72]	; (800c930 <__ulp+0x54>)
 800c8e6:	4019      	ands	r1, r3
 800c8e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c8ec:	2900      	cmp	r1, #0
 800c8ee:	dd05      	ble.n	800c8fc <__ulp+0x20>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	ec43 2b10 	vmov	d0, r2, r3
 800c8f8:	b002      	add	sp, #8
 800c8fa:	4770      	bx	lr
 800c8fc:	4249      	negs	r1, r1
 800c8fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c902:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c906:	f04f 0200 	mov.w	r2, #0
 800c90a:	f04f 0300 	mov.w	r3, #0
 800c90e:	da04      	bge.n	800c91a <__ulp+0x3e>
 800c910:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c914:	fa41 f300 	asr.w	r3, r1, r0
 800c918:	e7ec      	b.n	800c8f4 <__ulp+0x18>
 800c91a:	f1a0 0114 	sub.w	r1, r0, #20
 800c91e:	291e      	cmp	r1, #30
 800c920:	bfda      	itte	le
 800c922:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c926:	fa20 f101 	lsrle.w	r1, r0, r1
 800c92a:	2101      	movgt	r1, #1
 800c92c:	460a      	mov	r2, r1
 800c92e:	e7e1      	b.n	800c8f4 <__ulp+0x18>
 800c930:	7ff00000 	.word	0x7ff00000

0800c934 <__b2d>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	6905      	ldr	r5, [r0, #16]
 800c938:	f100 0714 	add.w	r7, r0, #20
 800c93c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c940:	1f2e      	subs	r6, r5, #4
 800c942:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c946:	4620      	mov	r0, r4
 800c948:	f7ff fd48 	bl	800c3dc <__hi0bits>
 800c94c:	f1c0 0320 	rsb	r3, r0, #32
 800c950:	280a      	cmp	r0, #10
 800c952:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c9d0 <__b2d+0x9c>
 800c956:	600b      	str	r3, [r1, #0]
 800c958:	dc14      	bgt.n	800c984 <__b2d+0x50>
 800c95a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c95e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c962:	42b7      	cmp	r7, r6
 800c964:	ea41 030c 	orr.w	r3, r1, ip
 800c968:	bf34      	ite	cc
 800c96a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c96e:	2100      	movcs	r1, #0
 800c970:	3015      	adds	r0, #21
 800c972:	fa04 f000 	lsl.w	r0, r4, r0
 800c976:	fa21 f10e 	lsr.w	r1, r1, lr
 800c97a:	ea40 0201 	orr.w	r2, r0, r1
 800c97e:	ec43 2b10 	vmov	d0, r2, r3
 800c982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c984:	42b7      	cmp	r7, r6
 800c986:	bf3a      	itte	cc
 800c988:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c98c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c990:	2100      	movcs	r1, #0
 800c992:	380b      	subs	r0, #11
 800c994:	d017      	beq.n	800c9c6 <__b2d+0x92>
 800c996:	f1c0 0c20 	rsb	ip, r0, #32
 800c99a:	fa04 f500 	lsl.w	r5, r4, r0
 800c99e:	42be      	cmp	r6, r7
 800c9a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c9a4:	ea45 0504 	orr.w	r5, r5, r4
 800c9a8:	bf8c      	ite	hi
 800c9aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c9ae:	2400      	movls	r4, #0
 800c9b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c9b4:	fa01 f000 	lsl.w	r0, r1, r0
 800c9b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c9bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c9c0:	ea40 0204 	orr.w	r2, r0, r4
 800c9c4:	e7db      	b.n	800c97e <__b2d+0x4a>
 800c9c6:	ea44 030c 	orr.w	r3, r4, ip
 800c9ca:	460a      	mov	r2, r1
 800c9cc:	e7d7      	b.n	800c97e <__b2d+0x4a>
 800c9ce:	bf00      	nop
 800c9d0:	3ff00000 	.word	0x3ff00000

0800c9d4 <__d2b>:
 800c9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9d8:	4689      	mov	r9, r1
 800c9da:	2101      	movs	r1, #1
 800c9dc:	ec57 6b10 	vmov	r6, r7, d0
 800c9e0:	4690      	mov	r8, r2
 800c9e2:	f7ff fc09 	bl	800c1f8 <_Balloc>
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	b930      	cbnz	r0, 800c9f8 <__d2b+0x24>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	4b25      	ldr	r3, [pc, #148]	; (800ca84 <__d2b+0xb0>)
 800c9ee:	4826      	ldr	r0, [pc, #152]	; (800ca88 <__d2b+0xb4>)
 800c9f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c9f4:	f000 fbe6 	bl	800d1c4 <__assert_func>
 800c9f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca00:	bb35      	cbnz	r5, 800ca50 <__d2b+0x7c>
 800ca02:	2e00      	cmp	r6, #0
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	d028      	beq.n	800ca5a <__d2b+0x86>
 800ca08:	4668      	mov	r0, sp
 800ca0a:	9600      	str	r6, [sp, #0]
 800ca0c:	f7ff fd06 	bl	800c41c <__lo0bits>
 800ca10:	9900      	ldr	r1, [sp, #0]
 800ca12:	b300      	cbz	r0, 800ca56 <__d2b+0x82>
 800ca14:	9a01      	ldr	r2, [sp, #4]
 800ca16:	f1c0 0320 	rsb	r3, r0, #32
 800ca1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1e:	430b      	orrs	r3, r1
 800ca20:	40c2      	lsrs	r2, r0
 800ca22:	6163      	str	r3, [r4, #20]
 800ca24:	9201      	str	r2, [sp, #4]
 800ca26:	9b01      	ldr	r3, [sp, #4]
 800ca28:	61a3      	str	r3, [r4, #24]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bf14      	ite	ne
 800ca2e:	2202      	movne	r2, #2
 800ca30:	2201      	moveq	r2, #1
 800ca32:	6122      	str	r2, [r4, #16]
 800ca34:	b1d5      	cbz	r5, 800ca6c <__d2b+0x98>
 800ca36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca3a:	4405      	add	r5, r0
 800ca3c:	f8c9 5000 	str.w	r5, [r9]
 800ca40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca44:	f8c8 0000 	str.w	r0, [r8]
 800ca48:	4620      	mov	r0, r4
 800ca4a:	b003      	add	sp, #12
 800ca4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca54:	e7d5      	b.n	800ca02 <__d2b+0x2e>
 800ca56:	6161      	str	r1, [r4, #20]
 800ca58:	e7e5      	b.n	800ca26 <__d2b+0x52>
 800ca5a:	a801      	add	r0, sp, #4
 800ca5c:	f7ff fcde 	bl	800c41c <__lo0bits>
 800ca60:	9b01      	ldr	r3, [sp, #4]
 800ca62:	6163      	str	r3, [r4, #20]
 800ca64:	2201      	movs	r2, #1
 800ca66:	6122      	str	r2, [r4, #16]
 800ca68:	3020      	adds	r0, #32
 800ca6a:	e7e3      	b.n	800ca34 <__d2b+0x60>
 800ca6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca74:	f8c9 0000 	str.w	r0, [r9]
 800ca78:	6918      	ldr	r0, [r3, #16]
 800ca7a:	f7ff fcaf 	bl	800c3dc <__hi0bits>
 800ca7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca82:	e7df      	b.n	800ca44 <__d2b+0x70>
 800ca84:	0800dbcf 	.word	0x0800dbcf
 800ca88:	0800dc5c 	.word	0x0800dc5c

0800ca8c <__ratio>:
 800ca8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca90:	4688      	mov	r8, r1
 800ca92:	4669      	mov	r1, sp
 800ca94:	4681      	mov	r9, r0
 800ca96:	f7ff ff4d 	bl	800c934 <__b2d>
 800ca9a:	a901      	add	r1, sp, #4
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	ec55 4b10 	vmov	r4, r5, d0
 800caa2:	f7ff ff47 	bl	800c934 <__b2d>
 800caa6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800caaa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800caae:	eba3 0c02 	sub.w	ip, r3, r2
 800cab2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cab6:	1a9b      	subs	r3, r3, r2
 800cab8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cabc:	ec51 0b10 	vmov	r0, r1, d0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfd6      	itet	le
 800cac4:	460a      	movle	r2, r1
 800cac6:	462a      	movgt	r2, r5
 800cac8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cacc:	468b      	mov	fp, r1
 800cace:	462f      	mov	r7, r5
 800cad0:	bfd4      	ite	le
 800cad2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cad6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cada:	4620      	mov	r0, r4
 800cadc:	ee10 2a10 	vmov	r2, s0
 800cae0:	465b      	mov	r3, fp
 800cae2:	4639      	mov	r1, r7
 800cae4:	f7f3 feca 	bl	800087c <__aeabi_ddiv>
 800cae8:	ec41 0b10 	vmov	d0, r0, r1
 800caec:	b003      	add	sp, #12
 800caee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caf2 <__copybits>:
 800caf2:	3901      	subs	r1, #1
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	1149      	asrs	r1, r1, #5
 800caf8:	6914      	ldr	r4, [r2, #16]
 800cafa:	3101      	adds	r1, #1
 800cafc:	f102 0314 	add.w	r3, r2, #20
 800cb00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb08:	1f05      	subs	r5, r0, #4
 800cb0a:	42a3      	cmp	r3, r4
 800cb0c:	d30c      	bcc.n	800cb28 <__copybits+0x36>
 800cb0e:	1aa3      	subs	r3, r4, r2
 800cb10:	3b11      	subs	r3, #17
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	3211      	adds	r2, #17
 800cb18:	42a2      	cmp	r2, r4
 800cb1a:	bf88      	it	hi
 800cb1c:	2300      	movhi	r3, #0
 800cb1e:	4418      	add	r0, r3
 800cb20:	2300      	movs	r3, #0
 800cb22:	4288      	cmp	r0, r1
 800cb24:	d305      	bcc.n	800cb32 <__copybits+0x40>
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb2c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb30:	e7eb      	b.n	800cb0a <__copybits+0x18>
 800cb32:	f840 3b04 	str.w	r3, [r0], #4
 800cb36:	e7f4      	b.n	800cb22 <__copybits+0x30>

0800cb38 <__any_on>:
 800cb38:	f100 0214 	add.w	r2, r0, #20
 800cb3c:	6900      	ldr	r0, [r0, #16]
 800cb3e:	114b      	asrs	r3, r1, #5
 800cb40:	4298      	cmp	r0, r3
 800cb42:	b510      	push	{r4, lr}
 800cb44:	db11      	blt.n	800cb6a <__any_on+0x32>
 800cb46:	dd0a      	ble.n	800cb5e <__any_on+0x26>
 800cb48:	f011 011f 	ands.w	r1, r1, #31
 800cb4c:	d007      	beq.n	800cb5e <__any_on+0x26>
 800cb4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb52:	fa24 f001 	lsr.w	r0, r4, r1
 800cb56:	fa00 f101 	lsl.w	r1, r0, r1
 800cb5a:	428c      	cmp	r4, r1
 800cb5c:	d10b      	bne.n	800cb76 <__any_on+0x3e>
 800cb5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d803      	bhi.n	800cb6e <__any_on+0x36>
 800cb66:	2000      	movs	r0, #0
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	e7f7      	b.n	800cb5e <__any_on+0x26>
 800cb6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb72:	2900      	cmp	r1, #0
 800cb74:	d0f5      	beq.n	800cb62 <__any_on+0x2a>
 800cb76:	2001      	movs	r0, #1
 800cb78:	e7f6      	b.n	800cb68 <__any_on+0x30>

0800cb7a <_calloc_r>:
 800cb7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb7c:	fba1 2402 	umull	r2, r4, r1, r2
 800cb80:	b94c      	cbnz	r4, 800cb96 <_calloc_r+0x1c>
 800cb82:	4611      	mov	r1, r2
 800cb84:	9201      	str	r2, [sp, #4]
 800cb86:	f7fc fb3d 	bl	8009204 <_malloc_r>
 800cb8a:	9a01      	ldr	r2, [sp, #4]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	b930      	cbnz	r0, 800cb9e <_calloc_r+0x24>
 800cb90:	4628      	mov	r0, r5
 800cb92:	b003      	add	sp, #12
 800cb94:	bd30      	pop	{r4, r5, pc}
 800cb96:	220c      	movs	r2, #12
 800cb98:	6002      	str	r2, [r0, #0]
 800cb9a:	2500      	movs	r5, #0
 800cb9c:	e7f8      	b.n	800cb90 <_calloc_r+0x16>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	f7fc fabc 	bl	800911c <memset>
 800cba4:	e7f4      	b.n	800cb90 <_calloc_r+0x16>

0800cba6 <_realloc_r>:
 800cba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	4680      	mov	r8, r0
 800cbac:	4614      	mov	r4, r2
 800cbae:	460e      	mov	r6, r1
 800cbb0:	b921      	cbnz	r1, 800cbbc <_realloc_r+0x16>
 800cbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	f7fc bb24 	b.w	8009204 <_malloc_r>
 800cbbc:	b92a      	cbnz	r2, 800cbca <_realloc_r+0x24>
 800cbbe:	f7fc fab5 	bl	800912c <_free_r>
 800cbc2:	4625      	mov	r5, r4
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbca:	f000 fb67 	bl	800d29c <_malloc_usable_size_r>
 800cbce:	4284      	cmp	r4, r0
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	d802      	bhi.n	800cbda <_realloc_r+0x34>
 800cbd4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbd8:	d812      	bhi.n	800cc00 <_realloc_r+0x5a>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4640      	mov	r0, r8
 800cbde:	f7fc fb11 	bl	8009204 <_malloc_r>
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d0ed      	beq.n	800cbc4 <_realloc_r+0x1e>
 800cbe8:	42bc      	cmp	r4, r7
 800cbea:	4622      	mov	r2, r4
 800cbec:	4631      	mov	r1, r6
 800cbee:	bf28      	it	cs
 800cbf0:	463a      	movcs	r2, r7
 800cbf2:	f7fc fa85 	bl	8009100 <memcpy>
 800cbf6:	4631      	mov	r1, r6
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	f7fc fa97 	bl	800912c <_free_r>
 800cbfe:	e7e1      	b.n	800cbc4 <_realloc_r+0x1e>
 800cc00:	4635      	mov	r5, r6
 800cc02:	e7df      	b.n	800cbc4 <_realloc_r+0x1e>

0800cc04 <__ssputs_r>:
 800cc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc08:	688e      	ldr	r6, [r1, #8]
 800cc0a:	429e      	cmp	r6, r3
 800cc0c:	4682      	mov	sl, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	4690      	mov	r8, r2
 800cc12:	461f      	mov	r7, r3
 800cc14:	d838      	bhi.n	800cc88 <__ssputs_r+0x84>
 800cc16:	898a      	ldrh	r2, [r1, #12]
 800cc18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc1c:	d032      	beq.n	800cc84 <__ssputs_r+0x80>
 800cc1e:	6825      	ldr	r5, [r4, #0]
 800cc20:	6909      	ldr	r1, [r1, #16]
 800cc22:	eba5 0901 	sub.w	r9, r5, r1
 800cc26:	6965      	ldr	r5, [r4, #20]
 800cc28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc30:	3301      	adds	r3, #1
 800cc32:	444b      	add	r3, r9
 800cc34:	106d      	asrs	r5, r5, #1
 800cc36:	429d      	cmp	r5, r3
 800cc38:	bf38      	it	cc
 800cc3a:	461d      	movcc	r5, r3
 800cc3c:	0553      	lsls	r3, r2, #21
 800cc3e:	d531      	bpl.n	800cca4 <__ssputs_r+0xa0>
 800cc40:	4629      	mov	r1, r5
 800cc42:	f7fc fadf 	bl	8009204 <_malloc_r>
 800cc46:	4606      	mov	r6, r0
 800cc48:	b950      	cbnz	r0, 800cc60 <__ssputs_r+0x5c>
 800cc4a:	230c      	movs	r3, #12
 800cc4c:	f8ca 3000 	str.w	r3, [sl]
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc56:	81a3      	strh	r3, [r4, #12]
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc60:	6921      	ldr	r1, [r4, #16]
 800cc62:	464a      	mov	r2, r9
 800cc64:	f7fc fa4c 	bl	8009100 <memcpy>
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	6126      	str	r6, [r4, #16]
 800cc76:	6165      	str	r5, [r4, #20]
 800cc78:	444e      	add	r6, r9
 800cc7a:	eba5 0509 	sub.w	r5, r5, r9
 800cc7e:	6026      	str	r6, [r4, #0]
 800cc80:	60a5      	str	r5, [r4, #8]
 800cc82:	463e      	mov	r6, r7
 800cc84:	42be      	cmp	r6, r7
 800cc86:	d900      	bls.n	800cc8a <__ssputs_r+0x86>
 800cc88:	463e      	mov	r6, r7
 800cc8a:	6820      	ldr	r0, [r4, #0]
 800cc8c:	4632      	mov	r2, r6
 800cc8e:	4641      	mov	r1, r8
 800cc90:	f000 faea 	bl	800d268 <memmove>
 800cc94:	68a3      	ldr	r3, [r4, #8]
 800cc96:	1b9b      	subs	r3, r3, r6
 800cc98:	60a3      	str	r3, [r4, #8]
 800cc9a:	6823      	ldr	r3, [r4, #0]
 800cc9c:	4433      	add	r3, r6
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	2000      	movs	r0, #0
 800cca2:	e7db      	b.n	800cc5c <__ssputs_r+0x58>
 800cca4:	462a      	mov	r2, r5
 800cca6:	f7ff ff7e 	bl	800cba6 <_realloc_r>
 800ccaa:	4606      	mov	r6, r0
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d1e1      	bne.n	800cc74 <__ssputs_r+0x70>
 800ccb0:	6921      	ldr	r1, [r4, #16]
 800ccb2:	4650      	mov	r0, sl
 800ccb4:	f7fc fa3a 	bl	800912c <_free_r>
 800ccb8:	e7c7      	b.n	800cc4a <__ssputs_r+0x46>
	...

0800ccbc <_svfiprintf_r>:
 800ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc0:	4698      	mov	r8, r3
 800ccc2:	898b      	ldrh	r3, [r1, #12]
 800ccc4:	061b      	lsls	r3, r3, #24
 800ccc6:	b09d      	sub	sp, #116	; 0x74
 800ccc8:	4607      	mov	r7, r0
 800ccca:	460d      	mov	r5, r1
 800cccc:	4614      	mov	r4, r2
 800ccce:	d50e      	bpl.n	800ccee <_svfiprintf_r+0x32>
 800ccd0:	690b      	ldr	r3, [r1, #16]
 800ccd2:	b963      	cbnz	r3, 800ccee <_svfiprintf_r+0x32>
 800ccd4:	2140      	movs	r1, #64	; 0x40
 800ccd6:	f7fc fa95 	bl	8009204 <_malloc_r>
 800ccda:	6028      	str	r0, [r5, #0]
 800ccdc:	6128      	str	r0, [r5, #16]
 800ccde:	b920      	cbnz	r0, 800ccea <_svfiprintf_r+0x2e>
 800cce0:	230c      	movs	r3, #12
 800cce2:	603b      	str	r3, [r7, #0]
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
 800cce8:	e0d1      	b.n	800ce8e <_svfiprintf_r+0x1d2>
 800ccea:	2340      	movs	r3, #64	; 0x40
 800ccec:	616b      	str	r3, [r5, #20]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf2:	2320      	movs	r3, #32
 800ccf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccfc:	2330      	movs	r3, #48	; 0x30
 800ccfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cea8 <_svfiprintf_r+0x1ec>
 800cd02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd06:	f04f 0901 	mov.w	r9, #1
 800cd0a:	4623      	mov	r3, r4
 800cd0c:	469a      	mov	sl, r3
 800cd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd12:	b10a      	cbz	r2, 800cd18 <_svfiprintf_r+0x5c>
 800cd14:	2a25      	cmp	r2, #37	; 0x25
 800cd16:	d1f9      	bne.n	800cd0c <_svfiprintf_r+0x50>
 800cd18:	ebba 0b04 	subs.w	fp, sl, r4
 800cd1c:	d00b      	beq.n	800cd36 <_svfiprintf_r+0x7a>
 800cd1e:	465b      	mov	r3, fp
 800cd20:	4622      	mov	r2, r4
 800cd22:	4629      	mov	r1, r5
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7ff ff6d 	bl	800cc04 <__ssputs_r>
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	f000 80aa 	beq.w	800ce84 <_svfiprintf_r+0x1c8>
 800cd30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd32:	445a      	add	r2, fp
 800cd34:	9209      	str	r2, [sp, #36]	; 0x24
 800cd36:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 80a2 	beq.w	800ce84 <_svfiprintf_r+0x1c8>
 800cd40:	2300      	movs	r3, #0
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4a:	f10a 0a01 	add.w	sl, sl, #1
 800cd4e:	9304      	str	r3, [sp, #16]
 800cd50:	9307      	str	r3, [sp, #28]
 800cd52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd56:	931a      	str	r3, [sp, #104]	; 0x68
 800cd58:	4654      	mov	r4, sl
 800cd5a:	2205      	movs	r2, #5
 800cd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd60:	4851      	ldr	r0, [pc, #324]	; (800cea8 <_svfiprintf_r+0x1ec>)
 800cd62:	f7f3 fa55 	bl	8000210 <memchr>
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	b9d8      	cbnz	r0, 800cda2 <_svfiprintf_r+0xe6>
 800cd6a:	06d0      	lsls	r0, r2, #27
 800cd6c:	bf44      	itt	mi
 800cd6e:	2320      	movmi	r3, #32
 800cd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd74:	0711      	lsls	r1, r2, #28
 800cd76:	bf44      	itt	mi
 800cd78:	232b      	movmi	r3, #43	; 0x2b
 800cd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd82:	2b2a      	cmp	r3, #42	; 0x2a
 800cd84:	d015      	beq.n	800cdb2 <_svfiprintf_r+0xf6>
 800cd86:	9a07      	ldr	r2, [sp, #28]
 800cd88:	4654      	mov	r4, sl
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	f04f 0c0a 	mov.w	ip, #10
 800cd90:	4621      	mov	r1, r4
 800cd92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd96:	3b30      	subs	r3, #48	; 0x30
 800cd98:	2b09      	cmp	r3, #9
 800cd9a:	d94e      	bls.n	800ce3a <_svfiprintf_r+0x17e>
 800cd9c:	b1b0      	cbz	r0, 800cdcc <_svfiprintf_r+0x110>
 800cd9e:	9207      	str	r2, [sp, #28]
 800cda0:	e014      	b.n	800cdcc <_svfiprintf_r+0x110>
 800cda2:	eba0 0308 	sub.w	r3, r0, r8
 800cda6:	fa09 f303 	lsl.w	r3, r9, r3
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	46a2      	mov	sl, r4
 800cdb0:	e7d2      	b.n	800cd58 <_svfiprintf_r+0x9c>
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	1d19      	adds	r1, r3, #4
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	9103      	str	r1, [sp, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bfbb      	ittet	lt
 800cdbe:	425b      	neglt	r3, r3
 800cdc0:	f042 0202 	orrlt.w	r2, r2, #2
 800cdc4:	9307      	strge	r3, [sp, #28]
 800cdc6:	9307      	strlt	r3, [sp, #28]
 800cdc8:	bfb8      	it	lt
 800cdca:	9204      	strlt	r2, [sp, #16]
 800cdcc:	7823      	ldrb	r3, [r4, #0]
 800cdce:	2b2e      	cmp	r3, #46	; 0x2e
 800cdd0:	d10c      	bne.n	800cdec <_svfiprintf_r+0x130>
 800cdd2:	7863      	ldrb	r3, [r4, #1]
 800cdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd6:	d135      	bne.n	800ce44 <_svfiprintf_r+0x188>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	1d1a      	adds	r2, r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	9203      	str	r2, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	bfb8      	it	lt
 800cde4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cde8:	3402      	adds	r4, #2
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ceb8 <_svfiprintf_r+0x1fc>
 800cdf0:	7821      	ldrb	r1, [r4, #0]
 800cdf2:	2203      	movs	r2, #3
 800cdf4:	4650      	mov	r0, sl
 800cdf6:	f7f3 fa0b 	bl	8000210 <memchr>
 800cdfa:	b140      	cbz	r0, 800ce0e <_svfiprintf_r+0x152>
 800cdfc:	2340      	movs	r3, #64	; 0x40
 800cdfe:	eba0 000a 	sub.w	r0, r0, sl
 800ce02:	fa03 f000 	lsl.w	r0, r3, r0
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	4303      	orrs	r3, r0
 800ce0a:	3401      	adds	r4, #1
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce12:	4826      	ldr	r0, [pc, #152]	; (800ceac <_svfiprintf_r+0x1f0>)
 800ce14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce18:	2206      	movs	r2, #6
 800ce1a:	f7f3 f9f9 	bl	8000210 <memchr>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d038      	beq.n	800ce94 <_svfiprintf_r+0x1d8>
 800ce22:	4b23      	ldr	r3, [pc, #140]	; (800ceb0 <_svfiprintf_r+0x1f4>)
 800ce24:	bb1b      	cbnz	r3, 800ce6e <_svfiprintf_r+0x1b2>
 800ce26:	9b03      	ldr	r3, [sp, #12]
 800ce28:	3307      	adds	r3, #7
 800ce2a:	f023 0307 	bic.w	r3, r3, #7
 800ce2e:	3308      	adds	r3, #8
 800ce30:	9303      	str	r3, [sp, #12]
 800ce32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce34:	4433      	add	r3, r6
 800ce36:	9309      	str	r3, [sp, #36]	; 0x24
 800ce38:	e767      	b.n	800cd0a <_svfiprintf_r+0x4e>
 800ce3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3e:	460c      	mov	r4, r1
 800ce40:	2001      	movs	r0, #1
 800ce42:	e7a5      	b.n	800cd90 <_svfiprintf_r+0xd4>
 800ce44:	2300      	movs	r3, #0
 800ce46:	3401      	adds	r4, #1
 800ce48:	9305      	str	r3, [sp, #20]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	f04f 0c0a 	mov.w	ip, #10
 800ce50:	4620      	mov	r0, r4
 800ce52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce56:	3a30      	subs	r2, #48	; 0x30
 800ce58:	2a09      	cmp	r2, #9
 800ce5a:	d903      	bls.n	800ce64 <_svfiprintf_r+0x1a8>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0c5      	beq.n	800cdec <_svfiprintf_r+0x130>
 800ce60:	9105      	str	r1, [sp, #20]
 800ce62:	e7c3      	b.n	800cdec <_svfiprintf_r+0x130>
 800ce64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce68:	4604      	mov	r4, r0
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e7f0      	b.n	800ce50 <_svfiprintf_r+0x194>
 800ce6e:	ab03      	add	r3, sp, #12
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	462a      	mov	r2, r5
 800ce74:	4b0f      	ldr	r3, [pc, #60]	; (800ceb4 <_svfiprintf_r+0x1f8>)
 800ce76:	a904      	add	r1, sp, #16
 800ce78:	4638      	mov	r0, r7
 800ce7a:	f7fc fad7 	bl	800942c <_printf_float>
 800ce7e:	1c42      	adds	r2, r0, #1
 800ce80:	4606      	mov	r6, r0
 800ce82:	d1d6      	bne.n	800ce32 <_svfiprintf_r+0x176>
 800ce84:	89ab      	ldrh	r3, [r5, #12]
 800ce86:	065b      	lsls	r3, r3, #25
 800ce88:	f53f af2c 	bmi.w	800cce4 <_svfiprintf_r+0x28>
 800ce8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce8e:	b01d      	add	sp, #116	; 0x74
 800ce90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce94:	ab03      	add	r3, sp, #12
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <_svfiprintf_r+0x1f8>)
 800ce9c:	a904      	add	r1, sp, #16
 800ce9e:	4638      	mov	r0, r7
 800cea0:	f7fc fd68 	bl	8009974 <_printf_i>
 800cea4:	e7eb      	b.n	800ce7e <_svfiprintf_r+0x1c2>
 800cea6:	bf00      	nop
 800cea8:	0800ddb4 	.word	0x0800ddb4
 800ceac:	0800ddbe 	.word	0x0800ddbe
 800ceb0:	0800942d 	.word	0x0800942d
 800ceb4:	0800cc05 	.word	0x0800cc05
 800ceb8:	0800ddba 	.word	0x0800ddba

0800cebc <__sfputc_r>:
 800cebc:	6893      	ldr	r3, [r2, #8]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	b410      	push	{r4}
 800cec4:	6093      	str	r3, [r2, #8]
 800cec6:	da08      	bge.n	800ceda <__sfputc_r+0x1e>
 800cec8:	6994      	ldr	r4, [r2, #24]
 800ceca:	42a3      	cmp	r3, r4
 800cecc:	db01      	blt.n	800ced2 <__sfputc_r+0x16>
 800cece:	290a      	cmp	r1, #10
 800ced0:	d103      	bne.n	800ceda <__sfputc_r+0x1e>
 800ced2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced6:	f7fd be29 	b.w	800ab2c <__swbuf_r>
 800ceda:	6813      	ldr	r3, [r2, #0]
 800cedc:	1c58      	adds	r0, r3, #1
 800cede:	6010      	str	r0, [r2, #0]
 800cee0:	7019      	strb	r1, [r3, #0]
 800cee2:	4608      	mov	r0, r1
 800cee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <__sfputs_r>:
 800ceea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceec:	4606      	mov	r6, r0
 800ceee:	460f      	mov	r7, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	18d5      	adds	r5, r2, r3
 800cef4:	42ac      	cmp	r4, r5
 800cef6:	d101      	bne.n	800cefc <__sfputs_r+0x12>
 800cef8:	2000      	movs	r0, #0
 800cefa:	e007      	b.n	800cf0c <__sfputs_r+0x22>
 800cefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf00:	463a      	mov	r2, r7
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7ff ffda 	bl	800cebc <__sfputc_r>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d1f3      	bne.n	800cef4 <__sfputs_r+0xa>
 800cf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf10 <_vfiprintf_r>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	460d      	mov	r5, r1
 800cf16:	b09d      	sub	sp, #116	; 0x74
 800cf18:	4614      	mov	r4, r2
 800cf1a:	4698      	mov	r8, r3
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	b118      	cbz	r0, 800cf28 <_vfiprintf_r+0x18>
 800cf20:	6983      	ldr	r3, [r0, #24]
 800cf22:	b90b      	cbnz	r3, 800cf28 <_vfiprintf_r+0x18>
 800cf24:	f7fc f816 	bl	8008f54 <__sinit>
 800cf28:	4b89      	ldr	r3, [pc, #548]	; (800d150 <_vfiprintf_r+0x240>)
 800cf2a:	429d      	cmp	r5, r3
 800cf2c:	d11b      	bne.n	800cf66 <_vfiprintf_r+0x56>
 800cf2e:	6875      	ldr	r5, [r6, #4]
 800cf30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf32:	07d9      	lsls	r1, r3, #31
 800cf34:	d405      	bmi.n	800cf42 <_vfiprintf_r+0x32>
 800cf36:	89ab      	ldrh	r3, [r5, #12]
 800cf38:	059a      	lsls	r2, r3, #22
 800cf3a:	d402      	bmi.n	800cf42 <_vfiprintf_r+0x32>
 800cf3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf3e:	f7fc f8cc 	bl	80090da <__retarget_lock_acquire_recursive>
 800cf42:	89ab      	ldrh	r3, [r5, #12]
 800cf44:	071b      	lsls	r3, r3, #28
 800cf46:	d501      	bpl.n	800cf4c <_vfiprintf_r+0x3c>
 800cf48:	692b      	ldr	r3, [r5, #16]
 800cf4a:	b9eb      	cbnz	r3, 800cf88 <_vfiprintf_r+0x78>
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f7fd fe50 	bl	800abf4 <__swsetup_r>
 800cf54:	b1c0      	cbz	r0, 800cf88 <_vfiprintf_r+0x78>
 800cf56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf58:	07dc      	lsls	r4, r3, #31
 800cf5a:	d50e      	bpl.n	800cf7a <_vfiprintf_r+0x6a>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	b01d      	add	sp, #116	; 0x74
 800cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf66:	4b7b      	ldr	r3, [pc, #492]	; (800d154 <_vfiprintf_r+0x244>)
 800cf68:	429d      	cmp	r5, r3
 800cf6a:	d101      	bne.n	800cf70 <_vfiprintf_r+0x60>
 800cf6c:	68b5      	ldr	r5, [r6, #8]
 800cf6e:	e7df      	b.n	800cf30 <_vfiprintf_r+0x20>
 800cf70:	4b79      	ldr	r3, [pc, #484]	; (800d158 <_vfiprintf_r+0x248>)
 800cf72:	429d      	cmp	r5, r3
 800cf74:	bf08      	it	eq
 800cf76:	68f5      	ldreq	r5, [r6, #12]
 800cf78:	e7da      	b.n	800cf30 <_vfiprintf_r+0x20>
 800cf7a:	89ab      	ldrh	r3, [r5, #12]
 800cf7c:	0598      	lsls	r0, r3, #22
 800cf7e:	d4ed      	bmi.n	800cf5c <_vfiprintf_r+0x4c>
 800cf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf82:	f7fc f8ab 	bl	80090dc <__retarget_lock_release_recursive>
 800cf86:	e7e9      	b.n	800cf5c <_vfiprintf_r+0x4c>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8c:	2320      	movs	r3, #32
 800cf8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf92:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf96:	2330      	movs	r3, #48	; 0x30
 800cf98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d15c <_vfiprintf_r+0x24c>
 800cf9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa0:	f04f 0901 	mov.w	r9, #1
 800cfa4:	4623      	mov	r3, r4
 800cfa6:	469a      	mov	sl, r3
 800cfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfac:	b10a      	cbz	r2, 800cfb2 <_vfiprintf_r+0xa2>
 800cfae:	2a25      	cmp	r2, #37	; 0x25
 800cfb0:	d1f9      	bne.n	800cfa6 <_vfiprintf_r+0x96>
 800cfb2:	ebba 0b04 	subs.w	fp, sl, r4
 800cfb6:	d00b      	beq.n	800cfd0 <_vfiprintf_r+0xc0>
 800cfb8:	465b      	mov	r3, fp
 800cfba:	4622      	mov	r2, r4
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f7ff ff93 	bl	800ceea <__sfputs_r>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	f000 80aa 	beq.w	800d11e <_vfiprintf_r+0x20e>
 800cfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfcc:	445a      	add	r2, fp
 800cfce:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd0:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 80a2 	beq.w	800d11e <_vfiprintf_r+0x20e>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe4:	f10a 0a01 	add.w	sl, sl, #1
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	9307      	str	r3, [sp, #28]
 800cfec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cff0:	931a      	str	r3, [sp, #104]	; 0x68
 800cff2:	4654      	mov	r4, sl
 800cff4:	2205      	movs	r2, #5
 800cff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffa:	4858      	ldr	r0, [pc, #352]	; (800d15c <_vfiprintf_r+0x24c>)
 800cffc:	f7f3 f908 	bl	8000210 <memchr>
 800d000:	9a04      	ldr	r2, [sp, #16]
 800d002:	b9d8      	cbnz	r0, 800d03c <_vfiprintf_r+0x12c>
 800d004:	06d1      	lsls	r1, r2, #27
 800d006:	bf44      	itt	mi
 800d008:	2320      	movmi	r3, #32
 800d00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d00e:	0713      	lsls	r3, r2, #28
 800d010:	bf44      	itt	mi
 800d012:	232b      	movmi	r3, #43	; 0x2b
 800d014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d018:	f89a 3000 	ldrb.w	r3, [sl]
 800d01c:	2b2a      	cmp	r3, #42	; 0x2a
 800d01e:	d015      	beq.n	800d04c <_vfiprintf_r+0x13c>
 800d020:	9a07      	ldr	r2, [sp, #28]
 800d022:	4654      	mov	r4, sl
 800d024:	2000      	movs	r0, #0
 800d026:	f04f 0c0a 	mov.w	ip, #10
 800d02a:	4621      	mov	r1, r4
 800d02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d030:	3b30      	subs	r3, #48	; 0x30
 800d032:	2b09      	cmp	r3, #9
 800d034:	d94e      	bls.n	800d0d4 <_vfiprintf_r+0x1c4>
 800d036:	b1b0      	cbz	r0, 800d066 <_vfiprintf_r+0x156>
 800d038:	9207      	str	r2, [sp, #28]
 800d03a:	e014      	b.n	800d066 <_vfiprintf_r+0x156>
 800d03c:	eba0 0308 	sub.w	r3, r0, r8
 800d040:	fa09 f303 	lsl.w	r3, r9, r3
 800d044:	4313      	orrs	r3, r2
 800d046:	9304      	str	r3, [sp, #16]
 800d048:	46a2      	mov	sl, r4
 800d04a:	e7d2      	b.n	800cff2 <_vfiprintf_r+0xe2>
 800d04c:	9b03      	ldr	r3, [sp, #12]
 800d04e:	1d19      	adds	r1, r3, #4
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	9103      	str	r1, [sp, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	bfbb      	ittet	lt
 800d058:	425b      	neglt	r3, r3
 800d05a:	f042 0202 	orrlt.w	r2, r2, #2
 800d05e:	9307      	strge	r3, [sp, #28]
 800d060:	9307      	strlt	r3, [sp, #28]
 800d062:	bfb8      	it	lt
 800d064:	9204      	strlt	r2, [sp, #16]
 800d066:	7823      	ldrb	r3, [r4, #0]
 800d068:	2b2e      	cmp	r3, #46	; 0x2e
 800d06a:	d10c      	bne.n	800d086 <_vfiprintf_r+0x176>
 800d06c:	7863      	ldrb	r3, [r4, #1]
 800d06e:	2b2a      	cmp	r3, #42	; 0x2a
 800d070:	d135      	bne.n	800d0de <_vfiprintf_r+0x1ce>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	1d1a      	adds	r2, r3, #4
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	9203      	str	r2, [sp, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bfb8      	it	lt
 800d07e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d082:	3402      	adds	r4, #2
 800d084:	9305      	str	r3, [sp, #20]
 800d086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d16c <_vfiprintf_r+0x25c>
 800d08a:	7821      	ldrb	r1, [r4, #0]
 800d08c:	2203      	movs	r2, #3
 800d08e:	4650      	mov	r0, sl
 800d090:	f7f3 f8be 	bl	8000210 <memchr>
 800d094:	b140      	cbz	r0, 800d0a8 <_vfiprintf_r+0x198>
 800d096:	2340      	movs	r3, #64	; 0x40
 800d098:	eba0 000a 	sub.w	r0, r0, sl
 800d09c:	fa03 f000 	lsl.w	r0, r3, r0
 800d0a0:	9b04      	ldr	r3, [sp, #16]
 800d0a2:	4303      	orrs	r3, r0
 800d0a4:	3401      	adds	r4, #1
 800d0a6:	9304      	str	r3, [sp, #16]
 800d0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ac:	482c      	ldr	r0, [pc, #176]	; (800d160 <_vfiprintf_r+0x250>)
 800d0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0b2:	2206      	movs	r2, #6
 800d0b4:	f7f3 f8ac 	bl	8000210 <memchr>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d03f      	beq.n	800d13c <_vfiprintf_r+0x22c>
 800d0bc:	4b29      	ldr	r3, [pc, #164]	; (800d164 <_vfiprintf_r+0x254>)
 800d0be:	bb1b      	cbnz	r3, 800d108 <_vfiprintf_r+0x1f8>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	3307      	adds	r3, #7
 800d0c4:	f023 0307 	bic.w	r3, r3, #7
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	9303      	str	r3, [sp, #12]
 800d0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ce:	443b      	add	r3, r7
 800d0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d2:	e767      	b.n	800cfa4 <_vfiprintf_r+0x94>
 800d0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0d8:	460c      	mov	r4, r1
 800d0da:	2001      	movs	r0, #1
 800d0dc:	e7a5      	b.n	800d02a <_vfiprintf_r+0x11a>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	3401      	adds	r4, #1
 800d0e2:	9305      	str	r3, [sp, #20]
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f04f 0c0a 	mov.w	ip, #10
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f0:	3a30      	subs	r2, #48	; 0x30
 800d0f2:	2a09      	cmp	r2, #9
 800d0f4:	d903      	bls.n	800d0fe <_vfiprintf_r+0x1ee>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0c5      	beq.n	800d086 <_vfiprintf_r+0x176>
 800d0fa:	9105      	str	r1, [sp, #20]
 800d0fc:	e7c3      	b.n	800d086 <_vfiprintf_r+0x176>
 800d0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d102:	4604      	mov	r4, r0
 800d104:	2301      	movs	r3, #1
 800d106:	e7f0      	b.n	800d0ea <_vfiprintf_r+0x1da>
 800d108:	ab03      	add	r3, sp, #12
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	462a      	mov	r2, r5
 800d10e:	4b16      	ldr	r3, [pc, #88]	; (800d168 <_vfiprintf_r+0x258>)
 800d110:	a904      	add	r1, sp, #16
 800d112:	4630      	mov	r0, r6
 800d114:	f7fc f98a 	bl	800942c <_printf_float>
 800d118:	4607      	mov	r7, r0
 800d11a:	1c78      	adds	r0, r7, #1
 800d11c:	d1d6      	bne.n	800d0cc <_vfiprintf_r+0x1bc>
 800d11e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d120:	07d9      	lsls	r1, r3, #31
 800d122:	d405      	bmi.n	800d130 <_vfiprintf_r+0x220>
 800d124:	89ab      	ldrh	r3, [r5, #12]
 800d126:	059a      	lsls	r2, r3, #22
 800d128:	d402      	bmi.n	800d130 <_vfiprintf_r+0x220>
 800d12a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12c:	f7fb ffd6 	bl	80090dc <__retarget_lock_release_recursive>
 800d130:	89ab      	ldrh	r3, [r5, #12]
 800d132:	065b      	lsls	r3, r3, #25
 800d134:	f53f af12 	bmi.w	800cf5c <_vfiprintf_r+0x4c>
 800d138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d13a:	e711      	b.n	800cf60 <_vfiprintf_r+0x50>
 800d13c:	ab03      	add	r3, sp, #12
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	462a      	mov	r2, r5
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <_vfiprintf_r+0x258>)
 800d144:	a904      	add	r1, sp, #16
 800d146:	4630      	mov	r0, r6
 800d148:	f7fc fc14 	bl	8009974 <_printf_i>
 800d14c:	e7e4      	b.n	800d118 <_vfiprintf_r+0x208>
 800d14e:	bf00      	nop
 800d150:	0800da84 	.word	0x0800da84
 800d154:	0800daa4 	.word	0x0800daa4
 800d158:	0800da64 	.word	0x0800da64
 800d15c:	0800ddb4 	.word	0x0800ddb4
 800d160:	0800ddbe 	.word	0x0800ddbe
 800d164:	0800942d 	.word	0x0800942d
 800d168:	0800ceeb 	.word	0x0800ceeb
 800d16c:	0800ddba 	.word	0x0800ddba

0800d170 <_read_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4d07      	ldr	r5, [pc, #28]	; (800d190 <_read_r+0x20>)
 800d174:	4604      	mov	r4, r0
 800d176:	4608      	mov	r0, r1
 800d178:	4611      	mov	r1, r2
 800d17a:	2200      	movs	r2, #0
 800d17c:	602a      	str	r2, [r5, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	f7f5 fd12 	bl	8002ba8 <_read>
 800d184:	1c43      	adds	r3, r0, #1
 800d186:	d102      	bne.n	800d18e <_read_r+0x1e>
 800d188:	682b      	ldr	r3, [r5, #0]
 800d18a:	b103      	cbz	r3, 800d18e <_read_r+0x1e>
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	20015ad0 	.word	0x20015ad0
 800d194:	00000000 	.word	0x00000000

0800d198 <nan>:
 800d198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d1a0 <nan+0x8>
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	00000000 	.word	0x00000000
 800d1a4:	7ff80000 	.word	0x7ff80000

0800d1a8 <__ascii_wctomb>:
 800d1a8:	b149      	cbz	r1, 800d1be <__ascii_wctomb+0x16>
 800d1aa:	2aff      	cmp	r2, #255	; 0xff
 800d1ac:	bf85      	ittet	hi
 800d1ae:	238a      	movhi	r3, #138	; 0x8a
 800d1b0:	6003      	strhi	r3, [r0, #0]
 800d1b2:	700a      	strbls	r2, [r1, #0]
 800d1b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1b8:	bf98      	it	ls
 800d1ba:	2001      	movls	r0, #1
 800d1bc:	4770      	bx	lr
 800d1be:	4608      	mov	r0, r1
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <__assert_func>:
 800d1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1c6:	4614      	mov	r4, r2
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	4b09      	ldr	r3, [pc, #36]	; (800d1f0 <__assert_func+0x2c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	68d8      	ldr	r0, [r3, #12]
 800d1d2:	b14c      	cbz	r4, 800d1e8 <__assert_func+0x24>
 800d1d4:	4b07      	ldr	r3, [pc, #28]	; (800d1f4 <__assert_func+0x30>)
 800d1d6:	9100      	str	r1, [sp, #0]
 800d1d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1dc:	4906      	ldr	r1, [pc, #24]	; (800d1f8 <__assert_func+0x34>)
 800d1de:	462b      	mov	r3, r5
 800d1e0:	f000 f80e 	bl	800d200 <fiprintf>
 800d1e4:	f000 f862 	bl	800d2ac <abort>
 800d1e8:	4b04      	ldr	r3, [pc, #16]	; (800d1fc <__assert_func+0x38>)
 800d1ea:	461c      	mov	r4, r3
 800d1ec:	e7f3      	b.n	800d1d6 <__assert_func+0x12>
 800d1ee:	bf00      	nop
 800d1f0:	2000001c 	.word	0x2000001c
 800d1f4:	0800ddc5 	.word	0x0800ddc5
 800d1f8:	0800ddd2 	.word	0x0800ddd2
 800d1fc:	0800de00 	.word	0x0800de00

0800d200 <fiprintf>:
 800d200:	b40e      	push	{r1, r2, r3}
 800d202:	b503      	push	{r0, r1, lr}
 800d204:	4601      	mov	r1, r0
 800d206:	ab03      	add	r3, sp, #12
 800d208:	4805      	ldr	r0, [pc, #20]	; (800d220 <fiprintf+0x20>)
 800d20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d20e:	6800      	ldr	r0, [r0, #0]
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	f7ff fe7d 	bl	800cf10 <_vfiprintf_r>
 800d216:	b002      	add	sp, #8
 800d218:	f85d eb04 	ldr.w	lr, [sp], #4
 800d21c:	b003      	add	sp, #12
 800d21e:	4770      	bx	lr
 800d220:	2000001c 	.word	0x2000001c

0800d224 <_fstat_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	; (800d244 <_fstat_r+0x20>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	4611      	mov	r1, r2
 800d230:	602b      	str	r3, [r5, #0]
 800d232:	f7f5 fce2 	bl	8002bfa <_fstat>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	d102      	bne.n	800d240 <_fstat_r+0x1c>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	b103      	cbz	r3, 800d240 <_fstat_r+0x1c>
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	20015ad0 	.word	0x20015ad0

0800d248 <_isatty_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d06      	ldr	r5, [pc, #24]	; (800d264 <_isatty_r+0x1c>)
 800d24c:	2300      	movs	r3, #0
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	602b      	str	r3, [r5, #0]
 800d254:	f7f5 fce1 	bl	8002c1a <_isatty>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d102      	bne.n	800d262 <_isatty_r+0x1a>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	b103      	cbz	r3, 800d262 <_isatty_r+0x1a>
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	20015ad0 	.word	0x20015ad0

0800d268 <memmove>:
 800d268:	4288      	cmp	r0, r1
 800d26a:	b510      	push	{r4, lr}
 800d26c:	eb01 0402 	add.w	r4, r1, r2
 800d270:	d902      	bls.n	800d278 <memmove+0x10>
 800d272:	4284      	cmp	r4, r0
 800d274:	4623      	mov	r3, r4
 800d276:	d807      	bhi.n	800d288 <memmove+0x20>
 800d278:	1e43      	subs	r3, r0, #1
 800d27a:	42a1      	cmp	r1, r4
 800d27c:	d008      	beq.n	800d290 <memmove+0x28>
 800d27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d286:	e7f8      	b.n	800d27a <memmove+0x12>
 800d288:	4402      	add	r2, r0
 800d28a:	4601      	mov	r1, r0
 800d28c:	428a      	cmp	r2, r1
 800d28e:	d100      	bne.n	800d292 <memmove+0x2a>
 800d290:	bd10      	pop	{r4, pc}
 800d292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d29a:	e7f7      	b.n	800d28c <memmove+0x24>

0800d29c <_malloc_usable_size_r>:
 800d29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a0:	1f18      	subs	r0, r3, #4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	bfbc      	itt	lt
 800d2a6:	580b      	ldrlt	r3, [r1, r0]
 800d2a8:	18c0      	addlt	r0, r0, r3
 800d2aa:	4770      	bx	lr

0800d2ac <abort>:
 800d2ac:	b508      	push	{r3, lr}
 800d2ae:	2006      	movs	r0, #6
 800d2b0:	f000 f82c 	bl	800d30c <raise>
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	f7f5 fc6d 	bl	8002b94 <_exit>

0800d2ba <_raise_r>:
 800d2ba:	291f      	cmp	r1, #31
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	4604      	mov	r4, r0
 800d2c0:	460d      	mov	r5, r1
 800d2c2:	d904      	bls.n	800d2ce <_raise_r+0x14>
 800d2c4:	2316      	movs	r3, #22
 800d2c6:	6003      	str	r3, [r0, #0]
 800d2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2cc:	bd38      	pop	{r3, r4, r5, pc}
 800d2ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2d0:	b112      	cbz	r2, 800d2d8 <_raise_r+0x1e>
 800d2d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2d6:	b94b      	cbnz	r3, 800d2ec <_raise_r+0x32>
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f000 f831 	bl	800d340 <_getpid_r>
 800d2de:	462a      	mov	r2, r5
 800d2e0:	4601      	mov	r1, r0
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2e8:	f000 b818 	b.w	800d31c <_kill_r>
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d00a      	beq.n	800d306 <_raise_r+0x4c>
 800d2f0:	1c59      	adds	r1, r3, #1
 800d2f2:	d103      	bne.n	800d2fc <_raise_r+0x42>
 800d2f4:	2316      	movs	r3, #22
 800d2f6:	6003      	str	r3, [r0, #0]
 800d2f8:	2001      	movs	r0, #1
 800d2fa:	e7e7      	b.n	800d2cc <_raise_r+0x12>
 800d2fc:	2400      	movs	r4, #0
 800d2fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d302:	4628      	mov	r0, r5
 800d304:	4798      	blx	r3
 800d306:	2000      	movs	r0, #0
 800d308:	e7e0      	b.n	800d2cc <_raise_r+0x12>
	...

0800d30c <raise>:
 800d30c:	4b02      	ldr	r3, [pc, #8]	; (800d318 <raise+0xc>)
 800d30e:	4601      	mov	r1, r0
 800d310:	6818      	ldr	r0, [r3, #0]
 800d312:	f7ff bfd2 	b.w	800d2ba <_raise_r>
 800d316:	bf00      	nop
 800d318:	2000001c 	.word	0x2000001c

0800d31c <_kill_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4d07      	ldr	r5, [pc, #28]	; (800d33c <_kill_r+0x20>)
 800d320:	2300      	movs	r3, #0
 800d322:	4604      	mov	r4, r0
 800d324:	4608      	mov	r0, r1
 800d326:	4611      	mov	r1, r2
 800d328:	602b      	str	r3, [r5, #0]
 800d32a:	f7f5 fc23 	bl	8002b74 <_kill>
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	d102      	bne.n	800d338 <_kill_r+0x1c>
 800d332:	682b      	ldr	r3, [r5, #0]
 800d334:	b103      	cbz	r3, 800d338 <_kill_r+0x1c>
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	bd38      	pop	{r3, r4, r5, pc}
 800d33a:	bf00      	nop
 800d33c:	20015ad0 	.word	0x20015ad0

0800d340 <_getpid_r>:
 800d340:	f7f5 bc10 	b.w	8002b64 <_getpid>

0800d344 <_init>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	bf00      	nop
 800d348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34a:	bc08      	pop	{r3}
 800d34c:	469e      	mov	lr, r3
 800d34e:	4770      	bx	lr

0800d350 <_fini>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr
