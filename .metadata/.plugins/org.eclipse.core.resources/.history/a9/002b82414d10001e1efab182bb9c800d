#include <stdint.h>
#include "main.h"
#include "FreeRTOS.h"
#include "task_WIFI.h"
#include <stdio.h>
#include <string.h>
#include "tasks.h"
#include "semphr.h"
#include "task_COMM.h"

uint32_t global_wifi_it;
uint32_t global_wifi_ready;

uint8_t aux_buff_WIFI[2048];
uint8_t buff_WIFI_response[2048];

void WIFI_RESET(void){
	// RESET
	unsigned int ct;
	uint32_t global_wifi_ready = 0;
	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
	for (ct=0;ct<1000000;ct++);
	HAL_UART_Init(&huart1);
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);

	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_SET);

	vTaskDelay(1000/portTICK_RATE_MS );
   	HAL_UART_DMAStop(&huart1);
	printf("XXXXX %s",buff_recv);
	printf("XXXXX\r\n\n\n\n");
}


void WIFI_Boot(void)

{
	unsigned int ct;

 	printf("Reseting...\r\n");

 	WIFI_RESET();
 	printf("Init...\r\n");

 	HAL_UART_Init(&huart1);

 	// version
 	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT\r\n",strlen("AT\r\n"),10000);
	 vTaskDelay(100/portTICK_RATE_MS );
 	HAL_UART_DMAStop(&huart1);
	printf("1: %s",buff_recv);


	// version
	/*for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+GMR\r\n",strlen("AT+GMR\r\n"),10000);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
	 vTaskDelay(1000/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);

	printf("2: %s",buff_recv);
*/

	// Pon en modo station=1,  station+access_point=3
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
	 vTaskDelay(100/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	printf("3: %s",buff_recv);

	// Programa la contraseña del access-point
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1,( unsigned char *) "AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n",strlen("AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n"),10000);
	vTaskDelay(5000/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	printf("4: %s",buff_recv);

	/*// verifica si hay IP
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
	vTaskDelay(5000/portTICK_RATE_MS );
	while(buff_recv[0] == 0);
	HAL_UART_DMAStop(&huart1);
	printf("5: %s",buff_recv);*/

	global_wifi_ready = 1;
}

int checkWIFI() {
	int ct;
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
	vTaskDelay(2000/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	printf("5: %s",buff_recv);


	/*
	 * 5: AT+CIFSR
		+CIFSR:STAIP,"0.0.0.0"
		+CIFSR:STAMAC,"c8:c9:a3:c5:ef:78"
	 * */


	if (buff_recv[0] != 0) {
		return 1;
	}
	return 0;
}


uint8_t * ESP_Send_Request(uint8_t * dst_address, uint32_t dst_port, uint8_t * request){
    int ct;

	// abrir conexión con
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	sprintf(( char *)aux_buff_WIFI,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",dst_address,(int)dst_port);
	HAL_UART_Transmit(&huart1, ( unsigned char *) aux_buff_WIFI,strlen((const char *)aux_buff_WIFI),10000);
	vTaskDelay(200/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	// %s",buff_recv);

	printf("Connection OPEN\n\n\r");
	// enviar una peticion HTTP

	int lc=strlen((const char *)request);
	sprintf((char *)aux_buff_WIFI,"AT+CIPSEND=%d\r\n",lc);
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1,( const uint8_t *)aux_buff_WIFI,strlen((const char *)aux_buff_WIFI),10000);
	vTaskDelay(200/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	//printf("7: %s",buff_recv);
	// ahora HTTP

	for (ct=0;ct<2048;ct++) buff_WIFI_response[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_WIFI_response,2048);
	HAL_UART_Transmit(&huart1, request,strlen( (const char *)request),10000);
	vTaskDelay(2000/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	//printf("8: %s",buff_WIFI_response);

	// cerrar conexión

	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CIPCLOSE\r\n",strlen("AT+CIPCLOSE\r\n"),10000);
	vTaskDelay(200/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	//printf("9: %s",buff_recv);

	COMM_request.result = 1;

	return buff_WIFI_response;
}

