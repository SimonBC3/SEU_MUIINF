#include <stdint.h>
#include "task_COMM.h"
#include "FreeRTOS.h"
#include <stdio.h>
#include "cmsis_os.h"
#include <stdlib.h>
#include "semphr.h"
#include "tasks.h"
#include <stdio.h>
#include "cmsis_os.h"
#include <stdlib.h>

#include "semphr.h"
#include <string.h>

#include <task.h>
#include "HW.c"
#include "task_CONSOLE.h"
#include "task_WRITE.h"
#include "task_TIME.h"


#include "cJSON.h"

void WRITE(){

	printf("WRITE!");
	int signal;
	char* sensorName = "SensorSEU_SBC00";
	char alarmChar;
	if (sensor == 0) {
		alarmChar = getAlarmChar(lumValue);
	} else {
		alarmChar = getAlarmChar(tempValue);
	}

	char* json;
	char jsonTemplate[] = "{\"contextResponses\":[{\"contextElement\":{\"type\":\"Sensor\",\"isPattern\":\"false\",\"id\":\"%s\",\"attributes\":[{\"name\":\"Alarma\",\"type\":\"boolean\",\"value\":\"%s\"},{\"name\":\"Alarma_src\",\"type\":\"string\",\"value\":\"%s\"},{\"name\":\"IntensidadLuz\",\"type\":\"floatArray\",\"value\":\"%f\"},{\"name\":\"Temperatura\",\"type\":\"floatArray\",\"value\":\"%f\"}]},\"statusCode\":{\"code\":\"200\",\"reasonPhrase\":\"OK\"}}]}\r\n";
	sprintf(json, jsonTemplate, sensorName, alarmChar,sensorName, lumValue, tempValue);

	char* request;
	char requestTemplate[] = "POST /v1/updateContext HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: %d\r\n\r\n %s";
	sprintf(request, requestTemplate, strlen(json), json);
	signal=1;
	do {
		if (COMM_request.command==0){ //nada quiere nada
			COMM_request.command=1;
			COMM_request.result=0;
			COMM_request.dst_port=1026;
			COMM_request.dst_address=(uint8_t *)"pperez-seu-or.disca.upv.es";
			COMM_request.HTTP_request=(uint8_t *) request;
			signal=0;
		}
	}
	while(signal);


	COMM_request.HTTP_response = ESP_Send_Request(COMM_request.dst_address, COMM_request.dst_port, COMM_request.HTTP_request);

	printf("\n\nTrying to read result\n\n\r");
	while(COMM_request.result==0);

	printf("\n\nParsing res \n\n\r");
	printf("\n\n WRITE reponse buffer %s\n\n", (const char *)COMM_request.HTTP_response);

	COMM_request.command=0;
	COMM_request.result=0;


  	vTaskDelay(10/portTICK_RATE_MS );
	global_time_it++;
}

char getAlarmChar(float alarmValue) {
	if(alarmValue >= trigger) {
		return 'V';
	} else {
		return 'F';
	}
}
