
Proy_SEU_IoT_00PROF03bis42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08010298  08010298  00020298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011060  08011060  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011060  08011060  00021060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011068  08011068  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011068  08011068  00021068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801106c  0801106c  0002106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08011070  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015f90  200001f0  08011260  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016180  08011260  00036180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e299  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046c8  00000000  00000000  0004e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00052b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  000541b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf03  00000000  00000000  000556a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c71f  00000000  00000000  000725ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a16ab  00000000  00000000  0008ecca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071ac  00000000  00000000  001303c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801027c 	.word	0x0801027c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801027c 	.word	0x0801027c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <Task_HW>:
extern BUFF_BUFFER_t * IObuff_rx;




void Task_HW( void *pvParameters ){
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b0a3      	sub	sp, #140	; 0x8c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]


	int t,hw_two_buttons;
	uint32_t valueAD;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001030:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
	GPIO_PinState switch_1, switch_2, switch_1_ant, switch_2_ant;
	char buff[80];
    float aux;
    TickType_t last_time_global_mode_change;

    hw_two_buttons=0;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    last_time_global_mode_change=0;
 8001044:	2300      	movs	r3, #0
 8001046:	677b      	str	r3, [r7, #116]	; 0x74
	switch_1_ant = GPIO_PIN_SET;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	switch_2_ant = GPIO_PIN_SET;
 800104e:	2301      	movs	r3, #1
 8001050:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	global_hw_it = 0;
 8001054:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <Task_HW+0x2a8>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]

	while (1) {
		global_hw_it++;
 800105a:	4b9d      	ldr	r3, [pc, #628]	; (80012d0 <Task_HW+0x2a8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	4a9b      	ldr	r2, [pc, #620]	; (80012d0 <Task_HW+0x2a8>)
 8001062:	6013      	str	r3, [r2, #0]

		//leer los microinterruptores
		switch_1 = HAL_GPIO_ReadPin(PULSADOR1_GPIO_Port, PULSADOR1_Pin);
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	489b      	ldr	r0, [pc, #620]	; (80012d4 <Task_HW+0x2ac>)
 8001068:	f005 fe96 	bl	8006d98 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		switch_2 = HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin);
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4898      	ldr	r0, [pc, #608]	; (80012d8 <Task_HW+0x2b0>)
 8001076:	f005 fe8f 	bl	8006d98 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

		global_switch_1 = switch_1;
 8001080:	4a96      	ldr	r2, [pc, #600]	; (80012dc <Task_HW+0x2b4>)
 8001082:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001086:	7013      	strb	r3, [r2, #0]
		global_switch_2 = switch_2;
 8001088:	4a95      	ldr	r2, [pc, #596]	; (80012e0 <Task_HW+0x2b8>)
 800108a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800108e:	7013      	strb	r3, [r2, #0]
		//Consola ANSI
		//cambiar de modo conectado a modo clon si protección crear condiciones de carrera en las tareas de comunicacion.

		// detectar situaciones de bloqueo y realizar un reset del micro.

		if ((switch_1 == GPIO_PIN_RESET) && (switch_2 == GPIO_PIN_RESET))
 8001090:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001094:	2b00      	cmp	r3, #0
 8001096:	d121      	bne.n	80010dc <Task_HW+0xb4>
 8001098:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800109c:	2b00      	cmp	r3, #0
 800109e:	d11d      	bne.n	80010dc <Task_HW+0xb4>
		{
			hw_two_buttons++;
 80010a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010a4:	3301      	adds	r3, #1
 80010a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (hw_two_buttons>20000){ // sin retardos
 80010aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010ae:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010b2:	4293      	cmp	r3, r2
 80010b4:	dd15      	ble.n	80010e2 <Task_HW+0xba>
				 global_mode=10;
 80010b6:	4b8b      	ldr	r3, [pc, #556]	; (80012e4 <Task_HW+0x2bc>)
 80010b8:	220a      	movs	r2, #10
 80010ba:	701a      	strb	r2, [r3, #0]
				 IObuff->puts(IObuff,(BUFF_ITEM_t *)"\r\n*** RESETTING ***\r\n      ",20);
 80010bc:	4b8a      	ldr	r3, [pc, #552]	; (80012e8 <Task_HW+0x2c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	4a89      	ldr	r2, [pc, #548]	; (80012e8 <Task_HW+0x2c0>)
 80010c4:	6810      	ldr	r0, [r2, #0]
 80010c6:	2214      	movs	r2, #20
 80010c8:	4988      	ldr	r1, [pc, #544]	; (80012ec <Task_HW+0x2c4>)
 80010ca:	4798      	blx	r3
				 ESP8266_Boot();
 80010cc:	f001 f932 	bl	8002334 <ESP8266_Boot>
				 HAL_NVIC_SystemReset();
 80010d0:	f005 f8ed 	bl	80062ae <HAL_NVIC_SystemReset>
				 hw_two_buttons=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (hw_two_buttons>20000){ // sin retardos
 80010da:	e002      	b.n	80010e2 <Task_HW+0xba>
			}
		}
		else{

			hw_two_buttons=0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		}


		if (switch_2 == GPIO_PIN_RESET) {
 80010e2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d12d      	bne.n	8001146 <Task_HW+0x11e>
			if ((switch_1_ant == GPIO_PIN_SET) && (switch_1 == GPIO_PIN_RESET)) {
 80010ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d129      	bne.n	8001146 <Task_HW+0x11e>
 80010f2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d125      	bne.n	8001146 <Task_HW+0x11e>
				if ((xTaskGetTickCount()-last_time_global_mode_change)>(10/portTICK_RATE_MS)){
 80010fa:	f008 fe59 	bl	8009db0 <xTaskGetTickCount>
 80010fe:	4602      	mov	r2, r0
 8001100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b0a      	cmp	r3, #10
 8001106:	d91e      	bls.n	8001146 <Task_HW+0x11e>
				last_time_global_mode_change = xTaskGetTickCount();
 8001108:	f008 fe52 	bl	8009db0 <xTaskGetTickCount>
 800110c:	6778      	str	r0, [r7, #116]	; 0x74
				if ((global_mode!=2)&&(global_mode!=3))
 800110e:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <Task_HW+0x2bc>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d014      	beq.n	8001140 <Task_HW+0x118>
 8001116:	4b73      	ldr	r3, [pc, #460]	; (80012e4 <Task_HW+0x2bc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d010      	beq.n	8001140 <Task_HW+0x118>
					global_mode = (global_mode + 1) % 5; // 0 a 4
 800111e:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <Task_HW+0x2bc>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <Task_HW+0x2c8>)
 8001126:	fb83 1302 	smull	r1, r3, r3, r2
 800112a:	1059      	asrs	r1, r3, #1
 800112c:	17d3      	asrs	r3, r2, #31
 800112e:	1ac9      	subs	r1, r1, r3
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	1ad1      	subs	r1, r2, r3
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <Task_HW+0x2bc>)
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e002      	b.n	8001146 <Task_HW+0x11e>
				else
					global_try_change_mode=1;
 8001140:	4b6c      	ldr	r3, [pc, #432]	; (80012f4 <Task_HW+0x2cc>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (switch_2 == GPIO_PIN_SET) {
 8001146:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800114a:	2b01      	cmp	r3, #1
 800114c:	d112      	bne.n	8001174 <Task_HW+0x14c>
			if ((switch_1_ant == GPIO_PIN_SET) && (switch_1 == GPIO_PIN_RESET)) {
 800114e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10e      	bne.n	8001174 <Task_HW+0x14c>
 8001156:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10a      	bne.n	8001174 <Task_HW+0x14c>
				global_sensor = (global_sensor + 1) % 2; // 0 a 1
 800115e:	4b66      	ldr	r3, [pc, #408]	; (80012f8 <Task_HW+0x2d0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	bfb8      	it	lt
 800116c:	425b      	neglt	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <Task_HW+0x2d0>)
 8001172:	701a      	strb	r2, [r3, #0]

			}
		}

		if (global_mode==4) // modo local cambia global_sensor
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <Task_HW+0x2bc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b04      	cmp	r3, #4
 800117a:	d13d      	bne.n	80011f8 <Task_HW+0x1d0>
				if (switch_2 == GPIO_PIN_SET) {
 800117c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001180:	2b01      	cmp	r3, #1
 8001182:	d139      	bne.n	80011f8 <Task_HW+0x1d0>
					global_sensor_level_alarm[global_sel_alarm_sensor]=map(global_pot,0.0,3.3,global_sensor_level_max[global_sel_alarm_sensor],global_sensor_level_min[global_sel_alarm_sensor]);
 8001184:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <Task_HW+0x2d4>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <Task_HW+0x2d8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <Task_HW+0x2dc>)
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	4b59      	ldr	r3, [pc, #356]	; (8001300 <Task_HW+0x2d8>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4a5a      	ldr	r2, [pc, #360]	; (8001308 <Task_HW+0x2e0>)
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	edd3 6a00 	vldr	s13, [r3]
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <Task_HW+0x2d8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461c      	mov	r4, r3
 80011ac:	eeb0 2a66 	vmov.f32	s4, s13
 80011b0:	eef0 1a47 	vmov.f32	s3, s14
 80011b4:	ed9f 1a55 	vldr	s2, [pc, #340]	; 800130c <Task_HW+0x2e4>
 80011b8:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001310 <Task_HW+0x2e8>
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	f003 feac 	bl	8004f1c <map>
 80011c4:	eef0 7a40 	vmov.f32	s15, s0
 80011c8:	4a52      	ldr	r2, [pc, #328]	; (8001314 <Task_HW+0x2ec>)
 80011ca:	00a3      	lsls	r3, r4, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	edc3 7a00 	vstr	s15, [r3]
					if ((switch_1_ant == GPIO_PIN_SET) && (switch_1 == GPIO_PIN_RESET)) {
 80011d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10e      	bne.n	80011f8 <Task_HW+0x1d0>
 80011da:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10a      	bne.n	80011f8 <Task_HW+0x1d0>
						global_sel_alarm_sensor = (global_sel_alarm_sensor  + 1) % 2; // 0 a 1
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <Task_HW+0x2d8>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	bfb8      	it	lt
 80011f0:	425b      	neglt	r3, r3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b42      	ldr	r3, [pc, #264]	; (8001300 <Task_HW+0x2d8>)
 80011f6:	701a      	strb	r2, [r3, #0]
					}
				}


		for (t = 0; t < 8; t++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011fe:	e09f      	b.n	8001340 <Task_HW+0x318>
			switch (t) {
 8001200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001204:	2b07      	cmp	r3, #7
 8001206:	f200 8096 	bhi.w	8001336 <Task_HW+0x30e>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <Task_HW+0x1e8>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001231 	.word	0x08001231
 8001214:	08001247 	.word	0x08001247
 8001218:	0800125f 	.word	0x0800125f
 800121c:	08001277 	.word	0x08001277
 8001220:	0800128d 	.word	0x0800128d
 8001224:	080012a3 	.word	0x080012a3
 8001228:	080012b9 	.word	0x080012b9
 800122c:	08001321 	.word	0x08001321
			case 0:
				HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, global_LEDS[t]);
 8001230:	4a39      	ldr	r2, [pc, #228]	; (8001318 <Task_HW+0x2f0>)
 8001232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	2110      	movs	r1, #16
 800123e:	4826      	ldr	r0, [pc, #152]	; (80012d8 <Task_HW+0x2b0>)
 8001240:	f005 fdc2 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 8001244:	e077      	b.n	8001336 <Task_HW+0x30e>
			case 1:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, global_LEDS[t]);
 8001246:	4a34      	ldr	r2, [pc, #208]	; (8001318 <Task_HW+0x2f0>)
 8001248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <Task_HW+0x2b0>)
 8001258:	f005 fdb6 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 800125c:	e06b      	b.n	8001336 <Task_HW+0x30e>
			case 2:
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, global_LEDS[t]);
 800125e:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <Task_HW+0x2f0>)
 8001260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	482b      	ldr	r0, [pc, #172]	; (800131c <Task_HW+0x2f4>)
 8001270:	f005 fdaa 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 8001274:	e05f      	b.n	8001336 <Task_HW+0x30e>
			case 3:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, global_LEDS[t]);
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <Task_HW+0x2f0>)
 8001278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	2120      	movs	r1, #32
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <Task_HW+0x2b0>)
 8001286:	f005 fd9f 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 800128a:	e054      	b.n	8001336 <Task_HW+0x30e>
			case 4:
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, global_LEDS[t]);
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <Task_HW+0x2f0>)
 800128e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	2108      	movs	r1, #8
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <Task_HW+0x2b0>)
 800129c:	f005 fd94 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 80012a0:	e049      	b.n	8001336 <Task_HW+0x30e>
			case 5:
				HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, global_LEDS[t]);
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <Task_HW+0x2f0>)
 80012a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	2140      	movs	r1, #64	; 0x40
 80012b0:	481a      	ldr	r0, [pc, #104]	; (800131c <Task_HW+0x2f4>)
 80012b2:	f005 fd89 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 80012b6:	e03e      	b.n	8001336 <Task_HW+0x30e>
			case 6:
				HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, global_LEDS[t]);
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <Task_HW+0x2f0>)
 80012ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	2101      	movs	r1, #1
 80012c6:	4804      	ldr	r0, [pc, #16]	; (80012d8 <Task_HW+0x2b0>)
 80012c8:	f005 fd7e 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 80012cc:	e033      	b.n	8001336 <Task_HW+0x30e>
 80012ce:	bf00      	nop
 80012d0:	20000490 	.word	0x20000490
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	200004f1 	.word	0x200004f1
 80012e0:	200004f2 	.word	0x200004f2
 80012e4:	20000568 	.word	0x20000568
 80012e8:	200016c8 	.word	0x200016c8
 80012ec:	08010298 	.word	0x08010298
 80012f0:	66666667 	.word	0x66666667
 80012f4:	2000056a 	.word	0x2000056a
 80012f8:	200004c0 	.word	0x200004c0
 80012fc:	200004e4 	.word	0x200004e4
 8001300:	2000056b 	.word	0x2000056b
 8001304:	200004c4 	.word	0x200004c4
 8001308:	200004cc 	.word	0x200004cc
 800130c:	40533333 	.word	0x40533333
 8001310:	00000000 	.word	0x00000000
 8001314:	200004d4 	.word	0x200004d4
 8001318:	200004e8 	.word	0x200004e8
 800131c:	40020000 	.word	0x40020000
			case 7:
				HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, global_LEDS[t]);
 8001320:	4ac3      	ldr	r2, [pc, #780]	; (8001630 <Task_HW+0x608>)
 8001322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	2120      	movs	r1, #32
 800132e:	48c1      	ldr	r0, [pc, #772]	; (8001634 <Task_HW+0x60c>)
 8001330:	f005 fd4a 	bl	8006dc8 <HAL_GPIO_WritePin>
				break;
 8001334:	bf00      	nop
		for (t = 0; t < 8; t++)
 8001336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133a:	3301      	adds	r3, #1
 800133c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001344:	2b07      	cmp	r3, #7
 8001346:	f77f af5b 	ble.w	8001200 <Task_HW+0x1d8>
			}

	 		HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin, global_buzzer);
 800134a:	4bbb      	ldr	r3, [pc, #748]	; (8001638 <Task_HW+0x610>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	48b8      	ldr	r0, [pc, #736]	; (8001634 <Task_HW+0x60c>)
 8001354:	f005 fd38 	bl	8006dc8 <HAL_GPIO_WritePin>

	 		if (global_mode!=3)//clon no toma medidas de sensores
 8001358:	4bb8      	ldr	r3, [pc, #736]	; (800163c <Task_HW+0x614>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b03      	cmp	r3, #3
 800135e:	f000 810b 	beq.w	8001578 <Task_HW+0x550>
	 		{
			// POT

			// configuracion del canal de entrada A/D
			sConfig.Channel = ADC_CHANNEL_4;
 8001362:	2304      	movs	r3, #4
 8001364:	65fb      	str	r3, [r7, #92]	; 0x5c
			sConfig.Rank = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	663b      	str	r3, [r7, #96]	; 0x60
			sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800136a:	2307      	movs	r3, #7
 800136c:	667b      	str	r3, [r7, #100]	; 0x64

			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800136e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001372:	4619      	mov	r1, r3
 8001374:	48b2      	ldr	r0, [pc, #712]	; (8001640 <Task_HW+0x618>)
 8001376:	f004 fc51 	bl	8005c1c <HAL_ADC_ConfigChannel>
			// Disparo la conversion
			HAL_ADC_Start(&hadc1);
 800137a:	48b1      	ldr	r0, [pc, #708]	; (8001640 <Task_HW+0x618>)
 800137c:	f004 fb02 	bl	8005984 <HAL_ADC_Start>
			// Espero la finalización
			HAL_ADC_PollForConversion(&hadc1, 10000);
 8001380:	f242 7110 	movw	r1, #10000	; 0x2710
 8001384:	48ae      	ldr	r0, [pc, #696]	; (8001640 <Task_HW+0x618>)
 8001386:	f004 fbb1 	bl	8005aec <HAL_ADC_PollForConversion>
			// Leo el valor de la conversión 4095 y 0
			valueAD = HAL_ADC_GetValue(&hadc1);
 800138a:	48ad      	ldr	r0, [pc, #692]	; (8001640 <Task_HW+0x618>)
 800138c:	f004 fc39 	bl	8005c02 <HAL_ADC_GetValue>
 8001390:	66f8      	str	r0, [r7, #108]	; 0x6c

			global_pot=valueAD * 3.3 / 4095.0;
 8001392:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001394:	f7ff f8ce 	bl	8000534 <__aeabi_ui2d>
 8001398:	a393      	add	r3, pc, #588	; (adr r3, 80015e8 <Task_HW+0x5c0>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff f943 	bl	8000628 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	a391      	add	r3, pc, #580	; (adr r3, 80015f0 <Task_HW+0x5c8>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa64 	bl	800087c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc2c 	bl	8000c18 <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4aa0      	ldr	r2, [pc, #640]	; (8001644 <Task_HW+0x61c>)
 80013c4:	6013      	str	r3, [r2, #0]

			// LDR

			// configuracion del canal de entrada A/D
			sConfig.Channel = ADC_CHANNEL_0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	65fb      	str	r3, [r7, #92]	; 0x5c
			sConfig.Rank = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	663b      	str	r3, [r7, #96]	; 0x60
			sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013ce:	2307      	movs	r3, #7
 80013d0:	667b      	str	r3, [r7, #100]	; 0x64

			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80013d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d6:	4619      	mov	r1, r3
 80013d8:	4899      	ldr	r0, [pc, #612]	; (8001640 <Task_HW+0x618>)
 80013da:	f004 fc1f 	bl	8005c1c <HAL_ADC_ConfigChannel>
			// Disparo la conversion
			HAL_ADC_Start(&hadc1);
 80013de:	4898      	ldr	r0, [pc, #608]	; (8001640 <Task_HW+0x618>)
 80013e0:	f004 fad0 	bl	8005984 <HAL_ADC_Start>
			// Espero la finalización
			HAL_ADC_PollForConversion(&hadc1, 10000);
 80013e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80013e8:	4895      	ldr	r0, [pc, #596]	; (8001640 <Task_HW+0x618>)
 80013ea:	f004 fb7f 	bl	8005aec <HAL_ADC_PollForConversion>
			// Leo el valor de la conversión 4095 y 0
			valueAD = HAL_ADC_GetValue(&hadc1);
 80013ee:	4894      	ldr	r0, [pc, #592]	; (8001640 <Task_HW+0x618>)
 80013f0:	f004 fc07 	bl	8005c02 <HAL_ADC_GetValue>
 80013f4:	66f8      	str	r0, [r7, #108]	; 0x6c

			aux=(3.1-valueAD * 3.3 / 4095.0)*100.0/3.1;
 80013f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80013f8:	f7ff f89c 	bl	8000534 <__aeabi_ui2d>
 80013fc:	a37a      	add	r3, pc, #488	; (adr r3, 80015e8 <Task_HW+0x5c0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f911 	bl	8000628 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	a378      	add	r3, pc, #480	; (adr r3, 80015f0 <Task_HW+0x5c8>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff fa32 	bl	800087c <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	a176      	add	r1, pc, #472	; (adr r1, 80015f8 <Task_HW+0x5d0>)
 800141e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001422:	f7fe ff49 	bl	80002b8 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <Task_HW+0x620>)
 8001434:	f7ff f8f8 	bl	8000628 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a36d      	add	r3, pc, #436	; (adr r3, 80015f8 <Task_HW+0x5d0>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fa19 	bl	800087c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbe1 	bl	8000c18 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	67bb      	str	r3, [r7, #120]	; 0x78
					if (aux<0.0)
 800145a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800145e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	d502      	bpl.n	800146e <Task_HW+0x446>
						aux=0.0;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	67bb      	str	r3, [r7, #120]	; 0x78
					if (aux>100.0)
 800146e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001472:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800164c <Task_HW+0x624>
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	dd01      	ble.n	8001484 <Task_HW+0x45c>
						aux=100.0;
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <Task_HW+0x628>)
 8001482:	67bb      	str	r3, [r7, #120]	; 0x78

			global_sensor_level[1]=aux;   	   // nivel de sensor
 8001484:	4a73      	ldr	r2, [pc, #460]	; (8001654 <Task_HW+0x62c>)
 8001486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001488:	6053      	str	r3, [r2, #4]

			// Temperatura

			sConfig.Channel = ADC_CHANNEL_1;
 800148a:	2301      	movs	r3, #1
 800148c:	65fb      	str	r3, [r7, #92]	; 0x5c
			sConfig.Rank = 1;
 800148e:	2301      	movs	r3, #1
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
			sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001492:	2307      	movs	r3, #7
 8001494:	667b      	str	r3, [r7, #100]	; 0x64

			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001496:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800149a:	4619      	mov	r1, r3
 800149c:	4868      	ldr	r0, [pc, #416]	; (8001640 <Task_HW+0x618>)
 800149e:	f004 fbbd 	bl	8005c1c <HAL_ADC_ConfigChannel>
			// Disparo la conversion
			HAL_ADC_Start(&hadc1);
 80014a2:	4867      	ldr	r0, [pc, #412]	; (8001640 <Task_HW+0x618>)
 80014a4:	f004 fa6e 	bl	8005984 <HAL_ADC_Start>
			// Espero la finalización
			HAL_ADC_PollForConversion(&hadc1, 10000);
 80014a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80014ac:	4864      	ldr	r0, [pc, #400]	; (8001640 <Task_HW+0x618>)
 80014ae:	f004 fb1d 	bl	8005aec <HAL_ADC_PollForConversion>
			// Leo el valor de la conversión 4095 y 0
			valueAD = HAL_ADC_GetValue(&hadc1);
 80014b2:	4863      	ldr	r0, [pc, #396]	; (8001640 <Task_HW+0x618>)
 80014b4:	f004 fba5 	bl	8005c02 <HAL_ADC_GetValue>
 80014b8:	66f8      	str	r0, [r7, #108]	; 0x6c

			aux = BETA
					/ (log(
							(-10000.0 * 3.3 / (valueAD * 3.3 / 4095.9 - 3.3)
 80014ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80014bc:	f7ff f83a 	bl	8000534 <__aeabi_ui2d>
 80014c0:	a349      	add	r3, pc, #292	; (adr r3, 80015e8 <Task_HW+0x5c0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f8af 	bl	8000628 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	a34b      	add	r3, pc, #300	; (adr r3, 8001600 <Task_HW+0x5d8>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f9d0 	bl	800087c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	a340      	add	r3, pc, #256	; (adr r3, 80015e8 <Task_HW+0x5c0>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7fe fee5 	bl	80002b8 <__aeabi_dsub>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	a145      	add	r1, pc, #276	; (adr r1, 8001608 <Task_HW+0x5e0>)
 80014f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
									- 10000.0) / R25) + BETA / T25) - 273.18;
 8001504:	a342      	add	r3, pc, #264	; (adr r3, 8001610 <Task_HW+0x5e8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe fed5 	bl	80002b8 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
					/ (log(
 8001516:	a33e      	add	r3, pc, #248	; (adr r3, 8001610 <Task_HW+0x5e8>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f9ae 	bl	800087c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ec43 2b17 	vmov	d7, r2, r3
 8001528:	eeb0 0a47 	vmov.f32	s0, s14
 800152c:	eef0 0a67 	vmov.f32	s1, s15
 8001530:	f00e fcaa 	bl	800fe88 <log>
 8001534:	ec51 0b10 	vmov	r0, r1, d0
									- 10000.0) / R25) + BETA / T25) - 273.18;
 8001538:	a337      	add	r3, pc, #220	; (adr r3, 8001618 <Task_HW+0x5f0>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7fe febd 	bl	80002bc <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
					/ (log(
 8001546:	a136      	add	r1, pc, #216	; (adr r1, 8001620 <Task_HW+0x5f8>)
 8001548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800154c:	f7ff f996 	bl	800087c <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
									- 10000.0) / R25) + BETA / T25) - 273.18;
 8001558:	a333      	add	r3, pc, #204	; (adr r3, 8001628 <Task_HW+0x600>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe feab 	bl	80002b8 <__aeabi_dsub>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
			aux = BETA
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb55 	bl	8000c18 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	67bb      	str	r3, [r7, #120]	; 0x78
			global_sensor_level[0]=aux;   	   // nivel de sensor
 8001572:	4a38      	ldr	r2, [pc, #224]	; (8001654 <Task_HW+0x62c>)
 8001574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001576:	6013      	str	r3, [r2, #0]
	 		}

	// gestión de alarmas
		if (global_alarm_trigger_value=='1'){
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <Task_HW+0x630>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b31      	cmp	r3, #49	; 0x31
 800157e:	d10f      	bne.n	80015a0 <Task_HW+0x578>
				global_alarm_trigger_value='0'; // borra el disparo
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <Task_HW+0x630>)
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	701a      	strb	r2, [r3, #0]
				if (((xTaskGetTickCount()-global_alarm_trigger_time)/portTICK_RATE_MS)>10000)
 8001586:	f008 fc13 	bl	8009db0 <xTaskGetTickCount>
 800158a:	4602      	mov	r2, r0
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <Task_HW+0x634>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f242 7210 	movw	r2, #10000	; 0x2710
 8001596:	4293      	cmp	r3, r2
 8001598:	d902      	bls.n	80015a0 <Task_HW+0x578>
				/* solo se dispara si han pasado más de 10 segundos despues de la desconexion */
					global_buzzer=1;
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <Task_HW+0x610>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
			}

		if (global_buzzer==1){
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <Task_HW+0x610>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d116      	bne.n	80015d6 <Task_HW+0x5ae>
			if ((switch_2_ant == GPIO_PIN_SET) && (switch_2 == GPIO_PIN_RESET)) {
 80015a8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d112      	bne.n	80015d6 <Task_HW+0x5ae>
 80015b0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10e      	bne.n	80015d6 <Task_HW+0x5ae>
				/*al pulsar boton derecha se apaga y se toma el tiempo, no se puede encender si han pasado menos de 10 segundos*/
				global_alarm_trigger_time=xTaskGetTickCount();
 80015b8:	f008 fbfa 	bl	8009db0 <xTaskGetTickCount>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <Task_HW+0x634>)
 80015c0:	6013      	str	r3, [r2, #0]
				global_buzzer=0;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <Task_HW+0x610>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
				if (global_mode==3)
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <Task_HW+0x614>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d102      	bne.n	80015d6 <Task_HW+0x5ae>
					global_alarm_remote_disconnect=1;
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <Task_HW+0x638>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]




		//detección de flancos
			switch_2_ant = switch_2;
 80015d6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80015da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			switch_1_ant = switch_1;
 80015de:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80015e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		global_hw_it++;
 80015e6:	e538      	b.n	800105a <Task_HW+0x32>
 80015e8:	66666666 	.word	0x66666666
 80015ec:	400a6666 	.word	0x400a6666
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40affe00 	.word	0x40affe00
 80015f8:	cccccccd 	.word	0xcccccccd
 80015fc:	4008cccc 	.word	0x4008cccc
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	40afffcc 	.word	0x40afffcc
 8001608:	00000000 	.word	0x00000000
 800160c:	c0e01d00 	.word	0xc0e01d00
 8001610:	00000000 	.word	0x00000000
 8001614:	40c38800 	.word	0x40c38800
 8001618:	cde627c2 	.word	0xcde627c2
 800161c:	402a294c 	.word	0x402a294c
 8001620:	00000000 	.word	0x00000000
 8001624:	40ae7800 	.word	0x40ae7800
 8001628:	47ae147b 	.word	0x47ae147b
 800162c:	407112e1 	.word	0x407112e1
 8001630:	200004e8 	.word	0x200004e8
 8001634:	40020000 	.word	0x40020000
 8001638:	200004f0 	.word	0x200004f0
 800163c:	20000568 	.word	0x20000568
 8001640:	20000238 	.word	0x20000238
 8001644:	200004e4 	.word	0x200004e4
 8001648:	40590000 	.word	0x40590000
 800164c:	42c80000 	.word	0x42c80000
 8001650:	42c80000 	.word	0x42c80000
 8001654:	200004dc 	.word	0x200004dc
 8001658:	200004f4 	.word	0x200004f4
 800165c:	200004f8 	.word	0x200004f8
 8001660:	200004fc 	.word	0x200004fc

08001664 <print_bufferln>:
	//vTaskDelay(1/portTICK_RATE_MS );
	}
}


void print_bufferln(char * name,char * cad){
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
int res;
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)name,strlen(name));
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <print_bufferln+0x78>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691c      	ldr	r4, [r3, #16]
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <print_bufferln+0x78>)
 8001676:	681d      	ldr	r5, [r3, #0]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7fe fdbb 	bl	80001f4 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4628      	mov	r0, r5
 8001686:	47a0      	blx	r4
 8001688:	4603      	mov	r3, r0
 800168a:	60fb      	str	r3, [r7, #12]
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)": ",2);
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <print_bufferln+0x78>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <print_bufferln+0x78>)
 8001694:	6810      	ldr	r0, [r2, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	4911      	ldr	r1, [pc, #68]	; (80016e0 <print_bufferln+0x7c>)
 800169a:	4798      	blx	r3
 800169c:	4603      	mov	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)cad,strlen(cad));
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <print_bufferln+0x78>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691c      	ldr	r4, [r3, #16]
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <print_bufferln+0x78>)
 80016a8:	681d      	ldr	r5, [r3, #0]
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f7fe fda2 	bl	80001f4 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	6839      	ldr	r1, [r7, #0]
 80016b6:	4628      	mov	r0, r5
 80016b8:	47a0      	blx	r4
 80016ba:	4603      	mov	r3, r0
 80016bc:	60fb      	str	r3, [r7, #12]
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"\r\n",2);
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <print_bufferln+0x78>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <print_bufferln+0x78>)
 80016c6:	6810      	ldr	r0, [r2, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4906      	ldr	r1, [pc, #24]	; (80016e4 <print_bufferln+0x80>)
 80016cc:	4798      	blx	r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	60fb      	str	r3, [r7, #12]

}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	bf00      	nop
 80016dc:	200016c8 	.word	0x200016c8
 80016e0:	080102b4 	.word	0x080102b4
 80016e4:	080102b8 	.word	0x080102b8

080016e8 <print_buffer>:

void print_buffer(char * name,char * cad){
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
int res;
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)name,strlen(name));
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <print_buffer+0x64>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691c      	ldr	r4, [r3, #16]
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <print_buffer+0x64>)
 80016fa:	681d      	ldr	r5, [r3, #0]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7fe fd79 	bl	80001f4 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4628      	mov	r0, r5
 800170a:	47a0      	blx	r4
 800170c:	4603      	mov	r3, r0
 800170e:	60fb      	str	r3, [r7, #12]
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)": ",2);
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <print_buffer+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <print_buffer+0x64>)
 8001718:	6810      	ldr	r0, [r2, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <print_buffer+0x68>)
 800171e:	4798      	blx	r3
 8001720:	4603      	mov	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]
	 res=IObuff->puts(IObuff,(BUFF_ITEM_t *)cad,strlen(cad));
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <print_buffer+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691c      	ldr	r4, [r3, #16]
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <print_buffer+0x64>)
 800172c:	681d      	ldr	r5, [r3, #0]
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f7fe fd60 	bl	80001f4 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	4628      	mov	r0, r5
 800173c:	47a0      	blx	r4
 800173e:	4603      	mov	r3, r0
 8001740:	60fb      	str	r3, [r7, #12]
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}
 800174a:	bf00      	nop
 800174c:	200016c8 	.word	0x200016c8
 8001750:	080102b4 	.word	0x080102b4

08001754 <test_function>:
//*****************************************************************
// funcion test
// ****************************************************************


void test_function ( void ){
 8001754:	b580      	push	{r7, lr}
 8001756:	b09e      	sub	sp, #120	; 0x78
 8001758:	af02      	add	r7, sp, #8
int ct,res;
static int it;
float aux;
ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
uint32_t valueAD;
char buffer[80];
GPIO_PinState switch_1,switch_2,switch_1_ant,switch_2_ant;

	if (global_mode!=global_mode_ant){
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <test_function+0x1ac>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <test_function+0x1b0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d010      	beq.n	8001796 <test_function+0x42>
		global_mode_ant=global_mode;
 8001774:	4b62      	ldr	r3, [pc, #392]	; (8001900 <test_function+0x1ac>)
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	4b62      	ldr	r3, [pc, #392]	; (8001904 <test_function+0x1b0>)
 800177a:	701a      	strb	r2, [r3, #0]
	    res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"Modo TEST\r\n",11);
 800177c:	4b62      	ldr	r3, [pc, #392]	; (8001908 <test_function+0x1b4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	4a61      	ldr	r2, [pc, #388]	; (8001908 <test_function+0x1b4>)
 8001784:	6810      	ldr	r0, [r2, #0]
 8001786:	220b      	movs	r2, #11
 8001788:	4960      	ldr	r1, [pc, #384]	; (800190c <test_function+0x1b8>)
 800178a:	4798      	blx	r3
 800178c:	4603      	mov	r3, r0
 800178e:	663b      	str	r3, [r7, #96]	; 0x60
	    it=1;
 8001790:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <test_function+0x1bc>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
	}

	 if ((it%5)==0) ESP8266_Boot();
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <test_function+0x1bc>)
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <test_function+0x1c0>)
 800179c:	fb83 2301 	smull	r2, r3, r3, r1
 80017a0:	105a      	asrs	r2, r3, #1
 80017a2:	17cb      	asrs	r3, r1, #31
 80017a4:	1ad2      	subs	r2, r2, r3
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	1aca      	subs	r2, r1, r3
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d101      	bne.n	80017b6 <test_function+0x62>
 80017b2:	f000 fdbf 	bl	8002334 <ESP8266_Boot>
	 it++;
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <test_function+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <test_function+0x1bc>)
 80017be:	6013      	str	r3, [r2, #0]
	 // D3-D4-D5-D6-D7-D12-A3-D13
	 // PB3 PB5 PB4 PB10 PA8 PA6 PB0 PA5
	 int t,h,j;
     j=0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	667b      	str	r3, [r7, #100]	; 0x64
	 while(j++<1)
 80017c4:	e037      	b.n	8001836 <test_function+0xe2>
	 for (t=0;t<9;t++){
 80017c6:	2300      	movs	r3, #0
 80017c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017ca:	e031      	b.n	8001830 <test_function+0xdc>

     switch (t) {
 80017cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ce:	2b07      	cmp	r3, #7
 80017d0:	dc03      	bgt.n	80017da <test_function+0x86>
 80017d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da04      	bge.n	80017e2 <test_function+0x8e>
 80017d8:	e00c      	b.n	80017f4 <test_function+0xa0>
 80017da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d006      	beq.n	80017ee <test_function+0x9a>
 80017e0:	e008      	b.n	80017f4 <test_function+0xa0>
			     	case 2:
			     	case 3:
			     	case 4:
			     	case 5:
			     	case 6:
			       	case 7:  global_LEDS[t]=1; break;
 80017e2:	4a4d      	ldr	r2, [pc, #308]	; (8001918 <test_function+0x1c4>)
 80017e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017e6:	4413      	add	r3, r2
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e002      	b.n	80017f4 <test_function+0xa0>
			       	case 8:  global_buzzer=1;
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <test_function+0x1c8>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
			     }
     for (h=0;h<500000;h++);
 80017f4:	2300      	movs	r3, #0
 80017f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80017f8:	e002      	b.n	8001800 <test_function+0xac>
 80017fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017fc:	3301      	adds	r3, #1
 80017fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8001800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001802:	4a47      	ldr	r2, [pc, #284]	; (8001920 <test_function+0x1cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	ddf8      	ble.n	80017fa <test_function+0xa6>
			    for (h=0;h<8;h++) global_LEDS[h]=0;
 8001808:	2300      	movs	r3, #0
 800180a:	66bb      	str	r3, [r7, #104]	; 0x68
 800180c:	e007      	b.n	800181e <test_function+0xca>
 800180e:	4a42      	ldr	r2, [pc, #264]	; (8001918 <test_function+0x1c4>)
 8001810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001812:	4413      	add	r3, r2
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800181a:	3301      	adds	r3, #1
 800181c:	66bb      	str	r3, [r7, #104]	; 0x68
 800181e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001820:	2b07      	cmp	r3, #7
 8001822:	ddf4      	ble.n	800180e <test_function+0xba>
			    global_buzzer=0;
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <test_function+0x1c8>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	 for (t=0;t<9;t++){
 800182a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800182c:	3301      	adds	r3, #1
 800182e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001832:	2b08      	cmp	r3, #8
 8001834:	ddca      	ble.n	80017cc <test_function+0x78>
	 while(j++<1)
 8001836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	667a      	str	r2, [r7, #100]	; 0x64
 800183c:	2b00      	cmp	r3, #0
 800183e:	ddc2      	ble.n	80017c6 <test_function+0x72>

			    }

		// POT
	    res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"Modo TEST\r\n",11);
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <test_function+0x1b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <test_function+0x1b4>)
 8001848:	6810      	ldr	r0, [r2, #0]
 800184a:	220b      	movs	r2, #11
 800184c:	492f      	ldr	r1, [pc, #188]	; (800190c <test_function+0x1b8>)
 800184e:	4798      	blx	r3
 8001850:	4603      	mov	r3, r0
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
		sprintf(buffer, "POT(TEMP): %3.2f %cC",global_sensor_level_alarm[0],0xf8);
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <test_function+0x1d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe8d 	bl	8000578 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4638      	mov	r0, r7
 8001864:	21f8      	movs	r1, #248	; 0xf8
 8001866:	9100      	str	r1, [sp, #0]
 8001868:	492f      	ldr	r1, [pc, #188]	; (8001928 <test_function+0x1d4>)
 800186a:	f00a ffeb 	bl	800c844 <siprintf>
		print_bufferln("TEST", buffer);
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	482e      	ldr	r0, [pc, #184]	; (800192c <test_function+0x1d8>)
 8001874:	f7ff fef6 	bl	8001664 <print_bufferln>
		sprintf(buffer, "POT(LDR).: %3.2f %%",global_sensor_level_alarm[1]);
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <test_function+0x1d0>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe7b 	bl	8000578 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4638      	mov	r0, r7
 8001888:	4929      	ldr	r1, [pc, #164]	; (8001930 <test_function+0x1dc>)
 800188a:	f00a ffdb 	bl	800c844 <siprintf>
		print_bufferln("TEST", buffer);
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	4826      	ldr	r0, [pc, #152]	; (800192c <test_function+0x1d8>)
 8001894:	f7ff fee6 	bl	8001664 <print_bufferln>

	    // LDR
		sprintf(buffer, "LDR: %3.2f %%",global_sensor_level[1] );
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <test_function+0x1e0>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe6b 	bl	8000578 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4638      	mov	r0, r7
 80018a8:	4923      	ldr	r1, [pc, #140]	; (8001938 <test_function+0x1e4>)
 80018aa:	f00a ffcb 	bl	800c844 <siprintf>
		print_bufferln("TEST", buffer);
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	481e      	ldr	r0, [pc, #120]	; (800192c <test_function+0x1d8>)
 80018b4:	f7ff fed6 	bl	8001664 <print_bufferln>

		// Temperatura
		sprintf(buffer, "TMP: %3.2f %cC", global_sensor_level[0],0xf8);
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <test_function+0x1e0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe5b 	bl	8000578 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4638      	mov	r0, r7
 80018c8:	21f8      	movs	r1, #248	; 0xf8
 80018ca:	9100      	str	r1, [sp, #0]
 80018cc:	491b      	ldr	r1, [pc, #108]	; (800193c <test_function+0x1e8>)
 80018ce:	f00a ffb9 	bl	800c844 <siprintf>
		print_bufferln("TEST", buffer);
 80018d2:	463b      	mov	r3, r7
 80018d4:	4619      	mov	r1, r3
 80018d6:	4815      	ldr	r0, [pc, #84]	; (800192c <test_function+0x1d8>)
 80018d8:	f7ff fec4 	bl	8001664 <print_bufferln>

		//leer los microinterruptores

		sprintf(buffer, "PUL: %d %d ", global_switch_1,global_switch_2);
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <test_function+0x1ec>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <test_function+0x1f0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4638      	mov	r0, r7
 80018e8:	4917      	ldr	r1, [pc, #92]	; (8001948 <test_function+0x1f4>)
 80018ea:	f00a ffab 	bl	800c844 <siprintf>
    		print_bufferln("TEST", buffer);
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <test_function+0x1d8>)
 80018f4:	f7ff feb6 	bl	8001664 <print_bufferln>
    			  res=IObuff->puts(IObuff,(BUFF_ITEM_t *)buffer,strlen(buffer));

    		  }
			}
			*/
}
 80018f8:	bf00      	nop
 80018fa:	3770      	adds	r7, #112	; 0x70
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000568 	.word	0x20000568
 8001904:	20000569 	.word	0x20000569
 8001908:	200016c8 	.word	0x200016c8
 800190c:	080102bc 	.word	0x080102bc
 8001910:	2000020c 	.word	0x2000020c
 8001914:	66666667 	.word	0x66666667
 8001918:	200004e8 	.word	0x200004e8
 800191c:	200004f0 	.word	0x200004f0
 8001920:	0007a11f 	.word	0x0007a11f
 8001924:	200004d4 	.word	0x200004d4
 8001928:	080102c8 	.word	0x080102c8
 800192c:	080102e0 	.word	0x080102e0
 8001930:	080102e8 	.word	0x080102e8
 8001934:	200004dc 	.word	0x200004dc
 8001938:	080102fc 	.word	0x080102fc
 800193c:	0801030c 	.word	0x0801030c
 8001940:	200004f1 	.word	0x200004f1
 8001944:	200004f2 	.word	0x200004f2
 8001948:	0801031c 	.word	0x0801031c

0800194c <local_setpoint>:

//*****************************************************************
// funcion set point
// ****************************************************************

void  local_setpoint ( void ){
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b096      	sub	sp, #88	; 0x58
 8001950:	af00      	add	r7, sp, #0
	int res;
	static uint32_t it;
	static TickType_t last_time_print;
	char buffer[80];

	if (global_mode!=global_mode_ant){
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <local_setpoint+0xa4>)
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <local_setpoint+0xa8>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d015      	beq.n	800198a <local_setpoint+0x3e>
		global_mode_ant=global_mode;
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <local_setpoint+0xa4>)
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <local_setpoint+0xa8>)
 8001964:	701a      	strb	r2, [r3, #0]
	    res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"\r\n",2);
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <local_setpoint+0xac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <local_setpoint+0xac>)
 800196e:	6810      	ldr	r0, [r2, #0]
 8001970:	2202      	movs	r2, #2
 8001972:	4922      	ldr	r1, [pc, #136]	; (80019fc <local_setpoint+0xb0>)
 8001974:	4798      	blx	r3
 8001976:	4603      	mov	r3, r0
 8001978:	657b      	str	r3, [r7, #84]	; 0x54
	    last_time_print=xTaskGetTickCount();
 800197a:	f008 fa19 	bl	8009db0 <xTaskGetTickCount>
 800197e:	4603      	mov	r3, r0
 8001980:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <local_setpoint+0xb4>)
 8001982:	6013      	str	r3, [r2, #0]
	    it=0;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <local_setpoint+0xb8>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	}
	it++;
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <local_setpoint+0xb8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <local_setpoint+0xb8>)
 8001992:	6013      	str	r3, [r2, #0]

	pon_Nivel(global_sel_alarm_sensor,30);
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <local_setpoint+0xbc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	211e      	movs	r1, #30
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fba0 	bl	80050e0 <pon_Nivel>

	if ((xTaskGetTickCount()-last_time_print)>(100/portTICK_RATE_MS)){
 80019a0:	f008 fa06 	bl	8009db0 <xTaskGetTickCount>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <local_setpoint+0xb4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d91b      	bls.n	80019e8 <local_setpoint+0x9c>
		last_time_print = xTaskGetTickCount();
 80019b0:	f008 f9fe 	bl	8009db0 <xTaskGetTickCount>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <local_setpoint+0xb4>)
 80019b8:	6013      	str	r3, [r2, #0]
		sprintf(buffer,( unsigned char *)"SETPOINT %8x \r",it);
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <local_setpoint+0xb8>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4912      	ldr	r1, [pc, #72]	; (8001a0c <local_setpoint+0xc0>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00a ff3e 	bl	800c844 <siprintf>
		res=IObuff->puts(IObuff,(BUFF_ITEM_t *)buffer,strlen(buffer));
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <local_setpoint+0xac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691c      	ldr	r4, [r3, #16]
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <local_setpoint+0xac>)
 80019d0:	681d      	ldr	r5, [r3, #0]
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fc0d 	bl	80001f4 <strlen>
 80019da:	4602      	mov	r2, r0
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4628      	mov	r0, r5
 80019e2:	47a0      	blx	r4
 80019e4:	4603      	mov	r3, r0
 80019e6:	657b      	str	r3, [r7, #84]	; 0x54
	}
}
 80019e8:	bf00      	nop
 80019ea:	3758      	adds	r7, #88	; 0x58
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}
 80019f0:	20000568 	.word	0x20000568
 80019f4:	20000569 	.word	0x20000569
 80019f8:	200016c8 	.word	0x200016c8
 80019fc:	080102b8 	.word	0x080102b8
 8001a00:	20000210 	.word	0x20000210
 8001a04:	20000214 	.word	0x20000214
 8001a08:	2000056b 	.word	0x2000056b
 8001a0c:	08010328 	.word	0x08010328

08001a10 <local_fase_2>:

//*****************************************************************
// funcion local
// ****************************************************************

void local_fase_2(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

	pon_Nivel(global_sensor,5);
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <local_fase_2+0x5c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2105      	movs	r1, #5
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fb60 	bl	80050e0 <pon_Nivel>

	// comprobar el nivel de alarma

	//temp
	if (global_sensor_level_alarm[0]<global_sensor_level[0])
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <local_fase_2+0x60>)
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <local_fase_2+0x64>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d505      	bpl.n	8001a42 <local_fase_2+0x32>
	{	global_sensor=0; // se selecciona el sensor que está disparando
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <local_fase_2+0x5c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
		global_alarm_trigger_value='1';
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <local_fase_2+0x68>)
 8001a3e:	2231      	movs	r2, #49	; 0x31
 8001a40:	701a      	strb	r2, [r3, #0]
	}

	//ldr
	if (global_sensor_level_alarm[1]<global_sensor_level[1]){
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <local_fase_2+0x60>)
 8001a44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <local_fase_2+0x64>)
 8001a4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	d400      	bmi.n	8001a5a <local_fase_2+0x4a>
		global_sensor=1; // se selecciona el sensor que está disparando
		global_alarm_trigger_value='1';
	}
}
 8001a58:	e005      	b.n	8001a66 <local_fase_2+0x56>
		global_sensor=1; // se selecciona el sensor que está disparando
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <local_fase_2+0x5c>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
		global_alarm_trigger_value='1';
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <local_fase_2+0x68>)
 8001a62:	2231      	movs	r2, #49	; 0x31
 8001a64:	701a      	strb	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200004c0 	.word	0x200004c0
 8001a70:	200004d4 	.word	0x200004d4
 8001a74:	200004dc 	.word	0x200004dc
 8001a78:	200004f4 	.word	0x200004f4

08001a7c <local_operativa>:

void  local_operativa ( void ){
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b096      	sub	sp, #88	; 0x58
 8001a80:	af00      	add	r7, sp, #0
    int res;
	char buffer[80];
	static TickType_t last_time_print;
	static uint32_t it;

	if (global_mode!=global_mode_ant){
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <local_operativa+0x9c>)
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <local_operativa+0xa0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d015      	beq.n	8001aba <local_operativa+0x3e>
		global_mode_ant=global_mode;
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <local_operativa+0x9c>)
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <local_operativa+0xa0>)
 8001a94:	701a      	strb	r2, [r3, #0]
	    res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"\r\n",2);
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <local_operativa+0xa4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a20      	ldr	r2, [pc, #128]	; (8001b20 <local_operativa+0xa4>)
 8001a9e:	6810      	ldr	r0, [r2, #0]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4920      	ldr	r1, [pc, #128]	; (8001b24 <local_operativa+0xa8>)
 8001aa4:	4798      	blx	r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
	    last_time_print=xTaskGetTickCount();
 8001aaa:	f008 f981 	bl	8009db0 <xTaskGetTickCount>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <local_operativa+0xac>)
 8001ab2:	6013      	str	r3, [r2, #0]
	    it=0;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <local_operativa+0xb0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
	}
    it++;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <local_operativa+0xb0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <local_operativa+0xb0>)
 8001ac2:	6013      	str	r3, [r2, #0]


	local_fase_2();
 8001ac4:	f7ff ffa4 	bl	8001a10 <local_fase_2>

	if ((xTaskGetTickCount()-last_time_print)>(100/portTICK_RATE_MS)){
 8001ac8:	f008 f972 	bl	8009db0 <xTaskGetTickCount>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <local_operativa+0xac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d91b      	bls.n	8001b10 <local_operativa+0x94>
		last_time_print = xTaskGetTickCount();
 8001ad8:	f008 f96a 	bl	8009db0 <xTaskGetTickCount>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <local_operativa+0xac>)
 8001ae0:	6013      	str	r3, [r2, #0]
		sprintf(buffer,( unsigned char *)"LOCAL %8x \r",it);
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <local_operativa+0xb0>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4911      	ldr	r1, [pc, #68]	; (8001b30 <local_operativa+0xb4>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00a feaa 	bl	800c844 <siprintf>
		res=IObuff->puts(IObuff,(BUFF_ITEM_t *)buffer,strlen(buffer));
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <local_operativa+0xa4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691c      	ldr	r4, [r3, #16]
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <local_operativa+0xa4>)
 8001af8:	681d      	ldr	r5, [r3, #0]
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fb79 	bl	80001f4 <strlen>
 8001b02:	4602      	mov	r2, r0
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4628      	mov	r0, r5
 8001b0a:	47a0      	blx	r4
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	657b      	str	r3, [r7, #84]	; 0x54
	}

}
 8001b10:	bf00      	nop
 8001b12:	3758      	adds	r7, #88	; 0x58
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}
 8001b18:	20000568 	.word	0x20000568
 8001b1c:	20000569 	.word	0x20000569
 8001b20:	200016c8 	.word	0x200016c8
 8001b24:	080102b8 	.word	0x080102b8
 8001b28:	20000218 	.word	0x20000218
 8001b2c:	2000021c 	.word	0x2000021c
 8001b30:	08010338 	.word	0x08010338

08001b34 <clon>:
//*****************************************************************
// función clon
// ****************************************************************
// TODO

void clon ( void ){
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	b09f      	sub	sp, #124	; 0x7c
 8001b38:	af06      	add	r7, sp, #24

char buffer[80];
static TickType_t last_time_print;

	int res;
	if (global_mode!=global_mode_ant){
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <clon+0xf0>)
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <clon+0xf4>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d021      	beq.n	8001b8a <clon+0x56>
		global_mode_ant=global_mode;
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <clon+0xf0>)
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <clon+0xf4>)
 8001b4c:	701a      	strb	r2, [r3, #0]
	    res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"\r\n",2);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <clon+0xf8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4a35      	ldr	r2, [pc, #212]	; (8001c2c <clon+0xf8>)
 8001b56:	6810      	ldr	r0, [r2, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4935      	ldr	r1, [pc, #212]	; (8001c30 <clon+0xfc>)
 8001b5c:	4798      	blx	r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	65fb      	str	r3, [r7, #92]	; 0x5c
	    last_time_print=xTaskGetTickCount();
 8001b62:	f008 f925 	bl	8009db0 <xTaskGetTickCount>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a32      	ldr	r2, [pc, #200]	; (8001c34 <clon+0x100>)
 8001b6a:	6013      	str	r3, [r2, #0]
		global_recv_clone=0;
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <clon+0x104>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
		global_trans_clone=0;
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <clon+0x108>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
		global_try_trans_clone=0;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <clon+0x10c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
		global_try_recv_clone=0;
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <clon+0x110>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

	    it=0;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <clon+0x114>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
	}


	pon_Nivel(global_sensor,30);
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <clon+0x118>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	211e      	movs	r1, #30
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 faa5 	bl	80050e0 <pon_Nivel>
	it++;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <clon+0x114>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <clon+0x114>)
 8001b9e:	6013      	str	r3, [r2, #0]

	if ((xTaskGetTickCount()-last_time_print)>(100/portTICK_RATE_MS)){
 8001ba0:	f008 f906 	bl	8009db0 <xTaskGetTickCount>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <clon+0x100>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d932      	bls.n	8001c16 <clon+0xe2>
		last_time_print = xTaskGetTickCount();
 8001bb0:	f008 f8fe 	bl	8009db0 <xTaskGetTickCount>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <clon+0x100>)
 8001bb8:	6013      	str	r3, [r2, #0]
		sprintf(buffer,( unsigned char *)"CLON %8x G:%d S:%d T:%d TT:%d R:%d TR: %d"
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <clon+0x114>)
 8001bbc:	681e      	ldr	r6, [r3, #0]
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <clon+0x11c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <clon+0x120>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <clon+0x108>)
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	491c      	ldr	r1, [pc, #112]	; (8001c40 <clon+0x10c>)
 8001bce:	6809      	ldr	r1, [r1, #0]
 8001bd0:	4819      	ldr	r0, [pc, #100]	; (8001c38 <clon+0x104>)
 8001bd2:	6800      	ldr	r0, [r0, #0]
 8001bd4:	4c1b      	ldr	r4, [pc, #108]	; (8001c44 <clon+0x110>)
 8001bd6:	6824      	ldr	r4, [r4, #0]
 8001bd8:	f107 050c 	add.w	r5, r7, #12
 8001bdc:	9404      	str	r4, [sp, #16]
 8001bde:	9003      	str	r0, [sp, #12]
 8001be0:	9102      	str	r1, [sp, #8]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4632      	mov	r2, r6
 8001bea:	491b      	ldr	r1, [pc, #108]	; (8001c58 <clon+0x124>)
 8001bec:	4628      	mov	r0, r5
 8001bee:	f00a fe29 	bl	800c844 <siprintf>
		"\r",it,	global_Orion_it,	global_Orion_success,global_trans_clone,  global_try_trans_clone,   global_recv_clone,   global_try_recv_clone);

		res=IObuff->puts(IObuff,(BUFF_ITEM_t *)buffer,strlen(buffer));
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <clon+0xf8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691c      	ldr	r4, [r3, #16]
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <clon+0xf8>)
 8001bfa:	681d      	ldr	r5, [r3, #0]
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe faf7 	bl	80001f4 <strlen>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4628      	mov	r0, r5
 8001c10:	47a0      	blx	r4
 8001c12:	4603      	mov	r3, r0
 8001c14:	65fb      	str	r3, [r7, #92]	; 0x5c
	}

	// TODO falta la LDR
	// TODO falta la ALARMAS
	vTaskDelay(1/portTICK_RATE_MS );
 8001c16:	2001      	movs	r0, #1
 8001c18:	f007 ff7a 	bl	8009b10 <vTaskDelay>

}
 8001c1c:	bf00      	nop
 8001c1e:	3764      	adds	r7, #100	; 0x64
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c24:	20000568 	.word	0x20000568
 8001c28:	20000569 	.word	0x20000569
 8001c2c:	200016c8 	.word	0x200016c8
 8001c30:	080102b8 	.word	0x080102b8
 8001c34:	20000220 	.word	0x20000220
 8001c38:	20000498 	.word	0x20000498
 8001c3c:	2000049c 	.word	0x2000049c
 8001c40:	200004a0 	.word	0x200004a0
 8001c44:	200004a4 	.word	0x200004a4
 8001c48:	20000224 	.word	0x20000224
 8001c4c:	200004c0 	.word	0x200004c0
 8001c50:	200004b8 	.word	0x200004b8
 8001c54:	200004bc 	.word	0x200004bc
 8001c58:	08010344 	.word	0x08010344

08001c5c <conectado>:
//*****************************************************************
// función conectado
// ****************************************************************
// Conectado funciona como en local pero publica los datos y se puede actuar sobre la alarma

void conectado ( void ){
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b09f      	sub	sp, #124	; 0x7c
 8001c60:	af06      	add	r7, sp, #24
	char buffer[80];

	static TickType_t last_time_print;


	if (global_mode!=global_mode_ant){
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <conectado+0xe8>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <conectado+0xec>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d021      	beq.n	8001cb2 <conectado+0x56>
		global_mode_ant=global_mode;
 8001c6e:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <conectado+0xe8>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <conectado+0xec>)
 8001c74:	701a      	strb	r2, [r3, #0]
	    res=IObuff->puts(IObuff,(BUFF_ITEM_t *)"\r\n",2);
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <conectado+0xf0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <conectado+0xf0>)
 8001c7e:	6810      	ldr	r0, [r2, #0]
 8001c80:	2202      	movs	r2, #2
 8001c82:	4933      	ldr	r1, [pc, #204]	; (8001d50 <conectado+0xf4>)
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	65fb      	str	r3, [r7, #92]	; 0x5c
	    last_time_print=xTaskGetTickCount();
 8001c8a:	f008 f891 	bl	8009db0 <xTaskGetTickCount>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <conectado+0xf8>)
 8001c92:	6013      	str	r3, [r2, #0]
	    global_trans_connect=0;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <conectado+0xfc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
	    global_recv_connect=0;
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <conectado+0x100>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
		global_try_trans_connect=0;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <conectado+0x104>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
		global_try_recv_connect=0;
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <conectado+0x108>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
	    it=0;
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <conectado+0x10c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	}
	it++;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <conectado+0x10c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <conectado+0x10c>)
 8001cba:	6013      	str	r3, [r2, #0]
	// En modo conectado hace lo mismo que en local +
	local_fase_2();
 8001cbc:	f7ff fea8 	bl	8001a10 <local_fase_2>
	// time, Task Time pide a la tarea Orion la hora cada 10000 segundos la tarea time obtiene el tiempo
	// temp, Task temp publica la temperatura
	// alarm, la tarea LEDS_ALARM mira si alguien ha lanzado la alarma.7

	if ((xTaskGetTickCount()-last_time_print)>(100/portTICK_RATE_MS)){
 8001cc0:	f008 f876 	bl	8009db0 <xTaskGetTickCount>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <conectado+0xf8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d932      	bls.n	8001d36 <conectado+0xda>
		last_time_print = xTaskGetTickCount();
 8001cd0:	f008 f86e 	bl	8009db0 <xTaskGetTickCount>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <conectado+0xf8>)
 8001cd8:	6013      	str	r3, [r2, #0]

		sprintf(buffer,( unsigned char *)"CONECTADO %8x G:%d S:%d T:%d TT:%d R:%d TR: %d"
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <conectado+0x10c>)
 8001cdc:	681e      	ldr	r6, [r3, #0]
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <conectado+0x110>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <conectado+0x114>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <conectado+0xfc>)
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	491c      	ldr	r1, [pc, #112]	; (8001d60 <conectado+0x104>)
 8001cee:	6809      	ldr	r1, [r1, #0]
 8001cf0:	481a      	ldr	r0, [pc, #104]	; (8001d5c <conectado+0x100>)
 8001cf2:	6800      	ldr	r0, [r0, #0]
 8001cf4:	4c1b      	ldr	r4, [pc, #108]	; (8001d64 <conectado+0x108>)
 8001cf6:	6824      	ldr	r4, [r4, #0]
 8001cf8:	f107 050c 	add.w	r5, r7, #12
 8001cfc:	9404      	str	r4, [sp, #16]
 8001cfe:	9003      	str	r0, [sp, #12]
 8001d00:	9102      	str	r1, [sp, #8]
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4632      	mov	r2, r6
 8001d0a:	491a      	ldr	r1, [pc, #104]	; (8001d74 <conectado+0x118>)
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f00a fd99 	bl	800c844 <siprintf>
		"\r",it,	global_Orion_it,	global_Orion_success,global_trans_connect,global_try_trans_connect, global_recv_connect, global_try_recv_connect);
		res=IObuff->puts(IObuff,(BUFF_ITEM_t *)buffer,strlen(buffer));
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <conectado+0xf0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691c      	ldr	r4, [r3, #16]
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <conectado+0xf0>)
 8001d1a:	681d      	ldr	r5, [r3, #0]
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa67 	bl	80001f4 <strlen>
 8001d26:	4602      	mov	r2, r0
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4628      	mov	r0, r5
 8001d30:	47a0      	blx	r4
 8001d32:	4603      	mov	r3, r0
 8001d34:	65fb      	str	r3, [r7, #92]	; 0x5c
	}


	vTaskDelay(1/portTICK_RATE_MS );
 8001d36:	2001      	movs	r0, #1
 8001d38:	f007 feea 	bl	8009b10 <vTaskDelay>

}
 8001d3c:	bf00      	nop
 8001d3e:	3764      	adds	r7, #100	; 0x64
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	20000568 	.word	0x20000568
 8001d48:	20000569 	.word	0x20000569
 8001d4c:	200016c8 	.word	0x200016c8
 8001d50:	080102b8 	.word	0x080102b8
 8001d54:	20000228 	.word	0x20000228
 8001d58:	200004ac 	.word	0x200004ac
 8001d5c:	200004a8 	.word	0x200004a8
 8001d60:	200004b0 	.word	0x200004b0
 8001d64:	200004b4 	.word	0x200004b4
 8001d68:	2000022c 	.word	0x2000022c
 8001d6c:	200004b8 	.word	0x200004b8
 8001d70:	200004bc 	.word	0x200004bc
 8001d74:	08010370 	.word	0x08010370

08001d78 <Task_Operativa>:
#include "tareas.h"

void conectado ( void );
void clon ( void );

void Task_Operativa( void *pvParameters ){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]



while(1){
	switch(global_mode){
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <Task_Operativa+0x54>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d81c      	bhi.n	8001dc2 <Task_Operativa+0x4a>
 8001d88:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <Task_Operativa+0x18>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da5 	.word	0x08001da5
 8001d94:	08001dab 	.word	0x08001dab
 8001d98:	08001db1 	.word	0x08001db1
 8001d9c:	08001db7 	.word	0x08001db7
 8001da0:	08001dbd 	.word	0x08001dbd
	case 0:// local
			local_operativa ();
 8001da4:	f7ff fe6a 	bl	8001a7c <local_operativa>
	 		break;
 8001da8:	e00b      	b.n	8001dc2 <Task_Operativa+0x4a>
	case 1:// test
			test_function();
 8001daa:	f7ff fcd3 	bl	8001754 <test_function>
	 		break;
 8001dae:	e008      	b.n	8001dc2 <Task_Operativa+0x4a>
	case 2:// conectado
			conectado();
 8001db0:	f7ff ff54 	bl	8001c5c <conectado>
	 		break;
 8001db4:	e005      	b.n	8001dc2 <Task_Operativa+0x4a>
	case 3: // clon
			clon();
 8001db6:	f7ff febd 	bl	8001b34 <clon>


		 	break;
 8001dba:	e002      	b.n	8001dc2 <Task_Operativa+0x4a>
	case 4: // setup alarmas
			local_setpoint ();
 8001dbc:	f7ff fdc6 	bl	800194c <local_setpoint>
			break;
 8001dc0:	bf00      	nop
	}
	vTaskDelay(1/portTICK_RATE_MS );
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f007 fea4 	bl	8009b10 <vTaskDelay>
	switch(global_mode){
 8001dc8:	e7da      	b.n	8001d80 <Task_Operativa+0x8>
 8001dca:	bf00      	nop
 8001dcc:	20000568 	.word	0x20000568

08001dd0 <Task_Orion_TimeOut>:
#include <task.h>
#include <math.h>
#include <cJSON.h>


int Task_Orion_TimeOut(TickType_t timeout,char *src,char * resp, char msg1,char * msg, uint8_t * try_change_mode){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	70fb      	strb	r3, [r7, #3]


	TickType_t localtimeout=xTaskGetTickCount();
 8001dde:	f007 ffe7 	bl	8009db0 <xTaskGetTickCount>
 8001de2:	6138      	str	r0, [r7, #16]
	int ct;


	localtimeout=xTaskGetTickCount();
 8001de4:	f007 ffe4 	bl	8009db0 <xTaskGetTickCount>
 8001de8:	6138      	str	r0, [r7, #16]
	while ((strstr(src,resp)==NULL)&&((xTaskGetTickCount()-localtimeout)<(timeout/portTICK_RATE_MS)))
 8001dea:	e005      	b.n	8001df8 <Task_Orion_TimeOut+0x28>
		if (*try_change_mode)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <Task_Orion_TimeOut+0x28>
			return 2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	e094      	b.n	8001f22 <Task_Orion_TimeOut+0x152>
	while ((strstr(src,resp)==NULL)&&((xTaskGetTickCount()-localtimeout)<(timeout/portTICK_RATE_MS)))
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f00a fdc1 	bl	800c982 <strstr>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <Task_Orion_TimeOut+0x46>
 8001e06:	f007 ffd3 	bl	8009db0 <xTaskGetTickCount>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8ea      	bhi.n	8001dec <Task_Orion_TimeOut+0x1c>

	if ((xTaskGetTickCount()-localtimeout)>=(timeout/portTICK_RATE_MS)){
 8001e16:	f007 ffcb 	bl	8009db0 <xTaskGetTickCount>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d87c      	bhi.n	8001f20 <Task_Orion_TimeOut+0x150>
		 print_buffer(msg1, "TIMEOUT");
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	4940      	ldr	r1, [pc, #256]	; (8001f2c <Task_Orion_TimeOut+0x15c>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fc5c 	bl	80016e8 <print_buffer>
  		 print_buffer(msg1, msg);
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	6a39      	ldr	r1, [r7, #32]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fc57 	bl	80016e8 <print_buffer>

  		 ESP8266_RESET();
 8001e3a:	f000 fa33 	bl	80022a4 <ESP8266_RESET>
   		 localtimeout=xTaskGetTickCount();
 8001e3e:	f007 ffb7 	bl	8009db0 <xTaskGetTickCount>
 8001e42:	6138      	str	r0, [r7, #16]
  		 while ((xTaskGetTickCount()-localtimeout)<(6000/portTICK_RATE_MS))
 8001e44:	e005      	b.n	8001e52 <Task_Orion_TimeOut+0x82>
  			if (*try_change_mode) return 2;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <Task_Orion_TimeOut+0x82>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e067      	b.n	8001f22 <Task_Orion_TimeOut+0x152>
  		 while ((xTaskGetTickCount()-localtimeout)<(6000/portTICK_RATE_MS))
 8001e52:	f007 ffad 	bl	8009db0 <xTaskGetTickCount>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 726f 	movw	r2, #5999	; 0x176f
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d9f0      	bls.n	8001e46 <Task_Orion_TimeOut+0x76>
  		// verifica si hay IP

  		    HAL_UART_Init(UART_ESP8266);
 8001e64:	4832      	ldr	r0, [pc, #200]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001e66:	f005 fc61 	bl	800772c <HAL_UART_Init>
  			for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e007      	b.n	8001e80 <Task_Orion_TimeOut+0xb0>
 8001e70:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <Task_Orion_TimeOut+0x164>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4413      	add	r3, r2
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e86:	dbf3      	blt.n	8001e70 <Task_Orion_TimeOut+0xa0>
  			HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8001e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8c:	4929      	ldr	r1, [pc, #164]	; (8001f34 <Task_Orion_TimeOut+0x164>)
 8001e8e:	4828      	ldr	r0, [pc, #160]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001e90:	f005 fdaa 	bl	80079e8 <HAL_UART_Receive_DMA>
  			HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 8001e94:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e98:	220a      	movs	r2, #10
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <Task_Orion_TimeOut+0x168>)
 8001e9c:	4824      	ldr	r0, [pc, #144]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001e9e:	f005 fc92 	bl	80077c6 <HAL_UART_Transmit>
  			osDelay(1000);
 8001ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea6:	f006 fcfb 	bl	80088a0 <osDelay>
  			HAL_UART_DMAStop(UART_ESP8266);
 8001eaa:	4821      	ldr	r0, [pc, #132]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001eac:	f005 fdcc 	bl	8007a48 <HAL_UART_DMAStop>
  			print_buffer("***1",buff_recv);
 8001eb0:	4920      	ldr	r1, [pc, #128]	; (8001f34 <Task_Orion_TimeOut+0x164>)
 8001eb2:	4822      	ldr	r0, [pc, #136]	; (8001f3c <Task_Orion_TimeOut+0x16c>)
 8001eb4:	f7ff fc18 	bl	80016e8 <print_buffer>
  			osDelay(2000);
 8001eb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ebc:	f006 fcf0 	bl	80088a0 <osDelay>
  			HAL_UART_Init(UART_ESP8266);
 8001ec0:	481b      	ldr	r0, [pc, #108]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001ec2:	f005 fc33 	bl	800772c <HAL_UART_Init>
  			  			for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e007      	b.n	8001edc <Task_Orion_TimeOut+0x10c>
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <Task_Orion_TimeOut+0x164>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee2:	dbf3      	blt.n	8001ecc <Task_Orion_TimeOut+0xfc>
  			  			HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8001ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee8:	4912      	ldr	r1, [pc, #72]	; (8001f34 <Task_Orion_TimeOut+0x164>)
 8001eea:	4811      	ldr	r0, [pc, #68]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001eec:	f005 fd7c 	bl	80079e8 <HAL_UART_Receive_DMA>
  			  			HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 8001ef0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ef4:	220a      	movs	r2, #10
 8001ef6:	4910      	ldr	r1, [pc, #64]	; (8001f38 <Task_Orion_TimeOut+0x168>)
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001efa:	f005 fc64 	bl	80077c6 <HAL_UART_Transmit>
  			  			osDelay(1000);
 8001efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f02:	f006 fccd 	bl	80088a0 <osDelay>
  			  			HAL_UART_DMAStop(UART_ESP8266);
 8001f06:	480a      	ldr	r0, [pc, #40]	; (8001f30 <Task_Orion_TimeOut+0x160>)
 8001f08:	f005 fd9e 	bl	8007a48 <HAL_UART_DMAStop>
  			  			print_buffer("****2",buff_recv);
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <Task_Orion_TimeOut+0x164>)
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <Task_Orion_TimeOut+0x170>)
 8001f10:	f7ff fbea 	bl	80016e8 <print_buffer>
  			  			osDelay(2000);
 8001f14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f18:	f006 fcc2 	bl	80088a0 <osDelay>


  		 return 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <Task_Orion_TimeOut+0x152>
       	}
	else
		return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	080103a0 	.word	0x080103a0
 8001f30:	20000280 	.word	0x20000280
 8001f34:	200006b0 	.word	0x200006b0
 8001f38:	080103a8 	.word	0x080103a8
 8001f3c:	080103b4 	.word	0x080103b4
 8001f40:	080103bc 	.word	0x080103bc

08001f44 <Task_Orion>:



void Task_Orion( void *pvParameters ){
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]



	while(1){

		while (xSemaphoreTake(ORION_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE )
 8001f4c:	e008      	b.n	8001f60 <Task_Orion+0x1c>
		{   // si en 20 segundos no he entrado en orion mmm mal rollito harakiri
			print_buffer("\r\n\n\nHARAKIRI!!\n\n\n",buff_recv);
 8001f4e:	4990      	ldr	r1, [pc, #576]	; (8002190 <Task_Orion+0x24c>)
 8001f50:	4890      	ldr	r0, [pc, #576]	; (8002194 <Task_Orion+0x250>)
 8001f52:	f7ff fbc9 	bl	80016e8 <print_buffer>
			//xSemaphoreGive(ORION_xSem);
			HAL_NVIC_SystemReset();
 8001f56:	f004 f9aa 	bl	80062ae <HAL_NVIC_SystemReset>
			i=i+1;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
		while (xSemaphoreTake(ORION_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE )
 8001f60:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <Task_Orion+0x254>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f007 f987 	bl	800927c <xQueueSemaphoreTake>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d1ec      	bne.n	8001f4e <Task_Orion+0xa>
		}

//		if (ORION_req.status==0){ // cambia de modo si no hay ninguna petición en marcha
		   if (global_try_change_mode==1){
 8001f74:	4b89      	ldr	r3, [pc, #548]	; (800219c <Task_Orion+0x258>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11d      	bne.n	8001fb8 <Task_Orion+0x74>
			   global_try_change_mode=0;
 8001f7c:	4b87      	ldr	r3, [pc, #540]	; (800219c <Task_Orion+0x258>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
			   global_mode = (global_mode + 1) % 5; // 0 a 4
 8001f82:	4b87      	ldr	r3, [pc, #540]	; (80021a0 <Task_Orion+0x25c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <Task_Orion+0x260>)
 8001f8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f8e:	1059      	asrs	r1, r3, #1
 8001f90:	17d3      	asrs	r3, r2, #31
 8001f92:	1ac9      	subs	r1, r1, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	1ad1      	subs	r1, r2, r3
 8001f9c:	b2ca      	uxtb	r2, r1
 8001f9e:	4b80      	ldr	r3, [pc, #512]	; (80021a0 <Task_Orion+0x25c>)
 8001fa0:	701a      	strb	r2, [r3, #0]
			   xSemaphoreGive(ORION_xSem);
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <Task_Orion+0x254>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	f006 feec 	bl	8008d88 <xQueueGenericSend>
			   osDelay(100);
 8001fb0:	2064      	movs	r0, #100	; 0x64
 8001fb2:	f006 fc75 	bl	80088a0 <osDelay>
			   continue;
 8001fb6:	e161      	b.n	800227c <Task_Orion+0x338>
		   }
	//	}

		if (!((global_mode==2)||(global_mode==3))){ // cuenda no esta en modo conectado o. clon no hace nada
 8001fb8:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <Task_Orion+0x25c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d00e      	beq.n	8001fde <Task_Orion+0x9a>
 8001fc0:	4b77      	ldr	r3, [pc, #476]	; (80021a0 <Task_Orion+0x25c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d00a      	beq.n	8001fde <Task_Orion+0x9a>
			xSemaphoreGive(ORION_xSem);
 8001fc8:	4b73      	ldr	r3, [pc, #460]	; (8002198 <Task_Orion+0x254>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f006 fed9 	bl	8008d88 <xQueueGenericSend>
			osDelay(100);
 8001fd6:	2064      	movs	r0, #100	; 0x64
 8001fd8:	f006 fc62 	bl	80088a0 <osDelay>
			continue;
 8001fdc:	e14e      	b.n	800227c <Task_Orion+0x338>
		}

        if (ORION_req.status==1){
 8001fde:	4b72      	ldr	r3, [pc, #456]	; (80021a8 <Task_Orion+0x264>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	f040 8140 	bne.w	8002268 <Task_Orion+0x324>
        	 global_Orion_it++;
 8001fe8:	4b70      	ldr	r3, [pc, #448]	; (80021ac <Task_Orion+0x268>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a6f      	ldr	r2, [pc, #444]	; (80021ac <Task_Orion+0x268>)
 8001ff0:	6013      	str	r3, [r2, #0]
        	 // open connection
        	 //print_buffer("ORION1","REQ=1\r\n");
        	 HAL_UART_DMAStop(UART_ESP8266);
 8001ff2:	486f      	ldr	r0, [pc, #444]	; (80021b0 <Task_Orion+0x26c>)
 8001ff4:	f005 fd28 	bl	8007a48 <HAL_UART_DMAStop>
        	 HAL_UART_Init(UART_ESP8266);
 8001ff8:	486d      	ldr	r0, [pc, #436]	; (80021b0 <Task_Orion+0x26c>)
 8001ffa:	f005 fb97 	bl	800772c <HAL_UART_Init>
        	 for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e007      	b.n	8002014 <Task_Orion+0xd0>
 8002004:	4a62      	ldr	r2, [pc, #392]	; (8002190 <Task_Orion+0x24c>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800201a:	dbf3      	blt.n	8002004 <Task_Orion+0xc0>
        	 HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 800201c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002020:	495b      	ldr	r1, [pc, #364]	; (8002190 <Task_Orion+0x24c>)
 8002022:	4863      	ldr	r0, [pc, #396]	; (80021b0 <Task_Orion+0x26c>)
 8002024:	f005 fce0 	bl	80079e8 <HAL_UART_Receive_DMA>
      	   	 sprintf(buff_sprintf100,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",ORION_req.machine_dest,ORION_req.port_dest);
 8002028:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <Task_Orion+0x264>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <Task_Orion+0x264>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4960      	ldr	r1, [pc, #384]	; (80021b4 <Task_Orion+0x270>)
 8002032:	4861      	ldr	r0, [pc, #388]	; (80021b8 <Task_Orion+0x274>)
 8002034:	f00a fc06 	bl	800c844 <siprintf>
      	   	 HAL_UART_Transmit_DMA(UART_ESP8266, ( unsigned char *) buff_sprintf100, strlen( buff_sprintf100));
 8002038:	485f      	ldr	r0, [pc, #380]	; (80021b8 <Task_Orion+0x274>)
 800203a:	f7fe f8db 	bl	80001f4 <strlen>
 800203e:	4603      	mov	r3, r0
 8002040:	b29b      	uxth	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	495c      	ldr	r1, [pc, #368]	; (80021b8 <Task_Orion+0x274>)
 8002046:	485a      	ldr	r0, [pc, #360]	; (80021b0 <Task_Orion+0x26c>)
 8002048:	f005 fc50 	bl	80078ec <HAL_UART_Transmit_DMA>

      	   	 //HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100, strlen( buff_sprintf100),100000); // cabecera
        	 //osDelay(100);

        	 if (Task_Orion_TimeOut(2000,buff_recv,"CONNECT\r\n", "CONNECT",buff_recv,&global_try_change_mode)){
 800204c:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <Task_Orion+0x278>)
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <Task_Orion+0x258>)
 8002052:	9201      	str	r2, [sp, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <Task_Orion+0x24c>)
 8002056:	9200      	str	r2, [sp, #0]
 8002058:	4a59      	ldr	r2, [pc, #356]	; (80021c0 <Task_Orion+0x27c>)
 800205a:	494d      	ldr	r1, [pc, #308]	; (8002190 <Task_Orion+0x24c>)
 800205c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002060:	f7ff feb6 	bl	8001dd0 <Task_Orion_TimeOut>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <Task_Orion+0x136>
        		 xSemaphoreGive(ORION_xSem);
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <Task_Orion+0x254>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	f006 fe88 	bl	8008d88 <xQueueGenericSend>
        		 continue;
 8002078:	e100      	b.n	800227c <Task_Orion+0x338>
        	 }

        	 HAL_UART_DMAStop(UART_ESP8266);
 800207a:	484d      	ldr	r0, [pc, #308]	; (80021b0 <Task_Orion+0x26c>)
 800207c:	f005 fce4 	bl	8007a48 <HAL_UART_DMAStop>
        	 //print_buffer("ORION2", buff_recv);
        	 HAL_UART_Init(UART_ESP8266);
 8002080:	484b      	ldr	r0, [pc, #300]	; (80021b0 <Task_Orion+0x26c>)
 8002082:	f005 fb53 	bl	800772c <HAL_UART_Init>
        	 for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e007      	b.n	800209c <Task_Orion+0x158>
 800208c:	4a40      	ldr	r2, [pc, #256]	; (8002190 <Task_Orion+0x24c>)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a2:	dbf3      	blt.n	800208c <Task_Orion+0x148>
        	 HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80020a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a8:	4939      	ldr	r1, [pc, #228]	; (8002190 <Task_Orion+0x24c>)
 80020aa:	4841      	ldr	r0, [pc, #260]	; (80021b0 <Task_Orion+0x26c>)
 80020ac:	f005 fc9c 	bl	80079e8 <HAL_UART_Receive_DMA>
             sprintf(buff_sprintf100_1,( unsigned char *)"AT+CIPSEND=%d\r\n",strlen(ORION_req.HTTP_request));
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <Task_Orion+0x264>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f89d 	bl	80001f4 <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	4941      	ldr	r1, [pc, #260]	; (80021c4 <Task_Orion+0x280>)
 80020c0:	4841      	ldr	r0, [pc, #260]	; (80021c8 <Task_Orion+0x284>)
 80020c2:	f00a fbbf 	bl	800c844 <siprintf>
        	 //HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1),100000); // cabecera
             HAL_UART_Transmit_DMA(UART_ESP8266, ( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1));
 80020c6:	4840      	ldr	r0, [pc, #256]	; (80021c8 <Task_Orion+0x284>)
 80020c8:	f7fe f894 	bl	80001f4 <strlen>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	493d      	ldr	r1, [pc, #244]	; (80021c8 <Task_Orion+0x284>)
 80020d4:	4836      	ldr	r0, [pc, #216]	; (80021b0 <Task_Orion+0x26c>)
 80020d6:	f005 fc09 	bl	80078ec <HAL_UART_Transmit_DMA>

             osDelay(10);
 80020da:	200a      	movs	r0, #10
 80020dc:	f006 fbe0 	bl	80088a0 <osDelay>

           	 if (Task_Orion_TimeOut(1000,buff_recv,">", "SEND",buff_recv,&global_try_change_mode)){
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <Task_Orion+0x288>)
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4a2d      	ldr	r2, [pc, #180]	; (800219c <Task_Orion+0x258>)
 80020e6:	9201      	str	r2, [sp, #4]
 80020e8:	4a29      	ldr	r2, [pc, #164]	; (8002190 <Task_Orion+0x24c>)
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <Task_Orion+0x28c>)
 80020ee:	4928      	ldr	r1, [pc, #160]	; (8002190 <Task_Orion+0x24c>)
 80020f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f4:	f7ff fe6c 	bl	8001dd0 <Task_Orion_TimeOut>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <Task_Orion+0x1ca>
           		 xSemaphoreGive(ORION_xSem);
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <Task_Orion+0x254>)
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	2300      	movs	r3, #0
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	f006 fe3e 	bl	8008d88 <xQueueGenericSend>
        	     continue;
 800210c:	e0b6      	b.n	800227c <Task_Orion+0x338>
        	 }

        	 HAL_UART_DMAStop(UART_ESP8266);
 800210e:	4828      	ldr	r0, [pc, #160]	; (80021b0 <Task_Orion+0x26c>)
 8002110:	f005 fc9a 	bl	8007a48 <HAL_UART_DMAStop>

        	 //print_buffer("ORION3", buff_recv);
        	 //print_buffer("ORION33", buff_sprintf1024);
        	 HAL_UART_Init(UART_ESP8266);
 8002114:	4826      	ldr	r0, [pc, #152]	; (80021b0 <Task_Orion+0x26c>)
 8002116:	f005 fb09 	bl	800772c <HAL_UART_Init>
        	 for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e007      	b.n	8002130 <Task_Orion+0x1ec>
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <Task_Orion+0x24c>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002136:	dbf3      	blt.n	8002120 <Task_Orion+0x1dc>
        	 HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8002138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213c:	4914      	ldr	r1, [pc, #80]	; (8002190 <Task_Orion+0x24c>)
 800213e:	481c      	ldr	r0, [pc, #112]	; (80021b0 <Task_Orion+0x26c>)
 8002140:	f005 fc52 	bl	80079e8 <HAL_UART_Receive_DMA>
        	 HAL_UART_Transmit_DMA(UART_ESP8266,  ORION_req.HTTP_request, strlen(  ORION_req.HTTP_request));
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <Task_Orion+0x264>)
 8002146:	68dc      	ldr	r4, [r3, #12]
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <Task_Orion+0x264>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f851 	bl	80001f4 <strlen>
 8002152:	4603      	mov	r3, r0
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	4621      	mov	r1, r4
 800215a:	4815      	ldr	r0, [pc, #84]	; (80021b0 <Task_Orion+0x26c>)
 800215c:	f005 fbc6 	bl	80078ec <HAL_UART_Transmit_DMA>
//       	 HAL_UART_Transmit(UART_ESP8266,( unsigned char *)  ORION_req.HTTP_request, strlen(  ORION_req.HTTP_request),100000); // cabecera
        	 //haz un bucle hasta que el buffer no crezca debido al comportamiento de orion
        	 //while(strstr(buff_recv,">")==NULL);


        	 if (Task_Orion_TimeOut(2000,buff_recv,"reasonPhrase", "SEND2",buff_recv,&global_try_change_mode))    	 {
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <Task_Orion+0x290>)
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <Task_Orion+0x258>)
 8002166:	9201      	str	r2, [sp, #4]
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <Task_Orion+0x24c>)
 800216a:	9200      	str	r2, [sp, #0]
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <Task_Orion+0x294>)
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <Task_Orion+0x24c>)
 8002170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002174:	f7ff fe2c 	bl	8001dd0 <Task_Orion_TimeOut>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02e      	beq.n	80021dc <Task_Orion+0x298>
	        	 xSemaphoreGive(ORION_xSem);
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <Task_Orion+0x254>)
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	f006 fdfe 	bl	8008d88 <xQueueGenericSend>
	             continue;
 800218c:	e076      	b.n	800227c <Task_Orion+0x338>
 800218e:	bf00      	nop
 8002190:	200006b0 	.word	0x200006b0
 8002194:	080103c4 	.word	0x080103c4
 8002198:	200016c4 	.word	0x200016c4
 800219c:	2000056a 	.word	0x2000056a
 80021a0:	20000568 	.word	0x20000568
 80021a4:	66666667 	.word	0x66666667
 80021a8:	200005d4 	.word	0x200005d4
 80021ac:	200004b8 	.word	0x200004b8
 80021b0:	20000280 	.word	0x20000280
 80021b4:	080103d8 	.word	0x080103d8
 80021b8:	200005e8 	.word	0x200005e8
 80021bc:	080103f4 	.word	0x080103f4
 80021c0:	080103fc 	.word	0x080103fc
 80021c4:	08010408 	.word	0x08010408
 80021c8:	2000064c 	.word	0x2000064c
 80021cc:	08010418 	.word	0x08010418
 80021d0:	08010420 	.word	0x08010420
 80021d4:	08010424 	.word	0x08010424
 80021d8:	0801042c 	.word	0x0801042c
	         }
        	 osDelay(50);
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f006 fb5f 	bl	80088a0 <osDelay>

			 HAL_UART_DMAStop(UART_ESP8266);
 80021e2:	4827      	ldr	r0, [pc, #156]	; (8002280 <Task_Orion+0x33c>)
 80021e4:	f005 fc30 	bl	8007a48 <HAL_UART_DMAStop>
        	 //print_buffer("ORION3", buff_recv);
        	 cleanResponse(( unsigned char *)buff_recv,2048);
 80021e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ec:	4825      	ldr	r0, [pc, #148]	; (8002284 <Task_Orion+0x340>)
 80021ee:	f002 fef9 	bl	8004fe4 <cleanResponse>
     		 //print_buffer("ORION4", buff_recv);

        	 if (ORION_req.HTTP_response!=NULL) {
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <Task_Orion+0x344>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <Task_Orion+0x2e6>

        		  	 	    strncpy(ORION_req.HTTP_response,buff_recv,2048);
 80021fa:	4b23      	ldr	r3, [pc, #140]	; (8002288 <Task_Orion+0x344>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002202:	4920      	ldr	r1, [pc, #128]	; (8002284 <Task_Orion+0x340>)
 8002204:	4618      	mov	r0, r3
 8002206:	f00a fba9 	bl	800c95c <strncpy>
        		  	 	    if (strlen(buff_recv)<500)
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <Task_Orion+0x340>)
 800220c:	f7fd fff2 	bl	80001f4 <strlen>
 8002210:	4603      	mov	r3, r0
 8002212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002216:	d203      	bcs.n	8002220 <Task_Orion+0x2dc>
        		  	 	    	print_buffer("ORION34", "\r\n\r\n\r\n UPPPPPs\r\n\n\n\n");
 8002218:	491c      	ldr	r1, [pc, #112]	; (800228c <Task_Orion+0x348>)
 800221a:	481d      	ldr	r0, [pc, #116]	; (8002290 <Task_Orion+0x34c>)
 800221c:	f7ff fa64 	bl	80016e8 <print_buffer>
        		 	 	    //osDelay(100);
        		 	 	    //print_buffer("ORION4", "He terminado\r\n");
        	      			global_Orion_success++;
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <Task_Orion+0x350>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <Task_Orion+0x350>)
 8002228:	6013      	str	r3, [r2, #0]
        	      		 }

        	 HAL_UART_Init(UART_ESP8266);
 800222a:	4815      	ldr	r0, [pc, #84]	; (8002280 <Task_Orion+0x33c>)
 800222c:	f005 fa7e 	bl	800772c <HAL_UART_Init>
        	 sprintf(buff_sprintf100_1,( unsigned char *)"AT+CIPCLOSE\r\n");
 8002230:	4919      	ldr	r1, [pc, #100]	; (8002298 <Task_Orion+0x354>)
 8002232:	481a      	ldr	r0, [pc, #104]	; (800229c <Task_Orion+0x358>)
 8002234:	f00a fb06 	bl	800c844 <siprintf>
        	 //HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1),100000); // cabecera
        	 HAL_UART_Transmit_DMA(UART_ESP8266, ( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1));
 8002238:	4818      	ldr	r0, [pc, #96]	; (800229c <Task_Orion+0x358>)
 800223a:	f7fd ffdb 	bl	80001f4 <strlen>
 800223e:	4603      	mov	r3, r0
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	4915      	ldr	r1, [pc, #84]	; (800229c <Task_Orion+0x358>)
 8002246:	480e      	ldr	r0, [pc, #56]	; (8002280 <Task_Orion+0x33c>)
 8002248:	f005 fb50 	bl	80078ec <HAL_UART_Transmit_DMA>
        	 osDelay(10);
 800224c:	200a      	movs	r0, #10
 800224e:	f006 fb27 	bl	80088a0 <osDelay>
				xSemaphoreGive(ORION_xSem);
				continue;
			}
         	 HAL_UART_DMAStop(UART_ESP8266);
*/
     		 ORION_req.status=2;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <Task_Orion+0x344>)
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
     		 //print_buffer("ORION4", "He terminado\r\n");
     		 xSemaphoreGive(ORION_xSem);
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <Task_Orion+0x35c>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	2300      	movs	r3, #0
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	f006 fd91 	bl	8008d88 <xQueueGenericSend>
 8002266:	e67b      	b.n	8001f60 <Task_Orion+0x1c>

             }
        else{
            xSemaphoreGive(ORION_xSem);
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <Task_Orion+0x35c>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	f006 fd89 	bl	8008d88 <xQueueGenericSend>
        	vTaskDelay(10/portTICK_RATE_MS );
 8002276:	200a      	movs	r0, #10
 8002278:	f007 fc4a 	bl	8009b10 <vTaskDelay>
		while (xSemaphoreTake(ORION_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE )
 800227c:	e670      	b.n	8001f60 <Task_Orion+0x1c>
 800227e:	bf00      	nop
 8002280:	20000280 	.word	0x20000280
 8002284:	200006b0 	.word	0x200006b0
 8002288:	200005d4 	.word	0x200005d4
 800228c:	0801043c 	.word	0x0801043c
 8002290:	08010450 	.word	0x08010450
 8002294:	200004bc 	.word	0x200004bc
 8002298:	08010458 	.word	0x08010458
 800229c:	2000064c 	.word	0x2000064c
 80022a0:	200016c4 	.word	0x200016c4

080022a4 <ESP8266_RESET>:
        }
	}
}


void ESP8266_RESET(void){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	// RESET
	int ct;
	 HAL_UART_DMAStop(UART_ESP8266);
 80022aa:	481d      	ldr	r0, [pc, #116]	; (8002320 <ESP8266_RESET+0x7c>)
 80022ac:	f005 fbcc 	bl	8007a48 <HAL_UART_DMAStop>
	 HAL_UART_Init(UART_ESP8266);
 80022b0:	481b      	ldr	r0, [pc, #108]	; (8002320 <ESP8266_RESET+0x7c>)
 80022b2:	f005 fa3b 	bl	800772c <HAL_UART_Init>
	 	        	 for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	e007      	b.n	80022cc <ESP8266_RESET+0x28>
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <ESP8266_RESET+0x80>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3301      	adds	r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d2:	dbf3      	blt.n	80022bc <ESP8266_RESET+0x18>
	 	        	 HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80022d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d8:	4912      	ldr	r1, [pc, #72]	; (8002324 <ESP8266_RESET+0x80>)
 80022da:	4811      	ldr	r0, [pc, #68]	; (8002320 <ESP8266_RESET+0x7c>)
 80022dc:	f005 fb84 	bl	80079e8 <HAL_UART_Receive_DMA>

		HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2102      	movs	r1, #2
 80022e4:	4810      	ldr	r0, [pc, #64]	; (8002328 <ESP8266_RESET+0x84>)
 80022e6:	f004 fd6f 	bl	8006dc8 <HAL_GPIO_WritePin>
	  	 osDelay(100);
 80022ea:	2064      	movs	r0, #100	; 0x64
 80022ec:	f006 fad8 	bl	80088a0 <osDelay>
	  	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2102      	movs	r1, #2
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <ESP8266_RESET+0x84>)
 80022f6:	f004 fd67 	bl	8006dc8 <HAL_GPIO_WritePin>
		osDelay(3000);
 80022fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80022fe:	f006 facf 	bl	80088a0 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <ESP8266_RESET+0x7c>)
 8002304:	f005 fba0 	bl	8007a48 <HAL_UART_DMAStop>
		print_buffer("XXXXX",buff_recv);
 8002308:	4906      	ldr	r1, [pc, #24]	; (8002324 <ESP8266_RESET+0x80>)
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <ESP8266_RESET+0x88>)
 800230c:	f7ff f9ec 	bl	80016e8 <print_buffer>
		print_buffer("XXXXX","\r\n\n\n\nXXX1");
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <ESP8266_RESET+0x8c>)
 8002312:	4806      	ldr	r0, [pc, #24]	; (800232c <ESP8266_RESET+0x88>)
 8002314:	f7ff f9e8 	bl	80016e8 <print_buffer>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000280 	.word	0x20000280
 8002324:	200006b0 	.word	0x200006b0
 8002328:	40020800 	.word	0x40020800
 800232c:	08010468 	.word	0x08010468
 8002330:	08010470 	.word	0x08010470

08002334 <ESP8266_Boot>:
HAL_UART_DMAStop(UART_ESP8266);
print_buffer("TEST_ESP",buff_recv);
osDelay(500);
}
void ESP8266_Boot(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
	int ct;
 	 HAL_UART_Init(UART_ESP8266);
 800233a:	486b      	ldr	r0, [pc, #428]	; (80024e8 <ESP8266_Boot+0x1b4>)
 800233c:	f005 f9f6 	bl	800772c <HAL_UART_Init>
 	 HAL_UART_DMAStop(UART_ESP8266);
 8002340:	4869      	ldr	r0, [pc, #420]	; (80024e8 <ESP8266_Boot+0x1b4>)
 8002342:	f005 fb81 	bl	8007a48 <HAL_UART_DMAStop>

 	 ESP8266_RESET();
 8002346:	f7ff ffad 	bl	80022a4 <ESP8266_RESET>

		// version
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	e007      	b.n	8002360 <ESP8266_Boot+0x2c>
 8002350:	4a66      	ldr	r2, [pc, #408]	; (80024ec <ESP8266_Boot+0x1b8>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3301      	adds	r3, #1
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002366:	dbf3      	blt.n	8002350 <ESP8266_Boot+0x1c>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8002368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236c:	495f      	ldr	r1, [pc, #380]	; (80024ec <ESP8266_Boot+0x1b8>)
 800236e:	485e      	ldr	r0, [pc, #376]	; (80024e8 <ESP8266_Boot+0x1b4>)
 8002370:	f005 fb3a 	bl	80079e8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+GMR\r\n",strlen("AT+GMR\r\n"),10000);
 8002374:	f242 7310 	movw	r3, #10000	; 0x2710
 8002378:	2208      	movs	r2, #8
 800237a:	495d      	ldr	r1, [pc, #372]	; (80024f0 <ESP8266_Boot+0x1bc>)
 800237c:	485a      	ldr	r0, [pc, #360]	; (80024e8 <ESP8266_Boot+0x1b4>)
 800237e:	f005 fa22 	bl	80077c6 <HAL_UART_Transmit>
	osDelay(500);
 8002382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002386:	f006 fa8b 	bl	80088a0 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 800238a:	4857      	ldr	r0, [pc, #348]	; (80024e8 <ESP8266_Boot+0x1b4>)
 800238c:	f005 fb5c 	bl	8007a48 <HAL_UART_DMAStop>
	print_buffer("BOOT",buff_recv);
 8002390:	4956      	ldr	r1, [pc, #344]	; (80024ec <ESP8266_Boot+0x1b8>)
 8002392:	4858      	ldr	r0, [pc, #352]	; (80024f4 <ESP8266_Boot+0x1c0>)
 8002394:	f7ff f9a8 	bl	80016e8 <print_buffer>


	    // Tiene IP?
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e007      	b.n	80023ae <ESP8266_Boot+0x7a>
 800239e:	4a53      	ldr	r2, [pc, #332]	; (80024ec <ESP8266_Boot+0x1b8>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3301      	adds	r3, #1
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b4:	dbf3      	blt.n	800239e <ESP8266_Boot+0x6a>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80023b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ba:	494c      	ldr	r1, [pc, #304]	; (80024ec <ESP8266_Boot+0x1b8>)
 80023bc:	484a      	ldr	r0, [pc, #296]	; (80024e8 <ESP8266_Boot+0x1b4>)
 80023be:	f005 fb13 	bl	80079e8 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 80023c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80023c6:	220a      	movs	r2, #10
 80023c8:	494b      	ldr	r1, [pc, #300]	; (80024f8 <ESP8266_Boot+0x1c4>)
 80023ca:	4847      	ldr	r0, [pc, #284]	; (80024e8 <ESP8266_Boot+0x1b4>)
 80023cc:	f005 f9fb 	bl	80077c6 <HAL_UART_Transmit>
		osDelay(500);
 80023d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023d4:	f006 fa64 	bl	80088a0 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 80023d8:	4843      	ldr	r0, [pc, #268]	; (80024e8 <ESP8266_Boot+0x1b4>)
 80023da:	f005 fb35 	bl	8007a48 <HAL_UART_DMAStop>
		print_buffer("BOOT",buff_recv);
 80023de:	4943      	ldr	r1, [pc, #268]	; (80024ec <ESP8266_Boot+0x1b8>)
 80023e0:	4844      	ldr	r0, [pc, #272]	; (80024f4 <ESP8266_Boot+0x1c0>)
 80023e2:	f7ff f981 	bl	80016e8 <print_buffer>
		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);


		// Pon en modo station=1,  station+access_point=3
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	e007      	b.n	80023fc <ESP8266_Boot+0xc8>
 80023ec:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <ESP8266_Boot+0x1b8>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002402:	dbf3      	blt.n	80023ec <ESP8266_Boot+0xb8>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8002404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <ESP8266_Boot+0x1b8>)
 800240a:	4837      	ldr	r0, [pc, #220]	; (80024e8 <ESP8266_Boot+0x1b4>)
 800240c:	f005 faec 	bl	80079e8 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <ESP8266_Boot+0x1c8>)
 8002412:	220d      	movs	r2, #13
 8002414:	493a      	ldr	r1, [pc, #232]	; (8002500 <ESP8266_Boot+0x1cc>)
 8002416:	4834      	ldr	r0, [pc, #208]	; (80024e8 <ESP8266_Boot+0x1b4>)
 8002418:	f005 f9d5 	bl	80077c6 <HAL_UART_Transmit>
		osDelay(4000);
 800241c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002420:	f006 fa3e 	bl	80088a0 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 8002424:	4830      	ldr	r0, [pc, #192]	; (80024e8 <ESP8266_Boot+0x1b4>)
 8002426:	f005 fb0f 	bl	8007a48 <HAL_UART_DMAStop>
		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);
		print_buffer("BOOT",buff_recv);
 800242a:	4930      	ldr	r1, [pc, #192]	; (80024ec <ESP8266_Boot+0x1b8>)
 800242c:	4831      	ldr	r0, [pc, #196]	; (80024f4 <ESP8266_Boot+0x1c0>)
 800242e:	f7ff f95b 	bl	80016e8 <print_buffer>

		// Programa la contraseña del access-point
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e007      	b.n	8002448 <ESP8266_Boot+0x114>
 8002438:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <ESP8266_Boot+0x1b8>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3301      	adds	r3, #1
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244e:	dbf3      	blt.n	8002438 <ESP8266_Boot+0x104>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8002450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002454:	4925      	ldr	r1, [pc, #148]	; (80024ec <ESP8266_Boot+0x1b8>)
 8002456:	4824      	ldr	r0, [pc, #144]	; (80024e8 <ESP8266_Boot+0x1b4>)
 8002458:	f005 fac6 	bl	80079e8 <HAL_UART_Receive_DMA>

		HAL_UART_Transmit(UART_ESP8266,( unsigned char *) "AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n",strlen("AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n"),10000);
 800245c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002460:	2220      	movs	r2, #32
 8002462:	4928      	ldr	r1, [pc, #160]	; (8002504 <ESP8266_Boot+0x1d0>)
 8002464:	4820      	ldr	r0, [pc, #128]	; (80024e8 <ESP8266_Boot+0x1b4>)
 8002466:	f005 f9ae 	bl	80077c6 <HAL_UART_Transmit>
		print_buffer("BOOT",">>>>>>>>>>>>>>AT+CWJAP\r\n");
 800246a:	4927      	ldr	r1, [pc, #156]	; (8002508 <ESP8266_Boot+0x1d4>)
 800246c:	4821      	ldr	r0, [pc, #132]	; (80024f4 <ESP8266_Boot+0x1c0>)
 800246e:	f7ff f93b 	bl	80016e8 <print_buffer>
		osDelay(7000);
 8002472:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002476:	f006 fa13 	bl	80088a0 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 800247a:	481b      	ldr	r0, [pc, #108]	; (80024e8 <ESP8266_Boot+0x1b4>)
 800247c:	f005 fae4 	bl	8007a48 <HAL_UART_DMAStop>
		print_buffer("BOOT",buff_recv);
 8002480:	491a      	ldr	r1, [pc, #104]	; (80024ec <ESP8266_Boot+0x1b8>)
 8002482:	481c      	ldr	r0, [pc, #112]	; (80024f4 <ESP8266_Boot+0x1c0>)
 8002484:	f7ff f930 	bl	80016e8 <print_buffer>

		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);


		// verifica si hay IP
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	e007      	b.n	800249e <ESP8266_Boot+0x16a>
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <ESP8266_Boot+0x1b8>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a4:	dbf3      	blt.n	800248e <ESP8266_Boot+0x15a>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80024a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024aa:	4910      	ldr	r1, [pc, #64]	; (80024ec <ESP8266_Boot+0x1b8>)
 80024ac:	480e      	ldr	r0, [pc, #56]	; (80024e8 <ESP8266_Boot+0x1b4>)
 80024ae:	f005 fa9b 	bl	80079e8 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 80024b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80024b6:	220a      	movs	r2, #10
 80024b8:	490f      	ldr	r1, [pc, #60]	; (80024f8 <ESP8266_Boot+0x1c4>)
 80024ba:	480b      	ldr	r0, [pc, #44]	; (80024e8 <ESP8266_Boot+0x1b4>)
 80024bc:	f005 f983 	bl	80077c6 <HAL_UART_Transmit>
		print_buffer("BOOT",">>>>>>>>>>>>>>AT+CIFSR\r\n");
 80024c0:	4912      	ldr	r1, [pc, #72]	; (800250c <ESP8266_Boot+0x1d8>)
 80024c2:	480c      	ldr	r0, [pc, #48]	; (80024f4 <ESP8266_Boot+0x1c0>)
 80024c4:	f7ff f910 	bl	80016e8 <print_buffer>
		osDelay(3000);
 80024c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024cc:	f006 f9e8 	bl	80088a0 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <ESP8266_Boot+0x1b4>)
 80024d2:	f005 fab9 	bl	8007a48 <HAL_UART_DMAStop>
		print_buffer("",buff_recv);
 80024d6:	4905      	ldr	r1, [pc, #20]	; (80024ec <ESP8266_Boot+0x1b8>)
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <ESP8266_Boot+0x1dc>)
 80024da:	f7ff f905 	bl	80016e8 <print_buffer>
		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);

}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000280 	.word	0x20000280
 80024ec:	200006b0 	.word	0x200006b0
 80024f0:	08010490 	.word	0x08010490
 80024f4:	0801049c 	.word	0x0801049c
 80024f8:	080103a8 	.word	0x080103a8
 80024fc:	000186a0 	.word	0x000186a0
 8002500:	080104a4 	.word	0x080104a4
 8002504:	080104b4 	.word	0x080104b4
 8002508:	080104d8 	.word	0x080104d8
 800250c:	080104f4 	.word	0x080104f4
 8002510:	08010510 	.word	0x08010510

08002514 <Task_LEDS_ALARM>:
#include <jsmn.h>
#include <task.h>
#include <math.h>
#include <cJSON.h>

void Task_LEDS_ALARM( void *pvParameters ){
 8002514:	b580      	push	{r7, lr}
 8002516:	b0a0      	sub	sp, #128	; 0x80
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]

	int i,res,t;

	cJSON *jsons1 = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	663b      	str	r3, [r7, #96]	; 0x60
	        				    //char *string = cJSON_Print(json);
	        				 	  cJSON *name = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	65fb      	str	r3, [r7, #92]	; 0x5c
	        				 	  cJSON *name1 = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	65bb      	str	r3, [r7, #88]	; 0x58
	        				 	  cJSON *name2 = NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	657b      	str	r3, [r7, #84]	; 0x54
	        				 	  cJSON *name3 = NULL;
 800252c:	2300      	movs	r3, #0
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
	        				 	 cJSON *name4 = NULL;
 8002530:	2300      	movs	r3, #0
 8002532:	64fb      	str	r3, [r7, #76]	; 0x4c
	        				 	 cJSON *name5 = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
	        				 	 cJSON *name6 = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	647b      	str	r3, [r7, #68]	; 0x44


	char * buffer_response=malloc(2048);
 800253c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002540:	f009 fada 	bl	800baf8 <malloc>
 8002544:	4603      	mov	r3, r0
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
	char * buffer_response1=malloc(2048);
 8002548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800254c:	f009 fad4 	bl	800baf8 <malloc>
 8002550:	4603      	mov	r3, r0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (buffer_response==NULL) while(1);
 8002554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <Task_LEDS_ALARM+0x48>
 800255a:	e7fe      	b.n	800255a <Task_LEDS_ALARM+0x46>
	for (i=0;i<JSON_HOPS_LIMIT;i++){
 800255c:	2300      	movs	r3, #0
 800255e:	677b      	str	r3, [r7, #116]	; 0x74
 8002560:	e01f      	b.n	80025a2 <Task_LEDS_ALARM+0x8e>
        		        json_tree[i]= pvPortMalloc(JSON_NAME_LENGTH);
 8002562:	201e      	movs	r0, #30
 8002564:	f008 fee0 	bl	800b328 <pvPortMalloc>
 8002568:	4602      	mov	r2, r0
 800256a:	4987      	ldr	r1, [pc, #540]	; (8002788 <Task_LEDS_ALARM+0x274>)
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        		        if (json_tree[i]==NULL) {
 8002572:	4a85      	ldr	r2, [pc, #532]	; (8002788 <Task_LEDS_ALARM+0x274>)
 8002574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <Task_LEDS_ALARM+0x88>
        		        	sprintf(buff_sprintf100,"Error in MALOC_2 inside LEDSP\r\n");
 800257e:	4983      	ldr	r1, [pc, #524]	; (800278c <Task_LEDS_ALARM+0x278>)
 8002580:	4883      	ldr	r0, [pc, #524]	; (8002790 <Task_LEDS_ALARM+0x27c>)
 8002582:	f00a f95f 	bl	800c844 <siprintf>
        		        	HAL_UART_Transmit(UART_ESP8266,(unsigned char *)buff_sprintf100, strlen(buff_sprintf100),100000); // cabecera
 8002586:	4882      	ldr	r0, [pc, #520]	; (8002790 <Task_LEDS_ALARM+0x27c>)
 8002588:	f7fd fe34 	bl	80001f4 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b80      	ldr	r3, [pc, #512]	; (8002794 <Task_LEDS_ALARM+0x280>)
 8002592:	497f      	ldr	r1, [pc, #508]	; (8002790 <Task_LEDS_ALARM+0x27c>)
 8002594:	4880      	ldr	r0, [pc, #512]	; (8002798 <Task_LEDS_ALARM+0x284>)
 8002596:	f005 f916 	bl	80077c6 <HAL_UART_Transmit>
        		        	while(1);
 800259a:	e7fe      	b.n	800259a <Task_LEDS_ALARM+0x86>
	for (i=0;i<JSON_HOPS_LIMIT;i++){
 800259c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259e:	3301      	adds	r3, #1
 80025a0:	677b      	str	r3, [r7, #116]	; 0x74
 80025a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	dddc      	ble.n	8002562 <Task_LEDS_ALARM+0x4e>
        		        }
        		    }

	while(1){
		while (xSemaphoreTake(ORION_xSem, 10000/portTICK_RATE_MS  ) != pdTRUE )
 80025a8:	e002      	b.n	80025b0 <Task_LEDS_ALARM+0x9c>
			i=i+1;
 80025aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ac:	3301      	adds	r3, #1
 80025ae:	677b      	str	r3, [r7, #116]	; 0x74
		while (xSemaphoreTake(ORION_xSem, 10000/portTICK_RATE_MS  ) != pdTRUE )
 80025b0:	4b7a      	ldr	r3, [pc, #488]	; (800279c <Task_LEDS_ALARM+0x288>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 fe5f 	bl	800927c <xQueueSemaphoreTake>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d1f2      	bne.n	80025aa <Task_LEDS_ALARM+0x96>


		if ((ORION_req.status==0)&&(global_try_change_mode==1)){
 80025c4:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10e      	bne.n	80025ea <Task_LEDS_ALARM+0xd6>
 80025cc:	4b75      	ldr	r3, [pc, #468]	; (80027a4 <Task_LEDS_ALARM+0x290>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10a      	bne.n	80025ea <Task_LEDS_ALARM+0xd6>
		       xSemaphoreGive(ORION_xSem);
 80025d4:	4b71      	ldr	r3, [pc, #452]	; (800279c <Task_LEDS_ALARM+0x288>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	f006 fbd3 	bl	8008d88 <xQueueGenericSend>
		       vTaskDelay(100/portTICK_RATE_MS );
 80025e2:	2064      	movs	r0, #100	; 0x64
 80025e4:	f007 fa94 	bl	8009b10 <vTaskDelay>
		       continue;
 80025e8:	e298      	b.n	8002b1c <Task_LEDS_ALARM+0x608>
		}

		if ((ORION_req.status==1)&&(ORION_req.src!=1)){ //idle
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d11e      	bne.n	8002630 <Task_LEDS_ALARM+0x11c>
 80025f2:	4b6b      	ldr	r3, [pc, #428]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d01a      	beq.n	8002630 <Task_LEDS_ALARM+0x11c>
			switch (global_mode){
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <Task_LEDS_ALARM+0x294>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d002      	beq.n	8002608 <Task_LEDS_ALARM+0xf4>
 8002602:	2b03      	cmp	r3, #3
 8002604:	d006      	beq.n	8002614 <Task_LEDS_ALARM+0x100>
 8002606:	e00b      	b.n	8002620 <Task_LEDS_ALARM+0x10c>
        	case 2: 	  global_try_recv_connect++; break;
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <Task_LEDS_ALARM+0x298>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a67      	ldr	r2, [pc, #412]	; (80027ac <Task_LEDS_ALARM+0x298>)
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e005      	b.n	8002620 <Task_LEDS_ALARM+0x10c>
        	case 3:		  global_try_recv_clone++; break;
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <Task_LEDS_ALARM+0x29c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <Task_LEDS_ALARM+0x29c>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	bf00      	nop
			}
			xSemaphoreGive(ORION_xSem);
 8002620:	4b5e      	ldr	r3, [pc, #376]	; (800279c <Task_LEDS_ALARM+0x288>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	2300      	movs	r3, #0
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	f006 fbad 	bl	8008d88 <xQueueGenericSend>
			continue;
 800262e:	e275      	b.n	8002b1c <Task_LEDS_ALARM+0x608>
		}



        if (ORION_req.status==0){
 8002630:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d159      	bne.n	80026ec <Task_LEDS_ALARM+0x1d8>
        	//print_buffer("LEDS","REQ=0\r\n");
        	switch (global_mode){
 8002638:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <Task_LEDS_ALARM+0x294>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d002      	beq.n	8002646 <Task_LEDS_ALARM+0x132>
 8002640:	2b03      	cmp	r3, #3
 8002642:	d024      	beq.n	800268e <Task_LEDS_ALARM+0x17a>
 8002644:	e047      	b.n	80026d6 <Task_LEDS_ALARM+0x1c2>
        	case 2:
        		sprintf(buff_sprintf_body,ORION_QUERY_BODY,IoT_NAME);
 8002646:	4a5b      	ldr	r2, [pc, #364]	; (80027b4 <Task_LEDS_ALARM+0x2a0>)
 8002648:	495b      	ldr	r1, [pc, #364]	; (80027b8 <Task_LEDS_ALARM+0x2a4>)
 800264a:	485c      	ldr	r0, [pc, #368]	; (80027bc <Task_LEDS_ALARM+0x2a8>)
 800264c:	f00a f8fa 	bl	800c844 <siprintf>
                sprintf(buff_sprintf1024,"%s %d\r\n\r\n%s",ORION_QUERY,strlen(buff_sprintf_body),buff_sprintf_body);
 8002650:	485a      	ldr	r0, [pc, #360]	; (80027bc <Task_LEDS_ALARM+0x2a8>)
 8002652:	f7fd fdcf 	bl	80001f4 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <Task_LEDS_ALARM+0x2a8>)
 800265a:	9200      	str	r2, [sp, #0]
 800265c:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <Task_LEDS_ALARM+0x2ac>)
 800265e:	4959      	ldr	r1, [pc, #356]	; (80027c4 <Task_LEDS_ALARM+0x2b0>)
 8002660:	4859      	ldr	r0, [pc, #356]	; (80027c8 <Task_LEDS_ALARM+0x2b4>)
 8002662:	f00a f8ef 	bl	800c844 <siprintf>
                ORION_req.HTTP_request=buff_sprintf1024;
 8002666:	4b4e      	ldr	r3, [pc, #312]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <Task_LEDS_ALARM+0x2b4>)
 800266a:	60da      	str	r2, [r3, #12]
                ORION_req.machine_dest=ORION_ADDRESS;
 800266c:	4b4c      	ldr	r3, [pc, #304]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <Task_LEDS_ALARM+0x2b8>)
 8002670:	605a      	str	r2, [r3, #4]
                ORION_req.port_dest=ORION_PORT;
 8002672:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 8002674:	f242 7210 	movw	r2, #10000	; 0x2710
 8002678:	609a      	str	r2, [r3, #8]
                ORION_req.HTTP_response=buffer_response;
 800267a:	4a49      	ldr	r2, [pc, #292]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267e:	6113      	str	r3, [r2, #16]
                ORION_req.status=1; // solicitud
 8002680:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
                ORION_req.src=1;
 8002686:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 8002688:	2201      	movs	r2, #1
 800268a:	705a      	strb	r2, [r3, #1]

                break;
 800268c:	e023      	b.n	80026d6 <Task_LEDS_ALARM+0x1c2>
        	case 3:
        	        		sprintf(buff_sprintf_body,ORION_QUERY_BODY,IoT_NAME_CLONE);
 800268e:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <Task_LEDS_ALARM+0x2bc>)
 8002690:	4949      	ldr	r1, [pc, #292]	; (80027b8 <Task_LEDS_ALARM+0x2a4>)
 8002692:	484a      	ldr	r0, [pc, #296]	; (80027bc <Task_LEDS_ALARM+0x2a8>)
 8002694:	f00a f8d6 	bl	800c844 <siprintf>
        	        		sprintf(buff_sprintf1024,"%s %d\r\n\r\n%s",ORION_QUERY,strlen(buff_sprintf_body),buff_sprintf_body);
 8002698:	4848      	ldr	r0, [pc, #288]	; (80027bc <Task_LEDS_ALARM+0x2a8>)
 800269a:	f7fd fdab 	bl	80001f4 <strlen>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <Task_LEDS_ALARM+0x2a8>)
 80026a2:	9200      	str	r2, [sp, #0]
 80026a4:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <Task_LEDS_ALARM+0x2ac>)
 80026a6:	4947      	ldr	r1, [pc, #284]	; (80027c4 <Task_LEDS_ALARM+0x2b0>)
 80026a8:	4847      	ldr	r0, [pc, #284]	; (80027c8 <Task_LEDS_ALARM+0x2b4>)
 80026aa:	f00a f8cb 	bl	800c844 <siprintf>

        	                ORION_req.HTTP_request=buff_sprintf1024;
 80026ae:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026b0:	4a45      	ldr	r2, [pc, #276]	; (80027c8 <Task_LEDS_ALARM+0x2b4>)
 80026b2:	60da      	str	r2, [r3, #12]
        	                ORION_req.machine_dest=ORION_ADDRESS;
 80026b4:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026b6:	4a45      	ldr	r2, [pc, #276]	; (80027cc <Task_LEDS_ALARM+0x2b8>)
 80026b8:	605a      	str	r2, [r3, #4]
        	                ORION_req.port_dest=ORION_PORT;
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80026c0:	609a      	str	r2, [r3, #8]
        	                ORION_req.HTTP_response=buffer_response;
 80026c2:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c6:	6113      	str	r3, [r2, #16]
        	            	ORION_req.src=1;
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	705a      	strb	r2, [r3, #1]
        	                ORION_req.status=1; // solicitud
 80026ce:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
        	                break;
 80026d4:	bf00      	nop
        	}
        	xSemaphoreGive(ORION_xSem);
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <Task_LEDS_ALARM+0x288>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	f006 fb52 	bl	8008d88 <xQueueGenericSend>
        	vTaskDelay(1/portTICK_RATE_MS );
 80026e4:	2001      	movs	r0, #1
 80026e6:	f007 fa13 	bl	8009b10 <vTaskDelay>
 80026ea:	e761      	b.n	80025b0 <Task_LEDS_ALARM+0x9c>
        }
        else{
        	if ((ORION_req.status==2)&&(ORION_req.src==1)){
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f040 820c 	bne.w	8002b0e <Task_LEDS_ALARM+0x5fa>
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 8207 	bne.w	8002b0e <Task_LEDS_ALARM+0x5fa>
            		// si es !=1 y no es null es porque es la respuesta.
            		// procesarla
            		// se asume una escritura correcta y no se procesa

        		jsons1 = cJSON_Parse(ORION_req.HTTP_response);
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <Task_LEDS_ALARM+0x28c>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4618      	mov	r0, r3
 8002706:	f001 f917 	bl	8003938 <cJSON_Parse>
 800270a:	6638      	str	r0, [r7, #96]	; 0x60

        			switch (global_mode){
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <Task_LEDS_ALARM+0x294>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	f000 816c 	beq.w	80029ee <Task_LEDS_ALARM+0x4da>
 8002716:	2b03      	cmp	r3, #3
 8002718:	f040 81dc 	bne.w	8002ad4 <Task_LEDS_ALARM+0x5c0>


        				    //char *string = cJSON_Print(json);


        				 	 name = cJSON_GetObjectItem(jsons1, "contextResponses");
 800271c:	492d      	ldr	r1, [pc, #180]	; (80027d4 <Task_LEDS_ALARM+0x2c0>)
 800271e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002720:	f001 fc67 	bl	8003ff2 <cJSON_GetObjectItem>
 8002724:	65f8      	str	r0, [r7, #92]	; 0x5c
        				 	 name1 =  cJSON_GetArrayItem(name, 0);
 8002726:	2100      	movs	r1, #0
 8002728:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800272a:	f001 fc06 	bl	8003f3a <cJSON_GetArrayItem>
 800272e:	65b8      	str	r0, [r7, #88]	; 0x58
        				 	 name2 = cJSON_GetObjectItem(name1,"contextElement");
 8002730:	4929      	ldr	r1, [pc, #164]	; (80027d8 <Task_LEDS_ALARM+0x2c4>)
 8002732:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002734:	f001 fc5d 	bl	8003ff2 <cJSON_GetObjectItem>
 8002738:	6578      	str	r0, [r7, #84]	; 0x54
        				 	 name3 = cJSON_GetObjectItem(name2,"attributes");
 800273a:	4928      	ldr	r1, [pc, #160]	; (80027dc <Task_LEDS_ALARM+0x2c8>)
 800273c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800273e:	f001 fc58 	bl	8003ff2 <cJSON_GetObjectItem>
 8002742:	6538      	str	r0, [r7, #80]	; 0x50
        				 	  for (i = 0 ; i < cJSON_GetArraySize(name3) ; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	677b      	str	r3, [r7, #116]	; 0x74
 8002748:	e148      	b.n	80029dc <Task_LEDS_ALARM+0x4c8>
        				 	  {
        				 	     cJSON * subitem = cJSON_GetArrayItem(name3, i);
 800274a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800274c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800274e:	f001 fbf4 	bl	8003f3a <cJSON_GetArrayItem>
 8002752:	63b8      	str	r0, [r7, #56]	; 0x38
        				 	    cJSON * index;
        				 	     name4 = cJSON_GetObjectItem(subitem, "name");
 8002754:	4922      	ldr	r1, [pc, #136]	; (80027e0 <Task_LEDS_ALARM+0x2cc>)
 8002756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002758:	f001 fc4b 	bl	8003ff2 <cJSON_GetObjectItem>
 800275c:	64f8      	str	r0, [r7, #76]	; 0x4c
        				 	     if (strcmp(name4->valuestring,"Temperatura")==0){
 800275e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	4920      	ldr	r1, [pc, #128]	; (80027e4 <Task_LEDS_ALARM+0x2d0>)
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fd3b 	bl	80001e0 <strcmp>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 80a1 	bne.w	80028b4 <Task_LEDS_ALARM+0x3a0>
        				 	    	 index = cJSON_GetObjectItem(subitem, "value");
 8002772:	491d      	ldr	r1, [pc, #116]	; (80027e8 <Task_LEDS_ALARM+0x2d4>)
 8002774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002776:	f001 fc3c 	bl	8003ff2 <cJSON_GetObjectItem>
 800277a:	6378      	str	r0, [r7, #52]	; 0x34
        				 	    	  char * json_value;
        				 	    	 char * pt1,*pt2,*pt3;
        	        		    		int t,h;
        	        		    		        		    		h=0;
 800277c:	2300      	movs	r3, #0
 800277e:	66fb      	str	r3, [r7, #108]	; 0x6c
        	        		    		        		    		for (t=0;t<100;t++)
 8002780:	2300      	movs	r3, #0
 8002782:	673b      	str	r3, [r7, #112]	; 0x70
 8002784:	e03f      	b.n	8002806 <Task_LEDS_ALARM+0x2f2>
 8002786:	bf00      	nop
 8002788:	200016b0 	.word	0x200016b0
 800278c:	08010514 	.word	0x08010514
 8002790:	200005e8 	.word	0x200005e8
 8002794:	000186a0 	.word	0x000186a0
 8002798:	20000280 	.word	0x20000280
 800279c:	200016c4 	.word	0x200016c4
 80027a0:	200005d4 	.word	0x200005d4
 80027a4:	2000056a 	.word	0x2000056a
 80027a8:	20000568 	.word	0x20000568
 80027ac:	200004b4 	.word	0x200004b4
 80027b0:	200004a4 	.word	0x200004a4
 80027b4:	08010534 	.word	0x08010534
 80027b8:	08010544 	.word	0x08010544
 80027bc:	20000eb0 	.word	0x20000eb0
 80027c0:	08010588 	.word	0x08010588
 80027c4:	08010608 	.word	0x08010608
 80027c8:	200012b0 	.word	0x200012b0
 80027cc:	08010614 	.word	0x08010614
 80027d0:	0801062c 	.word	0x0801062c
 80027d4:	0801063c 	.word	0x0801063c
 80027d8:	08010650 	.word	0x08010650
 80027dc:	08010660 	.word	0x08010660
 80027e0:	0801066c 	.word	0x0801066c
 80027e4:	08010674 	.word	0x08010674
 80027e8:	08010680 	.word	0x08010680
        	        		    		        		    			if (index->valuestring[t]==',') h++;
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f2:	4413      	add	r3, r2
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b2c      	cmp	r3, #44	; 0x2c
 80027f8:	d102      	bne.n	8002800 <Task_LEDS_ALARM+0x2ec>
 80027fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fc:	3301      	adds	r3, #1
 80027fe:	66fb      	str	r3, [r7, #108]	; 0x6c
        	        		    		        		    		for (t=0;t<100;t++)
 8002800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002802:	3301      	adds	r3, #1
 8002804:	673b      	str	r3, [r7, #112]	; 0x70
 8002806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002808:	2b63      	cmp	r3, #99	; 0x63
 800280a:	ddef      	ble.n	80027ec <Task_LEDS_ALARM+0x2d8>
        	        		    		        		    		if (h>=3){
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	2b02      	cmp	r3, #2
 8002810:	dd50      	ble.n	80028b4 <Task_LEDS_ALARM+0x3a0>
        	        		    		        		    				json_value=index->valuestring;
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
        	        		    		        		    				global_recv_clone++;   // se contabilizan como válidas
 8002818:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <Task_LEDS_ALARM+0x514>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	4a82      	ldr	r2, [pc, #520]	; (8002a28 <Task_LEDS_ALARM+0x514>)
 8002820:	6013      	str	r3, [r2, #0]

        	        		    		        		    					pt1=strstr(json_value,",");
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002826:	f00a f870 	bl	800c90a <strchr>
 800282a:	62f8      	str	r0, [r7, #44]	; 0x2c
        	        		    		        		    				    pt2=strstr(pt1+1,",");
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	3301      	adds	r3, #1
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	4618      	mov	r0, r3
 8002834:	f00a f869 	bl	800c90a <strchr>
 8002838:	62b8      	str	r0, [r7, #40]	; 0x28
        	        		    		        		    				    	pt3=strstr(pt2+1,",");
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	3301      	adds	r3, #1
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	4618      	mov	r0, r3
 8002842:	f00a f862 	bl	800c90a <strchr>
 8002846:	6278      	str	r0, [r7, #36]	; 0x24
        	        		    		        		    				    	global_sensor_level[0]=atof(json_value);
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f008 ff59 	bl	800b700 <atof>
 800284e:	ec53 2b10 	vmov	r2, r3, d0
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe f9df 	bl	8000c18 <__aeabi_d2f>
 800285a:	4603      	mov	r3, r0
 800285c:	4a73      	ldr	r2, [pc, #460]	; (8002a2c <Task_LEDS_ALARM+0x518>)
 800285e:	6013      	str	r3, [r2, #0]
        	        		    		        		    				    	global_sensor_level_max[0]=atof(pt1+1);
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	3301      	adds	r3, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f008 ff4b 	bl	800b700 <atof>
 800286a:	ec53 2b10 	vmov	r2, r3, d0
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f7fe f9d1 	bl	8000c18 <__aeabi_d2f>
 8002876:	4603      	mov	r3, r0
 8002878:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <Task_LEDS_ALARM+0x51c>)
 800287a:	6013      	str	r3, [r2, #0]
        	        		    		        		    				    	global_sensor_level_min[0]=atof(pt2+1);
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	3301      	adds	r3, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f008 ff3d 	bl	800b700 <atof>
 8002886:	ec53 2b10 	vmov	r2, r3, d0
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe f9c3 	bl	8000c18 <__aeabi_d2f>
 8002892:	4603      	mov	r3, r0
 8002894:	4a67      	ldr	r2, [pc, #412]	; (8002a34 <Task_LEDS_ALARM+0x520>)
 8002896:	6013      	str	r3, [r2, #0]
        	        		    		        		    				    	global_sensor_level_alarm[0]=atof(pt3+1);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	3301      	adds	r3, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f008 ff2f 	bl	800b700 <atof>
 80028a2:	ec53 2b10 	vmov	r2, r3, d0
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f9b5 	bl	8000c18 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <Task_LEDS_ALARM+0x524>)
 80028b2:	6013      	str	r3, [r2, #0]
        	        		    		        		    		}
        				 	     }
        				 	    if (strcmp(name4->valuestring,"IntensidadLuz")==0){
 80028b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4960      	ldr	r1, [pc, #384]	; (8002a3c <Task_LEDS_ALARM+0x528>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fc90 	bl	80001e0 <strcmp>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d16d      	bne.n	80029a2 <Task_LEDS_ALARM+0x48e>
        				 	            				 	    	 index = cJSON_GetObjectItem(subitem, "value");
 80028c6:	495e      	ldr	r1, [pc, #376]	; (8002a40 <Task_LEDS_ALARM+0x52c>)
 80028c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028ca:	f001 fb92 	bl	8003ff2 <cJSON_GetObjectItem>
 80028ce:	6378      	str	r0, [r7, #52]	; 0x34
        				 	            				 	    	  char * json_value;
        				 	            				 	    	 char * pt1,*pt2,*pt3;
        				 	            	        		    		int t,h;
        				 	            	        		    		        		    		h=0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	667b      	str	r3, [r7, #100]	; 0x64
        				 	            	        		    		        		    		for (t=0;t<100;t++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d8:	e00c      	b.n	80028f4 <Task_LEDS_ALARM+0x3e0>
        				 	            	        		    		        		    			if (index->valuestring[t]==',') h++;
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b2c      	cmp	r3, #44	; 0x2c
 80028e6:	d102      	bne.n	80028ee <Task_LEDS_ALARM+0x3da>
 80028e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ea:	3301      	adds	r3, #1
 80028ec:	667b      	str	r3, [r7, #100]	; 0x64
        				 	            	        		    		        		    		for (t=0;t<100;t++)
 80028ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f0:	3301      	adds	r3, #1
 80028f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f6:	2b63      	cmp	r3, #99	; 0x63
 80028f8:	ddef      	ble.n	80028da <Task_LEDS_ALARM+0x3c6>
        				 	            	        		    		        		    		if (h>=3){
 80028fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	dd50      	ble.n	80029a2 <Task_LEDS_ALARM+0x48e>
        				 	            	        		    		        		    				json_value=index->valuestring;
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	623b      	str	r3, [r7, #32]
        				 	            	        		    		        		    				global_recv_clone++;   // se contabilizan como válidas
 8002906:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <Task_LEDS_ALARM+0x514>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	4a46      	ldr	r2, [pc, #280]	; (8002a28 <Task_LEDS_ALARM+0x514>)
 800290e:	6013      	str	r3, [r2, #0]

        				 	            	        		    		        		    					pt1=strstr(json_value,",");
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	6a38      	ldr	r0, [r7, #32]
 8002914:	f009 fff9 	bl	800c90a <strchr>
 8002918:	61f8      	str	r0, [r7, #28]
        				 	            	        		    		        		    				    pt2=strstr(pt1+1,",");
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	4618      	mov	r0, r3
 8002922:	f009 fff2 	bl	800c90a <strchr>
 8002926:	61b8      	str	r0, [r7, #24]
        				 	            	        		    		        		    				    	pt3=strstr(pt2+1,",");
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	3301      	adds	r3, #1
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	4618      	mov	r0, r3
 8002930:	f009 ffeb 	bl	800c90a <strchr>
 8002934:	6178      	str	r0, [r7, #20]
        				 	            	        		    		        		    				    	global_sensor_level[1]=atof(json_value);
 8002936:	6a38      	ldr	r0, [r7, #32]
 8002938:	f008 fee2 	bl	800b700 <atof>
 800293c:	ec53 2b10 	vmov	r2, r3, d0
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f968 	bl	8000c18 <__aeabi_d2f>
 8002948:	4603      	mov	r3, r0
 800294a:	4a38      	ldr	r2, [pc, #224]	; (8002a2c <Task_LEDS_ALARM+0x518>)
 800294c:	6053      	str	r3, [r2, #4]
        				 	            	        		    		        		    				    	global_sensor_level_max[1]=atof(pt1+1);
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f008 fed4 	bl	800b700 <atof>
 8002958:	ec53 2b10 	vmov	r2, r3, d0
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f95a 	bl	8000c18 <__aeabi_d2f>
 8002964:	4603      	mov	r3, r0
 8002966:	4a32      	ldr	r2, [pc, #200]	; (8002a30 <Task_LEDS_ALARM+0x51c>)
 8002968:	6053      	str	r3, [r2, #4]
        				 	            	        		    		        		    				    	global_sensor_level_min[1]=atof(pt2+1);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	3301      	adds	r3, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f008 fec6 	bl	800b700 <atof>
 8002974:	ec53 2b10 	vmov	r2, r3, d0
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f94c 	bl	8000c18 <__aeabi_d2f>
 8002980:	4603      	mov	r3, r0
 8002982:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <Task_LEDS_ALARM+0x520>)
 8002984:	6053      	str	r3, [r2, #4]
        				 	            	        		    		        		    				    	global_sensor_level_alarm[1]=atof(pt3+1);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f008 feb8 	bl	800b700 <atof>
 8002990:	ec53 2b10 	vmov	r2, r3, d0
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe f93e 	bl	8000c18 <__aeabi_d2f>
 800299c:	4603      	mov	r3, r0
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <Task_LEDS_ALARM+0x524>)
 80029a0:	6053      	str	r3, [r2, #4]
        				 	            	        		    		        		    		}
        				 	            				 	     }
        				 	    if (strcmp(name4->valuestring,"Alarma")==0){
 80029a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4927      	ldr	r1, [pc, #156]	; (8002a44 <Task_LEDS_ALARM+0x530>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fc19 	bl	80001e0 <strcmp>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d110      	bne.n	80029d6 <Task_LEDS_ALARM+0x4c2>
        				 	            				 	    	 index = cJSON_GetObjectItem(subitem, "value");
 80029b4:	4922      	ldr	r1, [pc, #136]	; (8002a40 <Task_LEDS_ALARM+0x52c>)
 80029b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029b8:	f001 fb1b 	bl	8003ff2 <cJSON_GetObjectItem>
 80029bc:	6378      	str	r0, [r7, #52]	; 0x34
        				 	            				 	    	  char * json_value;
        				 	            				 	    	 char * pt1,*pt2,*pt3;
        				 	            	        		    		int t,h;
        				 	            	        		    		if (index->valuestring[0]=='T')
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b54      	cmp	r3, #84	; 0x54
 80029c6:	d103      	bne.n	80029d0 <Task_LEDS_ALARM+0x4bc>
        				 	            	        		    			global_alarm_trigger_value='1';
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <Task_LEDS_ALARM+0x534>)
 80029ca:	2231      	movs	r2, #49	; 0x31
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e002      	b.n	80029d6 <Task_LEDS_ALARM+0x4c2>
        				 	            	        	   		    	else
        				 	            	        		    			        		    		global_buzzer=0;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <Task_LEDS_ALARM+0x538>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
        				 	  for (i = 0 ; i < cJSON_GetArraySize(name3) ; i++)
 80029d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d8:	3301      	adds	r3, #1
 80029da:	677b      	str	r3, [r7, #116]	; 0x74
 80029dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80029de:	f001 fa68 	bl	8003eb2 <cJSON_GetArraySize>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e6:	4293      	cmp	r3, r2
 80029e8:	f6ff aeaf 	blt.w	800274a <Task_LEDS_ALARM+0x236>

        				 	    }
        				 	  }

        		    	break;
 80029ec:	e072      	b.n	8002ad4 <Task_LEDS_ALARM+0x5c0>
        				case 2: // mode conectado
        					global_recv_connect++;
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <Task_LEDS_ALARM+0x53c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <Task_LEDS_ALARM+0x53c>)
 80029f6:	6013      	str	r3, [r2, #0]
        									 name = cJSON_GetObjectItem(jsons1, "contextResponses");
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <Task_LEDS_ALARM+0x540>)
 80029fa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80029fc:	f001 faf9 	bl	8003ff2 <cJSON_GetObjectItem>
 8002a00:	65f8      	str	r0, [r7, #92]	; 0x5c
        		        				 	 name1 =  cJSON_GetArrayItem(name, 0);
 8002a02:	2100      	movs	r1, #0
 8002a04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a06:	f001 fa98 	bl	8003f3a <cJSON_GetArrayItem>
 8002a0a:	65b8      	str	r0, [r7, #88]	; 0x58
        		        				 	 name2 = cJSON_GetObjectItem(name1,"contextElement");
 8002a0c:	4912      	ldr	r1, [pc, #72]	; (8002a58 <Task_LEDS_ALARM+0x544>)
 8002a0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a10:	f001 faef 	bl	8003ff2 <cJSON_GetObjectItem>
 8002a14:	6578      	str	r0, [r7, #84]	; 0x54
        		        				 	 name3 = cJSON_GetObjectItem(name2,"attributes");
 8002a16:	4911      	ldr	r1, [pc, #68]	; (8002a5c <Task_LEDS_ALARM+0x548>)
 8002a18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a1a:	f001 faea 	bl	8003ff2 <cJSON_GetObjectItem>
 8002a1e:	6538      	str	r0, [r7, #80]	; 0x50
        		        				 	  for (i = 0 ; i < cJSON_GetArraySize(name3) ; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	677b      	str	r3, [r7, #116]	; 0x74
 8002a24:	e04e      	b.n	8002ac4 <Task_LEDS_ALARM+0x5b0>
 8002a26:	bf00      	nop
 8002a28:	20000498 	.word	0x20000498
 8002a2c:	200004dc 	.word	0x200004dc
 8002a30:	200004c4 	.word	0x200004c4
 8002a34:	200004cc 	.word	0x200004cc
 8002a38:	200004d4 	.word	0x200004d4
 8002a3c:	08010688 	.word	0x08010688
 8002a40:	08010680 	.word	0x08010680
 8002a44:	08010698 	.word	0x08010698
 8002a48:	200004f4 	.word	0x200004f4
 8002a4c:	200004f0 	.word	0x200004f0
 8002a50:	200004a8 	.word	0x200004a8
 8002a54:	0801063c 	.word	0x0801063c
 8002a58:	08010650 	.word	0x08010650
 8002a5c:	08010660 	.word	0x08010660
        		        				 	  {
        		        				 	     cJSON * subitem = cJSON_GetArrayItem(name3, i);
 8002a60:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a64:	f001 fa69 	bl	8003f3a <cJSON_GetArrayItem>
 8002a68:	6138      	str	r0, [r7, #16]
        		        				 	    cJSON * index;
        		        				 	     name4 = cJSON_GetObjectItem(subitem, "name");
 8002a6a:	492d      	ldr	r1, [pc, #180]	; (8002b20 <Task_LEDS_ALARM+0x60c>)
 8002a6c:	6938      	ldr	r0, [r7, #16]
 8002a6e:	f001 fac0 	bl	8003ff2 <cJSON_GetObjectItem>
 8002a72:	64f8      	str	r0, [r7, #76]	; 0x4c
        		        				 	     if (strcmp(name4->valuestring,"Alarma_src")==0){
 8002a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	492a      	ldr	r1, [pc, #168]	; (8002b24 <Task_LEDS_ALARM+0x610>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fbb0 	bl	80001e0 <strcmp>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11b      	bne.n	8002abe <Task_LEDS_ALARM+0x5aa>
        		        				 	    	 index = cJSON_GetObjectItem(subitem, "value");
 8002a86:	4928      	ldr	r1, [pc, #160]	; (8002b28 <Task_LEDS_ALARM+0x614>)
 8002a88:	6938      	ldr	r0, [r7, #16]
 8002a8a:	f001 fab2 	bl	8003ff2 <cJSON_GetObjectItem>
 8002a8e:	60f8      	str	r0, [r7, #12]

        		        				 	    	if (!(strcmp(last_alarm_src_trigger,index->valuestring)==0)) // son iguales no se actua sobre buzzer
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4825      	ldr	r0, [pc, #148]	; (8002b2c <Task_LEDS_ALARM+0x618>)
 8002a98:	f7fd fba2 	bl	80001e0 <strcmp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <Task_LEDS_ALARM+0x5aa>
        		        				 	    		{
        		        				 	    			strcpy(last_alarm_src_trigger,index->valuestring); // para que no lo desconecte constantemente, sólo una vez
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4820      	ldr	r0, [pc, #128]	; (8002b2c <Task_LEDS_ALARM+0x618>)
 8002aaa:	f009 ff3b 	bl	800c924 <strcpy>
        		        				 	    			global_alarm_trigger_time=xTaskGetTickCount();
 8002aae:	f007 f97f 	bl	8009db0 <xTaskGetTickCount>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <Task_LEDS_ALARM+0x61c>)
 8002ab6:	6013      	str	r3, [r2, #0]
        		        				 	    			global_buzzer=0;
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <Task_LEDS_ALARM+0x620>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
        		        				 	  for (i = 0 ; i < cJSON_GetArraySize(name3) ; i++)
 8002abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ac4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ac6:	f001 f9f4 	bl	8003eb2 <cJSON_GetArraySize>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	dbc6      	blt.n	8002a60 <Task_LEDS_ALARM+0x54c>
        		        				 	    		}
        		        				 	     }
        		        				 	  }
        		    		break;
 8002ad2:	bf00      	nop
        			}

                    //sprintf(buffer_response,"%c\r\n",global_alarm);
                    //print_buffer("ALARM","He terminado de procesar\r\n");
        		    cJSON_Delete(jsons1);
 8002ad4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ad6:	f000 fa33 	bl	8002f40 <cJSON_Delete>
                    ORION_req.status=0;
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <Task_LEDS_ALARM+0x624>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
                    ORION_req.src=0;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <Task_LEDS_ALARM+0x624>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	705a      	strb	r2, [r3, #1]
            		xSemaphoreGive(ORION_xSem);
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <Task_LEDS_ALARM+0x628>)
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	2300      	movs	r3, #0
 8002aec:	2200      	movs	r2, #0
 8002aee:	2100      	movs	r1, #0
 8002af0:	f006 f94a 	bl	8008d88 <xQueueGenericSend>
            		vTaskDelay((1+rand()%2)/portTICK_RATE_MS );
 8002af4:	f009 fde6 	bl	800c6c4 <rand>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	bfb8      	it	lt
 8002b02:	425b      	neglt	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f007 f802 	bl	8009b10 <vTaskDelay>
 8002b0c:	e006      	b.n	8002b1c <Task_LEDS_ALARM+0x608>
        	}else{
                xSemaphoreGive(ORION_xSem);
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <Task_LEDS_ALARM+0x628>)
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	f006 f936 	bl	8008d88 <xQueueGenericSend>
		while (xSemaphoreTake(ORION_xSem, 10000/portTICK_RATE_MS  ) != pdTRUE )
 8002b1c:	e548      	b.n	80025b0 <Task_LEDS_ALARM+0x9c>
 8002b1e:	bf00      	nop
 8002b20:	0801066c 	.word	0x0801066c
 8002b24:	080106a0 	.word	0x080106a0
 8002b28:	08010680 	.word	0x08010680
 8002b2c:	20000504 	.word	0x20000504
 8002b30:	200004f8 	.word	0x200004f8
 8002b34:	200004f0 	.word	0x200004f0
 8002b38:	200005d4 	.word	0x200005d4
 8002b3c:	200016c4 	.word	0x200016c4

08002b40 <Task_TEMP>:
#include <jsmn.h>
#include <task.h>
#include <math.h>


void Task_TEMP( void *pvParameters ){
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b09e      	sub	sp, #120	; 0x78
 8002b46:	af12      	add	r7, sp, #72	; 0x48
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24
int i;

	while(1){
		while (xSemaphoreTake(ORION_xSem, 10000/portTICK_RATE_MS  ) != pdTRUE )
 8002b4a:	e002      	b.n	8002b52 <Task_TEMP+0x12>
			i=i+1;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	3301      	adds	r3, #1
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (xSemaphoreTake(ORION_xSem, 10000/portTICK_RATE_MS  ) != pdTRUE )
 8002b52:	4b9d      	ldr	r3, [pc, #628]	; (8002dc8 <Task_TEMP+0x288>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f242 7110 	movw	r1, #10000	; 0x2710
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f006 fb8e 	bl	800927c <xQueueSemaphoreTake>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d1f2      	bne.n	8002b4c <Task_TEMP+0xc>

		if ((ORION_req.status==0)&&(global_try_change_mode==1)){
 8002b66:	4b99      	ldr	r3, [pc, #612]	; (8002dcc <Task_TEMP+0x28c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10e      	bne.n	8002b8c <Task_TEMP+0x4c>
 8002b6e:	4b98      	ldr	r3, [pc, #608]	; (8002dd0 <Task_TEMP+0x290>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10a      	bne.n	8002b8c <Task_TEMP+0x4c>
						       xSemaphoreGive(ORION_xSem);
 8002b76:	4b94      	ldr	r3, [pc, #592]	; (8002dc8 <Task_TEMP+0x288>)
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f006 f902 	bl	8008d88 <xQueueGenericSend>
						       vTaskDelay(100/portTICK_RATE_MS );
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	f006 ffc3 	bl	8009b10 <vTaskDelay>
						       continue;
 8002b8a:	e154      	b.n	8002e36 <Task_TEMP+0x2f6>
						}

		if ((ORION_req.status==1)&&(ORION_req.src!=2)){ //idle
 8002b8c:	4b8f      	ldr	r3, [pc, #572]	; (8002dcc <Task_TEMP+0x28c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d11e      	bne.n	8002bd2 <Task_TEMP+0x92>
 8002b94:	4b8d      	ldr	r3, [pc, #564]	; (8002dcc <Task_TEMP+0x28c>)
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d01a      	beq.n	8002bd2 <Task_TEMP+0x92>
			switch (global_mode){
 8002b9c:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <Task_TEMP+0x294>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d002      	beq.n	8002baa <Task_TEMP+0x6a>
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d006      	beq.n	8002bb6 <Task_TEMP+0x76>
 8002ba8:	e00b      	b.n	8002bc2 <Task_TEMP+0x82>
        	case 2: 	  global_try_trans_connect++; break;
 8002baa:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <Task_TEMP+0x298>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <Task_TEMP+0x298>)
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e005      	b.n	8002bc2 <Task_TEMP+0x82>
        	case 3:		  global_try_trans_clone++; break;
 8002bb6:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <Task_TEMP+0x29c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <Task_TEMP+0x29c>)
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	bf00      	nop
			}
			xSemaphoreGive(ORION_xSem);
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <Task_TEMP+0x288>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2100      	movs	r1, #0
 8002bcc:	f006 f8dc 	bl	8008d88 <xQueueGenericSend>
			continue;
 8002bd0:	e131      	b.n	8002e36 <Task_TEMP+0x2f6>
		}



		if (ORION_req.status==0){ //idle
 8002bd2:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <Task_TEMP+0x28c>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 80c0 	bne.w	8002d5c <Task_TEMP+0x21c>
       // print_buffer("TEMP","REQ=0\r\n");
        	switch (global_mode){
 8002bdc:	4b7d      	ldr	r3, [pc, #500]	; (8002dd4 <Task_TEMP+0x294>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d002      	beq.n	8002bea <Task_TEMP+0xaa>
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d07a      	beq.n	8002cde <Task_TEMP+0x19e>
 8002be8:	e0ad      	b.n	8002d46 <Task_TEMP+0x206>
        	case 2: // conectado publica
        	sprintf(buff_sprintf_body,ORION_UPDATE_BODY_TEMP,IoT_NAME,global_sensor_level[0],global_sensor_level_max[0],global_sensor_level_min[0],global_sensor_level_alarm[0],global_sensor_level[1],global_sensor_level_max[1],global_sensor_level_min[1],global_sensor_level_alarm[1],global_buzzer?'T':'F');
 8002bea:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <Task_TEMP+0x2a0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fcc2 	bl	8000578 <__aeabi_f2d>
 8002bf4:	4682      	mov	sl, r0
 8002bf6:	468b      	mov	fp, r1
 8002bf8:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <Task_TEMP+0x2a4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcbb 	bl	8000578 <__aeabi_f2d>
 8002c02:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002c06:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <Task_TEMP+0x2a8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcb4 	bl	8000578 <__aeabi_f2d>
 8002c10:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <Task_TEMP+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fcad 	bl	8000578 <__aeabi_f2d>
 8002c1e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <Task_TEMP+0x2a0>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fca6 	bl	8000578 <__aeabi_f2d>
 8002c2c:	e9c7 0100 	strd	r0, r1, [r7]
 8002c30:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <Task_TEMP+0x2a4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc9f 	bl	8000578 <__aeabi_f2d>
 8002c3a:	4680      	mov	r8, r0
 8002c3c:	4689      	mov	r9, r1
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <Task_TEMP+0x2a8>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc98 	bl	8000578 <__aeabi_f2d>
 8002c48:	4604      	mov	r4, r0
 8002c4a:	460d      	mov	r5, r1
 8002c4c:	4b67      	ldr	r3, [pc, #412]	; (8002dec <Task_TEMP+0x2ac>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc91 	bl	8000578 <__aeabi_f2d>
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <Task_TEMP+0x2b0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <Task_TEMP+0x122>
 8002c5e:	2354      	movs	r3, #84	; 0x54
 8002c60:	e000      	b.n	8002c64 <Task_TEMP+0x124>
 8002c62:	2346      	movs	r3, #70	; 0x46
 8002c64:	9310      	str	r3, [sp, #64]	; 0x40
 8002c66:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002c6a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8002c6e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002c72:	ed97 7b00 	vldr	d7, [r7]
 8002c76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002c7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002c82:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002c8a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002c8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c92:	e9cd ab00 	strd	sl, fp, [sp]
 8002c96:	4a57      	ldr	r2, [pc, #348]	; (8002df4 <Task_TEMP+0x2b4>)
 8002c98:	4957      	ldr	r1, [pc, #348]	; (8002df8 <Task_TEMP+0x2b8>)
 8002c9a:	4858      	ldr	r0, [pc, #352]	; (8002dfc <Task_TEMP+0x2bc>)
 8002c9c:	f009 fdd2 	bl	800c844 <siprintf>
        	sprintf(buff_sprintf1024,"%s %d\r\n\r\n%s",ORION_UPDATE,strlen(buff_sprintf_body),buff_sprintf_body);
 8002ca0:	4856      	ldr	r0, [pc, #344]	; (8002dfc <Task_TEMP+0x2bc>)
 8002ca2:	f7fd faa7 	bl	80001f4 <strlen>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a54      	ldr	r2, [pc, #336]	; (8002dfc <Task_TEMP+0x2bc>)
 8002caa:	9200      	str	r2, [sp, #0]
 8002cac:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <Task_TEMP+0x2c0>)
 8002cae:	4955      	ldr	r1, [pc, #340]	; (8002e04 <Task_TEMP+0x2c4>)
 8002cb0:	4855      	ldr	r0, [pc, #340]	; (8002e08 <Task_TEMP+0x2c8>)
 8002cb2:	f009 fdc7 	bl	800c844 <siprintf>
        	ORION_req.HTTP_request=buff_sprintf1024;
 8002cb6:	4b45      	ldr	r3, [pc, #276]	; (8002dcc <Task_TEMP+0x28c>)
 8002cb8:	4a53      	ldr	r2, [pc, #332]	; (8002e08 <Task_TEMP+0x2c8>)
 8002cba:	60da      	str	r2, [r3, #12]
            ORION_req.machine_dest=ORION_ADDRESS;
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <Task_TEMP+0x28c>)
 8002cbe:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <Task_TEMP+0x2cc>)
 8002cc0:	605a      	str	r2, [r3, #4]
    		ORION_req.port_dest=ORION_PORT;
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <Task_TEMP+0x28c>)
 8002cc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cc8:	609a      	str	r2, [r3, #8]
    		ORION_req.HTTP_response=NULL;
 8002cca:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <Task_TEMP+0x28c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
    		ORION_req.src=2;
 8002cd0:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <Task_TEMP+0x28c>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	705a      	strb	r2, [r3, #1]
    		ORION_req.status=1; // solicitud
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <Task_TEMP+0x28c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    		break;
 8002cdc:	e033      	b.n	8002d46 <Task_TEMP+0x206>
        	case 3:// clon publica si se detectado una desconexión del alarma

         		if (global_alarm_remote_disconnect==1){
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <Task_TEMP+0x2d0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d12e      	bne.n	8002d44 <Task_TEMP+0x204>
         		global_alarm_remote_disconnect=0;
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <Task_TEMP+0x2d0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
         		global_alarm_remote_disconnect_count++;
 8002cec:	4b49      	ldr	r3, [pc, #292]	; (8002e14 <Task_TEMP+0x2d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a48      	ldr	r2, [pc, #288]	; (8002e14 <Task_TEMP+0x2d4>)
 8002cf4:	6013      	str	r3, [r2, #0]
         		sprintf(buff_sprintf_body,ORION_UPDATE_ALARM,IoT_NAME_CLONE,IoT_NAME,global_alarm_remote_disconnect_count);
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <Task_TEMP+0x2d4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <Task_TEMP+0x2b4>)
 8002cfe:	4a46      	ldr	r2, [pc, #280]	; (8002e18 <Task_TEMP+0x2d8>)
 8002d00:	4946      	ldr	r1, [pc, #280]	; (8002e1c <Task_TEMP+0x2dc>)
 8002d02:	483e      	ldr	r0, [pc, #248]	; (8002dfc <Task_TEMP+0x2bc>)
 8002d04:	f009 fd9e 	bl	800c844 <siprintf>
         		sprintf(buff_sprintf1024,"%s %d\r\n\r\n%s",ORION_UPDATE,strlen(buff_sprintf_body),buff_sprintf_body);
 8002d08:	483c      	ldr	r0, [pc, #240]	; (8002dfc <Task_TEMP+0x2bc>)
 8002d0a:	f7fd fa73 	bl	80001f4 <strlen>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a3a      	ldr	r2, [pc, #232]	; (8002dfc <Task_TEMP+0x2bc>)
 8002d12:	9200      	str	r2, [sp, #0]
 8002d14:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <Task_TEMP+0x2c0>)
 8002d16:	493b      	ldr	r1, [pc, #236]	; (8002e04 <Task_TEMP+0x2c4>)
 8002d18:	483b      	ldr	r0, [pc, #236]	; (8002e08 <Task_TEMP+0x2c8>)
 8002d1a:	f009 fd93 	bl	800c844 <siprintf>
         		ORION_req.HTTP_request=buff_sprintf1024;
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <Task_TEMP+0x28c>)
 8002d20:	4a39      	ldr	r2, [pc, #228]	; (8002e08 <Task_TEMP+0x2c8>)
 8002d22:	60da      	str	r2, [r3, #12]
                    ORION_req.machine_dest=ORION_ADDRESS;
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <Task_TEMP+0x28c>)
 8002d26:	4a39      	ldr	r2, [pc, #228]	; (8002e0c <Task_TEMP+0x2cc>)
 8002d28:	605a      	str	r2, [r3, #4]
            		ORION_req.port_dest=ORION_PORT;
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <Task_TEMP+0x28c>)
 8002d2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d30:	609a      	str	r2, [r3, #8]
            		ORION_req.HTTP_response=NULL;
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <Task_TEMP+0x28c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
            		ORION_req.src=2;
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <Task_TEMP+0x28c>)
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	705a      	strb	r2, [r3, #1]
            		ORION_req.status=1; // solicitud
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <Task_TEMP+0x28c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
         		}

         		break;
 8002d44:	bf00      	nop
		    }

    		xSemaphoreGive(ORION_xSem);
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <Task_TEMP+0x288>)
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f006 f81a 	bl	8008d88 <xQueueGenericSend>
    		vTaskDelay(1/portTICK_RATE_MS );
 8002d54:	2001      	movs	r0, #1
 8002d56:	f006 fedb 	bl	8009b10 <vTaskDelay>
 8002d5a:	e6fa      	b.n	8002b52 <Task_TEMP+0x12>
        }
        else{

        	if ((ORION_req.status==2)&&(ORION_req.src==2)){
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <Task_TEMP+0x28c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d161      	bne.n	8002e28 <Task_TEMP+0x2e8>
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <Task_TEMP+0x28c>)
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d15d      	bne.n	8002e28 <Task_TEMP+0x2e8>
        		// si es !=1 y no es null es porque es la respuesta.
        		// procesarla
        		// se asume una escritura correcta y no se procesa
        		 switch (global_mode){
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <Task_TEMP+0x294>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d002      	beq.n	8002d7a <Task_TEMP+0x23a>
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d006      	beq.n	8002d86 <Task_TEMP+0x246>
 8002d78:	e00b      	b.n	8002d92 <Task_TEMP+0x252>
        	case 2: // conectado publica
        		    global_trans_connect++;
 8002d7a:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <Task_TEMP+0x2e0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <Task_TEMP+0x2e0>)
 8002d82:	6013      	str	r3, [r2, #0]
        			break;
 8002d84:	e005      	b.n	8002d92 <Task_TEMP+0x252>
        		case 3: //clone
        		 global_trans_clone++;
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <Task_TEMP+0x2e4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <Task_TEMP+0x2e4>)
 8002d8e:	6013      	str	r3, [r2, #0]
        	break;
 8002d90:	bf00      	nop
        		 }
        		ORION_req.status=0;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <Task_TEMP+0x28c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
        		 ORION_req.src=0;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <Task_TEMP+0x28c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	705a      	strb	r2, [r3, #1]
        		 xSemaphoreGive(ORION_xSem);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <Task_TEMP+0x288>)
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	2300      	movs	r3, #0
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	f005 ffee 	bl	8008d88 <xQueueGenericSend>
        		 vTaskDelay((10+rand()%2)/portTICK_RATE_MS );
 8002dac:	f009 fc8a 	bl	800c6c4 <rand>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	bfb8      	it	lt
 8002dba:	425b      	neglt	r3, r3
 8002dbc:	330a      	adds	r3, #10
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 fea6 	bl	8009b10 <vTaskDelay>
 8002dc4:	e037      	b.n	8002e36 <Task_TEMP+0x2f6>
 8002dc6:	bf00      	nop
 8002dc8:	200016c4 	.word	0x200016c4
 8002dcc:	200005d4 	.word	0x200005d4
 8002dd0:	2000056a 	.word	0x2000056a
 8002dd4:	20000568 	.word	0x20000568
 8002dd8:	200004b0 	.word	0x200004b0
 8002ddc:	200004a0 	.word	0x200004a0
 8002de0:	200004dc 	.word	0x200004dc
 8002de4:	200004c4 	.word	0x200004c4
 8002de8:	200004cc 	.word	0x200004cc
 8002dec:	200004d4 	.word	0x200004d4
 8002df0:	200004f0 	.word	0x200004f0
 8002df4:	080106ac 	.word	0x080106ac
 8002df8:	080106bc 	.word	0x080106bc
 8002dfc:	20000eb0 	.word	0x20000eb0
 8002e00:	080107f0 	.word	0x080107f0
 8002e04:	08010870 	.word	0x08010870
 8002e08:	200012b0 	.word	0x200012b0
 8002e0c:	0801087c 	.word	0x0801087c
 8002e10:	200004fc 	.word	0x200004fc
 8002e14:	20000500 	.word	0x20000500
 8002e18:	08010894 	.word	0x08010894
 8002e1c:	080108a4 	.word	0x080108a4
 8002e20:	200004ac 	.word	0x200004ac
 8002e24:	2000049c 	.word	0x2000049c
        		// vTaskDelay((10+rand()%10)/portTICK_RATE_MS );
        	}
        	else
        	{

        	 xSemaphoreGive(ORION_xSem);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <Task_TEMP+0x2f8>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	f005 ffa9 	bl	8008d88 <xQueueGenericSend>
		while (xSemaphoreTake(ORION_xSem, 10000/portTICK_RATE_MS  ) != pdTRUE )
 8002e36:	e68c      	b.n	8002b52 <Task_TEMP+0x12>
 8002e38:	200016c4 	.word	0x200016c4

08002e3c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <case_insensitive_strcmp+0x16>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e056      	b.n	8002f04 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e050      	b.n	8002f04 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <case_insensitive_strcmp+0x32>
        {
            return 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e04a      	b.n	8002f04 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3301      	adds	r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <case_insensitive_strcmp+0xd4>)
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d103      	bne.n	8002e9a <case_insensitive_strcmp+0x5e>
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	f103 0220 	add.w	r2, r3, #32
 8002e98:	e000      	b.n	8002e9c <case_insensitive_strcmp+0x60>
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	73bb      	strb	r3, [r7, #14]
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	491a      	ldr	r1, [pc, #104]	; (8002f10 <case_insensitive_strcmp+0xd4>)
 8002ea8:	440b      	add	r3, r1
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <case_insensitive_strcmp+0x7e>
 8002eb4:	7bbb      	ldrb	r3, [r7, #14]
 8002eb6:	3320      	adds	r3, #32
 8002eb8:	e000      	b.n	8002ebc <case_insensitive_strcmp+0x80>
 8002eba:	7bbb      	ldrb	r3, [r7, #14]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d0d0      	beq.n	8002e62 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	737b      	strb	r3, [r7, #13]
 8002ec6:	7b7b      	ldrb	r3, [r7, #13]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <case_insensitive_strcmp+0xd4>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d103      	bne.n	8002ee0 <case_insensitive_strcmp+0xa4>
 8002ed8:	7b7b      	ldrb	r3, [r7, #13]
 8002eda:	f103 0220 	add.w	r2, r3, #32
 8002ede:	e000      	b.n	8002ee2 <case_insensitive_strcmp+0xa6>
 8002ee0:	7b7a      	ldrb	r2, [r7, #13]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	733b      	strb	r3, [r7, #12]
 8002ee8:	7b3b      	ldrb	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	4908      	ldr	r1, [pc, #32]	; (8002f10 <case_insensitive_strcmp+0xd4>)
 8002eee:	440b      	add	r3, r1
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <case_insensitive_strcmp+0xc4>
 8002efa:	7b3b      	ldrb	r3, [r7, #12]
 8002efc:	3320      	adds	r3, #32
 8002efe:	e000      	b.n	8002f02 <case_insensitive_strcmp+0xc6>
 8002f00:	7b3b      	ldrb	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	08010b60 	.word	0x08010b60

08002f14 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2028      	movs	r0, #40	; 0x28
 8002f22:	4798      	blx	r3
 8002f24:	60f8      	str	r0, [r7, #12]
    if (node)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8002f2c:	2228      	movs	r2, #40	; 0x28
 8002f2e:	2100      	movs	r1, #0
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f008 fdff 	bl	800bb34 <memset>
    }

    return node;
 8002f36:	68fb      	ldr	r3, [r7, #12]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8002f4c:	e037      	b.n	8002fbe <cJSON_Delete+0x7e>
    {
        next = item->next;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <cJSON_Delete+0x32>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ffe7 	bl	8002f40 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <cJSON_Delete+0x52>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <cJSON_Delete+0x90>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6912      	ldr	r2, [r2, #16]
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <cJSON_Delete+0x72>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <cJSON_Delete+0x90>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6a12      	ldr	r2, [r2, #32]
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <cJSON_Delete+0x90>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
        item = next;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1c4      	bne.n	8002f4e <cJSON_Delete+0xe>
    }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000000 	.word	0x20000000

08002fd4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002fd8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	0000      	movs	r0, r0
	...

08002fe8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b098      	sub	sp, #96	; 0x60
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
    double number = 0;
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8003002:	f7ff ffe7 	bl	8002fd4 <get_decimal_point>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <parse_number+0x36>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <parse_number+0x3a>
    {
        return false;
 800301e:	2300      	movs	r3, #0
 8003020:	e0c6      	b.n	80031b0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8003022:	2300      	movs	r3, #0
 8003024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003026:	e063      	b.n	80030f0 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003032:	440b      	add	r3, r1
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b45      	cmp	r3, #69	; 0x45
 800303a:	dc3d      	bgt.n	80030b8 <parse_number+0xd0>
 800303c:	2b2b      	cmp	r3, #43	; 0x2b
 800303e:	db66      	blt.n	800310e <parse_number+0x126>
 8003040:	3b2b      	subs	r3, #43	; 0x2b
 8003042:	2b1a      	cmp	r3, #26
 8003044:	d863      	bhi.n	800310e <parse_number+0x126>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <parse_number+0x64>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	080030bd 	.word	0x080030bd
 8003050:	0800310f 	.word	0x0800310f
 8003054:	080030bd 	.word	0x080030bd
 8003058:	080030db 	.word	0x080030db
 800305c:	0800310f 	.word	0x0800310f
 8003060:	080030bd 	.word	0x080030bd
 8003064:	080030bd 	.word	0x080030bd
 8003068:	080030bd 	.word	0x080030bd
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030bd 	.word	0x080030bd
 8003074:	080030bd 	.word	0x080030bd
 8003078:	080030bd 	.word	0x080030bd
 800307c:	080030bd 	.word	0x080030bd
 8003080:	080030bd 	.word	0x080030bd
 8003084:	080030bd 	.word	0x080030bd
 8003088:	0800310f 	.word	0x0800310f
 800308c:	0800310f 	.word	0x0800310f
 8003090:	0800310f 	.word	0x0800310f
 8003094:	0800310f 	.word	0x0800310f
 8003098:	0800310f 	.word	0x0800310f
 800309c:	0800310f 	.word	0x0800310f
 80030a0:	0800310f 	.word	0x0800310f
 80030a4:	0800310f 	.word	0x0800310f
 80030a8:	0800310f 	.word	0x0800310f
 80030ac:	0800310f 	.word	0x0800310f
 80030b0:	0800310f 	.word	0x0800310f
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	2b65      	cmp	r3, #101	; 0x65
 80030ba:	d128      	bne.n	800310e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c6:	440b      	add	r3, r1
 80030c8:	4413      	add	r3, r2
 80030ca:	7819      	ldrb	r1, [r3, #0]
 80030cc:	f107 0208 	add.w	r2, r7, #8
 80030d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d2:	4413      	add	r3, r2
 80030d4:	460a      	mov	r2, r1
 80030d6:	701a      	strb	r2, [r3, #0]
                break;
 80030d8:	e007      	b.n	80030ea <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 80030da:	f107 0208 	add.w	r2, r7, #8
 80030de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e0:	4413      	add	r3, r2
 80030e2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80030e6:	701a      	strb	r2, [r3, #0]
                break;
 80030e8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80030ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ec:	3301      	adds	r3, #1
 80030ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f2:	2b3e      	cmp	r3, #62	; 0x3e
 80030f4:	d80d      	bhi.n	8003112 <parse_number+0x12a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <parse_number+0x12a>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003102:	441a      	add	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d38d      	bcc.n	8003028 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800310c:	e001      	b.n	8003112 <parse_number+0x12a>
                goto loop_end;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <parse_number+0x12c>
loop_end:
 8003112:	bf00      	nop
    number_c_string[i] = '\0';
 8003114:	f107 0208 	add.w	r2, r7, #8
 8003118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311a:	4413      	add	r3, r2
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8003120:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003124:	f107 0308 	add.w	r3, r7, #8
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f00a fa62 	bl	800d5f4 <strtod>
 8003130:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	429a      	cmp	r2, r3
 800313c:	d101      	bne.n	8003142 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800313e:	2300      	movs	r3, #0
 8003140:	e036      	b.n	80031b0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003148:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800314c:	a31b      	add	r3, pc, #108	; (adr r3, 80031bc <parse_number+0x1d4>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003156:	f7fd fced 	bl	8000b34 <__aeabi_dcmpge>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003166:	615a      	str	r2, [r3, #20]
 8003168:	e015      	b.n	8003196 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <parse_number+0x1d0>)
 8003170:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003174:	f7fd fcd4 	bl	8000b20 <__aeabi_dcmple>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003184:	615a      	str	r2, [r3, #20]
 8003186:	e006      	b.n	8003196 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8003188:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800318c:	f7fd fcfc 	bl	8000b88 <__aeabi_d2iz>
 8003190:	4602      	mov	r2, r0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2208      	movs	r2, #8
 800319a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031a2:	f107 0208 	add.w	r2, r7, #8
 80031a6:	1a8a      	subs	r2, r1, r2
 80031a8:	441a      	add	r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	609a      	str	r2, [r3, #8]
    return true;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3760      	adds	r7, #96	; 0x60
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	c1e00000 	.word	0xc1e00000
 80031bc:	ffc00000 	.word	0xffc00000
 80031c0:	41dfffff 	.word	0x41dfffff

080031c4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	e04c      	b.n	8003274 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b2f      	cmp	r3, #47	; 0x2f
 80031e4:	d90f      	bls.n	8003206 <parse_hex4+0x42>
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b39      	cmp	r3, #57	; 0x39
 80031f0:	d809      	bhi.n	8003206 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	3b30      	subs	r3, #48	; 0x30
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e02d      	b.n	8003262 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4413      	add	r3, r2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d90f      	bls.n	8003232 <parse_hex4+0x6e>
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b46      	cmp	r3, #70	; 0x46
 800321c:	d809      	bhi.n	8003232 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	3b37      	subs	r3, #55	; 0x37
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e017      	b.n	8003262 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4413      	add	r3, r2
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b60      	cmp	r3, #96	; 0x60
 800323c:	d90f      	bls.n	800325e <parse_hex4+0x9a>
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b66      	cmp	r3, #102	; 0x66
 8003248:	d809      	bhi.n	800325e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	3b57      	subs	r3, #87	; 0x57
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e001      	b.n	8003262 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800325e:	2300      	movs	r3, #0
 8003260:	e00c      	b.n	800327c <parse_hex4+0xb8>
        }

        if (i < 3)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d802      	bhi.n	800326e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d9af      	bls.n	80031da <parse_hex4+0x16>
        }
    }

    return h;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b05      	cmp	r3, #5
 80032c0:	f340 80b7 	ble.w	8003432 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	3302      	adds	r3, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff7b 	bl	80031c4 <parse_hex4>
 80032ce:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80032d6:	d304      	bcc.n	80032e2 <utf16_literal_to_utf8+0x5a>
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80032de:	f0c0 80aa 	bcc.w	8003436 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80032e8:	d337      	bcc.n	800335a <utf16_literal_to_utf8+0xd2>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80032f0:	d233      	bcs.n	800335a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3306      	adds	r3, #6
 80032f6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80032fc:	230c      	movs	r3, #12
 80032fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b05      	cmp	r3, #5
 800330a:	f340 8096 	ble.w	800343a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b5c      	cmp	r3, #92	; 0x5c
 8003314:	f040 8093 	bne.w	800343e <utf16_literal_to_utf8+0x1b6>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b75      	cmp	r3, #117	; 0x75
 8003320:	f040 808d 	bne.w	800343e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3302      	adds	r3, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff4b 	bl	80031c4 <parse_hex4>
 800332e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8003336:	f0c0 8084 	bcc.w	8003442 <utf16_literal_to_utf8+0x1ba>
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8003340:	d27f      	bcs.n	8003442 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	029a      	lsls	r2, r3, #10
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <utf16_literal_to_utf8+0x1cc>)
 8003348:	4013      	ands	r3, r2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003350:	4313      	orrs	r3, r2
 8003352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8003358:	e004      	b.n	8003364 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800335a:	2306      	movs	r3, #6
 800335c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	2b7f      	cmp	r3, #127	; 0x7f
 8003368:	d803      	bhi.n	8003372 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003370:	e01f      	b.n	80033b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	d206      	bcs.n	8003388 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800337a:	2302      	movs	r3, #2
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	f887 3020 	strb.w	r3, [r7, #32]
 8003386:	e014      	b.n	80033b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338e:	d206      	bcs.n	800339e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8003390:	2303      	movs	r3, #3
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8003396:	23e0      	movs	r3, #224	; 0xe0
 8003398:	f887 3020 	strb.w	r3, [r7, #32]
 800339c:	e009      	b.n	80033b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80033a4:	d24f      	bcs.n	8003446 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80033a6:	2304      	movs	r3, #4
 80033a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80033ac:	23f0      	movs	r3, #240	; 0xf0
 80033ae:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80033b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033bc:	e015      	b.n	80033ea <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80033d0:	440b      	add	r3, r1
 80033d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80033e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80033e4:	3b01      	subs	r3, #1
 80033e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e5      	bne.n	80033be <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80033f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d909      	bls.n	800340e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	b2d9      	uxtb	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003406:	430a      	orrs	r2, r1
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e007      	b.n	800341e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	b2da      	uxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800342c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003430:	e00b      	b.n	800344a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8003432:	bf00      	nop
 8003434:	e008      	b.n	8003448 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8003436:	bf00      	nop
 8003438:	e006      	b.n	8003448 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800343a:	bf00      	nop
 800343c:	e004      	b.n	8003448 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800343e:	bf00      	nop
 8003440:	e002      	b.n	8003448 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8003446:	bf00      	nop

fail:
    return 0;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	000ffc00 	.word	0x000ffc00

08003458 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	3301      	adds	r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	3301      	adds	r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b22      	cmp	r3, #34	; 0x22
 8003494:	f040 8102 	bne.w	800369c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80034a0:	e017      	b.n	80034d2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b5c      	cmp	r3, #92	; 0x5c
 80034a8:	d110      	bne.n	80034cc <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	f080 80f0 	bcs.w	80036a0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	3301      	adds	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	3301      	adds	r3, #1
 80034ca:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	3301      	adds	r3, #1
 80034d0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d203      	bcs.n	80034ec <parse_string+0x94>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b22      	cmp	r3, #34	; 0x22
 80034ea:	d1da      	bne.n	80034a2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	f080 80d2 	bcs.w	80036a4 <parse_string+0x24c>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b22      	cmp	r3, #34	; 0x22
 8003506:	f040 80cd 	bne.w	80036a4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4413      	add	r3, r2
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	461a      	mov	r2, r3
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	3201      	adds	r2, #1
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
 800352c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80b9 	beq.w	80036a8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800353a:	e093      	b.n	8003664 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b5c      	cmp	r3, #92	; 0x5c
 8003542:	d008      	beq.n	8003556 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	1c53      	adds	r3, r2, #1
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	60f9      	str	r1, [r7, #12]
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e086      	b.n	8003664 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8003556:	2302      	movs	r3, #2
 8003558:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	f340 80a3 	ble.w	80036ac <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	3301      	adds	r3, #1
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b75      	cmp	r3, #117	; 0x75
 800356e:	f300 809f 	bgt.w	80036b0 <parse_string+0x258>
 8003572:	2b5c      	cmp	r3, #92	; 0x5c
 8003574:	da04      	bge.n	8003580 <parse_string+0x128>
 8003576:	2b22      	cmp	r3, #34	; 0x22
 8003578:	d05c      	beq.n	8003634 <parse_string+0x1dc>
 800357a:	2b2f      	cmp	r3, #47	; 0x2f
 800357c:	d05a      	beq.n	8003634 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800357e:	e097      	b.n	80036b0 <parse_string+0x258>
            switch (input_pointer[1])
 8003580:	3b5c      	subs	r3, #92	; 0x5c
 8003582:	2b19      	cmp	r3, #25
 8003584:	f200 8094 	bhi.w	80036b0 <parse_string+0x258>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <parse_string+0x138>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	08003635 	.word	0x08003635
 8003594:	080036b1 	.word	0x080036b1
 8003598:	080036b1 	.word	0x080036b1
 800359c:	080036b1 	.word	0x080036b1
 80035a0:	080036b1 	.word	0x080036b1
 80035a4:	080036b1 	.word	0x080036b1
 80035a8:	080035f9 	.word	0x080035f9
 80035ac:	080036b1 	.word	0x080036b1
 80035b0:	080036b1 	.word	0x080036b1
 80035b4:	080036b1 	.word	0x080036b1
 80035b8:	08003605 	.word	0x08003605
 80035bc:	080036b1 	.word	0x080036b1
 80035c0:	080036b1 	.word	0x080036b1
 80035c4:	080036b1 	.word	0x080036b1
 80035c8:	080036b1 	.word	0x080036b1
 80035cc:	080036b1 	.word	0x080036b1
 80035d0:	080036b1 	.word	0x080036b1
 80035d4:	080036b1 	.word	0x080036b1
 80035d8:	08003611 	.word	0x08003611
 80035dc:	080036b1 	.word	0x080036b1
 80035e0:	080036b1 	.word	0x080036b1
 80035e4:	080036b1 	.word	0x080036b1
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	080036b1 	.word	0x080036b1
 80035f0:	08003629 	.word	0x08003629
 80035f4:	08003643 	.word	0x08003643
                    *output_pointer++ = '\b';
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	60fa      	str	r2, [r7, #12]
 80035fe:	2208      	movs	r2, #8
 8003600:	701a      	strb	r2, [r3, #0]
                    break;
 8003602:	e02b      	b.n	800365c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	60fa      	str	r2, [r7, #12]
 800360a:	220c      	movs	r2, #12
 800360c:	701a      	strb	r2, [r3, #0]
                    break;
 800360e:	e025      	b.n	800365c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	60fa      	str	r2, [r7, #12]
 8003616:	220a      	movs	r2, #10
 8003618:	701a      	strb	r2, [r3, #0]
                    break;
 800361a:	e01f      	b.n	800365c <parse_string+0x204>
                    *output_pointer++ = '\r';
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	60fa      	str	r2, [r7, #12]
 8003622:	220d      	movs	r2, #13
 8003624:	701a      	strb	r2, [r3, #0]
                    break;
 8003626:	e019      	b.n	800365c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	60fa      	str	r2, [r7, #12]
 800362e:	2209      	movs	r2, #9
 8003630:	701a      	strb	r2, [r3, #0]
                    break;
 8003632:	e013      	b.n	800365c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	60fa      	str	r2, [r7, #12]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	7852      	ldrb	r2, [r2, #1]
 800363e:	701a      	strb	r2, [r3, #0]
                    break;
 8003640:	e00c      	b.n	800365c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8003642:	f107 030c 	add.w	r3, r7, #12
 8003646:	461a      	mov	r2, r3
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800364c:	f7ff fe1c 	bl	8003288 <utf16_literal_to_utf8>
 8003650:	4603      	mov	r3, r0
 8003652:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02c      	beq.n	80036b4 <parse_string+0x25c>
                    break;
 800365a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4413      	add	r3, r2
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	429a      	cmp	r2, r3
 800366a:	f4ff af67 	bcc.w	800353c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2210      	movs	r2, #16
 8003678:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	461a      	mov	r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	609a      	str	r2, [r3, #8]

    return true;
 8003698:	2301      	movs	r3, #1
 800369a:	e01e      	b.n	80036da <parse_string+0x282>
        goto fail;
 800369c:	bf00      	nop
 800369e:	e00a      	b.n	80036b6 <parse_string+0x25e>
                    goto fail;
 80036a0:	bf00      	nop
 80036a2:	e008      	b.n	80036b6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80036a4:	bf00      	nop
 80036a6:	e006      	b.n	80036b6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 80036a8:	bf00      	nop
 80036aa:	e004      	b.n	80036b6 <parse_string+0x25e>
                goto fail;
 80036ac:	bf00      	nop
 80036ae:	e002      	b.n	80036b6 <parse_string+0x25e>
                    goto fail;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <parse_string+0x25e>
                        goto fail;
 80036b4:	bf00      	nop

fail:
    if (output != NULL)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	69f8      	ldr	r0, [r7, #28]
 80036c2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	609a      	str	r2, [r3, #8]
    }

    return false;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3728      	adds	r7, #40	; 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop

080036e4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <buffer_skip_whitespace+0x16>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e02c      	b.n	8003758 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <buffer_skip_whitespace+0x2c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d306      	bcc.n	800371e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	e021      	b.n	8003758 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <buffer_skip_whitespace+0x5c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <buffer_skip_whitespace+0x5c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b20      	cmp	r3, #32
 800373e:	d9e9      	bls.n	8003714 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d104      	bne.n	8003756 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8003756:	687b      	ldr	r3, [r7, #4]
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <skip_utf8_bom+0x1e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <skip_utf8_bom+0x1e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <skip_utf8_bom+0x22>
    {
        return NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	e01c      	b.n	80037c0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d018      	beq.n	80037be <skip_utf8_bom+0x5a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	1d1a      	adds	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d211      	bcs.n	80037be <skip_utf8_bom+0x5a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4413      	add	r3, r2
 80037a4:	2203      	movs	r2, #3
 80037a6:	4908      	ldr	r1, [pc, #32]	; (80037c8 <skip_utf8_bom+0x64>)
 80037a8:	4618      	mov	r0, r3
 80037aa:	f009 f8c3 	bl	800c934 <strncmp>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	1cda      	adds	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80037be:	687b      	ldr	r3, [r7, #4]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0801098c 	.word	0x0801098c

080037cc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	e00c      	b.n	80037fc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7fc fd06 	bl	80001f4 <strlen>
 80037e8:	4603      	mov	r3, r0
 80037ea:	3301      	adds	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f805 	bl	8003804 <cJSON_ParseWithLengthOpts>
 80037fa:	4603      	mov	r3, r0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08e      	sub	sp, #56	; 0x38
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8003812:	f107 0318 	add.w	r3, r7, #24
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	60da      	str	r2, [r3, #12]
 8003820:	611a      	str	r2, [r3, #16]
 8003822:	615a      	str	r2, [r3, #20]
 8003824:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <cJSON_ParseWithLengthOpts+0x12c>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <cJSON_ParseWithLengthOpts+0x12c>)
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d042      	beq.n	80038c2 <cJSON_ParseWithLengthOpts+0xbe>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d03f      	beq.n	80038c2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800384e:	4a39      	ldr	r2, [pc, #228]	; (8003934 <cJSON_ParseWithLengthOpts+0x130>)
 8003850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003854:	ca07      	ldmia	r2, {r0, r1, r2}
 8003856:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800385a:	4836      	ldr	r0, [pc, #216]	; (8003934 <cJSON_ParseWithLengthOpts+0x130>)
 800385c:	f7ff fb5a 	bl	8002f14 <cJSON_New_Item>
 8003860:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02e      	beq.n	80038c6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff79 	bl	8003764 <skip_utf8_bom>
 8003872:	4603      	mov	r3, r0
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff35 	bl	80036e4 <buffer_skip_whitespace>
 800387a:	4603      	mov	r3, r0
 800387c:	4619      	mov	r1, r3
 800387e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003880:	f000 f868 	bl	8003954 <parse_value>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01f      	beq.n	80038ca <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00e      	beq.n	80038ae <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8003890:	f107 0318 	add.w	r3, r7, #24
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff25 	bl	80036e4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800389a:	6a3a      	ldr	r2, [r7, #32]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d215      	bcs.n	80038ce <cJSON_ParseWithLengthOpts+0xca>
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
    }

    return item;
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	e031      	b.n	8003926 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80038c2:	bf00      	nop
 80038c4:	e004      	b.n	80038d0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80038ce:	bf00      	nop

fail:
    if (item != NULL)
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80038d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038d8:	f7ff fb32 	bl	8002f40 <cJSON_Delete>
    }

    if (value != NULL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d202      	bcs.n	80038f8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e005      	b.n	8003904 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b01      	subs	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <cJSON_ParseWithLengthOpts+0x12c>)
 8003916:	461a      	mov	r2, r3
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003920:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3738      	adds	r7, #56	; 0x38
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000230 	.word	0x20000230
 8003934:	20000000 	.word	0x20000000

08003938 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff41 	bl	80037cc <cJSON_ParseWithOpts>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <parse_value+0x18>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <parse_value+0x1c>
    {
        return false; /* no input */
 800396c:	2300      	movs	r3, #0
 800396e:	e0d2      	b.n	8003b16 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01d      	beq.n	80039b2 <parse_value+0x5e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d816      	bhi.n	80039b2 <parse_value+0x5e>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4413      	add	r3, r2
 800398e:	2204      	movs	r2, #4
 8003990:	4963      	ldr	r1, [pc, #396]	; (8003b20 <parse_value+0x1cc>)
 8003992:	4618      	mov	r0, r3
 8003994:	f008 ffce 	bl	800c934 <strncmp>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	609a      	str	r2, [r3, #8]
        return true;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0b1      	b.n	8003b16 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01d      	beq.n	80039f4 <parse_value+0xa0>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	1d5a      	adds	r2, r3, #5
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d816      	bhi.n	80039f4 <parse_value+0xa0>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4413      	add	r3, r2
 80039d0:	2205      	movs	r2, #5
 80039d2:	4954      	ldr	r1, [pc, #336]	; (8003b24 <parse_value+0x1d0>)
 80039d4:	4618      	mov	r0, r3
 80039d6:	f008 ffad 	bl	800c934 <strncmp>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	1d5a      	adds	r2, r3, #5
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	609a      	str	r2, [r3, #8]
        return true;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e090      	b.n	8003b16 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <parse_value+0xe8>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	1d1a      	adds	r2, r3, #4
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d819      	bhi.n	8003a3c <parse_value+0xe8>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4413      	add	r3, r2
 8003a12:	2204      	movs	r2, #4
 8003a14:	4944      	ldr	r1, [pc, #272]	; (8003b28 <parse_value+0x1d4>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f008 ff8c 	bl	800c934 <strncmp>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	609a      	str	r2, [r3, #8]
        return true;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e06c      	b.n	8003b16 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <parse_value+0x116>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d20d      	bcs.n	8003a6a <parse_value+0x116>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4413      	add	r3, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b22      	cmp	r3, #34	; 0x22
 8003a5c:	d105      	bne.n	8003a6a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff fcf9 	bl	8003458 <parse_string>
 8003a66:	4603      	mov	r3, r0
 8003a68:	e055      	b.n	8003b16 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d023      	beq.n	8003ab8 <parse_value+0x164>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d21d      	bcs.n	8003ab8 <parse_value+0x164>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b2d      	cmp	r3, #45	; 0x2d
 8003a8a:	d00f      	beq.n	8003aac <parse_value+0x158>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b2f      	cmp	r3, #47	; 0x2f
 8003a9a:	d90d      	bls.n	8003ab8 <parse_value+0x164>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b39      	cmp	r3, #57	; 0x39
 8003aaa:	d805      	bhi.n	8003ab8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fa9a 	bl	8002fe8 <parse_number>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	e02e      	b.n	8003b16 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d013      	beq.n	8003ae6 <parse_value+0x192>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d20d      	bcs.n	8003ae6 <parse_value+0x192>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b5b      	cmp	r3, #91	; 0x5b
 8003ad8:	d105      	bne.n	8003ae6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f825 	bl	8003b2c <parse_array>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	e017      	b.n	8003b16 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <parse_value+0x1c0>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d20d      	bcs.n	8003b14 <parse_value+0x1c0>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b7b      	cmp	r3, #123	; 0x7b
 8003b06:	d105      	bne.n	8003b14 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8003b08:	6839      	ldr	r1, [r7, #0]
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8d2 	bl	8003cb4 <parse_object>
 8003b10:	4603      	mov	r3, r0
 8003b12:	e000      	b.n	8003b16 <parse_value+0x1c2>
    }

    return false;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08010960 	.word	0x08010960
 8003b24:	08010990 	.word	0x08010990
 8003b28:	08010998 	.word	0x08010998

08003b2c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b46:	d301      	bcc.n	8003b4c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e0af      	b.n	8003cac <parse_array+0x180>
    }
    input_buffer->depth++;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4413      	add	r3, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b5b      	cmp	r3, #91	; 0x5b
 8003b64:	f040 8094 	bne.w	8003c90 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003b72:	6838      	ldr	r0, [r7, #0]
 8003b74:	f7ff fdb6 	bl	80036e4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <parse_array+0x6e>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d207      	bcs.n	8003b9a <parse_array+0x6e>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b5d      	cmp	r3, #93	; 0x5d
 8003b98:	d061      	beq.n	8003c5e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <parse_array+0x80>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d305      	bcc.n	8003bb8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	609a      	str	r2, [r3, #8]
        goto fail;
 8003bb6:	e072      	b.n	8003c9e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	3310      	adds	r3, #16
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f9a4 	bl	8002f14 <cJSON_New_Item>
 8003bcc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05f      	beq.n	8003c94 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e007      	b.n	8003bf4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003bfe:	6838      	ldr	r0, [r7, #0]
 8003c00:	f7ff fd70 	bl	80036e4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	6938      	ldr	r0, [r7, #16]
 8003c08:	f7ff fea4 	bl	8003954 <parse_value>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d042      	beq.n	8003c98 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003c12:	6838      	ldr	r0, [r7, #0]
 8003c14:	f7ff fd66 	bl	80036e4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <parse_array+0x10e>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d207      	bcs.n	8003c3a <parse_array+0x10e>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b2c      	cmp	r3, #44	; 0x2c
 8003c38:	d0c3      	beq.n	8003bc2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02d      	beq.n	8003c9c <parse_array+0x170>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d227      	bcs.n	8003c9c <parse_array+0x170>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b5d      	cmp	r3, #93	; 0x5d
 8003c5a:	d11f      	bne.n	8003c9c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8003c5c:	e000      	b.n	8003c60 <parse_array+0x134>
        goto success;
 8003c5e:	bf00      	nop
    input_buffer->depth--;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <parse_array+0x14a>
        head->prev = current_item;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	609a      	str	r2, [r3, #8]

    return true;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e00d      	b.n	8003cac <parse_array+0x180>
        goto fail;
 8003c90:	bf00      	nop
 8003c92:	e004      	b.n	8003c9e <parse_array+0x172>
            goto fail; /* allocation failure */
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <parse_array+0x172>
        goto fail; /* expected end of array */
 8003c9c:	bf00      	nop

fail:
    if (head != NULL)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8003ca4:	6978      	ldr	r0, [r7, #20]
 8003ca6:	f7ff f94b 	bl	8002f40 <cJSON_Delete>
    }

    return false;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cce:	d301      	bcc.n	8003cd4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e0ea      	b.n	8003eaa <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80d0 	beq.w	8003e86 <parse_object+0x1d2>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	f080 80c9 	bcs.w	8003e86 <parse_object+0x1d2>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b7b      	cmp	r3, #123	; 0x7b
 8003d02:	f040 80c0 	bne.w	8003e86 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003d10:	6838      	ldr	r0, [r7, #0]
 8003d12:	f7ff fce7 	bl	80036e4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <parse_object+0x86>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d208      	bcs.n	8003d3a <parse_object+0x86>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b7d      	cmp	r3, #125	; 0x7d
 8003d36:	f000 808d 	beq.w	8003e54 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <parse_object+0x98>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d305      	bcc.n	8003d58 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	609a      	str	r2, [r3, #8]
        goto fail;
 8003d56:	e0a1      	b.n	8003e9c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	1e5a      	subs	r2, r3, #1
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3310      	adds	r3, #16
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f8d4 	bl	8002f14 <cJSON_New_Item>
 8003d6c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 808a 	beq.w	8003e8a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	e007      	b.n	8003d96 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003da0:	6838      	ldr	r0, [r7, #0]
 8003da2:	f7ff fc9f 	bl	80036e4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	6938      	ldr	r0, [r7, #16]
 8003daa:	f7ff fb55 	bl	8003458 <parse_string>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d06c      	beq.n	8003e8e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8003db4:	6838      	ldr	r0, [r7, #0]
 8003db6:	f7ff fc95 	bl	80036e4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d061      	beq.n	8003e92 <parse_object+0x1de>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d25b      	bcs.n	8003e92 <parse_object+0x1de>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b3a      	cmp	r3, #58	; 0x3a
 8003de8:	d153      	bne.n	8003e92 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003df4:	6838      	ldr	r0, [r7, #0]
 8003df6:	f7ff fc75 	bl	80036e4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	6938      	ldr	r0, [r7, #16]
 8003dfe:	f7ff fda9 	bl	8003954 <parse_value>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d046      	beq.n	8003e96 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f7ff fc6b 	bl	80036e4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <parse_object+0x17c>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d207      	bcs.n	8003e30 <parse_object+0x17c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4413      	add	r3, r2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b2c      	cmp	r3, #44	; 0x2c
 8003e2e:	d098      	beq.n	8003d62 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d031      	beq.n	8003e9a <parse_object+0x1e6>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d22b      	bcs.n	8003e9a <parse_object+0x1e6>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b7d      	cmp	r3, #125	; 0x7d
 8003e50:	d123      	bne.n	8003e9a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8003e52:	e000      	b.n	8003e56 <parse_object+0x1a2>
        goto success; /* empty object */
 8003e54:	bf00      	nop
    input_buffer->depth--;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <parse_object+0x1b8>
        head->prev = current_item;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	609a      	str	r2, [r3, #8]
    return true;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e011      	b.n	8003eaa <parse_object+0x1f6>
        goto fail; /* not an object */
 8003e86:	bf00      	nop
 8003e88:	e008      	b.n	8003e9c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8003e8a:	bf00      	nop
 8003e8c:	e006      	b.n	8003e9c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <parse_object+0x1e8>
            goto fail; /* invalid object */
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8003e9a:	bf00      	nop

fail:
    if (head != NULL)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	f7ff f84c 	bl	8002f40 <cJSON_Delete>
    }

    return false;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e00d      	b.n	8003ee8 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8003ed2:	e005      	b.n	8003ee0 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f6      	bne.n	8003ed4 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <get_array_item+0x18>
    {
        return NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e010      	b.n	8003f2e <get_array_item+0x3a>
    }

    current_child = array->child;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8003f12:	e005      	b.n	8003f20 <get_array_item+0x2c>
    {
        index--;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <get_array_item+0x38>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f3      	bne.n	8003f14 <get_array_item+0x20>
    }

    return current_child;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da01      	bge.n	8003f4e <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e005      	b.n	8003f5a <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ffce 	bl	8003ef4 <get_array_item>
 8003f58:	4603      	mov	r3, r0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <get_object_item+0x1c>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <get_object_item+0x20>
    {
        return NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e033      	b.n	8003fea <get_object_item+0x88>
    }

    current_element = object->child;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d017      	beq.n	8003fbe <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003f8e:	e002      	b.n	8003f96 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01c      	beq.n	8003fd6 <get_object_item+0x74>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d018      	beq.n	8003fd6 <get_object_item+0x74>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	68b8      	ldr	r0, [r7, #8]
 8003fac:	f7fc f918 	bl	80001e0 <strcmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ec      	bne.n	8003f90 <get_object_item+0x2e>
 8003fb6:	e00e      	b.n	8003fd6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <get_object_item+0x74>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f7fe ff36 	bl	8002e3c <case_insensitive_strcmp>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <get_object_item+0x82>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <get_object_item+0x86>
        return NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <get_object_item+0x88>
    }

    return current_element;
 8003fe8:	697b      	ldr	r3, [r7, #20]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ffae 	bl	8003f62 <get_object_item>
 8004006:	4603      	mov	r3, r0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004014:	f001 fc00 	bl	8005818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004018:	f000 f820 	bl	800405c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800401c:	f000 f96c 	bl	80042f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004020:	f000 f92c 	bl	800427c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004024:	f000 f900 	bl	8004228 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8004028:	f000 f8d4 	bl	80041d4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800402c:	f000 f880 	bl	8004130 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004030:	f004 fb5a 	bl	80086e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004034:	4a06      	ldr	r2, [pc, #24]	; (8004050 <main+0x40>)
 8004036:	2100      	movs	r1, #0
 8004038:	4806      	ldr	r0, [pc, #24]	; (8004054 <main+0x44>)
 800403a:	f004 fb9f 	bl	800877c <osThreadNew>
 800403e:	4603      	mov	r3, r0
 8004040:	4a05      	ldr	r2, [pc, #20]	; (8004058 <main+0x48>)
 8004042:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ESP8266_CONFIGURACION_INICIAL();
 8004044:	f000 fcae 	bl	80049a4 <ESP8266_CONFIGURACION_INICIAL>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004048:	f004 fb72 	bl	8008730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800404c:	e7fe      	b.n	800404c <main+0x3c>
 800404e:	bf00      	nop
 8004050:	08010b1c 	.word	0x08010b1c
 8004054:	08004485 	.word	0x08004485
 8004058:	20000428 	.word	0x20000428

0800405c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b094      	sub	sp, #80	; 0x50
 8004060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004062:	f107 0320 	add.w	r3, r7, #32
 8004066:	2230      	movs	r2, #48	; 0x30
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f007 fd62 	bl	800bb34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	4b28      	ldr	r3, [pc, #160]	; (8004128 <SystemClock_Config+0xcc>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <SystemClock_Config+0xcc>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	6413      	str	r3, [r2, #64]	; 0x40
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <SystemClock_Config+0xcc>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800409c:	2300      	movs	r3, #0
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <SystemClock_Config+0xd0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <SystemClock_Config+0xd0>)
 80040a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <SystemClock_Config+0xd0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040b8:	2302      	movs	r3, #2
 80040ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040c0:	2310      	movs	r3, #16
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c4:	2302      	movs	r3, #2
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040c8:	2300      	movs	r3, #0
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80040cc:	2310      	movs	r3, #16
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80040d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80040d6:	2304      	movs	r3, #4
 80040d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040da:	2304      	movs	r3, #4
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040de:	f107 0320 	add.w	r3, r7, #32
 80040e2:	4618      	mov	r0, r3
 80040e4:	f002 fe8a 	bl	8006dfc <HAL_RCC_OscConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80040ee:	f000 f9d1 	bl	8004494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f2:	230f      	movs	r3, #15
 80040f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040f6:	2302      	movs	r3, #2
 80040f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f003 f8ec 	bl	80072ec <HAL_RCC_ClockConfig>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800411a:	f000 f9bb 	bl	8004494 <Error_Handler>
  }
}
 800411e:	bf00      	nop
 8004120:	3750      	adds	r7, #80	; 0x50
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000

08004130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004136:	463b      	mov	r3, r7
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <MX_ADC1_Init+0x9c>)
 8004146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <MX_ADC1_Init+0x98>)
 800414a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800414e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004158:	2200      	movs	r2, #0
 800415a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <MX_ADC1_Init+0x98>)
 800415e:	2200      	movs	r2, #0
 8004160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <MX_ADC1_Init+0x98>)
 800416c:	2200      	movs	r2, #0
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004172:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <MX_ADC1_Init+0xa0>)
 8004174:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004178:	2200      	movs	r2, #0
 800417a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <MX_ADC1_Init+0x98>)
 800417e:	2201      	movs	r2, #1
 8004180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <MX_ADC1_Init+0x98>)
 800418c:	2201      	movs	r2, #1
 800418e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004190:	480d      	ldr	r0, [pc, #52]	; (80041c8 <MX_ADC1_Init+0x98>)
 8004192:	f001 fbb3 	bl	80058fc <HAL_ADC_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800419c:	f000 f97a 	bl	8004494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041a4:	2301      	movs	r3, #1
 80041a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041ac:	463b      	mov	r3, r7
 80041ae:	4619      	mov	r1, r3
 80041b0:	4805      	ldr	r0, [pc, #20]	; (80041c8 <MX_ADC1_Init+0x98>)
 80041b2:	f001 fd33 	bl	8005c1c <HAL_ADC_ConfigChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80041bc:	f000 f96a 	bl	8004494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000238 	.word	0x20000238
 80041cc:	40012000 	.word	0x40012000
 80041d0:	0f000001 	.word	0x0f000001

080041d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 80041da:	4a12      	ldr	r2, [pc, #72]	; (8004224 <MX_USART1_UART_Init+0x50>)
 80041dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 80041e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 80041fa:	220c      	movs	r2, #12
 80041fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800420a:	4805      	ldr	r0, [pc, #20]	; (8004220 <MX_USART1_UART_Init+0x4c>)
 800420c:	f003 fa8e 	bl	800772c <HAL_UART_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004216:	f000 f93d 	bl	8004494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000280 	.word	0x20000280
 8004224:	40011000 	.word	0x40011000

08004228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <MX_USART2_UART_Init+0x50>)
 8004230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 8004234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 8004248:	2200      	movs	r2, #0
 800424a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 800424e:	220c      	movs	r2, #12
 8004250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800425e:	4805      	ldr	r0, [pc, #20]	; (8004274 <MX_USART2_UART_Init+0x4c>)
 8004260:	f003 fa64 	bl	800772c <HAL_UART_Init>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800426a:	f000 f913 	bl	8004494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200002c4 	.word	0x200002c4
 8004278:	40004400 	.word	0x40004400

0800427c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <MX_DMA_Init+0x78>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <MX_DMA_Init+0x78>)
 800428c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004290:	6313      	str	r3, [r2, #48]	; 0x30
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <MX_DMA_Init+0x78>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <MX_DMA_Init+0x78>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <MX_DMA_Init+0x78>)
 80042a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <MX_DMA_Init+0x78>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2105      	movs	r1, #5
 80042be:	2010      	movs	r0, #16
 80042c0:	f001 ffcb 	bl	800625a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80042c4:	2010      	movs	r0, #16
 80042c6:	f001 ffe4 	bl	8006292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2105      	movs	r1, #5
 80042ce:	203a      	movs	r0, #58	; 0x3a
 80042d0:	f001 ffc3 	bl	800625a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80042d4:	203a      	movs	r0, #58	; 0x3a
 80042d6:	f001 ffdc 	bl	8006292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2105      	movs	r1, #5
 80042de:	2046      	movs	r0, #70	; 0x46
 80042e0:	f001 ffbb 	bl	800625a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80042e4:	2046      	movs	r0, #70	; 0x46
 80042e6:	f001 ffd4 	bl	8006292 <HAL_NVIC_EnableIRQ>

}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800

080042f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	4b58      	ldr	r3, [pc, #352]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a57      	ldr	r2, [pc, #348]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b55      	ldr	r3, [pc, #340]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b51      	ldr	r3, [pc, #324]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	4a50      	ldr	r2, [pc, #320]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004338:	6313      	str	r3, [r2, #48]	; 0x30
 800433a:	4b4e      	ldr	r3, [pc, #312]	; (8004474 <MX_GPIO_Init+0x17c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b4a      	ldr	r3, [pc, #296]	; (8004474 <MX_GPIO_Init+0x17c>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	4a49      	ldr	r2, [pc, #292]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6313      	str	r3, [r2, #48]	; 0x30
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	4b43      	ldr	r3, [pc, #268]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4a42      	ldr	r2, [pc, #264]	; (8004474 <MX_GPIO_Init+0x17c>)
 800436c:	f043 0302 	orr.w	r3, r3, #2
 8004370:	6313      	str	r3, [r2, #48]	; 0x30
 8004372:	4b40      	ldr	r3, [pc, #256]	; (8004474 <MX_GPIO_Init+0x17c>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 800437e:	2200      	movs	r2, #0
 8004380:	2102      	movs	r1, #2
 8004382:	483d      	ldr	r0, [pc, #244]	; (8004478 <MX_GPIO_Init+0x180>)
 8004384:	f002 fd20 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D8_Pin|Buzzer_Pin|D3_Pin, GPIO_PIN_RESET);
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800438e:	483b      	ldr	r0, [pc, #236]	; (800447c <MX_GPIO_Init+0x184>)
 8004390:	f002 fd1a 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8004394:	2201      	movs	r2, #1
 8004396:	2140      	movs	r1, #64	; 0x40
 8004398:	4838      	ldr	r0, [pc, #224]	; (800447c <MX_GPIO_Init+0x184>)
 800439a:	f002 fd15 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D2_Pin|D5_Pin|D1_Pin
 800439e:	2200      	movs	r2, #0
 80043a0:	f240 4139 	movw	r1, #1081	; 0x439
 80043a4:	4836      	ldr	r0, [pc, #216]	; (8004480 <MX_GPIO_Init+0x188>)
 80043a6:	f002 fd0f 	bl	8006dc8 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80043aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80043b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80043b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043ba:	f107 0314 	add.w	r3, r7, #20
 80043be:	4619      	mov	r1, r3
 80043c0:	482d      	ldr	r0, [pc, #180]	; (8004478 <MX_GPIO_Init+0x180>)
 80043c2:	f002 fb65 	bl	8006a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP8266_RESET_Pin */
  GPIO_InitStruct.Pin = ESP8266_RESET_Pin;
 80043c6:	2302      	movs	r3, #2
 80043c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_RESET_GPIO_Port, &GPIO_InitStruct);
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	4619      	mov	r1, r3
 80043dc:	4826      	ldr	r0, [pc, #152]	; (8004478 <MX_GPIO_Init+0x180>)
 80043de:	f002 fb57 	bl	8006a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin Buzzer_Pin D3_Pin */
  GPIO_InitStruct.Pin = D8_Pin|Buzzer_Pin|D3_Pin;
 80043e2:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80043e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043e8:	2301      	movs	r3, #1
 80043ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f0:	2300      	movs	r3, #0
 80043f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	4619      	mov	r1, r3
 80043fa:	4820      	ldr	r0, [pc, #128]	; (800447c <MX_GPIO_Init+0x184>)
 80043fc:	f002 fb48 	bl	8006a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004404:	2301      	movs	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800440c:	2302      	movs	r3, #2
 800440e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	4619      	mov	r1, r3
 8004416:	4819      	ldr	r0, [pc, #100]	; (800447c <MX_GPIO_Init+0x184>)
 8004418:	f002 fb3a 	bl	8006a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin D5_Pin D1_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin|D5_Pin|D1_Pin
 800441c:	f240 4339 	movw	r3, #1081	; 0x439
 8004420:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442e:	f107 0314 	add.w	r3, r7, #20
 8004432:	4619      	mov	r1, r3
 8004434:	4812      	ldr	r0, [pc, #72]	; (8004480 <MX_GPIO_Init+0x188>)
 8004436:	f002 fb2b 	bl	8006a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR1_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin;
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR1_GPIO_Port, &GPIO_InitStruct);
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	4619      	mov	r1, r3
 800444c:	480a      	ldr	r0, [pc, #40]	; (8004478 <MX_GPIO_Init+0x180>)
 800444e:	f002 fb1f 	bl	8006a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR2_Pin */
  GPIO_InitStruct.Pin = PULSADOR2_Pin;
 8004452:	2340      	movs	r3, #64	; 0x40
 8004454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR2_GPIO_Port, &GPIO_InitStruct);
 800445e:	f107 0314 	add.w	r3, r7, #20
 8004462:	4619      	mov	r1, r3
 8004464:	4806      	ldr	r0, [pc, #24]	; (8004480 <MX_GPIO_Init+0x188>)
 8004466:	f002 fb13 	bl	8006a90 <HAL_GPIO_Init>

}
 800446a:	bf00      	nop
 800446c:	3728      	adds	r7, #40	; 0x28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	40020800 	.word	0x40020800
 800447c:	40020000 	.word	0x40020000
 8004480:	40020400 	.word	0x40020400

08004484 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800448c:	2001      	movs	r0, #1
 800448e:	f004 fa07 	bl	80088a0 <osDelay>
 8004492:	e7fb      	b.n	800448c <StartDefaultTask+0x8>

08004494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004498:	b672      	cpsid	i
}
 800449a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800449c:	e7fe      	b.n	800449c <Error_Handler+0x8>
	...

080044a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <HAL_MspInit+0x54>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	4a11      	ldr	r2, [pc, #68]	; (80044f4 <HAL_MspInit+0x54>)
 80044b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b4:	6453      	str	r3, [r2, #68]	; 0x44
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <HAL_MspInit+0x54>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_MspInit+0x54>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_MspInit+0x54>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_MspInit+0x54>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	210f      	movs	r1, #15
 80044e2:	f06f 0001 	mvn.w	r0, #1
 80044e6:	f001 feb8 	bl	800625a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800

080044f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <HAL_ADC_MspInit+0x7c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d127      	bne.n	800456a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_ADC_MspInit+0x80>)
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_ADC_MspInit+0x80>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6453      	str	r3, [r2, #68]	; 0x44
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <HAL_ADC_MspInit+0x80>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_ADC_MspInit+0x80>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <HAL_ADC_MspInit+0x80>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6313      	str	r3, [r2, #48]	; 0x30
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <HAL_ADC_MspInit+0x80>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin|NTC_Pin|POT_Pin;
 8004552:	2313      	movs	r3, #19
 8004554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004556:	2303      	movs	r3, #3
 8004558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	4619      	mov	r1, r3
 8004564:	4805      	ldr	r0, [pc, #20]	; (800457c <HAL_ADC_MspInit+0x84>)
 8004566:	f002 fa93 	bl	8006a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800456a:	bf00      	nop
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40012000 	.word	0x40012000
 8004578:	40023800 	.word	0x40023800
 800457c:	40020000 	.word	0x40020000

08004580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 031c 	add.w	r3, r7, #28
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a78      	ldr	r2, [pc, #480]	; (8004780 <HAL_UART_MspInit+0x200>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f040 808a 	bne.w	80046b8 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045ae:	f043 0310 	orr.w	r3, r3, #16
 80045b2:	6453      	str	r3, [r2, #68]	; 0x44
 80045b4:	4b73      	ldr	r3, [pc, #460]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	4b6f      	ldr	r3, [pc, #444]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a6e      	ldr	r2, [pc, #440]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
 80045d0:	4b6c      	ldr	r3, [pc, #432]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	2302      	movs	r3, #2
 80045e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ea:	2303      	movs	r3, #3
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045ee:	2307      	movs	r3, #7
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f2:	f107 031c 	add.w	r3, r7, #28
 80045f6:	4619      	mov	r1, r3
 80045f8:	4863      	ldr	r0, [pc, #396]	; (8004788 <HAL_UART_MspInit+0x208>)
 80045fa:	f002 fa49 	bl	8006a90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004600:	4a63      	ldr	r2, [pc, #396]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004602:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004604:	4b61      	ldr	r3, [pc, #388]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800460a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800460c:	4b5f      	ldr	r3, [pc, #380]	; (800478c <HAL_UART_MspInit+0x20c>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004612:	4b5e      	ldr	r3, [pc, #376]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004614:	2200      	movs	r2, #0
 8004616:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004618:	4b5c      	ldr	r3, [pc, #368]	; (800478c <HAL_UART_MspInit+0x20c>)
 800461a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800461e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004620:	4b5a      	ldr	r3, [pc, #360]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004622:	2200      	movs	r2, #0
 8004624:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004626:	4b59      	ldr	r3, [pc, #356]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_UART_MspInit+0x20c>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004634:	2200      	movs	r2, #0
 8004636:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004638:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_UART_MspInit+0x20c>)
 800463a:	2200      	movs	r2, #0
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800463e:	4853      	ldr	r0, [pc, #332]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004640:	f001 fe46 	bl	80062d0 <HAL_DMA_Init>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800464a:	f7ff ff23 	bl	8004494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4e      	ldr	r2, [pc, #312]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
 8004654:	4a4d      	ldr	r2, [pc, #308]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800465a:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <HAL_UART_MspInit+0x214>)
 800465c:	4a4e      	ldr	r2, [pc, #312]	; (8004798 <HAL_UART_MspInit+0x218>)
 800465e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004660:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_UART_MspInit+0x214>)
 8004662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004666:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004668:	4b4a      	ldr	r3, [pc, #296]	; (8004794 <HAL_UART_MspInit+0x214>)
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800466e:	4b49      	ldr	r3, [pc, #292]	; (8004794 <HAL_UART_MspInit+0x214>)
 8004670:	2200      	movs	r2, #0
 8004672:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_UART_MspInit+0x214>)
 8004676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800467a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <HAL_UART_MspInit+0x214>)
 800467e:	2200      	movs	r2, #0
 8004680:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004682:	4b44      	ldr	r3, [pc, #272]	; (8004794 <HAL_UART_MspInit+0x214>)
 8004684:	2200      	movs	r2, #0
 8004686:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_UART_MspInit+0x214>)
 800468a:	2200      	movs	r2, #0
 800468c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800468e:	4b41      	ldr	r3, [pc, #260]	; (8004794 <HAL_UART_MspInit+0x214>)
 8004690:	2200      	movs	r2, #0
 8004692:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004694:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <HAL_UART_MspInit+0x214>)
 8004696:	2200      	movs	r2, #0
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800469a:	483e      	ldr	r0, [pc, #248]	; (8004794 <HAL_UART_MspInit+0x214>)
 800469c:	f001 fe18 	bl	80062d0 <HAL_DMA_Init>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80046a6:	f7ff fef5 	bl	8004494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a39      	ldr	r2, [pc, #228]	; (8004794 <HAL_UART_MspInit+0x214>)
 80046ae:	635a      	str	r2, [r3, #52]	; 0x34
 80046b0:	4a38      	ldr	r2, [pc, #224]	; (8004794 <HAL_UART_MspInit+0x214>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046b6:	e05e      	b.n	8004776 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a37      	ldr	r2, [pc, #220]	; (800479c <HAL_UART_MspInit+0x21c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d159      	bne.n	8004776 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a2e      	ldr	r2, [pc, #184]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
 80046d2:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a27      	ldr	r2, [pc, #156]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046fa:	230c      	movs	r3, #12
 80046fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004706:	2303      	movs	r3, #3
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800470a:	2307      	movs	r3, #7
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f107 031c 	add.w	r3, r7, #28
 8004712:	4619      	mov	r1, r3
 8004714:	481c      	ldr	r0, [pc, #112]	; (8004788 <HAL_UART_MspInit+0x208>)
 8004716:	f002 f9bb 	bl	8006a90 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800471c:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_UART_MspInit+0x224>)
 800471e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004720:	4b1f      	ldr	r3, [pc, #124]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004722:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004726:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800472e:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004730:	2200      	movs	r2, #0
 8004732:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004734:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800473a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800473c:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800473e:	2200      	movs	r2, #0
 8004740:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004744:	2200      	movs	r2, #0
 8004746:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800474a:	2200      	movs	r2, #0
 800474c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004750:	2200      	movs	r2, #0
 8004752:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004756:	2200      	movs	r2, #0
 8004758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800475a:	4811      	ldr	r0, [pc, #68]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800475c:	f001 fdb8 	bl	80062d0 <HAL_DMA_Init>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8004766:	f7ff fe95 	bl	8004494 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
 8004770:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004776:	bf00      	nop
 8004778:	3730      	adds	r7, #48	; 0x30
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40011000 	.word	0x40011000
 8004784:	40023800 	.word	0x40023800
 8004788:	40020000 	.word	0x40020000
 800478c:	20000308 	.word	0x20000308
 8004790:	40026440 	.word	0x40026440
 8004794:	20000368 	.word	0x20000368
 8004798:	400264b8 	.word	0x400264b8
 800479c:	40004400 	.word	0x40004400
 80047a0:	200003c8 	.word	0x200003c8
 80047a4:	40026088 	.word	0x40026088

080047a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047ac:	e7fe      	b.n	80047ac <NMI_Handler+0x4>

080047ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b2:	e7fe      	b.n	80047b2 <HardFault_Handler+0x4>

080047b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047b8:	e7fe      	b.n	80047b8 <MemManage_Handler+0x4>

080047ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047ba:	b480      	push	{r7}
 80047bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047be:	e7fe      	b.n	80047be <BusFault_Handler+0x4>

080047c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047c4:	e7fe      	b.n	80047c4 <UsageFault_Handler+0x4>

080047c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047d8:	f001 f870 	bl	80058bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80047dc:	f005 fe28 	bl	800a430 <xTaskGetSchedulerState>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80047e6:	f006 fd0f 	bl	800b208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <DMA1_Stream5_IRQHandler+0x10>)
 80047f6:	f001 fee1 	bl	80065bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200003c8 	.word	0x200003c8

08004804 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <DMA2_Stream2_IRQHandler+0x10>)
 800480a:	f001 fed7 	bl	80065bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000308 	.word	0x20000308

08004818 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <DMA2_Stream7_IRQHandler+0x10>)
 800481e:	f001 fecd 	bl	80065bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000368 	.word	0x20000368

0800482c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
	return 1;
 8004830:	2301      	movs	r3, #1
}
 8004832:	4618      	mov	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <_kill>:

int _kill(int pid, int sig)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004846:	f006 ff5f 	bl	800b708 <__errno>
 800484a:	4603      	mov	r3, r0
 800484c:	2216      	movs	r2, #22
 800484e:	601a      	str	r2, [r3, #0]
	return -1;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <_exit>:

void _exit (int status)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004864:	f04f 31ff 	mov.w	r1, #4294967295
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ffe7 	bl	800483c <_kill>
	while (1) {}		/* Make sure we hang here */
 800486e:	e7fe      	b.n	800486e <_exit+0x12>

08004870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e00a      	b.n	8004898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004882:	f3af 8000 	nop.w
 8004886:	4601      	mov	r1, r0
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	60ba      	str	r2, [r7, #8]
 800488e:	b2ca      	uxtb	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	3301      	adds	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	dbf0      	blt.n	8004882 <_read+0x12>
	}

return len;
 80048a0:	687b      	ldr	r3, [r7, #4]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	return -1;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048d2:	605a      	str	r2, [r3, #4]
	return 0;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <_isatty>:

int _isatty(int file)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
	return 1;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	return 0;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <_sbrk+0x5c>)
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <_sbrk+0x60>)
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <_sbrk+0x64>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <_sbrk+0x64>)
 8004932:	4a12      	ldr	r2, [pc, #72]	; (800497c <_sbrk+0x68>)
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <_sbrk+0x64>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	d207      	bcs.n	8004954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004944:	f006 fee0 	bl	800b708 <__errno>
 8004948:	4603      	mov	r3, r0
 800494a:	220c      	movs	r2, #12
 800494c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
 8004952:	e009      	b.n	8004968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <_sbrk+0x64>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	4a05      	ldr	r2, [pc, #20]	; (8004978 <_sbrk+0x64>)
 8004964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20020000 	.word	0x20020000
 8004974:	00000400 	.word	0x00000400
 8004978:	2000048c 	.word	0x2000048c
 800497c:	20016180 	.word	0x20016180

08004980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <SystemInit+0x20>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <SystemInit+0x20>)
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <ESP8266_CONFIGURACION_INICIAL>:
BUFF_BUFFER_t * IObuff_rx;




void ESP8266_CONFIGURACION_INICIAL(void){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af02      	add	r7, sp, #8
//una vez configurada la wifi se conectará con el access_point y obtendrá una IP
// y solo será necesario preocuparse de la conexión TCP
	BaseType_t res_task;


 	ORION_req.status=0;
 80049aa:	4ba7      	ldr	r3, [pc, #668]	; (8004c48 <ESP8266_CONFIGURACION_INICIAL+0x2a4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
	ORION_req.src=0;
 80049b0:	4ba5      	ldr	r3, [pc, #660]	; (8004c48 <ESP8266_CONFIGURACION_INICIAL+0x2a4>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	705a      	strb	r2, [r3, #1]

	global_LEDS[0]='0';global_LEDS[1]='0';global_LEDS[2]='0';global_LEDS[3]='0';global_LEDS[4]=0;
 80049b6:	4ba5      	ldr	r3, [pc, #660]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049b8:	2230      	movs	r2, #48	; 0x30
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	4ba3      	ldr	r3, [pc, #652]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049be:	2230      	movs	r2, #48	; 0x30
 80049c0:	705a      	strb	r2, [r3, #1]
 80049c2:	4ba2      	ldr	r3, [pc, #648]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049c4:	2230      	movs	r2, #48	; 0x30
 80049c6:	709a      	strb	r2, [r3, #2]
 80049c8:	4ba0      	ldr	r3, [pc, #640]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049ca:	2230      	movs	r2, #48	; 0x30
 80049cc:	70da      	strb	r2, [r3, #3]
 80049ce:	4b9f      	ldr	r3, [pc, #636]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	711a      	strb	r2, [r3, #4]
	global_LEDS[3]='0';global_LEDS[4]='0';global_LEDS[5]='0';global_LEDS[6]='0';global_LEDS[7]=0;
 80049d4:	4b9d      	ldr	r3, [pc, #628]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049d6:	2230      	movs	r2, #48	; 0x30
 80049d8:	70da      	strb	r2, [r3, #3]
 80049da:	4b9c      	ldr	r3, [pc, #624]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049dc:	2230      	movs	r2, #48	; 0x30
 80049de:	711a      	strb	r2, [r3, #4]
 80049e0:	4b9a      	ldr	r3, [pc, #616]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049e2:	2230      	movs	r2, #48	; 0x30
 80049e4:	715a      	strb	r2, [r3, #5]
 80049e6:	4b99      	ldr	r3, [pc, #612]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049e8:	2230      	movs	r2, #48	; 0x30
 80049ea:	719a      	strb	r2, [r3, #6]
 80049ec:	4b97      	ldr	r3, [pc, #604]	; (8004c4c <ESP8266_CONFIGURACION_INICIAL+0x2a8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	71da      	strb	r2, [r3, #7]
	global_time[0]=0;
 80049f2:	4b97      	ldr	r3, [pc, #604]	; (8004c50 <ESP8266_CONFIGURACION_INICIAL+0x2ac>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
	global_time_init[0]=0;
 80049f8:	4b96      	ldr	r3, [pc, #600]	; (8004c54 <ESP8266_CONFIGURACION_INICIAL+0x2b0>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
	global_alarm='0';
 80049fe:	4b96      	ldr	r3, [pc, #600]	; (8004c58 <ESP8266_CONFIGURACION_INICIAL+0x2b4>)
 8004a00:	2230      	movs	r2, #48	; 0x30
 8004a02:	701a      	strb	r2, [r3, #0]

	// 3 clone
	// 2 conectado
	global_mode=2;
 8004a04:	4b95      	ldr	r3, [pc, #596]	; (8004c5c <ESP8266_CONFIGURACION_INICIAL+0x2b8>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
	global_try_change_mode=0;
 8004a0a:	4b95      	ldr	r3, [pc, #596]	; (8004c60 <ESP8266_CONFIGURACION_INICIAL+0x2bc>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
	global_mode_ant=1;
 8004a10:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <ESP8266_CONFIGURACION_INICIAL+0x2c0>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]

	// alarma
	global_alarm_trigger_value='0';
 8004a16:	4b94      	ldr	r3, [pc, #592]	; (8004c68 <ESP8266_CONFIGURACION_INICIAL+0x2c4>)
 8004a18:	2230      	movs	r2, #48	; 0x30
 8004a1a:	701a      	strb	r2, [r3, #0]
	global_alarm_trigger_time=0;
 8004a1c:	4b93      	ldr	r3, [pc, #588]	; (8004c6c <ESP8266_CONFIGURACION_INICIAL+0x2c8>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

	global_alarm_remote_disconnect=0;
 8004a22:	4b93      	ldr	r3, [pc, #588]	; (8004c70 <ESP8266_CONFIGURACION_INICIAL+0x2cc>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
    global_alarm_remote_disconnect_count=10;
 8004a28:	4b92      	ldr	r3, [pc, #584]	; (8004c74 <ESP8266_CONFIGURACION_INICIAL+0x2d0>)
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	601a      	str	r2, [r3, #0]
    last_alarm_src_trigger[0]=0;
 8004a2e:	4b92      	ldr	r3, [pc, #584]	; (8004c78 <ESP8266_CONFIGURACION_INICIAL+0x2d4>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]

	global_sensor_level_alarm[0]=10000.0; // imposible que salte la alarma
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <ESP8266_CONFIGURACION_INICIAL+0x2d8>)
 8004a36:	4a92      	ldr	r2, [pc, #584]	; (8004c80 <ESP8266_CONFIGURACION_INICIAL+0x2dc>)
 8004a38:	601a      	str	r2, [r3, #0]
	global_sensor_level_alarm[1]=10000.0;
 8004a3a:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <ESP8266_CONFIGURACION_INICIAL+0x2d8>)
 8004a3c:	4a90      	ldr	r2, [pc, #576]	; (8004c80 <ESP8266_CONFIGURACION_INICIAL+0x2dc>)
 8004a3e:	605a      	str	r2, [r3, #4]
	global_sensor_level_max[0]=32.0;
 8004a40:	4b90      	ldr	r3, [pc, #576]	; (8004c84 <ESP8266_CONFIGURACION_INICIAL+0x2e0>)
 8004a42:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a46:	601a      	str	r2, [r3, #0]
	global_sensor_level_min[0]=25.0;
 8004a48:	4b8f      	ldr	r3, [pc, #572]	; (8004c88 <ESP8266_CONFIGURACION_INICIAL+0x2e4>)
 8004a4a:	4a90      	ldr	r2, [pc, #576]	; (8004c8c <ESP8266_CONFIGURACION_INICIAL+0x2e8>)
 8004a4c:	601a      	str	r2, [r3, #0]
	global_sensor_level_max[1]=100.0;
 8004a4e:	4b8d      	ldr	r3, [pc, #564]	; (8004c84 <ESP8266_CONFIGURACION_INICIAL+0x2e0>)
 8004a50:	4a8f      	ldr	r2, [pc, #572]	; (8004c90 <ESP8266_CONFIGURACION_INICIAL+0x2ec>)
 8004a52:	605a      	str	r2, [r3, #4]
	global_sensor_level_min[1]=0.0;
 8004a54:	4b8c      	ldr	r3, [pc, #560]	; (8004c88 <ESP8266_CONFIGURACION_INICIAL+0x2e4>)
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
	global_sensor=0;
 8004a5c:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <ESP8266_CONFIGURACION_INICIAL+0x2f0>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]


	// statistics
	global_recv_clone=0;
 8004a62:	4b8d      	ldr	r3, [pc, #564]	; (8004c98 <ESP8266_CONFIGURACION_INICIAL+0x2f4>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
	global_recv_connect=0;
 8004a68:	4b8c      	ldr	r3, [pc, #560]	; (8004c9c <ESP8266_CONFIGURACION_INICIAL+0x2f8>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
	global_hw_it=0;
 8004a6e:	4b8c      	ldr	r3, [pc, #560]	; (8004ca0 <ESP8266_CONFIGURACION_INICIAL+0x2fc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
	global_time_it=0;
 8004a74:	4b8b      	ldr	r3, [pc, #556]	; (8004ca4 <ESP8266_CONFIGURACION_INICIAL+0x300>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
	global_recv_clone=0;
 8004a7a:	4b87      	ldr	r3, [pc, #540]	; (8004c98 <ESP8266_CONFIGURACION_INICIAL+0x2f4>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
	global_recv_connect=0;
 8004a80:	4b86      	ldr	r3, [pc, #536]	; (8004c9c <ESP8266_CONFIGURACION_INICIAL+0x2f8>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

	global_Orion_it=0;
 8004a86:	4b88      	ldr	r3, [pc, #544]	; (8004ca8 <ESP8266_CONFIGURACION_INICIAL+0x304>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
	global_Orion_success=0;
 8004a8c:	4b87      	ldr	r3, [pc, #540]	; (8004cac <ESP8266_CONFIGURACION_INICIAL+0x308>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]



	global_sel_alarm_sensor=0;			  // sensor temperatura
 8004a92:	4b87      	ldr	r3, [pc, #540]	; (8004cb0 <ESP8266_CONFIGURACION_INICIAL+0x30c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
	//TO-DO mensaje
 	//printf("Proy_SEU_Orion "__TIME__ "\r\n");
	printf (PASCU_PRJ " at "__TIME__ "\r\n");
 8004a98:	4886      	ldr	r0, [pc, #536]	; (8004cb4 <ESP8266_CONFIGURACION_INICIAL+0x310>)
 8004a9a:	f007 fe0b 	bl	800c6b4 <puts>
	printf ("Module: " IoT_NAME "\r\n\r\n");
 8004a9e:	4886      	ldr	r0, [pc, #536]	; (8004cb8 <ESP8266_CONFIGURACION_INICIAL+0x314>)
 8004aa0:	f007 fe08 	bl	800c6b4 <puts>

 	// In/Out
 	fflush(0);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f006 fef7 	bl	800b898 <fflush>

 	IObuff=bufferCreat(128);
 8004aaa:	2080      	movs	r0, #128	; 0x80
 8004aac:	f000 fd34 	bl	8005518 <bufferCreat>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a82      	ldr	r2, [pc, #520]	; (8004cbc <ESP8266_CONFIGURACION_INICIAL+0x318>)
 8004ab4:	6013      	str	r3, [r2, #0]
 	if (!IObuff) return;
 8004ab6:	4b81      	ldr	r3, [pc, #516]	; (8004cbc <ESP8266_CONFIGURACION_INICIAL+0x318>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8141 	beq.w	8004d42 <ESP8266_CONFIGURACION_INICIAL+0x39e>

 	IObuff_rx=bufferCreat(512);
 8004ac0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ac4:	f000 fd28 	bl	8005518 <bufferCreat>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4a7d      	ldr	r2, [pc, #500]	; (8004cc0 <ESP8266_CONFIGURACION_INICIAL+0x31c>)
 8004acc:	6013      	str	r3, [r2, #0]
 	if (!IObuff_rx) return;
 8004ace:	4b7c      	ldr	r3, [pc, #496]	; (8004cc0 <ESP8266_CONFIGURACION_INICIAL+0x31c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8137 	beq.w	8004d46 <ESP8266_CONFIGURACION_INICIAL+0x3a2>

 		res_task=xTaskCreate(Task_Display,"DISPLAY",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004ad8:	2018      	movs	r0, #24
 8004ada:	f000 fa4d 	bl	8004f78 <makeFreeRtosPriority>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	9201      	str	r2, [sp, #4]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aec:	4975      	ldr	r1, [pc, #468]	; (8004cc4 <ESP8266_CONFIGURACION_INICIAL+0x320>)
 8004aee:	4876      	ldr	r0, [pc, #472]	; (8004cc8 <ESP8266_CONFIGURACION_INICIAL+0x324>)
 8004af0:	f004 feb3 	bl	800985a <xTaskCreate>
 8004af4:	6078      	str	r0, [r7, #4]
 		if( res_task != pdPASS ){
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d006      	beq.n	8004b0a <ESP8266_CONFIGURACION_INICIAL+0x166>
 				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8004afc:	4873      	ldr	r0, [pc, #460]	; (8004ccc <ESP8266_CONFIGURACION_INICIAL+0x328>)
 8004afe:	f007 fdd9 	bl	800c6b4 <puts>
 				fflush(NULL);
 8004b02:	2000      	movs	r0, #0
 8004b04:	f006 fec8 	bl	800b898 <fflush>
 				while(1);
 8004b08:	e7fe      	b.n	8004b08 <ESP8266_CONFIGURACION_INICIAL+0x164>
 		}

 		res_task=xTaskCreate(Task_DMA,"DMA",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004b0a:	2018      	movs	r0, #24
 8004b0c:	f000 fa34 	bl	8004f78 <makeFreeRtosPriority>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2200      	movs	r2, #0
 8004b14:	9201      	str	r2, [sp, #4]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b1e:	496c      	ldr	r1, [pc, #432]	; (8004cd0 <ESP8266_CONFIGURACION_INICIAL+0x32c>)
 8004b20:	486c      	ldr	r0, [pc, #432]	; (8004cd4 <ESP8266_CONFIGURACION_INICIAL+0x330>)
 8004b22:	f004 fe9a 	bl	800985a <xTaskCreate>
 8004b26:	6078      	str	r0, [r7, #4]
 			if( res_task != pdPASS ){
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d006      	beq.n	8004b3c <ESP8266_CONFIGURACION_INICIAL+0x198>
 					printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8004b2e:	4867      	ldr	r0, [pc, #412]	; (8004ccc <ESP8266_CONFIGURACION_INICIAL+0x328>)
 8004b30:	f007 fdc0 	bl	800c6b4 <puts>
 					fflush(NULL);
 8004b34:	2000      	movs	r0, #0
 8004b36:	f006 feaf 	bl	800b898 <fflush>
 					while(1);
 8004b3a:	e7fe      	b.n	8004b3a <ESP8266_CONFIGURACION_INICIAL+0x196>
 			}


	ORION_xSem=xSemaphoreCreateMutex();
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f004 f90a 	bl	8008d56 <xQueueCreateMutex>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a64      	ldr	r2, [pc, #400]	; (8004cd8 <ESP8266_CONFIGURACION_INICIAL+0x334>)
 8004b46:	6013      	str	r3, [r2, #0]
	if( ORION_xSem == NULL ){
 8004b48:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <ESP8266_CONFIGURACION_INICIAL+0x334>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <ESP8266_CONFIGURACION_INICIAL+0x1ba>
		printf("PANIC: Error al crear el Semáforo ORION\r\n");
 8004b50:	4862      	ldr	r0, [pc, #392]	; (8004cdc <ESP8266_CONFIGURACION_INICIAL+0x338>)
 8004b52:	f007 fdaf 	bl	800c6b4 <puts>
		fflush(NULL);
 8004b56:	2000      	movs	r0, #0
 8004b58:	f006 fe9e 	bl	800b898 <fflush>
		while(1);
 8004b5c:	e7fe      	b.n	8004b5c <ESP8266_CONFIGURACION_INICIAL+0x1b8>
	}

	BUFF_xSem=xSemaphoreCreateMutex();
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f004 f8f9 	bl	8008d56 <xQueueCreateMutex>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <ESP8266_CONFIGURACION_INICIAL+0x33c>)
 8004b68:	6013      	str	r3, [r2, #0]
	if( BUFF_xSem == NULL ){
 8004b6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ce0 <ESP8266_CONFIGURACION_INICIAL+0x33c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <ESP8266_CONFIGURACION_INICIAL+0x1dc>
		printf("PANIC: Error al crear el Semaforo\r\n");
 8004b72:	485c      	ldr	r0, [pc, #368]	; (8004ce4 <ESP8266_CONFIGURACION_INICIAL+0x340>)
 8004b74:	f007 fd9e 	bl	800c6b4 <puts>
		fflush(NULL);
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f006 fe8d 	bl	800b898 <fflush>
		while(1);
 8004b7e:	e7fe      	b.n	8004b7e <ESP8266_CONFIGURACION_INICIAL+0x1da>
	}

	res_task=xTaskCreate( Task_Orion,"ORION",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004b80:	2018      	movs	r0, #24
 8004b82:	f000 f9f9 	bl	8004f78 <makeFreeRtosPriority>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2200      	movs	r2, #0
 8004b8a:	9201      	str	r2, [sp, #4]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b94:	4954      	ldr	r1, [pc, #336]	; (8004ce8 <ESP8266_CONFIGURACION_INICIAL+0x344>)
 8004b96:	4855      	ldr	r0, [pc, #340]	; (8004cec <ESP8266_CONFIGURACION_INICIAL+0x348>)
 8004b98:	f004 fe5f 	bl	800985a <xTaskCreate>
 8004b9c:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d006      	beq.n	8004bb2 <ESP8266_CONFIGURACION_INICIAL+0x20e>
			printf("PANIC: Error al crear Tarea Orion\r\n");
 8004ba4:	4852      	ldr	r0, [pc, #328]	; (8004cf0 <ESP8266_CONFIGURACION_INICIAL+0x34c>)
 8004ba6:	f007 fd85 	bl	800c6b4 <puts>
			fflush(NULL);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f006 fe74 	bl	800b898 <fflush>
			while(1);
 8004bb0:	e7fe      	b.n	8004bb0 <ESP8266_CONFIGURACION_INICIAL+0x20c>
	}

	res_task=xTaskCreate( Task_TEMP,"UPDATE",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004bb2:	2018      	movs	r0, #24
 8004bb4:	f000 f9e0 	bl	8004f78 <makeFreeRtosPriority>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2200      	movs	r2, #0
 8004bbc:	9201      	str	r2, [sp, #4]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc6:	494b      	ldr	r1, [pc, #300]	; (8004cf4 <ESP8266_CONFIGURACION_INICIAL+0x350>)
 8004bc8:	484b      	ldr	r0, [pc, #300]	; (8004cf8 <ESP8266_CONFIGURACION_INICIAL+0x354>)
 8004bca:	f004 fe46 	bl	800985a <xTaskCreate>
 8004bce:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d006      	beq.n	8004be4 <ESP8266_CONFIGURACION_INICIAL+0x240>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8004bd6:	483d      	ldr	r0, [pc, #244]	; (8004ccc <ESP8266_CONFIGURACION_INICIAL+0x328>)
 8004bd8:	f007 fd6c 	bl	800c6b4 <puts>
			fflush(NULL);
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f006 fe5b 	bl	800b898 <fflush>
			while(1);
 8004be2:	e7fe      	b.n	8004be2 <ESP8266_CONFIGURACION_INICIAL+0x23e>
	}

	res_task=xTaskCreate(  Task_LEDS_ALARM,"QUERY",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004be4:	2018      	movs	r0, #24
 8004be6:	f000 f9c7 	bl	8004f78 <makeFreeRtosPriority>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2200      	movs	r2, #0
 8004bee:	9201      	str	r2, [sp, #4]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf8:	4940      	ldr	r1, [pc, #256]	; (8004cfc <ESP8266_CONFIGURACION_INICIAL+0x358>)
 8004bfa:	4841      	ldr	r0, [pc, #260]	; (8004d00 <ESP8266_CONFIGURACION_INICIAL+0x35c>)
 8004bfc:	f004 fe2d 	bl	800985a <xTaskCreate>
 8004c00:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d006      	beq.n	8004c16 <ESP8266_CONFIGURACION_INICIAL+0x272>
			printf("PANIC: Error al crear Tarea LEDS_ALARM\r\n");
 8004c08:	483e      	ldr	r0, [pc, #248]	; (8004d04 <ESP8266_CONFIGURACION_INICIAL+0x360>)
 8004c0a:	f007 fd53 	bl	800c6b4 <puts>
			fflush(NULL);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f006 fe42 	bl	800b898 <fflush>
			while(1);
 8004c14:	e7fe      	b.n	8004c14 <ESP8266_CONFIGURACION_INICIAL+0x270>
	}
	res_task=xTaskCreate( Task_HW,"Tarea_HW",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004c16:	2018      	movs	r0, #24
 8004c18:	f000 f9ae 	bl	8004f78 <makeFreeRtosPriority>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2200      	movs	r2, #0
 8004c20:	9201      	str	r2, [sp, #4]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c2a:	4937      	ldr	r1, [pc, #220]	; (8004d08 <ESP8266_CONFIGURACION_INICIAL+0x364>)
 8004c2c:	4837      	ldr	r0, [pc, #220]	; (8004d0c <ESP8266_CONFIGURACION_INICIAL+0x368>)
 8004c2e:	f004 fe14 	bl	800985a <xTaskCreate>
 8004c32:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d06a      	beq.n	8004d10 <ESP8266_CONFIGURACION_INICIAL+0x36c>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8004c3a:	4824      	ldr	r0, [pc, #144]	; (8004ccc <ESP8266_CONFIGURACION_INICIAL+0x328>)
 8004c3c:	f007 fd3a 	bl	800c6b4 <puts>
			fflush(NULL);
 8004c40:	2000      	movs	r0, #0
 8004c42:	f006 fe29 	bl	800b898 <fflush>
			while(1);
 8004c46:	e7fe      	b.n	8004c46 <ESP8266_CONFIGURACION_INICIAL+0x2a2>
 8004c48:	200005d4 	.word	0x200005d4
 8004c4c:	200004e8 	.word	0x200004e8
 8004c50:	2000056c 	.word	0x2000056c
 8004c54:	200005a0 	.word	0x200005a0
 8004c58:	200004f3 	.word	0x200004f3
 8004c5c:	20000568 	.word	0x20000568
 8004c60:	2000056a 	.word	0x2000056a
 8004c64:	20000569 	.word	0x20000569
 8004c68:	200004f4 	.word	0x200004f4
 8004c6c:	200004f8 	.word	0x200004f8
 8004c70:	200004fc 	.word	0x200004fc
 8004c74:	20000500 	.word	0x20000500
 8004c78:	20000504 	.word	0x20000504
 8004c7c:	200004d4 	.word	0x200004d4
 8004c80:	461c4000 	.word	0x461c4000
 8004c84:	200004c4 	.word	0x200004c4
 8004c88:	200004cc 	.word	0x200004cc
 8004c8c:	41c80000 	.word	0x41c80000
 8004c90:	42c80000 	.word	0x42c80000
 8004c94:	200004c0 	.word	0x200004c0
 8004c98:	20000498 	.word	0x20000498
 8004c9c:	200004a8 	.word	0x200004a8
 8004ca0:	20000490 	.word	0x20000490
 8004ca4:	20000494 	.word	0x20000494
 8004ca8:	200004b8 	.word	0x200004b8
 8004cac:	200004bc 	.word	0x200004bc
 8004cb0:	2000056b 	.word	0x2000056b
 8004cb4:	080109ac 	.word	0x080109ac
 8004cb8:	080109d8 	.word	0x080109d8
 8004cbc:	200016c8 	.word	0x200016c8
 8004cc0:	200016cc 	.word	0x200016cc
 8004cc4:	080109f4 	.word	0x080109f4
 8004cc8:	08004ed9 	.word	0x08004ed9
 8004ccc:	080109fc 	.word	0x080109fc
 8004cd0:	08010a28 	.word	0x08010a28
 8004cd4:	08004d5d 	.word	0x08004d5d
 8004cd8:	200016c4 	.word	0x200016c4
 8004cdc:	08010a2c 	.word	0x08010a2c
 8004ce0:	200016c0 	.word	0x200016c0
 8004ce4:	08010a58 	.word	0x08010a58
 8004ce8:	08010a7c 	.word	0x08010a7c
 8004cec:	08001f45 	.word	0x08001f45
 8004cf0:	08010a84 	.word	0x08010a84
 8004cf4:	08010aa8 	.word	0x08010aa8
 8004cf8:	08002b41 	.word	0x08002b41
 8004cfc:	08010ab0 	.word	0x08010ab0
 8004d00:	08002515 	.word	0x08002515
 8004d04:	08010ab8 	.word	0x08010ab8
 8004d08:	08010ae0 	.word	0x08010ae0
 8004d0c:	08001029 	.word	0x08001029
	}

	res_task=xTaskCreate( Task_Operativa,"Tarea_Operativa",2048,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8004d10:	2018      	movs	r0, #24
 8004d12:	f000 f931 	bl	8004f78 <makeFreeRtosPriority>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2200      	movs	r2, #0
 8004d1a:	9201      	str	r2, [sp, #4]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d24:	490a      	ldr	r1, [pc, #40]	; (8004d50 <ESP8266_CONFIGURACION_INICIAL+0x3ac>)
 8004d26:	480b      	ldr	r0, [pc, #44]	; (8004d54 <ESP8266_CONFIGURACION_INICIAL+0x3b0>)
 8004d28:	f004 fd97 	bl	800985a <xTaskCreate>
 8004d2c:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d009      	beq.n	8004d48 <ESP8266_CONFIGURACION_INICIAL+0x3a4>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8004d34:	4808      	ldr	r0, [pc, #32]	; (8004d58 <ESP8266_CONFIGURACION_INICIAL+0x3b4>)
 8004d36:	f007 fcbd 	bl	800c6b4 <puts>
			fflush(NULL);
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f006 fdac 	bl	800b898 <fflush>
			while(1);
 8004d40:	e7fe      	b.n	8004d40 <ESP8266_CONFIGURACION_INICIAL+0x39c>
 	if (!IObuff) return;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <ESP8266_CONFIGURACION_INICIAL+0x3a4>
 	if (!IObuff_rx) return;
 8004d46:	bf00      	nop
			while(1);
	}


	*/
}
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	08010aec 	.word	0x08010aec
 8004d54:	08001d79 	.word	0x08001d79
 8004d58:	080109fc 	.word	0x080109fc

08004d5c <Task_DMA>:
extern BUFF_BUFFER_t * IObuff;
extern BUFF_BUFFER_t * IObuff_rx;



void Task_DMA( void *pvParameters ){
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8004d64:	4b54      	ldr	r3, [pc, #336]	; (8004eb8 <Task_DMA+0x15c>)
 8004d66:	4a55      	ldr	r2, [pc, #340]	; (8004ebc <Task_DMA+0x160>)
 8004d68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8004d6a:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <Task_DMA+0x15c>)
 8004d6c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004d70:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d72:	4b51      	ldr	r3, [pc, #324]	; (8004eb8 <Task_DMA+0x15c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d78:	4b4f      	ldr	r3, [pc, #316]	; (8004eb8 <Task_DMA+0x15c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 8004d7e:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <Task_DMA+0x15c>)
 8004d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d86:	4b4c      	ldr	r3, [pc, #304]	; (8004eb8 <Task_DMA+0x15c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d8c:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <Task_DMA+0x15c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 8004d92:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <Task_DMA+0x15c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 8004d98:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <Task_DMA+0x15c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d9e:	4b46      	ldr	r3, [pc, #280]	; (8004eb8 <Task_DMA+0x15c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 8004da4:	4844      	ldr	r0, [pc, #272]	; (8004eb8 <Task_DMA+0x15c>)
 8004da6:	f001 fa93 	bl	80062d0 <HAL_DMA_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <Task_DMA+0x58>
    {
      Error_Handler();
 8004db0:	f7ff fb70 	bl	8004494 <Error_Handler>
    }

	nbuff=0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 8004db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dbc:	4940      	ldr	r1, [pc, #256]	; (8004ec0 <Task_DMA+0x164>)
 8004dbe:	4841      	ldr	r0, [pc, #260]	; (8004ec4 <Task_DMA+0x168>)
 8004dc0:	f002 fe12 	bl	80079e8 <HAL_UART_Receive_DMA>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]

	it=0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <Task_DMA+0x7e>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d032      	beq.n	8004e3e <Task_DMA+0xe2>
 8004dd8:	e066      	b.n	8004ea8 <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <Task_DMA+0x16c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de8:	d25b      	bcs.n	8004ea2 <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8004dea:	b672      	cpsid	i
}
 8004dec:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 8004dee:	4835      	ldr	r0, [pc, #212]	; (8004ec4 <Task_DMA+0x168>)
 8004df0:	f000 fca2 	bl	8005738 <HAL_UART_DMAStop_PAS>
 8004df4:	4603      	mov	r3, r0
 8004df6:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 8004df8:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <Task_DMA+0x168>)
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <Task_DMA+0x15c>)
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <Task_DMA+0x15c>)
 8004e00:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <Task_DMA+0x168>)
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8004e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e08:	4930      	ldr	r1, [pc, #192]	; (8004ecc <Task_DMA+0x170>)
 8004e0a:	482e      	ldr	r0, [pc, #184]	; (8004ec4 <Task_DMA+0x168>)
 8004e0c:	f002 fdec 	bl	80079e8 <HAL_UART_Receive_DMA>
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e14:	b662      	cpsie	i
}
 8004e16:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <Task_DMA+0x16c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	60bb      	str	r3, [r7, #8]
					   res=IObuff->puts(IObuff_rx,buffer_DMA_1,buffer_SIZE-num);
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <Task_DMA+0x174>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <Task_DMA+0x178>)
 8004e2c:	6810      	ldr	r0, [r2, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8004e34:	4922      	ldr	r1, [pc, #136]	; (8004ec0 <Task_DMA+0x164>)
 8004e36:	4798      	blx	r3
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8004e3c:	e031      	b.n	8004ea2 <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <Task_DMA+0x15c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	d22b      	bcs.n	8004ea6 <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004e4e:	b672      	cpsid	i
}
 8004e50:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 8004e52:	481c      	ldr	r0, [pc, #112]	; (8004ec4 <Task_DMA+0x168>)
 8004e54:	f000 fc70 	bl	8005738 <HAL_UART_DMAStop_PAS>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <Task_DMA+0x168>)
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <Task_DMA+0x16c>)
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
 8004e62:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <Task_DMA+0x16c>)
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <Task_DMA+0x168>)
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 8004e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6c:	4914      	ldr	r1, [pc, #80]	; (8004ec0 <Task_DMA+0x164>)
 8004e6e:	4815      	ldr	r0, [pc, #84]	; (8004ec4 <Task_DMA+0x168>)
 8004e70:	f002 fdba 	bl	80079e8 <HAL_UART_Receive_DMA>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e78:	b662      	cpsie	i
}
 8004e7a:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <Task_DMA+0x15c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60bb      	str	r3, [r7, #8]
	    				res=IObuff->puts(IObuff_rx,buffer_DMA_2,buffer_SIZE-num);
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <Task_DMA+0x174>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <Task_DMA+0x178>)
 8004e90:	6810      	ldr	r0, [r2, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8004e98:	490c      	ldr	r1, [pc, #48]	; (8004ecc <Task_DMA+0x170>)
 8004e9a:	4798      	blx	r3
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 8004ea0:	e001      	b.n	8004ea6 <Task_DMA+0x14a>
					break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <Task_DMA+0x14c>
	    			break;
 8004ea6:	bf00      	nop
		}

		it++;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 8004eae:	2001      	movs	r0, #1
 8004eb0:	f004 fe2e 	bl	8009b10 <vTaskDelay>
		switch (nbuff){
 8004eb4:	e78a      	b.n	8004dcc <Task_DMA+0x70>
 8004eb6:	bf00      	nop
 8004eb8:	2000042c 	.word	0x2000042c
 8004ebc:	400260b8 	.word	0x400260b8
 8004ec0:	200016dc 	.word	0x200016dc
 8004ec4:	200002c4 	.word	0x200002c4
 8004ec8:	200003c8 	.word	0x200003c8
 8004ecc:	200018dc 	.word	0x200018dc
 8004ed0:	200016c8 	.word	0x200016c8
 8004ed4:	200016cc 	.word	0x200016cc

08004ed8 <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
	while(1){

		IObuff->get(IObuff,&car);
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <Task_Display+0x3c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a0a      	ldr	r2, [pc, #40]	; (8004f14 <Task_Display+0x3c>)
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	f107 010a 	add.w	r1, r7, #10
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,10000);
 8004ef6:	f107 010a 	add.w	r1, r7, #10
 8004efa:	f242 7310 	movw	r3, #10000	; 0x2710
 8004efe:	2201      	movs	r2, #1
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <Task_Display+0x40>)
 8004f02:	f002 fc60 	bl	80077c6 <HAL_UART_Transmit>
 8004f06:	4603      	mov	r3, r0
 8004f08:	72fb      	strb	r3, [r7, #11]
		it++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
		IObuff->get(IObuff,&car);
 8004f10:	e7e8      	b.n	8004ee4 <Task_Display+0xc>
 8004f12:	bf00      	nop
 8004f14:	200016c8 	.word	0x200016c8
 8004f18:	200002c4 	.word	0x200002c4

08004f1c <map>:
#include <jsmn.h>
#include <task.h>
#include <math.h>


float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	ed87 0a05 	vstr	s0, [r7, #20]
 8004f26:	edc7 0a04 	vstr	s1, [r7, #16]
 8004f2a:	ed87 1a03 	vstr	s2, [r7, #12]
 8004f2e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004f32:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f36:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f42:	edd7 6a01 	vldr	s13, [r7, #4]
 8004f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f4e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004f52:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f56:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <makeFreeRtosPriority>:

unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d004      	beq.n	8004f96 <makeFreeRtosPriority+0x1e>
fpriority += (priority - osPriorityIdle);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	3b01      	subs	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <_write>:

int _write(int file, char *ptr, int len)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e00b      	b.n	8004fce <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	1c4b      	adds	r3, r1, #1
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	4807      	ldr	r0, [pc, #28]	; (8004fe0 <_write+0x3c>)
 8004fc4:	f002 fbff 	bl	80077c6 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	dbef      	blt.n	8004fb6 <_write+0x12>
	}

	return len;
 8004fd6:	687b      	ldr	r3, [r7, #4]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200002c4 	.word	0x200002c4

08004fe4 <cleanResponse>:


/////////////////////////////////////////////////////////////////////// Procesar

void cleanResponse(char * data,int maxlen)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	int indexbk;
	char bytes[4];

	char * j,*from, *pc;

	res=data;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	613b      	str	r3, [r7, #16]


	 if (strlen(data)<300)
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fb f8fe 	bl	80001f4 <strlen>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004ffe:	d202      	bcs.n	8005006 <cleanResponse+0x22>
		 res=1;
 8005000:	2301      	movs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e001      	b.n	800500a <cleanResponse+0x26>
	 else
		 res=0;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
	 i=0;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
	 while (j=strstr(data,"+IPD")){
 800500e:	e01b      	b.n	8005048 <cleanResponse+0x64>

		 from=strstr(j,":");
 8005010:	213a      	movs	r1, #58	; 0x3a
 8005012:	69f8      	ldr	r0, [r7, #28]
 8005014:	f007 fc79 	bl	800c90a <strchr>
 8005018:	61b8      	str	r0, [r7, #24]
		 from++;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	3301      	adds	r3, #1
 800501e:	61bb      	str	r3, [r7, #24]

		 	 for (pc=from;pc<(data+2048);pc++)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e00a      	b.n	800503c <cleanResponse+0x58>
			 	*(j++)=*(from++);
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	1c53      	adds	r3, r2, #1
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	1c59      	adds	r1, r3, #1
 8005030:	61f9      	str	r1, [r7, #28]
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	701a      	strb	r2, [r3, #0]
		 	 for (pc=from;pc<(data+2048);pc++)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3301      	adds	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	429a      	cmp	r2, r3
 8005046:	d3ee      	bcc.n	8005026 <cleanResponse+0x42>
	 while (j=strstr(data,"+IPD")){
 8005048:	4924      	ldr	r1, [pc, #144]	; (80050dc <cleanResponse+0xf8>)
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f007 fc99 	bl	800c982 <strstr>
 8005050:	61f8      	str	r0, [r7, #28]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1db      	bne.n	8005010 <cleanResponse+0x2c>
	 };
	 	 do
			                  {
			                  }while(data[i++]!='{');
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	623a      	str	r2, [r7, #32]
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b7b      	cmp	r3, #123	; 0x7b
 8005068:	d1f6      	bne.n	8005058 <cleanResponse+0x74>
			                  i--;
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	3b01      	subs	r3, #1
 800506e:	623b      	str	r3, [r7, #32]
	for (t=0;t<(2048-i);t++)
 8005070:	2300      	movs	r3, #0
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
 8005074:	e00d      	b.n	8005092 <cleanResponse+0xae>
		data[t]=data[t+i];
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	4413      	add	r3, r2
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	441a      	add	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	440b      	add	r3, r1
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
	for (t=0;t<(2048-i);t++)
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	3301      	adds	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	429a      	cmp	r2, r3
 800509c:	dbeb      	blt.n	8005076 <cleanResponse+0x92>

	i=0;
 800509e:	2300      	movs	r3, #0
 80050a0:	623b      	str	r3, [r7, #32]

    for (t=0;t<2048;t++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	e00a      	b.n	80050be <cleanResponse+0xda>
    	if (data[t]=='}')
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b7d      	cmp	r3, #125	; 0x7d
 80050b2:	d101      	bne.n	80050b8 <cleanResponse+0xd4>
    		i=t;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	623b      	str	r3, [r7, #32]
    for (t=0;t<2048;t++)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	3301      	adds	r3, #1
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c4:	dbf0      	blt.n	80050a8 <cleanResponse+0xc4>
    data[i+1]=0;
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	3301      	adds	r3, #1
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]




}
 80050d2:	bf00      	nop
 80050d4:	3728      	adds	r7, #40	; 0x28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	08010afc 	.word	0x08010afc

080050e0 <pon_Nivel>:



////////////////////////////////////////////////////////////////////////7 LED
void pon_Nivel(uint8_t sensor_sel, uint32_t Hz){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	6039      	str	r1, [r7, #0]
 80050ea:	71fb      	strb	r3, [r7, #7]
	static TickType_t ttime;
	static int last_value_led=0;
	static int last_pos_led=0;
    float alarm_aux;

    global_LEDS[last_pos_led]=0;
 80050ec:	4b72      	ldr	r3, [pc, #456]	; (80052b8 <pon_Nivel+0x1d8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a72      	ldr	r2, [pc, #456]	; (80052bc <pon_Nivel+0x1dc>)
 80050f2:	2100      	movs	r1, #0
 80050f4:	54d1      	strb	r1, [r2, r3]
	for (ct=0;ct<8;ct++) global_LEDS[ct]=0; // borra el led alarma
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e007      	b.n	800510c <pon_Nivel+0x2c>
 80050fc:	4a6f      	ldr	r2, [pc, #444]	; (80052bc <pon_Nivel+0x1dc>)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	3301      	adds	r3, #1
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b07      	cmp	r3, #7
 8005110:	ddf4      	ble.n	80050fc <pon_Nivel+0x1c>

	// pon nivel de señal
	nleds=trunc((global_sensor_level[sensor_sel]-global_sensor_level_min[sensor_sel])/(global_sensor_level_max[sensor_sel]-global_sensor_level_min[sensor_sel])*7.4);
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	4a6a      	ldr	r2, [pc, #424]	; (80052c0 <pon_Nivel+0x1e0>)
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	ed93 7a00 	vldr	s14, [r3]
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	4a68      	ldr	r2, [pc, #416]	; (80052c4 <pon_Nivel+0x1e4>)
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	edd3 7a00 	vldr	s15, [r3]
 800512a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	4a65      	ldr	r2, [pc, #404]	; (80052c8 <pon_Nivel+0x1e8>)
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	edd3 6a00 	vldr	s13, [r3]
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4a61      	ldr	r2, [pc, #388]	; (80052c4 <pon_Nivel+0x1e4>)
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	edd3 7a00 	vldr	s15, [r3]
 8005146:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800514a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800514e:	ee16 0a90 	vmov	r0, s13
 8005152:	f7fb fa11 	bl	8000578 <__aeabi_f2d>
 8005156:	a356      	add	r3, pc, #344	; (adr r3, 80052b0 <pon_Nivel+0x1d0>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb fa64 	bl	8000628 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	ec43 2b17 	vmov	d7, r2, r3
 8005168:	eeb0 0a47 	vmov.f32	s0, s14
 800516c:	eef0 0a67 	vmov.f32	s1, s15
 8005170:	f00a fe56 	bl	800fe20 <trunc>
 8005174:	ec53 2b10 	vmov	r2, r3, d0
 8005178:	4610      	mov	r0, r2
 800517a:	4619      	mov	r1, r3
 800517c:	f7fb fd04 	bl	8000b88 <__aeabi_d2iz>
 8005180:	4603      	mov	r3, r0
 8005182:	613b      	str	r3, [r7, #16]
	for (ct=0;ct<8;ct++)
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e011      	b.n	80051ae <pon_Nivel+0xce>
	if (ct<nleds)
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	429a      	cmp	r2, r3
 8005190:	da05      	bge.n	800519e <pon_Nivel+0xbe>
			global_LEDS[ct]=1;
 8005192:	4a4a      	ldr	r2, [pc, #296]	; (80052bc <pon_Nivel+0x1dc>)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e004      	b.n	80051a8 <pon_Nivel+0xc8>
	else
			global_LEDS[ct]=0;
 800519e:	4a47      	ldr	r2, [pc, #284]	; (80052bc <pon_Nivel+0x1dc>)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4413      	add	r3, r2
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
	for (ct=0;ct<8;ct++)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3301      	adds	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b07      	cmp	r3, #7
 80051b2:	ddea      	ble.n	800518a <pon_Nivel+0xaa>

	// este nivel tiene prioridad sobre el valor act, por eso va al final

	global_LEDS[last_pos_led]=last_value_led;
 80051b4:	4b45      	ldr	r3, [pc, #276]	; (80052cc <pon_Nivel+0x1ec>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <pon_Nivel+0x1d8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	b2d1      	uxtb	r1, r2
 80051be:	4a3f      	ldr	r2, [pc, #252]	; (80052bc <pon_Nivel+0x1dc>)
 80051c0:	54d1      	strb	r1, [r2, r3]

 	if (((float)(xTaskGetTickCount()-last_time)/portTICK_RATE_MS)>(float)1000.0/(float)Hz){
 80051c2:	f004 fdf5 	bl	8009db0 <xTaskGetTickCount>
 80051c6:	4602      	mov	r2, r0
 80051c8:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <pon_Nivel+0x1f0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e0:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 80052d4 <pon_Nivel+0x1f4>
 80051e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80051e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	dc00      	bgt.n	80051f4 <pon_Nivel+0x114>
		if (last_value_led==1)
			global_LEDS[nled]=0;
		else
			global_LEDS[nled]=1;
	}
}
 80051f2:	e059      	b.n	80052a8 <pon_Nivel+0x1c8>
		last_value_led=!last_value_led;
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <pon_Nivel+0x1ec>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <pon_Nivel+0x1ec>)
 8005206:	601a      	str	r2, [r3, #0]
		last_time= xTaskGetTickCount();
 8005208:	f004 fdd2 	bl	8009db0 <xTaskGetTickCount>
 800520c:	4603      	mov	r3, r0
 800520e:	4a30      	ldr	r2, [pc, #192]	; (80052d0 <pon_Nivel+0x1f0>)
 8005210:	6013      	str	r3, [r2, #0]
		nled=trunc((global_sensor_level_alarm[sensor_sel]-global_sensor_level_min[sensor_sel])/(global_sensor_level_max[sensor_sel]-global_sensor_level_min[sensor_sel])*7.4);
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	4a30      	ldr	r2, [pc, #192]	; (80052d8 <pon_Nivel+0x1f8>)
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	ed93 7a00 	vldr	s14, [r3]
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	4a28      	ldr	r2, [pc, #160]	; (80052c4 <pon_Nivel+0x1e4>)
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	edd3 7a00 	vldr	s15, [r3]
 800522a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	4a25      	ldr	r2, [pc, #148]	; (80052c8 <pon_Nivel+0x1e8>)
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	edd3 6a00 	vldr	s13, [r3]
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <pon_Nivel+0x1e4>)
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	edd3 7a00 	vldr	s15, [r3]
 8005246:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800524a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800524e:	ee16 0a90 	vmov	r0, s13
 8005252:	f7fb f991 	bl	8000578 <__aeabi_f2d>
 8005256:	a316      	add	r3, pc, #88	; (adr r3, 80052b0 <pon_Nivel+0x1d0>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb f9e4 	bl	8000628 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	ec43 2b17 	vmov	d7, r2, r3
 8005268:	eeb0 0a47 	vmov.f32	s0, s14
 800526c:	eef0 0a67 	vmov.f32	s1, s15
 8005270:	f00a fdd6 	bl	800fe20 <trunc>
 8005274:	ec53 2b10 	vmov	r2, r3, d0
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f7fb fc84 	bl	8000b88 <__aeabi_d2iz>
 8005280:	4603      	mov	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]
		last_pos_led=nled;
 8005284:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <pon_Nivel+0x1d8>)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6013      	str	r3, [r2, #0]
		if (last_value_led==1)
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <pon_Nivel+0x1ec>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d105      	bne.n	800529e <pon_Nivel+0x1be>
			global_LEDS[nled]=0;
 8005292:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <pon_Nivel+0x1dc>)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
}
 800529c:	e004      	b.n	80052a8 <pon_Nivel+0x1c8>
			global_LEDS[nled]=1;
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <pon_Nivel+0x1dc>)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	9999999a 	.word	0x9999999a
 80052b4:	401d9999 	.word	0x401d9999
 80052b8:	200016d0 	.word	0x200016d0
 80052bc:	200004e8 	.word	0x200004e8
 80052c0:	200004dc 	.word	0x200004dc
 80052c4:	200004cc 	.word	0x200004cc
 80052c8:	200004c4 	.word	0x200004c4
 80052cc:	200016d4 	.word	0x200016d4
 80052d0:	200016d8 	.word	0x200016d8
 80052d4:	447a0000 	.word	0x447a0000
 80052d8:	200004d4 	.word	0x200004d4

080052dc <BUFF_is_empty>:



/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	429a      	cmp	r2, r3
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d119      	bne.n	8005372 <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	4413      	add	r3, r2
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	3301      	adds	r3, #1
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6a12      	ldr	r2, [r2, #32]
 8005356:	fbb3 f1f2 	udiv	r1, r3, r2
 800535a:	fb01 f202 	mul.w	r2, r1, r2
 800535e:	1a9a      	subs	r2, r3, r2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <BUFF_inserta+0x50>
	} else return 0;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11a      	bne.n	80053ca <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4413      	add	r3, r2
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6a12      	ldr	r2, [r2, #32]
 80053ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80053b2:	fb01 f202 	mul.w	r2, r1, r2
 80053b6:	1a9a      	subs	r2, r3, r2
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	1e5a      	subs	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <BUFF_extrae+0x50>
	} else return 0;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80053e2:	bf00      	nop
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80053ec:	4618      	mov	r0, r3
 80053ee:	f003 ff45 	bl	800927c <xQueueSemaphoreTake>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d1f5      	bne.n	80053e4 <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 80053f8:	e017      	b.n	800542a <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6958      	ldr	r0, [r3, #20]
 80053fe:	2300      	movs	r3, #0
 8005400:	2200      	movs	r2, #0
 8005402:	2100      	movs	r1, #0
 8005404:	f003 fcc0 	bl	8008d88 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8005408:	2064      	movs	r0, #100	; 0x64
 800540a:	f004 fb81 	bl	8009b10 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800540e:	bf00      	nop
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f242 7110 	movw	r1, #10000	; 0x2710
 8005418:	4618      	mov	r0, r3
 800541a:	f003 ff2f 	bl	800927c <xQueueSemaphoreTake>
 800541e:	4603      	mov	r3, r0
 8005420:	2b01      	cmp	r3, #1
 8005422:	d1f5      	bne.n	8005410 <BUFF_extrae_prot+0x3c>
	 		 it++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ffa5 	bl	800537c <BUFF_extrae>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0e0      	beq.n	80053fa <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6958      	ldr	r0, [r3, #20]
 800543c:	2300      	movs	r3, #0
 800543e:	2200      	movs	r2, #0
 8005440:	2100      	movs	r1, #0
 8005442:	f003 fca1 	bl	8008d88 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8005446:	2301      	movs	r3, #1
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8005460:	bf00      	nop
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f242 7110 	movw	r1, #10000	; 0x2710
 800546a:	4618      	mov	r0, r3
 800546c:	f003 ff06 	bl	800927c <xQueueSemaphoreTake>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d1f5      	bne.n	8005462 <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 8005476:	e017      	b.n	80054a8 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6958      	ldr	r0, [r3, #20]
 800547c:	2300      	movs	r3, #0
 800547e:	2200      	movs	r2, #0
 8005480:	2100      	movs	r1, #0
 8005482:	f003 fc81 	bl	8008d88 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8005486:	2064      	movs	r0, #100	; 0x64
 8005488:	f004 fb42 	bl	8009b10 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800548c:	bf00      	nop
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f242 7110 	movw	r1, #10000	; 0x2710
 8005496:	4618      	mov	r0, r3
 8005498:	f003 fef0 	bl	800927c <xQueueSemaphoreTake>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d1f5      	bne.n	800548e <BUFF_inserta_prot+0x3e>
	 		 it++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff39 	bl	8005324 <BUFF_inserta>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0df      	beq.n	8005478 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6958      	ldr	r0, [r3, #20]
 80054bc:	2300      	movs	r3, #0
 80054be:	2200      	movs	r2, #0
 80054c0:	2100      	movs	r1, #0
 80054c2:	f003 fc61 	bl	8008d88 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 80054c6:	2301      	movs	r3, #1
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e010      	b.n	8005504 <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	4413      	add	r3, r2
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff ffaf 	bl	8005450 <BUFF_inserta_prot>
 80054f2:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <BUFF_inserta_cad+0x2e>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	e007      	b.n	800550e <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	d8ea      	bhi.n	80054e2 <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 800550c:	2301      	movs	r3, #1
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 8005520:	202c      	movs	r0, #44	; 0x2c
 8005522:	f006 fae9 	bl	800baf8 <malloc>
 8005526:	4603      	mov	r3, r0
 8005528:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d03d      	beq.n	80055ac <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f006 fae0 	bl	800baf8 <malloc>
 8005538:	4603      	mov	r3, r0
 800553a:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d031      	beq.n	80055a6 <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 8005542:	2001      	movs	r0, #1
 8005544:	f003 fc07 	bl	8008d56 <xQueueCreateMutex>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <bufferCreat+0x4e>
				free(bff);
 8005556:	68b8      	ldr	r0, [r7, #8]
 8005558:	f006 fad6 	bl	800bb08 <free>
				free(tmp);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f006 fad3 	bl	800bb08 <free>
				return NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	e023      	b.n	80055ae <bufferCreat+0x96>
			};
            tmp->buff=bff;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <bufferCreat+0xa0>)
 8005588:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <bufferCreat+0xa4>)
 800558e:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <bufferCreat+0xa8>)
 8005594:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <bufferCreat+0xac>)
 800559a:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <bufferCreat+0xb0>)
 80055a0:	609a      	str	r2, [r3, #8]
			return tmp;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	e003      	b.n	80055ae <bufferCreat+0x96>
		}
		else
			free(tmp);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f006 faae 	bl	800bb08 <free>
	}
	return NULL;
 80055ac:	2300      	movs	r3, #0

}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	080053d5 	.word	0x080053d5
 80055bc:	08005451 	.word	0x08005451
 80055c0:	080054d1 	.word	0x080054d1
 80055c4:	080052ff 	.word	0x080052ff
 80055c8:	080052dd 	.word	0x080052dd

080055cc <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b095      	sub	sp, #84	; 0x54
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f4:	643a      	str	r2, [r7, #64]	; 0x40
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	61fb      	str	r3, [r7, #28]
   return(result);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800562e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	2b01      	cmp	r3, #1
 8005642:	d119      	bne.n	8005678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60bb      	str	r3, [r7, #8]
   return(result);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005664:	61ba      	str	r2, [r7, #24]
 8005666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6979      	ldr	r1, [r7, #20]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	613b      	str	r3, [r7, #16]
   return(result);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005686:	bf00      	nop
 8005688:	3754      	adds	r7, #84	; 0x54
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569e:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d008      	beq.n	80056be <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e036      	b.n	800572c <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0216 	bic.w	r2, r2, #22
 80056cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056dc:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <HAL_DMA_Abort_PAS+0x5c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0208 	bic.w	r2, r2, #8
 80056fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	223f      	movs	r2, #63	; 0x3f
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005740:	2300      	movs	r3, #0
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b22      	cmp	r3, #34	; 0x22
 8005764:	d128      	bne.n	80057b8 <HAL_UART_DMAStop_PAS+0x80>
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d025      	beq.n	80057b8 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	60fb      	str	r3, [r7, #12]
   return(result);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	61fa      	str	r2, [r7, #28]
 800578e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	617b      	str	r3, [r7, #20]
   return(result);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff70 	bl	8005692 <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ff0a 	bl	80055cc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3728      	adds	r7, #40	; 0x28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057c8:	480d      	ldr	r0, [pc, #52]	; (8005800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057ca:	490e      	ldr	r1, [pc, #56]	; (8005804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057cc:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057d0:	e002      	b.n	80057d8 <LoopCopyDataInit>

080057d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057d6:	3304      	adds	r3, #4

080057d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057dc:	d3f9      	bcc.n	80057d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057de:	4a0b      	ldr	r2, [pc, #44]	; (800580c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057e0:	4c0b      	ldr	r4, [pc, #44]	; (8005810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057e4:	e001      	b.n	80057ea <LoopFillZerobss>

080057e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057e8:	3204      	adds	r2, #4

080057ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057ec:	d3fb      	bcc.n	80057e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057ee:	f7ff f8c7 	bl	8004980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057f2:	f006 f959 	bl	800baa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057f6:	f7fe fc0b 	bl	8004010 <main>
  bx  lr    
 80057fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005804:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005808:	08011070 	.word	0x08011070
  ldr r2, =_sbss
 800580c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005810:	20016180 	.word	0x20016180

08005814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005814:	e7fe      	b.n	8005814 <ADC_IRQHandler>
	...

08005818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_Init+0x40>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <HAL_Init+0x40>)
 8005822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_Init+0x40>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <HAL_Init+0x40>)
 800582e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <HAL_Init+0x40>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a07      	ldr	r2, [pc, #28]	; (8005858 <HAL_Init+0x40>)
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005840:	2003      	movs	r0, #3
 8005842:	f000 fcff 	bl	8006244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005846:	200f      	movs	r0, #15
 8005848:	f000 f808 	bl	800585c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800584c:	f7fe fe28 	bl	80044a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40023c00 	.word	0x40023c00

0800585c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_InitTick+0x54>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <HAL_InitTick+0x58>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	4619      	mov	r1, r3
 800586e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005872:	fbb3 f3f1 	udiv	r3, r3, r1
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fd1b 	bl	80062b6 <HAL_SYSTICK_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e00e      	b.n	80058a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b0f      	cmp	r3, #15
 800588e:	d80a      	bhi.n	80058a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005890:	2200      	movs	r2, #0
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	f000 fcdf 	bl	800625a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800589c:	4a06      	ldr	r2, [pc, #24]	; (80058b8 <HAL_InitTick+0x5c>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e000      	b.n	80058a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	2000000c 	.word	0x2000000c
 80058b4:	20000014 	.word	0x20000014
 80058b8:	20000010 	.word	0x20000010

080058bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_IncTick+0x20>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_IncTick+0x24>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4413      	add	r3, r2
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <HAL_IncTick+0x24>)
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000014 	.word	0x20000014
 80058e0:	20001adc 	.word	0x20001adc

080058e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return uwTick;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_GetTick+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20001adc 	.word	0x20001adc

080058fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e033      	b.n	800597a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fe fdec 	bl	80044f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b00      	cmp	r3, #0
 8005938:	d118      	bne.n	800596c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005942:	f023 0302 	bic.w	r3, r3, #2
 8005946:	f043 0202 	orr.w	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa96 	bl	8005e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	f043 0201 	orr.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
 800596a:	e001      	b.n	8005970 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_ADC_Start+0x1a>
 800599a:	2302      	movs	r3, #2
 800599c:	e097      	b.n	8005ace <HAL_ADC_Start+0x14a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d018      	beq.n	80059e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059c4:	4b45      	ldr	r3, [pc, #276]	; (8005adc <HAL_ADC_Start+0x158>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a45      	ldr	r2, [pc, #276]	; (8005ae0 <HAL_ADC_Start+0x15c>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	0c9a      	lsrs	r2, r3, #18
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80059d8:	e002      	b.n	80059e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	3b01      	subs	r3, #1
 80059de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f9      	bne.n	80059da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d15f      	bne.n	8005ab4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	d106      	bne.n	8005a42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f023 0206 	bic.w	r2, r3, #6
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a40:	e002      	b.n	8005a48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <HAL_ADC_Start+0x160>)
 8005a52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10f      	bne.n	8005a8a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d129      	bne.n	8005acc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	e020      	b.n	8005acc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <HAL_ADC_Start+0x164>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d11b      	bne.n	8005acc <HAL_ADC_Start+0x148>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d114      	bne.n	8005acc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ab0:	609a      	str	r2, [r3, #8]
 8005ab2:	e00b      	b.n	8005acc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f043 0210 	orr.w	r2, r3, #16
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	f043 0201 	orr.w	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c
 8005ae0:	431bde83 	.word	0x431bde83
 8005ae4:	40012300 	.word	0x40012300
 8005ae8:	40012000 	.word	0x40012000

08005aec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d113      	bne.n	8005b32 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b18:	d10b      	bne.n	8005b32 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e063      	b.n	8005bfa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b32:	f7ff fed7 	bl	80058e4 <HAL_GetTick>
 8005b36:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b38:	e021      	b.n	8005b7e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d01d      	beq.n	8005b7e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_ADC_PollForConversion+0x6c>
 8005b48:	f7ff fecc 	bl	80058e4 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d212      	bcs.n	8005b7e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d00b      	beq.n	8005b7e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e03d      	b.n	8005bfa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d1d6      	bne.n	8005b3a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0212 	mvn.w	r2, #18
 8005b94:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d123      	bne.n	8005bf8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11f      	bne.n	8005bf8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d111      	bne.n	8005bf8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f043 0201 	orr.w	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e113      	b.n	8005e60 <HAL_ADC_ConfigChannel+0x244>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d925      	bls.n	8005c94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68d9      	ldr	r1, [r3, #12]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3b1e      	subs	r3, #30
 8005c5e:	2207      	movs	r2, #7
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43da      	mvns	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68d9      	ldr	r1, [r3, #12]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4618      	mov	r0, r3
 8005c80:	4603      	mov	r3, r0
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4403      	add	r3, r0
 8005c86:	3b1e      	subs	r3, #30
 8005c88:	409a      	lsls	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e022      	b.n	8005cda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6919      	ldr	r1, [r3, #16]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	2207      	movs	r2, #7
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6919      	ldr	r1, [r3, #16]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4403      	add	r3, r0
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d824      	bhi.n	8005d2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3b05      	subs	r3, #5
 8005cf4:	221f      	movs	r2, #31
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	400a      	ands	r2, r1
 8005d02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4618      	mov	r0, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3b05      	subs	r3, #5
 8005d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	635a      	str	r2, [r3, #52]	; 0x34
 8005d2a:	e04c      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	d824      	bhi.n	8005d7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	3b23      	subs	r3, #35	; 0x23
 8005d46:	221f      	movs	r2, #31
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43da      	mvns	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	400a      	ands	r2, r1
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	4618      	mov	r0, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3b23      	subs	r3, #35	; 0x23
 8005d70:	fa00 f203 	lsl.w	r2, r0, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d7c:	e023      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3b41      	subs	r3, #65	; 0x41
 8005d90:	221f      	movs	r2, #31
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43da      	mvns	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	400a      	ands	r2, r1
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4618      	mov	r0, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	3b41      	subs	r3, #65	; 0x41
 8005dba:	fa00 f203 	lsl.w	r2, r0, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_ADC_ConfigChannel+0x250>)
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a28      	ldr	r2, [pc, #160]	; (8005e70 <HAL_ADC_ConfigChannel+0x254>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d10f      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x1d8>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b12      	cmp	r3, #18
 8005dda:	d10b      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <HAL_ADC_ConfigChannel+0x254>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d12b      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x23a>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_ADC_ConfigChannel+0x258>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <HAL_ADC_ConfigChannel+0x1f4>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b11      	cmp	r3, #17
 8005e0e:	d122      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <HAL_ADC_ConfigChannel+0x258>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d111      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e32:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <HAL_ADC_ConfigChannel+0x25c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <HAL_ADC_ConfigChannel+0x260>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	0c9a      	lsrs	r2, r3, #18
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e48:	e002      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f9      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40012300 	.word	0x40012300
 8005e70:	40012000 	.word	0x40012000
 8005e74:	10000012 	.word	0x10000012
 8005e78:	2000000c 	.word	0x2000000c
 8005e7c:	431bde83 	.word	0x431bde83

08005e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e88:	4b79      	ldr	r3, [pc, #484]	; (8006070 <ADC_Init+0x1f0>)
 8005e8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6899      	ldr	r1, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	4a58      	ldr	r2, [pc, #352]	; (8006074 <ADC_Init+0x1f4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d022      	beq.n	8005f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6899      	ldr	r1, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6899      	ldr	r1, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	e00f      	b.n	8005f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0202 	bic.w	r2, r2, #2
 8005f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6899      	ldr	r1, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	7e1b      	ldrb	r3, [r3, #24]
 8005f98:	005a      	lsls	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	035a      	lsls	r2, r3, #13
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	e007      	b.n	8005ff4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	3b01      	subs	r3, #1
 8006010:	051a      	lsls	r2, r3, #20
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6899      	ldr	r1, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006036:	025a      	lsls	r2, r3, #9
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	029a      	lsls	r2, r3, #10
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40012300 	.word	0x40012300
 8006074:	0f000001 	.word	0x0f000001

08006078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <__NVIC_SetPriorityGrouping+0x44>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006094:	4013      	ands	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060aa:	4a04      	ldr	r2, [pc, #16]	; (80060bc <__NVIC_SetPriorityGrouping+0x44>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	60d3      	str	r3, [r2, #12]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <__NVIC_GetPriorityGrouping+0x18>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 0307 	and.w	r3, r3, #7
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	db0b      	blt.n	8006106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f003 021f 	and.w	r2, r3, #31
 80060f4:	4907      	ldr	r1, [pc, #28]	; (8006114 <__NVIC_EnableIRQ+0x38>)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2001      	movs	r0, #1
 80060fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	e000e100 	.word	0xe000e100

08006118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006128:	2b00      	cmp	r3, #0
 800612a:	db0a      	blt.n	8006142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	490c      	ldr	r1, [pc, #48]	; (8006164 <__NVIC_SetPriority+0x4c>)
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	0112      	lsls	r2, r2, #4
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	440b      	add	r3, r1
 800613c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006140:	e00a      	b.n	8006158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <__NVIC_SetPriority+0x50>)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	3b04      	subs	r3, #4
 8006150:	0112      	lsls	r2, r2, #4
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	440b      	add	r3, r1
 8006156:	761a      	strb	r2, [r3, #24]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	e000e100 	.word	0xe000e100
 8006168:	e000ed00 	.word	0xe000ed00

0800616c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f1c3 0307 	rsb	r3, r3, #7
 8006186:	2b04      	cmp	r3, #4
 8006188:	bf28      	it	cs
 800618a:	2304      	movcs	r3, #4
 800618c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3304      	adds	r3, #4
 8006192:	2b06      	cmp	r3, #6
 8006194:	d902      	bls.n	800619c <NVIC_EncodePriority+0x30>
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3b03      	subs	r3, #3
 800619a:	e000      	b.n	800619e <NVIC_EncodePriority+0x32>
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43da      	mvns	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	401a      	ands	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061b4:	f04f 31ff 	mov.w	r1, #4294967295
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	fa01 f303 	lsl.w	r3, r1, r3
 80061be:	43d9      	mvns	r1, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061c4:	4313      	orrs	r3, r2
         );
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3724      	adds	r7, #36	; 0x24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80061d8:	f3bf 8f4f 	dsb	sy
}
 80061dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <__NVIC_SystemReset+0x24>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061e6:	4904      	ldr	r1, [pc, #16]	; (80061f8 <__NVIC_SystemReset+0x24>)
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__NVIC_SystemReset+0x28>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80061ee:	f3bf 8f4f 	dsb	sy
}
 80061f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <__NVIC_SystemReset+0x20>
 80061f8:	e000ed00 	.word	0xe000ed00
 80061fc:	05fa0004 	.word	0x05fa0004

08006200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3b01      	subs	r3, #1
 800620c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006210:	d301      	bcc.n	8006216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006212:	2301      	movs	r3, #1
 8006214:	e00f      	b.n	8006236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006216:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <SysTick_Config+0x40>)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3b01      	subs	r3, #1
 800621c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800621e:	210f      	movs	r1, #15
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	f7ff ff78 	bl	8006118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <SysTick_Config+0x40>)
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800622e:	4b04      	ldr	r3, [pc, #16]	; (8006240 <SysTick_Config+0x40>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010

08006244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ff13 	bl	8006078 <__NVIC_SetPriorityGrouping>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	4603      	mov	r3, r0
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800626c:	f7ff ff28 	bl	80060c0 <__NVIC_GetPriorityGrouping>
 8006270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	6978      	ldr	r0, [r7, #20]
 8006278:	f7ff ff78 	bl	800616c <NVIC_EncodePriority>
 800627c:	4602      	mov	r2, r0
 800627e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006282:	4611      	mov	r1, r2
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff ff47 	bl	8006118 <__NVIC_SetPriority>
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	4603      	mov	r3, r0
 800629a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800629c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ff1b 	bl	80060dc <__NVIC_EnableIRQ>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80062b2:	f7ff ff8f 	bl	80061d4 <__NVIC_SystemReset>

080062b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ff9e 	bl	8006200 <SysTick_Config>
 80062c4:	4603      	mov	r3, r0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062dc:	f7ff fb02 	bl	80058e4 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e099      	b.n	8006420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800630c:	e00f      	b.n	800632e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800630e:	f7ff fae9 	bl	80058e4 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b05      	cmp	r3, #5
 800631a:	d908      	bls.n	800632e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2203      	movs	r2, #3
 8006326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e078      	b.n	8006420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e8      	bne.n	800630e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4b38      	ldr	r3, [pc, #224]	; (8006428 <HAL_DMA_Init+0x158>)
 8006348:	4013      	ands	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800635a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2b04      	cmp	r3, #4
 8006386:	d107      	bne.n	8006398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	4313      	orrs	r3, r2
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d117      	bne.n	80063f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00e      	beq.n	80063f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fadf 	bl	8006998 <DMA_CheckFifoParam>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2240      	movs	r2, #64	; 0x40
 80063e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063ee:	2301      	movs	r3, #1
 80063f0:	e016      	b.n	8006420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa96 	bl	800692c <DMA_CalcBaseAndBitshift>
 8006400:	4603      	mov	r3, r0
 8006402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	223f      	movs	r2, #63	; 0x3f
 800640a:	409a      	lsls	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	f010803f 	.word	0xf010803f

0800642c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_DMA_Start_IT+0x26>
 800644e:	2302      	movs	r3, #2
 8006450:	e040      	b.n	80064d4 <HAL_DMA_Start_IT+0xa8>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d12f      	bne.n	80064c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fa28 	bl	80068d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006484:	223f      	movs	r2, #63	; 0x3f
 8006486:	409a      	lsls	r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0216 	orr.w	r2, r2, #22
 800649a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0208 	orr.w	r2, r2, #8
 80064b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e005      	b.n	80064d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
 80064d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064ea:	f7ff f9fb 	bl	80058e4 <HAL_GetTick>
 80064ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d008      	beq.n	800650e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2280      	movs	r2, #128	; 0x80
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e052      	b.n	80065b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0216 	bic.w	r2, r2, #22
 800651c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800652c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_DMA_Abort+0x62>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0208 	bic.w	r2, r2, #8
 800654c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800655e:	e013      	b.n	8006588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006560:	f7ff f9c0 	bl	80058e4 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b05      	cmp	r3, #5
 800656c:	d90c      	bls.n	8006588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2203      	movs	r2, #3
 8006578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e015      	b.n	80065b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e4      	bne.n	8006560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	223f      	movs	r2, #63	; 0x3f
 800659c:	409a      	lsls	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065c8:	4b8e      	ldr	r3, [pc, #568]	; (8006804 <HAL_DMA_IRQHandler+0x248>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a8e      	ldr	r2, [pc, #568]	; (8006808 <HAL_DMA_IRQHandler+0x24c>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	0a9b      	lsrs	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e6:	2208      	movs	r2, #8
 80065e8:	409a      	lsls	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01a      	beq.n	8006628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0204 	bic.w	r2, r2, #4
 800660e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	2208      	movs	r2, #8
 8006616:	409a      	lsls	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	f043 0201 	orr.w	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	2201      	movs	r2, #1
 800662e:	409a      	lsls	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d012      	beq.n	800665e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	2201      	movs	r2, #1
 800664c:	409a      	lsls	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f043 0202 	orr.w	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006662:	2204      	movs	r2, #4
 8006664:	409a      	lsls	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4013      	ands	r3, r2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006680:	2204      	movs	r2, #4
 8006682:	409a      	lsls	r2, r3
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	f043 0204 	orr.w	r2, r3, #4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	2210      	movs	r2, #16
 800669a:	409a      	lsls	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d043      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d03c      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b6:	2210      	movs	r2, #16
 80066b8:	409a      	lsls	r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d018      	beq.n	80066fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d108      	bne.n	80066ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d024      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e01f      	b.n	800672c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
 80066fc:	e016      	b.n	800672c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0208 	bic.w	r2, r2, #8
 800671a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006730:	2220      	movs	r2, #32
 8006732:	409a      	lsls	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 808f 	beq.w	800685c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8087 	beq.w	800685c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006752:	2220      	movs	r2, #32
 8006754:	409a      	lsls	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b05      	cmp	r3, #5
 8006764:	d136      	bne.n	80067d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0216 	bic.w	r2, r2, #22
 8006774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <HAL_DMA_IRQHandler+0x1da>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0208 	bic.w	r2, r2, #8
 80067a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	223f      	movs	r2, #63	; 0x3f
 80067ac:	409a      	lsls	r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d07e      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
        }
        return;
 80067d2:	e079      	b.n	80068c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01d      	beq.n	800681e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10d      	bne.n	800680c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d031      	beq.n	800685c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
 8006800:	e02c      	b.n	800685c <HAL_DMA_IRQHandler+0x2a0>
 8006802:	bf00      	nop
 8006804:	2000000c 	.word	0x2000000c
 8006808:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d023      	beq.n	800685c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
 800681c:	e01e      	b.n	800685c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10f      	bne.n	800684c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0210 	bic.w	r2, r2, #16
 800683a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	2b00      	cmp	r3, #0
 8006862:	d032      	beq.n	80068ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d022      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2205      	movs	r2, #5
 8006874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0201 	bic.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3301      	adds	r3, #1
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	429a      	cmp	r2, r3
 8006892:	d307      	bcc.n	80068a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f2      	bne.n	8006888 <HAL_DMA_IRQHandler+0x2cc>
 80068a2:	e000      	b.n	80068a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
 80068c6:	e000      	b.n	80068ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80068c8:	bf00      	nop
    }
  }
}
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d108      	bne.n	8006910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800690e:	e007      	b.n	8006920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	3b10      	subs	r3, #16
 800693c:	4a14      	ldr	r2, [pc, #80]	; (8006990 <DMA_CalcBaseAndBitshift+0x64>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	091b      	lsrs	r3, r3, #4
 8006944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006946:	4a13      	ldr	r2, [pc, #76]	; (8006994 <DMA_CalcBaseAndBitshift+0x68>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d909      	bls.n	800696e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	1d1a      	adds	r2, r3, #4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	659a      	str	r2, [r3, #88]	; 0x58
 800696c:	e007      	b.n	800697e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	aaaaaaab 	.word	0xaaaaaaab
 8006994:	08010b58 	.word	0x08010b58

08006998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d11f      	bne.n	80069f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d856      	bhi.n	8006a66 <DMA_CheckFifoParam+0xce>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <DMA_CheckFifoParam+0x28>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069d1 	.word	0x080069d1
 80069cc:	08006a67 	.word	0x08006a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d046      	beq.n	8006a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e0:	e043      	b.n	8006a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069ea:	d140      	bne.n	8006a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f0:	e03d      	b.n	8006a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	d121      	bne.n	8006a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d837      	bhi.n	8006a72 <DMA_CheckFifoParam+0xda>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <DMA_CheckFifoParam+0x70>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a1f 	.word	0x08006a1f
 8006a10:	08006a19 	.word	0x08006a19
 8006a14:	08006a31 	.word	0x08006a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1c:	e030      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d025      	beq.n	8006a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a2e:	e022      	b.n	8006a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a38:	d11f      	bne.n	8006a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a3e:	e01c      	b.n	8006a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d903      	bls.n	8006a4e <DMA_CheckFifoParam+0xb6>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d003      	beq.n	8006a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a4c:	e018      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
      break;
 8006a52:	e015      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00e      	beq.n	8006a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
      break;
 8006a64:	e00b      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;
 8006a66:	bf00      	nop
 8006a68:	e00a      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e008      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e006      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      break;
 8006a72:	bf00      	nop
 8006a74:	e004      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <DMA_CheckFifoParam+0xe8>
      break;
 8006a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop

08006a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b089      	sub	sp, #36	; 0x24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	e159      	b.n	8006d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006aac:	2201      	movs	r2, #1
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4013      	ands	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	f040 8148 	bne.w	8006d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d005      	beq.n	8006ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d130      	bne.n	8006b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	2203      	movs	r2, #3
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b18:	2201      	movs	r2, #1
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	f003 0201 	and.w	r2, r3, #1
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d017      	beq.n	8006b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	43db      	mvns	r3, r3
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4013      	ands	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d123      	bne.n	8006bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	08da      	lsrs	r2, r3, #3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3208      	adds	r2, #8
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	220f      	movs	r2, #15
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	08da      	lsrs	r2, r3, #3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3208      	adds	r2, #8
 8006bce:	69b9      	ldr	r1, [r7, #24]
 8006bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	2203      	movs	r2, #3
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	43db      	mvns	r3, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 0203 	and.w	r2, r3, #3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80a2 	beq.w	8006d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	4b57      	ldr	r3, [pc, #348]	; (8006d78 <HAL_GPIO_Init+0x2e8>)
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	4a56      	ldr	r2, [pc, #344]	; (8006d78 <HAL_GPIO_Init+0x2e8>)
 8006c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c24:	6453      	str	r3, [r2, #68]	; 0x44
 8006c26:	4b54      	ldr	r3, [pc, #336]	; (8006d78 <HAL_GPIO_Init+0x2e8>)
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c32:	4a52      	ldr	r2, [pc, #328]	; (8006d7c <HAL_GPIO_Init+0x2ec>)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	089b      	lsrs	r3, r3, #2
 8006c38:	3302      	adds	r3, #2
 8006c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	220f      	movs	r2, #15
 8006c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	4013      	ands	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a49      	ldr	r2, [pc, #292]	; (8006d80 <HAL_GPIO_Init+0x2f0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d019      	beq.n	8006c92 <HAL_GPIO_Init+0x202>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a48      	ldr	r2, [pc, #288]	; (8006d84 <HAL_GPIO_Init+0x2f4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <HAL_GPIO_Init+0x1fe>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a47      	ldr	r2, [pc, #284]	; (8006d88 <HAL_GPIO_Init+0x2f8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00d      	beq.n	8006c8a <HAL_GPIO_Init+0x1fa>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a46      	ldr	r2, [pc, #280]	; (8006d8c <HAL_GPIO_Init+0x2fc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <HAL_GPIO_Init+0x1f6>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a45      	ldr	r2, [pc, #276]	; (8006d90 <HAL_GPIO_Init+0x300>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <HAL_GPIO_Init+0x1f2>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	e008      	b.n	8006c94 <HAL_GPIO_Init+0x204>
 8006c82:	2307      	movs	r3, #7
 8006c84:	e006      	b.n	8006c94 <HAL_GPIO_Init+0x204>
 8006c86:	2303      	movs	r3, #3
 8006c88:	e004      	b.n	8006c94 <HAL_GPIO_Init+0x204>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e002      	b.n	8006c94 <HAL_GPIO_Init+0x204>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <HAL_GPIO_Init+0x204>
 8006c92:	2300      	movs	r3, #0
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	f002 0203 	and.w	r2, r2, #3
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	4093      	lsls	r3, r2
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ca4:	4935      	ldr	r1, [pc, #212]	; (8006d7c <HAL_GPIO_Init+0x2ec>)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	089b      	lsrs	r3, r3, #2
 8006caa:	3302      	adds	r3, #2
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cb2:	4b38      	ldr	r3, [pc, #224]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cd6:	4a2f      	ldr	r2, [pc, #188]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cdc:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d00:	4a24      	ldr	r2, [pc, #144]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	43db      	mvns	r3, r3
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	4013      	ands	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d30:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d54:	4a0f      	ldr	r2, [pc, #60]	; (8006d94 <HAL_GPIO_Init+0x304>)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b0f      	cmp	r3, #15
 8006d64:	f67f aea2 	bls.w	8006aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3724      	adds	r7, #36	; 0x24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	40013800 	.word	0x40013800
 8006d80:	40020000 	.word	0x40020000
 8006d84:	40020400 	.word	0x40020400
 8006d88:	40020800 	.word	0x40020800
 8006d8c:	40020c00 	.word	0x40020c00
 8006d90:	40021000 	.word	0x40021000
 8006d94:	40013c00 	.word	0x40013c00

08006d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	887b      	ldrh	r3, [r7, #2]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e001      	b.n	8006dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	807b      	strh	r3, [r7, #2]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006dd8:	787b      	ldrb	r3, [r7, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006de4:	e003      	b.n	8006dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006de6:	887b      	ldrh	r3, [r7, #2]
 8006de8:	041a      	lsls	r2, r3, #16
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	619a      	str	r2, [r3, #24]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e267      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d075      	beq.n	8006f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e1a:	4b88      	ldr	r3, [pc, #544]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d00c      	beq.n	8006e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e26:	4b85      	ldr	r3, [pc, #532]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d112      	bne.n	8006e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e32:	4b82      	ldr	r3, [pc, #520]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e3e:	d10b      	bne.n	8006e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e40:	4b7e      	ldr	r3, [pc, #504]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d05b      	beq.n	8006f04 <HAL_RCC_OscConfig+0x108>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d157      	bne.n	8006f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e242      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e60:	d106      	bne.n	8006e70 <HAL_RCC_OscConfig+0x74>
 8006e62:	4b76      	ldr	r3, [pc, #472]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a75      	ldr	r2, [pc, #468]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e01d      	b.n	8006eac <HAL_RCC_OscConfig+0xb0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e78:	d10c      	bne.n	8006e94 <HAL_RCC_OscConfig+0x98>
 8006e7a:	4b70      	ldr	r3, [pc, #448]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a6f      	ldr	r2, [pc, #444]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	4b6d      	ldr	r3, [pc, #436]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6c      	ldr	r2, [pc, #432]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e00b      	b.n	8006eac <HAL_RCC_OscConfig+0xb0>
 8006e94:	4b69      	ldr	r3, [pc, #420]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a68      	ldr	r2, [pc, #416]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	4b66      	ldr	r3, [pc, #408]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a65      	ldr	r2, [pc, #404]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d013      	beq.n	8006edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb4:	f7fe fd16 	bl	80058e4 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ebc:	f7fe fd12 	bl	80058e4 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b64      	cmp	r3, #100	; 0x64
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e207      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ece:	4b5b      	ldr	r3, [pc, #364]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0xc0>
 8006eda:	e014      	b.n	8006f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006edc:	f7fe fd02 	bl	80058e4 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ee4:	f7fe fcfe 	bl	80058e4 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b64      	cmp	r3, #100	; 0x64
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e1f3      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ef6:	4b51      	ldr	r3, [pc, #324]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0xe8>
 8006f02:	e000      	b.n	8006f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d063      	beq.n	8006fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f12:	4b4a      	ldr	r3, [pc, #296]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 030c 	and.w	r3, r3, #12
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f1e:	4b47      	ldr	r3, [pc, #284]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d11c      	bne.n	8006f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f2a:	4b44      	ldr	r3, [pc, #272]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d116      	bne.n	8006f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f36:	4b41      	ldr	r3, [pc, #260]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_RCC_OscConfig+0x152>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d001      	beq.n	8006f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e1c7      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4e:	4b3b      	ldr	r3, [pc, #236]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4937      	ldr	r1, [pc, #220]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f62:	e03a      	b.n	8006fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f6c:	4b34      	ldr	r3, [pc, #208]	; (8007040 <HAL_RCC_OscConfig+0x244>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f72:	f7fe fcb7 	bl	80058e4 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f7a:	f7fe fcb3 	bl	80058e4 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e1a8      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f0      	beq.n	8006f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f98:	4b28      	ldr	r3, [pc, #160]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	4925      	ldr	r1, [pc, #148]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	e015      	b.n	8006fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fae:	4b24      	ldr	r3, [pc, #144]	; (8007040 <HAL_RCC_OscConfig+0x244>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fe fc96 	bl	80058e4 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fbc:	f7fe fc92 	bl	80058e4 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e187      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fce:	4b1b      	ldr	r3, [pc, #108]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d036      	beq.n	8007054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d016      	beq.n	800701c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_RCC_OscConfig+0x248>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff4:	f7fe fc76 	bl	80058e4 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ffc:	f7fe fc72 	bl	80058e4 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e167      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_RCC_OscConfig+0x240>)
 8007010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x200>
 800701a:	e01b      	b.n	8007054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_OscConfig+0x248>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007022:	f7fe fc5f 	bl	80058e4 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007028:	e00e      	b.n	8007048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800702a:	f7fe fc5b 	bl	80058e4 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d907      	bls.n	8007048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e150      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
 800703c:	40023800 	.word	0x40023800
 8007040:	42470000 	.word	0x42470000
 8007044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007048:	4b88      	ldr	r3, [pc, #544]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800704a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ea      	bne.n	800702a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8097 	beq.w	8007190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007066:	4b81      	ldr	r3, [pc, #516]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10f      	bne.n	8007092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	4b7d      	ldr	r3, [pc, #500]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	4a7c      	ldr	r2, [pc, #496]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800707c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007080:	6413      	str	r3, [r2, #64]	; 0x40
 8007082:	4b7a      	ldr	r3, [pc, #488]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708a:	60bb      	str	r3, [r7, #8]
 800708c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800708e:	2301      	movs	r3, #1
 8007090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007092:	4b77      	ldr	r3, [pc, #476]	; (8007270 <HAL_RCC_OscConfig+0x474>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709a:	2b00      	cmp	r3, #0
 800709c:	d118      	bne.n	80070d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800709e:	4b74      	ldr	r3, [pc, #464]	; (8007270 <HAL_RCC_OscConfig+0x474>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a73      	ldr	r2, [pc, #460]	; (8007270 <HAL_RCC_OscConfig+0x474>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070aa:	f7fe fc1b 	bl	80058e4 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070b2:	f7fe fc17 	bl	80058e4 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e10c      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c4:	4b6a      	ldr	r3, [pc, #424]	; (8007270 <HAL_RCC_OscConfig+0x474>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d106      	bne.n	80070e6 <HAL_RCC_OscConfig+0x2ea>
 80070d8:	4b64      	ldr	r3, [pc, #400]	; (800726c <HAL_RCC_OscConfig+0x470>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	4a63      	ldr	r2, [pc, #396]	; (800726c <HAL_RCC_OscConfig+0x470>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6713      	str	r3, [r2, #112]	; 0x70
 80070e4:	e01c      	b.n	8007120 <HAL_RCC_OscConfig+0x324>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d10c      	bne.n	8007108 <HAL_RCC_OscConfig+0x30c>
 80070ee:	4b5f      	ldr	r3, [pc, #380]	; (800726c <HAL_RCC_OscConfig+0x470>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	4a5e      	ldr	r2, [pc, #376]	; (800726c <HAL_RCC_OscConfig+0x470>)
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	6713      	str	r3, [r2, #112]	; 0x70
 80070fa:	4b5c      	ldr	r3, [pc, #368]	; (800726c <HAL_RCC_OscConfig+0x470>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	4a5b      	ldr	r2, [pc, #364]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	6713      	str	r3, [r2, #112]	; 0x70
 8007106:	e00b      	b.n	8007120 <HAL_RCC_OscConfig+0x324>
 8007108:	4b58      	ldr	r3, [pc, #352]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	4a57      	ldr	r2, [pc, #348]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	; 0x70
 8007114:	4b55      	ldr	r3, [pc, #340]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007118:	4a54      	ldr	r2, [pc, #336]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800711a:	f023 0304 	bic.w	r3, r3, #4
 800711e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fe fbdc 	bl	80058e4 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007130:	f7fe fbd8 	bl	80058e4 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0cb      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007146:	4b49      	ldr	r3, [pc, #292]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0ee      	beq.n	8007130 <HAL_RCC_OscConfig+0x334>
 8007152:	e014      	b.n	800717e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007154:	f7fe fbc6 	bl	80058e4 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800715a:	e00a      	b.n	8007172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800715c:	f7fe fbc2 	bl	80058e4 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f241 3288 	movw	r2, #5000	; 0x1388
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e0b5      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007172:	4b3e      	ldr	r3, [pc, #248]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1ee      	bne.n	800715c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d105      	bne.n	8007190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007184:	4b39      	ldr	r3, [pc, #228]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	4a38      	ldr	r2, [pc, #224]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800718a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800718e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a1 	beq.w	80072dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800719a:	4b34      	ldr	r3, [pc, #208]	; (800726c <HAL_RCC_OscConfig+0x470>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 030c 	and.w	r3, r3, #12
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d05c      	beq.n	8007260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d141      	bne.n	8007232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	4b31      	ldr	r3, [pc, #196]	; (8007274 <HAL_RCC_OscConfig+0x478>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fe fb96 	bl	80058e4 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fe fb92 	bl	80058e4 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e087      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	4b27      	ldr	r3, [pc, #156]	; (800726c <HAL_RCC_OscConfig+0x470>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69da      	ldr	r2, [r3, #28]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	3b01      	subs	r3, #1
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	491b      	ldr	r1, [pc, #108]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007200:	4313      	orrs	r3, r2
 8007202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <HAL_RCC_OscConfig+0x478>)
 8007206:	2201      	movs	r2, #1
 8007208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720a:	f7fe fb6b 	bl	80058e4 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007212:	f7fe fb67 	bl	80058e4 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e05c      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007224:	4b11      	ldr	r3, [pc, #68]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <HAL_RCC_OscConfig+0x416>
 8007230:	e054      	b.n	80072dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <HAL_RCC_OscConfig+0x478>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007238:	f7fe fb54 	bl	80058e4 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007240:	f7fe fb50 	bl	80058e4 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e045      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <HAL_RCC_OscConfig+0x470>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0x444>
 800725e:	e03d      	b.n	80072dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d107      	bne.n	8007278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e038      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
 800726c:	40023800 	.word	0x40023800
 8007270:	40007000 	.word	0x40007000
 8007274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007278:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <HAL_RCC_OscConfig+0x4ec>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d028      	beq.n	80072d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d121      	bne.n	80072d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729e:	429a      	cmp	r2, r3
 80072a0:	d11a      	bne.n	80072d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072a8:	4013      	ands	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d111      	bne.n	80072d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	3b01      	subs	r3, #1
 80072c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d107      	bne.n	80072d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d001      	beq.n	80072dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800

080072ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0cc      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007300:	4b68      	ldr	r3, [pc, #416]	; (80074a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d90c      	bls.n	8007328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730e:	4b65      	ldr	r3, [pc, #404]	; (80074a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b63      	ldr	r3, [pc, #396]	; (80074a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0b8      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d020      	beq.n	8007376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007340:	4b59      	ldr	r3, [pc, #356]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	4a58      	ldr	r2, [pc, #352]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800734a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007358:	4b53      	ldr	r3, [pc, #332]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	4a52      	ldr	r2, [pc, #328]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007364:	4b50      	ldr	r3, [pc, #320]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	494d      	ldr	r1, [pc, #308]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d044      	beq.n	800740c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d107      	bne.n	800739a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800738a:	4b47      	ldr	r3, [pc, #284]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d119      	bne.n	80073ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e07f      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d003      	beq.n	80073aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d107      	bne.n	80073ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073aa:	4b3f      	ldr	r3, [pc, #252]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e06f      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ba:	4b3b      	ldr	r3, [pc, #236]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e067      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ca:	4b37      	ldr	r3, [pc, #220]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f023 0203 	bic.w	r2, r3, #3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4934      	ldr	r1, [pc, #208]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073dc:	f7fe fa82 	bl	80058e4 <HAL_GetTick>
 80073e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073e2:	e00a      	b.n	80073fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e4:	f7fe fa7e 	bl	80058e4 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e04f      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fa:	4b2b      	ldr	r3, [pc, #172]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 020c 	and.w	r2, r3, #12
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	429a      	cmp	r2, r3
 800740a:	d1eb      	bne.n	80073e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800740c:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <HAL_RCC_ClockConfig+0x1b8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d20c      	bcs.n	8007434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800741a:	4b22      	ldr	r3, [pc, #136]	; (80074a4 <HAL_RCC_ClockConfig+0x1b8>)
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007422:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e032      	b.n	800749a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4916      	ldr	r1, [pc, #88]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 800744e:	4313      	orrs	r3, r2
 8007450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	490e      	ldr	r1, [pc, #56]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007472:	f000 f821 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8007476:	4602      	mov	r2, r0
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <HAL_RCC_ClockConfig+0x1bc>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	490a      	ldr	r1, [pc, #40]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 8007484:	5ccb      	ldrb	r3, [r1, r3]
 8007486:	fa22 f303 	lsr.w	r3, r2, r3
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 800748c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe f9e2 	bl	800585c <HAL_InitTick>

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40023c00 	.word	0x40023c00
 80074a8:	40023800 	.word	0x40023800
 80074ac:	08010b40 	.word	0x08010b40
 80074b0:	2000000c 	.word	0x2000000c
 80074b4:	20000010 	.word	0x20000010

080074b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074bc:	b094      	sub	sp, #80	; 0x50
 80074be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	647b      	str	r3, [r7, #68]	; 0x44
 80074c4:	2300      	movs	r3, #0
 80074c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c8:	2300      	movs	r3, #0
 80074ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074d0:	4b79      	ldr	r3, [pc, #484]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 030c 	and.w	r3, r3, #12
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d00d      	beq.n	80074f8 <HAL_RCC_GetSysClockFreq+0x40>
 80074dc:	2b08      	cmp	r3, #8
 80074de:	f200 80e1 	bhi.w	80076a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_RCC_GetSysClockFreq+0x34>
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d003      	beq.n	80074f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80074ea:	e0db      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074ec:	4b73      	ldr	r3, [pc, #460]	; (80076bc <HAL_RCC_GetSysClockFreq+0x204>)
 80074ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80074f0:	e0db      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074f2:	4b73      	ldr	r3, [pc, #460]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80074f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074f6:	e0d8      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074f8:	4b6f      	ldr	r3, [pc, #444]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007500:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007502:	4b6d      	ldr	r3, [pc, #436]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d063      	beq.n	80075d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800750e:	4b6a      	ldr	r3, [pc, #424]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	099b      	lsrs	r3, r3, #6
 8007514:	2200      	movs	r2, #0
 8007516:	63bb      	str	r3, [r7, #56]	; 0x38
 8007518:	63fa      	str	r2, [r7, #60]	; 0x3c
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800752a:	4622      	mov	r2, r4
 800752c:	462b      	mov	r3, r5
 800752e:	f04f 0000 	mov.w	r0, #0
 8007532:	f04f 0100 	mov.w	r1, #0
 8007536:	0159      	lsls	r1, r3, #5
 8007538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800753c:	0150      	lsls	r0, r2, #5
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4621      	mov	r1, r4
 8007544:	1a51      	subs	r1, r2, r1
 8007546:	6139      	str	r1, [r7, #16]
 8007548:	4629      	mov	r1, r5
 800754a:	eb63 0301 	sbc.w	r3, r3, r1
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800755c:	4659      	mov	r1, fp
 800755e:	018b      	lsls	r3, r1, #6
 8007560:	4651      	mov	r1, sl
 8007562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007566:	4651      	mov	r1, sl
 8007568:	018a      	lsls	r2, r1, #6
 800756a:	4651      	mov	r1, sl
 800756c:	ebb2 0801 	subs.w	r8, r2, r1
 8007570:	4659      	mov	r1, fp
 8007572:	eb63 0901 	sbc.w	r9, r3, r1
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800758a:	4690      	mov	r8, r2
 800758c:	4699      	mov	r9, r3
 800758e:	4623      	mov	r3, r4
 8007590:	eb18 0303 	adds.w	r3, r8, r3
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	462b      	mov	r3, r5
 8007598:	eb49 0303 	adc.w	r3, r9, r3
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075aa:	4629      	mov	r1, r5
 80075ac:	024b      	lsls	r3, r1, #9
 80075ae:	4621      	mov	r1, r4
 80075b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80075b4:	4621      	mov	r1, r4
 80075b6:	024a      	lsls	r2, r1, #9
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075be:	2200      	movs	r2, #0
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075c8:	f7f9 fb76 	bl	8000cb8 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4613      	mov	r3, r2
 80075d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d4:	e058      	b.n	8007688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075d6:	4b38      	ldr	r3, [pc, #224]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	099b      	lsrs	r3, r3, #6
 80075dc:	2200      	movs	r2, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	4611      	mov	r1, r2
 80075e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80075e6:	623b      	str	r3, [r7, #32]
 80075e8:	2300      	movs	r3, #0
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
 80075ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075f0:	4642      	mov	r2, r8
 80075f2:	464b      	mov	r3, r9
 80075f4:	f04f 0000 	mov.w	r0, #0
 80075f8:	f04f 0100 	mov.w	r1, #0
 80075fc:	0159      	lsls	r1, r3, #5
 80075fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007602:	0150      	lsls	r0, r2, #5
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4641      	mov	r1, r8
 800760a:	ebb2 0a01 	subs.w	sl, r2, r1
 800760e:	4649      	mov	r1, r9
 8007610:	eb63 0b01 	sbc.w	fp, r3, r1
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007628:	ebb2 040a 	subs.w	r4, r2, sl
 800762c:	eb63 050b 	sbc.w	r5, r3, fp
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	00eb      	lsls	r3, r5, #3
 800763a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800763e:	00e2      	lsls	r2, r4, #3
 8007640:	4614      	mov	r4, r2
 8007642:	461d      	mov	r5, r3
 8007644:	4643      	mov	r3, r8
 8007646:	18e3      	adds	r3, r4, r3
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	464b      	mov	r3, r9
 800764c:	eb45 0303 	adc.w	r3, r5, r3
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800765e:	4629      	mov	r1, r5
 8007660:	028b      	lsls	r3, r1, #10
 8007662:	4621      	mov	r1, r4
 8007664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007668:	4621      	mov	r1, r4
 800766a:	028a      	lsls	r2, r1, #10
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007672:	2200      	movs	r2, #0
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	61fa      	str	r2, [r7, #28]
 8007678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800767c:	f7f9 fb1c 	bl	8000cb8 <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4613      	mov	r3, r2
 8007686:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	3301      	adds	r3, #1
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800769a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076a2:	e002      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_RCC_GetSysClockFreq+0x204>)
 80076a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3750      	adds	r7, #80	; 0x50
 80076b0:	46bd      	mov	sp, r7
 80076b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076b6:	bf00      	nop
 80076b8:	40023800 	.word	0x40023800
 80076bc:	00f42400 	.word	0x00f42400
 80076c0:	007a1200 	.word	0x007a1200

080076c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076c8:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80076ca:	681b      	ldr	r3, [r3, #0]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	2000000c 	.word	0x2000000c

080076dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076e0:	f7ff fff0 	bl	80076c4 <HAL_RCC_GetHCLKFreq>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	0a9b      	lsrs	r3, r3, #10
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4903      	ldr	r1, [pc, #12]	; (8007700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076f2:	5ccb      	ldrb	r3, [r1, r3]
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40023800 	.word	0x40023800
 8007700:	08010b50 	.word	0x08010b50

08007704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007708:	f7ff ffdc 	bl	80076c4 <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	0b5b      	lsrs	r3, r3, #13
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4903      	ldr	r1, [pc, #12]	; (8007728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40023800 	.word	0x40023800
 8007728:	08010b50 	.word	0x08010b50

0800772c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e03f      	b.n	80077be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fc ff14 	bl	8004580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2224      	movs	r2, #36	; 0x24
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800776e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fd11 	bl	8008198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b08a      	sub	sp, #40	; 0x28
 80077ca:	af02      	add	r7, sp, #8
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d17c      	bne.n	80078e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_UART_Transmit+0x2c>
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e075      	b.n	80078e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Transmit+0x3e>
 8007800:	2302      	movs	r3, #2
 8007802:	e06e      	b.n	80078e2 <HAL_UART_Transmit+0x11c>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2221      	movs	r2, #33	; 0x21
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800781a:	f7fe f863 	bl	80058e4 <HAL_GetTick>
 800781e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007834:	d108      	bne.n	8007848 <HAL_UART_Transmit+0x82>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	e003      	b.n	8007850 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007858:	e02a      	b.n	80078b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 faff 	bl	8007e68 <UART_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e036      	b.n	80078e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	3302      	adds	r3, #2
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	e007      	b.n	80078a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	3301      	adds	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1cf      	bne.n	800785a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2200      	movs	r2, #0
 80078c2:	2140      	movs	r1, #64	; 0x40
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 facf 	bl	8007e68 <UART_WaitOnFlagUntilTimeout>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e006      	b.n	80078e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e000      	b.n	80078e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078e0:	2302      	movs	r3, #2
  }
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	; 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b20      	cmp	r3, #32
 8007904:	d165      	bne.n	80079d2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_UART_Transmit_DMA+0x26>
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e05e      	b.n	80079d4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_UART_Transmit_DMA+0x38>
 8007920:	2302      	movs	r3, #2
 8007922:	e057      	b.n	80079d4 <HAL_UART_Transmit_DMA+0xe8>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2221      	movs	r2, #33	; 0x21
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007950:	4a22      	ldr	r2, [pc, #136]	; (80079dc <HAL_UART_Transmit_DMA+0xf0>)
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007958:	4a21      	ldr	r2, [pc, #132]	; (80079e0 <HAL_UART_Transmit_DMA+0xf4>)
 800795a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_UART_Transmit_DMA+0xf8>)
 8007962:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007968:	2200      	movs	r2, #0
 800796a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	6819      	ldr	r1, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3304      	adds	r3, #4
 8007980:	461a      	mov	r2, r3
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	f7fe fd52 	bl	800642c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007990:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3314      	adds	r3, #20
 80079a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	617b      	str	r3, [r7, #20]
   return(result);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3314      	adds	r3, #20
 80079b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ba:	627a      	str	r2, [r7, #36]	; 0x24
 80079bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6a39      	ldr	r1, [r7, #32]
 80079c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e5      	bne.n	800799a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e000      	b.n	80079d4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3730      	adds	r7, #48	; 0x30
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	08007bc3 	.word	0x08007bc3
 80079e0:	08007c5d 	.word	0x08007c5d
 80079e4:	08007dd5 	.word	0x08007dd5

080079e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d11d      	bne.n	8007a3e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_UART_Receive_DMA+0x26>
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e016      	b.n	8007a40 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_UART_Receive_DMA+0x38>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e00f      	b.n	8007a40 <HAL_UART_Receive_DMA+0x58>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	461a      	mov	r2, r3
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fa85 	bl	8007f44 <UART_Start_Receive_DMA>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a3e:	2302      	movs	r3, #2
  }
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b090      	sub	sp, #64	; 0x40
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5e:	2b80      	cmp	r3, #128	; 0x80
 8007a60:	bf0c      	ite	eq
 8007a62:	2301      	moveq	r3, #1
 8007a64:	2300      	movne	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b21      	cmp	r3, #33	; 0x21
 8007a74:	d128      	bne.n	8007ac8 <HAL_UART_DMAStop+0x80>
 8007a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d025      	beq.n	8007ac8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3314      	adds	r3, #20
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e5      	bne.n	8007a7c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fd0d 	bl	80064dc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fadc 	bl	8008080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b22      	cmp	r3, #34	; 0x22
 8007ae8:	d128      	bne.n	8007b3c <HAL_UART_DMAStop+0xf4>
 8007aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d025      	beq.n	8007b3c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b10:	61fa      	str	r2, [r7, #28]
 8007b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	69b9      	ldr	r1, [r7, #24]
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e5      	bne.n	8007af0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fcd3 	bl	80064dc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 faca 	bl	80080d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3740      	adds	r7, #64	; 0x40
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b090      	sub	sp, #64	; 0x40
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d137      	bne.n	8007c4e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be0:	2200      	movs	r2, #0
 8007be2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3314      	adds	r3, #20
 8007c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c04:	633a      	str	r2, [r7, #48]	; 0x30
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	330c      	adds	r3, #12
 8007c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c38:	61fa      	str	r2, [r7, #28]
 8007c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	69b9      	ldr	r1, [r7, #24]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	617b      	str	r3, [r7, #20]
   return(result);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e5      	bne.n	8007c18 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c4c:	e002      	b.n	8007c54 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c50:	f7ff ff79 	bl	8007b46 <HAL_UART_TxCpltCallback>
}
 8007c54:	bf00      	nop
 8007c56:	3740      	adds	r7, #64	; 0x40
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff ff75 	bl	8007b5a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b09c      	sub	sp, #112	; 0x70
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d172      	bne.n	8007d7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c96:	2200      	movs	r2, #0
 8007c98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cba:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cee:	647a      	str	r2, [r7, #68]	; 0x44
 8007cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	623b      	str	r3, [r7, #32]
   return(result);
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d18:	663b      	str	r3, [r7, #96]	; 0x60
 8007d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d22:	633a      	str	r2, [r7, #48]	; 0x30
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d119      	bne.n	8007d7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f023 0310 	bic.w	r3, r3, #16
 8007d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	330c      	adds	r3, #12
 8007d64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d66:	61fa      	str	r2, [r7, #28]
 8007d68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	69b9      	ldr	r1, [r7, #24]
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	617b      	str	r3, [r7, #20]
   return(result);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e5      	bne.n	8007d46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d106      	bne.n	8007d90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d86:	4619      	mov	r1, r3
 8007d88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d8a:	f7ff ff0e 	bl	8007baa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d8e:	e002      	b.n	8007d96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d92:	f7ff feec 	bl	8007b6e <HAL_UART_RxCpltCallback>
}
 8007d96:	bf00      	nop
 8007d98:	3770      	adds	r7, #112	; 0x70
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d108      	bne.n	8007dc6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff fef3 	bl	8007baa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dc4:	e002      	b.n	8007dcc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fedb 	bl	8007b82 <HAL_UART_RxHalfCpltCallback>
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b21      	cmp	r3, #33	; 0x21
 8007e06:	d108      	bne.n	8007e1a <UART_DMAError+0x46>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2200      	movs	r2, #0
 8007e12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007e14:	68b8      	ldr	r0, [r7, #8]
 8007e16:	f000 f933 	bl	8008080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b22      	cmp	r3, #34	; 0x22
 8007e3a:	d108      	bne.n	8007e4e <UART_DMAError+0x7a>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2200      	movs	r2, #0
 8007e46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	f000 f941 	bl	80080d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f043 0210 	orr.w	r2, r3, #16
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e5a:	68b8      	ldr	r0, [r7, #8]
 8007e5c:	f7ff fe9b 	bl	8007b96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b090      	sub	sp, #64	; 0x40
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	4613      	mov	r3, r2
 8007e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e78:	e050      	b.n	8007f1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e80:	d04c      	beq.n	8007f1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e88:	f7fd fd2c 	bl	80058e4 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d241      	bcs.n	8007f1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	330c      	adds	r3, #12
 8007eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eb8:	637a      	str	r2, [r7, #52]	; 0x34
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e5      	bne.n	8007e98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3314      	adds	r3, #20
 8007ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	613b      	str	r3, [r7, #16]
   return(result);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3314      	adds	r3, #20
 8007eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eec:	623a      	str	r2, [r7, #32]
 8007eee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	69f9      	ldr	r1, [r7, #28]
 8007ef2:	6a3a      	ldr	r2, [r7, #32]
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e5      	bne.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e00f      	b.n	8007f3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4013      	ands	r3, r2
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	bf0c      	ite	eq
 8007f2c:	2301      	moveq	r3, #1
 8007f2e:	2300      	movne	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d09f      	beq.n	8007e7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3740      	adds	r7, #64	; 0x40
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b098      	sub	sp, #96	; 0x60
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2222      	movs	r2, #34	; 0x22
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	4a40      	ldr	r2, [pc, #256]	; (8008074 <UART_Start_Receive_DMA+0x130>)
 8007f72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	4a3f      	ldr	r2, [pc, #252]	; (8008078 <UART_Start_Receive_DMA+0x134>)
 8007f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	4a3e      	ldr	r2, [pc, #248]	; (800807c <UART_Start_Receive_DMA+0x138>)
 8007f82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	2200      	movs	r2, #0
 8007f8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007f8c:	f107 0308 	add.w	r3, r7, #8
 8007f90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	f7fe fa42 	bl	800642c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	613b      	str	r3, [r7, #16]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d019      	beq.n	8008002 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	330c      	adds	r3, #12
 8007fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	330c      	adds	r3, #12
 8007fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3314      	adds	r3, #20
 8008008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	657b      	str	r3, [r7, #84]	; 0x54
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3314      	adds	r3, #20
 8008020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008022:	63ba      	str	r2, [r7, #56]	; 0x38
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e5      	bne.n	8008002 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3314      	adds	r3, #20
 800803c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804c:	653b      	str	r3, [r7, #80]	; 0x50
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3314      	adds	r3, #20
 8008054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008056:	627a      	str	r2, [r7, #36]	; 0x24
 8008058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6a39      	ldr	r1, [r7, #32]
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	61fb      	str	r3, [r7, #28]
   return(result);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3760      	adds	r7, #96	; 0x60
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	08007c79 	.word	0x08007c79
 8008078:	08007d9f 	.word	0x08007d9f
 800807c:	08007dd5 	.word	0x08007dd5

08008080 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b089      	sub	sp, #36	; 0x24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60bb      	str	r3, [r7, #8]
   return(result);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	330c      	adds	r3, #12
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	61ba      	str	r2, [r7, #24]
 80080aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6979      	ldr	r1, [r7, #20]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	613b      	str	r3, [r7, #16]
   return(result);
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e5      	bne.n	8008088 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80080c4:	bf00      	nop
 80080c6:	3724      	adds	r7, #36	; 0x24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b095      	sub	sp, #84	; 0x54
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080f8:	643a      	str	r2, [r7, #64]	; 0x40
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e5      	bne.n	80080d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	61fb      	str	r3, [r7, #28]
   return(result);
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	64bb      	str	r3, [r7, #72]	; 0x48
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3314      	adds	r3, #20
 800812a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800812c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e5      	bne.n	800810c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	2b01      	cmp	r3, #1
 8008146:	d119      	bne.n	800817c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60bb      	str	r3, [r7, #8]
   return(result);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f023 0310 	bic.w	r3, r3, #16
 800815e:	647b      	str	r3, [r7, #68]	; 0x44
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008168:	61ba      	str	r2, [r7, #24]
 800816a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	6979      	ldr	r1, [r7, #20]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	613b      	str	r3, [r7, #16]
   return(result);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e5      	bne.n	8008148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800818a:	bf00      	nop
 800818c:	3754      	adds	r7, #84	; 0x54
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800819c:	b0c0      	sub	sp, #256	; 0x100
 800819e:	af00      	add	r7, sp, #0
 80081a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b4:	68d9      	ldr	r1, [r3, #12]
 80081b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	ea40 0301 	orr.w	r3, r0, r1
 80081c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	431a      	orrs	r2, r3
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	4313      	orrs	r3, r2
 80081e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081f0:	f021 010c 	bic.w	r1, r1, #12
 80081f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081fe:	430b      	orrs	r3, r1
 8008200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008212:	6999      	ldr	r1, [r3, #24]
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	ea40 0301 	orr.w	r3, r0, r1
 800821e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4b8f      	ldr	r3, [pc, #572]	; (8008464 <UART_SetConfig+0x2cc>)
 8008228:	429a      	cmp	r2, r3
 800822a:	d005      	beq.n	8008238 <UART_SetConfig+0xa0>
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b8d      	ldr	r3, [pc, #564]	; (8008468 <UART_SetConfig+0x2d0>)
 8008234:	429a      	cmp	r2, r3
 8008236:	d104      	bne.n	8008242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008238:	f7ff fa64 	bl	8007704 <HAL_RCC_GetPCLK2Freq>
 800823c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008240:	e003      	b.n	800824a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008242:	f7ff fa4b 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 8008246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008254:	f040 810c 	bne.w	8008470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800825c:	2200      	movs	r2, #0
 800825e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800826a:	4622      	mov	r2, r4
 800826c:	462b      	mov	r3, r5
 800826e:	1891      	adds	r1, r2, r2
 8008270:	65b9      	str	r1, [r7, #88]	; 0x58
 8008272:	415b      	adcs	r3, r3
 8008274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800827a:	4621      	mov	r1, r4
 800827c:	eb12 0801 	adds.w	r8, r2, r1
 8008280:	4629      	mov	r1, r5
 8008282:	eb43 0901 	adc.w	r9, r3, r1
 8008286:	f04f 0200 	mov.w	r2, #0
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800829a:	4690      	mov	r8, r2
 800829c:	4699      	mov	r9, r3
 800829e:	4623      	mov	r3, r4
 80082a0:	eb18 0303 	adds.w	r3, r8, r3
 80082a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082a8:	462b      	mov	r3, r5
 80082aa:	eb49 0303 	adc.w	r3, r9, r3
 80082ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082c6:	460b      	mov	r3, r1
 80082c8:	18db      	adds	r3, r3, r3
 80082ca:	653b      	str	r3, [r7, #80]	; 0x50
 80082cc:	4613      	mov	r3, r2
 80082ce:	eb42 0303 	adc.w	r3, r2, r3
 80082d2:	657b      	str	r3, [r7, #84]	; 0x54
 80082d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082dc:	f7f8 fcec 	bl	8000cb8 <__aeabi_uldivmod>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4b61      	ldr	r3, [pc, #388]	; (800846c <UART_SetConfig+0x2d4>)
 80082e6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	011c      	lsls	r4, r3, #4
 80082ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	1891      	adds	r1, r2, r2
 8008306:	64b9      	str	r1, [r7, #72]	; 0x48
 8008308:	415b      	adcs	r3, r3
 800830a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800830c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008310:	4641      	mov	r1, r8
 8008312:	eb12 0a01 	adds.w	sl, r2, r1
 8008316:	4649      	mov	r1, r9
 8008318:	eb43 0b01 	adc.w	fp, r3, r1
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800832c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008330:	4692      	mov	sl, r2
 8008332:	469b      	mov	fp, r3
 8008334:	4643      	mov	r3, r8
 8008336:	eb1a 0303 	adds.w	r3, sl, r3
 800833a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800833e:	464b      	mov	r3, r9
 8008340:	eb4b 0303 	adc.w	r3, fp, r3
 8008344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800835c:	460b      	mov	r3, r1
 800835e:	18db      	adds	r3, r3, r3
 8008360:	643b      	str	r3, [r7, #64]	; 0x40
 8008362:	4613      	mov	r3, r2
 8008364:	eb42 0303 	adc.w	r3, r2, r3
 8008368:	647b      	str	r3, [r7, #68]	; 0x44
 800836a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800836e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008372:	f7f8 fca1 	bl	8000cb8 <__aeabi_uldivmod>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4611      	mov	r1, r2
 800837c:	4b3b      	ldr	r3, [pc, #236]	; (800846c <UART_SetConfig+0x2d4>)
 800837e:	fba3 2301 	umull	r2, r3, r3, r1
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	2264      	movs	r2, #100	; 0x64
 8008386:	fb02 f303 	mul.w	r3, r2, r3
 800838a:	1acb      	subs	r3, r1, r3
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008392:	4b36      	ldr	r3, [pc, #216]	; (800846c <UART_SetConfig+0x2d4>)
 8008394:	fba3 2302 	umull	r2, r3, r3, r2
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083a0:	441c      	add	r4, r3
 80083a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083b4:	4642      	mov	r2, r8
 80083b6:	464b      	mov	r3, r9
 80083b8:	1891      	adds	r1, r2, r2
 80083ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80083bc:	415b      	adcs	r3, r3
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083c4:	4641      	mov	r1, r8
 80083c6:	1851      	adds	r1, r2, r1
 80083c8:	6339      	str	r1, [r7, #48]	; 0x30
 80083ca:	4649      	mov	r1, r9
 80083cc:	414b      	adcs	r3, r1
 80083ce:	637b      	str	r3, [r7, #52]	; 0x34
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083dc:	4659      	mov	r1, fp
 80083de:	00cb      	lsls	r3, r1, #3
 80083e0:	4651      	mov	r1, sl
 80083e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083e6:	4651      	mov	r1, sl
 80083e8:	00ca      	lsls	r2, r1, #3
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	4603      	mov	r3, r0
 80083f0:	4642      	mov	r2, r8
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083f8:	464b      	mov	r3, r9
 80083fa:	460a      	mov	r2, r1
 80083fc:	eb42 0303 	adc.w	r3, r2, r3
 8008400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008418:	460b      	mov	r3, r1
 800841a:	18db      	adds	r3, r3, r3
 800841c:	62bb      	str	r3, [r7, #40]	; 0x28
 800841e:	4613      	mov	r3, r2
 8008420:	eb42 0303 	adc.w	r3, r2, r3
 8008424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800842a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800842e:	f7f8 fc43 	bl	8000cb8 <__aeabi_uldivmod>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <UART_SetConfig+0x2d4>)
 8008438:	fba3 1302 	umull	r1, r3, r3, r2
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	2164      	movs	r1, #100	; 0x64
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	3332      	adds	r3, #50	; 0x32
 800844a:	4a08      	ldr	r2, [pc, #32]	; (800846c <UART_SetConfig+0x2d4>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	f003 0207 	and.w	r2, r3, #7
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4422      	add	r2, r4
 800845e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008460:	e105      	b.n	800866e <UART_SetConfig+0x4d6>
 8008462:	bf00      	nop
 8008464:	40011000 	.word	0x40011000
 8008468:	40011400 	.word	0x40011400
 800846c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008474:	2200      	movs	r2, #0
 8008476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800847a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800847e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008482:	4642      	mov	r2, r8
 8008484:	464b      	mov	r3, r9
 8008486:	1891      	adds	r1, r2, r2
 8008488:	6239      	str	r1, [r7, #32]
 800848a:	415b      	adcs	r3, r3
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
 800848e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008492:	4641      	mov	r1, r8
 8008494:	1854      	adds	r4, r2, r1
 8008496:	4649      	mov	r1, r9
 8008498:	eb43 0501 	adc.w	r5, r3, r1
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	f04f 0300 	mov.w	r3, #0
 80084a4:	00eb      	lsls	r3, r5, #3
 80084a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084aa:	00e2      	lsls	r2, r4, #3
 80084ac:	4614      	mov	r4, r2
 80084ae:	461d      	mov	r5, r3
 80084b0:	4643      	mov	r3, r8
 80084b2:	18e3      	adds	r3, r4, r3
 80084b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084b8:	464b      	mov	r3, r9
 80084ba:	eb45 0303 	adc.w	r3, r5, r3
 80084be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084de:	4629      	mov	r1, r5
 80084e0:	008b      	lsls	r3, r1, #2
 80084e2:	4621      	mov	r1, r4
 80084e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084e8:	4621      	mov	r1, r4
 80084ea:	008a      	lsls	r2, r1, #2
 80084ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80084f0:	f7f8 fbe2 	bl	8000cb8 <__aeabi_uldivmod>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4b60      	ldr	r3, [pc, #384]	; (800867c <UART_SetConfig+0x4e4>)
 80084fa:	fba3 2302 	umull	r2, r3, r3, r2
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	011c      	lsls	r4, r3, #4
 8008502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008506:	2200      	movs	r2, #0
 8008508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800850c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008514:	4642      	mov	r2, r8
 8008516:	464b      	mov	r3, r9
 8008518:	1891      	adds	r1, r2, r2
 800851a:	61b9      	str	r1, [r7, #24]
 800851c:	415b      	adcs	r3, r3
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008524:	4641      	mov	r1, r8
 8008526:	1851      	adds	r1, r2, r1
 8008528:	6139      	str	r1, [r7, #16]
 800852a:	4649      	mov	r1, r9
 800852c:	414b      	adcs	r3, r1
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800853c:	4659      	mov	r1, fp
 800853e:	00cb      	lsls	r3, r1, #3
 8008540:	4651      	mov	r1, sl
 8008542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008546:	4651      	mov	r1, sl
 8008548:	00ca      	lsls	r2, r1, #3
 800854a:	4610      	mov	r0, r2
 800854c:	4619      	mov	r1, r3
 800854e:	4603      	mov	r3, r0
 8008550:	4642      	mov	r2, r8
 8008552:	189b      	adds	r3, r3, r2
 8008554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008558:	464b      	mov	r3, r9
 800855a:	460a      	mov	r2, r1
 800855c:	eb42 0303 	adc.w	r3, r2, r3
 8008560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	67bb      	str	r3, [r7, #120]	; 0x78
 800856e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800857c:	4649      	mov	r1, r9
 800857e:	008b      	lsls	r3, r1, #2
 8008580:	4641      	mov	r1, r8
 8008582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008586:	4641      	mov	r1, r8
 8008588:	008a      	lsls	r2, r1, #2
 800858a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800858e:	f7f8 fb93 	bl	8000cb8 <__aeabi_uldivmod>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4b39      	ldr	r3, [pc, #228]	; (800867c <UART_SetConfig+0x4e4>)
 8008598:	fba3 1302 	umull	r1, r3, r3, r2
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	2164      	movs	r1, #100	; 0x64
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	3332      	adds	r3, #50	; 0x32
 80085aa:	4a34      	ldr	r2, [pc, #208]	; (800867c <UART_SetConfig+0x4e4>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b6:	441c      	add	r4, r3
 80085b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085bc:	2200      	movs	r2, #0
 80085be:	673b      	str	r3, [r7, #112]	; 0x70
 80085c0:	677a      	str	r2, [r7, #116]	; 0x74
 80085c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	1891      	adds	r1, r2, r2
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	415b      	adcs	r3, r3
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085d6:	4641      	mov	r1, r8
 80085d8:	1851      	adds	r1, r2, r1
 80085da:	6039      	str	r1, [r7, #0]
 80085dc:	4649      	mov	r1, r9
 80085de:	414b      	adcs	r3, r1
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085ee:	4659      	mov	r1, fp
 80085f0:	00cb      	lsls	r3, r1, #3
 80085f2:	4651      	mov	r1, sl
 80085f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085f8:	4651      	mov	r1, sl
 80085fa:	00ca      	lsls	r2, r1, #3
 80085fc:	4610      	mov	r0, r2
 80085fe:	4619      	mov	r1, r3
 8008600:	4603      	mov	r3, r0
 8008602:	4642      	mov	r2, r8
 8008604:	189b      	adds	r3, r3, r2
 8008606:	66bb      	str	r3, [r7, #104]	; 0x68
 8008608:	464b      	mov	r3, r9
 800860a:	460a      	mov	r2, r1
 800860c:	eb42 0303 	adc.w	r3, r2, r3
 8008610:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	663b      	str	r3, [r7, #96]	; 0x60
 800861c:	667a      	str	r2, [r7, #100]	; 0x64
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800862a:	4649      	mov	r1, r9
 800862c:	008b      	lsls	r3, r1, #2
 800862e:	4641      	mov	r1, r8
 8008630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008634:	4641      	mov	r1, r8
 8008636:	008a      	lsls	r2, r1, #2
 8008638:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800863c:	f7f8 fb3c 	bl	8000cb8 <__aeabi_uldivmod>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <UART_SetConfig+0x4e4>)
 8008646:	fba3 1302 	umull	r1, r3, r3, r2
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	2164      	movs	r1, #100	; 0x64
 800864e:	fb01 f303 	mul.w	r3, r1, r3
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	3332      	adds	r3, #50	; 0x32
 8008658:	4a08      	ldr	r2, [pc, #32]	; (800867c <UART_SetConfig+0x4e4>)
 800865a:	fba2 2303 	umull	r2, r3, r2, r3
 800865e:	095b      	lsrs	r3, r3, #5
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4422      	add	r2, r4
 800866c:	609a      	str	r2, [r3, #8]
}
 800866e:	bf00      	nop
 8008670:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008674:	46bd      	mov	sp, r7
 8008676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800867a:	bf00      	nop
 800867c:	51eb851f 	.word	0x51eb851f

08008680 <__NVIC_SetPriority>:
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800868c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008690:	2b00      	cmp	r3, #0
 8008692:	db0a      	blt.n	80086aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	b2da      	uxtb	r2, r3
 8008698:	490c      	ldr	r1, [pc, #48]	; (80086cc <__NVIC_SetPriority+0x4c>)
 800869a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800869e:	0112      	lsls	r2, r2, #4
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	440b      	add	r3, r1
 80086a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086a8:	e00a      	b.n	80086c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	4908      	ldr	r1, [pc, #32]	; (80086d0 <__NVIC_SetPriority+0x50>)
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	3b04      	subs	r3, #4
 80086b8:	0112      	lsls	r2, r2, #4
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	440b      	add	r3, r1
 80086be:	761a      	strb	r2, [r3, #24]
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	e000e100 	.word	0xe000e100
 80086d0:	e000ed00 	.word	0xe000ed00

080086d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80086d8:	2100      	movs	r1, #0
 80086da:	f06f 0004 	mvn.w	r0, #4
 80086de:	f7ff ffcf 	bl	8008680 <__NVIC_SetPriority>
#endif
}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ee:	f3ef 8305 	mrs	r3, IPSR
 80086f2:	603b      	str	r3, [r7, #0]
  return(result);
 80086f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80086fa:	f06f 0305 	mvn.w	r3, #5
 80086fe:	607b      	str	r3, [r7, #4]
 8008700:	e00c      	b.n	800871c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008702:	4b0a      	ldr	r3, [pc, #40]	; (800872c <osKernelInitialize+0x44>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800870a:	4b08      	ldr	r3, [pc, #32]	; (800872c <osKernelInitialize+0x44>)
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008710:	2300      	movs	r3, #0
 8008712:	607b      	str	r3, [r7, #4]
 8008714:	e002      	b.n	800871c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008716:	f04f 33ff 	mov.w	r3, #4294967295
 800871a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800871c:	687b      	ldr	r3, [r7, #4]
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20001ae0 	.word	0x20001ae0

08008730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008736:	f3ef 8305 	mrs	r3, IPSR
 800873a:	603b      	str	r3, [r7, #0]
  return(result);
 800873c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008742:	f06f 0305 	mvn.w	r3, #5
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e010      	b.n	800876c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <osKernelStart+0x48>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d109      	bne.n	8008766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008752:	f7ff ffbf 	bl	80086d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <osKernelStart+0x48>)
 8008758:	2202      	movs	r2, #2
 800875a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800875c:	f001 fa0c 	bl	8009b78 <vTaskStartScheduler>
      stat = osOK;
 8008760:	2300      	movs	r3, #0
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	e002      	b.n	800876c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800876c:	687b      	ldr	r3, [r7, #4]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20001ae0 	.word	0x20001ae0

0800877c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b08e      	sub	sp, #56	; 0x38
 8008780:	af04      	add	r7, sp, #16
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008788:	2300      	movs	r3, #0
 800878a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800878c:	f3ef 8305 	mrs	r3, IPSR
 8008790:	617b      	str	r3, [r7, #20]
  return(result);
 8008792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008794:	2b00      	cmp	r3, #0
 8008796:	d17e      	bne.n	8008896 <osThreadNew+0x11a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d07b      	beq.n	8008896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800879e:	2380      	movs	r3, #128	; 0x80
 80087a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80087a2:	2318      	movs	r3, #24
 80087a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295
 80087ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d045      	beq.n	8008842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <osThreadNew+0x48>
        name = attr->name;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <osThreadNew+0x6e>
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b38      	cmp	r3, #56	; 0x38
 80087dc:	d805      	bhi.n	80087ea <osThreadNew+0x6e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <osThreadNew+0x72>
        return (NULL);
 80087ea:	2300      	movs	r3, #0
 80087ec:	e054      	b.n	8008898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	089b      	lsrs	r3, r3, #2
 80087fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00e      	beq.n	8008824 <osThreadNew+0xa8>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	2bbb      	cmp	r3, #187	; 0xbb
 800880c:	d90a      	bls.n	8008824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008812:	2b00      	cmp	r3, #0
 8008814:	d006      	beq.n	8008824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <osThreadNew+0xa8>
        mem = 1;
 800881e:	2301      	movs	r3, #1
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	e010      	b.n	8008846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10c      	bne.n	8008846 <osThreadNew+0xca>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d108      	bne.n	8008846 <osThreadNew+0xca>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <osThreadNew+0xca>
          mem = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	e001      	b.n	8008846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d110      	bne.n	800886e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008854:	9202      	str	r2, [sp, #8]
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 ff9c 	bl	80097a0 <xTaskCreateStatic>
 8008868:	4603      	mov	r3, r0
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	e013      	b.n	8008896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d110      	bne.n	8008896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	b29a      	uxth	r2, r3
 8008878:	f107 0310 	add.w	r3, r7, #16
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 ffe7 	bl	800985a <xTaskCreate>
 800888c:	4603      	mov	r3, r0
 800888e:	2b01      	cmp	r3, #1
 8008890:	d001      	beq.n	8008896 <osThreadNew+0x11a>
            hTask = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008896:	693b      	ldr	r3, [r7, #16]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3728      	adds	r7, #40	; 0x28
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a8:	f3ef 8305 	mrs	r3, IPSR
 80088ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80088ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <osDelay+0x1c>
    stat = osErrorISR;
 80088b4:	f06f 0305 	mvn.w	r3, #5
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	e007      	b.n	80088cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f922 	bl	8009b10 <vTaskDelay>
    }
  }

  return (stat);
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a07      	ldr	r2, [pc, #28]	; (8008904 <vApplicationGetIdleTaskMemory+0x2c>)
 80088e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4a06      	ldr	r2, [pc, #24]	; (8008908 <vApplicationGetIdleTaskMemory+0x30>)
 80088ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2280      	movs	r2, #128	; 0x80
 80088f4:	601a      	str	r2, [r3, #0]
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20001ae4 	.word	0x20001ae4
 8008908:	20001ba0 	.word	0x20001ba0

0800890c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a07      	ldr	r2, [pc, #28]	; (8008938 <vApplicationGetTimerTaskMemory+0x2c>)
 800891c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <vApplicationGetTimerTaskMemory+0x30>)
 8008922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800892a:	601a      	str	r2, [r3, #0]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20001da0 	.word	0x20001da0
 800893c:	20001e5c 	.word	0x20001e5c

08008940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f103 0208 	add.w	r2, r3, #8
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f04f 32ff 	mov.w	r2, #4294967295
 8008958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f103 0208 	add.w	r2, r3, #8
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f103 0208 	add.w	r2, r3, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d103      	bne.n	8008a02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e00c      	b.n	8008a1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3308      	adds	r3, #8
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	e002      	b.n	8008a10 <vListInsert+0x2e>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d2f6      	bcs.n	8008a0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]
}
 8008a48:	bf00      	nop
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6892      	ldr	r2, [r2, #8]
 8008a6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6852      	ldr	r2, [r2, #4]
 8008a74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d103      	bne.n	8008a88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	1e5a      	subs	r2, r3, #1
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ad2:	f002 fb07 	bl	800b0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ae2:	fb01 f303 	mul.w	r3, r1, r3
 8008ae6:	441a      	add	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	3b01      	subs	r3, #1
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b08:	fb01 f303 	mul.w	r3, r1, r3
 8008b0c:	441a      	add	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	22ff      	movs	r2, #255	; 0xff
 8008b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	22ff      	movs	r2, #255	; 0xff
 8008b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d114      	bne.n	8008b52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01a      	beq.n	8008b66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3310      	adds	r3, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 fab9 	bl	800a0ac <xTaskRemoveFromEventList>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d012      	beq.n	8008b66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b40:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <xQueueGenericReset+0xcc>)
 8008b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	e009      	b.n	8008b66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3310      	adds	r3, #16
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fef2 	bl	8008940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3324      	adds	r3, #36	; 0x24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff feed 	bl	8008940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b66:	f002 faed 	bl	800b144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b6a:	2301      	movs	r3, #1
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08e      	sub	sp, #56	; 0x38
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <xQueueGenericCreateStatic+0x52>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <xQueueGenericCreateStatic+0x56>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <xQueueGenericCreateStatic+0x58>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	623b      	str	r3, [r7, #32]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <xQueueGenericCreateStatic+0x7e>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <xQueueGenericCreateStatic+0x82>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <xQueueGenericCreateStatic+0x84>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	61fb      	str	r3, [r7, #28]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c16:	2350      	movs	r3, #80	; 0x50
 8008c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b50      	cmp	r3, #80	; 0x50
 8008c1e:	d00a      	beq.n	8008c36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	61bb      	str	r3, [r7, #24]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00d      	beq.n	8008c5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	4613      	mov	r3, r2
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f83f 	bl	8008cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3730      	adds	r7, #48	; 0x30
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	613b      	str	r3, [r7, #16]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	fb02 f303 	mul.w	r3, r2, r3
 8008c9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3350      	adds	r3, #80	; 0x50
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 fb41 	bl	800b328 <pvPortMalloc>
 8008ca6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d011      	beq.n	8008cd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	3350      	adds	r3, #80	; 0x50
 8008cb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cc0:	79fa      	ldrb	r2, [r7, #7]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f805 	bl	8008cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d103      	bne.n	8008cf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	69b8      	ldr	r0, [r7, #24]
 8008d0e:	f7ff fecb 	bl	8008aa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00e      	beq.n	8008d4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	2100      	movs	r1, #0
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f81d 	bl	8008d88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d60:	2301      	movs	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6939      	ldr	r1, [r7, #16]
 8008d6e:	6978      	ldr	r0, [r7, #20]
 8008d70:	f7ff ff7a 	bl	8008c68 <xQueueGenericCreate>
 8008d74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff ffd3 	bl	8008d22 <prvInitialiseMutex>

		return xNewQueue;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
	}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08e      	sub	sp, #56	; 0x38
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d96:	2300      	movs	r3, #0
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <xQueueGenericSend+0x32>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008db6:	bf00      	nop
 8008db8:	e7fe      	b.n	8008db8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <xQueueGenericSend+0x40>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <xQueueGenericSend+0x44>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <xQueueGenericSend+0x46>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <xQueueGenericSend+0x60>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d103      	bne.n	8008df6 <xQueueGenericSend+0x6e>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <xQueueGenericSend+0x72>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <xQueueGenericSend+0x74>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <xQueueGenericSend+0x8e>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	623b      	str	r3, [r7, #32]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e16:	f001 fb0b 	bl	800a430 <xTaskGetSchedulerState>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <xQueueGenericSend+0x9e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <xQueueGenericSend+0xa2>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <xQueueGenericSend+0xa4>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	61fb      	str	r3, [r7, #28]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e46:	f002 f94d 	bl	800b0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d302      	bcc.n	8008e5c <xQueueGenericSend+0xd4>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d129      	bne.n	8008eb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	68b9      	ldr	r1, [r7, #8]
 8008e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e62:	f000 fb2f 	bl	80094c4 <prvCopyDataToQueue>
 8008e66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d010      	beq.n	8008e92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	3324      	adds	r3, #36	; 0x24
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 f919 	bl	800a0ac <xTaskRemoveFromEventList>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d013      	beq.n	8008ea8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e80:	4b3f      	ldr	r3, [pc, #252]	; (8008f80 <xQueueGenericSend+0x1f8>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	e00a      	b.n	8008ea8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e98:	4b39      	ldr	r3, [pc, #228]	; (8008f80 <xQueueGenericSend+0x1f8>)
 8008e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ea8:	f002 f94c 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e063      	b.n	8008f78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d103      	bne.n	8008ebe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008eb6:	f002 f945 	bl	800b144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e05c      	b.n	8008f78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 f953 	bl	800a174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ed2:	f002 f937 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ed6:	f000 febf 	bl	8009c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eda:	f002 f903 	bl	800b0e4 <vPortEnterCritical>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ee4:	b25b      	sxtb	r3, r3
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eea:	d103      	bne.n	8008ef4 <xQueueGenericSend+0x16c>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f00:	d103      	bne.n	8008f0a <xQueueGenericSend+0x182>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f0a:	f002 f91b 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f0e:	1d3a      	adds	r2, r7, #4
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 f942 	bl	800a1a0 <xTaskCheckForTimeOut>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d124      	bne.n	8008f6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f24:	f000 fbc6 	bl	80096b4 <prvIsQueueFull>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d018      	beq.n	8008f60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	3310      	adds	r3, #16
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 f868 	bl	800a00c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f3e:	f000 fb51 	bl	80095e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f42:	f000 fe97 	bl	8009c74 <xTaskResumeAll>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f af7c 	bne.w	8008e46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <xQueueGenericSend+0x1f8>)
 8008f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	e772      	b.n	8008e46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f62:	f000 fb3f 	bl	80095e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f66:	f000 fe85 	bl	8009c74 <xTaskResumeAll>
 8008f6a:	e76c      	b.n	8008e46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6e:	f000 fb39 	bl	80095e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f72:	f000 fe7f 	bl	8009c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3738      	adds	r7, #56	; 0x38
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b090      	sub	sp, #64	; 0x40
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d103      	bne.n	8008fc0 <xQueueGenericSendFromISR+0x3c>
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <xQueueGenericSendFromISR+0x40>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <xQueueGenericSendFromISR+0x42>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d103      	bne.n	8008fee <xQueueGenericSendFromISR+0x6a>
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <xQueueGenericSendFromISR+0x6e>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <xQueueGenericSendFromISR+0x70>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800900e:	f002 f94b 	bl	800b2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009012:	f3ef 8211 	mrs	r2, BASEPRI
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	61fa      	str	r2, [r7, #28]
 8009028:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800902a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009036:	429a      	cmp	r2, r3
 8009038:	d302      	bcc.n	8009040 <xQueueGenericSendFromISR+0xbc>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d12f      	bne.n	80090a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009056:	f000 fa35 	bl	80094c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800905a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d112      	bne.n	800908a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	d016      	beq.n	800909a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	3324      	adds	r3, #36	; 0x24
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f81b 	bl	800a0ac <xTaskRemoveFromEventList>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00e      	beq.n	800909a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e007      	b.n	800909a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800908a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800908e:	3301      	adds	r3, #1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	b25a      	sxtb	r2, r3
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800909a:	2301      	movs	r3, #1
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800909e:	e001      	b.n	80090a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3740      	adds	r7, #64	; 0x40
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08c      	sub	sp, #48	; 0x30
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <xQueueReceive+0x30>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	623b      	str	r3, [r7, #32]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <xQueueReceive+0x3e>
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <xQueueReceive+0x42>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueReceive+0x44>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueReceive+0x5e>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	61fb      	str	r3, [r7, #28]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800911a:	f001 f989 	bl	800a430 <xTaskGetSchedulerState>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <xQueueReceive+0x6e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <xQueueReceive+0x72>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueReceive+0x74>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <xQueueReceive+0x8e>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	61bb      	str	r3, [r7, #24]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800914a:	f001 ffcb 	bl	800b0e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01f      	beq.n	800919a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915e:	f000 fa1b 	bl	8009598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1e5a      	subs	r2, r3, #1
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00f      	beq.n	8009192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	3310      	adds	r3, #16
 8009176:	4618      	mov	r0, r3
 8009178:	f000 ff98 	bl	800a0ac <xTaskRemoveFromEventList>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009182:	4b3d      	ldr	r3, [pc, #244]	; (8009278 <xQueueReceive+0x1bc>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009192:	f001 ffd7 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 8009196:	2301      	movs	r3, #1
 8009198:	e069      	b.n	800926e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d103      	bne.n	80091a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091a0:	f001 ffd0 	bl	800b144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091a4:	2300      	movs	r3, #0
 80091a6:	e062      	b.n	800926e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ae:	f107 0310 	add.w	r3, r7, #16
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 ffde 	bl	800a174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091b8:	2301      	movs	r3, #1
 80091ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091bc:	f001 ffc2 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091c0:	f000 fd4a 	bl	8009c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091c4:	f001 ff8e 	bl	800b0e4 <vPortEnterCritical>
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091ce:	b25b      	sxtb	r3, r3
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d103      	bne.n	80091de <xQueueReceive+0x122>
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091e4:	b25b      	sxtb	r3, r3
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d103      	bne.n	80091f4 <xQueueReceive+0x138>
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091f4:	f001 ffa6 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091f8:	1d3a      	adds	r2, r7, #4
 80091fa:	f107 0310 	add.w	r3, r7, #16
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f000 ffcd 	bl	800a1a0 <xTaskCheckForTimeOut>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d123      	bne.n	8009254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800920c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920e:	f000 fa3b 	bl	8009688 <prvIsQueueEmpty>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fef3 	bl	800a00c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009228:	f000 f9dc 	bl	80095e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800922c:	f000 fd22 	bl	8009c74 <xTaskResumeAll>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d189      	bne.n	800914a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <xQueueReceive+0x1bc>)
 8009238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	e780      	b.n	800914a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800924a:	f000 f9cb 	bl	80095e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800924e:	f000 fd11 	bl	8009c74 <xTaskResumeAll>
 8009252:	e77a      	b.n	800914a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009256:	f000 f9c5 	bl	80095e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800925a:	f000 fd0b 	bl	8009c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800925e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009260:	f000 fa12 	bl	8009688 <prvIsQueueEmpty>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	f43f af6f 	beq.w	800914a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800926c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800926e:	4618      	mov	r0, r3
 8009270:	3730      	adds	r7, #48	; 0x30
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009286:	2300      	movs	r3, #0
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10a      	bne.n	80092ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	623b      	str	r3, [r7, #32]
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	61fb      	str	r3, [r7, #28]
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092cc:	f001 f8b0 	bl	800a430 <xTaskGetSchedulerState>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <xQueueSemaphoreTake+0x60>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <xQueueSemaphoreTake+0x64>
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <xQueueSemaphoreTake+0x66>
 80092e0:	2300      	movs	r3, #0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	61bb      	str	r3, [r7, #24]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092fc:	f001 fef2 	bl	800b0e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	2b00      	cmp	r3, #0
 800930a:	d024      	beq.n	8009356 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	1e5a      	subs	r2, r3, #1
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800931c:	f001 f9fe 	bl	800a71c <pvTaskIncrementMutexHeldCount>
 8009320:	4602      	mov	r2, r0
 8009322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009324:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00f      	beq.n	800934e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	3310      	adds	r3, #16
 8009332:	4618      	mov	r0, r3
 8009334:	f000 feba 	bl	800a0ac <xTaskRemoveFromEventList>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d007      	beq.n	800934e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800933e:	4b54      	ldr	r3, [pc, #336]	; (8009490 <xQueueSemaphoreTake+0x214>)
 8009340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800934e:	f001 fef9 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 8009352:	2301      	movs	r3, #1
 8009354:	e097      	b.n	8009486 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d111      	bne.n	8009380 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	617b      	str	r3, [r7, #20]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009378:	f001 fee4 	bl	800b144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800937c:	2300      	movs	r3, #0
 800937e:	e082      	b.n	8009486 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009386:	f107 030c 	add.w	r3, r7, #12
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fef2 	bl	800a174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009394:	f001 fed6 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009398:	f000 fc5e 	bl	8009c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800939c:	f001 fea2 	bl	800b0e4 <vPortEnterCritical>
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093a6:	b25b      	sxtb	r3, r3
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ac:	d103      	bne.n	80093b6 <xQueueSemaphoreTake+0x13a>
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093bc:	b25b      	sxtb	r3, r3
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d103      	bne.n	80093cc <xQueueSemaphoreTake+0x150>
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093cc:	f001 feba 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093d0:	463a      	mov	r2, r7
 80093d2:	f107 030c 	add.w	r3, r7, #12
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fee1 	bl	800a1a0 <xTaskCheckForTimeOut>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d132      	bne.n	800944a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093e6:	f000 f94f 	bl	8009688 <prvIsQueueEmpty>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d026      	beq.n	800943e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80093f8:	f001 fe74 	bl	800b0e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f001 f833 	bl	800a46c <xTaskPriorityInherit>
 8009406:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009408:	f001 fe9c 	bl	800b144 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	3324      	adds	r3, #36	; 0x24
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fdf9 	bl	800a00c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800941a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800941c:	f000 f8e2 	bl	80095e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009420:	f000 fc28 	bl	8009c74 <xTaskResumeAll>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	f47f af68 	bne.w	80092fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800942c:	4b18      	ldr	r3, [pc, #96]	; (8009490 <xQueueSemaphoreTake+0x214>)
 800942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	e75e      	b.n	80092fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800943e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009440:	f000 f8d0 	bl	80095e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009444:	f000 fc16 	bl	8009c74 <xTaskResumeAll>
 8009448:	e758      	b.n	80092fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800944a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800944c:	f000 f8ca 	bl	80095e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009450:	f000 fc10 	bl	8009c74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009456:	f000 f917 	bl	8009688 <prvIsQueueEmpty>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	f43f af4d 	beq.w	80092fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00d      	beq.n	8009484 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009468:	f001 fe3c 	bl	800b0e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800946c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800946e:	f000 f811 	bl	8009494 <prvGetDisinheritPriorityAfterTimeout>
 8009472:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800947a:	4618      	mov	r0, r3
 800947c:	f001 f8cc 	bl	800a618 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009480:	f001 fe60 	bl	800b144 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009484:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009486:	4618      	mov	r0, r3
 8009488:	3738      	adds	r7, #56	; 0x38
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d006      	beq.n	80094b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e001      	b.n	80094b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80094b6:	68fb      	ldr	r3, [r7, #12]
	}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10d      	bne.n	80094fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d14d      	bne.n	8009586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 f824 	bl	800a53c <xTaskPriorityDisinherit>
 80094f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	e043      	b.n	8009586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d119      	bne.n	8009538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6858      	ldr	r0, [r3, #4]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	461a      	mov	r2, r3
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	f002 fb02 	bl	800bb18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	441a      	add	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	d32b      	bcc.n	8009586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	605a      	str	r2, [r3, #4]
 8009536:	e026      	b.n	8009586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68d8      	ldr	r0, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	461a      	mov	r2, r3
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	f002 fae8 	bl	800bb18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	425b      	negs	r3, r3
 8009552:	441a      	add	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d207      	bcs.n	8009574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	425b      	negs	r3, r3
 800956e:	441a      	add	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d105      	bne.n	8009586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	3b01      	subs	r3, #1
 8009584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800958e:	697b      	ldr	r3, [r7, #20]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d018      	beq.n	80095dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	441a      	add	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d303      	bcc.n	80095cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68d9      	ldr	r1, [r3, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d4:	461a      	mov	r2, r3
 80095d6:	6838      	ldr	r0, [r7, #0]
 80095d8:	f002 fa9e 	bl	800bb18 <memcpy>
	}
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095ec:	f001 fd7a 	bl	800b0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095f8:	e011      	b.n	800961e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d012      	beq.n	8009628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3324      	adds	r3, #36	; 0x24
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fd50 	bl	800a0ac <xTaskRemoveFromEventList>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009612:	f000 fe27 	bl	800a264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	3b01      	subs	r3, #1
 800961a:	b2db      	uxtb	r3, r3
 800961c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800961e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009622:	2b00      	cmp	r3, #0
 8009624:	dce9      	bgt.n	80095fa <prvUnlockQueue+0x16>
 8009626:	e000      	b.n	800962a <prvUnlockQueue+0x46>
					break;
 8009628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	22ff      	movs	r2, #255	; 0xff
 800962e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009632:	f001 fd87 	bl	800b144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009636:	f001 fd55 	bl	800b0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009642:	e011      	b.n	8009668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d012      	beq.n	8009672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3310      	adds	r3, #16
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fd2b 	bl	800a0ac <xTaskRemoveFromEventList>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800965c:	f000 fe02 	bl	800a264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	3b01      	subs	r3, #1
 8009664:	b2db      	uxtb	r3, r3
 8009666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800966c:	2b00      	cmp	r3, #0
 800966e:	dce9      	bgt.n	8009644 <prvUnlockQueue+0x60>
 8009670:	e000      	b.n	8009674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	22ff      	movs	r2, #255	; 0xff
 8009678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800967c:	f001 fd62 	bl	800b144 <vPortExitCritical>
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009690:	f001 fd28 	bl	800b0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	e001      	b.n	80096a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096a6:	f001 fd4d 	bl	800b144 <vPortExitCritical>

	return xReturn;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096bc:	f001 fd12 	bl	800b0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d102      	bne.n	80096d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e001      	b.n	80096d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f001 fd35 	bl	800b144 <vPortExitCritical>

	return xReturn;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e014      	b.n	800971e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096f4:	4a0f      	ldr	r2, [pc, #60]	; (8009734 <vQueueAddToRegistry+0x50>)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10b      	bne.n	8009718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009700:	490c      	ldr	r1, [pc, #48]	; (8009734 <vQueueAddToRegistry+0x50>)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800970a:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <vQueueAddToRegistry+0x50>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009716:	e006      	b.n	8009726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b07      	cmp	r3, #7
 8009722:	d9e7      	bls.n	80096f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	2000225c 	.word	0x2000225c

08009738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009748:	f001 fccc 	bl	800b0e4 <vPortEnterCritical>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009752:	b25b      	sxtb	r3, r3
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d103      	bne.n	8009762 <vQueueWaitForMessageRestricted+0x2a>
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009768:	b25b      	sxtb	r3, r3
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d103      	bne.n	8009778 <vQueueWaitForMessageRestricted+0x40>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009778:	f001 fce4 	bl	800b144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fc61 	bl	800a054 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f7ff ff26 	bl	80095e4 <prvUnlockQueue>
	}
 8009798:	bf00      	nop
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	; 0x38
 80097a4:	af04      	add	r7, sp, #16
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	623b      	str	r3, [r7, #32]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	61fb      	str	r3, [r7, #28]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097e6:	23bc      	movs	r3, #188	; 0xbc
 80097e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2bbc      	cmp	r3, #188	; 0xbc
 80097ee:	d00a      	beq.n	8009806 <xTaskCreateStatic+0x66>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	61bb      	str	r3, [r7, #24]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009806:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01e      	beq.n	800984c <xTaskCreateStatic+0xac>
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01b      	beq.n	800984c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	2202      	movs	r2, #2
 8009822:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009826:	2300      	movs	r3, #0
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	f107 0314 	add.w	r3, r7, #20
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f850 	bl	80098e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009846:	f000 f8f3 	bl	8009a30 <prvAddNewTaskToReadyList>
 800984a:	e001      	b.n	8009850 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009850:	697b      	ldr	r3, [r7, #20]
	}
 8009852:	4618      	mov	r0, r3
 8009854:	3728      	adds	r7, #40	; 0x28
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800985a:	b580      	push	{r7, lr}
 800985c:	b08c      	sub	sp, #48	; 0x30
 800985e:	af04      	add	r7, sp, #16
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	4613      	mov	r3, r2
 8009868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800986a:	88fb      	ldrh	r3, [r7, #6]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fd5a 	bl	800b328 <pvPortMalloc>
 8009874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00e      	beq.n	800989a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800987c:	20bc      	movs	r0, #188	; 0xbc
 800987e:	f001 fd53 	bl	800b328 <pvPortMalloc>
 8009882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
 8009890:	e005      	b.n	800989e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f001 fe14 	bl	800b4c0 <vPortFree>
 8009898:	e001      	b.n	800989e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d017      	beq.n	80098d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098ac:	88fa      	ldrh	r2, [r7, #6]
 80098ae:	2300      	movs	r3, #0
 80098b0:	9303      	str	r3, [sp, #12]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	9302      	str	r3, [sp, #8]
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 f80e 	bl	80098e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098c8:	69f8      	ldr	r0, [r7, #28]
 80098ca:	f000 f8b1 	bl	8009a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098ce:	2301      	movs	r3, #1
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e002      	b.n	80098da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098d4:	f04f 33ff 	mov.w	r3, #4294967295
 80098d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098da:	69bb      	ldr	r3, [r7, #24]
	}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	461a      	mov	r2, r3
 80098fc:	21a5      	movs	r1, #165	; 0xa5
 80098fe:	f002 f919 	bl	800bb34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800990c:	3b01      	subs	r3, #1
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	f023 0307 	bic.w	r3, r3, #7
 800991a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	617b      	str	r3, [r7, #20]
}
 8009938:	bf00      	nop
 800993a:	e7fe      	b.n	800993a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01f      	beq.n	8009982 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009942:	2300      	movs	r3, #0
 8009944:	61fb      	str	r3, [r7, #28]
 8009946:	e012      	b.n	800996e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4413      	add	r3, r2
 800994e:	7819      	ldrb	r1, [r3, #0]
 8009950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	4413      	add	r3, r2
 8009956:	3334      	adds	r3, #52	; 0x34
 8009958:	460a      	mov	r2, r1
 800995a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	2b0f      	cmp	r3, #15
 8009972:	d9e9      	bls.n	8009948 <prvInitialiseNewTask+0x64>
 8009974:	e000      	b.n	8009978 <prvInitialiseNewTask+0x94>
			{
				break;
 8009976:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009980:	e003      	b.n	800998a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	2b37      	cmp	r3, #55	; 0x37
 800998e:	d901      	bls.n	8009994 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009990:	2337      	movs	r3, #55	; 0x37
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009998:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	2200      	movs	r2, #0
 80099a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe ffe8 	bl	8008980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	3318      	adds	r3, #24
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe ffe3 	bl	8008980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	3354      	adds	r3, #84	; 0x54
 80099e4:	2260      	movs	r2, #96	; 0x60
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f002 f8a3 	bl	800bb34 <memset>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	4a0c      	ldr	r2, [pc, #48]	; (8009a24 <prvInitialiseNewTask+0x140>)
 80099f2:	659a      	str	r2, [r3, #88]	; 0x58
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	4a0c      	ldr	r2, [pc, #48]	; (8009a28 <prvInitialiseNewTask+0x144>)
 80099f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	4a0b      	ldr	r2, [pc, #44]	; (8009a2c <prvInitialiseNewTask+0x148>)
 80099fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	69b8      	ldr	r0, [r7, #24]
 8009a06:	f001 fa3f 	bl	800ae88 <pxPortInitialiseStack>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a1c:	bf00      	nop
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	08010c84 	.word	0x08010c84
 8009a28:	08010ca4 	.word	0x08010ca4
 8009a2c:	08010c64 	.word	0x08010c64

08009a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a38:	f001 fb54 	bl	800b0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a3c:	4b2d      	ldr	r3, [pc, #180]	; (8009af4 <prvAddNewTaskToReadyList+0xc4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	4a2c      	ldr	r2, [pc, #176]	; (8009af4 <prvAddNewTaskToReadyList+0xc4>)
 8009a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a46:	4b2c      	ldr	r3, [pc, #176]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d109      	bne.n	8009a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a54:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <prvAddNewTaskToReadyList+0xc4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d110      	bne.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a5c:	f000 fc26 	bl	800a2ac <prvInitialiseTaskLists>
 8009a60:	e00d      	b.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a62:	4b26      	ldr	r3, [pc, #152]	; (8009afc <prvAddNewTaskToReadyList+0xcc>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d109      	bne.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a6a:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d802      	bhi.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a78:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a7e:	4b20      	ldr	r3, [pc, #128]	; (8009b00 <prvAddNewTaskToReadyList+0xd0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3301      	adds	r3, #1
 8009a84:	4a1e      	ldr	r2, [pc, #120]	; (8009b00 <prvAddNewTaskToReadyList+0xd0>)
 8009a86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a88:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <prvAddNewTaskToReadyList+0xd0>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a94:	4b1b      	ldr	r3, [pc, #108]	; (8009b04 <prvAddNewTaskToReadyList+0xd4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d903      	bls.n	8009aa4 <prvAddNewTaskToReadyList+0x74>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	4a18      	ldr	r2, [pc, #96]	; (8009b04 <prvAddNewTaskToReadyList+0xd4>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <prvAddNewTaskToReadyList+0xd8>)
 8009ab2:	441a      	add	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f7fe ff6d 	bl	800899a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ac0:	f001 fb40 	bl	800b144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <prvAddNewTaskToReadyList+0xcc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00e      	beq.n	8009aea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009acc:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d207      	bcs.n	8009aea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <prvAddNewTaskToReadyList+0xdc>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20002770 	.word	0x20002770
 8009af8:	2000229c 	.word	0x2000229c
 8009afc:	2000277c 	.word	0x2000277c
 8009b00:	2000278c 	.word	0x2000278c
 8009b04:	20002778 	.word	0x20002778
 8009b08:	200022a0 	.word	0x200022a0
 8009b0c:	e000ed04 	.word	0xe000ed04

08009b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d017      	beq.n	8009b52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b22:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <vTaskDelay+0x60>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vTaskDelay+0x30>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	60bb      	str	r3, [r7, #8]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b40:	f000 f88a 	bl	8009c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b44:	2100      	movs	r1, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fdfc 	bl	800a744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b4c:	f000 f892 	bl	8009c74 <xTaskResumeAll>
 8009b50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d107      	bne.n	8009b68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <vTaskDelay+0x64>)
 8009b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20002798 	.word	0x20002798
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b86:	463a      	mov	r2, r7
 8009b88:	1d39      	adds	r1, r7, #4
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fea2 	bl	80088d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	9202      	str	r2, [sp, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	460a      	mov	r2, r1
 8009ba6:	4924      	ldr	r1, [pc, #144]	; (8009c38 <vTaskStartScheduler+0xc0>)
 8009ba8:	4824      	ldr	r0, [pc, #144]	; (8009c3c <vTaskStartScheduler+0xc4>)
 8009baa:	f7ff fdf9 	bl	80097a0 <xTaskCreateStatic>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4a23      	ldr	r2, [pc, #140]	; (8009c40 <vTaskStartScheduler+0xc8>)
 8009bb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bb4:	4b22      	ldr	r3, [pc, #136]	; (8009c40 <vTaskStartScheduler+0xc8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	e001      	b.n	8009bc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d102      	bne.n	8009bd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bcc:	f000 fe0e 	bl	800a7ec <xTimerCreateTimerTask>
 8009bd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d11b      	bne.n	8009c10 <vTaskStartScheduler+0x98>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	613b      	str	r3, [r7, #16]
}
 8009bea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bec:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <vTaskStartScheduler+0xcc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3354      	adds	r3, #84	; 0x54
 8009bf2:	4a15      	ldr	r2, [pc, #84]	; (8009c48 <vTaskStartScheduler+0xd0>)
 8009bf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bf6:	4b15      	ldr	r3, [pc, #84]	; (8009c4c <vTaskStartScheduler+0xd4>)
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bfe:	4b14      	ldr	r3, [pc, #80]	; (8009c50 <vTaskStartScheduler+0xd8>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c04:	4b13      	ldr	r3, [pc, #76]	; (8009c54 <vTaskStartScheduler+0xdc>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c0a:	f001 f9c9 	bl	800afa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c0e:	e00e      	b.n	8009c2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d10a      	bne.n	8009c2e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	60fb      	str	r3, [r7, #12]
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <vTaskStartScheduler+0xb4>
}
 8009c2e:	bf00      	nop
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	08010b04 	.word	0x08010b04
 8009c3c:	0800a27d 	.word	0x0800a27d
 8009c40:	20002794 	.word	0x20002794
 8009c44:	2000229c 	.word	0x2000229c
 8009c48:	2000001c 	.word	0x2000001c
 8009c4c:	20002790 	.word	0x20002790
 8009c50:	2000277c 	.word	0x2000277c
 8009c54:	20002774 	.word	0x20002774

08009c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <vTaskSuspendAll+0x18>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3301      	adds	r3, #1
 8009c62:	4a03      	ldr	r2, [pc, #12]	; (8009c70 <vTaskSuspendAll+0x18>)
 8009c64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c66:	bf00      	nop
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	20002798 	.word	0x20002798

08009c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c82:	4b42      	ldr	r3, [pc, #264]	; (8009d8c <xTaskResumeAll+0x118>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10a      	bne.n	8009ca0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	603b      	str	r3, [r7, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ca0:	f001 fa20 	bl	800b0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ca4:	4b39      	ldr	r3, [pc, #228]	; (8009d8c <xTaskResumeAll+0x118>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	4a38      	ldr	r2, [pc, #224]	; (8009d8c <xTaskResumeAll+0x118>)
 8009cac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cae:	4b37      	ldr	r3, [pc, #220]	; (8009d8c <xTaskResumeAll+0x118>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d162      	bne.n	8009d7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cb6:	4b36      	ldr	r3, [pc, #216]	; (8009d90 <xTaskResumeAll+0x11c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d05e      	beq.n	8009d7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cbe:	e02f      	b.n	8009d20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc0:	4b34      	ldr	r3, [pc, #208]	; (8009d94 <xTaskResumeAll+0x120>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3318      	adds	r3, #24
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fe fec1 	bl	8008a54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe febc 	bl	8008a54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce0:	4b2d      	ldr	r3, [pc, #180]	; (8009d98 <xTaskResumeAll+0x124>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d903      	bls.n	8009cf0 <xTaskResumeAll+0x7c>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	4a2a      	ldr	r2, [pc, #168]	; (8009d98 <xTaskResumeAll+0x124>)
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4a27      	ldr	r2, [pc, #156]	; (8009d9c <xTaskResumeAll+0x128>)
 8009cfe:	441a      	add	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f7fe fe47 	bl	800899a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d10:	4b23      	ldr	r3, [pc, #140]	; (8009da0 <xTaskResumeAll+0x12c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d1a:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <xTaskResumeAll+0x130>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d20:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <xTaskResumeAll+0x120>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1cb      	bne.n	8009cc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d2e:	f000 fb5f 	bl	800a3f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d32:	4b1d      	ldr	r3, [pc, #116]	; (8009da8 <xTaskResumeAll+0x134>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d010      	beq.n	8009d60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d3e:	f000 f847 	bl	8009dd0 <xTaskIncrementTick>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d48:	4b16      	ldr	r3, [pc, #88]	; (8009da4 <xTaskResumeAll+0x130>)
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f1      	bne.n	8009d3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <xTaskResumeAll+0x134>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d60:	4b10      	ldr	r3, [pc, #64]	; (8009da4 <xTaskResumeAll+0x130>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	; (8009dac <xTaskResumeAll+0x138>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d7c:	f001 f9e2 	bl	800b144 <vPortExitCritical>

	return xAlreadyYielded;
 8009d80:	68bb      	ldr	r3, [r7, #8]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20002798 	.word	0x20002798
 8009d90:	20002770 	.word	0x20002770
 8009d94:	20002730 	.word	0x20002730
 8009d98:	20002778 	.word	0x20002778
 8009d9c:	200022a0 	.word	0x200022a0
 8009da0:	2000229c 	.word	0x2000229c
 8009da4:	20002784 	.word	0x20002784
 8009da8:	20002780 	.word	0x20002780
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <xTaskGetTickCount+0x1c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dbc:	687b      	ldr	r3, [r7, #4]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	20002774 	.word	0x20002774

08009dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dda:	4b4f      	ldr	r3, [pc, #316]	; (8009f18 <xTaskIncrementTick+0x148>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f040 808f 	bne.w	8009f02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009de4:	4b4d      	ldr	r3, [pc, #308]	; (8009f1c <xTaskIncrementTick+0x14c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3301      	adds	r3, #1
 8009dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dec:	4a4b      	ldr	r2, [pc, #300]	; (8009f1c <xTaskIncrementTick+0x14c>)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d120      	bne.n	8009e3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009df8:	4b49      	ldr	r3, [pc, #292]	; (8009f20 <xTaskIncrementTick+0x150>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	603b      	str	r3, [r7, #0]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xTaskIncrementTick+0x46>
 8009e18:	4b41      	ldr	r3, [pc, #260]	; (8009f20 <xTaskIncrementTick+0x150>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	4b41      	ldr	r3, [pc, #260]	; (8009f24 <xTaskIncrementTick+0x154>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a3f      	ldr	r2, [pc, #252]	; (8009f20 <xTaskIncrementTick+0x150>)
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	4a3f      	ldr	r2, [pc, #252]	; (8009f24 <xTaskIncrementTick+0x154>)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	4b3e      	ldr	r3, [pc, #248]	; (8009f28 <xTaskIncrementTick+0x158>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	4a3d      	ldr	r2, [pc, #244]	; (8009f28 <xTaskIncrementTick+0x158>)
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	f000 fadb 	bl	800a3f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e3a:	4b3c      	ldr	r3, [pc, #240]	; (8009f2c <xTaskIncrementTick+0x15c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d349      	bcc.n	8009ed8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e44:	4b36      	ldr	r3, [pc, #216]	; (8009f20 <xTaskIncrementTick+0x150>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d104      	bne.n	8009e58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4e:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <xTaskIncrementTick+0x15c>)
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	601a      	str	r2, [r3, #0]
					break;
 8009e56:	e03f      	b.n	8009ed8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e58:	4b31      	ldr	r3, [pc, #196]	; (8009f20 <xTaskIncrementTick+0x150>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d203      	bcs.n	8009e78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e70:	4a2e      	ldr	r2, [pc, #184]	; (8009f2c <xTaskIncrementTick+0x15c>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e76:	e02f      	b.n	8009ed8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fde9 	bl	8008a54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d004      	beq.n	8009e94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3318      	adds	r3, #24
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fde0 	bl	8008a54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <xTaskIncrementTick+0x160>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d903      	bls.n	8009ea8 <xTaskIncrementTick+0xd8>
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	4a22      	ldr	r2, [pc, #136]	; (8009f30 <xTaskIncrementTick+0x160>)
 8009ea6:	6013      	str	r3, [r2, #0]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4a1f      	ldr	r2, [pc, #124]	; (8009f34 <xTaskIncrementTick+0x164>)
 8009eb6:	441a      	add	r2, r3
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f7fe fd6b 	bl	800899a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <xTaskIncrementTick+0x168>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d3b8      	bcc.n	8009e44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ed6:	e7b5      	b.n	8009e44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ed8:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <xTaskIncrementTick+0x168>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ede:	4915      	ldr	r1, [pc, #84]	; (8009f34 <xTaskIncrementTick+0x164>)
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d901      	bls.n	8009ef4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ef4:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <xTaskIncrementTick+0x16c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d007      	beq.n	8009f0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009efc:	2301      	movs	r3, #1
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	e004      	b.n	8009f0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f02:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <xTaskIncrementTick+0x170>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3301      	adds	r3, #1
 8009f08:	4a0d      	ldr	r2, [pc, #52]	; (8009f40 <xTaskIncrementTick+0x170>)
 8009f0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f0c:	697b      	ldr	r3, [r7, #20]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20002798 	.word	0x20002798
 8009f1c:	20002774 	.word	0x20002774
 8009f20:	20002728 	.word	0x20002728
 8009f24:	2000272c 	.word	0x2000272c
 8009f28:	20002788 	.word	0x20002788
 8009f2c:	20002790 	.word	0x20002790
 8009f30:	20002778 	.word	0x20002778
 8009f34:	200022a0 	.word	0x200022a0
 8009f38:	2000229c 	.word	0x2000229c
 8009f3c:	20002784 	.word	0x20002784
 8009f40:	20002780 	.word	0x20002780

08009f44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f4a:	4b2a      	ldr	r3, [pc, #168]	; (8009ff4 <vTaskSwitchContext+0xb0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f52:	4b29      	ldr	r3, [pc, #164]	; (8009ff8 <vTaskSwitchContext+0xb4>)
 8009f54:	2201      	movs	r2, #1
 8009f56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f58:	e046      	b.n	8009fe8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f5a:	4b27      	ldr	r3, [pc, #156]	; (8009ff8 <vTaskSwitchContext+0xb4>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f60:	4b26      	ldr	r3, [pc, #152]	; (8009ffc <vTaskSwitchContext+0xb8>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e010      	b.n	8009f8a <vTaskSwitchContext+0x46>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
}
 8009f80:	bf00      	nop
 8009f82:	e7fe      	b.n	8009f82 <vTaskSwitchContext+0x3e>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3b01      	subs	r3, #1
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	491d      	ldr	r1, [pc, #116]	; (800a000 <vTaskSwitchContext+0xbc>)
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0e4      	beq.n	8009f68 <vTaskSwitchContext+0x24>
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4a15      	ldr	r2, [pc, #84]	; (800a000 <vTaskSwitchContext+0xbc>)
 8009faa:	4413      	add	r3, r2
 8009fac:	60bb      	str	r3, [r7, #8]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	605a      	str	r2, [r3, #4]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d104      	bne.n	8009fce <vTaskSwitchContext+0x8a>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	4a0b      	ldr	r2, [pc, #44]	; (800a004 <vTaskSwitchContext+0xc0>)
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	4a08      	ldr	r2, [pc, #32]	; (8009ffc <vTaskSwitchContext+0xb8>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fde:	4b09      	ldr	r3, [pc, #36]	; (800a004 <vTaskSwitchContext+0xc0>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3354      	adds	r3, #84	; 0x54
 8009fe4:	4a08      	ldr	r2, [pc, #32]	; (800a008 <vTaskSwitchContext+0xc4>)
 8009fe6:	6013      	str	r3, [r2, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20002798 	.word	0x20002798
 8009ff8:	20002784 	.word	0x20002784
 8009ffc:	20002778 	.word	0x20002778
 800a000:	200022a0 	.word	0x200022a0
 800a004:	2000229c 	.word	0x2000229c
 800a008:	2000001c 	.word	0x2000001c

0800a00c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	60fb      	str	r3, [r7, #12]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a032:	4b07      	ldr	r3, [pc, #28]	; (800a050 <vTaskPlaceOnEventList+0x44>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3318      	adds	r3, #24
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7fe fcd1 	bl	80089e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a040:	2101      	movs	r1, #1
 800a042:	6838      	ldr	r0, [r7, #0]
 800a044:	f000 fb7e 	bl	800a744 <prvAddCurrentTaskToDelayedList>
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	2000229c 	.word	0x2000229c

0800a054 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	617b      	str	r3, [r7, #20]
}
 800a078:	bf00      	nop
 800a07a:	e7fe      	b.n	800a07a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a07c:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3318      	adds	r3, #24
 800a082:	4619      	mov	r1, r3
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7fe fc88 	bl	800899a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	68b8      	ldr	r0, [r7, #8]
 800a09a:	f000 fb53 	bl	800a744 <prvAddCurrentTaskToDelayedList>
	}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2000229c 	.word	0x2000229c

0800a0ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	60fb      	str	r3, [r7, #12]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	3318      	adds	r3, #24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe fcb9 	bl	8008a54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e2:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <xTaskRemoveFromEventList+0xb0>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d11d      	bne.n	800a126 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe fcb0 	bl	8008a54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4b19      	ldr	r3, [pc, #100]	; (800a160 <xTaskRemoveFromEventList+0xb4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d903      	bls.n	800a108 <xTaskRemoveFromEventList+0x5c>
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	4a16      	ldr	r2, [pc, #88]	; (800a160 <xTaskRemoveFromEventList+0xb4>)
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4a13      	ldr	r2, [pc, #76]	; (800a164 <xTaskRemoveFromEventList+0xb8>)
 800a116:	441a      	add	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3304      	adds	r3, #4
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f7fe fc3b 	bl	800899a <vListInsertEnd>
 800a124:	e005      	b.n	800a132 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	3318      	adds	r3, #24
 800a12a:	4619      	mov	r1, r3
 800a12c:	480e      	ldr	r0, [pc, #56]	; (800a168 <xTaskRemoveFromEventList+0xbc>)
 800a12e:	f7fe fc34 	bl	800899a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <xTaskRemoveFromEventList+0xc0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d905      	bls.n	800a14c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a140:	2301      	movs	r3, #1
 800a142:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a144:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <xTaskRemoveFromEventList+0xc4>)
 800a146:	2201      	movs	r2, #1
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	e001      	b.n	800a150 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a150:	697b      	ldr	r3, [r7, #20]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20002798 	.word	0x20002798
 800a160:	20002778 	.word	0x20002778
 800a164:	200022a0 	.word	0x200022a0
 800a168:	20002730 	.word	0x20002730
 800a16c:	2000229c 	.word	0x2000229c
 800a170:	20002784 	.word	0x20002784

0800a174 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <vTaskInternalSetTimeOutState+0x24>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <vTaskInternalSetTimeOutState+0x28>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	605a      	str	r2, [r3, #4]
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	20002788 	.word	0x20002788
 800a19c:	20002774 	.word	0x20002774

0800a1a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	613b      	str	r3, [r7, #16]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10a      	bne.n	800a1e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60fb      	str	r3, [r7, #12]
}
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1e2:	f000 ff7f 	bl	800b0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1e6:	4b1d      	ldr	r3, [pc, #116]	; (800a25c <xTaskCheckForTimeOut+0xbc>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fe:	d102      	bne.n	800a206 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e023      	b.n	800a24e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	4b15      	ldr	r3, [pc, #84]	; (800a260 <xTaskCheckForTimeOut+0xc0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d007      	beq.n	800a222 <xTaskCheckForTimeOut+0x82>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d302      	bcc.n	800a222 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a21c:	2301      	movs	r3, #1
 800a21e:	61fb      	str	r3, [r7, #28]
 800a220:	e015      	b.n	800a24e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d20b      	bcs.n	800a244 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	1ad2      	subs	r2, r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff ff9b 	bl	800a174 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	61fb      	str	r3, [r7, #28]
 800a242:	e004      	b.n	800a24e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a24a:	2301      	movs	r3, #1
 800a24c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a24e:	f000 ff79 	bl	800b144 <vPortExitCritical>

	return xReturn;
 800a252:	69fb      	ldr	r3, [r7, #28]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3720      	adds	r7, #32
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20002774 	.word	0x20002774
 800a260:	20002788 	.word	0x20002788

0800a264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a264:	b480      	push	{r7}
 800a266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a268:	4b03      	ldr	r3, [pc, #12]	; (800a278 <vTaskMissedYield+0x14>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
}
 800a26e:	bf00      	nop
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	20002784 	.word	0x20002784

0800a27c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a284:	f000 f852 	bl	800a32c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a288:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <prvIdleTask+0x28>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d9f9      	bls.n	800a284 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a290:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <prvIdleTask+0x2c>)
 800a292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2a0:	e7f0      	b.n	800a284 <prvIdleTask+0x8>
 800a2a2:	bf00      	nop
 800a2a4:	200022a0 	.word	0x200022a0
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
 800a2b6:	e00c      	b.n	800a2d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4a12      	ldr	r2, [pc, #72]	; (800a30c <prvInitialiseTaskLists+0x60>)
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fb3a 	bl	8008940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	607b      	str	r3, [r7, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b37      	cmp	r3, #55	; 0x37
 800a2d6:	d9ef      	bls.n	800a2b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2d8:	480d      	ldr	r0, [pc, #52]	; (800a310 <prvInitialiseTaskLists+0x64>)
 800a2da:	f7fe fb31 	bl	8008940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2de:	480d      	ldr	r0, [pc, #52]	; (800a314 <prvInitialiseTaskLists+0x68>)
 800a2e0:	f7fe fb2e 	bl	8008940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2e4:	480c      	ldr	r0, [pc, #48]	; (800a318 <prvInitialiseTaskLists+0x6c>)
 800a2e6:	f7fe fb2b 	bl	8008940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ea:	480c      	ldr	r0, [pc, #48]	; (800a31c <prvInitialiseTaskLists+0x70>)
 800a2ec:	f7fe fb28 	bl	8008940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2f0:	480b      	ldr	r0, [pc, #44]	; (800a320 <prvInitialiseTaskLists+0x74>)
 800a2f2:	f7fe fb25 	bl	8008940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <prvInitialiseTaskLists+0x78>)
 800a2f8:	4a05      	ldr	r2, [pc, #20]	; (800a310 <prvInitialiseTaskLists+0x64>)
 800a2fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <prvInitialiseTaskLists+0x7c>)
 800a2fe:	4a05      	ldr	r2, [pc, #20]	; (800a314 <prvInitialiseTaskLists+0x68>)
 800a300:	601a      	str	r2, [r3, #0]
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	200022a0 	.word	0x200022a0
 800a310:	20002700 	.word	0x20002700
 800a314:	20002714 	.word	0x20002714
 800a318:	20002730 	.word	0x20002730
 800a31c:	20002744 	.word	0x20002744
 800a320:	2000275c 	.word	0x2000275c
 800a324:	20002728 	.word	0x20002728
 800a328:	2000272c 	.word	0x2000272c

0800a32c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a332:	e019      	b.n	800a368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a334:	f000 fed6 	bl	800b0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a338:	4b10      	ldr	r3, [pc, #64]	; (800a37c <prvCheckTasksWaitingTermination+0x50>)
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3304      	adds	r3, #4
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe fb85 	bl	8008a54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a34a:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <prvCheckTasksWaitingTermination+0x54>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3b01      	subs	r3, #1
 800a350:	4a0b      	ldr	r2, [pc, #44]	; (800a380 <prvCheckTasksWaitingTermination+0x54>)
 800a352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a354:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <prvCheckTasksWaitingTermination+0x58>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3b01      	subs	r3, #1
 800a35a:	4a0a      	ldr	r2, [pc, #40]	; (800a384 <prvCheckTasksWaitingTermination+0x58>)
 800a35c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a35e:	f000 fef1 	bl	800b144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f810 	bl	800a388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a368:	4b06      	ldr	r3, [pc, #24]	; (800a384 <prvCheckTasksWaitingTermination+0x58>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e1      	bne.n	800a334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20002744 	.word	0x20002744
 800a380:	20002770 	.word	0x20002770
 800a384:	20002758 	.word	0x20002758

0800a388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3354      	adds	r3, #84	; 0x54
 800a394:	4618      	mov	r0, r3
 800a396:	f002 f9e9 	bl	800c76c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d108      	bne.n	800a3b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f001 f889 	bl	800b4c0 <vPortFree>
				vPortFree( pxTCB );
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 f886 	bl	800b4c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3b4:	e018      	b.n	800a3e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d103      	bne.n	800a3c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 f87d 	bl	800b4c0 <vPortFree>
	}
 800a3c6:	e00f      	b.n	800a3e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d00a      	beq.n	800a3e8 <prvDeleteTCB+0x60>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	60fb      	str	r3, [r7, #12]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <prvDeleteTCB+0x5e>
	}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvResetNextTaskUnblockTime+0x38>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <prvResetNextTaskUnblockTime+0x3c>)
 800a402:	f04f 32ff 	mov.w	r2, #4294967295
 800a406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a408:	e008      	b.n	800a41c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40a:	4b07      	ldr	r3, [pc, #28]	; (800a428 <prvResetNextTaskUnblockTime+0x38>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	4a04      	ldr	r2, [pc, #16]	; (800a42c <prvResetNextTaskUnblockTime+0x3c>)
 800a41a:	6013      	str	r3, [r2, #0]
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	20002728 	.word	0x20002728
 800a42c:	20002790 	.word	0x20002790

0800a430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a436:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <xTaskGetSchedulerState+0x34>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a43e:	2301      	movs	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	e008      	b.n	800a456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a444:	4b08      	ldr	r3, [pc, #32]	; (800a468 <xTaskGetSchedulerState+0x38>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a44c:	2302      	movs	r3, #2
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	e001      	b.n	800a456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a456:	687b      	ldr	r3, [r7, #4]
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	2000277c 	.word	0x2000277c
 800a468:	20002798 	.word	0x20002798

0800a46c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d051      	beq.n	800a526 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	4b2a      	ldr	r3, [pc, #168]	; (800a530 <xTaskPriorityInherit+0xc4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d241      	bcs.n	800a514 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	2b00      	cmp	r3, #0
 800a496:	db06      	blt.n	800a4a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <xTaskPriorityInherit+0xc4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6959      	ldr	r1, [r3, #20]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4a1f      	ldr	r2, [pc, #124]	; (800a534 <xTaskPriorityInherit+0xc8>)
 800a4b8:	4413      	add	r3, r2
 800a4ba:	4299      	cmp	r1, r3
 800a4bc:	d122      	bne.n	800a504 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fac6 	bl	8008a54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4c8:	4b19      	ldr	r3, [pc, #100]	; (800a530 <xTaskPriorityInherit+0xc4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d6:	4b18      	ldr	r3, [pc, #96]	; (800a538 <xTaskPriorityInherit+0xcc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d903      	bls.n	800a4e6 <xTaskPriorityInherit+0x7a>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	4a15      	ldr	r2, [pc, #84]	; (800a538 <xTaskPriorityInherit+0xcc>)
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <xTaskPriorityInherit+0xc8>)
 800a4f4:	441a      	add	r2, r3
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	f7fe fa4c 	bl	800899a <vListInsertEnd>
 800a502:	e004      	b.n	800a50e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a504:	4b0a      	ldr	r3, [pc, #40]	; (800a530 <xTaskPriorityInherit+0xc4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a50e:	2301      	movs	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	e008      	b.n	800a526 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a518:	4b05      	ldr	r3, [pc, #20]	; (800a530 <xTaskPriorityInherit+0xc4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	429a      	cmp	r2, r3
 800a520:	d201      	bcs.n	800a526 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a522:	2301      	movs	r3, #1
 800a524:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a526:	68fb      	ldr	r3, [r7, #12]
	}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2000229c 	.word	0x2000229c
 800a534:	200022a0 	.word	0x200022a0
 800a538:	20002778 	.word	0x20002778

0800a53c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a548:	2300      	movs	r3, #0
 800a54a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d056      	beq.n	800a600 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a552:	4b2e      	ldr	r3, [pc, #184]	; (800a60c <xTaskPriorityDisinherit+0xd0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d00a      	beq.n	800a572 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	60fb      	str	r3, [r7, #12]
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	60bb      	str	r3, [r7, #8]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a594:	1e5a      	subs	r2, r3, #1
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d02c      	beq.n	800a600 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d128      	bne.n	800a600 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fa4e 	bl	8008a54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <xTaskPriorityDisinherit+0xd4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d903      	bls.n	800a5e0 <xTaskPriorityDisinherit+0xa4>
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	4a0c      	ldr	r2, [pc, #48]	; (800a610 <xTaskPriorityDisinherit+0xd4>)
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4a09      	ldr	r2, [pc, #36]	; (800a614 <xTaskPriorityDisinherit+0xd8>)
 800a5ee:	441a      	add	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f7fe f9cf 	bl	800899a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a600:	697b      	ldr	r3, [r7, #20]
	}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	2000229c 	.word	0x2000229c
 800a610:	20002778 	.word	0x20002778
 800a614:	200022a0 	.word	0x200022a0

0800a618 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a626:	2301      	movs	r3, #1
 800a628:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d06a      	beq.n	800a706 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	60fb      	str	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d902      	bls.n	800a65e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	61fb      	str	r3, [r7, #28]
 800a65c:	e002      	b.n	800a664 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a662:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d04b      	beq.n	800a706 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	429a      	cmp	r2, r3
 800a676:	d146      	bne.n	800a706 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a678:	4b25      	ldr	r3, [pc, #148]	; (800a710 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d10a      	bne.n	800a698 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	60bb      	str	r3, [r7, #8]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	69fa      	ldr	r2, [r7, #28]
 800a6a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	db04      	blt.n	800a6b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	6959      	ldr	r1, [r3, #20]
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4a13      	ldr	r2, [pc, #76]	; (800a714 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a6c6:	4413      	add	r3, r2
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	d11c      	bne.n	800a706 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe f9bf 	bl	8008a54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6da:	4b0f      	ldr	r3, [pc, #60]	; (800a718 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d903      	bls.n	800a6ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	4a0c      	ldr	r2, [pc, #48]	; (800a718 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6e8:	6013      	str	r3, [r2, #0]
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4a07      	ldr	r2, [pc, #28]	; (800a714 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a6f8:	441a      	add	r2, r3
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f7fe f94a 	bl	800899a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a706:	bf00      	nop
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	2000229c 	.word	0x2000229c
 800a714:	200022a0 	.word	0x200022a0
 800a718:	20002778 	.word	0x20002778

0800a71c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <pvTaskIncrementMutexHeldCount+0x24>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d004      	beq.n	800a732 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a728:	4b05      	ldr	r3, [pc, #20]	; (800a740 <pvTaskIncrementMutexHeldCount+0x24>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a72e:	3201      	adds	r2, #1
 800a730:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a732:	4b03      	ldr	r3, [pc, #12]	; (800a740 <pvTaskIncrementMutexHeldCount+0x24>)
 800a734:	681b      	ldr	r3, [r3, #0]
	}
 800a736:	4618      	mov	r0, r3
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	2000229c 	.word	0x2000229c

0800a744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a74e:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a754:	4b20      	ldr	r3, [pc, #128]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3304      	adds	r3, #4
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe f97a 	bl	8008a54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a766:	d10a      	bne.n	800a77e <prvAddCurrentTaskToDelayedList+0x3a>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d007      	beq.n	800a77e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a76e:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3304      	adds	r3, #4
 800a774:	4619      	mov	r1, r3
 800a776:	4819      	ldr	r0, [pc, #100]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x98>)
 800a778:	f7fe f90f 	bl	800899a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a77c:	e026      	b.n	800a7cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4413      	add	r3, r2
 800a784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a786:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	429a      	cmp	r2, r3
 800a794:	d209      	bcs.n	800a7aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a796:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3304      	adds	r3, #4
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7fe f91d 	bl	80089e2 <vListInsert>
}
 800a7a8:	e010      	b.n	800a7cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fe f913 	bl	80089e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d202      	bcs.n	800a7cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7c6:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	6013      	str	r3, [r2, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20002774 	.word	0x20002774
 800a7d8:	2000229c 	.word	0x2000229c
 800a7dc:	2000275c 	.word	0x2000275c
 800a7e0:	2000272c 	.word	0x2000272c
 800a7e4:	20002728 	.word	0x20002728
 800a7e8:	20002790 	.word	0x20002790

0800a7ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7f6:	f000 fb07 	bl	800ae08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7fa:	4b1c      	ldr	r3, [pc, #112]	; (800a86c <xTimerCreateTimerTask+0x80>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d021      	beq.n	800a846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a802:	2300      	movs	r3, #0
 800a804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a80a:	1d3a      	adds	r2, r7, #4
 800a80c:	f107 0108 	add.w	r1, r7, #8
 800a810:	f107 030c 	add.w	r3, r7, #12
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe f879 	bl	800890c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	9202      	str	r2, [sp, #8]
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	2302      	movs	r3, #2
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	460a      	mov	r2, r1
 800a82c:	4910      	ldr	r1, [pc, #64]	; (800a870 <xTimerCreateTimerTask+0x84>)
 800a82e:	4811      	ldr	r0, [pc, #68]	; (800a874 <xTimerCreateTimerTask+0x88>)
 800a830:	f7fe ffb6 	bl	80097a0 <xTaskCreateStatic>
 800a834:	4603      	mov	r3, r0
 800a836:	4a10      	ldr	r2, [pc, #64]	; (800a878 <xTimerCreateTimerTask+0x8c>)
 800a838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <xTimerCreateTimerTask+0x8c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a842:	2301      	movs	r3, #1
 800a844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	613b      	str	r3, [r7, #16]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a862:	697b      	ldr	r3, [r7, #20]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	200027cc 	.word	0x200027cc
 800a870:	08010b0c 	.word	0x08010b0c
 800a874:	0800a9b1 	.word	0x0800a9b1
 800a878:	200027d0 	.word	0x200027d0

0800a87c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	623b      	str	r3, [r7, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8aa:	4b1a      	ldr	r3, [pc, #104]	; (800a914 <xTimerGenericCommand+0x98>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d02a      	beq.n	800a908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b05      	cmp	r3, #5
 800a8c2:	dc18      	bgt.n	800a8f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8c4:	f7ff fdb4 	bl	800a430 <xTaskGetSchedulerState>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d109      	bne.n	800a8e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8ce:	4b11      	ldr	r3, [pc, #68]	; (800a914 <xTimerGenericCommand+0x98>)
 800a8d0:	6818      	ldr	r0, [r3, #0]
 800a8d2:	f107 0110 	add.w	r1, r7, #16
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8da:	f7fe fa55 	bl	8008d88 <xQueueGenericSend>
 800a8de:	6278      	str	r0, [r7, #36]	; 0x24
 800a8e0:	e012      	b.n	800a908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8e2:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <xTimerGenericCommand+0x98>)
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f107 0110 	add.w	r1, r7, #16
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f7fe fa4b 	bl	8008d88 <xQueueGenericSend>
 800a8f2:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f4:	e008      	b.n	800a908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8f6:	4b07      	ldr	r3, [pc, #28]	; (800a914 <xTimerGenericCommand+0x98>)
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f107 0110 	add.w	r1, r7, #16
 800a8fe:	2300      	movs	r3, #0
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	f7fe fb3f 	bl	8008f84 <xQueueGenericSendFromISR>
 800a906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3728      	adds	r7, #40	; 0x28
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	200027cc 	.word	0x200027cc

0800a918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b088      	sub	sp, #32
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a922:	4b22      	ldr	r3, [pc, #136]	; (800a9ac <prvProcessExpiredTimer+0x94>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	3304      	adds	r3, #4
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe f88f 	bl	8008a54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	d022      	beq.n	800a98a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	699a      	ldr	r2, [r3, #24]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	18d1      	adds	r1, r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	6978      	ldr	r0, [r7, #20]
 800a952:	f000 f8d1 	bl	800aaf8 <prvInsertTimerInActiveList>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01f      	beq.n	800a99c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a95c:	2300      	movs	r3, #0
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	2100      	movs	r1, #0
 800a966:	6978      	ldr	r0, [r7, #20]
 800a968:	f7ff ff88 	bl	800a87c <xTimerGenericCommand>
 800a96c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d113      	bne.n	800a99c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	60fb      	str	r3, [r7, #12]
}
 800a986:	bf00      	nop
 800a988:	e7fe      	b.n	800a988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	6978      	ldr	r0, [r7, #20]
 800a9a2:	4798      	blx	r3
}
 800a9a4:	bf00      	nop
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	200027c4 	.word	0x200027c4

0800a9b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9b8:	f107 0308 	add.w	r3, r7, #8
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f857 	bl	800aa70 <prvGetNextExpireTime>
 800a9c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f000 f803 	bl	800a9d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9ce:	f000 f8d5 	bl	800ab7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9d2:	e7f1      	b.n	800a9b8 <prvTimerTask+0x8>

0800a9d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9de:	f7ff f93b 	bl	8009c58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9e2:	f107 0308 	add.w	r3, r7, #8
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 f866 	bl	800aab8 <prvSampleTimeNow>
 800a9ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d130      	bne.n	800aa56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10a      	bne.n	800aa10 <prvProcessTimerOrBlockTask+0x3c>
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d806      	bhi.n	800aa10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa02:	f7ff f937 	bl	8009c74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa06:	68f9      	ldr	r1, [r7, #12]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff ff85 	bl	800a918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa0e:	e024      	b.n	800aa5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d008      	beq.n	800aa28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <prvProcessTimerOrBlockTask+0x90>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <prvProcessTimerOrBlockTask+0x50>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <prvProcessTimerOrBlockTask+0x52>
 800aa24:	2300      	movs	r3, #0
 800aa26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa28:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <prvProcessTimerOrBlockTask+0x94>)
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4619      	mov	r1, r3
 800aa36:	f7fe fe7f 	bl	8009738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa3a:	f7ff f91b 	bl	8009c74 <xTaskResumeAll>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa44:	4b09      	ldr	r3, [pc, #36]	; (800aa6c <prvProcessTimerOrBlockTask+0x98>)
 800aa46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	f3bf 8f6f 	isb	sy
}
 800aa54:	e001      	b.n	800aa5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa56:	f7ff f90d 	bl	8009c74 <xTaskResumeAll>
}
 800aa5a:	bf00      	nop
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	200027c8 	.word	0x200027c8
 800aa68:	200027cc 	.word	0x200027cc
 800aa6c:	e000ed04 	.word	0xe000ed04

0800aa70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa78:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <prvGetNextExpireTime+0x44>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <prvGetNextExpireTime+0x16>
 800aa82:	2201      	movs	r2, #1
 800aa84:	e000      	b.n	800aa88 <prvGetNextExpireTime+0x18>
 800aa86:	2200      	movs	r2, #0
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d105      	bne.n	800aaa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa94:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <prvGetNextExpireTime+0x44>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	e001      	b.n	800aaa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	200027c4 	.word	0x200027c4

0800aab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aac0:	f7ff f976 	bl	8009db0 <xTaskGetTickCount>
 800aac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <prvSampleTimeNow+0x3c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d205      	bcs.n	800aadc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aad0:	f000 f936 	bl	800ad40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e002      	b.n	800aae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aae2:	4a04      	ldr	r2, [pc, #16]	; (800aaf4 <prvSampleTimeNow+0x3c>)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aae8:	68fb      	ldr	r3, [r7, #12]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200027d4 	.word	0x200027d4

0800aaf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d812      	bhi.n	800ab44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	1ad2      	subs	r2, r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d302      	bcc.n	800ab32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	e01b      	b.n	800ab6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab32:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <prvInsertTimerInActiveList+0x7c>)
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f7fd ff50 	bl	80089e2 <vListInsert>
 800ab42:	e012      	b.n	800ab6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d206      	bcs.n	800ab5a <prvInsertTimerInActiveList+0x62>
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d302      	bcc.n	800ab5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e007      	b.n	800ab6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab5a:	4b07      	ldr	r3, [pc, #28]	; (800ab78 <prvInsertTimerInActiveList+0x80>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f7fd ff3c 	bl	80089e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab6a:	697b      	ldr	r3, [r7, #20]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	200027c8 	.word	0x200027c8
 800ab78:	200027c4 	.word	0x200027c4

0800ab7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08e      	sub	sp, #56	; 0x38
 800ab80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab82:	e0ca      	b.n	800ad1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	da18      	bge.n	800abbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab8a:	1d3b      	adds	r3, r7, #4
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10a      	bne.n	800abac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	61fb      	str	r3, [r7, #28]
}
 800aba8:	bf00      	nop
 800abaa:	e7fe      	b.n	800abaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb2:	6850      	ldr	r0, [r2, #4]
 800abb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb6:	6892      	ldr	r2, [r2, #8]
 800abb8:	4611      	mov	r1, r2
 800abba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f2c0 80aa 	blt.w	800ad18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	3304      	adds	r3, #4
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fd ff3d 	bl	8008a54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abda:	463b      	mov	r3, r7
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff ff6b 	bl	800aab8 <prvSampleTimeNow>
 800abe2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b09      	cmp	r3, #9
 800abe8:	f200 8097 	bhi.w	800ad1a <prvProcessReceivedCommands+0x19e>
 800abec:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <prvProcessReceivedCommands+0x78>)
 800abee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf2:	bf00      	nop
 800abf4:	0800ac1d 	.word	0x0800ac1d
 800abf8:	0800ac1d 	.word	0x0800ac1d
 800abfc:	0800ac1d 	.word	0x0800ac1d
 800ac00:	0800ac91 	.word	0x0800ac91
 800ac04:	0800aca5 	.word	0x0800aca5
 800ac08:	0800acef 	.word	0x0800acef
 800ac0c:	0800ac1d 	.word	0x0800ac1d
 800ac10:	0800ac1d 	.word	0x0800ac1d
 800ac14:	0800ac91 	.word	0x0800ac91
 800ac18:	0800aca5 	.word	0x0800aca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac22:	f043 0301 	orr.w	r3, r3, #1
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	18d1      	adds	r1, r2, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3c:	f7ff ff5c 	bl	800aaf8 <prvInsertTimerInActiveList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d069      	beq.n	800ad1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d05e      	beq.n	800ad1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	441a      	add	r2, r3
 800ac64:	2300      	movs	r3, #0
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac6e:	f7ff fe05 	bl	800a87c <xTimerGenericCommand>
 800ac72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d14f      	bne.n	800ad1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	61bb      	str	r3, [r7, #24]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac96:	f023 0301 	bic.w	r3, r3, #1
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aca2:	e03a      	b.n	800ad1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	617b      	str	r3, [r7, #20]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	699a      	ldr	r2, [r3, #24]
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	18d1      	adds	r1, r2, r3
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace8:	f7ff ff06 	bl	800aaf8 <prvInsertTimerInActiveList>
					break;
 800acec:	e015      	b.n	800ad1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800acfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acfe:	f000 fbdf 	bl	800b4c0 <vPortFree>
 800ad02:	e00a      	b.n	800ad1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad0a:	f023 0301 	bic.w	r3, r3, #1
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad16:	e000      	b.n	800ad1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad1a:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <prvProcessReceivedCommands+0x1c0>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	1d39      	adds	r1, r7, #4
 800ad20:	2200      	movs	r2, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe f9ca 	bl	80090bc <xQueueReceive>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f47f af2a 	bne.w	800ab84 <prvProcessReceivedCommands+0x8>
	}
}
 800ad30:	bf00      	nop
 800ad32:	bf00      	nop
 800ad34:	3730      	adds	r7, #48	; 0x30
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200027cc 	.word	0x200027cc

0800ad40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad46:	e048      	b.n	800adda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad48:	4b2d      	ldr	r3, [pc, #180]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad52:	4b2b      	ldr	r3, [pc, #172]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fd fe77 	bl	8008a54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d02e      	beq.n	800adda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	4413      	add	r3, r2
 800ad84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d90e      	bls.n	800adac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad9a:	4b19      	ldr	r3, [pc, #100]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3304      	adds	r3, #4
 800ada2:	4619      	mov	r1, r3
 800ada4:	4610      	mov	r0, r2
 800ada6:	f7fd fe1c 	bl	80089e2 <vListInsert>
 800adaa:	e016      	b.n	800adda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adac:	2300      	movs	r3, #0
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	2300      	movs	r3, #0
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	2100      	movs	r1, #0
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff fd60 	bl	800a87c <xTimerGenericCommand>
 800adbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <prvSwitchTimerLists+0x9a>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	603b      	str	r3, [r7, #0]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1b1      	bne.n	800ad48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ade4:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800adea:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <prvSwitchTimerLists+0xc4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a04      	ldr	r2, [pc, #16]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800adf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800adf2:	4a04      	ldr	r2, [pc, #16]	; (800ae04 <prvSwitchTimerLists+0xc4>)
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	6013      	str	r3, [r2, #0]
}
 800adf8:	bf00      	nop
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	200027c4 	.word	0x200027c4
 800ae04:	200027c8 	.word	0x200027c8

0800ae08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae0e:	f000 f969 	bl	800b0e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <prvCheckForValidListAndQueue+0x60>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d120      	bne.n	800ae5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae1a:	4814      	ldr	r0, [pc, #80]	; (800ae6c <prvCheckForValidListAndQueue+0x64>)
 800ae1c:	f7fd fd90 	bl	8008940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae20:	4813      	ldr	r0, [pc, #76]	; (800ae70 <prvCheckForValidListAndQueue+0x68>)
 800ae22:	f7fd fd8d 	bl	8008940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae26:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <prvCheckForValidListAndQueue+0x6c>)
 800ae28:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <prvCheckForValidListAndQueue+0x64>)
 800ae2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae2c:	4b12      	ldr	r3, [pc, #72]	; (800ae78 <prvCheckForValidListAndQueue+0x70>)
 800ae2e:	4a10      	ldr	r2, [pc, #64]	; (800ae70 <prvCheckForValidListAndQueue+0x68>)
 800ae30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae32:	2300      	movs	r3, #0
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	4b11      	ldr	r3, [pc, #68]	; (800ae7c <prvCheckForValidListAndQueue+0x74>)
 800ae38:	4a11      	ldr	r2, [pc, #68]	; (800ae80 <prvCheckForValidListAndQueue+0x78>)
 800ae3a:	2110      	movs	r1, #16
 800ae3c:	200a      	movs	r0, #10
 800ae3e:	f7fd fe9b 	bl	8008b78 <xQueueGenericCreateStatic>
 800ae42:	4603      	mov	r3, r0
 800ae44:	4a08      	ldr	r2, [pc, #32]	; (800ae68 <prvCheckForValidListAndQueue+0x60>)
 800ae46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae48:	4b07      	ldr	r3, [pc, #28]	; (800ae68 <prvCheckForValidListAndQueue+0x60>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <prvCheckForValidListAndQueue+0x60>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	490b      	ldr	r1, [pc, #44]	; (800ae84 <prvCheckForValidListAndQueue+0x7c>)
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fe fc44 	bl	80096e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae5c:	f000 f972 	bl	800b144 <vPortExitCritical>
}
 800ae60:	bf00      	nop
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	200027cc 	.word	0x200027cc
 800ae6c:	2000279c 	.word	0x2000279c
 800ae70:	200027b0 	.word	0x200027b0
 800ae74:	200027c4 	.word	0x200027c4
 800ae78:	200027c8 	.word	0x200027c8
 800ae7c:	20002878 	.word	0x20002878
 800ae80:	200027d8 	.word	0x200027d8
 800ae84:	08010b14 	.word	0x08010b14

0800ae88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3b04      	subs	r3, #4
 800ae98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3b04      	subs	r3, #4
 800aea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f023 0201 	bic.w	r2, r3, #1
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3b04      	subs	r3, #4
 800aeb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aeb8:	4a0c      	ldr	r2, [pc, #48]	; (800aeec <pxPortInitialiseStack+0x64>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3b14      	subs	r3, #20
 800aec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3b04      	subs	r3, #4
 800aece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f06f 0202 	mvn.w	r2, #2
 800aed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3b20      	subs	r3, #32
 800aedc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aede:	68fb      	ldr	r3, [r7, #12]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	0800aef1 	.word	0x0800aef1

0800aef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aefa:	4b12      	ldr	r3, [pc, #72]	; (800af44 <prvTaskExitError+0x54>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af02:	d00a      	beq.n	800af1a <prvTaskExitError+0x2a>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	60fb      	str	r3, [r7, #12]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <prvTaskExitError+0x28>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	60bb      	str	r3, [r7, #8]
}
 800af2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af2e:	bf00      	nop
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0fc      	beq.n	800af30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000018 	.word	0x20000018
	...

0800af50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <pxCurrentTCBConst2>)
 800af52:	6819      	ldr	r1, [r3, #0]
 800af54:	6808      	ldr	r0, [r1, #0]
 800af56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	f380 8809 	msr	PSP, r0
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8811 	msr	BASEPRI, r0
 800af6a:	4770      	bx	lr
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst2>:
 800af70:	2000229c 	.word	0x2000229c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop

0800af78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <prvPortStartFirstTask+0x24>)
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	6800      	ldr	r0, [r0, #0]
 800af7e:	f380 8808 	msr	MSP, r0
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8814 	msr	CONTROL, r0
 800af8a:	b662      	cpsie	i
 800af8c:	b661      	cpsie	f
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	df00      	svc	0
 800af98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af9a:	bf00      	nop
 800af9c:	e000ed08 	.word	0xe000ed08

0800afa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afa6:	4b46      	ldr	r3, [pc, #280]	; (800b0c0 <xPortStartScheduler+0x120>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a46      	ldr	r2, [pc, #280]	; (800b0c4 <xPortStartScheduler+0x124>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d10a      	bne.n	800afc6 <xPortStartScheduler+0x26>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	613b      	str	r3, [r7, #16]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afc6:	4b3e      	ldr	r3, [pc, #248]	; (800b0c0 <xPortStartScheduler+0x120>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a3f      	ldr	r2, [pc, #252]	; (800b0c8 <xPortStartScheduler+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10a      	bne.n	800afe6 <xPortStartScheduler+0x46>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	60fb      	str	r3, [r7, #12]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afe6:	4b39      	ldr	r3, [pc, #228]	; (800b0cc <xPortStartScheduler+0x12c>)
 800afe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	22ff      	movs	r2, #255	; 0xff
 800aff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <xPortStartScheduler+0x130>)
 800b00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b00e:	4b31      	ldr	r3, [pc, #196]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b010:	2207      	movs	r2, #7
 800b012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b014:	e009      	b.n	800b02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b016:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	4a2d      	ldr	r2, [pc, #180]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b80      	cmp	r3, #128	; 0x80
 800b034:	d0ef      	beq.n	800b016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b036:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f1c3 0307 	rsb	r3, r3, #7
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d00a      	beq.n	800b058 <xPortStartScheduler+0xb8>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60bb      	str	r3, [r7, #8]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b058:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	4a1d      	ldr	r2, [pc, #116]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b062:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b06a:	4a1a      	ldr	r2, [pc, #104]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	b2da      	uxtb	r2, r3
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b08e:	f000 f8dd 	bl	800b24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <xPortStartScheduler+0x13c>)
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b098:	f000 f8fc 	bl	800b294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b09c:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <xPortStartScheduler+0x140>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a0f      	ldr	r2, [pc, #60]	; (800b0e0 <xPortStartScheduler+0x140>)
 800b0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0a8:	f7ff ff66 	bl	800af78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ac:	f7fe ff4a 	bl	8009f44 <vTaskSwitchContext>
	prvTaskExitError();
 800b0b0:	f7ff ff1e 	bl	800aef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	e000ed00 	.word	0xe000ed00
 800b0c4:	410fc271 	.word	0x410fc271
 800b0c8:	410fc270 	.word	0x410fc270
 800b0cc:	e000e400 	.word	0xe000e400
 800b0d0:	200028c8 	.word	0x200028c8
 800b0d4:	200028cc 	.word	0x200028cc
 800b0d8:	e000ed20 	.word	0xe000ed20
 800b0dc:	20000018 	.word	0x20000018
 800b0e0:	e000ef34 	.word	0xe000ef34

0800b0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	607b      	str	r3, [r7, #4]
}
 800b0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <vPortEnterCritical+0x58>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	4a0d      	ldr	r2, [pc, #52]	; (800b13c <vPortEnterCritical+0x58>)
 800b106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <vPortEnterCritical+0x58>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d10f      	bne.n	800b130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <vPortEnterCritical+0x5c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <vPortEnterCritical+0x4c>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	603b      	str	r3, [r7, #0]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <vPortEnterCritical+0x4a>
	}
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20000018 	.word	0x20000018
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b14a:	4b12      	ldr	r3, [pc, #72]	; (800b194 <vPortExitCritical+0x50>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <vPortExitCritical+0x24>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	607b      	str	r3, [r7, #4]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b168:	4b0a      	ldr	r3, [pc, #40]	; (800b194 <vPortExitCritical+0x50>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <vPortExitCritical+0x50>)
 800b170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b172:	4b08      	ldr	r3, [pc, #32]	; (800b194 <vPortExitCritical+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d105      	bne.n	800b186 <vPortExitCritical+0x42>
 800b17a:	2300      	movs	r3, #0
 800b17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f383 8811 	msr	BASEPRI, r3
}
 800b184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20000018 	.word	0x20000018
	...

0800b1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1a0:	f3ef 8009 	mrs	r0, PSP
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	4b15      	ldr	r3, [pc, #84]	; (800b200 <pxCurrentTCBConst>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	f01e 0f10 	tst.w	lr, #16
 800b1b0:	bf08      	it	eq
 800b1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ba:	6010      	str	r0, [r2, #0]
 800b1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1c4:	f380 8811 	msr	BASEPRI, r0
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f7fe feb8 	bl	8009f44 <vTaskSwitchContext>
 800b1d4:	f04f 0000 	mov.w	r0, #0
 800b1d8:	f380 8811 	msr	BASEPRI, r0
 800b1dc:	bc09      	pop	{r0, r3}
 800b1de:	6819      	ldr	r1, [r3, #0]
 800b1e0:	6808      	ldr	r0, [r1, #0]
 800b1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e6:	f01e 0f10 	tst.w	lr, #16
 800b1ea:	bf08      	it	eq
 800b1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1f0:	f380 8809 	msr	PSP, r0
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst>:
 800b200:	2000229c 	.word	0x2000229c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop

0800b208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	607b      	str	r3, [r7, #4]
}
 800b220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b222:	f7fe fdd5 	bl	8009dd0 <xTaskIncrementTick>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b22c:	4b06      	ldr	r3, [pc, #24]	; (800b248 <xPortSysTickHandler+0x40>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f383 8811 	msr	BASEPRI, r3
}
 800b23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b250:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <vPortSetupTimerInterrupt+0x38>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <vPortSetupTimerInterrupt+0x3c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <vPortSetupTimerInterrupt+0x40>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	099b      	lsrs	r3, r3, #6
 800b268:	4a09      	ldr	r2, [pc, #36]	; (800b290 <vPortSetupTimerInterrupt+0x44>)
 800b26a:	3b01      	subs	r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b26e:	4b04      	ldr	r3, [pc, #16]	; (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b270:	2207      	movs	r2, #7
 800b272:	601a      	str	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000e010 	.word	0xe000e010
 800b284:	e000e018 	.word	0xe000e018
 800b288:	2000000c 	.word	0x2000000c
 800b28c:	10624dd3 	.word	0x10624dd3
 800b290:	e000e014 	.word	0xe000e014

0800b294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2a4 <vPortEnableVFP+0x10>
 800b298:	6801      	ldr	r1, [r0, #0]
 800b29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b29e:	6001      	str	r1, [r0, #0]
 800b2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2a2:	bf00      	nop
 800b2a4:	e000ed88 	.word	0xe000ed88

0800b2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ae:	f3ef 8305 	mrs	r3, IPSR
 800b2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b0f      	cmp	r3, #15
 800b2b8:	d914      	bls.n	800b2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <vPortValidateInterruptPriority+0x70>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2c4:	4b15      	ldr	r3, [pc, #84]	; (800b31c <vPortValidateInterruptPriority+0x74>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	7afa      	ldrb	r2, [r7, #11]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d20a      	bcs.n	800b2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2e4:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <vPortValidateInterruptPriority+0x78>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <vPortValidateInterruptPriority+0x7c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d90a      	bls.n	800b30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	603b      	str	r3, [r7, #0]
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <vPortValidateInterruptPriority+0x60>
	}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	e000e3f0 	.word	0xe000e3f0
 800b31c:	200028c8 	.word	0x200028c8
 800b320:	e000ed0c 	.word	0xe000ed0c
 800b324:	200028cc 	.word	0x200028cc

0800b328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08a      	sub	sp, #40	; 0x28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b334:	f7fe fc90 	bl	8009c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b338:	4b5b      	ldr	r3, [pc, #364]	; (800b4a8 <pvPortMalloc+0x180>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b340:	f000 f920 	bl	800b584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b344:	4b59      	ldr	r3, [pc, #356]	; (800b4ac <pvPortMalloc+0x184>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4013      	ands	r3, r2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f040 8093 	bne.w	800b478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d01d      	beq.n	800b394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b358:	2208      	movs	r2, #8
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4413      	add	r3, r2
 800b35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	2b00      	cmp	r3, #0
 800b368:	d014      	beq.n	800b394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f023 0307 	bic.w	r3, r3, #7
 800b370:	3308      	adds	r3, #8
 800b372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <pvPortMalloc+0x6c>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	617b      	str	r3, [r7, #20]
}
 800b390:	bf00      	nop
 800b392:	e7fe      	b.n	800b392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d06e      	beq.n	800b478 <pvPortMalloc+0x150>
 800b39a:	4b45      	ldr	r3, [pc, #276]	; (800b4b0 <pvPortMalloc+0x188>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d869      	bhi.n	800b478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3a4:	4b43      	ldr	r3, [pc, #268]	; (800b4b4 <pvPortMalloc+0x18c>)
 800b3a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3a8:	4b42      	ldr	r3, [pc, #264]	; (800b4b4 <pvPortMalloc+0x18c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ae:	e004      	b.n	800b3ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d903      	bls.n	800b3cc <pvPortMalloc+0xa4>
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1f1      	bne.n	800b3b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3cc:	4b36      	ldr	r3, [pc, #216]	; (800b4a8 <pvPortMalloc+0x180>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d050      	beq.n	800b478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2208      	movs	r2, #8
 800b3dc:	4413      	add	r3, r2
 800b3de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	1ad2      	subs	r2, r2, r3
 800b3f0:	2308      	movs	r3, #8
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d91f      	bls.n	800b438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <pvPortMalloc+0xf8>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	613b      	str	r3, [r7, #16]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b432:	69b8      	ldr	r0, [r7, #24]
 800b434:	f000 f90a 	bl	800b64c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b438:	4b1d      	ldr	r3, [pc, #116]	; (800b4b0 <pvPortMalloc+0x188>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	4a1b      	ldr	r2, [pc, #108]	; (800b4b0 <pvPortMalloc+0x188>)
 800b444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b446:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <pvPortMalloc+0x188>)
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <pvPortMalloc+0x190>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d203      	bcs.n	800b45a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b452:	4b17      	ldr	r3, [pc, #92]	; (800b4b0 <pvPortMalloc+0x188>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <pvPortMalloc+0x190>)
 800b458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <pvPortMalloc+0x184>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	431a      	orrs	r2, r3
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b46e:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <pvPortMalloc+0x194>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3301      	adds	r3, #1
 800b474:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <pvPortMalloc+0x194>)
 800b476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b478:	f7fe fbfc 	bl	8009c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f003 0307 	and.w	r3, r3, #7
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <pvPortMalloc+0x174>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	60fb      	str	r3, [r7, #12]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <pvPortMalloc+0x172>
	return pvReturn;
 800b49c:	69fb      	ldr	r3, [r7, #28]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3728      	adds	r7, #40	; 0x28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20016158 	.word	0x20016158
 800b4ac:	2001616c 	.word	0x2001616c
 800b4b0:	2001615c 	.word	0x2001615c
 800b4b4:	20016150 	.word	0x20016150
 800b4b8:	20016160 	.word	0x20016160
 800b4bc:	20016164 	.word	0x20016164

0800b4c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d04d      	beq.n	800b56e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4d2:	2308      	movs	r3, #8
 800b4d4:	425b      	negs	r3, r3
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4413      	add	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	4b24      	ldr	r3, [pc, #144]	; (800b578 <vPortFree+0xb8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <vPortFree+0x44>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	60fb      	str	r3, [r7, #12]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <vPortFree+0x62>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60bb      	str	r3, [r7, #8]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	4b14      	ldr	r3, [pc, #80]	; (800b578 <vPortFree+0xb8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4013      	ands	r3, r2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01e      	beq.n	800b56e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d11a      	bne.n	800b56e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	4b0e      	ldr	r3, [pc, #56]	; (800b578 <vPortFree+0xb8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	43db      	mvns	r3, r3
 800b542:	401a      	ands	r2, r3
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b548:	f7fe fb86 	bl	8009c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <vPortFree+0xbc>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4413      	add	r3, r2
 800b556:	4a09      	ldr	r2, [pc, #36]	; (800b57c <vPortFree+0xbc>)
 800b558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b55a:	6938      	ldr	r0, [r7, #16]
 800b55c:	f000 f876 	bl	800b64c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <vPortFree+0xc0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	4a06      	ldr	r2, [pc, #24]	; (800b580 <vPortFree+0xc0>)
 800b568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b56a:	f7fe fb83 	bl	8009c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b56e:	bf00      	nop
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	2001616c 	.word	0x2001616c
 800b57c:	2001615c 	.word	0x2001615c
 800b580:	20016168 	.word	0x20016168

0800b584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b58a:	4b29      	ldr	r3, [pc, #164]	; (800b630 <prvHeapInit+0xac>)
 800b58c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b58e:	4b29      	ldr	r3, [pc, #164]	; (800b634 <prvHeapInit+0xb0>)
 800b590:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00c      	beq.n	800b5b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3307      	adds	r3, #7
 800b5a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 0307 	bic.w	r3, r3, #7
 800b5a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	4a20      	ldr	r2, [pc, #128]	; (800b634 <prvHeapInit+0xb0>)
 800b5b2:	4413      	add	r3, r2
 800b5b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5ba:	4a1f      	ldr	r2, [pc, #124]	; (800b638 <prvHeapInit+0xb4>)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5c0:	4b1d      	ldr	r3, [pc, #116]	; (800b638 <prvHeapInit+0xb4>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5ce:	2208      	movs	r2, #8
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f023 0307 	bic.w	r3, r3, #7
 800b5dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4a16      	ldr	r2, [pc, #88]	; (800b63c <prvHeapInit+0xb8>)
 800b5e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5e4:	4b15      	ldr	r3, [pc, #84]	; (800b63c <prvHeapInit+0xb8>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ec:	4b13      	ldr	r3, [pc, #76]	; (800b63c <prvHeapInit+0xb8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	1ad2      	subs	r2, r2, r3
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b602:	4b0e      	ldr	r3, [pc, #56]	; (800b63c <prvHeapInit+0xb8>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	4a0c      	ldr	r2, [pc, #48]	; (800b640 <prvHeapInit+0xbc>)
 800b610:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	4a0b      	ldr	r2, [pc, #44]	; (800b644 <prvHeapInit+0xc0>)
 800b618:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <prvHeapInit+0xc4>)
 800b61c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b620:	601a      	str	r2, [r3, #0]
}
 800b622:	bf00      	nop
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	00013880 	.word	0x00013880
 800b634:	200028d0 	.word	0x200028d0
 800b638:	20016150 	.word	0x20016150
 800b63c:	20016158 	.word	0x20016158
 800b640:	20016160 	.word	0x20016160
 800b644:	2001615c 	.word	0x2001615c
 800b648:	2001616c 	.word	0x2001616c

0800b64c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b654:	4b28      	ldr	r3, [pc, #160]	; (800b6f8 <prvInsertBlockIntoFreeList+0xac>)
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	e002      	b.n	800b660 <prvInsertBlockIntoFreeList+0x14>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d8f7      	bhi.n	800b65a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	4413      	add	r3, r2
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d108      	bne.n	800b68e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	441a      	add	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	441a      	add	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d118      	bne.n	800b6d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	4b15      	ldr	r3, [pc, #84]	; (800b6fc <prvInsertBlockIntoFreeList+0xb0>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d00d      	beq.n	800b6ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	441a      	add	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	e008      	b.n	800b6dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <prvInsertBlockIntoFreeList+0xb0>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	e003      	b.n	800b6dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d002      	beq.n	800b6ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	20016150 	.word	0x20016150
 800b6fc:	20016158 	.word	0x20016158

0800b700 <atof>:
 800b700:	2100      	movs	r1, #0
 800b702:	f001 bf77 	b.w	800d5f4 <strtod>
	...

0800b708 <__errno>:
 800b708:	4b01      	ldr	r3, [pc, #4]	; (800b710 <__errno+0x8>)
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	2000001c 	.word	0x2000001c

0800b714 <__sflush_r>:
 800b714:	898a      	ldrh	r2, [r1, #12]
 800b716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b71a:	4605      	mov	r5, r0
 800b71c:	0710      	lsls	r0, r2, #28
 800b71e:	460c      	mov	r4, r1
 800b720:	d458      	bmi.n	800b7d4 <__sflush_r+0xc0>
 800b722:	684b      	ldr	r3, [r1, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dc05      	bgt.n	800b734 <__sflush_r+0x20>
 800b728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dc02      	bgt.n	800b734 <__sflush_r+0x20>
 800b72e:	2000      	movs	r0, #0
 800b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b736:	2e00      	cmp	r6, #0
 800b738:	d0f9      	beq.n	800b72e <__sflush_r+0x1a>
 800b73a:	2300      	movs	r3, #0
 800b73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b740:	682f      	ldr	r7, [r5, #0]
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	d032      	beq.n	800b7ac <__sflush_r+0x98>
 800b746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	075a      	lsls	r2, r3, #29
 800b74c:	d505      	bpl.n	800b75a <__sflush_r+0x46>
 800b74e:	6863      	ldr	r3, [r4, #4]
 800b750:	1ac0      	subs	r0, r0, r3
 800b752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b754:	b10b      	cbz	r3, 800b75a <__sflush_r+0x46>
 800b756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b758:	1ac0      	subs	r0, r0, r3
 800b75a:	2300      	movs	r3, #0
 800b75c:	4602      	mov	r2, r0
 800b75e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b760:	6a21      	ldr	r1, [r4, #32]
 800b762:	4628      	mov	r0, r5
 800b764:	47b0      	blx	r6
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	d106      	bne.n	800b77a <__sflush_r+0x66>
 800b76c:	6829      	ldr	r1, [r5, #0]
 800b76e:	291d      	cmp	r1, #29
 800b770:	d82c      	bhi.n	800b7cc <__sflush_r+0xb8>
 800b772:	4a2a      	ldr	r2, [pc, #168]	; (800b81c <__sflush_r+0x108>)
 800b774:	40ca      	lsrs	r2, r1
 800b776:	07d6      	lsls	r6, r2, #31
 800b778:	d528      	bpl.n	800b7cc <__sflush_r+0xb8>
 800b77a:	2200      	movs	r2, #0
 800b77c:	6062      	str	r2, [r4, #4]
 800b77e:	04d9      	lsls	r1, r3, #19
 800b780:	6922      	ldr	r2, [r4, #16]
 800b782:	6022      	str	r2, [r4, #0]
 800b784:	d504      	bpl.n	800b790 <__sflush_r+0x7c>
 800b786:	1c42      	adds	r2, r0, #1
 800b788:	d101      	bne.n	800b78e <__sflush_r+0x7a>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b903      	cbnz	r3, 800b790 <__sflush_r+0x7c>
 800b78e:	6560      	str	r0, [r4, #84]	; 0x54
 800b790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b792:	602f      	str	r7, [r5, #0]
 800b794:	2900      	cmp	r1, #0
 800b796:	d0ca      	beq.n	800b72e <__sflush_r+0x1a>
 800b798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b79c:	4299      	cmp	r1, r3
 800b79e:	d002      	beq.n	800b7a6 <__sflush_r+0x92>
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	f000 f9cf 	bl	800bb44 <_free_r>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	6360      	str	r0, [r4, #52]	; 0x34
 800b7aa:	e7c1      	b.n	800b730 <__sflush_r+0x1c>
 800b7ac:	6a21      	ldr	r1, [r4, #32]
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b0      	blx	r6
 800b7b4:	1c41      	adds	r1, r0, #1
 800b7b6:	d1c7      	bne.n	800b748 <__sflush_r+0x34>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0c4      	beq.n	800b748 <__sflush_r+0x34>
 800b7be:	2b1d      	cmp	r3, #29
 800b7c0:	d001      	beq.n	800b7c6 <__sflush_r+0xb2>
 800b7c2:	2b16      	cmp	r3, #22
 800b7c4:	d101      	bne.n	800b7ca <__sflush_r+0xb6>
 800b7c6:	602f      	str	r7, [r5, #0]
 800b7c8:	e7b1      	b.n	800b72e <__sflush_r+0x1a>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	e7ad      	b.n	800b730 <__sflush_r+0x1c>
 800b7d4:	690f      	ldr	r7, [r1, #16]
 800b7d6:	2f00      	cmp	r7, #0
 800b7d8:	d0a9      	beq.n	800b72e <__sflush_r+0x1a>
 800b7da:	0793      	lsls	r3, r2, #30
 800b7dc:	680e      	ldr	r6, [r1, #0]
 800b7de:	bf08      	it	eq
 800b7e0:	694b      	ldreq	r3, [r1, #20]
 800b7e2:	600f      	str	r7, [r1, #0]
 800b7e4:	bf18      	it	ne
 800b7e6:	2300      	movne	r3, #0
 800b7e8:	eba6 0807 	sub.w	r8, r6, r7
 800b7ec:	608b      	str	r3, [r1, #8]
 800b7ee:	f1b8 0f00 	cmp.w	r8, #0
 800b7f2:	dd9c      	ble.n	800b72e <__sflush_r+0x1a>
 800b7f4:	6a21      	ldr	r1, [r4, #32]
 800b7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7f8:	4643      	mov	r3, r8
 800b7fa:	463a      	mov	r2, r7
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b0      	blx	r6
 800b800:	2800      	cmp	r0, #0
 800b802:	dc06      	bgt.n	800b812 <__sflush_r+0xfe>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e78e      	b.n	800b730 <__sflush_r+0x1c>
 800b812:	4407      	add	r7, r0
 800b814:	eba8 0800 	sub.w	r8, r8, r0
 800b818:	e7e9      	b.n	800b7ee <__sflush_r+0xda>
 800b81a:	bf00      	nop
 800b81c:	20400001 	.word	0x20400001

0800b820 <_fflush_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	690b      	ldr	r3, [r1, #16]
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	b913      	cbnz	r3, 800b830 <_fflush_r+0x10>
 800b82a:	2500      	movs	r5, #0
 800b82c:	4628      	mov	r0, r5
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	b118      	cbz	r0, 800b83a <_fflush_r+0x1a>
 800b832:	6983      	ldr	r3, [r0, #24]
 800b834:	b90b      	cbnz	r3, 800b83a <_fflush_r+0x1a>
 800b836:	f000 f899 	bl	800b96c <__sinit>
 800b83a:	4b14      	ldr	r3, [pc, #80]	; (800b88c <_fflush_r+0x6c>)
 800b83c:	429c      	cmp	r4, r3
 800b83e:	d11b      	bne.n	800b878 <_fflush_r+0x58>
 800b840:	686c      	ldr	r4, [r5, #4]
 800b842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0ef      	beq.n	800b82a <_fflush_r+0xa>
 800b84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b84c:	07d0      	lsls	r0, r2, #31
 800b84e:	d404      	bmi.n	800b85a <_fflush_r+0x3a>
 800b850:	0599      	lsls	r1, r3, #22
 800b852:	d402      	bmi.n	800b85a <_fflush_r+0x3a>
 800b854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b856:	f000 f94c 	bl	800baf2 <__retarget_lock_acquire_recursive>
 800b85a:	4628      	mov	r0, r5
 800b85c:	4621      	mov	r1, r4
 800b85e:	f7ff ff59 	bl	800b714 <__sflush_r>
 800b862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b864:	07da      	lsls	r2, r3, #31
 800b866:	4605      	mov	r5, r0
 800b868:	d4e0      	bmi.n	800b82c <_fflush_r+0xc>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	059b      	lsls	r3, r3, #22
 800b86e:	d4dd      	bmi.n	800b82c <_fflush_r+0xc>
 800b870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b872:	f000 f93f 	bl	800baf4 <__retarget_lock_release_recursive>
 800b876:	e7d9      	b.n	800b82c <_fflush_r+0xc>
 800b878:	4b05      	ldr	r3, [pc, #20]	; (800b890 <_fflush_r+0x70>)
 800b87a:	429c      	cmp	r4, r3
 800b87c:	d101      	bne.n	800b882 <_fflush_r+0x62>
 800b87e:	68ac      	ldr	r4, [r5, #8]
 800b880:	e7df      	b.n	800b842 <_fflush_r+0x22>
 800b882:	4b04      	ldr	r3, [pc, #16]	; (800b894 <_fflush_r+0x74>)
 800b884:	429c      	cmp	r4, r3
 800b886:	bf08      	it	eq
 800b888:	68ec      	ldreq	r4, [r5, #12]
 800b88a:	e7da      	b.n	800b842 <_fflush_r+0x22>
 800b88c:	08010c84 	.word	0x08010c84
 800b890:	08010ca4 	.word	0x08010ca4
 800b894:	08010c64 	.word	0x08010c64

0800b898 <fflush>:
 800b898:	4601      	mov	r1, r0
 800b89a:	b920      	cbnz	r0, 800b8a6 <fflush+0xe>
 800b89c:	4b04      	ldr	r3, [pc, #16]	; (800b8b0 <fflush+0x18>)
 800b89e:	4905      	ldr	r1, [pc, #20]	; (800b8b4 <fflush+0x1c>)
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	f000 b8e1 	b.w	800ba68 <_fwalk_reent>
 800b8a6:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <fflush+0x20>)
 800b8a8:	6818      	ldr	r0, [r3, #0]
 800b8aa:	f7ff bfb9 	b.w	800b820 <_fflush_r>
 800b8ae:	bf00      	nop
 800b8b0:	08010cc4 	.word	0x08010cc4
 800b8b4:	0800b821 	.word	0x0800b821
 800b8b8:	2000001c 	.word	0x2000001c

0800b8bc <std>:
 800b8bc:	2300      	movs	r3, #0
 800b8be:	b510      	push	{r4, lr}
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ca:	6083      	str	r3, [r0, #8]
 800b8cc:	8181      	strh	r1, [r0, #12]
 800b8ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b8d0:	81c2      	strh	r2, [r0, #14]
 800b8d2:	6183      	str	r3, [r0, #24]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	2208      	movs	r2, #8
 800b8d8:	305c      	adds	r0, #92	; 0x5c
 800b8da:	f000 f92b 	bl	800bb34 <memset>
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <std+0x38>)
 800b8e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b8e2:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <std+0x3c>)
 800b8e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8e6:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <std+0x40>)
 800b8e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ea:	4b05      	ldr	r3, [pc, #20]	; (800b900 <std+0x44>)
 800b8ec:	6224      	str	r4, [r4, #32]
 800b8ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b8f0:	bd10      	pop	{r4, pc}
 800b8f2:	bf00      	nop
 800b8f4:	0800c885 	.word	0x0800c885
 800b8f8:	0800c8a7 	.word	0x0800c8a7
 800b8fc:	0800c8df 	.word	0x0800c8df
 800b900:	0800c903 	.word	0x0800c903

0800b904 <_cleanup_r>:
 800b904:	4901      	ldr	r1, [pc, #4]	; (800b90c <_cleanup_r+0x8>)
 800b906:	f000 b8af 	b.w	800ba68 <_fwalk_reent>
 800b90a:	bf00      	nop
 800b90c:	0800b821 	.word	0x0800b821

0800b910 <__sfmoreglue>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	2268      	movs	r2, #104	; 0x68
 800b914:	1e4d      	subs	r5, r1, #1
 800b916:	4355      	muls	r5, r2
 800b918:	460e      	mov	r6, r1
 800b91a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b91e:	f000 f97d 	bl	800bc1c <_malloc_r>
 800b922:	4604      	mov	r4, r0
 800b924:	b140      	cbz	r0, 800b938 <__sfmoreglue+0x28>
 800b926:	2100      	movs	r1, #0
 800b928:	e9c0 1600 	strd	r1, r6, [r0]
 800b92c:	300c      	adds	r0, #12
 800b92e:	60a0      	str	r0, [r4, #8]
 800b930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b934:	f000 f8fe 	bl	800bb34 <memset>
 800b938:	4620      	mov	r0, r4
 800b93a:	bd70      	pop	{r4, r5, r6, pc}

0800b93c <__sfp_lock_acquire>:
 800b93c:	4801      	ldr	r0, [pc, #4]	; (800b944 <__sfp_lock_acquire+0x8>)
 800b93e:	f000 b8d8 	b.w	800baf2 <__retarget_lock_acquire_recursive>
 800b942:	bf00      	nop
 800b944:	20016171 	.word	0x20016171

0800b948 <__sfp_lock_release>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__sfp_lock_release+0x8>)
 800b94a:	f000 b8d3 	b.w	800baf4 <__retarget_lock_release_recursive>
 800b94e:	bf00      	nop
 800b950:	20016171 	.word	0x20016171

0800b954 <__sinit_lock_acquire>:
 800b954:	4801      	ldr	r0, [pc, #4]	; (800b95c <__sinit_lock_acquire+0x8>)
 800b956:	f000 b8cc 	b.w	800baf2 <__retarget_lock_acquire_recursive>
 800b95a:	bf00      	nop
 800b95c:	20016172 	.word	0x20016172

0800b960 <__sinit_lock_release>:
 800b960:	4801      	ldr	r0, [pc, #4]	; (800b968 <__sinit_lock_release+0x8>)
 800b962:	f000 b8c7 	b.w	800baf4 <__retarget_lock_release_recursive>
 800b966:	bf00      	nop
 800b968:	20016172 	.word	0x20016172

0800b96c <__sinit>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	4604      	mov	r4, r0
 800b970:	f7ff fff0 	bl	800b954 <__sinit_lock_acquire>
 800b974:	69a3      	ldr	r3, [r4, #24]
 800b976:	b11b      	cbz	r3, 800b980 <__sinit+0x14>
 800b978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b97c:	f7ff bff0 	b.w	800b960 <__sinit_lock_release>
 800b980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b984:	6523      	str	r3, [r4, #80]	; 0x50
 800b986:	4b13      	ldr	r3, [pc, #76]	; (800b9d4 <__sinit+0x68>)
 800b988:	4a13      	ldr	r2, [pc, #76]	; (800b9d8 <__sinit+0x6c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b98e:	42a3      	cmp	r3, r4
 800b990:	bf04      	itt	eq
 800b992:	2301      	moveq	r3, #1
 800b994:	61a3      	streq	r3, [r4, #24]
 800b996:	4620      	mov	r0, r4
 800b998:	f000 f820 	bl	800b9dc <__sfp>
 800b99c:	6060      	str	r0, [r4, #4]
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 f81c 	bl	800b9dc <__sfp>
 800b9a4:	60a0      	str	r0, [r4, #8]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 f818 	bl	800b9dc <__sfp>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	60e0      	str	r0, [r4, #12]
 800b9b0:	2104      	movs	r1, #4
 800b9b2:	6860      	ldr	r0, [r4, #4]
 800b9b4:	f7ff ff82 	bl	800b8bc <std>
 800b9b8:	68a0      	ldr	r0, [r4, #8]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	2109      	movs	r1, #9
 800b9be:	f7ff ff7d 	bl	800b8bc <std>
 800b9c2:	68e0      	ldr	r0, [r4, #12]
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	2112      	movs	r1, #18
 800b9c8:	f7ff ff78 	bl	800b8bc <std>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	61a3      	str	r3, [r4, #24]
 800b9d0:	e7d2      	b.n	800b978 <__sinit+0xc>
 800b9d2:	bf00      	nop
 800b9d4:	08010cc4 	.word	0x08010cc4
 800b9d8:	0800b905 	.word	0x0800b905

0800b9dc <__sfp>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	4607      	mov	r7, r0
 800b9e0:	f7ff ffac 	bl	800b93c <__sfp_lock_acquire>
 800b9e4:	4b1e      	ldr	r3, [pc, #120]	; (800ba60 <__sfp+0x84>)
 800b9e6:	681e      	ldr	r6, [r3, #0]
 800b9e8:	69b3      	ldr	r3, [r6, #24]
 800b9ea:	b913      	cbnz	r3, 800b9f2 <__sfp+0x16>
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ffbd 	bl	800b96c <__sinit>
 800b9f2:	3648      	adds	r6, #72	; 0x48
 800b9f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	d503      	bpl.n	800ba04 <__sfp+0x28>
 800b9fc:	6833      	ldr	r3, [r6, #0]
 800b9fe:	b30b      	cbz	r3, 800ba44 <__sfp+0x68>
 800ba00:	6836      	ldr	r6, [r6, #0]
 800ba02:	e7f7      	b.n	800b9f4 <__sfp+0x18>
 800ba04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba08:	b9d5      	cbnz	r5, 800ba40 <__sfp+0x64>
 800ba0a:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <__sfp+0x88>)
 800ba0c:	60e3      	str	r3, [r4, #12]
 800ba0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba12:	6665      	str	r5, [r4, #100]	; 0x64
 800ba14:	f000 f86c 	bl	800baf0 <__retarget_lock_init_recursive>
 800ba18:	f7ff ff96 	bl	800b948 <__sfp_lock_release>
 800ba1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba24:	6025      	str	r5, [r4, #0]
 800ba26:	61a5      	str	r5, [r4, #24]
 800ba28:	2208      	movs	r2, #8
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba30:	f000 f880 	bl	800bb34 <memset>
 800ba34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba40:	3468      	adds	r4, #104	; 0x68
 800ba42:	e7d9      	b.n	800b9f8 <__sfp+0x1c>
 800ba44:	2104      	movs	r1, #4
 800ba46:	4638      	mov	r0, r7
 800ba48:	f7ff ff62 	bl	800b910 <__sfmoreglue>
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	6030      	str	r0, [r6, #0]
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d1d5      	bne.n	800ba00 <__sfp+0x24>
 800ba54:	f7ff ff78 	bl	800b948 <__sfp_lock_release>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	e7ee      	b.n	800ba3c <__sfp+0x60>
 800ba5e:	bf00      	nop
 800ba60:	08010cc4 	.word	0x08010cc4
 800ba64:	ffff0001 	.word	0xffff0001

0800ba68 <_fwalk_reent>:
 800ba68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	4688      	mov	r8, r1
 800ba70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba74:	2700      	movs	r7, #0
 800ba76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba7a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba7e:	d505      	bpl.n	800ba8c <_fwalk_reent+0x24>
 800ba80:	6824      	ldr	r4, [r4, #0]
 800ba82:	2c00      	cmp	r4, #0
 800ba84:	d1f7      	bne.n	800ba76 <_fwalk_reent+0xe>
 800ba86:	4638      	mov	r0, r7
 800ba88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba8c:	89ab      	ldrh	r3, [r5, #12]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d907      	bls.n	800baa2 <_fwalk_reent+0x3a>
 800ba92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba96:	3301      	adds	r3, #1
 800ba98:	d003      	beq.n	800baa2 <_fwalk_reent+0x3a>
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	47c0      	blx	r8
 800baa0:	4307      	orrs	r7, r0
 800baa2:	3568      	adds	r5, #104	; 0x68
 800baa4:	e7e9      	b.n	800ba7a <_fwalk_reent+0x12>
	...

0800baa8 <__libc_init_array>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	4d0d      	ldr	r5, [pc, #52]	; (800bae0 <__libc_init_array+0x38>)
 800baac:	4c0d      	ldr	r4, [pc, #52]	; (800bae4 <__libc_init_array+0x3c>)
 800baae:	1b64      	subs	r4, r4, r5
 800bab0:	10a4      	asrs	r4, r4, #2
 800bab2:	2600      	movs	r6, #0
 800bab4:	42a6      	cmp	r6, r4
 800bab6:	d109      	bne.n	800bacc <__libc_init_array+0x24>
 800bab8:	4d0b      	ldr	r5, [pc, #44]	; (800bae8 <__libc_init_array+0x40>)
 800baba:	4c0c      	ldr	r4, [pc, #48]	; (800baec <__libc_init_array+0x44>)
 800babc:	f004 fbde 	bl	801027c <_init>
 800bac0:	1b64      	subs	r4, r4, r5
 800bac2:	10a4      	asrs	r4, r4, #2
 800bac4:	2600      	movs	r6, #0
 800bac6:	42a6      	cmp	r6, r4
 800bac8:	d105      	bne.n	800bad6 <__libc_init_array+0x2e>
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad0:	4798      	blx	r3
 800bad2:	3601      	adds	r6, #1
 800bad4:	e7ee      	b.n	800bab4 <__libc_init_array+0xc>
 800bad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bada:	4798      	blx	r3
 800badc:	3601      	adds	r6, #1
 800bade:	e7f2      	b.n	800bac6 <__libc_init_array+0x1e>
 800bae0:	08011068 	.word	0x08011068
 800bae4:	08011068 	.word	0x08011068
 800bae8:	08011068 	.word	0x08011068
 800baec:	0801106c 	.word	0x0801106c

0800baf0 <__retarget_lock_init_recursive>:
 800baf0:	4770      	bx	lr

0800baf2 <__retarget_lock_acquire_recursive>:
 800baf2:	4770      	bx	lr

0800baf4 <__retarget_lock_release_recursive>:
 800baf4:	4770      	bx	lr
	...

0800baf8 <malloc>:
 800baf8:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <malloc+0xc>)
 800bafa:	4601      	mov	r1, r0
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f000 b88d 	b.w	800bc1c <_malloc_r>
 800bb02:	bf00      	nop
 800bb04:	2000001c 	.word	0x2000001c

0800bb08 <free>:
 800bb08:	4b02      	ldr	r3, [pc, #8]	; (800bb14 <free+0xc>)
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	6818      	ldr	r0, [r3, #0]
 800bb0e:	f000 b819 	b.w	800bb44 <_free_r>
 800bb12:	bf00      	nop
 800bb14:	2000001c 	.word	0x2000001c

0800bb18 <memcpy>:
 800bb18:	440a      	add	r2, r1
 800bb1a:	4291      	cmp	r1, r2
 800bb1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb20:	d100      	bne.n	800bb24 <memcpy+0xc>
 800bb22:	4770      	bx	lr
 800bb24:	b510      	push	{r4, lr}
 800bb26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb2e:	4291      	cmp	r1, r2
 800bb30:	d1f9      	bne.n	800bb26 <memcpy+0xe>
 800bb32:	bd10      	pop	{r4, pc}

0800bb34 <memset>:
 800bb34:	4402      	add	r2, r0
 800bb36:	4603      	mov	r3, r0
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d100      	bne.n	800bb3e <memset+0xa>
 800bb3c:	4770      	bx	lr
 800bb3e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb42:	e7f9      	b.n	800bb38 <memset+0x4>

0800bb44 <_free_r>:
 800bb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb46:	2900      	cmp	r1, #0
 800bb48:	d044      	beq.n	800bbd4 <_free_r+0x90>
 800bb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb4e:	9001      	str	r0, [sp, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f1a1 0404 	sub.w	r4, r1, #4
 800bb56:	bfb8      	it	lt
 800bb58:	18e4      	addlt	r4, r4, r3
 800bb5a:	f003 f8e3 	bl	800ed24 <__malloc_lock>
 800bb5e:	4a1e      	ldr	r2, [pc, #120]	; (800bbd8 <_free_r+0x94>)
 800bb60:	9801      	ldr	r0, [sp, #4]
 800bb62:	6813      	ldr	r3, [r2, #0]
 800bb64:	b933      	cbnz	r3, 800bb74 <_free_r+0x30>
 800bb66:	6063      	str	r3, [r4, #4]
 800bb68:	6014      	str	r4, [r2, #0]
 800bb6a:	b003      	add	sp, #12
 800bb6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb70:	f003 b8de 	b.w	800ed30 <__malloc_unlock>
 800bb74:	42a3      	cmp	r3, r4
 800bb76:	d908      	bls.n	800bb8a <_free_r+0x46>
 800bb78:	6825      	ldr	r5, [r4, #0]
 800bb7a:	1961      	adds	r1, r4, r5
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	bf01      	itttt	eq
 800bb80:	6819      	ldreq	r1, [r3, #0]
 800bb82:	685b      	ldreq	r3, [r3, #4]
 800bb84:	1949      	addeq	r1, r1, r5
 800bb86:	6021      	streq	r1, [r4, #0]
 800bb88:	e7ed      	b.n	800bb66 <_free_r+0x22>
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	b10b      	cbz	r3, 800bb94 <_free_r+0x50>
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	d9fa      	bls.n	800bb8a <_free_r+0x46>
 800bb94:	6811      	ldr	r1, [r2, #0]
 800bb96:	1855      	adds	r5, r2, r1
 800bb98:	42a5      	cmp	r5, r4
 800bb9a:	d10b      	bne.n	800bbb4 <_free_r+0x70>
 800bb9c:	6824      	ldr	r4, [r4, #0]
 800bb9e:	4421      	add	r1, r4
 800bba0:	1854      	adds	r4, r2, r1
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	6011      	str	r1, [r2, #0]
 800bba6:	d1e0      	bne.n	800bb6a <_free_r+0x26>
 800bba8:	681c      	ldr	r4, [r3, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	6053      	str	r3, [r2, #4]
 800bbae:	4421      	add	r1, r4
 800bbb0:	6011      	str	r1, [r2, #0]
 800bbb2:	e7da      	b.n	800bb6a <_free_r+0x26>
 800bbb4:	d902      	bls.n	800bbbc <_free_r+0x78>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	6003      	str	r3, [r0, #0]
 800bbba:	e7d6      	b.n	800bb6a <_free_r+0x26>
 800bbbc:	6825      	ldr	r5, [r4, #0]
 800bbbe:	1961      	adds	r1, r4, r5
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	bf04      	itt	eq
 800bbc4:	6819      	ldreq	r1, [r3, #0]
 800bbc6:	685b      	ldreq	r3, [r3, #4]
 800bbc8:	6063      	str	r3, [r4, #4]
 800bbca:	bf04      	itt	eq
 800bbcc:	1949      	addeq	r1, r1, r5
 800bbce:	6021      	streq	r1, [r4, #0]
 800bbd0:	6054      	str	r4, [r2, #4]
 800bbd2:	e7ca      	b.n	800bb6a <_free_r+0x26>
 800bbd4:	b003      	add	sp, #12
 800bbd6:	bd30      	pop	{r4, r5, pc}
 800bbd8:	20016174 	.word	0x20016174

0800bbdc <sbrk_aligned>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	4e0e      	ldr	r6, [pc, #56]	; (800bc18 <sbrk_aligned+0x3c>)
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	6831      	ldr	r1, [r6, #0]
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	b911      	cbnz	r1, 800bbee <sbrk_aligned+0x12>
 800bbe8:	f000 fe1c 	bl	800c824 <_sbrk_r>
 800bbec:	6030      	str	r0, [r6, #0]
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f000 fe17 	bl	800c824 <_sbrk_r>
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	d00a      	beq.n	800bc10 <sbrk_aligned+0x34>
 800bbfa:	1cc4      	adds	r4, r0, #3
 800bbfc:	f024 0403 	bic.w	r4, r4, #3
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d007      	beq.n	800bc14 <sbrk_aligned+0x38>
 800bc04:	1a21      	subs	r1, r4, r0
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 fe0c 	bl	800c824 <_sbrk_r>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d101      	bne.n	800bc14 <sbrk_aligned+0x38>
 800bc10:	f04f 34ff 	mov.w	r4, #4294967295
 800bc14:	4620      	mov	r0, r4
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	20016178 	.word	0x20016178

0800bc1c <_malloc_r>:
 800bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	1ccd      	adds	r5, r1, #3
 800bc22:	f025 0503 	bic.w	r5, r5, #3
 800bc26:	3508      	adds	r5, #8
 800bc28:	2d0c      	cmp	r5, #12
 800bc2a:	bf38      	it	cc
 800bc2c:	250c      	movcc	r5, #12
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	4607      	mov	r7, r0
 800bc32:	db01      	blt.n	800bc38 <_malloc_r+0x1c>
 800bc34:	42a9      	cmp	r1, r5
 800bc36:	d905      	bls.n	800bc44 <_malloc_r+0x28>
 800bc38:	230c      	movs	r3, #12
 800bc3a:	603b      	str	r3, [r7, #0]
 800bc3c:	2600      	movs	r6, #0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc44:	4e2e      	ldr	r6, [pc, #184]	; (800bd00 <_malloc_r+0xe4>)
 800bc46:	f003 f86d 	bl	800ed24 <__malloc_lock>
 800bc4a:	6833      	ldr	r3, [r6, #0]
 800bc4c:	461c      	mov	r4, r3
 800bc4e:	bb34      	cbnz	r4, 800bc9e <_malloc_r+0x82>
 800bc50:	4629      	mov	r1, r5
 800bc52:	4638      	mov	r0, r7
 800bc54:	f7ff ffc2 	bl	800bbdc <sbrk_aligned>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	d14d      	bne.n	800bcfa <_malloc_r+0xde>
 800bc5e:	6834      	ldr	r4, [r6, #0]
 800bc60:	4626      	mov	r6, r4
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d140      	bne.n	800bce8 <_malloc_r+0xcc>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	eb04 0803 	add.w	r8, r4, r3
 800bc70:	f000 fdd8 	bl	800c824 <_sbrk_r>
 800bc74:	4580      	cmp	r8, r0
 800bc76:	d13a      	bne.n	800bcee <_malloc_r+0xd2>
 800bc78:	6821      	ldr	r1, [r4, #0]
 800bc7a:	3503      	adds	r5, #3
 800bc7c:	1a6d      	subs	r5, r5, r1
 800bc7e:	f025 0503 	bic.w	r5, r5, #3
 800bc82:	3508      	adds	r5, #8
 800bc84:	2d0c      	cmp	r5, #12
 800bc86:	bf38      	it	cc
 800bc88:	250c      	movcc	r5, #12
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7ff ffa5 	bl	800bbdc <sbrk_aligned>
 800bc92:	3001      	adds	r0, #1
 800bc94:	d02b      	beq.n	800bcee <_malloc_r+0xd2>
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	442b      	add	r3, r5
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	e00e      	b.n	800bcbc <_malloc_r+0xa0>
 800bc9e:	6822      	ldr	r2, [r4, #0]
 800bca0:	1b52      	subs	r2, r2, r5
 800bca2:	d41e      	bmi.n	800bce2 <_malloc_r+0xc6>
 800bca4:	2a0b      	cmp	r2, #11
 800bca6:	d916      	bls.n	800bcd6 <_malloc_r+0xba>
 800bca8:	1961      	adds	r1, r4, r5
 800bcaa:	42a3      	cmp	r3, r4
 800bcac:	6025      	str	r5, [r4, #0]
 800bcae:	bf18      	it	ne
 800bcb0:	6059      	strne	r1, [r3, #4]
 800bcb2:	6863      	ldr	r3, [r4, #4]
 800bcb4:	bf08      	it	eq
 800bcb6:	6031      	streq	r1, [r6, #0]
 800bcb8:	5162      	str	r2, [r4, r5]
 800bcba:	604b      	str	r3, [r1, #4]
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f104 060b 	add.w	r6, r4, #11
 800bcc2:	f003 f835 	bl	800ed30 <__malloc_unlock>
 800bcc6:	f026 0607 	bic.w	r6, r6, #7
 800bcca:	1d23      	adds	r3, r4, #4
 800bccc:	1af2      	subs	r2, r6, r3
 800bcce:	d0b6      	beq.n	800bc3e <_malloc_r+0x22>
 800bcd0:	1b9b      	subs	r3, r3, r6
 800bcd2:	50a3      	str	r3, [r4, r2]
 800bcd4:	e7b3      	b.n	800bc3e <_malloc_r+0x22>
 800bcd6:	6862      	ldr	r2, [r4, #4]
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	bf0c      	ite	eq
 800bcdc:	6032      	streq	r2, [r6, #0]
 800bcde:	605a      	strne	r2, [r3, #4]
 800bce0:	e7ec      	b.n	800bcbc <_malloc_r+0xa0>
 800bce2:	4623      	mov	r3, r4
 800bce4:	6864      	ldr	r4, [r4, #4]
 800bce6:	e7b2      	b.n	800bc4e <_malloc_r+0x32>
 800bce8:	4634      	mov	r4, r6
 800bcea:	6876      	ldr	r6, [r6, #4]
 800bcec:	e7b9      	b.n	800bc62 <_malloc_r+0x46>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	603b      	str	r3, [r7, #0]
 800bcf2:	4638      	mov	r0, r7
 800bcf4:	f003 f81c 	bl	800ed30 <__malloc_unlock>
 800bcf8:	e7a1      	b.n	800bc3e <_malloc_r+0x22>
 800bcfa:	6025      	str	r5, [r4, #0]
 800bcfc:	e7de      	b.n	800bcbc <_malloc_r+0xa0>
 800bcfe:	bf00      	nop
 800bd00:	20016174 	.word	0x20016174

0800bd04 <__cvt>:
 800bd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	ec55 4b10 	vmov	r4, r5, d0
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	460e      	mov	r6, r1
 800bd10:	4619      	mov	r1, r3
 800bd12:	462b      	mov	r3, r5
 800bd14:	bfbb      	ittet	lt
 800bd16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd1a:	461d      	movlt	r5, r3
 800bd1c:	2300      	movge	r3, #0
 800bd1e:	232d      	movlt	r3, #45	; 0x2d
 800bd20:	700b      	strb	r3, [r1, #0]
 800bd22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd28:	4691      	mov	r9, r2
 800bd2a:	f023 0820 	bic.w	r8, r3, #32
 800bd2e:	bfbc      	itt	lt
 800bd30:	4622      	movlt	r2, r4
 800bd32:	4614      	movlt	r4, r2
 800bd34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd38:	d005      	beq.n	800bd46 <__cvt+0x42>
 800bd3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd3e:	d100      	bne.n	800bd42 <__cvt+0x3e>
 800bd40:	3601      	adds	r6, #1
 800bd42:	2102      	movs	r1, #2
 800bd44:	e000      	b.n	800bd48 <__cvt+0x44>
 800bd46:	2103      	movs	r1, #3
 800bd48:	ab03      	add	r3, sp, #12
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	ab02      	add	r3, sp, #8
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	4653      	mov	r3, sl
 800bd56:	4632      	mov	r2, r6
 800bd58:	f001 fde6 	bl	800d928 <_dtoa_r>
 800bd5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd60:	4607      	mov	r7, r0
 800bd62:	d102      	bne.n	800bd6a <__cvt+0x66>
 800bd64:	f019 0f01 	tst.w	r9, #1
 800bd68:	d022      	beq.n	800bdb0 <__cvt+0xac>
 800bd6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd6e:	eb07 0906 	add.w	r9, r7, r6
 800bd72:	d110      	bne.n	800bd96 <__cvt+0x92>
 800bd74:	783b      	ldrb	r3, [r7, #0]
 800bd76:	2b30      	cmp	r3, #48	; 0x30
 800bd78:	d10a      	bne.n	800bd90 <__cvt+0x8c>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 feb9 	bl	8000af8 <__aeabi_dcmpeq>
 800bd86:	b918      	cbnz	r0, 800bd90 <__cvt+0x8c>
 800bd88:	f1c6 0601 	rsb	r6, r6, #1
 800bd8c:	f8ca 6000 	str.w	r6, [sl]
 800bd90:	f8da 3000 	ldr.w	r3, [sl]
 800bd94:	4499      	add	r9, r3
 800bd96:	2200      	movs	r2, #0
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7f4 feab 	bl	8000af8 <__aeabi_dcmpeq>
 800bda2:	b108      	cbz	r0, 800bda8 <__cvt+0xa4>
 800bda4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bda8:	2230      	movs	r2, #48	; 0x30
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	454b      	cmp	r3, r9
 800bdae:	d307      	bcc.n	800bdc0 <__cvt+0xbc>
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdb4:	1bdb      	subs	r3, r3, r7
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	b004      	add	sp, #16
 800bdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc0:	1c59      	adds	r1, r3, #1
 800bdc2:	9103      	str	r1, [sp, #12]
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e7f0      	b.n	800bdaa <__cvt+0xa6>

0800bdc8 <__exponent>:
 800bdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	bfb8      	it	lt
 800bdd0:	4249      	neglt	r1, r1
 800bdd2:	f803 2b02 	strb.w	r2, [r3], #2
 800bdd6:	bfb4      	ite	lt
 800bdd8:	222d      	movlt	r2, #45	; 0x2d
 800bdda:	222b      	movge	r2, #43	; 0x2b
 800bddc:	2909      	cmp	r1, #9
 800bdde:	7042      	strb	r2, [r0, #1]
 800bde0:	dd2a      	ble.n	800be38 <__exponent+0x70>
 800bde2:	f10d 0407 	add.w	r4, sp, #7
 800bde6:	46a4      	mov	ip, r4
 800bde8:	270a      	movs	r7, #10
 800bdea:	46a6      	mov	lr, r4
 800bdec:	460a      	mov	r2, r1
 800bdee:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdf2:	fb07 1516 	mls	r5, r7, r6, r1
 800bdf6:	3530      	adds	r5, #48	; 0x30
 800bdf8:	2a63      	cmp	r2, #99	; 0x63
 800bdfa:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be02:	4631      	mov	r1, r6
 800be04:	dcf1      	bgt.n	800bdea <__exponent+0x22>
 800be06:	3130      	adds	r1, #48	; 0x30
 800be08:	f1ae 0502 	sub.w	r5, lr, #2
 800be0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be10:	1c44      	adds	r4, r0, #1
 800be12:	4629      	mov	r1, r5
 800be14:	4561      	cmp	r1, ip
 800be16:	d30a      	bcc.n	800be2e <__exponent+0x66>
 800be18:	f10d 0209 	add.w	r2, sp, #9
 800be1c:	eba2 020e 	sub.w	r2, r2, lr
 800be20:	4565      	cmp	r5, ip
 800be22:	bf88      	it	hi
 800be24:	2200      	movhi	r2, #0
 800be26:	4413      	add	r3, r2
 800be28:	1a18      	subs	r0, r3, r0
 800be2a:	b003      	add	sp, #12
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be36:	e7ed      	b.n	800be14 <__exponent+0x4c>
 800be38:	2330      	movs	r3, #48	; 0x30
 800be3a:	3130      	adds	r1, #48	; 0x30
 800be3c:	7083      	strb	r3, [r0, #2]
 800be3e:	70c1      	strb	r1, [r0, #3]
 800be40:	1d03      	adds	r3, r0, #4
 800be42:	e7f1      	b.n	800be28 <__exponent+0x60>

0800be44 <_printf_float>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	ed2d 8b02 	vpush	{d8}
 800be4c:	b08d      	sub	sp, #52	; 0x34
 800be4e:	460c      	mov	r4, r1
 800be50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be54:	4616      	mov	r6, r2
 800be56:	461f      	mov	r7, r3
 800be58:	4605      	mov	r5, r0
 800be5a:	f002 fed5 	bl	800ec08 <_localeconv_r>
 800be5e:	f8d0 a000 	ldr.w	sl, [r0]
 800be62:	4650      	mov	r0, sl
 800be64:	f7f4 f9c6 	bl	80001f4 <strlen>
 800be68:	2300      	movs	r3, #0
 800be6a:	930a      	str	r3, [sp, #40]	; 0x28
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	9305      	str	r3, [sp, #20]
 800be70:	f8d8 3000 	ldr.w	r3, [r8]
 800be74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be78:	3307      	adds	r3, #7
 800be7a:	f023 0307 	bic.w	r3, r3, #7
 800be7e:	f103 0208 	add.w	r2, r3, #8
 800be82:	f8c8 2000 	str.w	r2, [r8]
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	f8cd 8018 	str.w	r8, [sp, #24]
 800be9c:	ee08 0a10 	vmov	s16, r0
 800bea0:	4b9f      	ldr	r3, [pc, #636]	; (800c120 <_printf_float+0x2dc>)
 800bea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295
 800beaa:	f7f4 fe57 	bl	8000b5c <__aeabi_dcmpun>
 800beae:	bb88      	cbnz	r0, 800bf14 <_printf_float+0xd0>
 800beb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beb4:	4b9a      	ldr	r3, [pc, #616]	; (800c120 <_printf_float+0x2dc>)
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	f7f4 fe31 	bl	8000b20 <__aeabi_dcmple>
 800bebe:	bb48      	cbnz	r0, 800bf14 <_printf_float+0xd0>
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 fe20 	bl	8000b0c <__aeabi_dcmplt>
 800becc:	b110      	cbz	r0, 800bed4 <_printf_float+0x90>
 800bece:	232d      	movs	r3, #45	; 0x2d
 800bed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed4:	4b93      	ldr	r3, [pc, #588]	; (800c124 <_printf_float+0x2e0>)
 800bed6:	4894      	ldr	r0, [pc, #592]	; (800c128 <_printf_float+0x2e4>)
 800bed8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bedc:	bf94      	ite	ls
 800bede:	4698      	movls	r8, r3
 800bee0:	4680      	movhi	r8, r0
 800bee2:	2303      	movs	r3, #3
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	f023 0204 	bic.w	r2, r3, #4
 800beec:	6022      	str	r2, [r4, #0]
 800beee:	f04f 0900 	mov.w	r9, #0
 800bef2:	9700      	str	r7, [sp, #0]
 800bef4:	4633      	mov	r3, r6
 800bef6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bef8:	4621      	mov	r1, r4
 800befa:	4628      	mov	r0, r5
 800befc:	f000 f9d8 	bl	800c2b0 <_printf_common>
 800bf00:	3001      	adds	r0, #1
 800bf02:	f040 8090 	bne.w	800c026 <_printf_float+0x1e2>
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0a:	b00d      	add	sp, #52	; 0x34
 800bf0c:	ecbd 8b02 	vpop	{d8}
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	4640      	mov	r0, r8
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	f7f4 fe1e 	bl	8000b5c <__aeabi_dcmpun>
 800bf20:	b140      	cbz	r0, 800bf34 <_printf_float+0xf0>
 800bf22:	464b      	mov	r3, r9
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfbc      	itt	lt
 800bf28:	232d      	movlt	r3, #45	; 0x2d
 800bf2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf2e:	487f      	ldr	r0, [pc, #508]	; (800c12c <_printf_float+0x2e8>)
 800bf30:	4b7f      	ldr	r3, [pc, #508]	; (800c130 <_printf_float+0x2ec>)
 800bf32:	e7d1      	b.n	800bed8 <_printf_float+0x94>
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf3a:	9206      	str	r2, [sp, #24]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	d13f      	bne.n	800bfc0 <_printf_float+0x17c>
 800bf40:	2306      	movs	r3, #6
 800bf42:	6063      	str	r3, [r4, #4]
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	6861      	ldr	r1, [r4, #4]
 800bf48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	ab0a      	add	r3, sp, #40	; 0x28
 800bf52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf56:	ab09      	add	r3, sp, #36	; 0x24
 800bf58:	ec49 8b10 	vmov	d0, r8, r9
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf64:	4628      	mov	r0, r5
 800bf66:	f7ff fecd 	bl	800bd04 <__cvt>
 800bf6a:	9b06      	ldr	r3, [sp, #24]
 800bf6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf6e:	2b47      	cmp	r3, #71	; 0x47
 800bf70:	4680      	mov	r8, r0
 800bf72:	d108      	bne.n	800bf86 <_printf_float+0x142>
 800bf74:	1cc8      	adds	r0, r1, #3
 800bf76:	db02      	blt.n	800bf7e <_printf_float+0x13a>
 800bf78:	6863      	ldr	r3, [r4, #4]
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	dd41      	ble.n	800c002 <_printf_float+0x1be>
 800bf7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf82:	fa5f fb8b 	uxtb.w	fp, fp
 800bf86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf8a:	d820      	bhi.n	800bfce <_printf_float+0x18a>
 800bf8c:	3901      	subs	r1, #1
 800bf8e:	465a      	mov	r2, fp
 800bf90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf94:	9109      	str	r1, [sp, #36]	; 0x24
 800bf96:	f7ff ff17 	bl	800bdc8 <__exponent>
 800bf9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf9c:	1813      	adds	r3, r2, r0
 800bf9e:	2a01      	cmp	r2, #1
 800bfa0:	4681      	mov	r9, r0
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	dc02      	bgt.n	800bfac <_printf_float+0x168>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	07d2      	lsls	r2, r2, #31
 800bfaa:	d501      	bpl.n	800bfb0 <_printf_float+0x16c>
 800bfac:	3301      	adds	r3, #1
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d09c      	beq.n	800bef2 <_printf_float+0xae>
 800bfb8:	232d      	movs	r3, #45	; 0x2d
 800bfba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfbe:	e798      	b.n	800bef2 <_printf_float+0xae>
 800bfc0:	9a06      	ldr	r2, [sp, #24]
 800bfc2:	2a47      	cmp	r2, #71	; 0x47
 800bfc4:	d1be      	bne.n	800bf44 <_printf_float+0x100>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1bc      	bne.n	800bf44 <_printf_float+0x100>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e7b9      	b.n	800bf42 <_printf_float+0xfe>
 800bfce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfd2:	d118      	bne.n	800c006 <_printf_float+0x1c2>
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	dd0b      	ble.n	800bff2 <_printf_float+0x1ae>
 800bfda:	6121      	str	r1, [r4, #16]
 800bfdc:	b913      	cbnz	r3, 800bfe4 <_printf_float+0x1a0>
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	07d0      	lsls	r0, r2, #31
 800bfe2:	d502      	bpl.n	800bfea <_printf_float+0x1a6>
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	440b      	add	r3, r1
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfec:	f04f 0900 	mov.w	r9, #0
 800bff0:	e7de      	b.n	800bfb0 <_printf_float+0x16c>
 800bff2:	b913      	cbnz	r3, 800bffa <_printf_float+0x1b6>
 800bff4:	6822      	ldr	r2, [r4, #0]
 800bff6:	07d2      	lsls	r2, r2, #31
 800bff8:	d501      	bpl.n	800bffe <_printf_float+0x1ba>
 800bffa:	3302      	adds	r3, #2
 800bffc:	e7f4      	b.n	800bfe8 <_printf_float+0x1a4>
 800bffe:	2301      	movs	r3, #1
 800c000:	e7f2      	b.n	800bfe8 <_printf_float+0x1a4>
 800c002:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c008:	4299      	cmp	r1, r3
 800c00a:	db05      	blt.n	800c018 <_printf_float+0x1d4>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	6121      	str	r1, [r4, #16]
 800c010:	07d8      	lsls	r0, r3, #31
 800c012:	d5ea      	bpl.n	800bfea <_printf_float+0x1a6>
 800c014:	1c4b      	adds	r3, r1, #1
 800c016:	e7e7      	b.n	800bfe8 <_printf_float+0x1a4>
 800c018:	2900      	cmp	r1, #0
 800c01a:	bfd4      	ite	le
 800c01c:	f1c1 0202 	rsble	r2, r1, #2
 800c020:	2201      	movgt	r2, #1
 800c022:	4413      	add	r3, r2
 800c024:	e7e0      	b.n	800bfe8 <_printf_float+0x1a4>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	055a      	lsls	r2, r3, #21
 800c02a:	d407      	bmi.n	800c03c <_printf_float+0x1f8>
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	4642      	mov	r2, r8
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	d12c      	bne.n	800c094 <_printf_float+0x250>
 800c03a:	e764      	b.n	800bf06 <_printf_float+0xc2>
 800c03c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c040:	f240 80e0 	bls.w	800c204 <_printf_float+0x3c0>
 800c044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fd54 	bl	8000af8 <__aeabi_dcmpeq>
 800c050:	2800      	cmp	r0, #0
 800c052:	d034      	beq.n	800c0be <_printf_float+0x27a>
 800c054:	4a37      	ldr	r2, [pc, #220]	; (800c134 <_printf_float+0x2f0>)
 800c056:	2301      	movs	r3, #1
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	f43f af51 	beq.w	800bf06 <_printf_float+0xc2>
 800c064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c068:	429a      	cmp	r2, r3
 800c06a:	db02      	blt.n	800c072 <_printf_float+0x22e>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	07d8      	lsls	r0, r3, #31
 800c070:	d510      	bpl.n	800c094 <_printf_float+0x250>
 800c072:	ee18 3a10 	vmov	r3, s16
 800c076:	4652      	mov	r2, sl
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	f43f af41 	beq.w	800bf06 <_printf_float+0xc2>
 800c084:	f04f 0800 	mov.w	r8, #0
 800c088:	f104 091a 	add.w	r9, r4, #26
 800c08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08e:	3b01      	subs	r3, #1
 800c090:	4543      	cmp	r3, r8
 800c092:	dc09      	bgt.n	800c0a8 <_printf_float+0x264>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	079b      	lsls	r3, r3, #30
 800c098:	f100 8105 	bmi.w	800c2a6 <_printf_float+0x462>
 800c09c:	68e0      	ldr	r0, [r4, #12]
 800c09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a0:	4298      	cmp	r0, r3
 800c0a2:	bfb8      	it	lt
 800c0a4:	4618      	movlt	r0, r3
 800c0a6:	e730      	b.n	800bf0a <_printf_float+0xc6>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	464a      	mov	r2, r9
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	f43f af27 	beq.w	800bf06 <_printf_float+0xc2>
 800c0b8:	f108 0801 	add.w	r8, r8, #1
 800c0bc:	e7e6      	b.n	800c08c <_printf_float+0x248>
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dc39      	bgt.n	800c138 <_printf_float+0x2f4>
 800c0c4:	4a1b      	ldr	r2, [pc, #108]	; (800c134 <_printf_float+0x2f0>)
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	f43f af19 	beq.w	800bf06 <_printf_float+0xc2>
 800c0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	d102      	bne.n	800c0e2 <_printf_float+0x29e>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	07d9      	lsls	r1, r3, #31
 800c0e0:	d5d8      	bpl.n	800c094 <_printf_float+0x250>
 800c0e2:	ee18 3a10 	vmov	r3, s16
 800c0e6:	4652      	mov	r2, sl
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b8      	blx	r7
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f43f af09 	beq.w	800bf06 <_printf_float+0xc2>
 800c0f4:	f04f 0900 	mov.w	r9, #0
 800c0f8:	f104 0a1a 	add.w	sl, r4, #26
 800c0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fe:	425b      	negs	r3, r3
 800c100:	454b      	cmp	r3, r9
 800c102:	dc01      	bgt.n	800c108 <_printf_float+0x2c4>
 800c104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c106:	e792      	b.n	800c02e <_printf_float+0x1ea>
 800c108:	2301      	movs	r3, #1
 800c10a:	4652      	mov	r2, sl
 800c10c:	4631      	mov	r1, r6
 800c10e:	4628      	mov	r0, r5
 800c110:	47b8      	blx	r7
 800c112:	3001      	adds	r0, #1
 800c114:	f43f aef7 	beq.w	800bf06 <_printf_float+0xc2>
 800c118:	f109 0901 	add.w	r9, r9, #1
 800c11c:	e7ee      	b.n	800c0fc <_printf_float+0x2b8>
 800c11e:	bf00      	nop
 800c120:	7fefffff 	.word	0x7fefffff
 800c124:	08010cc8 	.word	0x08010cc8
 800c128:	08010ccc 	.word	0x08010ccc
 800c12c:	08010cd4 	.word	0x08010cd4
 800c130:	08010cd0 	.word	0x08010cd0
 800c134:	08010cd8 	.word	0x08010cd8
 800c138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c13a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c13c:	429a      	cmp	r2, r3
 800c13e:	bfa8      	it	ge
 800c140:	461a      	movge	r2, r3
 800c142:	2a00      	cmp	r2, #0
 800c144:	4691      	mov	r9, r2
 800c146:	dc37      	bgt.n	800c1b8 <_printf_float+0x374>
 800c148:	f04f 0b00 	mov.w	fp, #0
 800c14c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c150:	f104 021a 	add.w	r2, r4, #26
 800c154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c156:	9305      	str	r3, [sp, #20]
 800c158:	eba3 0309 	sub.w	r3, r3, r9
 800c15c:	455b      	cmp	r3, fp
 800c15e:	dc33      	bgt.n	800c1c8 <_printf_float+0x384>
 800c160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c164:	429a      	cmp	r2, r3
 800c166:	db3b      	blt.n	800c1e0 <_printf_float+0x39c>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07da      	lsls	r2, r3, #31
 800c16c:	d438      	bmi.n	800c1e0 <_printf_float+0x39c>
 800c16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c170:	9a05      	ldr	r2, [sp, #20]
 800c172:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c174:	1a9a      	subs	r2, r3, r2
 800c176:	eba3 0901 	sub.w	r9, r3, r1
 800c17a:	4591      	cmp	r9, r2
 800c17c:	bfa8      	it	ge
 800c17e:	4691      	movge	r9, r2
 800c180:	f1b9 0f00 	cmp.w	r9, #0
 800c184:	dc35      	bgt.n	800c1f2 <_printf_float+0x3ae>
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c18e:	f104 0a1a 	add.w	sl, r4, #26
 800c192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c196:	1a9b      	subs	r3, r3, r2
 800c198:	eba3 0309 	sub.w	r3, r3, r9
 800c19c:	4543      	cmp	r3, r8
 800c19e:	f77f af79 	ble.w	800c094 <_printf_float+0x250>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b8      	blx	r7
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	f43f aeaa 	beq.w	800bf06 <_printf_float+0xc2>
 800c1b2:	f108 0801 	add.w	r8, r8, #1
 800c1b6:	e7ec      	b.n	800c192 <_printf_float+0x34e>
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4642      	mov	r2, r8
 800c1be:	4628      	mov	r0, r5
 800c1c0:	47b8      	blx	r7
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	d1c0      	bne.n	800c148 <_printf_float+0x304>
 800c1c6:	e69e      	b.n	800bf06 <_printf_float+0xc2>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	9205      	str	r2, [sp, #20]
 800c1d0:	47b8      	blx	r7
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f43f ae97 	beq.w	800bf06 <_printf_float+0xc2>
 800c1d8:	9a05      	ldr	r2, [sp, #20]
 800c1da:	f10b 0b01 	add.w	fp, fp, #1
 800c1de:	e7b9      	b.n	800c154 <_printf_float+0x310>
 800c1e0:	ee18 3a10 	vmov	r3, s16
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b8      	blx	r7
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d1be      	bne.n	800c16e <_printf_float+0x32a>
 800c1f0:	e689      	b.n	800bf06 <_printf_float+0xc2>
 800c1f2:	9a05      	ldr	r2, [sp, #20]
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	4442      	add	r2, r8
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b8      	blx	r7
 800c1fe:	3001      	adds	r0, #1
 800c200:	d1c1      	bne.n	800c186 <_printf_float+0x342>
 800c202:	e680      	b.n	800bf06 <_printf_float+0xc2>
 800c204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c206:	2a01      	cmp	r2, #1
 800c208:	dc01      	bgt.n	800c20e <_printf_float+0x3ca>
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d538      	bpl.n	800c280 <_printf_float+0x43c>
 800c20e:	2301      	movs	r3, #1
 800c210:	4642      	mov	r2, r8
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	f43f ae74 	beq.w	800bf06 <_printf_float+0xc2>
 800c21e:	ee18 3a10 	vmov	r3, s16
 800c222:	4652      	mov	r2, sl
 800c224:	4631      	mov	r1, r6
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	f43f ae6b 	beq.w	800bf06 <_printf_float+0xc2>
 800c230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c234:	2200      	movs	r2, #0
 800c236:	2300      	movs	r3, #0
 800c238:	f7f4 fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 800c23c:	b9d8      	cbnz	r0, 800c276 <_printf_float+0x432>
 800c23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c240:	f108 0201 	add.w	r2, r8, #1
 800c244:	3b01      	subs	r3, #1
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	d10e      	bne.n	800c26e <_printf_float+0x42a>
 800c250:	e659      	b.n	800bf06 <_printf_float+0xc2>
 800c252:	2301      	movs	r3, #1
 800c254:	4652      	mov	r2, sl
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	f43f ae52 	beq.w	800bf06 <_printf_float+0xc2>
 800c262:	f108 0801 	add.w	r8, r8, #1
 800c266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c268:	3b01      	subs	r3, #1
 800c26a:	4543      	cmp	r3, r8
 800c26c:	dcf1      	bgt.n	800c252 <_printf_float+0x40e>
 800c26e:	464b      	mov	r3, r9
 800c270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c274:	e6dc      	b.n	800c030 <_printf_float+0x1ec>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	f104 0a1a 	add.w	sl, r4, #26
 800c27e:	e7f2      	b.n	800c266 <_printf_float+0x422>
 800c280:	2301      	movs	r3, #1
 800c282:	4642      	mov	r2, r8
 800c284:	e7df      	b.n	800c246 <_printf_float+0x402>
 800c286:	2301      	movs	r3, #1
 800c288:	464a      	mov	r2, r9
 800c28a:	4631      	mov	r1, r6
 800c28c:	4628      	mov	r0, r5
 800c28e:	47b8      	blx	r7
 800c290:	3001      	adds	r0, #1
 800c292:	f43f ae38 	beq.w	800bf06 <_printf_float+0xc2>
 800c296:	f108 0801 	add.w	r8, r8, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	4543      	cmp	r3, r8
 800c2a2:	dcf0      	bgt.n	800c286 <_printf_float+0x442>
 800c2a4:	e6fa      	b.n	800c09c <_printf_float+0x258>
 800c2a6:	f04f 0800 	mov.w	r8, #0
 800c2aa:	f104 0919 	add.w	r9, r4, #25
 800c2ae:	e7f4      	b.n	800c29a <_printf_float+0x456>

0800c2b0 <_printf_common>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	4699      	mov	r9, r3
 800c2b8:	688a      	ldr	r2, [r1, #8]
 800c2ba:	690b      	ldr	r3, [r1, #16]
 800c2bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	bfb8      	it	lt
 800c2c4:	4613      	movlt	r3, r2
 800c2c6:	6033      	str	r3, [r6, #0]
 800c2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	b10a      	cbz	r2, 800c2d6 <_printf_common+0x26>
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	6033      	str	r3, [r6, #0]
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	0699      	lsls	r1, r3, #26
 800c2da:	bf42      	ittt	mi
 800c2dc:	6833      	ldrmi	r3, [r6, #0]
 800c2de:	3302      	addmi	r3, #2
 800c2e0:	6033      	strmi	r3, [r6, #0]
 800c2e2:	6825      	ldr	r5, [r4, #0]
 800c2e4:	f015 0506 	ands.w	r5, r5, #6
 800c2e8:	d106      	bne.n	800c2f8 <_printf_common+0x48>
 800c2ea:	f104 0a19 	add.w	sl, r4, #25
 800c2ee:	68e3      	ldr	r3, [r4, #12]
 800c2f0:	6832      	ldr	r2, [r6, #0]
 800c2f2:	1a9b      	subs	r3, r3, r2
 800c2f4:	42ab      	cmp	r3, r5
 800c2f6:	dc26      	bgt.n	800c346 <_printf_common+0x96>
 800c2f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2fc:	1e13      	subs	r3, r2, #0
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	bf18      	it	ne
 800c302:	2301      	movne	r3, #1
 800c304:	0692      	lsls	r2, r2, #26
 800c306:	d42b      	bmi.n	800c360 <_printf_common+0xb0>
 800c308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c30c:	4649      	mov	r1, r9
 800c30e:	4638      	mov	r0, r7
 800c310:	47c0      	blx	r8
 800c312:	3001      	adds	r0, #1
 800c314:	d01e      	beq.n	800c354 <_printf_common+0xa4>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	68e5      	ldr	r5, [r4, #12]
 800c31a:	6832      	ldr	r2, [r6, #0]
 800c31c:	f003 0306 	and.w	r3, r3, #6
 800c320:	2b04      	cmp	r3, #4
 800c322:	bf08      	it	eq
 800c324:	1aad      	subeq	r5, r5, r2
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	bf0c      	ite	eq
 800c32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c330:	2500      	movne	r5, #0
 800c332:	4293      	cmp	r3, r2
 800c334:	bfc4      	itt	gt
 800c336:	1a9b      	subgt	r3, r3, r2
 800c338:	18ed      	addgt	r5, r5, r3
 800c33a:	2600      	movs	r6, #0
 800c33c:	341a      	adds	r4, #26
 800c33e:	42b5      	cmp	r5, r6
 800c340:	d11a      	bne.n	800c378 <_printf_common+0xc8>
 800c342:	2000      	movs	r0, #0
 800c344:	e008      	b.n	800c358 <_printf_common+0xa8>
 800c346:	2301      	movs	r3, #1
 800c348:	4652      	mov	r2, sl
 800c34a:	4649      	mov	r1, r9
 800c34c:	4638      	mov	r0, r7
 800c34e:	47c0      	blx	r8
 800c350:	3001      	adds	r0, #1
 800c352:	d103      	bne.n	800c35c <_printf_common+0xac>
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35c:	3501      	adds	r5, #1
 800c35e:	e7c6      	b.n	800c2ee <_printf_common+0x3e>
 800c360:	18e1      	adds	r1, r4, r3
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	2030      	movs	r0, #48	; 0x30
 800c366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c36a:	4422      	add	r2, r4
 800c36c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c374:	3302      	adds	r3, #2
 800c376:	e7c7      	b.n	800c308 <_printf_common+0x58>
 800c378:	2301      	movs	r3, #1
 800c37a:	4622      	mov	r2, r4
 800c37c:	4649      	mov	r1, r9
 800c37e:	4638      	mov	r0, r7
 800c380:	47c0      	blx	r8
 800c382:	3001      	adds	r0, #1
 800c384:	d0e6      	beq.n	800c354 <_printf_common+0xa4>
 800c386:	3601      	adds	r6, #1
 800c388:	e7d9      	b.n	800c33e <_printf_common+0x8e>
	...

0800c38c <_printf_i>:
 800c38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	7e0f      	ldrb	r7, [r1, #24]
 800c392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c394:	2f78      	cmp	r7, #120	; 0x78
 800c396:	4691      	mov	r9, r2
 800c398:	4680      	mov	r8, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	469a      	mov	sl, r3
 800c39e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3a2:	d807      	bhi.n	800c3b4 <_printf_i+0x28>
 800c3a4:	2f62      	cmp	r7, #98	; 0x62
 800c3a6:	d80a      	bhi.n	800c3be <_printf_i+0x32>
 800c3a8:	2f00      	cmp	r7, #0
 800c3aa:	f000 80d8 	beq.w	800c55e <_printf_i+0x1d2>
 800c3ae:	2f58      	cmp	r7, #88	; 0x58
 800c3b0:	f000 80a3 	beq.w	800c4fa <_printf_i+0x16e>
 800c3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3bc:	e03a      	b.n	800c434 <_printf_i+0xa8>
 800c3be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3c2:	2b15      	cmp	r3, #21
 800c3c4:	d8f6      	bhi.n	800c3b4 <_printf_i+0x28>
 800c3c6:	a101      	add	r1, pc, #4	; (adr r1, 800c3cc <_printf_i+0x40>)
 800c3c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3cc:	0800c425 	.word	0x0800c425
 800c3d0:	0800c439 	.word	0x0800c439
 800c3d4:	0800c3b5 	.word	0x0800c3b5
 800c3d8:	0800c3b5 	.word	0x0800c3b5
 800c3dc:	0800c3b5 	.word	0x0800c3b5
 800c3e0:	0800c3b5 	.word	0x0800c3b5
 800c3e4:	0800c439 	.word	0x0800c439
 800c3e8:	0800c3b5 	.word	0x0800c3b5
 800c3ec:	0800c3b5 	.word	0x0800c3b5
 800c3f0:	0800c3b5 	.word	0x0800c3b5
 800c3f4:	0800c3b5 	.word	0x0800c3b5
 800c3f8:	0800c545 	.word	0x0800c545
 800c3fc:	0800c469 	.word	0x0800c469
 800c400:	0800c527 	.word	0x0800c527
 800c404:	0800c3b5 	.word	0x0800c3b5
 800c408:	0800c3b5 	.word	0x0800c3b5
 800c40c:	0800c567 	.word	0x0800c567
 800c410:	0800c3b5 	.word	0x0800c3b5
 800c414:	0800c469 	.word	0x0800c469
 800c418:	0800c3b5 	.word	0x0800c3b5
 800c41c:	0800c3b5 	.word	0x0800c3b5
 800c420:	0800c52f 	.word	0x0800c52f
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	1d1a      	adds	r2, r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	602a      	str	r2, [r5, #0]
 800c42c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c434:	2301      	movs	r3, #1
 800c436:	e0a3      	b.n	800c580 <_printf_i+0x1f4>
 800c438:	6820      	ldr	r0, [r4, #0]
 800c43a:	6829      	ldr	r1, [r5, #0]
 800c43c:	0606      	lsls	r6, r0, #24
 800c43e:	f101 0304 	add.w	r3, r1, #4
 800c442:	d50a      	bpl.n	800c45a <_printf_i+0xce>
 800c444:	680e      	ldr	r6, [r1, #0]
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	2e00      	cmp	r6, #0
 800c44a:	da03      	bge.n	800c454 <_printf_i+0xc8>
 800c44c:	232d      	movs	r3, #45	; 0x2d
 800c44e:	4276      	negs	r6, r6
 800c450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c454:	485e      	ldr	r0, [pc, #376]	; (800c5d0 <_printf_i+0x244>)
 800c456:	230a      	movs	r3, #10
 800c458:	e019      	b.n	800c48e <_printf_i+0x102>
 800c45a:	680e      	ldr	r6, [r1, #0]
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c462:	bf18      	it	ne
 800c464:	b236      	sxthne	r6, r6
 800c466:	e7ef      	b.n	800c448 <_printf_i+0xbc>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	6820      	ldr	r0, [r4, #0]
 800c46c:	1d19      	adds	r1, r3, #4
 800c46e:	6029      	str	r1, [r5, #0]
 800c470:	0601      	lsls	r1, r0, #24
 800c472:	d501      	bpl.n	800c478 <_printf_i+0xec>
 800c474:	681e      	ldr	r6, [r3, #0]
 800c476:	e002      	b.n	800c47e <_printf_i+0xf2>
 800c478:	0646      	lsls	r6, r0, #25
 800c47a:	d5fb      	bpl.n	800c474 <_printf_i+0xe8>
 800c47c:	881e      	ldrh	r6, [r3, #0]
 800c47e:	4854      	ldr	r0, [pc, #336]	; (800c5d0 <_printf_i+0x244>)
 800c480:	2f6f      	cmp	r7, #111	; 0x6f
 800c482:	bf0c      	ite	eq
 800c484:	2308      	moveq	r3, #8
 800c486:	230a      	movne	r3, #10
 800c488:	2100      	movs	r1, #0
 800c48a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c48e:	6865      	ldr	r5, [r4, #4]
 800c490:	60a5      	str	r5, [r4, #8]
 800c492:	2d00      	cmp	r5, #0
 800c494:	bfa2      	ittt	ge
 800c496:	6821      	ldrge	r1, [r4, #0]
 800c498:	f021 0104 	bicge.w	r1, r1, #4
 800c49c:	6021      	strge	r1, [r4, #0]
 800c49e:	b90e      	cbnz	r6, 800c4a4 <_printf_i+0x118>
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	d04d      	beq.n	800c540 <_printf_i+0x1b4>
 800c4a4:	4615      	mov	r5, r2
 800c4a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4aa:	fb03 6711 	mls	r7, r3, r1, r6
 800c4ae:	5dc7      	ldrb	r7, [r0, r7]
 800c4b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4b4:	4637      	mov	r7, r6
 800c4b6:	42bb      	cmp	r3, r7
 800c4b8:	460e      	mov	r6, r1
 800c4ba:	d9f4      	bls.n	800c4a6 <_printf_i+0x11a>
 800c4bc:	2b08      	cmp	r3, #8
 800c4be:	d10b      	bne.n	800c4d8 <_printf_i+0x14c>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	07de      	lsls	r6, r3, #31
 800c4c4:	d508      	bpl.n	800c4d8 <_printf_i+0x14c>
 800c4c6:	6923      	ldr	r3, [r4, #16]
 800c4c8:	6861      	ldr	r1, [r4, #4]
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	bfde      	ittt	le
 800c4ce:	2330      	movle	r3, #48	; 0x30
 800c4d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4d8:	1b52      	subs	r2, r2, r5
 800c4da:	6122      	str	r2, [r4, #16]
 800c4dc:	f8cd a000 	str.w	sl, [sp]
 800c4e0:	464b      	mov	r3, r9
 800c4e2:	aa03      	add	r2, sp, #12
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f7ff fee2 	bl	800c2b0 <_printf_common>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d14c      	bne.n	800c58a <_printf_i+0x1fe>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	b004      	add	sp, #16
 800c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fa:	4835      	ldr	r0, [pc, #212]	; (800c5d0 <_printf_i+0x244>)
 800c4fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c500:	6829      	ldr	r1, [r5, #0]
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	f851 6b04 	ldr.w	r6, [r1], #4
 800c508:	6029      	str	r1, [r5, #0]
 800c50a:	061d      	lsls	r5, r3, #24
 800c50c:	d514      	bpl.n	800c538 <_printf_i+0x1ac>
 800c50e:	07df      	lsls	r7, r3, #31
 800c510:	bf44      	itt	mi
 800c512:	f043 0320 	orrmi.w	r3, r3, #32
 800c516:	6023      	strmi	r3, [r4, #0]
 800c518:	b91e      	cbnz	r6, 800c522 <_printf_i+0x196>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	f023 0320 	bic.w	r3, r3, #32
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	2310      	movs	r3, #16
 800c524:	e7b0      	b.n	800c488 <_printf_i+0xfc>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	f043 0320 	orr.w	r3, r3, #32
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	2378      	movs	r3, #120	; 0x78
 800c530:	4828      	ldr	r0, [pc, #160]	; (800c5d4 <_printf_i+0x248>)
 800c532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c536:	e7e3      	b.n	800c500 <_printf_i+0x174>
 800c538:	0659      	lsls	r1, r3, #25
 800c53a:	bf48      	it	mi
 800c53c:	b2b6      	uxthmi	r6, r6
 800c53e:	e7e6      	b.n	800c50e <_printf_i+0x182>
 800c540:	4615      	mov	r5, r2
 800c542:	e7bb      	b.n	800c4bc <_printf_i+0x130>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	6826      	ldr	r6, [r4, #0]
 800c548:	6961      	ldr	r1, [r4, #20]
 800c54a:	1d18      	adds	r0, r3, #4
 800c54c:	6028      	str	r0, [r5, #0]
 800c54e:	0635      	lsls	r5, r6, #24
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	d501      	bpl.n	800c558 <_printf_i+0x1cc>
 800c554:	6019      	str	r1, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0x1d2>
 800c558:	0670      	lsls	r0, r6, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0x1c8>
 800c55c:	8019      	strh	r1, [r3, #0]
 800c55e:	2300      	movs	r3, #0
 800c560:	6123      	str	r3, [r4, #16]
 800c562:	4615      	mov	r5, r2
 800c564:	e7ba      	b.n	800c4dc <_printf_i+0x150>
 800c566:	682b      	ldr	r3, [r5, #0]
 800c568:	1d1a      	adds	r2, r3, #4
 800c56a:	602a      	str	r2, [r5, #0]
 800c56c:	681d      	ldr	r5, [r3, #0]
 800c56e:	6862      	ldr	r2, [r4, #4]
 800c570:	2100      	movs	r1, #0
 800c572:	4628      	mov	r0, r5
 800c574:	f7f3 fe4c 	bl	8000210 <memchr>
 800c578:	b108      	cbz	r0, 800c57e <_printf_i+0x1f2>
 800c57a:	1b40      	subs	r0, r0, r5
 800c57c:	6060      	str	r0, [r4, #4]
 800c57e:	6863      	ldr	r3, [r4, #4]
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	2300      	movs	r3, #0
 800c584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c588:	e7a8      	b.n	800c4dc <_printf_i+0x150>
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	462a      	mov	r2, r5
 800c58e:	4649      	mov	r1, r9
 800c590:	4640      	mov	r0, r8
 800c592:	47d0      	blx	sl
 800c594:	3001      	adds	r0, #1
 800c596:	d0ab      	beq.n	800c4f0 <_printf_i+0x164>
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	079b      	lsls	r3, r3, #30
 800c59c:	d413      	bmi.n	800c5c6 <_printf_i+0x23a>
 800c59e:	68e0      	ldr	r0, [r4, #12]
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	bfb8      	it	lt
 800c5a6:	4618      	movlt	r0, r3
 800c5a8:	e7a4      	b.n	800c4f4 <_printf_i+0x168>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	47d0      	blx	sl
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d09b      	beq.n	800c4f0 <_printf_i+0x164>
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	68e3      	ldr	r3, [r4, #12]
 800c5bc:	9903      	ldr	r1, [sp, #12]
 800c5be:	1a5b      	subs	r3, r3, r1
 800c5c0:	42ab      	cmp	r3, r5
 800c5c2:	dcf2      	bgt.n	800c5aa <_printf_i+0x21e>
 800c5c4:	e7eb      	b.n	800c59e <_printf_i+0x212>
 800c5c6:	2500      	movs	r5, #0
 800c5c8:	f104 0619 	add.w	r6, r4, #25
 800c5cc:	e7f5      	b.n	800c5ba <_printf_i+0x22e>
 800c5ce:	bf00      	nop
 800c5d0:	08010cda 	.word	0x08010cda
 800c5d4:	08010ceb 	.word	0x08010ceb

0800c5d8 <_puts_r>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	460e      	mov	r6, r1
 800c5dc:	4605      	mov	r5, r0
 800c5de:	b118      	cbz	r0, 800c5e8 <_puts_r+0x10>
 800c5e0:	6983      	ldr	r3, [r0, #24]
 800c5e2:	b90b      	cbnz	r3, 800c5e8 <_puts_r+0x10>
 800c5e4:	f7ff f9c2 	bl	800b96c <__sinit>
 800c5e8:	69ab      	ldr	r3, [r5, #24]
 800c5ea:	68ac      	ldr	r4, [r5, #8]
 800c5ec:	b913      	cbnz	r3, 800c5f4 <_puts_r+0x1c>
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f7ff f9bc 	bl	800b96c <__sinit>
 800c5f4:	4b2c      	ldr	r3, [pc, #176]	; (800c6a8 <_puts_r+0xd0>)
 800c5f6:	429c      	cmp	r4, r3
 800c5f8:	d120      	bne.n	800c63c <_puts_r+0x64>
 800c5fa:	686c      	ldr	r4, [r5, #4]
 800c5fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5fe:	07db      	lsls	r3, r3, #31
 800c600:	d405      	bmi.n	800c60e <_puts_r+0x36>
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	0598      	lsls	r0, r3, #22
 800c606:	d402      	bmi.n	800c60e <_puts_r+0x36>
 800c608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c60a:	f7ff fa72 	bl	800baf2 <__retarget_lock_acquire_recursive>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	0719      	lsls	r1, r3, #28
 800c612:	d51d      	bpl.n	800c650 <_puts_r+0x78>
 800c614:	6923      	ldr	r3, [r4, #16]
 800c616:	b1db      	cbz	r3, 800c650 <_puts_r+0x78>
 800c618:	3e01      	subs	r6, #1
 800c61a:	68a3      	ldr	r3, [r4, #8]
 800c61c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c620:	3b01      	subs	r3, #1
 800c622:	60a3      	str	r3, [r4, #8]
 800c624:	bb39      	cbnz	r1, 800c676 <_puts_r+0x9e>
 800c626:	2b00      	cmp	r3, #0
 800c628:	da38      	bge.n	800c69c <_puts_r+0xc4>
 800c62a:	4622      	mov	r2, r4
 800c62c:	210a      	movs	r1, #10
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 ffec 	bl	800d60c <__swbuf_r>
 800c634:	3001      	adds	r0, #1
 800c636:	d011      	beq.n	800c65c <_puts_r+0x84>
 800c638:	250a      	movs	r5, #10
 800c63a:	e011      	b.n	800c660 <_puts_r+0x88>
 800c63c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ac <_puts_r+0xd4>)
 800c63e:	429c      	cmp	r4, r3
 800c640:	d101      	bne.n	800c646 <_puts_r+0x6e>
 800c642:	68ac      	ldr	r4, [r5, #8]
 800c644:	e7da      	b.n	800c5fc <_puts_r+0x24>
 800c646:	4b1a      	ldr	r3, [pc, #104]	; (800c6b0 <_puts_r+0xd8>)
 800c648:	429c      	cmp	r4, r3
 800c64a:	bf08      	it	eq
 800c64c:	68ec      	ldreq	r4, [r5, #12]
 800c64e:	e7d5      	b.n	800c5fc <_puts_r+0x24>
 800c650:	4621      	mov	r1, r4
 800c652:	4628      	mov	r0, r5
 800c654:	f001 f83e 	bl	800d6d4 <__swsetup_r>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d0dd      	beq.n	800c618 <_puts_r+0x40>
 800c65c:	f04f 35ff 	mov.w	r5, #4294967295
 800c660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c662:	07da      	lsls	r2, r3, #31
 800c664:	d405      	bmi.n	800c672 <_puts_r+0x9a>
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	059b      	lsls	r3, r3, #22
 800c66a:	d402      	bmi.n	800c672 <_puts_r+0x9a>
 800c66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c66e:	f7ff fa41 	bl	800baf4 <__retarget_lock_release_recursive>
 800c672:	4628      	mov	r0, r5
 800c674:	bd70      	pop	{r4, r5, r6, pc}
 800c676:	2b00      	cmp	r3, #0
 800c678:	da04      	bge.n	800c684 <_puts_r+0xac>
 800c67a:	69a2      	ldr	r2, [r4, #24]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	dc06      	bgt.n	800c68e <_puts_r+0xb6>
 800c680:	290a      	cmp	r1, #10
 800c682:	d004      	beq.n	800c68e <_puts_r+0xb6>
 800c684:	6823      	ldr	r3, [r4, #0]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	6022      	str	r2, [r4, #0]
 800c68a:	7019      	strb	r1, [r3, #0]
 800c68c:	e7c5      	b.n	800c61a <_puts_r+0x42>
 800c68e:	4622      	mov	r2, r4
 800c690:	4628      	mov	r0, r5
 800c692:	f000 ffbb 	bl	800d60c <__swbuf_r>
 800c696:	3001      	adds	r0, #1
 800c698:	d1bf      	bne.n	800c61a <_puts_r+0x42>
 800c69a:	e7df      	b.n	800c65c <_puts_r+0x84>
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	250a      	movs	r5, #10
 800c6a0:	1c5a      	adds	r2, r3, #1
 800c6a2:	6022      	str	r2, [r4, #0]
 800c6a4:	701d      	strb	r5, [r3, #0]
 800c6a6:	e7db      	b.n	800c660 <_puts_r+0x88>
 800c6a8:	08010c84 	.word	0x08010c84
 800c6ac:	08010ca4 	.word	0x08010ca4
 800c6b0:	08010c64 	.word	0x08010c64

0800c6b4 <puts>:
 800c6b4:	4b02      	ldr	r3, [pc, #8]	; (800c6c0 <puts+0xc>)
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	6818      	ldr	r0, [r3, #0]
 800c6ba:	f7ff bf8d 	b.w	800c5d8 <_puts_r>
 800c6be:	bf00      	nop
 800c6c0:	2000001c 	.word	0x2000001c

0800c6c4 <rand>:
 800c6c4:	4b16      	ldr	r3, [pc, #88]	; (800c720 <rand+0x5c>)
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	681c      	ldr	r4, [r3, #0]
 800c6ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c6cc:	b9b3      	cbnz	r3, 800c6fc <rand+0x38>
 800c6ce:	2018      	movs	r0, #24
 800c6d0:	f7ff fa12 	bl	800baf8 <malloc>
 800c6d4:	63a0      	str	r0, [r4, #56]	; 0x38
 800c6d6:	b928      	cbnz	r0, 800c6e4 <rand+0x20>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	4b12      	ldr	r3, [pc, #72]	; (800c724 <rand+0x60>)
 800c6dc:	4812      	ldr	r0, [pc, #72]	; (800c728 <rand+0x64>)
 800c6de:	214e      	movs	r1, #78	; 0x4e
 800c6e0:	f001 f866 	bl	800d7b0 <__assert_func>
 800c6e4:	4a11      	ldr	r2, [pc, #68]	; (800c72c <rand+0x68>)
 800c6e6:	4b12      	ldr	r3, [pc, #72]	; (800c730 <rand+0x6c>)
 800c6e8:	e9c0 2300 	strd	r2, r3, [r0]
 800c6ec:	4b11      	ldr	r3, [pc, #68]	; (800c734 <rand+0x70>)
 800c6ee:	6083      	str	r3, [r0, #8]
 800c6f0:	230b      	movs	r3, #11
 800c6f2:	8183      	strh	r3, [r0, #12]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c6fc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c6fe:	4a0e      	ldr	r2, [pc, #56]	; (800c738 <rand+0x74>)
 800c700:	6920      	ldr	r0, [r4, #16]
 800c702:	6963      	ldr	r3, [r4, #20]
 800c704:	490d      	ldr	r1, [pc, #52]	; (800c73c <rand+0x78>)
 800c706:	4342      	muls	r2, r0
 800c708:	fb01 2203 	mla	r2, r1, r3, r2
 800c70c:	fba0 0101 	umull	r0, r1, r0, r1
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	eb42 0001 	adc.w	r0, r2, r1
 800c716:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800c71a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c71e:	bd10      	pop	{r4, pc}
 800c720:	2000001c 	.word	0x2000001c
 800c724:	08010cfc 	.word	0x08010cfc
 800c728:	08010d13 	.word	0x08010d13
 800c72c:	abcd330e 	.word	0xabcd330e
 800c730:	e66d1234 	.word	0xe66d1234
 800c734:	0005deec 	.word	0x0005deec
 800c738:	5851f42d 	.word	0x5851f42d
 800c73c:	4c957f2d 	.word	0x4c957f2d

0800c740 <realloc>:
 800c740:	4b02      	ldr	r3, [pc, #8]	; (800c74c <realloc+0xc>)
 800c742:	460a      	mov	r2, r1
 800c744:	4601      	mov	r1, r0
 800c746:	6818      	ldr	r0, [r3, #0]
 800c748:	f002 bfcf 	b.w	800f6ea <_realloc_r>
 800c74c:	2000001c 	.word	0x2000001c

0800c750 <cleanup_glue>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	460c      	mov	r4, r1
 800c754:	6809      	ldr	r1, [r1, #0]
 800c756:	4605      	mov	r5, r0
 800c758:	b109      	cbz	r1, 800c75e <cleanup_glue+0xe>
 800c75a:	f7ff fff9 	bl	800c750 <cleanup_glue>
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c766:	f7ff b9ed 	b.w	800bb44 <_free_r>
	...

0800c76c <_reclaim_reent>:
 800c76c:	4b2c      	ldr	r3, [pc, #176]	; (800c820 <_reclaim_reent+0xb4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4283      	cmp	r3, r0
 800c772:	b570      	push	{r4, r5, r6, lr}
 800c774:	4604      	mov	r4, r0
 800c776:	d051      	beq.n	800c81c <_reclaim_reent+0xb0>
 800c778:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c77a:	b143      	cbz	r3, 800c78e <_reclaim_reent+0x22>
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d14a      	bne.n	800c818 <_reclaim_reent+0xac>
 800c782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c784:	6819      	ldr	r1, [r3, #0]
 800c786:	b111      	cbz	r1, 800c78e <_reclaim_reent+0x22>
 800c788:	4620      	mov	r0, r4
 800c78a:	f7ff f9db 	bl	800bb44 <_free_r>
 800c78e:	6961      	ldr	r1, [r4, #20]
 800c790:	b111      	cbz	r1, 800c798 <_reclaim_reent+0x2c>
 800c792:	4620      	mov	r0, r4
 800c794:	f7ff f9d6 	bl	800bb44 <_free_r>
 800c798:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c79a:	b111      	cbz	r1, 800c7a2 <_reclaim_reent+0x36>
 800c79c:	4620      	mov	r0, r4
 800c79e:	f7ff f9d1 	bl	800bb44 <_free_r>
 800c7a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7a4:	b111      	cbz	r1, 800c7ac <_reclaim_reent+0x40>
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7ff f9cc 	bl	800bb44 <_free_r>
 800c7ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c7ae:	b111      	cbz	r1, 800c7b6 <_reclaim_reent+0x4a>
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f7ff f9c7 	bl	800bb44 <_free_r>
 800c7b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c7b8:	b111      	cbz	r1, 800c7c0 <_reclaim_reent+0x54>
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f7ff f9c2 	bl	800bb44 <_free_r>
 800c7c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c7c2:	b111      	cbz	r1, 800c7ca <_reclaim_reent+0x5e>
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f7ff f9bd 	bl	800bb44 <_free_r>
 800c7ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c7cc:	b111      	cbz	r1, 800c7d4 <_reclaim_reent+0x68>
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f7ff f9b8 	bl	800bb44 <_free_r>
 800c7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d6:	b111      	cbz	r1, 800c7de <_reclaim_reent+0x72>
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7ff f9b3 	bl	800bb44 <_free_r>
 800c7de:	69a3      	ldr	r3, [r4, #24]
 800c7e0:	b1e3      	cbz	r3, 800c81c <_reclaim_reent+0xb0>
 800c7e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4798      	blx	r3
 800c7e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c7ea:	b1b9      	cbz	r1, 800c81c <_reclaim_reent+0xb0>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7f2:	f7ff bfad 	b.w	800c750 <cleanup_glue>
 800c7f6:	5949      	ldr	r1, [r1, r5]
 800c7f8:	b941      	cbnz	r1, 800c80c <_reclaim_reent+0xa0>
 800c7fa:	3504      	adds	r5, #4
 800c7fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7fe:	2d80      	cmp	r5, #128	; 0x80
 800c800:	68d9      	ldr	r1, [r3, #12]
 800c802:	d1f8      	bne.n	800c7f6 <_reclaim_reent+0x8a>
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff f99d 	bl	800bb44 <_free_r>
 800c80a:	e7ba      	b.n	800c782 <_reclaim_reent+0x16>
 800c80c:	680e      	ldr	r6, [r1, #0]
 800c80e:	4620      	mov	r0, r4
 800c810:	f7ff f998 	bl	800bb44 <_free_r>
 800c814:	4631      	mov	r1, r6
 800c816:	e7ef      	b.n	800c7f8 <_reclaim_reent+0x8c>
 800c818:	2500      	movs	r5, #0
 800c81a:	e7ef      	b.n	800c7fc <_reclaim_reent+0x90>
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	bf00      	nop
 800c820:	2000001c 	.word	0x2000001c

0800c824 <_sbrk_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4d06      	ldr	r5, [pc, #24]	; (800c840 <_sbrk_r+0x1c>)
 800c828:	2300      	movs	r3, #0
 800c82a:	4604      	mov	r4, r0
 800c82c:	4608      	mov	r0, r1
 800c82e:	602b      	str	r3, [r5, #0]
 800c830:	f7f8 f870 	bl	8004914 <_sbrk>
 800c834:	1c43      	adds	r3, r0, #1
 800c836:	d102      	bne.n	800c83e <_sbrk_r+0x1a>
 800c838:	682b      	ldr	r3, [r5, #0]
 800c83a:	b103      	cbz	r3, 800c83e <_sbrk_r+0x1a>
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	2001617c 	.word	0x2001617c

0800c844 <siprintf>:
 800c844:	b40e      	push	{r1, r2, r3}
 800c846:	b500      	push	{lr}
 800c848:	b09c      	sub	sp, #112	; 0x70
 800c84a:	ab1d      	add	r3, sp, #116	; 0x74
 800c84c:	9002      	str	r0, [sp, #8]
 800c84e:	9006      	str	r0, [sp, #24]
 800c850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c854:	4809      	ldr	r0, [pc, #36]	; (800c87c <siprintf+0x38>)
 800c856:	9107      	str	r1, [sp, #28]
 800c858:	9104      	str	r1, [sp, #16]
 800c85a:	4909      	ldr	r1, [pc, #36]	; (800c880 <siprintf+0x3c>)
 800c85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c860:	9105      	str	r1, [sp, #20]
 800c862:	6800      	ldr	r0, [r0, #0]
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	a902      	add	r1, sp, #8
 800c868:	f002 ffca 	bl	800f800 <_svfiprintf_r>
 800c86c:	9b02      	ldr	r3, [sp, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	701a      	strb	r2, [r3, #0]
 800c872:	b01c      	add	sp, #112	; 0x70
 800c874:	f85d eb04 	ldr.w	lr, [sp], #4
 800c878:	b003      	add	sp, #12
 800c87a:	4770      	bx	lr
 800c87c:	2000001c 	.word	0x2000001c
 800c880:	ffff0208 	.word	0xffff0208

0800c884 <__sread>:
 800c884:	b510      	push	{r4, lr}
 800c886:	460c      	mov	r4, r1
 800c888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c88c:	f003 fa12 	bl	800fcb4 <_read_r>
 800c890:	2800      	cmp	r0, #0
 800c892:	bfab      	itete	ge
 800c894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c896:	89a3      	ldrhlt	r3, [r4, #12]
 800c898:	181b      	addge	r3, r3, r0
 800c89a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c89e:	bfac      	ite	ge
 800c8a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8a2:	81a3      	strhlt	r3, [r4, #12]
 800c8a4:	bd10      	pop	{r4, pc}

0800c8a6 <__swrite>:
 800c8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8aa:	461f      	mov	r7, r3
 800c8ac:	898b      	ldrh	r3, [r1, #12]
 800c8ae:	05db      	lsls	r3, r3, #23
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	d505      	bpl.n	800c8c4 <__swrite+0x1e>
 800c8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8bc:	2302      	movs	r3, #2
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f002 f9a6 	bl	800ec10 <_lseek_r>
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	463b      	mov	r3, r7
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8da:	f000 bee9 	b.w	800d6b0 <_write_r>

0800c8de <__sseek>:
 800c8de:	b510      	push	{r4, lr}
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e6:	f002 f993 	bl	800ec10 <_lseek_r>
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	bf15      	itete	ne
 800c8f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8fa:	81a3      	strheq	r3, [r4, #12]
 800c8fc:	bf18      	it	ne
 800c8fe:	81a3      	strhne	r3, [r4, #12]
 800c900:	bd10      	pop	{r4, pc}

0800c902 <__sclose>:
 800c902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c906:	f000 bf71 	b.w	800d7ec <_close_r>

0800c90a <strchr>:
 800c90a:	b2c9      	uxtb	r1, r1
 800c90c:	4603      	mov	r3, r0
 800c90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c912:	b11a      	cbz	r2, 800c91c <strchr+0x12>
 800c914:	428a      	cmp	r2, r1
 800c916:	d1f9      	bne.n	800c90c <strchr+0x2>
 800c918:	4618      	mov	r0, r3
 800c91a:	4770      	bx	lr
 800c91c:	2900      	cmp	r1, #0
 800c91e:	bf18      	it	ne
 800c920:	2300      	movne	r3, #0
 800c922:	e7f9      	b.n	800c918 <strchr+0xe>

0800c924 <strcpy>:
 800c924:	4603      	mov	r3, r0
 800c926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92a:	f803 2b01 	strb.w	r2, [r3], #1
 800c92e:	2a00      	cmp	r2, #0
 800c930:	d1f9      	bne.n	800c926 <strcpy+0x2>
 800c932:	4770      	bx	lr

0800c934 <strncmp>:
 800c934:	b510      	push	{r4, lr}
 800c936:	b17a      	cbz	r2, 800c958 <strncmp+0x24>
 800c938:	4603      	mov	r3, r0
 800c93a:	3901      	subs	r1, #1
 800c93c:	1884      	adds	r4, r0, r2
 800c93e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c942:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c946:	4290      	cmp	r0, r2
 800c948:	d101      	bne.n	800c94e <strncmp+0x1a>
 800c94a:	42a3      	cmp	r3, r4
 800c94c:	d101      	bne.n	800c952 <strncmp+0x1e>
 800c94e:	1a80      	subs	r0, r0, r2
 800c950:	bd10      	pop	{r4, pc}
 800c952:	2800      	cmp	r0, #0
 800c954:	d1f3      	bne.n	800c93e <strncmp+0xa>
 800c956:	e7fa      	b.n	800c94e <strncmp+0x1a>
 800c958:	4610      	mov	r0, r2
 800c95a:	e7f9      	b.n	800c950 <strncmp+0x1c>

0800c95c <strncpy>:
 800c95c:	b510      	push	{r4, lr}
 800c95e:	3901      	subs	r1, #1
 800c960:	4603      	mov	r3, r0
 800c962:	b132      	cbz	r2, 800c972 <strncpy+0x16>
 800c964:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c968:	f803 4b01 	strb.w	r4, [r3], #1
 800c96c:	3a01      	subs	r2, #1
 800c96e:	2c00      	cmp	r4, #0
 800c970:	d1f7      	bne.n	800c962 <strncpy+0x6>
 800c972:	441a      	add	r2, r3
 800c974:	2100      	movs	r1, #0
 800c976:	4293      	cmp	r3, r2
 800c978:	d100      	bne.n	800c97c <strncpy+0x20>
 800c97a:	bd10      	pop	{r4, pc}
 800c97c:	f803 1b01 	strb.w	r1, [r3], #1
 800c980:	e7f9      	b.n	800c976 <strncpy+0x1a>

0800c982 <strstr>:
 800c982:	780a      	ldrb	r2, [r1, #0]
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	b96a      	cbnz	r2, 800c9a4 <strstr+0x22>
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d109      	bne.n	800c9a2 <strstr+0x20>
 800c98e:	460c      	mov	r4, r1
 800c990:	4605      	mov	r5, r0
 800c992:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0f6      	beq.n	800c988 <strstr+0x6>
 800c99a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c99e:	429e      	cmp	r6, r3
 800c9a0:	d0f7      	beq.n	800c992 <strstr+0x10>
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	7803      	ldrb	r3, [r0, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1ef      	bne.n	800c98a <strstr+0x8>
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	e7ec      	b.n	800c988 <strstr+0x6>

0800c9ae <sulp>:
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	ec45 4b10 	vmov	d0, r4, r5
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	f002 fd31 	bl	800f420 <__ulp>
 800c9be:	ec51 0b10 	vmov	r0, r1, d0
 800c9c2:	b17e      	cbz	r6, 800c9e4 <sulp+0x36>
 800c9c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	dd09      	ble.n	800c9e4 <sulp+0x36>
 800c9d0:	051b      	lsls	r3, r3, #20
 800c9d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c9d6:	2400      	movs	r4, #0
 800c9d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c9dc:	4622      	mov	r2, r4
 800c9de:	462b      	mov	r3, r5
 800c9e0:	f7f3 fe22 	bl	8000628 <__aeabi_dmul>
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9e8 <_strtod_l>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	ed2d 8b02 	vpush	{d8}
 800c9f0:	b09d      	sub	sp, #116	; 0x74
 800c9f2:	461f      	mov	r7, r3
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	9318      	str	r3, [sp, #96]	; 0x60
 800c9f8:	4ba2      	ldr	r3, [pc, #648]	; (800cc84 <_strtod_l+0x29c>)
 800c9fa:	9213      	str	r2, [sp, #76]	; 0x4c
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	9305      	str	r3, [sp, #20]
 800ca00:	4604      	mov	r4, r0
 800ca02:	4618      	mov	r0, r3
 800ca04:	4688      	mov	r8, r1
 800ca06:	f7f3 fbf5 	bl	80001f4 <strlen>
 800ca0a:	f04f 0a00 	mov.w	sl, #0
 800ca0e:	4605      	mov	r5, r0
 800ca10:	f04f 0b00 	mov.w	fp, #0
 800ca14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ca18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca1a:	781a      	ldrb	r2, [r3, #0]
 800ca1c:	2a2b      	cmp	r2, #43	; 0x2b
 800ca1e:	d04e      	beq.n	800cabe <_strtod_l+0xd6>
 800ca20:	d83b      	bhi.n	800ca9a <_strtod_l+0xb2>
 800ca22:	2a0d      	cmp	r2, #13
 800ca24:	d834      	bhi.n	800ca90 <_strtod_l+0xa8>
 800ca26:	2a08      	cmp	r2, #8
 800ca28:	d834      	bhi.n	800ca94 <_strtod_l+0xac>
 800ca2a:	2a00      	cmp	r2, #0
 800ca2c:	d03e      	beq.n	800caac <_strtod_l+0xc4>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	930a      	str	r3, [sp, #40]	; 0x28
 800ca32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ca34:	7833      	ldrb	r3, [r6, #0]
 800ca36:	2b30      	cmp	r3, #48	; 0x30
 800ca38:	f040 80b0 	bne.w	800cb9c <_strtod_l+0x1b4>
 800ca3c:	7873      	ldrb	r3, [r6, #1]
 800ca3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca42:	2b58      	cmp	r3, #88	; 0x58
 800ca44:	d168      	bne.n	800cb18 <_strtod_l+0x130>
 800ca46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	ab18      	add	r3, sp, #96	; 0x60
 800ca4c:	9702      	str	r7, [sp, #8]
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	4a8d      	ldr	r2, [pc, #564]	; (800cc88 <_strtod_l+0x2a0>)
 800ca52:	ab19      	add	r3, sp, #100	; 0x64
 800ca54:	a917      	add	r1, sp, #92	; 0x5c
 800ca56:	4620      	mov	r0, r4
 800ca58:	f001 fdce 	bl	800e5f8 <__gethex>
 800ca5c:	f010 0707 	ands.w	r7, r0, #7
 800ca60:	4605      	mov	r5, r0
 800ca62:	d005      	beq.n	800ca70 <_strtod_l+0x88>
 800ca64:	2f06      	cmp	r7, #6
 800ca66:	d12c      	bne.n	800cac2 <_strtod_l+0xda>
 800ca68:	3601      	adds	r6, #1
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ca6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f040 8590 	bne.w	800d598 <_strtod_l+0xbb0>
 800ca78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca7a:	b1eb      	cbz	r3, 800cab8 <_strtod_l+0xd0>
 800ca7c:	4652      	mov	r2, sl
 800ca7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca82:	ec43 2b10 	vmov	d0, r2, r3
 800ca86:	b01d      	add	sp, #116	; 0x74
 800ca88:	ecbd 8b02 	vpop	{d8}
 800ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca90:	2a20      	cmp	r2, #32
 800ca92:	d1cc      	bne.n	800ca2e <_strtod_l+0x46>
 800ca94:	3301      	adds	r3, #1
 800ca96:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca98:	e7be      	b.n	800ca18 <_strtod_l+0x30>
 800ca9a:	2a2d      	cmp	r2, #45	; 0x2d
 800ca9c:	d1c7      	bne.n	800ca2e <_strtod_l+0x46>
 800ca9e:	2201      	movs	r2, #1
 800caa0:	920a      	str	r2, [sp, #40]	; 0x28
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	9217      	str	r2, [sp, #92]	; 0x5c
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1c2      	bne.n	800ca32 <_strtod_l+0x4a>
 800caac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f040 856e 	bne.w	800d594 <_strtod_l+0xbac>
 800cab8:	4652      	mov	r2, sl
 800caba:	465b      	mov	r3, fp
 800cabc:	e7e1      	b.n	800ca82 <_strtod_l+0x9a>
 800cabe:	2200      	movs	r2, #0
 800cac0:	e7ee      	b.n	800caa0 <_strtod_l+0xb8>
 800cac2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cac4:	b13a      	cbz	r2, 800cad6 <_strtod_l+0xee>
 800cac6:	2135      	movs	r1, #53	; 0x35
 800cac8:	a81a      	add	r0, sp, #104	; 0x68
 800caca:	f002 fdb4 	bl	800f636 <__copybits>
 800cace:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cad0:	4620      	mov	r0, r4
 800cad2:	f002 f973 	bl	800edbc <_Bfree>
 800cad6:	3f01      	subs	r7, #1
 800cad8:	2f04      	cmp	r7, #4
 800cada:	d806      	bhi.n	800caea <_strtod_l+0x102>
 800cadc:	e8df f007 	tbb	[pc, r7]
 800cae0:	1714030a 	.word	0x1714030a
 800cae4:	0a          	.byte	0x0a
 800cae5:	00          	.byte	0x00
 800cae6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800caea:	0728      	lsls	r0, r5, #28
 800caec:	d5c0      	bpl.n	800ca70 <_strtod_l+0x88>
 800caee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800caf2:	e7bd      	b.n	800ca70 <_strtod_l+0x88>
 800caf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800caf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cafa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cafe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb06:	e7f0      	b.n	800caea <_strtod_l+0x102>
 800cb08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cc8c <_strtod_l+0x2a4>
 800cb0c:	e7ed      	b.n	800caea <_strtod_l+0x102>
 800cb0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cb12:	f04f 3aff 	mov.w	sl, #4294967295
 800cb16:	e7e8      	b.n	800caea <_strtod_l+0x102>
 800cb18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	2b30      	cmp	r3, #48	; 0x30
 800cb22:	d0f9      	beq.n	800cb18 <_strtod_l+0x130>
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0a3      	beq.n	800ca70 <_strtod_l+0x88>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	f04f 0900 	mov.w	r9, #0
 800cb2e:	9304      	str	r3, [sp, #16]
 800cb30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb32:	9308      	str	r3, [sp, #32]
 800cb34:	f8cd 901c 	str.w	r9, [sp, #28]
 800cb38:	464f      	mov	r7, r9
 800cb3a:	220a      	movs	r2, #10
 800cb3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cb3e:	7806      	ldrb	r6, [r0, #0]
 800cb40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cb44:	b2d9      	uxtb	r1, r3
 800cb46:	2909      	cmp	r1, #9
 800cb48:	d92a      	bls.n	800cba0 <_strtod_l+0x1b8>
 800cb4a:	9905      	ldr	r1, [sp, #20]
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	f7ff fef1 	bl	800c934 <strncmp>
 800cb52:	b398      	cbz	r0, 800cbbc <_strtod_l+0x1d4>
 800cb54:	2000      	movs	r0, #0
 800cb56:	4632      	mov	r2, r6
 800cb58:	463d      	mov	r5, r7
 800cb5a:	9005      	str	r0, [sp, #20]
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2a65      	cmp	r2, #101	; 0x65
 800cb60:	d001      	beq.n	800cb66 <_strtod_l+0x17e>
 800cb62:	2a45      	cmp	r2, #69	; 0x45
 800cb64:	d118      	bne.n	800cb98 <_strtod_l+0x1b0>
 800cb66:	b91d      	cbnz	r5, 800cb70 <_strtod_l+0x188>
 800cb68:	9a04      	ldr	r2, [sp, #16]
 800cb6a:	4302      	orrs	r2, r0
 800cb6c:	d09e      	beq.n	800caac <_strtod_l+0xc4>
 800cb6e:	2500      	movs	r5, #0
 800cb70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cb74:	f108 0201 	add.w	r2, r8, #1
 800cb78:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cb7e:	2a2b      	cmp	r2, #43	; 0x2b
 800cb80:	d075      	beq.n	800cc6e <_strtod_l+0x286>
 800cb82:	2a2d      	cmp	r2, #45	; 0x2d
 800cb84:	d07b      	beq.n	800cc7e <_strtod_l+0x296>
 800cb86:	f04f 0c00 	mov.w	ip, #0
 800cb8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cb8e:	2909      	cmp	r1, #9
 800cb90:	f240 8082 	bls.w	800cc98 <_strtod_l+0x2b0>
 800cb94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb98:	2600      	movs	r6, #0
 800cb9a:	e09d      	b.n	800ccd8 <_strtod_l+0x2f0>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	e7c4      	b.n	800cb2a <_strtod_l+0x142>
 800cba0:	2f08      	cmp	r7, #8
 800cba2:	bfd8      	it	le
 800cba4:	9907      	ldrle	r1, [sp, #28]
 800cba6:	f100 0001 	add.w	r0, r0, #1
 800cbaa:	bfda      	itte	le
 800cbac:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbb0:	9307      	strle	r3, [sp, #28]
 800cbb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cbb6:	3701      	adds	r7, #1
 800cbb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800cbba:	e7bf      	b.n	800cb3c <_strtod_l+0x154>
 800cbbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbbe:	195a      	adds	r2, r3, r5
 800cbc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbc2:	5d5a      	ldrb	r2, [r3, r5]
 800cbc4:	2f00      	cmp	r7, #0
 800cbc6:	d037      	beq.n	800cc38 <_strtod_l+0x250>
 800cbc8:	9005      	str	r0, [sp, #20]
 800cbca:	463d      	mov	r5, r7
 800cbcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cbd0:	2b09      	cmp	r3, #9
 800cbd2:	d912      	bls.n	800cbfa <_strtod_l+0x212>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e7c2      	b.n	800cb5e <_strtod_l+0x176>
 800cbd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbde:	785a      	ldrb	r2, [r3, #1]
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	2a30      	cmp	r2, #48	; 0x30
 800cbe4:	d0f8      	beq.n	800cbd8 <_strtod_l+0x1f0>
 800cbe6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cbea:	2b08      	cmp	r3, #8
 800cbec:	f200 84d9 	bhi.w	800d5a2 <_strtod_l+0xbba>
 800cbf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbf2:	9005      	str	r0, [sp, #20]
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	9308      	str	r3, [sp, #32]
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	3a30      	subs	r2, #48	; 0x30
 800cbfc:	f100 0301 	add.w	r3, r0, #1
 800cc00:	d014      	beq.n	800cc2c <_strtod_l+0x244>
 800cc02:	9905      	ldr	r1, [sp, #20]
 800cc04:	4419      	add	r1, r3
 800cc06:	9105      	str	r1, [sp, #20]
 800cc08:	462b      	mov	r3, r5
 800cc0a:	eb00 0e05 	add.w	lr, r0, r5
 800cc0e:	210a      	movs	r1, #10
 800cc10:	4573      	cmp	r3, lr
 800cc12:	d113      	bne.n	800cc3c <_strtod_l+0x254>
 800cc14:	182b      	adds	r3, r5, r0
 800cc16:	2b08      	cmp	r3, #8
 800cc18:	f105 0501 	add.w	r5, r5, #1
 800cc1c:	4405      	add	r5, r0
 800cc1e:	dc1c      	bgt.n	800cc5a <_strtod_l+0x272>
 800cc20:	9907      	ldr	r1, [sp, #28]
 800cc22:	230a      	movs	r3, #10
 800cc24:	fb03 2301 	mla	r3, r3, r1, r2
 800cc28:	9307      	str	r3, [sp, #28]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc2e:	1c51      	adds	r1, r2, #1
 800cc30:	9117      	str	r1, [sp, #92]	; 0x5c
 800cc32:	7852      	ldrb	r2, [r2, #1]
 800cc34:	4618      	mov	r0, r3
 800cc36:	e7c9      	b.n	800cbcc <_strtod_l+0x1e4>
 800cc38:	4638      	mov	r0, r7
 800cc3a:	e7d2      	b.n	800cbe2 <_strtod_l+0x1fa>
 800cc3c:	2b08      	cmp	r3, #8
 800cc3e:	dc04      	bgt.n	800cc4a <_strtod_l+0x262>
 800cc40:	9e07      	ldr	r6, [sp, #28]
 800cc42:	434e      	muls	r6, r1
 800cc44:	9607      	str	r6, [sp, #28]
 800cc46:	3301      	adds	r3, #1
 800cc48:	e7e2      	b.n	800cc10 <_strtod_l+0x228>
 800cc4a:	f103 0c01 	add.w	ip, r3, #1
 800cc4e:	f1bc 0f10 	cmp.w	ip, #16
 800cc52:	bfd8      	it	le
 800cc54:	fb01 f909 	mulle.w	r9, r1, r9
 800cc58:	e7f5      	b.n	800cc46 <_strtod_l+0x25e>
 800cc5a:	2d10      	cmp	r5, #16
 800cc5c:	bfdc      	itt	le
 800cc5e:	230a      	movle	r3, #10
 800cc60:	fb03 2909 	mlale	r9, r3, r9, r2
 800cc64:	e7e1      	b.n	800cc2a <_strtod_l+0x242>
 800cc66:	2300      	movs	r3, #0
 800cc68:	9305      	str	r3, [sp, #20]
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e77c      	b.n	800cb68 <_strtod_l+0x180>
 800cc6e:	f04f 0c00 	mov.w	ip, #0
 800cc72:	f108 0202 	add.w	r2, r8, #2
 800cc76:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc78:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cc7c:	e785      	b.n	800cb8a <_strtod_l+0x1a2>
 800cc7e:	f04f 0c01 	mov.w	ip, #1
 800cc82:	e7f6      	b.n	800cc72 <_strtod_l+0x28a>
 800cc84:	08010edc 	.word	0x08010edc
 800cc88:	08010d70 	.word	0x08010d70
 800cc8c:	7ff00000 	.word	0x7ff00000
 800cc90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc92:	1c51      	adds	r1, r2, #1
 800cc94:	9117      	str	r1, [sp, #92]	; 0x5c
 800cc96:	7852      	ldrb	r2, [r2, #1]
 800cc98:	2a30      	cmp	r2, #48	; 0x30
 800cc9a:	d0f9      	beq.n	800cc90 <_strtod_l+0x2a8>
 800cc9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cca0:	2908      	cmp	r1, #8
 800cca2:	f63f af79 	bhi.w	800cb98 <_strtod_l+0x1b0>
 800cca6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ccaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccac:	9206      	str	r2, [sp, #24]
 800ccae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccb0:	1c51      	adds	r1, r2, #1
 800ccb2:	9117      	str	r1, [sp, #92]	; 0x5c
 800ccb4:	7852      	ldrb	r2, [r2, #1]
 800ccb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ccba:	2e09      	cmp	r6, #9
 800ccbc:	d937      	bls.n	800cd2e <_strtod_l+0x346>
 800ccbe:	9e06      	ldr	r6, [sp, #24]
 800ccc0:	1b89      	subs	r1, r1, r6
 800ccc2:	2908      	cmp	r1, #8
 800ccc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ccc8:	dc02      	bgt.n	800ccd0 <_strtod_l+0x2e8>
 800ccca:	4576      	cmp	r6, lr
 800cccc:	bfa8      	it	ge
 800ccce:	4676      	movge	r6, lr
 800ccd0:	f1bc 0f00 	cmp.w	ip, #0
 800ccd4:	d000      	beq.n	800ccd8 <_strtod_l+0x2f0>
 800ccd6:	4276      	negs	r6, r6
 800ccd8:	2d00      	cmp	r5, #0
 800ccda:	d14d      	bne.n	800cd78 <_strtod_l+0x390>
 800ccdc:	9904      	ldr	r1, [sp, #16]
 800ccde:	4301      	orrs	r1, r0
 800cce0:	f47f aec6 	bne.w	800ca70 <_strtod_l+0x88>
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f47f aee1 	bne.w	800caac <_strtod_l+0xc4>
 800ccea:	2a69      	cmp	r2, #105	; 0x69
 800ccec:	d027      	beq.n	800cd3e <_strtod_l+0x356>
 800ccee:	dc24      	bgt.n	800cd3a <_strtod_l+0x352>
 800ccf0:	2a49      	cmp	r2, #73	; 0x49
 800ccf2:	d024      	beq.n	800cd3e <_strtod_l+0x356>
 800ccf4:	2a4e      	cmp	r2, #78	; 0x4e
 800ccf6:	f47f aed9 	bne.w	800caac <_strtod_l+0xc4>
 800ccfa:	499f      	ldr	r1, [pc, #636]	; (800cf78 <_strtod_l+0x590>)
 800ccfc:	a817      	add	r0, sp, #92	; 0x5c
 800ccfe:	f001 fed3 	bl	800eaa8 <__match>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	f43f aed2 	beq.w	800caac <_strtod_l+0xc4>
 800cd08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b28      	cmp	r3, #40	; 0x28
 800cd0e:	d12d      	bne.n	800cd6c <_strtod_l+0x384>
 800cd10:	499a      	ldr	r1, [pc, #616]	; (800cf7c <_strtod_l+0x594>)
 800cd12:	aa1a      	add	r2, sp, #104	; 0x68
 800cd14:	a817      	add	r0, sp, #92	; 0x5c
 800cd16:	f001 fedb 	bl	800ead0 <__hexnan>
 800cd1a:	2805      	cmp	r0, #5
 800cd1c:	d126      	bne.n	800cd6c <_strtod_l+0x384>
 800cd1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cd24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cd28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cd2c:	e6a0      	b.n	800ca70 <_strtod_l+0x88>
 800cd2e:	210a      	movs	r1, #10
 800cd30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cd34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cd38:	e7b9      	b.n	800ccae <_strtod_l+0x2c6>
 800cd3a:	2a6e      	cmp	r2, #110	; 0x6e
 800cd3c:	e7db      	b.n	800ccf6 <_strtod_l+0x30e>
 800cd3e:	4990      	ldr	r1, [pc, #576]	; (800cf80 <_strtod_l+0x598>)
 800cd40:	a817      	add	r0, sp, #92	; 0x5c
 800cd42:	f001 feb1 	bl	800eaa8 <__match>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f43f aeb0 	beq.w	800caac <_strtod_l+0xc4>
 800cd4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd4e:	498d      	ldr	r1, [pc, #564]	; (800cf84 <_strtod_l+0x59c>)
 800cd50:	3b01      	subs	r3, #1
 800cd52:	a817      	add	r0, sp, #92	; 0x5c
 800cd54:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd56:	f001 fea7 	bl	800eaa8 <__match>
 800cd5a:	b910      	cbnz	r0, 800cd62 <_strtod_l+0x37a>
 800cd5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd5e:	3301      	adds	r3, #1
 800cd60:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd62:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cf94 <_strtod_l+0x5ac>
 800cd66:	f04f 0a00 	mov.w	sl, #0
 800cd6a:	e681      	b.n	800ca70 <_strtod_l+0x88>
 800cd6c:	4886      	ldr	r0, [pc, #536]	; (800cf88 <_strtod_l+0x5a0>)
 800cd6e:	f002 ffb3 	bl	800fcd8 <nan>
 800cd72:	ec5b ab10 	vmov	sl, fp, d0
 800cd76:	e67b      	b.n	800ca70 <_strtod_l+0x88>
 800cd78:	9b05      	ldr	r3, [sp, #20]
 800cd7a:	9807      	ldr	r0, [sp, #28]
 800cd7c:	1af3      	subs	r3, r6, r3
 800cd7e:	2f00      	cmp	r7, #0
 800cd80:	bf08      	it	eq
 800cd82:	462f      	moveq	r7, r5
 800cd84:	2d10      	cmp	r5, #16
 800cd86:	9306      	str	r3, [sp, #24]
 800cd88:	46a8      	mov	r8, r5
 800cd8a:	bfa8      	it	ge
 800cd8c:	f04f 0810 	movge.w	r8, #16
 800cd90:	f7f3 fbd0 	bl	8000534 <__aeabi_ui2d>
 800cd94:	2d09      	cmp	r5, #9
 800cd96:	4682      	mov	sl, r0
 800cd98:	468b      	mov	fp, r1
 800cd9a:	dd13      	ble.n	800cdc4 <_strtod_l+0x3dc>
 800cd9c:	4b7b      	ldr	r3, [pc, #492]	; (800cf8c <_strtod_l+0x5a4>)
 800cd9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cda2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cda6:	f7f3 fc3f 	bl	8000628 <__aeabi_dmul>
 800cdaa:	4682      	mov	sl, r0
 800cdac:	4648      	mov	r0, r9
 800cdae:	468b      	mov	fp, r1
 800cdb0:	f7f3 fbc0 	bl	8000534 <__aeabi_ui2d>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4650      	mov	r0, sl
 800cdba:	4659      	mov	r1, fp
 800cdbc:	f7f3 fa7e 	bl	80002bc <__adddf3>
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	468b      	mov	fp, r1
 800cdc4:	2d0f      	cmp	r5, #15
 800cdc6:	dc38      	bgt.n	800ce3a <_strtod_l+0x452>
 800cdc8:	9b06      	ldr	r3, [sp, #24]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f43f ae50 	beq.w	800ca70 <_strtod_l+0x88>
 800cdd0:	dd24      	ble.n	800ce1c <_strtod_l+0x434>
 800cdd2:	2b16      	cmp	r3, #22
 800cdd4:	dc0b      	bgt.n	800cdee <_strtod_l+0x406>
 800cdd6:	496d      	ldr	r1, [pc, #436]	; (800cf8c <_strtod_l+0x5a4>)
 800cdd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde0:	4652      	mov	r2, sl
 800cde2:	465b      	mov	r3, fp
 800cde4:	f7f3 fc20 	bl	8000628 <__aeabi_dmul>
 800cde8:	4682      	mov	sl, r0
 800cdea:	468b      	mov	fp, r1
 800cdec:	e640      	b.n	800ca70 <_strtod_l+0x88>
 800cdee:	9a06      	ldr	r2, [sp, #24]
 800cdf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	db20      	blt.n	800ce3a <_strtod_l+0x452>
 800cdf8:	4c64      	ldr	r4, [pc, #400]	; (800cf8c <_strtod_l+0x5a4>)
 800cdfa:	f1c5 050f 	rsb	r5, r5, #15
 800cdfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce02:	4652      	mov	r2, sl
 800ce04:	465b      	mov	r3, fp
 800ce06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0a:	f7f3 fc0d 	bl	8000628 <__aeabi_dmul>
 800ce0e:	9b06      	ldr	r3, [sp, #24]
 800ce10:	1b5d      	subs	r5, r3, r5
 800ce12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce1a:	e7e3      	b.n	800cde4 <_strtod_l+0x3fc>
 800ce1c:	9b06      	ldr	r3, [sp, #24]
 800ce1e:	3316      	adds	r3, #22
 800ce20:	db0b      	blt.n	800ce3a <_strtod_l+0x452>
 800ce22:	9b05      	ldr	r3, [sp, #20]
 800ce24:	1b9e      	subs	r6, r3, r6
 800ce26:	4b59      	ldr	r3, [pc, #356]	; (800cf8c <_strtod_l+0x5a4>)
 800ce28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ce2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	f7f3 fd22 	bl	800087c <__aeabi_ddiv>
 800ce38:	e7d6      	b.n	800cde8 <_strtod_l+0x400>
 800ce3a:	9b06      	ldr	r3, [sp, #24]
 800ce3c:	eba5 0808 	sub.w	r8, r5, r8
 800ce40:	4498      	add	r8, r3
 800ce42:	f1b8 0f00 	cmp.w	r8, #0
 800ce46:	dd74      	ble.n	800cf32 <_strtod_l+0x54a>
 800ce48:	f018 030f 	ands.w	r3, r8, #15
 800ce4c:	d00a      	beq.n	800ce64 <_strtod_l+0x47c>
 800ce4e:	494f      	ldr	r1, [pc, #316]	; (800cf8c <_strtod_l+0x5a4>)
 800ce50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce54:	4652      	mov	r2, sl
 800ce56:	465b      	mov	r3, fp
 800ce58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce5c:	f7f3 fbe4 	bl	8000628 <__aeabi_dmul>
 800ce60:	4682      	mov	sl, r0
 800ce62:	468b      	mov	fp, r1
 800ce64:	f038 080f 	bics.w	r8, r8, #15
 800ce68:	d04f      	beq.n	800cf0a <_strtod_l+0x522>
 800ce6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ce6e:	dd22      	ble.n	800ceb6 <_strtod_l+0x4ce>
 800ce70:	2500      	movs	r5, #0
 800ce72:	462e      	mov	r6, r5
 800ce74:	9507      	str	r5, [sp, #28]
 800ce76:	9505      	str	r5, [sp, #20]
 800ce78:	2322      	movs	r3, #34	; 0x22
 800ce7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cf94 <_strtod_l+0x5ac>
 800ce7e:	6023      	str	r3, [r4, #0]
 800ce80:	f04f 0a00 	mov.w	sl, #0
 800ce84:	9b07      	ldr	r3, [sp, #28]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f43f adf2 	beq.w	800ca70 <_strtod_l+0x88>
 800ce8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f001 ff94 	bl	800edbc <_Bfree>
 800ce94:	9905      	ldr	r1, [sp, #20]
 800ce96:	4620      	mov	r0, r4
 800ce98:	f001 ff90 	bl	800edbc <_Bfree>
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f001 ff8c 	bl	800edbc <_Bfree>
 800cea4:	9907      	ldr	r1, [sp, #28]
 800cea6:	4620      	mov	r0, r4
 800cea8:	f001 ff88 	bl	800edbc <_Bfree>
 800ceac:	4629      	mov	r1, r5
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f001 ff84 	bl	800edbc <_Bfree>
 800ceb4:	e5dc      	b.n	800ca70 <_strtod_l+0x88>
 800ceb6:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <_strtod_l+0x5a8>)
 800ceb8:	9304      	str	r3, [sp, #16]
 800ceba:	2300      	movs	r3, #0
 800cebc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cec0:	4650      	mov	r0, sl
 800cec2:	4659      	mov	r1, fp
 800cec4:	4699      	mov	r9, r3
 800cec6:	f1b8 0f01 	cmp.w	r8, #1
 800ceca:	dc21      	bgt.n	800cf10 <_strtod_l+0x528>
 800cecc:	b10b      	cbz	r3, 800ced2 <_strtod_l+0x4ea>
 800cece:	4682      	mov	sl, r0
 800ced0:	468b      	mov	fp, r1
 800ced2:	4b2f      	ldr	r3, [pc, #188]	; (800cf90 <_strtod_l+0x5a8>)
 800ced4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ced8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cedc:	4652      	mov	r2, sl
 800cede:	465b      	mov	r3, fp
 800cee0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cee4:	f7f3 fba0 	bl	8000628 <__aeabi_dmul>
 800cee8:	4b2a      	ldr	r3, [pc, #168]	; (800cf94 <_strtod_l+0x5ac>)
 800ceea:	460a      	mov	r2, r1
 800ceec:	400b      	ands	r3, r1
 800ceee:	492a      	ldr	r1, [pc, #168]	; (800cf98 <_strtod_l+0x5b0>)
 800cef0:	428b      	cmp	r3, r1
 800cef2:	4682      	mov	sl, r0
 800cef4:	d8bc      	bhi.n	800ce70 <_strtod_l+0x488>
 800cef6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cefa:	428b      	cmp	r3, r1
 800cefc:	bf86      	itte	hi
 800cefe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cf9c <_strtod_l+0x5b4>
 800cf02:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	e084      	b.n	800d01a <_strtod_l+0x632>
 800cf10:	f018 0f01 	tst.w	r8, #1
 800cf14:	d005      	beq.n	800cf22 <_strtod_l+0x53a>
 800cf16:	9b04      	ldr	r3, [sp, #16]
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	f7f3 fb84 	bl	8000628 <__aeabi_dmul>
 800cf20:	2301      	movs	r3, #1
 800cf22:	9a04      	ldr	r2, [sp, #16]
 800cf24:	3208      	adds	r2, #8
 800cf26:	f109 0901 	add.w	r9, r9, #1
 800cf2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf2e:	9204      	str	r2, [sp, #16]
 800cf30:	e7c9      	b.n	800cec6 <_strtod_l+0x4de>
 800cf32:	d0ea      	beq.n	800cf0a <_strtod_l+0x522>
 800cf34:	f1c8 0800 	rsb	r8, r8, #0
 800cf38:	f018 020f 	ands.w	r2, r8, #15
 800cf3c:	d00a      	beq.n	800cf54 <_strtod_l+0x56c>
 800cf3e:	4b13      	ldr	r3, [pc, #76]	; (800cf8c <_strtod_l+0x5a4>)
 800cf40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf44:	4650      	mov	r0, sl
 800cf46:	4659      	mov	r1, fp
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7f3 fc96 	bl	800087c <__aeabi_ddiv>
 800cf50:	4682      	mov	sl, r0
 800cf52:	468b      	mov	fp, r1
 800cf54:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cf58:	d0d7      	beq.n	800cf0a <_strtod_l+0x522>
 800cf5a:	f1b8 0f1f 	cmp.w	r8, #31
 800cf5e:	dd1f      	ble.n	800cfa0 <_strtod_l+0x5b8>
 800cf60:	2500      	movs	r5, #0
 800cf62:	462e      	mov	r6, r5
 800cf64:	9507      	str	r5, [sp, #28]
 800cf66:	9505      	str	r5, [sp, #20]
 800cf68:	2322      	movs	r3, #34	; 0x22
 800cf6a:	f04f 0a00 	mov.w	sl, #0
 800cf6e:	f04f 0b00 	mov.w	fp, #0
 800cf72:	6023      	str	r3, [r4, #0]
 800cf74:	e786      	b.n	800ce84 <_strtod_l+0x49c>
 800cf76:	bf00      	nop
 800cf78:	08010cd5 	.word	0x08010cd5
 800cf7c:	08010d84 	.word	0x08010d84
 800cf80:	08010ccd 	.word	0x08010ccd
 800cf84:	08010dff 	.word	0x08010dff
 800cf88:	08010dfb 	.word	0x08010dfb
 800cf8c:	08010f78 	.word	0x08010f78
 800cf90:	08010f50 	.word	0x08010f50
 800cf94:	7ff00000 	.word	0x7ff00000
 800cf98:	7ca00000 	.word	0x7ca00000
 800cf9c:	7fefffff 	.word	0x7fefffff
 800cfa0:	f018 0310 	ands.w	r3, r8, #16
 800cfa4:	bf18      	it	ne
 800cfa6:	236a      	movne	r3, #106	; 0x6a
 800cfa8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d358 <_strtod_l+0x970>
 800cfac:	9304      	str	r3, [sp, #16]
 800cfae:	4650      	mov	r0, sl
 800cfb0:	4659      	mov	r1, fp
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f018 0f01 	tst.w	r8, #1
 800cfb8:	d004      	beq.n	800cfc4 <_strtod_l+0x5dc>
 800cfba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cfbe:	f7f3 fb33 	bl	8000628 <__aeabi_dmul>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cfc8:	f109 0908 	add.w	r9, r9, #8
 800cfcc:	d1f2      	bne.n	800cfb4 <_strtod_l+0x5cc>
 800cfce:	b10b      	cbz	r3, 800cfd4 <_strtod_l+0x5ec>
 800cfd0:	4682      	mov	sl, r0
 800cfd2:	468b      	mov	fp, r1
 800cfd4:	9b04      	ldr	r3, [sp, #16]
 800cfd6:	b1c3      	cbz	r3, 800d00a <_strtod_l+0x622>
 800cfd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cfdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	4659      	mov	r1, fp
 800cfe4:	dd11      	ble.n	800d00a <_strtod_l+0x622>
 800cfe6:	2b1f      	cmp	r3, #31
 800cfe8:	f340 8124 	ble.w	800d234 <_strtod_l+0x84c>
 800cfec:	2b34      	cmp	r3, #52	; 0x34
 800cfee:	bfde      	ittt	le
 800cff0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cff4:	f04f 33ff 	movle.w	r3, #4294967295
 800cff8:	fa03 f202 	lslle.w	r2, r3, r2
 800cffc:	f04f 0a00 	mov.w	sl, #0
 800d000:	bfcc      	ite	gt
 800d002:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d006:	ea02 0b01 	andle.w	fp, r2, r1
 800d00a:	2200      	movs	r2, #0
 800d00c:	2300      	movs	r3, #0
 800d00e:	4650      	mov	r0, sl
 800d010:	4659      	mov	r1, fp
 800d012:	f7f3 fd71 	bl	8000af8 <__aeabi_dcmpeq>
 800d016:	2800      	cmp	r0, #0
 800d018:	d1a2      	bne.n	800cf60 <_strtod_l+0x578>
 800d01a:	9b07      	ldr	r3, [sp, #28]
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	9908      	ldr	r1, [sp, #32]
 800d020:	462b      	mov	r3, r5
 800d022:	463a      	mov	r2, r7
 800d024:	4620      	mov	r0, r4
 800d026:	f001 ff31 	bl	800ee8c <__s2b>
 800d02a:	9007      	str	r0, [sp, #28]
 800d02c:	2800      	cmp	r0, #0
 800d02e:	f43f af1f 	beq.w	800ce70 <_strtod_l+0x488>
 800d032:	9b05      	ldr	r3, [sp, #20]
 800d034:	1b9e      	subs	r6, r3, r6
 800d036:	9b06      	ldr	r3, [sp, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bfb4      	ite	lt
 800d03c:	4633      	movlt	r3, r6
 800d03e:	2300      	movge	r3, #0
 800d040:	930c      	str	r3, [sp, #48]	; 0x30
 800d042:	9b06      	ldr	r3, [sp, #24]
 800d044:	2500      	movs	r5, #0
 800d046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d04a:	9312      	str	r3, [sp, #72]	; 0x48
 800d04c:	462e      	mov	r6, r5
 800d04e:	9b07      	ldr	r3, [sp, #28]
 800d050:	4620      	mov	r0, r4
 800d052:	6859      	ldr	r1, [r3, #4]
 800d054:	f001 fe72 	bl	800ed3c <_Balloc>
 800d058:	9005      	str	r0, [sp, #20]
 800d05a:	2800      	cmp	r0, #0
 800d05c:	f43f af0c 	beq.w	800ce78 <_strtod_l+0x490>
 800d060:	9b07      	ldr	r3, [sp, #28]
 800d062:	691a      	ldr	r2, [r3, #16]
 800d064:	3202      	adds	r2, #2
 800d066:	f103 010c 	add.w	r1, r3, #12
 800d06a:	0092      	lsls	r2, r2, #2
 800d06c:	300c      	adds	r0, #12
 800d06e:	f7fe fd53 	bl	800bb18 <memcpy>
 800d072:	ec4b ab10 	vmov	d0, sl, fp
 800d076:	aa1a      	add	r2, sp, #104	; 0x68
 800d078:	a919      	add	r1, sp, #100	; 0x64
 800d07a:	4620      	mov	r0, r4
 800d07c:	f002 fa4c 	bl	800f518 <__d2b>
 800d080:	ec4b ab18 	vmov	d8, sl, fp
 800d084:	9018      	str	r0, [sp, #96]	; 0x60
 800d086:	2800      	cmp	r0, #0
 800d088:	f43f aef6 	beq.w	800ce78 <_strtod_l+0x490>
 800d08c:	2101      	movs	r1, #1
 800d08e:	4620      	mov	r0, r4
 800d090:	f001 ff96 	bl	800efc0 <__i2b>
 800d094:	4606      	mov	r6, r0
 800d096:	2800      	cmp	r0, #0
 800d098:	f43f aeee 	beq.w	800ce78 <_strtod_l+0x490>
 800d09c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d09e:	9904      	ldr	r1, [sp, #16]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	bfab      	itete	ge
 800d0a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d0a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d0a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d0aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d0ae:	bfac      	ite	ge
 800d0b0:	eb03 0902 	addge.w	r9, r3, r2
 800d0b4:	1ad7      	sublt	r7, r2, r3
 800d0b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d0b8:	eba3 0801 	sub.w	r8, r3, r1
 800d0bc:	4490      	add	r8, r2
 800d0be:	4ba1      	ldr	r3, [pc, #644]	; (800d344 <_strtod_l+0x95c>)
 800d0c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0c4:	4598      	cmp	r8, r3
 800d0c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0ca:	f280 80c7 	bge.w	800d25c <_strtod_l+0x874>
 800d0ce:	eba3 0308 	sub.w	r3, r3, r8
 800d0d2:	2b1f      	cmp	r3, #31
 800d0d4:	eba2 0203 	sub.w	r2, r2, r3
 800d0d8:	f04f 0101 	mov.w	r1, #1
 800d0dc:	f300 80b1 	bgt.w	800d242 <_strtod_l+0x85a>
 800d0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0e4:	930d      	str	r3, [sp, #52]	; 0x34
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9308      	str	r3, [sp, #32]
 800d0ea:	eb09 0802 	add.w	r8, r9, r2
 800d0ee:	9b04      	ldr	r3, [sp, #16]
 800d0f0:	45c1      	cmp	r9, r8
 800d0f2:	4417      	add	r7, r2
 800d0f4:	441f      	add	r7, r3
 800d0f6:	464b      	mov	r3, r9
 800d0f8:	bfa8      	it	ge
 800d0fa:	4643      	movge	r3, r8
 800d0fc:	42bb      	cmp	r3, r7
 800d0fe:	bfa8      	it	ge
 800d100:	463b      	movge	r3, r7
 800d102:	2b00      	cmp	r3, #0
 800d104:	bfc2      	ittt	gt
 800d106:	eba8 0803 	subgt.w	r8, r8, r3
 800d10a:	1aff      	subgt	r7, r7, r3
 800d10c:	eba9 0903 	subgt.w	r9, r9, r3
 800d110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d112:	2b00      	cmp	r3, #0
 800d114:	dd17      	ble.n	800d146 <_strtod_l+0x75e>
 800d116:	4631      	mov	r1, r6
 800d118:	461a      	mov	r2, r3
 800d11a:	4620      	mov	r0, r4
 800d11c:	f002 f810 	bl	800f140 <__pow5mult>
 800d120:	4606      	mov	r6, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	f43f aea8 	beq.w	800ce78 <_strtod_l+0x490>
 800d128:	4601      	mov	r1, r0
 800d12a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d12c:	4620      	mov	r0, r4
 800d12e:	f001 ff5d 	bl	800efec <__multiply>
 800d132:	900b      	str	r0, [sp, #44]	; 0x2c
 800d134:	2800      	cmp	r0, #0
 800d136:	f43f ae9f 	beq.w	800ce78 <_strtod_l+0x490>
 800d13a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d13c:	4620      	mov	r0, r4
 800d13e:	f001 fe3d 	bl	800edbc <_Bfree>
 800d142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d144:	9318      	str	r3, [sp, #96]	; 0x60
 800d146:	f1b8 0f00 	cmp.w	r8, #0
 800d14a:	f300 808c 	bgt.w	800d266 <_strtod_l+0x87e>
 800d14e:	9b06      	ldr	r3, [sp, #24]
 800d150:	2b00      	cmp	r3, #0
 800d152:	dd08      	ble.n	800d166 <_strtod_l+0x77e>
 800d154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d156:	9905      	ldr	r1, [sp, #20]
 800d158:	4620      	mov	r0, r4
 800d15a:	f001 fff1 	bl	800f140 <__pow5mult>
 800d15e:	9005      	str	r0, [sp, #20]
 800d160:	2800      	cmp	r0, #0
 800d162:	f43f ae89 	beq.w	800ce78 <_strtod_l+0x490>
 800d166:	2f00      	cmp	r7, #0
 800d168:	dd08      	ble.n	800d17c <_strtod_l+0x794>
 800d16a:	9905      	ldr	r1, [sp, #20]
 800d16c:	463a      	mov	r2, r7
 800d16e:	4620      	mov	r0, r4
 800d170:	f002 f840 	bl	800f1f4 <__lshift>
 800d174:	9005      	str	r0, [sp, #20]
 800d176:	2800      	cmp	r0, #0
 800d178:	f43f ae7e 	beq.w	800ce78 <_strtod_l+0x490>
 800d17c:	f1b9 0f00 	cmp.w	r9, #0
 800d180:	dd08      	ble.n	800d194 <_strtod_l+0x7ac>
 800d182:	4631      	mov	r1, r6
 800d184:	464a      	mov	r2, r9
 800d186:	4620      	mov	r0, r4
 800d188:	f002 f834 	bl	800f1f4 <__lshift>
 800d18c:	4606      	mov	r6, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	f43f ae72 	beq.w	800ce78 <_strtod_l+0x490>
 800d194:	9a05      	ldr	r2, [sp, #20]
 800d196:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d198:	4620      	mov	r0, r4
 800d19a:	f002 f8b7 	bl	800f30c <__mdiff>
 800d19e:	4605      	mov	r5, r0
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	f43f ae69 	beq.w	800ce78 <_strtod_l+0x490>
 800d1a6:	68c3      	ldr	r3, [r0, #12]
 800d1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	60c3      	str	r3, [r0, #12]
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	f002 f890 	bl	800f2d4 <__mcmp>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	da60      	bge.n	800d27a <_strtod_l+0x892>
 800d1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ba:	ea53 030a 	orrs.w	r3, r3, sl
 800d1be:	f040 8082 	bne.w	800d2c6 <_strtod_l+0x8de>
 800d1c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d17d      	bne.n	800d2c6 <_strtod_l+0x8de>
 800d1ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1ce:	0d1b      	lsrs	r3, r3, #20
 800d1d0:	051b      	lsls	r3, r3, #20
 800d1d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d1d6:	d976      	bls.n	800d2c6 <_strtod_l+0x8de>
 800d1d8:	696b      	ldr	r3, [r5, #20]
 800d1da:	b913      	cbnz	r3, 800d1e2 <_strtod_l+0x7fa>
 800d1dc:	692b      	ldr	r3, [r5, #16]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	dd71      	ble.n	800d2c6 <_strtod_l+0x8de>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f002 f804 	bl	800f1f4 <__lshift>
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	f002 f870 	bl	800f2d4 <__mcmp>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	dd66      	ble.n	800d2c6 <_strtod_l+0x8de>
 800d1f8:	9904      	ldr	r1, [sp, #16]
 800d1fa:	4a53      	ldr	r2, [pc, #332]	; (800d348 <_strtod_l+0x960>)
 800d1fc:	465b      	mov	r3, fp
 800d1fe:	2900      	cmp	r1, #0
 800d200:	f000 8081 	beq.w	800d306 <_strtod_l+0x91e>
 800d204:	ea02 010b 	and.w	r1, r2, fp
 800d208:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d20c:	dc7b      	bgt.n	800d306 <_strtod_l+0x91e>
 800d20e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d212:	f77f aea9 	ble.w	800cf68 <_strtod_l+0x580>
 800d216:	4b4d      	ldr	r3, [pc, #308]	; (800d34c <_strtod_l+0x964>)
 800d218:	4650      	mov	r0, sl
 800d21a:	4659      	mov	r1, fp
 800d21c:	2200      	movs	r2, #0
 800d21e:	f7f3 fa03 	bl	8000628 <__aeabi_dmul>
 800d222:	460b      	mov	r3, r1
 800d224:	4303      	orrs	r3, r0
 800d226:	bf08      	it	eq
 800d228:	2322      	moveq	r3, #34	; 0x22
 800d22a:	4682      	mov	sl, r0
 800d22c:	468b      	mov	fp, r1
 800d22e:	bf08      	it	eq
 800d230:	6023      	streq	r3, [r4, #0]
 800d232:	e62b      	b.n	800ce8c <_strtod_l+0x4a4>
 800d234:	f04f 32ff 	mov.w	r2, #4294967295
 800d238:	fa02 f303 	lsl.w	r3, r2, r3
 800d23c:	ea03 0a0a 	and.w	sl, r3, sl
 800d240:	e6e3      	b.n	800d00a <_strtod_l+0x622>
 800d242:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d246:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d24a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d24e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d252:	fa01 f308 	lsl.w	r3, r1, r8
 800d256:	9308      	str	r3, [sp, #32]
 800d258:	910d      	str	r1, [sp, #52]	; 0x34
 800d25a:	e746      	b.n	800d0ea <_strtod_l+0x702>
 800d25c:	2300      	movs	r3, #0
 800d25e:	9308      	str	r3, [sp, #32]
 800d260:	2301      	movs	r3, #1
 800d262:	930d      	str	r3, [sp, #52]	; 0x34
 800d264:	e741      	b.n	800d0ea <_strtod_l+0x702>
 800d266:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d268:	4642      	mov	r2, r8
 800d26a:	4620      	mov	r0, r4
 800d26c:	f001 ffc2 	bl	800f1f4 <__lshift>
 800d270:	9018      	str	r0, [sp, #96]	; 0x60
 800d272:	2800      	cmp	r0, #0
 800d274:	f47f af6b 	bne.w	800d14e <_strtod_l+0x766>
 800d278:	e5fe      	b.n	800ce78 <_strtod_l+0x490>
 800d27a:	465f      	mov	r7, fp
 800d27c:	d16e      	bne.n	800d35c <_strtod_l+0x974>
 800d27e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d284:	b342      	cbz	r2, 800d2d8 <_strtod_l+0x8f0>
 800d286:	4a32      	ldr	r2, [pc, #200]	; (800d350 <_strtod_l+0x968>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d128      	bne.n	800d2de <_strtod_l+0x8f6>
 800d28c:	9b04      	ldr	r3, [sp, #16]
 800d28e:	4651      	mov	r1, sl
 800d290:	b1eb      	cbz	r3, 800d2ce <_strtod_l+0x8e6>
 800d292:	4b2d      	ldr	r3, [pc, #180]	; (800d348 <_strtod_l+0x960>)
 800d294:	403b      	ands	r3, r7
 800d296:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	d819      	bhi.n	800d2d4 <_strtod_l+0x8ec>
 800d2a0:	0d1b      	lsrs	r3, r3, #20
 800d2a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	d117      	bne.n	800d2de <_strtod_l+0x8f6>
 800d2ae:	4b29      	ldr	r3, [pc, #164]	; (800d354 <_strtod_l+0x96c>)
 800d2b0:	429f      	cmp	r7, r3
 800d2b2:	d102      	bne.n	800d2ba <_strtod_l+0x8d2>
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	f43f addf 	beq.w	800ce78 <_strtod_l+0x490>
 800d2ba:	4b23      	ldr	r3, [pc, #140]	; (800d348 <_strtod_l+0x960>)
 800d2bc:	403b      	ands	r3, r7
 800d2be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d2c2:	f04f 0a00 	mov.w	sl, #0
 800d2c6:	9b04      	ldr	r3, [sp, #16]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1a4      	bne.n	800d216 <_strtod_l+0x82e>
 800d2cc:	e5de      	b.n	800ce8c <_strtod_l+0x4a4>
 800d2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d2:	e7ea      	b.n	800d2aa <_strtod_l+0x8c2>
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	e7e8      	b.n	800d2aa <_strtod_l+0x8c2>
 800d2d8:	ea53 030a 	orrs.w	r3, r3, sl
 800d2dc:	d08c      	beq.n	800d1f8 <_strtod_l+0x810>
 800d2de:	9b08      	ldr	r3, [sp, #32]
 800d2e0:	b1db      	cbz	r3, 800d31a <_strtod_l+0x932>
 800d2e2:	423b      	tst	r3, r7
 800d2e4:	d0ef      	beq.n	800d2c6 <_strtod_l+0x8de>
 800d2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2e8:	9a04      	ldr	r2, [sp, #16]
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	4659      	mov	r1, fp
 800d2ee:	b1c3      	cbz	r3, 800d322 <_strtod_l+0x93a>
 800d2f0:	f7ff fb5d 	bl	800c9ae <sulp>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	ec51 0b18 	vmov	r0, r1, d8
 800d2fc:	f7f2 ffde 	bl	80002bc <__adddf3>
 800d300:	4682      	mov	sl, r0
 800d302:	468b      	mov	fp, r1
 800d304:	e7df      	b.n	800d2c6 <_strtod_l+0x8de>
 800d306:	4013      	ands	r3, r2
 800d308:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d30c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d310:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d314:	f04f 3aff 	mov.w	sl, #4294967295
 800d318:	e7d5      	b.n	800d2c6 <_strtod_l+0x8de>
 800d31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d31c:	ea13 0f0a 	tst.w	r3, sl
 800d320:	e7e0      	b.n	800d2e4 <_strtod_l+0x8fc>
 800d322:	f7ff fb44 	bl	800c9ae <sulp>
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	ec51 0b18 	vmov	r0, r1, d8
 800d32e:	f7f2 ffc3 	bl	80002b8 <__aeabi_dsub>
 800d332:	2200      	movs	r2, #0
 800d334:	2300      	movs	r3, #0
 800d336:	4682      	mov	sl, r0
 800d338:	468b      	mov	fp, r1
 800d33a:	f7f3 fbdd 	bl	8000af8 <__aeabi_dcmpeq>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d0c1      	beq.n	800d2c6 <_strtod_l+0x8de>
 800d342:	e611      	b.n	800cf68 <_strtod_l+0x580>
 800d344:	fffffc02 	.word	0xfffffc02
 800d348:	7ff00000 	.word	0x7ff00000
 800d34c:	39500000 	.word	0x39500000
 800d350:	000fffff 	.word	0x000fffff
 800d354:	7fefffff 	.word	0x7fefffff
 800d358:	08010d98 	.word	0x08010d98
 800d35c:	4631      	mov	r1, r6
 800d35e:	4628      	mov	r0, r5
 800d360:	f002 f936 	bl	800f5d0 <__ratio>
 800d364:	ec59 8b10 	vmov	r8, r9, d0
 800d368:	ee10 0a10 	vmov	r0, s0
 800d36c:	2200      	movs	r2, #0
 800d36e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d372:	4649      	mov	r1, r9
 800d374:	f7f3 fbd4 	bl	8000b20 <__aeabi_dcmple>
 800d378:	2800      	cmp	r0, #0
 800d37a:	d07a      	beq.n	800d472 <_strtod_l+0xa8a>
 800d37c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d04a      	beq.n	800d418 <_strtod_l+0xa30>
 800d382:	4b95      	ldr	r3, [pc, #596]	; (800d5d8 <_strtod_l+0xbf0>)
 800d384:	2200      	movs	r2, #0
 800d386:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d38a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d5d8 <_strtod_l+0xbf0>
 800d38e:	f04f 0800 	mov.w	r8, #0
 800d392:	4b92      	ldr	r3, [pc, #584]	; (800d5dc <_strtod_l+0xbf4>)
 800d394:	403b      	ands	r3, r7
 800d396:	930d      	str	r3, [sp, #52]	; 0x34
 800d398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d39a:	4b91      	ldr	r3, [pc, #580]	; (800d5e0 <_strtod_l+0xbf8>)
 800d39c:	429a      	cmp	r2, r3
 800d39e:	f040 80b0 	bne.w	800d502 <_strtod_l+0xb1a>
 800d3a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d3aa:	ec4b ab10 	vmov	d0, sl, fp
 800d3ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d3b2:	f002 f835 	bl	800f420 <__ulp>
 800d3b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3ba:	ec53 2b10 	vmov	r2, r3, d0
 800d3be:	f7f3 f933 	bl	8000628 <__aeabi_dmul>
 800d3c2:	4652      	mov	r2, sl
 800d3c4:	465b      	mov	r3, fp
 800d3c6:	f7f2 ff79 	bl	80002bc <__adddf3>
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4983      	ldr	r1, [pc, #524]	; (800d5dc <_strtod_l+0xbf4>)
 800d3ce:	4a85      	ldr	r2, [pc, #532]	; (800d5e4 <_strtod_l+0xbfc>)
 800d3d0:	4019      	ands	r1, r3
 800d3d2:	4291      	cmp	r1, r2
 800d3d4:	4682      	mov	sl, r0
 800d3d6:	d960      	bls.n	800d49a <_strtod_l+0xab2>
 800d3d8:	ee18 3a90 	vmov	r3, s17
 800d3dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d104      	bne.n	800d3ee <_strtod_l+0xa06>
 800d3e4:	ee18 3a10 	vmov	r3, s16
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	f43f ad45 	beq.w	800ce78 <_strtod_l+0x490>
 800d3ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d5f0 <_strtod_l+0xc08>
 800d3f2:	f04f 3aff 	mov.w	sl, #4294967295
 800d3f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f001 fcdf 	bl	800edbc <_Bfree>
 800d3fe:	9905      	ldr	r1, [sp, #20]
 800d400:	4620      	mov	r0, r4
 800d402:	f001 fcdb 	bl	800edbc <_Bfree>
 800d406:	4631      	mov	r1, r6
 800d408:	4620      	mov	r0, r4
 800d40a:	f001 fcd7 	bl	800edbc <_Bfree>
 800d40e:	4629      	mov	r1, r5
 800d410:	4620      	mov	r0, r4
 800d412:	f001 fcd3 	bl	800edbc <_Bfree>
 800d416:	e61a      	b.n	800d04e <_strtod_l+0x666>
 800d418:	f1ba 0f00 	cmp.w	sl, #0
 800d41c:	d11b      	bne.n	800d456 <_strtod_l+0xa6e>
 800d41e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d422:	b9f3      	cbnz	r3, 800d462 <_strtod_l+0xa7a>
 800d424:	4b6c      	ldr	r3, [pc, #432]	; (800d5d8 <_strtod_l+0xbf0>)
 800d426:	2200      	movs	r2, #0
 800d428:	4640      	mov	r0, r8
 800d42a:	4649      	mov	r1, r9
 800d42c:	f7f3 fb6e 	bl	8000b0c <__aeabi_dcmplt>
 800d430:	b9d0      	cbnz	r0, 800d468 <_strtod_l+0xa80>
 800d432:	4640      	mov	r0, r8
 800d434:	4649      	mov	r1, r9
 800d436:	4b6c      	ldr	r3, [pc, #432]	; (800d5e8 <_strtod_l+0xc00>)
 800d438:	2200      	movs	r2, #0
 800d43a:	f7f3 f8f5 	bl	8000628 <__aeabi_dmul>
 800d43e:	4680      	mov	r8, r0
 800d440:	4689      	mov	r9, r1
 800d442:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d446:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d44a:	9315      	str	r3, [sp, #84]	; 0x54
 800d44c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d450:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d454:	e79d      	b.n	800d392 <_strtod_l+0x9aa>
 800d456:	f1ba 0f01 	cmp.w	sl, #1
 800d45a:	d102      	bne.n	800d462 <_strtod_l+0xa7a>
 800d45c:	2f00      	cmp	r7, #0
 800d45e:	f43f ad83 	beq.w	800cf68 <_strtod_l+0x580>
 800d462:	4b62      	ldr	r3, [pc, #392]	; (800d5ec <_strtod_l+0xc04>)
 800d464:	2200      	movs	r2, #0
 800d466:	e78e      	b.n	800d386 <_strtod_l+0x99e>
 800d468:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d5e8 <_strtod_l+0xc00>
 800d46c:	f04f 0800 	mov.w	r8, #0
 800d470:	e7e7      	b.n	800d442 <_strtod_l+0xa5a>
 800d472:	4b5d      	ldr	r3, [pc, #372]	; (800d5e8 <_strtod_l+0xc00>)
 800d474:	4640      	mov	r0, r8
 800d476:	4649      	mov	r1, r9
 800d478:	2200      	movs	r2, #0
 800d47a:	f7f3 f8d5 	bl	8000628 <__aeabi_dmul>
 800d47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d480:	4680      	mov	r8, r0
 800d482:	4689      	mov	r9, r1
 800d484:	b933      	cbnz	r3, 800d494 <_strtod_l+0xaac>
 800d486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d48a:	900e      	str	r0, [sp, #56]	; 0x38
 800d48c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d48e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d492:	e7dd      	b.n	800d450 <_strtod_l+0xa68>
 800d494:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d498:	e7f9      	b.n	800d48e <_strtod_l+0xaa6>
 800d49a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d49e:	9b04      	ldr	r3, [sp, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1a8      	bne.n	800d3f6 <_strtod_l+0xa0e>
 800d4a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4aa:	0d1b      	lsrs	r3, r3, #20
 800d4ac:	051b      	lsls	r3, r3, #20
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d1a1      	bne.n	800d3f6 <_strtod_l+0xa0e>
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	f7f3 fc17 	bl	8000ce8 <__aeabi_d2lz>
 800d4ba:	f7f3 f887 	bl	80005cc <__aeabi_l2d>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	f7f2 fef7 	bl	80002b8 <__aeabi_dsub>
 800d4ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4d0:	ea43 030a 	orr.w	r3, r3, sl
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	4680      	mov	r8, r0
 800d4d8:	4689      	mov	r9, r1
 800d4da:	d055      	beq.n	800d588 <_strtod_l+0xba0>
 800d4dc:	a336      	add	r3, pc, #216	; (adr r3, 800d5b8 <_strtod_l+0xbd0>)
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	f7f3 fb13 	bl	8000b0c <__aeabi_dcmplt>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f47f acd0 	bne.w	800ce8c <_strtod_l+0x4a4>
 800d4ec:	a334      	add	r3, pc, #208	; (adr r3, 800d5c0 <_strtod_l+0xbd8>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	f7f3 fb27 	bl	8000b48 <__aeabi_dcmpgt>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	f43f af7b 	beq.w	800d3f6 <_strtod_l+0xa0e>
 800d500:	e4c4      	b.n	800ce8c <_strtod_l+0x4a4>
 800d502:	9b04      	ldr	r3, [sp, #16]
 800d504:	b333      	cbz	r3, 800d554 <_strtod_l+0xb6c>
 800d506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d508:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d50c:	d822      	bhi.n	800d554 <_strtod_l+0xb6c>
 800d50e:	a32e      	add	r3, pc, #184	; (adr r3, 800d5c8 <_strtod_l+0xbe0>)
 800d510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d514:	4640      	mov	r0, r8
 800d516:	4649      	mov	r1, r9
 800d518:	f7f3 fb02 	bl	8000b20 <__aeabi_dcmple>
 800d51c:	b1a0      	cbz	r0, 800d548 <_strtod_l+0xb60>
 800d51e:	4649      	mov	r1, r9
 800d520:	4640      	mov	r0, r8
 800d522:	f7f3 fb59 	bl	8000bd8 <__aeabi_d2uiz>
 800d526:	2801      	cmp	r0, #1
 800d528:	bf38      	it	cc
 800d52a:	2001      	movcc	r0, #1
 800d52c:	f7f3 f802 	bl	8000534 <__aeabi_ui2d>
 800d530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d532:	4680      	mov	r8, r0
 800d534:	4689      	mov	r9, r1
 800d536:	bb23      	cbnz	r3, 800d582 <_strtod_l+0xb9a>
 800d538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d53c:	9010      	str	r0, [sp, #64]	; 0x40
 800d53e:	9311      	str	r3, [sp, #68]	; 0x44
 800d540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d544:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d54a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d54c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	9309      	str	r3, [sp, #36]	; 0x24
 800d554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d558:	eeb0 0a48 	vmov.f32	s0, s16
 800d55c:	eef0 0a68 	vmov.f32	s1, s17
 800d560:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d564:	f001 ff5c 	bl	800f420 <__ulp>
 800d568:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d56c:	ec53 2b10 	vmov	r2, r3, d0
 800d570:	f7f3 f85a 	bl	8000628 <__aeabi_dmul>
 800d574:	ec53 2b18 	vmov	r2, r3, d8
 800d578:	f7f2 fea0 	bl	80002bc <__adddf3>
 800d57c:	4682      	mov	sl, r0
 800d57e:	468b      	mov	fp, r1
 800d580:	e78d      	b.n	800d49e <_strtod_l+0xab6>
 800d582:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d586:	e7db      	b.n	800d540 <_strtod_l+0xb58>
 800d588:	a311      	add	r3, pc, #68	; (adr r3, 800d5d0 <_strtod_l+0xbe8>)
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	f7f3 fabd 	bl	8000b0c <__aeabi_dcmplt>
 800d592:	e7b2      	b.n	800d4fa <_strtod_l+0xb12>
 800d594:	2300      	movs	r3, #0
 800d596:	930a      	str	r3, [sp, #40]	; 0x28
 800d598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d59a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	f7ff ba6b 	b.w	800ca78 <_strtod_l+0x90>
 800d5a2:	2a65      	cmp	r2, #101	; 0x65
 800d5a4:	f43f ab5f 	beq.w	800cc66 <_strtod_l+0x27e>
 800d5a8:	2a45      	cmp	r2, #69	; 0x45
 800d5aa:	f43f ab5c 	beq.w	800cc66 <_strtod_l+0x27e>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	f7ff bb94 	b.w	800ccdc <_strtod_l+0x2f4>
 800d5b4:	f3af 8000 	nop.w
 800d5b8:	94a03595 	.word	0x94a03595
 800d5bc:	3fdfffff 	.word	0x3fdfffff
 800d5c0:	35afe535 	.word	0x35afe535
 800d5c4:	3fe00000 	.word	0x3fe00000
 800d5c8:	ffc00000 	.word	0xffc00000
 800d5cc:	41dfffff 	.word	0x41dfffff
 800d5d0:	94a03595 	.word	0x94a03595
 800d5d4:	3fcfffff 	.word	0x3fcfffff
 800d5d8:	3ff00000 	.word	0x3ff00000
 800d5dc:	7ff00000 	.word	0x7ff00000
 800d5e0:	7fe00000 	.word	0x7fe00000
 800d5e4:	7c9fffff 	.word	0x7c9fffff
 800d5e8:	3fe00000 	.word	0x3fe00000
 800d5ec:	bff00000 	.word	0xbff00000
 800d5f0:	7fefffff 	.word	0x7fefffff

0800d5f4 <strtod>:
 800d5f4:	460a      	mov	r2, r1
 800d5f6:	4601      	mov	r1, r0
 800d5f8:	4802      	ldr	r0, [pc, #8]	; (800d604 <strtod+0x10>)
 800d5fa:	4b03      	ldr	r3, [pc, #12]	; (800d608 <strtod+0x14>)
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	f7ff b9f3 	b.w	800c9e8 <_strtod_l>
 800d602:	bf00      	nop
 800d604:	2000001c 	.word	0x2000001c
 800d608:	20000084 	.word	0x20000084

0800d60c <__swbuf_r>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	460e      	mov	r6, r1
 800d610:	4614      	mov	r4, r2
 800d612:	4605      	mov	r5, r0
 800d614:	b118      	cbz	r0, 800d61e <__swbuf_r+0x12>
 800d616:	6983      	ldr	r3, [r0, #24]
 800d618:	b90b      	cbnz	r3, 800d61e <__swbuf_r+0x12>
 800d61a:	f7fe f9a7 	bl	800b96c <__sinit>
 800d61e:	4b21      	ldr	r3, [pc, #132]	; (800d6a4 <__swbuf_r+0x98>)
 800d620:	429c      	cmp	r4, r3
 800d622:	d12b      	bne.n	800d67c <__swbuf_r+0x70>
 800d624:	686c      	ldr	r4, [r5, #4]
 800d626:	69a3      	ldr	r3, [r4, #24]
 800d628:	60a3      	str	r3, [r4, #8]
 800d62a:	89a3      	ldrh	r3, [r4, #12]
 800d62c:	071a      	lsls	r2, r3, #28
 800d62e:	d52f      	bpl.n	800d690 <__swbuf_r+0x84>
 800d630:	6923      	ldr	r3, [r4, #16]
 800d632:	b36b      	cbz	r3, 800d690 <__swbuf_r+0x84>
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	6820      	ldr	r0, [r4, #0]
 800d638:	1ac0      	subs	r0, r0, r3
 800d63a:	6963      	ldr	r3, [r4, #20]
 800d63c:	b2f6      	uxtb	r6, r6
 800d63e:	4283      	cmp	r3, r0
 800d640:	4637      	mov	r7, r6
 800d642:	dc04      	bgt.n	800d64e <__swbuf_r+0x42>
 800d644:	4621      	mov	r1, r4
 800d646:	4628      	mov	r0, r5
 800d648:	f7fe f8ea 	bl	800b820 <_fflush_r>
 800d64c:	bb30      	cbnz	r0, 800d69c <__swbuf_r+0x90>
 800d64e:	68a3      	ldr	r3, [r4, #8]
 800d650:	3b01      	subs	r3, #1
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	1c5a      	adds	r2, r3, #1
 800d658:	6022      	str	r2, [r4, #0]
 800d65a:	701e      	strb	r6, [r3, #0]
 800d65c:	6963      	ldr	r3, [r4, #20]
 800d65e:	3001      	adds	r0, #1
 800d660:	4283      	cmp	r3, r0
 800d662:	d004      	beq.n	800d66e <__swbuf_r+0x62>
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	07db      	lsls	r3, r3, #31
 800d668:	d506      	bpl.n	800d678 <__swbuf_r+0x6c>
 800d66a:	2e0a      	cmp	r6, #10
 800d66c:	d104      	bne.n	800d678 <__swbuf_r+0x6c>
 800d66e:	4621      	mov	r1, r4
 800d670:	4628      	mov	r0, r5
 800d672:	f7fe f8d5 	bl	800b820 <_fflush_r>
 800d676:	b988      	cbnz	r0, 800d69c <__swbuf_r+0x90>
 800d678:	4638      	mov	r0, r7
 800d67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <__swbuf_r+0x9c>)
 800d67e:	429c      	cmp	r4, r3
 800d680:	d101      	bne.n	800d686 <__swbuf_r+0x7a>
 800d682:	68ac      	ldr	r4, [r5, #8]
 800d684:	e7cf      	b.n	800d626 <__swbuf_r+0x1a>
 800d686:	4b09      	ldr	r3, [pc, #36]	; (800d6ac <__swbuf_r+0xa0>)
 800d688:	429c      	cmp	r4, r3
 800d68a:	bf08      	it	eq
 800d68c:	68ec      	ldreq	r4, [r5, #12]
 800d68e:	e7ca      	b.n	800d626 <__swbuf_r+0x1a>
 800d690:	4621      	mov	r1, r4
 800d692:	4628      	mov	r0, r5
 800d694:	f000 f81e 	bl	800d6d4 <__swsetup_r>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d0cb      	beq.n	800d634 <__swbuf_r+0x28>
 800d69c:	f04f 37ff 	mov.w	r7, #4294967295
 800d6a0:	e7ea      	b.n	800d678 <__swbuf_r+0x6c>
 800d6a2:	bf00      	nop
 800d6a4:	08010c84 	.word	0x08010c84
 800d6a8:	08010ca4 	.word	0x08010ca4
 800d6ac:	08010c64 	.word	0x08010c64

0800d6b0 <_write_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4d07      	ldr	r5, [pc, #28]	; (800d6d0 <_write_r+0x20>)
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	4608      	mov	r0, r1
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	602a      	str	r2, [r5, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	f7f7 fc70 	bl	8004fa4 <_write>
 800d6c4:	1c43      	adds	r3, r0, #1
 800d6c6:	d102      	bne.n	800d6ce <_write_r+0x1e>
 800d6c8:	682b      	ldr	r3, [r5, #0]
 800d6ca:	b103      	cbz	r3, 800d6ce <_write_r+0x1e>
 800d6cc:	6023      	str	r3, [r4, #0]
 800d6ce:	bd38      	pop	{r3, r4, r5, pc}
 800d6d0:	2001617c 	.word	0x2001617c

0800d6d4 <__swsetup_r>:
 800d6d4:	4b32      	ldr	r3, [pc, #200]	; (800d7a0 <__swsetup_r+0xcc>)
 800d6d6:	b570      	push	{r4, r5, r6, lr}
 800d6d8:	681d      	ldr	r5, [r3, #0]
 800d6da:	4606      	mov	r6, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	b125      	cbz	r5, 800d6ea <__swsetup_r+0x16>
 800d6e0:	69ab      	ldr	r3, [r5, #24]
 800d6e2:	b913      	cbnz	r3, 800d6ea <__swsetup_r+0x16>
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f7fe f941 	bl	800b96c <__sinit>
 800d6ea:	4b2e      	ldr	r3, [pc, #184]	; (800d7a4 <__swsetup_r+0xd0>)
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	d10f      	bne.n	800d710 <__swsetup_r+0x3c>
 800d6f0:	686c      	ldr	r4, [r5, #4]
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6f8:	0719      	lsls	r1, r3, #28
 800d6fa:	d42c      	bmi.n	800d756 <__swsetup_r+0x82>
 800d6fc:	06dd      	lsls	r5, r3, #27
 800d6fe:	d411      	bmi.n	800d724 <__swsetup_r+0x50>
 800d700:	2309      	movs	r3, #9
 800d702:	6033      	str	r3, [r6, #0]
 800d704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d708:	81a3      	strh	r3, [r4, #12]
 800d70a:	f04f 30ff 	mov.w	r0, #4294967295
 800d70e:	e03e      	b.n	800d78e <__swsetup_r+0xba>
 800d710:	4b25      	ldr	r3, [pc, #148]	; (800d7a8 <__swsetup_r+0xd4>)
 800d712:	429c      	cmp	r4, r3
 800d714:	d101      	bne.n	800d71a <__swsetup_r+0x46>
 800d716:	68ac      	ldr	r4, [r5, #8]
 800d718:	e7eb      	b.n	800d6f2 <__swsetup_r+0x1e>
 800d71a:	4b24      	ldr	r3, [pc, #144]	; (800d7ac <__swsetup_r+0xd8>)
 800d71c:	429c      	cmp	r4, r3
 800d71e:	bf08      	it	eq
 800d720:	68ec      	ldreq	r4, [r5, #12]
 800d722:	e7e6      	b.n	800d6f2 <__swsetup_r+0x1e>
 800d724:	0758      	lsls	r0, r3, #29
 800d726:	d512      	bpl.n	800d74e <__swsetup_r+0x7a>
 800d728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d72a:	b141      	cbz	r1, 800d73e <__swsetup_r+0x6a>
 800d72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d730:	4299      	cmp	r1, r3
 800d732:	d002      	beq.n	800d73a <__swsetup_r+0x66>
 800d734:	4630      	mov	r0, r6
 800d736:	f7fe fa05 	bl	800bb44 <_free_r>
 800d73a:	2300      	movs	r3, #0
 800d73c:	6363      	str	r3, [r4, #52]	; 0x34
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	2300      	movs	r3, #0
 800d748:	6063      	str	r3, [r4, #4]
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	f043 0308 	orr.w	r3, r3, #8
 800d754:	81a3      	strh	r3, [r4, #12]
 800d756:	6923      	ldr	r3, [r4, #16]
 800d758:	b94b      	cbnz	r3, 800d76e <__swsetup_r+0x9a>
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d764:	d003      	beq.n	800d76e <__swsetup_r+0x9a>
 800d766:	4621      	mov	r1, r4
 800d768:	4630      	mov	r0, r6
 800d76a:	f001 fa89 	bl	800ec80 <__smakebuf_r>
 800d76e:	89a0      	ldrh	r0, [r4, #12]
 800d770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d774:	f010 0301 	ands.w	r3, r0, #1
 800d778:	d00a      	beq.n	800d790 <__swsetup_r+0xbc>
 800d77a:	2300      	movs	r3, #0
 800d77c:	60a3      	str	r3, [r4, #8]
 800d77e:	6963      	ldr	r3, [r4, #20]
 800d780:	425b      	negs	r3, r3
 800d782:	61a3      	str	r3, [r4, #24]
 800d784:	6923      	ldr	r3, [r4, #16]
 800d786:	b943      	cbnz	r3, 800d79a <__swsetup_r+0xc6>
 800d788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d78c:	d1ba      	bne.n	800d704 <__swsetup_r+0x30>
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	0781      	lsls	r1, r0, #30
 800d792:	bf58      	it	pl
 800d794:	6963      	ldrpl	r3, [r4, #20]
 800d796:	60a3      	str	r3, [r4, #8]
 800d798:	e7f4      	b.n	800d784 <__swsetup_r+0xb0>
 800d79a:	2000      	movs	r0, #0
 800d79c:	e7f7      	b.n	800d78e <__swsetup_r+0xba>
 800d79e:	bf00      	nop
 800d7a0:	2000001c 	.word	0x2000001c
 800d7a4:	08010c84 	.word	0x08010c84
 800d7a8:	08010ca4 	.word	0x08010ca4
 800d7ac:	08010c64 	.word	0x08010c64

0800d7b0 <__assert_func>:
 800d7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7b2:	4614      	mov	r4, r2
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	4b09      	ldr	r3, [pc, #36]	; (800d7dc <__assert_func+0x2c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	68d8      	ldr	r0, [r3, #12]
 800d7be:	b14c      	cbz	r4, 800d7d4 <__assert_func+0x24>
 800d7c0:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <__assert_func+0x30>)
 800d7c2:	9100      	str	r1, [sp, #0]
 800d7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7c8:	4906      	ldr	r1, [pc, #24]	; (800d7e4 <__assert_func+0x34>)
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f000 fe9a 	bl	800e504 <fiprintf>
 800d7d0:	f002 fa97 	bl	800fd02 <abort>
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <__assert_func+0x38>)
 800d7d6:	461c      	mov	r4, r3
 800d7d8:	e7f3      	b.n	800d7c2 <__assert_func+0x12>
 800d7da:	bf00      	nop
 800d7dc:	2000001c 	.word	0x2000001c
 800d7e0:	08010dc0 	.word	0x08010dc0
 800d7e4:	08010dcd 	.word	0x08010dcd
 800d7e8:	08010dfb 	.word	0x08010dfb

0800d7ec <_close_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d06      	ldr	r5, [pc, #24]	; (800d808 <_close_r+0x1c>)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	602b      	str	r3, [r5, #0]
 800d7f8:	f7f7 f857 	bl	80048aa <_close>
 800d7fc:	1c43      	adds	r3, r0, #1
 800d7fe:	d102      	bne.n	800d806 <_close_r+0x1a>
 800d800:	682b      	ldr	r3, [r5, #0]
 800d802:	b103      	cbz	r3, 800d806 <_close_r+0x1a>
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	bd38      	pop	{r3, r4, r5, pc}
 800d808:	2001617c 	.word	0x2001617c

0800d80c <quorem>:
 800d80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	6903      	ldr	r3, [r0, #16]
 800d812:	690c      	ldr	r4, [r1, #16]
 800d814:	42a3      	cmp	r3, r4
 800d816:	4607      	mov	r7, r0
 800d818:	f2c0 8081 	blt.w	800d91e <quorem+0x112>
 800d81c:	3c01      	subs	r4, #1
 800d81e:	f101 0814 	add.w	r8, r1, #20
 800d822:	f100 0514 	add.w	r5, r0, #20
 800d826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d82a:	9301      	str	r3, [sp, #4]
 800d82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d834:	3301      	adds	r3, #1
 800d836:	429a      	cmp	r2, r3
 800d838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d840:	fbb2 f6f3 	udiv	r6, r2, r3
 800d844:	d331      	bcc.n	800d8aa <quorem+0x9e>
 800d846:	f04f 0e00 	mov.w	lr, #0
 800d84a:	4640      	mov	r0, r8
 800d84c:	46ac      	mov	ip, r5
 800d84e:	46f2      	mov	sl, lr
 800d850:	f850 2b04 	ldr.w	r2, [r0], #4
 800d854:	b293      	uxth	r3, r2
 800d856:	fb06 e303 	mla	r3, r6, r3, lr
 800d85a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d85e:	b29b      	uxth	r3, r3
 800d860:	ebaa 0303 	sub.w	r3, sl, r3
 800d864:	f8dc a000 	ldr.w	sl, [ip]
 800d868:	0c12      	lsrs	r2, r2, #16
 800d86a:	fa13 f38a 	uxtah	r3, r3, sl
 800d86e:	fb06 e202 	mla	r2, r6, r2, lr
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	9b00      	ldr	r3, [sp, #0]
 800d876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d87a:	b292      	uxth	r2, r2
 800d87c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d884:	f8bd 3000 	ldrh.w	r3, [sp]
 800d888:	4581      	cmp	r9, r0
 800d88a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d88e:	f84c 3b04 	str.w	r3, [ip], #4
 800d892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d896:	d2db      	bcs.n	800d850 <quorem+0x44>
 800d898:	f855 300b 	ldr.w	r3, [r5, fp]
 800d89c:	b92b      	cbnz	r3, 800d8aa <quorem+0x9e>
 800d89e:	9b01      	ldr	r3, [sp, #4]
 800d8a0:	3b04      	subs	r3, #4
 800d8a2:	429d      	cmp	r5, r3
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	d32e      	bcc.n	800d906 <quorem+0xfa>
 800d8a8:	613c      	str	r4, [r7, #16]
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	f001 fd12 	bl	800f2d4 <__mcmp>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	db24      	blt.n	800d8fe <quorem+0xf2>
 800d8b4:	3601      	adds	r6, #1
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f04f 0c00 	mov.w	ip, #0
 800d8bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8c0:	f8d0 e000 	ldr.w	lr, [r0]
 800d8c4:	b293      	uxth	r3, r2
 800d8c6:	ebac 0303 	sub.w	r3, ip, r3
 800d8ca:	0c12      	lsrs	r2, r2, #16
 800d8cc:	fa13 f38e 	uxtah	r3, r3, lr
 800d8d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8de:	45c1      	cmp	r9, r8
 800d8e0:	f840 3b04 	str.w	r3, [r0], #4
 800d8e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d8e8:	d2e8      	bcs.n	800d8bc <quorem+0xb0>
 800d8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8f2:	b922      	cbnz	r2, 800d8fe <quorem+0xf2>
 800d8f4:	3b04      	subs	r3, #4
 800d8f6:	429d      	cmp	r5, r3
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	d30a      	bcc.n	800d912 <quorem+0x106>
 800d8fc:	613c      	str	r4, [r7, #16]
 800d8fe:	4630      	mov	r0, r6
 800d900:	b003      	add	sp, #12
 800d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d906:	6812      	ldr	r2, [r2, #0]
 800d908:	3b04      	subs	r3, #4
 800d90a:	2a00      	cmp	r2, #0
 800d90c:	d1cc      	bne.n	800d8a8 <quorem+0x9c>
 800d90e:	3c01      	subs	r4, #1
 800d910:	e7c7      	b.n	800d8a2 <quorem+0x96>
 800d912:	6812      	ldr	r2, [r2, #0]
 800d914:	3b04      	subs	r3, #4
 800d916:	2a00      	cmp	r2, #0
 800d918:	d1f0      	bne.n	800d8fc <quorem+0xf0>
 800d91a:	3c01      	subs	r4, #1
 800d91c:	e7eb      	b.n	800d8f6 <quorem+0xea>
 800d91e:	2000      	movs	r0, #0
 800d920:	e7ee      	b.n	800d900 <quorem+0xf4>
 800d922:	0000      	movs	r0, r0
 800d924:	0000      	movs	r0, r0
	...

0800d928 <_dtoa_r>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	ed2d 8b04 	vpush	{d8-d9}
 800d930:	ec57 6b10 	vmov	r6, r7, d0
 800d934:	b093      	sub	sp, #76	; 0x4c
 800d936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d93c:	9106      	str	r1, [sp, #24]
 800d93e:	ee10 aa10 	vmov	sl, s0
 800d942:	4604      	mov	r4, r0
 800d944:	9209      	str	r2, [sp, #36]	; 0x24
 800d946:	930c      	str	r3, [sp, #48]	; 0x30
 800d948:	46bb      	mov	fp, r7
 800d94a:	b975      	cbnz	r5, 800d96a <_dtoa_r+0x42>
 800d94c:	2010      	movs	r0, #16
 800d94e:	f7fe f8d3 	bl	800baf8 <malloc>
 800d952:	4602      	mov	r2, r0
 800d954:	6260      	str	r0, [r4, #36]	; 0x24
 800d956:	b920      	cbnz	r0, 800d962 <_dtoa_r+0x3a>
 800d958:	4ba7      	ldr	r3, [pc, #668]	; (800dbf8 <_dtoa_r+0x2d0>)
 800d95a:	21ea      	movs	r1, #234	; 0xea
 800d95c:	48a7      	ldr	r0, [pc, #668]	; (800dbfc <_dtoa_r+0x2d4>)
 800d95e:	f7ff ff27 	bl	800d7b0 <__assert_func>
 800d962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d966:	6005      	str	r5, [r0, #0]
 800d968:	60c5      	str	r5, [r0, #12]
 800d96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d96c:	6819      	ldr	r1, [r3, #0]
 800d96e:	b151      	cbz	r1, 800d986 <_dtoa_r+0x5e>
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	604a      	str	r2, [r1, #4]
 800d974:	2301      	movs	r3, #1
 800d976:	4093      	lsls	r3, r2
 800d978:	608b      	str	r3, [r1, #8]
 800d97a:	4620      	mov	r0, r4
 800d97c:	f001 fa1e 	bl	800edbc <_Bfree>
 800d980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	1e3b      	subs	r3, r7, #0
 800d988:	bfaa      	itet	ge
 800d98a:	2300      	movge	r3, #0
 800d98c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d990:	f8c8 3000 	strge.w	r3, [r8]
 800d994:	4b9a      	ldr	r3, [pc, #616]	; (800dc00 <_dtoa_r+0x2d8>)
 800d996:	bfbc      	itt	lt
 800d998:	2201      	movlt	r2, #1
 800d99a:	f8c8 2000 	strlt.w	r2, [r8]
 800d99e:	ea33 030b 	bics.w	r3, r3, fp
 800d9a2:	d11b      	bne.n	800d9dc <_dtoa_r+0xb4>
 800d9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d9aa:	6013      	str	r3, [r2, #0]
 800d9ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9b0:	4333      	orrs	r3, r6
 800d9b2:	f000 8592 	beq.w	800e4da <_dtoa_r+0xbb2>
 800d9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9b8:	b963      	cbnz	r3, 800d9d4 <_dtoa_r+0xac>
 800d9ba:	4b92      	ldr	r3, [pc, #584]	; (800dc04 <_dtoa_r+0x2dc>)
 800d9bc:	e022      	b.n	800da04 <_dtoa_r+0xdc>
 800d9be:	4b92      	ldr	r3, [pc, #584]	; (800dc08 <_dtoa_r+0x2e0>)
 800d9c0:	9301      	str	r3, [sp, #4]
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	9801      	ldr	r0, [sp, #4]
 800d9ca:	b013      	add	sp, #76	; 0x4c
 800d9cc:	ecbd 8b04 	vpop	{d8-d9}
 800d9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d4:	4b8b      	ldr	r3, [pc, #556]	; (800dc04 <_dtoa_r+0x2dc>)
 800d9d6:	9301      	str	r3, [sp, #4]
 800d9d8:	3303      	adds	r3, #3
 800d9da:	e7f3      	b.n	800d9c4 <_dtoa_r+0x9c>
 800d9dc:	2200      	movs	r2, #0
 800d9de:	2300      	movs	r3, #0
 800d9e0:	4650      	mov	r0, sl
 800d9e2:	4659      	mov	r1, fp
 800d9e4:	f7f3 f888 	bl	8000af8 <__aeabi_dcmpeq>
 800d9e8:	ec4b ab19 	vmov	d9, sl, fp
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	b158      	cbz	r0, 800da08 <_dtoa_r+0xe0>
 800d9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f000 856b 	beq.w	800e4d4 <_dtoa_r+0xbac>
 800d9fe:	4883      	ldr	r0, [pc, #524]	; (800dc0c <_dtoa_r+0x2e4>)
 800da00:	6018      	str	r0, [r3, #0]
 800da02:	1e43      	subs	r3, r0, #1
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	e7df      	b.n	800d9c8 <_dtoa_r+0xa0>
 800da08:	ec4b ab10 	vmov	d0, sl, fp
 800da0c:	aa10      	add	r2, sp, #64	; 0x40
 800da0e:	a911      	add	r1, sp, #68	; 0x44
 800da10:	4620      	mov	r0, r4
 800da12:	f001 fd81 	bl	800f518 <__d2b>
 800da16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800da1a:	ee08 0a10 	vmov	s16, r0
 800da1e:	2d00      	cmp	r5, #0
 800da20:	f000 8084 	beq.w	800db2c <_dtoa_r+0x204>
 800da24:	ee19 3a90 	vmov	r3, s19
 800da28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800da30:	4656      	mov	r6, sl
 800da32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800da36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800da3e:	4b74      	ldr	r3, [pc, #464]	; (800dc10 <_dtoa_r+0x2e8>)
 800da40:	2200      	movs	r2, #0
 800da42:	4630      	mov	r0, r6
 800da44:	4639      	mov	r1, r7
 800da46:	f7f2 fc37 	bl	80002b8 <__aeabi_dsub>
 800da4a:	a365      	add	r3, pc, #404	; (adr r3, 800dbe0 <_dtoa_r+0x2b8>)
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	f7f2 fdea 	bl	8000628 <__aeabi_dmul>
 800da54:	a364      	add	r3, pc, #400	; (adr r3, 800dbe8 <_dtoa_r+0x2c0>)
 800da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5a:	f7f2 fc2f 	bl	80002bc <__adddf3>
 800da5e:	4606      	mov	r6, r0
 800da60:	4628      	mov	r0, r5
 800da62:	460f      	mov	r7, r1
 800da64:	f7f2 fd76 	bl	8000554 <__aeabi_i2d>
 800da68:	a361      	add	r3, pc, #388	; (adr r3, 800dbf0 <_dtoa_r+0x2c8>)
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f7f2 fddb 	bl	8000628 <__aeabi_dmul>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4630      	mov	r0, r6
 800da78:	4639      	mov	r1, r7
 800da7a:	f7f2 fc1f 	bl	80002bc <__adddf3>
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	f7f3 f881 	bl	8000b88 <__aeabi_d2iz>
 800da86:	2200      	movs	r2, #0
 800da88:	9000      	str	r0, [sp, #0]
 800da8a:	2300      	movs	r3, #0
 800da8c:	4630      	mov	r0, r6
 800da8e:	4639      	mov	r1, r7
 800da90:	f7f3 f83c 	bl	8000b0c <__aeabi_dcmplt>
 800da94:	b150      	cbz	r0, 800daac <_dtoa_r+0x184>
 800da96:	9800      	ldr	r0, [sp, #0]
 800da98:	f7f2 fd5c 	bl	8000554 <__aeabi_i2d>
 800da9c:	4632      	mov	r2, r6
 800da9e:	463b      	mov	r3, r7
 800daa0:	f7f3 f82a 	bl	8000af8 <__aeabi_dcmpeq>
 800daa4:	b910      	cbnz	r0, 800daac <_dtoa_r+0x184>
 800daa6:	9b00      	ldr	r3, [sp, #0]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	9b00      	ldr	r3, [sp, #0]
 800daae:	2b16      	cmp	r3, #22
 800dab0:	d85a      	bhi.n	800db68 <_dtoa_r+0x240>
 800dab2:	9a00      	ldr	r2, [sp, #0]
 800dab4:	4b57      	ldr	r3, [pc, #348]	; (800dc14 <_dtoa_r+0x2ec>)
 800dab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	ec51 0b19 	vmov	r0, r1, d9
 800dac2:	f7f3 f823 	bl	8000b0c <__aeabi_dcmplt>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d050      	beq.n	800db6c <_dtoa_r+0x244>
 800daca:	9b00      	ldr	r3, [sp, #0]
 800dacc:	3b01      	subs	r3, #1
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	2300      	movs	r3, #0
 800dad2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dad6:	1b5d      	subs	r5, r3, r5
 800dad8:	1e6b      	subs	r3, r5, #1
 800dada:	9305      	str	r3, [sp, #20]
 800dadc:	bf45      	ittet	mi
 800dade:	f1c5 0301 	rsbmi	r3, r5, #1
 800dae2:	9304      	strmi	r3, [sp, #16]
 800dae4:	2300      	movpl	r3, #0
 800dae6:	2300      	movmi	r3, #0
 800dae8:	bf4c      	ite	mi
 800daea:	9305      	strmi	r3, [sp, #20]
 800daec:	9304      	strpl	r3, [sp, #16]
 800daee:	9b00      	ldr	r3, [sp, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	db3d      	blt.n	800db70 <_dtoa_r+0x248>
 800daf4:	9b05      	ldr	r3, [sp, #20]
 800daf6:	9a00      	ldr	r2, [sp, #0]
 800daf8:	920a      	str	r2, [sp, #40]	; 0x28
 800dafa:	4413      	add	r3, r2
 800dafc:	9305      	str	r3, [sp, #20]
 800dafe:	2300      	movs	r3, #0
 800db00:	9307      	str	r3, [sp, #28]
 800db02:	9b06      	ldr	r3, [sp, #24]
 800db04:	2b09      	cmp	r3, #9
 800db06:	f200 8089 	bhi.w	800dc1c <_dtoa_r+0x2f4>
 800db0a:	2b05      	cmp	r3, #5
 800db0c:	bfc4      	itt	gt
 800db0e:	3b04      	subgt	r3, #4
 800db10:	9306      	strgt	r3, [sp, #24]
 800db12:	9b06      	ldr	r3, [sp, #24]
 800db14:	f1a3 0302 	sub.w	r3, r3, #2
 800db18:	bfcc      	ite	gt
 800db1a:	2500      	movgt	r5, #0
 800db1c:	2501      	movle	r5, #1
 800db1e:	2b03      	cmp	r3, #3
 800db20:	f200 8087 	bhi.w	800dc32 <_dtoa_r+0x30a>
 800db24:	e8df f003 	tbb	[pc, r3]
 800db28:	59383a2d 	.word	0x59383a2d
 800db2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800db30:	441d      	add	r5, r3
 800db32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800db36:	2b20      	cmp	r3, #32
 800db38:	bfc1      	itttt	gt
 800db3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800db3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800db42:	fa0b f303 	lslgt.w	r3, fp, r3
 800db46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800db4a:	bfda      	itte	le
 800db4c:	f1c3 0320 	rsble	r3, r3, #32
 800db50:	fa06 f003 	lslle.w	r0, r6, r3
 800db54:	4318      	orrgt	r0, r3
 800db56:	f7f2 fced 	bl	8000534 <__aeabi_ui2d>
 800db5a:	2301      	movs	r3, #1
 800db5c:	4606      	mov	r6, r0
 800db5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800db62:	3d01      	subs	r5, #1
 800db64:	930e      	str	r3, [sp, #56]	; 0x38
 800db66:	e76a      	b.n	800da3e <_dtoa_r+0x116>
 800db68:	2301      	movs	r3, #1
 800db6a:	e7b2      	b.n	800dad2 <_dtoa_r+0x1aa>
 800db6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800db6e:	e7b1      	b.n	800dad4 <_dtoa_r+0x1ac>
 800db70:	9b04      	ldr	r3, [sp, #16]
 800db72:	9a00      	ldr	r2, [sp, #0]
 800db74:	1a9b      	subs	r3, r3, r2
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	4253      	negs	r3, r2
 800db7a:	9307      	str	r3, [sp, #28]
 800db7c:	2300      	movs	r3, #0
 800db7e:	930a      	str	r3, [sp, #40]	; 0x28
 800db80:	e7bf      	b.n	800db02 <_dtoa_r+0x1da>
 800db82:	2300      	movs	r3, #0
 800db84:	9308      	str	r3, [sp, #32]
 800db86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db88:	2b00      	cmp	r3, #0
 800db8a:	dc55      	bgt.n	800dc38 <_dtoa_r+0x310>
 800db8c:	2301      	movs	r3, #1
 800db8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800db92:	461a      	mov	r2, r3
 800db94:	9209      	str	r2, [sp, #36]	; 0x24
 800db96:	e00c      	b.n	800dbb2 <_dtoa_r+0x28a>
 800db98:	2301      	movs	r3, #1
 800db9a:	e7f3      	b.n	800db84 <_dtoa_r+0x25c>
 800db9c:	2300      	movs	r3, #0
 800db9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dba0:	9308      	str	r3, [sp, #32]
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	4413      	add	r3, r2
 800dba6:	9302      	str	r3, [sp, #8]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	9303      	str	r3, [sp, #12]
 800dbae:	bfb8      	it	lt
 800dbb0:	2301      	movlt	r3, #1
 800dbb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	6042      	str	r2, [r0, #4]
 800dbb8:	2204      	movs	r2, #4
 800dbba:	f102 0614 	add.w	r6, r2, #20
 800dbbe:	429e      	cmp	r6, r3
 800dbc0:	6841      	ldr	r1, [r0, #4]
 800dbc2:	d93d      	bls.n	800dc40 <_dtoa_r+0x318>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f001 f8b9 	bl	800ed3c <_Balloc>
 800dbca:	9001      	str	r0, [sp, #4]
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d13b      	bne.n	800dc48 <_dtoa_r+0x320>
 800dbd0:	4b11      	ldr	r3, [pc, #68]	; (800dc18 <_dtoa_r+0x2f0>)
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dbd8:	e6c0      	b.n	800d95c <_dtoa_r+0x34>
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e7df      	b.n	800db9e <_dtoa_r+0x276>
 800dbde:	bf00      	nop
 800dbe0:	636f4361 	.word	0x636f4361
 800dbe4:	3fd287a7 	.word	0x3fd287a7
 800dbe8:	8b60c8b3 	.word	0x8b60c8b3
 800dbec:	3fc68a28 	.word	0x3fc68a28
 800dbf0:	509f79fb 	.word	0x509f79fb
 800dbf4:	3fd34413 	.word	0x3fd34413
 800dbf8:	08010cfc 	.word	0x08010cfc
 800dbfc:	08010e09 	.word	0x08010e09
 800dc00:	7ff00000 	.word	0x7ff00000
 800dc04:	08010e05 	.word	0x08010e05
 800dc08:	08010dfc 	.word	0x08010dfc
 800dc0c:	08010cd9 	.word	0x08010cd9
 800dc10:	3ff80000 	.word	0x3ff80000
 800dc14:	08010f78 	.word	0x08010f78
 800dc18:	08010e64 	.word	0x08010e64
 800dc1c:	2501      	movs	r5, #1
 800dc1e:	2300      	movs	r3, #0
 800dc20:	9306      	str	r3, [sp, #24]
 800dc22:	9508      	str	r5, [sp, #32]
 800dc24:	f04f 33ff 	mov.w	r3, #4294967295
 800dc28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2312      	movs	r3, #18
 800dc30:	e7b0      	b.n	800db94 <_dtoa_r+0x26c>
 800dc32:	2301      	movs	r3, #1
 800dc34:	9308      	str	r3, [sp, #32]
 800dc36:	e7f5      	b.n	800dc24 <_dtoa_r+0x2fc>
 800dc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc3e:	e7b8      	b.n	800dbb2 <_dtoa_r+0x28a>
 800dc40:	3101      	adds	r1, #1
 800dc42:	6041      	str	r1, [r0, #4]
 800dc44:	0052      	lsls	r2, r2, #1
 800dc46:	e7b8      	b.n	800dbba <_dtoa_r+0x292>
 800dc48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc4a:	9a01      	ldr	r2, [sp, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	9b03      	ldr	r3, [sp, #12]
 800dc50:	2b0e      	cmp	r3, #14
 800dc52:	f200 809d 	bhi.w	800dd90 <_dtoa_r+0x468>
 800dc56:	2d00      	cmp	r5, #0
 800dc58:	f000 809a 	beq.w	800dd90 <_dtoa_r+0x468>
 800dc5c:	9b00      	ldr	r3, [sp, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	dd32      	ble.n	800dcc8 <_dtoa_r+0x3a0>
 800dc62:	4ab7      	ldr	r2, [pc, #732]	; (800df40 <_dtoa_r+0x618>)
 800dc64:	f003 030f 	and.w	r3, r3, #15
 800dc68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dc6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc70:	9b00      	ldr	r3, [sp, #0]
 800dc72:	05d8      	lsls	r0, r3, #23
 800dc74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dc78:	d516      	bpl.n	800dca8 <_dtoa_r+0x380>
 800dc7a:	4bb2      	ldr	r3, [pc, #712]	; (800df44 <_dtoa_r+0x61c>)
 800dc7c:	ec51 0b19 	vmov	r0, r1, d9
 800dc80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc84:	f7f2 fdfa 	bl	800087c <__aeabi_ddiv>
 800dc88:	f007 070f 	and.w	r7, r7, #15
 800dc8c:	4682      	mov	sl, r0
 800dc8e:	468b      	mov	fp, r1
 800dc90:	2503      	movs	r5, #3
 800dc92:	4eac      	ldr	r6, [pc, #688]	; (800df44 <_dtoa_r+0x61c>)
 800dc94:	b957      	cbnz	r7, 800dcac <_dtoa_r+0x384>
 800dc96:	4642      	mov	r2, r8
 800dc98:	464b      	mov	r3, r9
 800dc9a:	4650      	mov	r0, sl
 800dc9c:	4659      	mov	r1, fp
 800dc9e:	f7f2 fded 	bl	800087c <__aeabi_ddiv>
 800dca2:	4682      	mov	sl, r0
 800dca4:	468b      	mov	fp, r1
 800dca6:	e028      	b.n	800dcfa <_dtoa_r+0x3d2>
 800dca8:	2502      	movs	r5, #2
 800dcaa:	e7f2      	b.n	800dc92 <_dtoa_r+0x36a>
 800dcac:	07f9      	lsls	r1, r7, #31
 800dcae:	d508      	bpl.n	800dcc2 <_dtoa_r+0x39a>
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dcb8:	f7f2 fcb6 	bl	8000628 <__aeabi_dmul>
 800dcbc:	3501      	adds	r5, #1
 800dcbe:	4680      	mov	r8, r0
 800dcc0:	4689      	mov	r9, r1
 800dcc2:	107f      	asrs	r7, r7, #1
 800dcc4:	3608      	adds	r6, #8
 800dcc6:	e7e5      	b.n	800dc94 <_dtoa_r+0x36c>
 800dcc8:	f000 809b 	beq.w	800de02 <_dtoa_r+0x4da>
 800dccc:	9b00      	ldr	r3, [sp, #0]
 800dcce:	4f9d      	ldr	r7, [pc, #628]	; (800df44 <_dtoa_r+0x61c>)
 800dcd0:	425e      	negs	r6, r3
 800dcd2:	4b9b      	ldr	r3, [pc, #620]	; (800df40 <_dtoa_r+0x618>)
 800dcd4:	f006 020f 	and.w	r2, r6, #15
 800dcd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	ec51 0b19 	vmov	r0, r1, d9
 800dce4:	f7f2 fca0 	bl	8000628 <__aeabi_dmul>
 800dce8:	1136      	asrs	r6, r6, #4
 800dcea:	4682      	mov	sl, r0
 800dcec:	468b      	mov	fp, r1
 800dcee:	2300      	movs	r3, #0
 800dcf0:	2502      	movs	r5, #2
 800dcf2:	2e00      	cmp	r6, #0
 800dcf4:	d17a      	bne.n	800ddec <_dtoa_r+0x4c4>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1d3      	bne.n	800dca2 <_dtoa_r+0x37a>
 800dcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 8082 	beq.w	800de06 <_dtoa_r+0x4de>
 800dd02:	4b91      	ldr	r3, [pc, #580]	; (800df48 <_dtoa_r+0x620>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	4650      	mov	r0, sl
 800dd08:	4659      	mov	r1, fp
 800dd0a:	f7f2 feff 	bl	8000b0c <__aeabi_dcmplt>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d079      	beq.n	800de06 <_dtoa_r+0x4de>
 800dd12:	9b03      	ldr	r3, [sp, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d076      	beq.n	800de06 <_dtoa_r+0x4de>
 800dd18:	9b02      	ldr	r3, [sp, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dd36      	ble.n	800dd8c <_dtoa_r+0x464>
 800dd1e:	9b00      	ldr	r3, [sp, #0]
 800dd20:	4650      	mov	r0, sl
 800dd22:	4659      	mov	r1, fp
 800dd24:	1e5f      	subs	r7, r3, #1
 800dd26:	2200      	movs	r2, #0
 800dd28:	4b88      	ldr	r3, [pc, #544]	; (800df4c <_dtoa_r+0x624>)
 800dd2a:	f7f2 fc7d 	bl	8000628 <__aeabi_dmul>
 800dd2e:	9e02      	ldr	r6, [sp, #8]
 800dd30:	4682      	mov	sl, r0
 800dd32:	468b      	mov	fp, r1
 800dd34:	3501      	adds	r5, #1
 800dd36:	4628      	mov	r0, r5
 800dd38:	f7f2 fc0c 	bl	8000554 <__aeabi_i2d>
 800dd3c:	4652      	mov	r2, sl
 800dd3e:	465b      	mov	r3, fp
 800dd40:	f7f2 fc72 	bl	8000628 <__aeabi_dmul>
 800dd44:	4b82      	ldr	r3, [pc, #520]	; (800df50 <_dtoa_r+0x628>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	f7f2 fab8 	bl	80002bc <__adddf3>
 800dd4c:	46d0      	mov	r8, sl
 800dd4e:	46d9      	mov	r9, fp
 800dd50:	4682      	mov	sl, r0
 800dd52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dd56:	2e00      	cmp	r6, #0
 800dd58:	d158      	bne.n	800de0c <_dtoa_r+0x4e4>
 800dd5a:	4b7e      	ldr	r3, [pc, #504]	; (800df54 <_dtoa_r+0x62c>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4640      	mov	r0, r8
 800dd60:	4649      	mov	r1, r9
 800dd62:	f7f2 faa9 	bl	80002b8 <__aeabi_dsub>
 800dd66:	4652      	mov	r2, sl
 800dd68:	465b      	mov	r3, fp
 800dd6a:	4680      	mov	r8, r0
 800dd6c:	4689      	mov	r9, r1
 800dd6e:	f7f2 feeb 	bl	8000b48 <__aeabi_dcmpgt>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	f040 8295 	bne.w	800e2a2 <_dtoa_r+0x97a>
 800dd78:	4652      	mov	r2, sl
 800dd7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dd7e:	4640      	mov	r0, r8
 800dd80:	4649      	mov	r1, r9
 800dd82:	f7f2 fec3 	bl	8000b0c <__aeabi_dcmplt>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	f040 8289 	bne.w	800e29e <_dtoa_r+0x976>
 800dd8c:	ec5b ab19 	vmov	sl, fp, d9
 800dd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f2c0 8148 	blt.w	800e028 <_dtoa_r+0x700>
 800dd98:	9a00      	ldr	r2, [sp, #0]
 800dd9a:	2a0e      	cmp	r2, #14
 800dd9c:	f300 8144 	bgt.w	800e028 <_dtoa_r+0x700>
 800dda0:	4b67      	ldr	r3, [pc, #412]	; (800df40 <_dtoa_r+0x618>)
 800dda2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dda6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f280 80d5 	bge.w	800df5c <_dtoa_r+0x634>
 800ddb2:	9b03      	ldr	r3, [sp, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f300 80d1 	bgt.w	800df5c <_dtoa_r+0x634>
 800ddba:	f040 826f 	bne.w	800e29c <_dtoa_r+0x974>
 800ddbe:	4b65      	ldr	r3, [pc, #404]	; (800df54 <_dtoa_r+0x62c>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	4649      	mov	r1, r9
 800ddc6:	f7f2 fc2f 	bl	8000628 <__aeabi_dmul>
 800ddca:	4652      	mov	r2, sl
 800ddcc:	465b      	mov	r3, fp
 800ddce:	f7f2 feb1 	bl	8000b34 <__aeabi_dcmpge>
 800ddd2:	9e03      	ldr	r6, [sp, #12]
 800ddd4:	4637      	mov	r7, r6
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	f040 8245 	bne.w	800e266 <_dtoa_r+0x93e>
 800dddc:	9d01      	ldr	r5, [sp, #4]
 800ddde:	2331      	movs	r3, #49	; 0x31
 800dde0:	f805 3b01 	strb.w	r3, [r5], #1
 800dde4:	9b00      	ldr	r3, [sp, #0]
 800dde6:	3301      	adds	r3, #1
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	e240      	b.n	800e26e <_dtoa_r+0x946>
 800ddec:	07f2      	lsls	r2, r6, #31
 800ddee:	d505      	bpl.n	800ddfc <_dtoa_r+0x4d4>
 800ddf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddf4:	f7f2 fc18 	bl	8000628 <__aeabi_dmul>
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	1076      	asrs	r6, r6, #1
 800ddfe:	3708      	adds	r7, #8
 800de00:	e777      	b.n	800dcf2 <_dtoa_r+0x3ca>
 800de02:	2502      	movs	r5, #2
 800de04:	e779      	b.n	800dcfa <_dtoa_r+0x3d2>
 800de06:	9f00      	ldr	r7, [sp, #0]
 800de08:	9e03      	ldr	r6, [sp, #12]
 800de0a:	e794      	b.n	800dd36 <_dtoa_r+0x40e>
 800de0c:	9901      	ldr	r1, [sp, #4]
 800de0e:	4b4c      	ldr	r3, [pc, #304]	; (800df40 <_dtoa_r+0x618>)
 800de10:	4431      	add	r1, r6
 800de12:	910d      	str	r1, [sp, #52]	; 0x34
 800de14:	9908      	ldr	r1, [sp, #32]
 800de16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de1e:	2900      	cmp	r1, #0
 800de20:	d043      	beq.n	800deaa <_dtoa_r+0x582>
 800de22:	494d      	ldr	r1, [pc, #308]	; (800df58 <_dtoa_r+0x630>)
 800de24:	2000      	movs	r0, #0
 800de26:	f7f2 fd29 	bl	800087c <__aeabi_ddiv>
 800de2a:	4652      	mov	r2, sl
 800de2c:	465b      	mov	r3, fp
 800de2e:	f7f2 fa43 	bl	80002b8 <__aeabi_dsub>
 800de32:	9d01      	ldr	r5, [sp, #4]
 800de34:	4682      	mov	sl, r0
 800de36:	468b      	mov	fp, r1
 800de38:	4649      	mov	r1, r9
 800de3a:	4640      	mov	r0, r8
 800de3c:	f7f2 fea4 	bl	8000b88 <__aeabi_d2iz>
 800de40:	4606      	mov	r6, r0
 800de42:	f7f2 fb87 	bl	8000554 <__aeabi_i2d>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4640      	mov	r0, r8
 800de4c:	4649      	mov	r1, r9
 800de4e:	f7f2 fa33 	bl	80002b8 <__aeabi_dsub>
 800de52:	3630      	adds	r6, #48	; 0x30
 800de54:	f805 6b01 	strb.w	r6, [r5], #1
 800de58:	4652      	mov	r2, sl
 800de5a:	465b      	mov	r3, fp
 800de5c:	4680      	mov	r8, r0
 800de5e:	4689      	mov	r9, r1
 800de60:	f7f2 fe54 	bl	8000b0c <__aeabi_dcmplt>
 800de64:	2800      	cmp	r0, #0
 800de66:	d163      	bne.n	800df30 <_dtoa_r+0x608>
 800de68:	4642      	mov	r2, r8
 800de6a:	464b      	mov	r3, r9
 800de6c:	4936      	ldr	r1, [pc, #216]	; (800df48 <_dtoa_r+0x620>)
 800de6e:	2000      	movs	r0, #0
 800de70:	f7f2 fa22 	bl	80002b8 <__aeabi_dsub>
 800de74:	4652      	mov	r2, sl
 800de76:	465b      	mov	r3, fp
 800de78:	f7f2 fe48 	bl	8000b0c <__aeabi_dcmplt>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	f040 80b5 	bne.w	800dfec <_dtoa_r+0x6c4>
 800de82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de84:	429d      	cmp	r5, r3
 800de86:	d081      	beq.n	800dd8c <_dtoa_r+0x464>
 800de88:	4b30      	ldr	r3, [pc, #192]	; (800df4c <_dtoa_r+0x624>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	4650      	mov	r0, sl
 800de8e:	4659      	mov	r1, fp
 800de90:	f7f2 fbca 	bl	8000628 <__aeabi_dmul>
 800de94:	4b2d      	ldr	r3, [pc, #180]	; (800df4c <_dtoa_r+0x624>)
 800de96:	4682      	mov	sl, r0
 800de98:	468b      	mov	fp, r1
 800de9a:	4640      	mov	r0, r8
 800de9c:	4649      	mov	r1, r9
 800de9e:	2200      	movs	r2, #0
 800dea0:	f7f2 fbc2 	bl	8000628 <__aeabi_dmul>
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	e7c6      	b.n	800de38 <_dtoa_r+0x510>
 800deaa:	4650      	mov	r0, sl
 800deac:	4659      	mov	r1, fp
 800deae:	f7f2 fbbb 	bl	8000628 <__aeabi_dmul>
 800deb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deb4:	9d01      	ldr	r5, [sp, #4]
 800deb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800deb8:	4682      	mov	sl, r0
 800deba:	468b      	mov	fp, r1
 800debc:	4649      	mov	r1, r9
 800debe:	4640      	mov	r0, r8
 800dec0:	f7f2 fe62 	bl	8000b88 <__aeabi_d2iz>
 800dec4:	4606      	mov	r6, r0
 800dec6:	f7f2 fb45 	bl	8000554 <__aeabi_i2d>
 800deca:	3630      	adds	r6, #48	; 0x30
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4640      	mov	r0, r8
 800ded2:	4649      	mov	r1, r9
 800ded4:	f7f2 f9f0 	bl	80002b8 <__aeabi_dsub>
 800ded8:	f805 6b01 	strb.w	r6, [r5], #1
 800dedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dede:	429d      	cmp	r5, r3
 800dee0:	4680      	mov	r8, r0
 800dee2:	4689      	mov	r9, r1
 800dee4:	f04f 0200 	mov.w	r2, #0
 800dee8:	d124      	bne.n	800df34 <_dtoa_r+0x60c>
 800deea:	4b1b      	ldr	r3, [pc, #108]	; (800df58 <_dtoa_r+0x630>)
 800deec:	4650      	mov	r0, sl
 800deee:	4659      	mov	r1, fp
 800def0:	f7f2 f9e4 	bl	80002bc <__adddf3>
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	4640      	mov	r0, r8
 800defa:	4649      	mov	r1, r9
 800defc:	f7f2 fe24 	bl	8000b48 <__aeabi_dcmpgt>
 800df00:	2800      	cmp	r0, #0
 800df02:	d173      	bne.n	800dfec <_dtoa_r+0x6c4>
 800df04:	4652      	mov	r2, sl
 800df06:	465b      	mov	r3, fp
 800df08:	4913      	ldr	r1, [pc, #76]	; (800df58 <_dtoa_r+0x630>)
 800df0a:	2000      	movs	r0, #0
 800df0c:	f7f2 f9d4 	bl	80002b8 <__aeabi_dsub>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4640      	mov	r0, r8
 800df16:	4649      	mov	r1, r9
 800df18:	f7f2 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f43f af35 	beq.w	800dd8c <_dtoa_r+0x464>
 800df22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df24:	1e6b      	subs	r3, r5, #1
 800df26:	930f      	str	r3, [sp, #60]	; 0x3c
 800df28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df2c:	2b30      	cmp	r3, #48	; 0x30
 800df2e:	d0f8      	beq.n	800df22 <_dtoa_r+0x5fa>
 800df30:	9700      	str	r7, [sp, #0]
 800df32:	e049      	b.n	800dfc8 <_dtoa_r+0x6a0>
 800df34:	4b05      	ldr	r3, [pc, #20]	; (800df4c <_dtoa_r+0x624>)
 800df36:	f7f2 fb77 	bl	8000628 <__aeabi_dmul>
 800df3a:	4680      	mov	r8, r0
 800df3c:	4689      	mov	r9, r1
 800df3e:	e7bd      	b.n	800debc <_dtoa_r+0x594>
 800df40:	08010f78 	.word	0x08010f78
 800df44:	08010f50 	.word	0x08010f50
 800df48:	3ff00000 	.word	0x3ff00000
 800df4c:	40240000 	.word	0x40240000
 800df50:	401c0000 	.word	0x401c0000
 800df54:	40140000 	.word	0x40140000
 800df58:	3fe00000 	.word	0x3fe00000
 800df5c:	9d01      	ldr	r5, [sp, #4]
 800df5e:	4656      	mov	r6, sl
 800df60:	465f      	mov	r7, fp
 800df62:	4642      	mov	r2, r8
 800df64:	464b      	mov	r3, r9
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fc87 	bl	800087c <__aeabi_ddiv>
 800df6e:	f7f2 fe0b 	bl	8000b88 <__aeabi_d2iz>
 800df72:	4682      	mov	sl, r0
 800df74:	f7f2 faee 	bl	8000554 <__aeabi_i2d>
 800df78:	4642      	mov	r2, r8
 800df7a:	464b      	mov	r3, r9
 800df7c:	f7f2 fb54 	bl	8000628 <__aeabi_dmul>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4630      	mov	r0, r6
 800df86:	4639      	mov	r1, r7
 800df88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800df8c:	f7f2 f994 	bl	80002b8 <__aeabi_dsub>
 800df90:	f805 6b01 	strb.w	r6, [r5], #1
 800df94:	9e01      	ldr	r6, [sp, #4]
 800df96:	9f03      	ldr	r7, [sp, #12]
 800df98:	1bae      	subs	r6, r5, r6
 800df9a:	42b7      	cmp	r7, r6
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	d135      	bne.n	800e00e <_dtoa_r+0x6e6>
 800dfa2:	f7f2 f98b 	bl	80002bc <__adddf3>
 800dfa6:	4642      	mov	r2, r8
 800dfa8:	464b      	mov	r3, r9
 800dfaa:	4606      	mov	r6, r0
 800dfac:	460f      	mov	r7, r1
 800dfae:	f7f2 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 800dfb2:	b9d0      	cbnz	r0, 800dfea <_dtoa_r+0x6c2>
 800dfb4:	4642      	mov	r2, r8
 800dfb6:	464b      	mov	r3, r9
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	f7f2 fd9c 	bl	8000af8 <__aeabi_dcmpeq>
 800dfc0:	b110      	cbz	r0, 800dfc8 <_dtoa_r+0x6a0>
 800dfc2:	f01a 0f01 	tst.w	sl, #1
 800dfc6:	d110      	bne.n	800dfea <_dtoa_r+0x6c2>
 800dfc8:	4620      	mov	r0, r4
 800dfca:	ee18 1a10 	vmov	r1, s16
 800dfce:	f000 fef5 	bl	800edbc <_Bfree>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9800      	ldr	r0, [sp, #0]
 800dfd6:	702b      	strb	r3, [r5, #0]
 800dfd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfda:	3001      	adds	r0, #1
 800dfdc:	6018      	str	r0, [r3, #0]
 800dfde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f43f acf1 	beq.w	800d9c8 <_dtoa_r+0xa0>
 800dfe6:	601d      	str	r5, [r3, #0]
 800dfe8:	e4ee      	b.n	800d9c8 <_dtoa_r+0xa0>
 800dfea:	9f00      	ldr	r7, [sp, #0]
 800dfec:	462b      	mov	r3, r5
 800dfee:	461d      	mov	r5, r3
 800dff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dff4:	2a39      	cmp	r2, #57	; 0x39
 800dff6:	d106      	bne.n	800e006 <_dtoa_r+0x6de>
 800dff8:	9a01      	ldr	r2, [sp, #4]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d1f7      	bne.n	800dfee <_dtoa_r+0x6c6>
 800dffe:	9901      	ldr	r1, [sp, #4]
 800e000:	2230      	movs	r2, #48	; 0x30
 800e002:	3701      	adds	r7, #1
 800e004:	700a      	strb	r2, [r1, #0]
 800e006:	781a      	ldrb	r2, [r3, #0]
 800e008:	3201      	adds	r2, #1
 800e00a:	701a      	strb	r2, [r3, #0]
 800e00c:	e790      	b.n	800df30 <_dtoa_r+0x608>
 800e00e:	4ba6      	ldr	r3, [pc, #664]	; (800e2a8 <_dtoa_r+0x980>)
 800e010:	2200      	movs	r2, #0
 800e012:	f7f2 fb09 	bl	8000628 <__aeabi_dmul>
 800e016:	2200      	movs	r2, #0
 800e018:	2300      	movs	r3, #0
 800e01a:	4606      	mov	r6, r0
 800e01c:	460f      	mov	r7, r1
 800e01e:	f7f2 fd6b 	bl	8000af8 <__aeabi_dcmpeq>
 800e022:	2800      	cmp	r0, #0
 800e024:	d09d      	beq.n	800df62 <_dtoa_r+0x63a>
 800e026:	e7cf      	b.n	800dfc8 <_dtoa_r+0x6a0>
 800e028:	9a08      	ldr	r2, [sp, #32]
 800e02a:	2a00      	cmp	r2, #0
 800e02c:	f000 80d7 	beq.w	800e1de <_dtoa_r+0x8b6>
 800e030:	9a06      	ldr	r2, [sp, #24]
 800e032:	2a01      	cmp	r2, #1
 800e034:	f300 80ba 	bgt.w	800e1ac <_dtoa_r+0x884>
 800e038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e03a:	2a00      	cmp	r2, #0
 800e03c:	f000 80b2 	beq.w	800e1a4 <_dtoa_r+0x87c>
 800e040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e044:	9e07      	ldr	r6, [sp, #28]
 800e046:	9d04      	ldr	r5, [sp, #16]
 800e048:	9a04      	ldr	r2, [sp, #16]
 800e04a:	441a      	add	r2, r3
 800e04c:	9204      	str	r2, [sp, #16]
 800e04e:	9a05      	ldr	r2, [sp, #20]
 800e050:	2101      	movs	r1, #1
 800e052:	441a      	add	r2, r3
 800e054:	4620      	mov	r0, r4
 800e056:	9205      	str	r2, [sp, #20]
 800e058:	f000 ffb2 	bl	800efc0 <__i2b>
 800e05c:	4607      	mov	r7, r0
 800e05e:	2d00      	cmp	r5, #0
 800e060:	dd0c      	ble.n	800e07c <_dtoa_r+0x754>
 800e062:	9b05      	ldr	r3, [sp, #20]
 800e064:	2b00      	cmp	r3, #0
 800e066:	dd09      	ble.n	800e07c <_dtoa_r+0x754>
 800e068:	42ab      	cmp	r3, r5
 800e06a:	9a04      	ldr	r2, [sp, #16]
 800e06c:	bfa8      	it	ge
 800e06e:	462b      	movge	r3, r5
 800e070:	1ad2      	subs	r2, r2, r3
 800e072:	9204      	str	r2, [sp, #16]
 800e074:	9a05      	ldr	r2, [sp, #20]
 800e076:	1aed      	subs	r5, r5, r3
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	9305      	str	r3, [sp, #20]
 800e07c:	9b07      	ldr	r3, [sp, #28]
 800e07e:	b31b      	cbz	r3, 800e0c8 <_dtoa_r+0x7a0>
 800e080:	9b08      	ldr	r3, [sp, #32]
 800e082:	2b00      	cmp	r3, #0
 800e084:	f000 80af 	beq.w	800e1e6 <_dtoa_r+0x8be>
 800e088:	2e00      	cmp	r6, #0
 800e08a:	dd13      	ble.n	800e0b4 <_dtoa_r+0x78c>
 800e08c:	4639      	mov	r1, r7
 800e08e:	4632      	mov	r2, r6
 800e090:	4620      	mov	r0, r4
 800e092:	f001 f855 	bl	800f140 <__pow5mult>
 800e096:	ee18 2a10 	vmov	r2, s16
 800e09a:	4601      	mov	r1, r0
 800e09c:	4607      	mov	r7, r0
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f000 ffa4 	bl	800efec <__multiply>
 800e0a4:	ee18 1a10 	vmov	r1, s16
 800e0a8:	4680      	mov	r8, r0
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f000 fe86 	bl	800edbc <_Bfree>
 800e0b0:	ee08 8a10 	vmov	s16, r8
 800e0b4:	9b07      	ldr	r3, [sp, #28]
 800e0b6:	1b9a      	subs	r2, r3, r6
 800e0b8:	d006      	beq.n	800e0c8 <_dtoa_r+0x7a0>
 800e0ba:	ee18 1a10 	vmov	r1, s16
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f001 f83e 	bl	800f140 <__pow5mult>
 800e0c4:	ee08 0a10 	vmov	s16, r0
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 ff78 	bl	800efc0 <__i2b>
 800e0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	f340 8088 	ble.w	800e1ea <_dtoa_r+0x8c2>
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4601      	mov	r1, r0
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f001 f82e 	bl	800f140 <__pow5mult>
 800e0e4:	9b06      	ldr	r3, [sp, #24]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	4606      	mov	r6, r0
 800e0ea:	f340 8081 	ble.w	800e1f0 <_dtoa_r+0x8c8>
 800e0ee:	f04f 0800 	mov.w	r8, #0
 800e0f2:	6933      	ldr	r3, [r6, #16]
 800e0f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e0f8:	6918      	ldr	r0, [r3, #16]
 800e0fa:	f000 ff11 	bl	800ef20 <__hi0bits>
 800e0fe:	f1c0 0020 	rsb	r0, r0, #32
 800e102:	9b05      	ldr	r3, [sp, #20]
 800e104:	4418      	add	r0, r3
 800e106:	f010 001f 	ands.w	r0, r0, #31
 800e10a:	f000 8092 	beq.w	800e232 <_dtoa_r+0x90a>
 800e10e:	f1c0 0320 	rsb	r3, r0, #32
 800e112:	2b04      	cmp	r3, #4
 800e114:	f340 808a 	ble.w	800e22c <_dtoa_r+0x904>
 800e118:	f1c0 001c 	rsb	r0, r0, #28
 800e11c:	9b04      	ldr	r3, [sp, #16]
 800e11e:	4403      	add	r3, r0
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	9b05      	ldr	r3, [sp, #20]
 800e124:	4403      	add	r3, r0
 800e126:	4405      	add	r5, r0
 800e128:	9305      	str	r3, [sp, #20]
 800e12a:	9b04      	ldr	r3, [sp, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	dd07      	ble.n	800e140 <_dtoa_r+0x818>
 800e130:	ee18 1a10 	vmov	r1, s16
 800e134:	461a      	mov	r2, r3
 800e136:	4620      	mov	r0, r4
 800e138:	f001 f85c 	bl	800f1f4 <__lshift>
 800e13c:	ee08 0a10 	vmov	s16, r0
 800e140:	9b05      	ldr	r3, [sp, #20]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dd05      	ble.n	800e152 <_dtoa_r+0x82a>
 800e146:	4631      	mov	r1, r6
 800e148:	461a      	mov	r2, r3
 800e14a:	4620      	mov	r0, r4
 800e14c:	f001 f852 	bl	800f1f4 <__lshift>
 800e150:	4606      	mov	r6, r0
 800e152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e154:	2b00      	cmp	r3, #0
 800e156:	d06e      	beq.n	800e236 <_dtoa_r+0x90e>
 800e158:	ee18 0a10 	vmov	r0, s16
 800e15c:	4631      	mov	r1, r6
 800e15e:	f001 f8b9 	bl	800f2d4 <__mcmp>
 800e162:	2800      	cmp	r0, #0
 800e164:	da67      	bge.n	800e236 <_dtoa_r+0x90e>
 800e166:	9b00      	ldr	r3, [sp, #0]
 800e168:	3b01      	subs	r3, #1
 800e16a:	ee18 1a10 	vmov	r1, s16
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	220a      	movs	r2, #10
 800e172:	2300      	movs	r3, #0
 800e174:	4620      	mov	r0, r4
 800e176:	f000 fe43 	bl	800ee00 <__multadd>
 800e17a:	9b08      	ldr	r3, [sp, #32]
 800e17c:	ee08 0a10 	vmov	s16, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 81b1 	beq.w	800e4e8 <_dtoa_r+0xbc0>
 800e186:	2300      	movs	r3, #0
 800e188:	4639      	mov	r1, r7
 800e18a:	220a      	movs	r2, #10
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 fe37 	bl	800ee00 <__multadd>
 800e192:	9b02      	ldr	r3, [sp, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	4607      	mov	r7, r0
 800e198:	f300 808e 	bgt.w	800e2b8 <_dtoa_r+0x990>
 800e19c:	9b06      	ldr	r3, [sp, #24]
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	dc51      	bgt.n	800e246 <_dtoa_r+0x91e>
 800e1a2:	e089      	b.n	800e2b8 <_dtoa_r+0x990>
 800e1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e1aa:	e74b      	b.n	800e044 <_dtoa_r+0x71c>
 800e1ac:	9b03      	ldr	r3, [sp, #12]
 800e1ae:	1e5e      	subs	r6, r3, #1
 800e1b0:	9b07      	ldr	r3, [sp, #28]
 800e1b2:	42b3      	cmp	r3, r6
 800e1b4:	bfbf      	itttt	lt
 800e1b6:	9b07      	ldrlt	r3, [sp, #28]
 800e1b8:	9607      	strlt	r6, [sp, #28]
 800e1ba:	1af2      	sublt	r2, r6, r3
 800e1bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e1be:	bfb6      	itet	lt
 800e1c0:	189b      	addlt	r3, r3, r2
 800e1c2:	1b9e      	subge	r6, r3, r6
 800e1c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e1c6:	9b03      	ldr	r3, [sp, #12]
 800e1c8:	bfb8      	it	lt
 800e1ca:	2600      	movlt	r6, #0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	bfb7      	itett	lt
 800e1d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e1d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e1d8:	1a9d      	sublt	r5, r3, r2
 800e1da:	2300      	movlt	r3, #0
 800e1dc:	e734      	b.n	800e048 <_dtoa_r+0x720>
 800e1de:	9e07      	ldr	r6, [sp, #28]
 800e1e0:	9d04      	ldr	r5, [sp, #16]
 800e1e2:	9f08      	ldr	r7, [sp, #32]
 800e1e4:	e73b      	b.n	800e05e <_dtoa_r+0x736>
 800e1e6:	9a07      	ldr	r2, [sp, #28]
 800e1e8:	e767      	b.n	800e0ba <_dtoa_r+0x792>
 800e1ea:	9b06      	ldr	r3, [sp, #24]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	dc18      	bgt.n	800e222 <_dtoa_r+0x8fa>
 800e1f0:	f1ba 0f00 	cmp.w	sl, #0
 800e1f4:	d115      	bne.n	800e222 <_dtoa_r+0x8fa>
 800e1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1fa:	b993      	cbnz	r3, 800e222 <_dtoa_r+0x8fa>
 800e1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e200:	0d1b      	lsrs	r3, r3, #20
 800e202:	051b      	lsls	r3, r3, #20
 800e204:	b183      	cbz	r3, 800e228 <_dtoa_r+0x900>
 800e206:	9b04      	ldr	r3, [sp, #16]
 800e208:	3301      	adds	r3, #1
 800e20a:	9304      	str	r3, [sp, #16]
 800e20c:	9b05      	ldr	r3, [sp, #20]
 800e20e:	3301      	adds	r3, #1
 800e210:	9305      	str	r3, [sp, #20]
 800e212:	f04f 0801 	mov.w	r8, #1
 800e216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f47f af6a 	bne.w	800e0f2 <_dtoa_r+0x7ca>
 800e21e:	2001      	movs	r0, #1
 800e220:	e76f      	b.n	800e102 <_dtoa_r+0x7da>
 800e222:	f04f 0800 	mov.w	r8, #0
 800e226:	e7f6      	b.n	800e216 <_dtoa_r+0x8ee>
 800e228:	4698      	mov	r8, r3
 800e22a:	e7f4      	b.n	800e216 <_dtoa_r+0x8ee>
 800e22c:	f43f af7d 	beq.w	800e12a <_dtoa_r+0x802>
 800e230:	4618      	mov	r0, r3
 800e232:	301c      	adds	r0, #28
 800e234:	e772      	b.n	800e11c <_dtoa_r+0x7f4>
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dc37      	bgt.n	800e2ac <_dtoa_r+0x984>
 800e23c:	9b06      	ldr	r3, [sp, #24]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	dd34      	ble.n	800e2ac <_dtoa_r+0x984>
 800e242:	9b03      	ldr	r3, [sp, #12]
 800e244:	9302      	str	r3, [sp, #8]
 800e246:	9b02      	ldr	r3, [sp, #8]
 800e248:	b96b      	cbnz	r3, 800e266 <_dtoa_r+0x93e>
 800e24a:	4631      	mov	r1, r6
 800e24c:	2205      	movs	r2, #5
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 fdd6 	bl	800ee00 <__multadd>
 800e254:	4601      	mov	r1, r0
 800e256:	4606      	mov	r6, r0
 800e258:	ee18 0a10 	vmov	r0, s16
 800e25c:	f001 f83a 	bl	800f2d4 <__mcmp>
 800e260:	2800      	cmp	r0, #0
 800e262:	f73f adbb 	bgt.w	800dddc <_dtoa_r+0x4b4>
 800e266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e268:	9d01      	ldr	r5, [sp, #4]
 800e26a:	43db      	mvns	r3, r3
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	f04f 0800 	mov.w	r8, #0
 800e272:	4631      	mov	r1, r6
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fda1 	bl	800edbc <_Bfree>
 800e27a:	2f00      	cmp	r7, #0
 800e27c:	f43f aea4 	beq.w	800dfc8 <_dtoa_r+0x6a0>
 800e280:	f1b8 0f00 	cmp.w	r8, #0
 800e284:	d005      	beq.n	800e292 <_dtoa_r+0x96a>
 800e286:	45b8      	cmp	r8, r7
 800e288:	d003      	beq.n	800e292 <_dtoa_r+0x96a>
 800e28a:	4641      	mov	r1, r8
 800e28c:	4620      	mov	r0, r4
 800e28e:	f000 fd95 	bl	800edbc <_Bfree>
 800e292:	4639      	mov	r1, r7
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fd91 	bl	800edbc <_Bfree>
 800e29a:	e695      	b.n	800dfc8 <_dtoa_r+0x6a0>
 800e29c:	2600      	movs	r6, #0
 800e29e:	4637      	mov	r7, r6
 800e2a0:	e7e1      	b.n	800e266 <_dtoa_r+0x93e>
 800e2a2:	9700      	str	r7, [sp, #0]
 800e2a4:	4637      	mov	r7, r6
 800e2a6:	e599      	b.n	800dddc <_dtoa_r+0x4b4>
 800e2a8:	40240000 	.word	0x40240000
 800e2ac:	9b08      	ldr	r3, [sp, #32]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 80ca 	beq.w	800e448 <_dtoa_r+0xb20>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	9302      	str	r3, [sp, #8]
 800e2b8:	2d00      	cmp	r5, #0
 800e2ba:	dd05      	ble.n	800e2c8 <_dtoa_r+0x9a0>
 800e2bc:	4639      	mov	r1, r7
 800e2be:	462a      	mov	r2, r5
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f000 ff97 	bl	800f1f4 <__lshift>
 800e2c6:	4607      	mov	r7, r0
 800e2c8:	f1b8 0f00 	cmp.w	r8, #0
 800e2cc:	d05b      	beq.n	800e386 <_dtoa_r+0xa5e>
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f000 fd33 	bl	800ed3c <_Balloc>
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	b928      	cbnz	r0, 800e2e6 <_dtoa_r+0x9be>
 800e2da:	4b87      	ldr	r3, [pc, #540]	; (800e4f8 <_dtoa_r+0xbd0>)
 800e2dc:	4602      	mov	r2, r0
 800e2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e2e2:	f7ff bb3b 	b.w	800d95c <_dtoa_r+0x34>
 800e2e6:	693a      	ldr	r2, [r7, #16]
 800e2e8:	3202      	adds	r2, #2
 800e2ea:	0092      	lsls	r2, r2, #2
 800e2ec:	f107 010c 	add.w	r1, r7, #12
 800e2f0:	300c      	adds	r0, #12
 800e2f2:	f7fd fc11 	bl	800bb18 <memcpy>
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 ff7a 	bl	800f1f4 <__lshift>
 800e300:	9b01      	ldr	r3, [sp, #4]
 800e302:	f103 0901 	add.w	r9, r3, #1
 800e306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e30a:	4413      	add	r3, r2
 800e30c:	9305      	str	r3, [sp, #20]
 800e30e:	f00a 0301 	and.w	r3, sl, #1
 800e312:	46b8      	mov	r8, r7
 800e314:	9304      	str	r3, [sp, #16]
 800e316:	4607      	mov	r7, r0
 800e318:	4631      	mov	r1, r6
 800e31a:	ee18 0a10 	vmov	r0, s16
 800e31e:	f7ff fa75 	bl	800d80c <quorem>
 800e322:	4641      	mov	r1, r8
 800e324:	9002      	str	r0, [sp, #8]
 800e326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e32a:	ee18 0a10 	vmov	r0, s16
 800e32e:	f000 ffd1 	bl	800f2d4 <__mcmp>
 800e332:	463a      	mov	r2, r7
 800e334:	9003      	str	r0, [sp, #12]
 800e336:	4631      	mov	r1, r6
 800e338:	4620      	mov	r0, r4
 800e33a:	f000 ffe7 	bl	800f30c <__mdiff>
 800e33e:	68c2      	ldr	r2, [r0, #12]
 800e340:	f109 3bff 	add.w	fp, r9, #4294967295
 800e344:	4605      	mov	r5, r0
 800e346:	bb02      	cbnz	r2, 800e38a <_dtoa_r+0xa62>
 800e348:	4601      	mov	r1, r0
 800e34a:	ee18 0a10 	vmov	r0, s16
 800e34e:	f000 ffc1 	bl	800f2d4 <__mcmp>
 800e352:	4602      	mov	r2, r0
 800e354:	4629      	mov	r1, r5
 800e356:	4620      	mov	r0, r4
 800e358:	9207      	str	r2, [sp, #28]
 800e35a:	f000 fd2f 	bl	800edbc <_Bfree>
 800e35e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e362:	ea43 0102 	orr.w	r1, r3, r2
 800e366:	9b04      	ldr	r3, [sp, #16]
 800e368:	430b      	orrs	r3, r1
 800e36a:	464d      	mov	r5, r9
 800e36c:	d10f      	bne.n	800e38e <_dtoa_r+0xa66>
 800e36e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e372:	d02a      	beq.n	800e3ca <_dtoa_r+0xaa2>
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	dd02      	ble.n	800e380 <_dtoa_r+0xa58>
 800e37a:	9b02      	ldr	r3, [sp, #8]
 800e37c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e380:	f88b a000 	strb.w	sl, [fp]
 800e384:	e775      	b.n	800e272 <_dtoa_r+0x94a>
 800e386:	4638      	mov	r0, r7
 800e388:	e7ba      	b.n	800e300 <_dtoa_r+0x9d8>
 800e38a:	2201      	movs	r2, #1
 800e38c:	e7e2      	b.n	800e354 <_dtoa_r+0xa2c>
 800e38e:	9b03      	ldr	r3, [sp, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	db04      	blt.n	800e39e <_dtoa_r+0xa76>
 800e394:	9906      	ldr	r1, [sp, #24]
 800e396:	430b      	orrs	r3, r1
 800e398:	9904      	ldr	r1, [sp, #16]
 800e39a:	430b      	orrs	r3, r1
 800e39c:	d122      	bne.n	800e3e4 <_dtoa_r+0xabc>
 800e39e:	2a00      	cmp	r2, #0
 800e3a0:	ddee      	ble.n	800e380 <_dtoa_r+0xa58>
 800e3a2:	ee18 1a10 	vmov	r1, s16
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 ff23 	bl	800f1f4 <__lshift>
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	ee08 0a10 	vmov	s16, r0
 800e3b4:	f000 ff8e 	bl	800f2d4 <__mcmp>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	dc03      	bgt.n	800e3c4 <_dtoa_r+0xa9c>
 800e3bc:	d1e0      	bne.n	800e380 <_dtoa_r+0xa58>
 800e3be:	f01a 0f01 	tst.w	sl, #1
 800e3c2:	d0dd      	beq.n	800e380 <_dtoa_r+0xa58>
 800e3c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e3c8:	d1d7      	bne.n	800e37a <_dtoa_r+0xa52>
 800e3ca:	2339      	movs	r3, #57	; 0x39
 800e3cc:	f88b 3000 	strb.w	r3, [fp]
 800e3d0:	462b      	mov	r3, r5
 800e3d2:	461d      	mov	r5, r3
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e3da:	2a39      	cmp	r2, #57	; 0x39
 800e3dc:	d071      	beq.n	800e4c2 <_dtoa_r+0xb9a>
 800e3de:	3201      	adds	r2, #1
 800e3e0:	701a      	strb	r2, [r3, #0]
 800e3e2:	e746      	b.n	800e272 <_dtoa_r+0x94a>
 800e3e4:	2a00      	cmp	r2, #0
 800e3e6:	dd07      	ble.n	800e3f8 <_dtoa_r+0xad0>
 800e3e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e3ec:	d0ed      	beq.n	800e3ca <_dtoa_r+0xaa2>
 800e3ee:	f10a 0301 	add.w	r3, sl, #1
 800e3f2:	f88b 3000 	strb.w	r3, [fp]
 800e3f6:	e73c      	b.n	800e272 <_dtoa_r+0x94a>
 800e3f8:	9b05      	ldr	r3, [sp, #20]
 800e3fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e3fe:	4599      	cmp	r9, r3
 800e400:	d047      	beq.n	800e492 <_dtoa_r+0xb6a>
 800e402:	ee18 1a10 	vmov	r1, s16
 800e406:	2300      	movs	r3, #0
 800e408:	220a      	movs	r2, #10
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 fcf8 	bl	800ee00 <__multadd>
 800e410:	45b8      	cmp	r8, r7
 800e412:	ee08 0a10 	vmov	s16, r0
 800e416:	f04f 0300 	mov.w	r3, #0
 800e41a:	f04f 020a 	mov.w	r2, #10
 800e41e:	4641      	mov	r1, r8
 800e420:	4620      	mov	r0, r4
 800e422:	d106      	bne.n	800e432 <_dtoa_r+0xb0a>
 800e424:	f000 fcec 	bl	800ee00 <__multadd>
 800e428:	4680      	mov	r8, r0
 800e42a:	4607      	mov	r7, r0
 800e42c:	f109 0901 	add.w	r9, r9, #1
 800e430:	e772      	b.n	800e318 <_dtoa_r+0x9f0>
 800e432:	f000 fce5 	bl	800ee00 <__multadd>
 800e436:	4639      	mov	r1, r7
 800e438:	4680      	mov	r8, r0
 800e43a:	2300      	movs	r3, #0
 800e43c:	220a      	movs	r2, #10
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fcde 	bl	800ee00 <__multadd>
 800e444:	4607      	mov	r7, r0
 800e446:	e7f1      	b.n	800e42c <_dtoa_r+0xb04>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	9302      	str	r3, [sp, #8]
 800e44c:	9d01      	ldr	r5, [sp, #4]
 800e44e:	ee18 0a10 	vmov	r0, s16
 800e452:	4631      	mov	r1, r6
 800e454:	f7ff f9da 	bl	800d80c <quorem>
 800e458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e45c:	9b01      	ldr	r3, [sp, #4]
 800e45e:	f805 ab01 	strb.w	sl, [r5], #1
 800e462:	1aea      	subs	r2, r5, r3
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	4293      	cmp	r3, r2
 800e468:	dd09      	ble.n	800e47e <_dtoa_r+0xb56>
 800e46a:	ee18 1a10 	vmov	r1, s16
 800e46e:	2300      	movs	r3, #0
 800e470:	220a      	movs	r2, #10
 800e472:	4620      	mov	r0, r4
 800e474:	f000 fcc4 	bl	800ee00 <__multadd>
 800e478:	ee08 0a10 	vmov	s16, r0
 800e47c:	e7e7      	b.n	800e44e <_dtoa_r+0xb26>
 800e47e:	9b02      	ldr	r3, [sp, #8]
 800e480:	2b00      	cmp	r3, #0
 800e482:	bfc8      	it	gt
 800e484:	461d      	movgt	r5, r3
 800e486:	9b01      	ldr	r3, [sp, #4]
 800e488:	bfd8      	it	le
 800e48a:	2501      	movle	r5, #1
 800e48c:	441d      	add	r5, r3
 800e48e:	f04f 0800 	mov.w	r8, #0
 800e492:	ee18 1a10 	vmov	r1, s16
 800e496:	2201      	movs	r2, #1
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 feab 	bl	800f1f4 <__lshift>
 800e49e:	4631      	mov	r1, r6
 800e4a0:	ee08 0a10 	vmov	s16, r0
 800e4a4:	f000 ff16 	bl	800f2d4 <__mcmp>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	dc91      	bgt.n	800e3d0 <_dtoa_r+0xaa8>
 800e4ac:	d102      	bne.n	800e4b4 <_dtoa_r+0xb8c>
 800e4ae:	f01a 0f01 	tst.w	sl, #1
 800e4b2:	d18d      	bne.n	800e3d0 <_dtoa_r+0xaa8>
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	461d      	mov	r5, r3
 800e4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4bc:	2a30      	cmp	r2, #48	; 0x30
 800e4be:	d0fa      	beq.n	800e4b6 <_dtoa_r+0xb8e>
 800e4c0:	e6d7      	b.n	800e272 <_dtoa_r+0x94a>
 800e4c2:	9a01      	ldr	r2, [sp, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d184      	bne.n	800e3d2 <_dtoa_r+0xaaa>
 800e4c8:	9b00      	ldr	r3, [sp, #0]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	9300      	str	r3, [sp, #0]
 800e4ce:	2331      	movs	r3, #49	; 0x31
 800e4d0:	7013      	strb	r3, [r2, #0]
 800e4d2:	e6ce      	b.n	800e272 <_dtoa_r+0x94a>
 800e4d4:	4b09      	ldr	r3, [pc, #36]	; (800e4fc <_dtoa_r+0xbd4>)
 800e4d6:	f7ff ba95 	b.w	800da04 <_dtoa_r+0xdc>
 800e4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f47f aa6e 	bne.w	800d9be <_dtoa_r+0x96>
 800e4e2:	4b07      	ldr	r3, [pc, #28]	; (800e500 <_dtoa_r+0xbd8>)
 800e4e4:	f7ff ba8e 	b.w	800da04 <_dtoa_r+0xdc>
 800e4e8:	9b02      	ldr	r3, [sp, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dcae      	bgt.n	800e44c <_dtoa_r+0xb24>
 800e4ee:	9b06      	ldr	r3, [sp, #24]
 800e4f0:	2b02      	cmp	r3, #2
 800e4f2:	f73f aea8 	bgt.w	800e246 <_dtoa_r+0x91e>
 800e4f6:	e7a9      	b.n	800e44c <_dtoa_r+0xb24>
 800e4f8:	08010e64 	.word	0x08010e64
 800e4fc:	08010cd8 	.word	0x08010cd8
 800e500:	08010dfc 	.word	0x08010dfc

0800e504 <fiprintf>:
 800e504:	b40e      	push	{r1, r2, r3}
 800e506:	b503      	push	{r0, r1, lr}
 800e508:	4601      	mov	r1, r0
 800e50a:	ab03      	add	r3, sp, #12
 800e50c:	4805      	ldr	r0, [pc, #20]	; (800e524 <fiprintf+0x20>)
 800e50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e512:	6800      	ldr	r0, [r0, #0]
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	f001 fa9d 	bl	800fa54 <_vfiprintf_r>
 800e51a:	b002      	add	sp, #8
 800e51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e520:	b003      	add	sp, #12
 800e522:	4770      	bx	lr
 800e524:	2000001c 	.word	0x2000001c

0800e528 <rshift>:
 800e528:	6903      	ldr	r3, [r0, #16]
 800e52a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e532:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e536:	f100 0414 	add.w	r4, r0, #20
 800e53a:	dd45      	ble.n	800e5c8 <rshift+0xa0>
 800e53c:	f011 011f 	ands.w	r1, r1, #31
 800e540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e548:	d10c      	bne.n	800e564 <rshift+0x3c>
 800e54a:	f100 0710 	add.w	r7, r0, #16
 800e54e:	4629      	mov	r1, r5
 800e550:	42b1      	cmp	r1, r6
 800e552:	d334      	bcc.n	800e5be <rshift+0x96>
 800e554:	1a9b      	subs	r3, r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	1eea      	subs	r2, r5, #3
 800e55a:	4296      	cmp	r6, r2
 800e55c:	bf38      	it	cc
 800e55e:	2300      	movcc	r3, #0
 800e560:	4423      	add	r3, r4
 800e562:	e015      	b.n	800e590 <rshift+0x68>
 800e564:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e568:	f1c1 0820 	rsb	r8, r1, #32
 800e56c:	40cf      	lsrs	r7, r1
 800e56e:	f105 0e04 	add.w	lr, r5, #4
 800e572:	46a1      	mov	r9, r4
 800e574:	4576      	cmp	r6, lr
 800e576:	46f4      	mov	ip, lr
 800e578:	d815      	bhi.n	800e5a6 <rshift+0x7e>
 800e57a:	1a9a      	subs	r2, r3, r2
 800e57c:	0092      	lsls	r2, r2, #2
 800e57e:	3a04      	subs	r2, #4
 800e580:	3501      	adds	r5, #1
 800e582:	42ae      	cmp	r6, r5
 800e584:	bf38      	it	cc
 800e586:	2200      	movcc	r2, #0
 800e588:	18a3      	adds	r3, r4, r2
 800e58a:	50a7      	str	r7, [r4, r2]
 800e58c:	b107      	cbz	r7, 800e590 <rshift+0x68>
 800e58e:	3304      	adds	r3, #4
 800e590:	1b1a      	subs	r2, r3, r4
 800e592:	42a3      	cmp	r3, r4
 800e594:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e598:	bf08      	it	eq
 800e59a:	2300      	moveq	r3, #0
 800e59c:	6102      	str	r2, [r0, #16]
 800e59e:	bf08      	it	eq
 800e5a0:	6143      	streq	r3, [r0, #20]
 800e5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5a6:	f8dc c000 	ldr.w	ip, [ip]
 800e5aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800e5ae:	ea4c 0707 	orr.w	r7, ip, r7
 800e5b2:	f849 7b04 	str.w	r7, [r9], #4
 800e5b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5ba:	40cf      	lsrs	r7, r1
 800e5bc:	e7da      	b.n	800e574 <rshift+0x4c>
 800e5be:	f851 cb04 	ldr.w	ip, [r1], #4
 800e5c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e5c6:	e7c3      	b.n	800e550 <rshift+0x28>
 800e5c8:	4623      	mov	r3, r4
 800e5ca:	e7e1      	b.n	800e590 <rshift+0x68>

0800e5cc <__hexdig_fun>:
 800e5cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e5d0:	2b09      	cmp	r3, #9
 800e5d2:	d802      	bhi.n	800e5da <__hexdig_fun+0xe>
 800e5d4:	3820      	subs	r0, #32
 800e5d6:	b2c0      	uxtb	r0, r0
 800e5d8:	4770      	bx	lr
 800e5da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e5de:	2b05      	cmp	r3, #5
 800e5e0:	d801      	bhi.n	800e5e6 <__hexdig_fun+0x1a>
 800e5e2:	3847      	subs	r0, #71	; 0x47
 800e5e4:	e7f7      	b.n	800e5d6 <__hexdig_fun+0xa>
 800e5e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e5ea:	2b05      	cmp	r3, #5
 800e5ec:	d801      	bhi.n	800e5f2 <__hexdig_fun+0x26>
 800e5ee:	3827      	subs	r0, #39	; 0x27
 800e5f0:	e7f1      	b.n	800e5d6 <__hexdig_fun+0xa>
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	4770      	bx	lr
	...

0800e5f8 <__gethex>:
 800e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5fc:	ed2d 8b02 	vpush	{d8}
 800e600:	b089      	sub	sp, #36	; 0x24
 800e602:	ee08 0a10 	vmov	s16, r0
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	4bb4      	ldr	r3, [pc, #720]	; (800e8dc <__gethex+0x2e4>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	4618      	mov	r0, r3
 800e610:	468b      	mov	fp, r1
 800e612:	4690      	mov	r8, r2
 800e614:	f7f1 fdee 	bl	80001f4 <strlen>
 800e618:	9b01      	ldr	r3, [sp, #4]
 800e61a:	f8db 2000 	ldr.w	r2, [fp]
 800e61e:	4403      	add	r3, r0
 800e620:	4682      	mov	sl, r0
 800e622:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e626:	9305      	str	r3, [sp, #20]
 800e628:	1c93      	adds	r3, r2, #2
 800e62a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e62e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e632:	32fe      	adds	r2, #254	; 0xfe
 800e634:	18d1      	adds	r1, r2, r3
 800e636:	461f      	mov	r7, r3
 800e638:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e63c:	9100      	str	r1, [sp, #0]
 800e63e:	2830      	cmp	r0, #48	; 0x30
 800e640:	d0f8      	beq.n	800e634 <__gethex+0x3c>
 800e642:	f7ff ffc3 	bl	800e5cc <__hexdig_fun>
 800e646:	4604      	mov	r4, r0
 800e648:	2800      	cmp	r0, #0
 800e64a:	d13a      	bne.n	800e6c2 <__gethex+0xca>
 800e64c:	9901      	ldr	r1, [sp, #4]
 800e64e:	4652      	mov	r2, sl
 800e650:	4638      	mov	r0, r7
 800e652:	f7fe f96f 	bl	800c934 <strncmp>
 800e656:	4605      	mov	r5, r0
 800e658:	2800      	cmp	r0, #0
 800e65a:	d168      	bne.n	800e72e <__gethex+0x136>
 800e65c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e660:	eb07 060a 	add.w	r6, r7, sl
 800e664:	f7ff ffb2 	bl	800e5cc <__hexdig_fun>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d062      	beq.n	800e732 <__gethex+0x13a>
 800e66c:	4633      	mov	r3, r6
 800e66e:	7818      	ldrb	r0, [r3, #0]
 800e670:	2830      	cmp	r0, #48	; 0x30
 800e672:	461f      	mov	r7, r3
 800e674:	f103 0301 	add.w	r3, r3, #1
 800e678:	d0f9      	beq.n	800e66e <__gethex+0x76>
 800e67a:	f7ff ffa7 	bl	800e5cc <__hexdig_fun>
 800e67e:	2301      	movs	r3, #1
 800e680:	fab0 f480 	clz	r4, r0
 800e684:	0964      	lsrs	r4, r4, #5
 800e686:	4635      	mov	r5, r6
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	463a      	mov	r2, r7
 800e68c:	4616      	mov	r6, r2
 800e68e:	3201      	adds	r2, #1
 800e690:	7830      	ldrb	r0, [r6, #0]
 800e692:	f7ff ff9b 	bl	800e5cc <__hexdig_fun>
 800e696:	2800      	cmp	r0, #0
 800e698:	d1f8      	bne.n	800e68c <__gethex+0x94>
 800e69a:	9901      	ldr	r1, [sp, #4]
 800e69c:	4652      	mov	r2, sl
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f7fe f948 	bl	800c934 <strncmp>
 800e6a4:	b980      	cbnz	r0, 800e6c8 <__gethex+0xd0>
 800e6a6:	b94d      	cbnz	r5, 800e6bc <__gethex+0xc4>
 800e6a8:	eb06 050a 	add.w	r5, r6, sl
 800e6ac:	462a      	mov	r2, r5
 800e6ae:	4616      	mov	r6, r2
 800e6b0:	3201      	adds	r2, #1
 800e6b2:	7830      	ldrb	r0, [r6, #0]
 800e6b4:	f7ff ff8a 	bl	800e5cc <__hexdig_fun>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d1f8      	bne.n	800e6ae <__gethex+0xb6>
 800e6bc:	1bad      	subs	r5, r5, r6
 800e6be:	00ad      	lsls	r5, r5, #2
 800e6c0:	e004      	b.n	800e6cc <__gethex+0xd4>
 800e6c2:	2400      	movs	r4, #0
 800e6c4:	4625      	mov	r5, r4
 800e6c6:	e7e0      	b.n	800e68a <__gethex+0x92>
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	d1f7      	bne.n	800e6bc <__gethex+0xc4>
 800e6cc:	7833      	ldrb	r3, [r6, #0]
 800e6ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6d2:	2b50      	cmp	r3, #80	; 0x50
 800e6d4:	d13b      	bne.n	800e74e <__gethex+0x156>
 800e6d6:	7873      	ldrb	r3, [r6, #1]
 800e6d8:	2b2b      	cmp	r3, #43	; 0x2b
 800e6da:	d02c      	beq.n	800e736 <__gethex+0x13e>
 800e6dc:	2b2d      	cmp	r3, #45	; 0x2d
 800e6de:	d02e      	beq.n	800e73e <__gethex+0x146>
 800e6e0:	1c71      	adds	r1, r6, #1
 800e6e2:	f04f 0900 	mov.w	r9, #0
 800e6e6:	7808      	ldrb	r0, [r1, #0]
 800e6e8:	f7ff ff70 	bl	800e5cc <__hexdig_fun>
 800e6ec:	1e43      	subs	r3, r0, #1
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b18      	cmp	r3, #24
 800e6f2:	d82c      	bhi.n	800e74e <__gethex+0x156>
 800e6f4:	f1a0 0210 	sub.w	r2, r0, #16
 800e6f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e6fc:	f7ff ff66 	bl	800e5cc <__hexdig_fun>
 800e700:	1e43      	subs	r3, r0, #1
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b18      	cmp	r3, #24
 800e706:	d91d      	bls.n	800e744 <__gethex+0x14c>
 800e708:	f1b9 0f00 	cmp.w	r9, #0
 800e70c:	d000      	beq.n	800e710 <__gethex+0x118>
 800e70e:	4252      	negs	r2, r2
 800e710:	4415      	add	r5, r2
 800e712:	f8cb 1000 	str.w	r1, [fp]
 800e716:	b1e4      	cbz	r4, 800e752 <__gethex+0x15a>
 800e718:	9b00      	ldr	r3, [sp, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	bf14      	ite	ne
 800e71e:	2700      	movne	r7, #0
 800e720:	2706      	moveq	r7, #6
 800e722:	4638      	mov	r0, r7
 800e724:	b009      	add	sp, #36	; 0x24
 800e726:	ecbd 8b02 	vpop	{d8}
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	463e      	mov	r6, r7
 800e730:	4625      	mov	r5, r4
 800e732:	2401      	movs	r4, #1
 800e734:	e7ca      	b.n	800e6cc <__gethex+0xd4>
 800e736:	f04f 0900 	mov.w	r9, #0
 800e73a:	1cb1      	adds	r1, r6, #2
 800e73c:	e7d3      	b.n	800e6e6 <__gethex+0xee>
 800e73e:	f04f 0901 	mov.w	r9, #1
 800e742:	e7fa      	b.n	800e73a <__gethex+0x142>
 800e744:	230a      	movs	r3, #10
 800e746:	fb03 0202 	mla	r2, r3, r2, r0
 800e74a:	3a10      	subs	r2, #16
 800e74c:	e7d4      	b.n	800e6f8 <__gethex+0x100>
 800e74e:	4631      	mov	r1, r6
 800e750:	e7df      	b.n	800e712 <__gethex+0x11a>
 800e752:	1bf3      	subs	r3, r6, r7
 800e754:	3b01      	subs	r3, #1
 800e756:	4621      	mov	r1, r4
 800e758:	2b07      	cmp	r3, #7
 800e75a:	dc0b      	bgt.n	800e774 <__gethex+0x17c>
 800e75c:	ee18 0a10 	vmov	r0, s16
 800e760:	f000 faec 	bl	800ed3c <_Balloc>
 800e764:	4604      	mov	r4, r0
 800e766:	b940      	cbnz	r0, 800e77a <__gethex+0x182>
 800e768:	4b5d      	ldr	r3, [pc, #372]	; (800e8e0 <__gethex+0x2e8>)
 800e76a:	4602      	mov	r2, r0
 800e76c:	21de      	movs	r1, #222	; 0xde
 800e76e:	485d      	ldr	r0, [pc, #372]	; (800e8e4 <__gethex+0x2ec>)
 800e770:	f7ff f81e 	bl	800d7b0 <__assert_func>
 800e774:	3101      	adds	r1, #1
 800e776:	105b      	asrs	r3, r3, #1
 800e778:	e7ee      	b.n	800e758 <__gethex+0x160>
 800e77a:	f100 0914 	add.w	r9, r0, #20
 800e77e:	f04f 0b00 	mov.w	fp, #0
 800e782:	f1ca 0301 	rsb	r3, sl, #1
 800e786:	f8cd 9008 	str.w	r9, [sp, #8]
 800e78a:	f8cd b000 	str.w	fp, [sp]
 800e78e:	9306      	str	r3, [sp, #24]
 800e790:	42b7      	cmp	r7, r6
 800e792:	d340      	bcc.n	800e816 <__gethex+0x21e>
 800e794:	9802      	ldr	r0, [sp, #8]
 800e796:	9b00      	ldr	r3, [sp, #0]
 800e798:	f840 3b04 	str.w	r3, [r0], #4
 800e79c:	eba0 0009 	sub.w	r0, r0, r9
 800e7a0:	1080      	asrs	r0, r0, #2
 800e7a2:	0146      	lsls	r6, r0, #5
 800e7a4:	6120      	str	r0, [r4, #16]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 fbba 	bl	800ef20 <__hi0bits>
 800e7ac:	1a30      	subs	r0, r6, r0
 800e7ae:	f8d8 6000 	ldr.w	r6, [r8]
 800e7b2:	42b0      	cmp	r0, r6
 800e7b4:	dd63      	ble.n	800e87e <__gethex+0x286>
 800e7b6:	1b87      	subs	r7, r0, r6
 800e7b8:	4639      	mov	r1, r7
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 ff5e 	bl	800f67c <__any_on>
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	b1a8      	cbz	r0, 800e7f0 <__gethex+0x1f8>
 800e7c4:	1e7b      	subs	r3, r7, #1
 800e7c6:	1159      	asrs	r1, r3, #5
 800e7c8:	f003 021f 	and.w	r2, r3, #31
 800e7cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e7d0:	f04f 0a01 	mov.w	sl, #1
 800e7d4:	fa0a f202 	lsl.w	r2, sl, r2
 800e7d8:	420a      	tst	r2, r1
 800e7da:	d009      	beq.n	800e7f0 <__gethex+0x1f8>
 800e7dc:	4553      	cmp	r3, sl
 800e7de:	dd05      	ble.n	800e7ec <__gethex+0x1f4>
 800e7e0:	1eb9      	subs	r1, r7, #2
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 ff4a 	bl	800f67c <__any_on>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d145      	bne.n	800e878 <__gethex+0x280>
 800e7ec:	f04f 0a02 	mov.w	sl, #2
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f7ff fe98 	bl	800e528 <rshift>
 800e7f8:	443d      	add	r5, r7
 800e7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7fe:	42ab      	cmp	r3, r5
 800e800:	da4c      	bge.n	800e89c <__gethex+0x2a4>
 800e802:	ee18 0a10 	vmov	r0, s16
 800e806:	4621      	mov	r1, r4
 800e808:	f000 fad8 	bl	800edbc <_Bfree>
 800e80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e80e:	2300      	movs	r3, #0
 800e810:	6013      	str	r3, [r2, #0]
 800e812:	27a3      	movs	r7, #163	; 0xa3
 800e814:	e785      	b.n	800e722 <__gethex+0x12a>
 800e816:	1e73      	subs	r3, r6, #1
 800e818:	9a05      	ldr	r2, [sp, #20]
 800e81a:	9303      	str	r3, [sp, #12]
 800e81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e820:	4293      	cmp	r3, r2
 800e822:	d019      	beq.n	800e858 <__gethex+0x260>
 800e824:	f1bb 0f20 	cmp.w	fp, #32
 800e828:	d107      	bne.n	800e83a <__gethex+0x242>
 800e82a:	9b02      	ldr	r3, [sp, #8]
 800e82c:	9a00      	ldr	r2, [sp, #0]
 800e82e:	f843 2b04 	str.w	r2, [r3], #4
 800e832:	9302      	str	r3, [sp, #8]
 800e834:	2300      	movs	r3, #0
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	469b      	mov	fp, r3
 800e83a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e83e:	f7ff fec5 	bl	800e5cc <__hexdig_fun>
 800e842:	9b00      	ldr	r3, [sp, #0]
 800e844:	f000 000f 	and.w	r0, r0, #15
 800e848:	fa00 f00b 	lsl.w	r0, r0, fp
 800e84c:	4303      	orrs	r3, r0
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	f10b 0b04 	add.w	fp, fp, #4
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	e00d      	b.n	800e874 <__gethex+0x27c>
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	9a06      	ldr	r2, [sp, #24]
 800e85c:	4413      	add	r3, r2
 800e85e:	42bb      	cmp	r3, r7
 800e860:	d3e0      	bcc.n	800e824 <__gethex+0x22c>
 800e862:	4618      	mov	r0, r3
 800e864:	9901      	ldr	r1, [sp, #4]
 800e866:	9307      	str	r3, [sp, #28]
 800e868:	4652      	mov	r2, sl
 800e86a:	f7fe f863 	bl	800c934 <strncmp>
 800e86e:	9b07      	ldr	r3, [sp, #28]
 800e870:	2800      	cmp	r0, #0
 800e872:	d1d7      	bne.n	800e824 <__gethex+0x22c>
 800e874:	461e      	mov	r6, r3
 800e876:	e78b      	b.n	800e790 <__gethex+0x198>
 800e878:	f04f 0a03 	mov.w	sl, #3
 800e87c:	e7b8      	b.n	800e7f0 <__gethex+0x1f8>
 800e87e:	da0a      	bge.n	800e896 <__gethex+0x29e>
 800e880:	1a37      	subs	r7, r6, r0
 800e882:	4621      	mov	r1, r4
 800e884:	ee18 0a10 	vmov	r0, s16
 800e888:	463a      	mov	r2, r7
 800e88a:	f000 fcb3 	bl	800f1f4 <__lshift>
 800e88e:	1bed      	subs	r5, r5, r7
 800e890:	4604      	mov	r4, r0
 800e892:	f100 0914 	add.w	r9, r0, #20
 800e896:	f04f 0a00 	mov.w	sl, #0
 800e89a:	e7ae      	b.n	800e7fa <__gethex+0x202>
 800e89c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e8a0:	42a8      	cmp	r0, r5
 800e8a2:	dd72      	ble.n	800e98a <__gethex+0x392>
 800e8a4:	1b45      	subs	r5, r0, r5
 800e8a6:	42ae      	cmp	r6, r5
 800e8a8:	dc36      	bgt.n	800e918 <__gethex+0x320>
 800e8aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d02a      	beq.n	800e908 <__gethex+0x310>
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d02c      	beq.n	800e910 <__gethex+0x318>
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d11c      	bne.n	800e8f4 <__gethex+0x2fc>
 800e8ba:	42ae      	cmp	r6, r5
 800e8bc:	d11a      	bne.n	800e8f4 <__gethex+0x2fc>
 800e8be:	2e01      	cmp	r6, #1
 800e8c0:	d112      	bne.n	800e8e8 <__gethex+0x2f0>
 800e8c2:	9a04      	ldr	r2, [sp, #16]
 800e8c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8c8:	6013      	str	r3, [r2, #0]
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	6123      	str	r3, [r4, #16]
 800e8ce:	f8c9 3000 	str.w	r3, [r9]
 800e8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8d4:	2762      	movs	r7, #98	; 0x62
 800e8d6:	601c      	str	r4, [r3, #0]
 800e8d8:	e723      	b.n	800e722 <__gethex+0x12a>
 800e8da:	bf00      	nop
 800e8dc:	08010edc 	.word	0x08010edc
 800e8e0:	08010e64 	.word	0x08010e64
 800e8e4:	08010e75 	.word	0x08010e75
 800e8e8:	1e71      	subs	r1, r6, #1
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 fec6 	bl	800f67c <__any_on>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1e6      	bne.n	800e8c2 <__gethex+0x2ca>
 800e8f4:	ee18 0a10 	vmov	r0, s16
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	f000 fa5f 	bl	800edbc <_Bfree>
 800e8fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e900:	2300      	movs	r3, #0
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	2750      	movs	r7, #80	; 0x50
 800e906:	e70c      	b.n	800e722 <__gethex+0x12a>
 800e908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1f2      	bne.n	800e8f4 <__gethex+0x2fc>
 800e90e:	e7d8      	b.n	800e8c2 <__gethex+0x2ca>
 800e910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1d5      	bne.n	800e8c2 <__gethex+0x2ca>
 800e916:	e7ed      	b.n	800e8f4 <__gethex+0x2fc>
 800e918:	1e6f      	subs	r7, r5, #1
 800e91a:	f1ba 0f00 	cmp.w	sl, #0
 800e91e:	d131      	bne.n	800e984 <__gethex+0x38c>
 800e920:	b127      	cbz	r7, 800e92c <__gethex+0x334>
 800e922:	4639      	mov	r1, r7
 800e924:	4620      	mov	r0, r4
 800e926:	f000 fea9 	bl	800f67c <__any_on>
 800e92a:	4682      	mov	sl, r0
 800e92c:	117b      	asrs	r3, r7, #5
 800e92e:	2101      	movs	r1, #1
 800e930:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e934:	f007 071f 	and.w	r7, r7, #31
 800e938:	fa01 f707 	lsl.w	r7, r1, r7
 800e93c:	421f      	tst	r7, r3
 800e93e:	4629      	mov	r1, r5
 800e940:	4620      	mov	r0, r4
 800e942:	bf18      	it	ne
 800e944:	f04a 0a02 	orrne.w	sl, sl, #2
 800e948:	1b76      	subs	r6, r6, r5
 800e94a:	f7ff fded 	bl	800e528 <rshift>
 800e94e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e952:	2702      	movs	r7, #2
 800e954:	f1ba 0f00 	cmp.w	sl, #0
 800e958:	d048      	beq.n	800e9ec <__gethex+0x3f4>
 800e95a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d015      	beq.n	800e98e <__gethex+0x396>
 800e962:	2b03      	cmp	r3, #3
 800e964:	d017      	beq.n	800e996 <__gethex+0x39e>
 800e966:	2b01      	cmp	r3, #1
 800e968:	d109      	bne.n	800e97e <__gethex+0x386>
 800e96a:	f01a 0f02 	tst.w	sl, #2
 800e96e:	d006      	beq.n	800e97e <__gethex+0x386>
 800e970:	f8d9 0000 	ldr.w	r0, [r9]
 800e974:	ea4a 0a00 	orr.w	sl, sl, r0
 800e978:	f01a 0f01 	tst.w	sl, #1
 800e97c:	d10e      	bne.n	800e99c <__gethex+0x3a4>
 800e97e:	f047 0710 	orr.w	r7, r7, #16
 800e982:	e033      	b.n	800e9ec <__gethex+0x3f4>
 800e984:	f04f 0a01 	mov.w	sl, #1
 800e988:	e7d0      	b.n	800e92c <__gethex+0x334>
 800e98a:	2701      	movs	r7, #1
 800e98c:	e7e2      	b.n	800e954 <__gethex+0x35c>
 800e98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e990:	f1c3 0301 	rsb	r3, r3, #1
 800e994:	9315      	str	r3, [sp, #84]	; 0x54
 800e996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d0f0      	beq.n	800e97e <__gethex+0x386>
 800e99c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e9a0:	f104 0314 	add.w	r3, r4, #20
 800e9a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9ac:	f04f 0c00 	mov.w	ip, #0
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9ba:	d01c      	beq.n	800e9f6 <__gethex+0x3fe>
 800e9bc:	3201      	adds	r2, #1
 800e9be:	6002      	str	r2, [r0, #0]
 800e9c0:	2f02      	cmp	r7, #2
 800e9c2:	f104 0314 	add.w	r3, r4, #20
 800e9c6:	d13f      	bne.n	800ea48 <__gethex+0x450>
 800e9c8:	f8d8 2000 	ldr.w	r2, [r8]
 800e9cc:	3a01      	subs	r2, #1
 800e9ce:	42b2      	cmp	r2, r6
 800e9d0:	d10a      	bne.n	800e9e8 <__gethex+0x3f0>
 800e9d2:	1171      	asrs	r1, r6, #5
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9da:	f006 061f 	and.w	r6, r6, #31
 800e9de:	fa02 f606 	lsl.w	r6, r2, r6
 800e9e2:	421e      	tst	r6, r3
 800e9e4:	bf18      	it	ne
 800e9e6:	4617      	movne	r7, r2
 800e9e8:	f047 0720 	orr.w	r7, r7, #32
 800e9ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9ee:	601c      	str	r4, [r3, #0]
 800e9f0:	9b04      	ldr	r3, [sp, #16]
 800e9f2:	601d      	str	r5, [r3, #0]
 800e9f4:	e695      	b.n	800e722 <__gethex+0x12a>
 800e9f6:	4299      	cmp	r1, r3
 800e9f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9fc:	d8d8      	bhi.n	800e9b0 <__gethex+0x3b8>
 800e9fe:	68a3      	ldr	r3, [r4, #8]
 800ea00:	459b      	cmp	fp, r3
 800ea02:	db19      	blt.n	800ea38 <__gethex+0x440>
 800ea04:	6861      	ldr	r1, [r4, #4]
 800ea06:	ee18 0a10 	vmov	r0, s16
 800ea0a:	3101      	adds	r1, #1
 800ea0c:	f000 f996 	bl	800ed3c <_Balloc>
 800ea10:	4681      	mov	r9, r0
 800ea12:	b918      	cbnz	r0, 800ea1c <__gethex+0x424>
 800ea14:	4b1a      	ldr	r3, [pc, #104]	; (800ea80 <__gethex+0x488>)
 800ea16:	4602      	mov	r2, r0
 800ea18:	2184      	movs	r1, #132	; 0x84
 800ea1a:	e6a8      	b.n	800e76e <__gethex+0x176>
 800ea1c:	6922      	ldr	r2, [r4, #16]
 800ea1e:	3202      	adds	r2, #2
 800ea20:	f104 010c 	add.w	r1, r4, #12
 800ea24:	0092      	lsls	r2, r2, #2
 800ea26:	300c      	adds	r0, #12
 800ea28:	f7fd f876 	bl	800bb18 <memcpy>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	ee18 0a10 	vmov	r0, s16
 800ea32:	f000 f9c3 	bl	800edbc <_Bfree>
 800ea36:	464c      	mov	r4, r9
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea40:	6122      	str	r2, [r4, #16]
 800ea42:	2201      	movs	r2, #1
 800ea44:	615a      	str	r2, [r3, #20]
 800ea46:	e7bb      	b.n	800e9c0 <__gethex+0x3c8>
 800ea48:	6922      	ldr	r2, [r4, #16]
 800ea4a:	455a      	cmp	r2, fp
 800ea4c:	dd0b      	ble.n	800ea66 <__gethex+0x46e>
 800ea4e:	2101      	movs	r1, #1
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff fd69 	bl	800e528 <rshift>
 800ea56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea5a:	3501      	adds	r5, #1
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	f6ff aed0 	blt.w	800e802 <__gethex+0x20a>
 800ea62:	2701      	movs	r7, #1
 800ea64:	e7c0      	b.n	800e9e8 <__gethex+0x3f0>
 800ea66:	f016 061f 	ands.w	r6, r6, #31
 800ea6a:	d0fa      	beq.n	800ea62 <__gethex+0x46a>
 800ea6c:	4453      	add	r3, sl
 800ea6e:	f1c6 0620 	rsb	r6, r6, #32
 800ea72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea76:	f000 fa53 	bl	800ef20 <__hi0bits>
 800ea7a:	42b0      	cmp	r0, r6
 800ea7c:	dbe7      	blt.n	800ea4e <__gethex+0x456>
 800ea7e:	e7f0      	b.n	800ea62 <__gethex+0x46a>
 800ea80:	08010e64 	.word	0x08010e64

0800ea84 <L_shift>:
 800ea84:	f1c2 0208 	rsb	r2, r2, #8
 800ea88:	0092      	lsls	r2, r2, #2
 800ea8a:	b570      	push	{r4, r5, r6, lr}
 800ea8c:	f1c2 0620 	rsb	r6, r2, #32
 800ea90:	6843      	ldr	r3, [r0, #4]
 800ea92:	6804      	ldr	r4, [r0, #0]
 800ea94:	fa03 f506 	lsl.w	r5, r3, r6
 800ea98:	432c      	orrs	r4, r5
 800ea9a:	40d3      	lsrs	r3, r2
 800ea9c:	6004      	str	r4, [r0, #0]
 800ea9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eaa2:	4288      	cmp	r0, r1
 800eaa4:	d3f4      	bcc.n	800ea90 <L_shift+0xc>
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}

0800eaa8 <__match>:
 800eaa8:	b530      	push	{r4, r5, lr}
 800eaaa:	6803      	ldr	r3, [r0, #0]
 800eaac:	3301      	adds	r3, #1
 800eaae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eab2:	b914      	cbnz	r4, 800eaba <__match+0x12>
 800eab4:	6003      	str	r3, [r0, #0]
 800eab6:	2001      	movs	r0, #1
 800eab8:	bd30      	pop	{r4, r5, pc}
 800eaba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eac2:	2d19      	cmp	r5, #25
 800eac4:	bf98      	it	ls
 800eac6:	3220      	addls	r2, #32
 800eac8:	42a2      	cmp	r2, r4
 800eaca:	d0f0      	beq.n	800eaae <__match+0x6>
 800eacc:	2000      	movs	r0, #0
 800eace:	e7f3      	b.n	800eab8 <__match+0x10>

0800ead0 <__hexnan>:
 800ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	680b      	ldr	r3, [r1, #0]
 800ead6:	115e      	asrs	r6, r3, #5
 800ead8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eadc:	f013 031f 	ands.w	r3, r3, #31
 800eae0:	b087      	sub	sp, #28
 800eae2:	bf18      	it	ne
 800eae4:	3604      	addne	r6, #4
 800eae6:	2500      	movs	r5, #0
 800eae8:	1f37      	subs	r7, r6, #4
 800eaea:	4690      	mov	r8, r2
 800eaec:	6802      	ldr	r2, [r0, #0]
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	4682      	mov	sl, r0
 800eaf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eaf6:	46b9      	mov	r9, r7
 800eaf8:	463c      	mov	r4, r7
 800eafa:	9502      	str	r5, [sp, #8]
 800eafc:	46ab      	mov	fp, r5
 800eafe:	7851      	ldrb	r1, [r2, #1]
 800eb00:	1c53      	adds	r3, r2, #1
 800eb02:	9303      	str	r3, [sp, #12]
 800eb04:	b341      	cbz	r1, 800eb58 <__hexnan+0x88>
 800eb06:	4608      	mov	r0, r1
 800eb08:	9205      	str	r2, [sp, #20]
 800eb0a:	9104      	str	r1, [sp, #16]
 800eb0c:	f7ff fd5e 	bl	800e5cc <__hexdig_fun>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d14f      	bne.n	800ebb4 <__hexnan+0xe4>
 800eb14:	9904      	ldr	r1, [sp, #16]
 800eb16:	9a05      	ldr	r2, [sp, #20]
 800eb18:	2920      	cmp	r1, #32
 800eb1a:	d818      	bhi.n	800eb4e <__hexnan+0x7e>
 800eb1c:	9b02      	ldr	r3, [sp, #8]
 800eb1e:	459b      	cmp	fp, r3
 800eb20:	dd13      	ble.n	800eb4a <__hexnan+0x7a>
 800eb22:	454c      	cmp	r4, r9
 800eb24:	d206      	bcs.n	800eb34 <__hexnan+0x64>
 800eb26:	2d07      	cmp	r5, #7
 800eb28:	dc04      	bgt.n	800eb34 <__hexnan+0x64>
 800eb2a:	462a      	mov	r2, r5
 800eb2c:	4649      	mov	r1, r9
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f7ff ffa8 	bl	800ea84 <L_shift>
 800eb34:	4544      	cmp	r4, r8
 800eb36:	d950      	bls.n	800ebda <__hexnan+0x10a>
 800eb38:	2300      	movs	r3, #0
 800eb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800eb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb42:	f8cd b008 	str.w	fp, [sp, #8]
 800eb46:	464c      	mov	r4, r9
 800eb48:	461d      	mov	r5, r3
 800eb4a:	9a03      	ldr	r2, [sp, #12]
 800eb4c:	e7d7      	b.n	800eafe <__hexnan+0x2e>
 800eb4e:	2929      	cmp	r1, #41	; 0x29
 800eb50:	d156      	bne.n	800ec00 <__hexnan+0x130>
 800eb52:	3202      	adds	r2, #2
 800eb54:	f8ca 2000 	str.w	r2, [sl]
 800eb58:	f1bb 0f00 	cmp.w	fp, #0
 800eb5c:	d050      	beq.n	800ec00 <__hexnan+0x130>
 800eb5e:	454c      	cmp	r4, r9
 800eb60:	d206      	bcs.n	800eb70 <__hexnan+0xa0>
 800eb62:	2d07      	cmp	r5, #7
 800eb64:	dc04      	bgt.n	800eb70 <__hexnan+0xa0>
 800eb66:	462a      	mov	r2, r5
 800eb68:	4649      	mov	r1, r9
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f7ff ff8a 	bl	800ea84 <L_shift>
 800eb70:	4544      	cmp	r4, r8
 800eb72:	d934      	bls.n	800ebde <__hexnan+0x10e>
 800eb74:	f1a8 0204 	sub.w	r2, r8, #4
 800eb78:	4623      	mov	r3, r4
 800eb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb82:	429f      	cmp	r7, r3
 800eb84:	d2f9      	bcs.n	800eb7a <__hexnan+0xaa>
 800eb86:	1b3b      	subs	r3, r7, r4
 800eb88:	f023 0303 	bic.w	r3, r3, #3
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	3401      	adds	r4, #1
 800eb90:	3e03      	subs	r6, #3
 800eb92:	42b4      	cmp	r4, r6
 800eb94:	bf88      	it	hi
 800eb96:	2304      	movhi	r3, #4
 800eb98:	4443      	add	r3, r8
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f843 2b04 	str.w	r2, [r3], #4
 800eba0:	429f      	cmp	r7, r3
 800eba2:	d2fb      	bcs.n	800eb9c <__hexnan+0xcc>
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	b91b      	cbnz	r3, 800ebb0 <__hexnan+0xe0>
 800eba8:	4547      	cmp	r7, r8
 800ebaa:	d127      	bne.n	800ebfc <__hexnan+0x12c>
 800ebac:	2301      	movs	r3, #1
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	2005      	movs	r0, #5
 800ebb2:	e026      	b.n	800ec02 <__hexnan+0x132>
 800ebb4:	3501      	adds	r5, #1
 800ebb6:	2d08      	cmp	r5, #8
 800ebb8:	f10b 0b01 	add.w	fp, fp, #1
 800ebbc:	dd06      	ble.n	800ebcc <__hexnan+0xfc>
 800ebbe:	4544      	cmp	r4, r8
 800ebc0:	d9c3      	bls.n	800eb4a <__hexnan+0x7a>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebc8:	2501      	movs	r5, #1
 800ebca:	3c04      	subs	r4, #4
 800ebcc:	6822      	ldr	r2, [r4, #0]
 800ebce:	f000 000f 	and.w	r0, r0, #15
 800ebd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ebd6:	6022      	str	r2, [r4, #0]
 800ebd8:	e7b7      	b.n	800eb4a <__hexnan+0x7a>
 800ebda:	2508      	movs	r5, #8
 800ebdc:	e7b5      	b.n	800eb4a <__hexnan+0x7a>
 800ebde:	9b01      	ldr	r3, [sp, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0df      	beq.n	800eba4 <__hexnan+0xd4>
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	f1c3 0320 	rsb	r3, r3, #32
 800ebec:	fa22 f303 	lsr.w	r3, r2, r3
 800ebf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ebf4:	401a      	ands	r2, r3
 800ebf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800ebfa:	e7d3      	b.n	800eba4 <__hexnan+0xd4>
 800ebfc:	3f04      	subs	r7, #4
 800ebfe:	e7d1      	b.n	800eba4 <__hexnan+0xd4>
 800ec00:	2004      	movs	r0, #4
 800ec02:	b007      	add	sp, #28
 800ec04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec08 <_localeconv_r>:
 800ec08:	4800      	ldr	r0, [pc, #0]	; (800ec0c <_localeconv_r+0x4>)
 800ec0a:	4770      	bx	lr
 800ec0c:	20000174 	.word	0x20000174

0800ec10 <_lseek_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d07      	ldr	r5, [pc, #28]	; (800ec30 <_lseek_r+0x20>)
 800ec14:	4604      	mov	r4, r0
 800ec16:	4608      	mov	r0, r1
 800ec18:	4611      	mov	r1, r2
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	602a      	str	r2, [r5, #0]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	f7f5 fe6a 	bl	80048f8 <_lseek>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d102      	bne.n	800ec2e <_lseek_r+0x1e>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	b103      	cbz	r3, 800ec2e <_lseek_r+0x1e>
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	2001617c 	.word	0x2001617c

0800ec34 <__swhatbuf_r>:
 800ec34:	b570      	push	{r4, r5, r6, lr}
 800ec36:	460e      	mov	r6, r1
 800ec38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3c:	2900      	cmp	r1, #0
 800ec3e:	b096      	sub	sp, #88	; 0x58
 800ec40:	4614      	mov	r4, r2
 800ec42:	461d      	mov	r5, r3
 800ec44:	da08      	bge.n	800ec58 <__swhatbuf_r+0x24>
 800ec46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	602a      	str	r2, [r5, #0]
 800ec4e:	061a      	lsls	r2, r3, #24
 800ec50:	d410      	bmi.n	800ec74 <__swhatbuf_r+0x40>
 800ec52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec56:	e00e      	b.n	800ec76 <__swhatbuf_r+0x42>
 800ec58:	466a      	mov	r2, sp
 800ec5a:	f001 f859 	bl	800fd10 <_fstat_r>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	dbf1      	blt.n	800ec46 <__swhatbuf_r+0x12>
 800ec62:	9a01      	ldr	r2, [sp, #4]
 800ec64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec6c:	425a      	negs	r2, r3
 800ec6e:	415a      	adcs	r2, r3
 800ec70:	602a      	str	r2, [r5, #0]
 800ec72:	e7ee      	b.n	800ec52 <__swhatbuf_r+0x1e>
 800ec74:	2340      	movs	r3, #64	; 0x40
 800ec76:	2000      	movs	r0, #0
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	b016      	add	sp, #88	; 0x58
 800ec7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec80 <__smakebuf_r>:
 800ec80:	898b      	ldrh	r3, [r1, #12]
 800ec82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec84:	079d      	lsls	r5, r3, #30
 800ec86:	4606      	mov	r6, r0
 800ec88:	460c      	mov	r4, r1
 800ec8a:	d507      	bpl.n	800ec9c <__smakebuf_r+0x1c>
 800ec8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	6123      	str	r3, [r4, #16]
 800ec94:	2301      	movs	r3, #1
 800ec96:	6163      	str	r3, [r4, #20]
 800ec98:	b002      	add	sp, #8
 800ec9a:	bd70      	pop	{r4, r5, r6, pc}
 800ec9c:	ab01      	add	r3, sp, #4
 800ec9e:	466a      	mov	r2, sp
 800eca0:	f7ff ffc8 	bl	800ec34 <__swhatbuf_r>
 800eca4:	9900      	ldr	r1, [sp, #0]
 800eca6:	4605      	mov	r5, r0
 800eca8:	4630      	mov	r0, r6
 800ecaa:	f7fc ffb7 	bl	800bc1c <_malloc_r>
 800ecae:	b948      	cbnz	r0, 800ecc4 <__smakebuf_r+0x44>
 800ecb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecb4:	059a      	lsls	r2, r3, #22
 800ecb6:	d4ef      	bmi.n	800ec98 <__smakebuf_r+0x18>
 800ecb8:	f023 0303 	bic.w	r3, r3, #3
 800ecbc:	f043 0302 	orr.w	r3, r3, #2
 800ecc0:	81a3      	strh	r3, [r4, #12]
 800ecc2:	e7e3      	b.n	800ec8c <__smakebuf_r+0xc>
 800ecc4:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <__smakebuf_r+0x7c>)
 800ecc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	6020      	str	r0, [r4, #0]
 800eccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecd0:	81a3      	strh	r3, [r4, #12]
 800ecd2:	9b00      	ldr	r3, [sp, #0]
 800ecd4:	6163      	str	r3, [r4, #20]
 800ecd6:	9b01      	ldr	r3, [sp, #4]
 800ecd8:	6120      	str	r0, [r4, #16]
 800ecda:	b15b      	cbz	r3, 800ecf4 <__smakebuf_r+0x74>
 800ecdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ece0:	4630      	mov	r0, r6
 800ece2:	f001 f827 	bl	800fd34 <_isatty_r>
 800ece6:	b128      	cbz	r0, 800ecf4 <__smakebuf_r+0x74>
 800ece8:	89a3      	ldrh	r3, [r4, #12]
 800ecea:	f023 0303 	bic.w	r3, r3, #3
 800ecee:	f043 0301 	orr.w	r3, r3, #1
 800ecf2:	81a3      	strh	r3, [r4, #12]
 800ecf4:	89a0      	ldrh	r0, [r4, #12]
 800ecf6:	4305      	orrs	r5, r0
 800ecf8:	81a5      	strh	r5, [r4, #12]
 800ecfa:	e7cd      	b.n	800ec98 <__smakebuf_r+0x18>
 800ecfc:	0800b905 	.word	0x0800b905

0800ed00 <__ascii_mbtowc>:
 800ed00:	b082      	sub	sp, #8
 800ed02:	b901      	cbnz	r1, 800ed06 <__ascii_mbtowc+0x6>
 800ed04:	a901      	add	r1, sp, #4
 800ed06:	b142      	cbz	r2, 800ed1a <__ascii_mbtowc+0x1a>
 800ed08:	b14b      	cbz	r3, 800ed1e <__ascii_mbtowc+0x1e>
 800ed0a:	7813      	ldrb	r3, [r2, #0]
 800ed0c:	600b      	str	r3, [r1, #0]
 800ed0e:	7812      	ldrb	r2, [r2, #0]
 800ed10:	1e10      	subs	r0, r2, #0
 800ed12:	bf18      	it	ne
 800ed14:	2001      	movne	r0, #1
 800ed16:	b002      	add	sp, #8
 800ed18:	4770      	bx	lr
 800ed1a:	4610      	mov	r0, r2
 800ed1c:	e7fb      	b.n	800ed16 <__ascii_mbtowc+0x16>
 800ed1e:	f06f 0001 	mvn.w	r0, #1
 800ed22:	e7f8      	b.n	800ed16 <__ascii_mbtowc+0x16>

0800ed24 <__malloc_lock>:
 800ed24:	4801      	ldr	r0, [pc, #4]	; (800ed2c <__malloc_lock+0x8>)
 800ed26:	f7fc bee4 	b.w	800baf2 <__retarget_lock_acquire_recursive>
 800ed2a:	bf00      	nop
 800ed2c:	20016170 	.word	0x20016170

0800ed30 <__malloc_unlock>:
 800ed30:	4801      	ldr	r0, [pc, #4]	; (800ed38 <__malloc_unlock+0x8>)
 800ed32:	f7fc bedf 	b.w	800baf4 <__retarget_lock_release_recursive>
 800ed36:	bf00      	nop
 800ed38:	20016170 	.word	0x20016170

0800ed3c <_Balloc>:
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed40:	4604      	mov	r4, r0
 800ed42:	460d      	mov	r5, r1
 800ed44:	b976      	cbnz	r6, 800ed64 <_Balloc+0x28>
 800ed46:	2010      	movs	r0, #16
 800ed48:	f7fc fed6 	bl	800baf8 <malloc>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	6260      	str	r0, [r4, #36]	; 0x24
 800ed50:	b920      	cbnz	r0, 800ed5c <_Balloc+0x20>
 800ed52:	4b18      	ldr	r3, [pc, #96]	; (800edb4 <_Balloc+0x78>)
 800ed54:	4818      	ldr	r0, [pc, #96]	; (800edb8 <_Balloc+0x7c>)
 800ed56:	2166      	movs	r1, #102	; 0x66
 800ed58:	f7fe fd2a 	bl	800d7b0 <__assert_func>
 800ed5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed60:	6006      	str	r6, [r0, #0]
 800ed62:	60c6      	str	r6, [r0, #12]
 800ed64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed66:	68f3      	ldr	r3, [r6, #12]
 800ed68:	b183      	cbz	r3, 800ed8c <_Balloc+0x50>
 800ed6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed72:	b9b8      	cbnz	r0, 800eda4 <_Balloc+0x68>
 800ed74:	2101      	movs	r1, #1
 800ed76:	fa01 f605 	lsl.w	r6, r1, r5
 800ed7a:	1d72      	adds	r2, r6, #5
 800ed7c:	0092      	lsls	r2, r2, #2
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f000 fc9d 	bl	800f6be <_calloc_r>
 800ed84:	b160      	cbz	r0, 800eda0 <_Balloc+0x64>
 800ed86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed8a:	e00e      	b.n	800edaa <_Balloc+0x6e>
 800ed8c:	2221      	movs	r2, #33	; 0x21
 800ed8e:	2104      	movs	r1, #4
 800ed90:	4620      	mov	r0, r4
 800ed92:	f000 fc94 	bl	800f6be <_calloc_r>
 800ed96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed98:	60f0      	str	r0, [r6, #12]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e4      	bne.n	800ed6a <_Balloc+0x2e>
 800eda0:	2000      	movs	r0, #0
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	6802      	ldr	r2, [r0, #0]
 800eda6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edaa:	2300      	movs	r3, #0
 800edac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edb0:	e7f7      	b.n	800eda2 <_Balloc+0x66>
 800edb2:	bf00      	nop
 800edb4:	08010cfc 	.word	0x08010cfc
 800edb8:	08010ef0 	.word	0x08010ef0

0800edbc <_Bfree>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edc0:	4605      	mov	r5, r0
 800edc2:	460c      	mov	r4, r1
 800edc4:	b976      	cbnz	r6, 800ede4 <_Bfree+0x28>
 800edc6:	2010      	movs	r0, #16
 800edc8:	f7fc fe96 	bl	800baf8 <malloc>
 800edcc:	4602      	mov	r2, r0
 800edce:	6268      	str	r0, [r5, #36]	; 0x24
 800edd0:	b920      	cbnz	r0, 800eddc <_Bfree+0x20>
 800edd2:	4b09      	ldr	r3, [pc, #36]	; (800edf8 <_Bfree+0x3c>)
 800edd4:	4809      	ldr	r0, [pc, #36]	; (800edfc <_Bfree+0x40>)
 800edd6:	218a      	movs	r1, #138	; 0x8a
 800edd8:	f7fe fcea 	bl	800d7b0 <__assert_func>
 800eddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ede0:	6006      	str	r6, [r0, #0]
 800ede2:	60c6      	str	r6, [r0, #12]
 800ede4:	b13c      	cbz	r4, 800edf6 <_Bfree+0x3a>
 800ede6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ede8:	6862      	ldr	r2, [r4, #4]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800edf0:	6021      	str	r1, [r4, #0]
 800edf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	08010cfc 	.word	0x08010cfc
 800edfc:	08010ef0 	.word	0x08010ef0

0800ee00 <__multadd>:
 800ee00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee04:	690d      	ldr	r5, [r1, #16]
 800ee06:	4607      	mov	r7, r0
 800ee08:	460c      	mov	r4, r1
 800ee0a:	461e      	mov	r6, r3
 800ee0c:	f101 0c14 	add.w	ip, r1, #20
 800ee10:	2000      	movs	r0, #0
 800ee12:	f8dc 3000 	ldr.w	r3, [ip]
 800ee16:	b299      	uxth	r1, r3
 800ee18:	fb02 6101 	mla	r1, r2, r1, r6
 800ee1c:	0c1e      	lsrs	r6, r3, #16
 800ee1e:	0c0b      	lsrs	r3, r1, #16
 800ee20:	fb02 3306 	mla	r3, r2, r6, r3
 800ee24:	b289      	uxth	r1, r1
 800ee26:	3001      	adds	r0, #1
 800ee28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee2c:	4285      	cmp	r5, r0
 800ee2e:	f84c 1b04 	str.w	r1, [ip], #4
 800ee32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee36:	dcec      	bgt.n	800ee12 <__multadd+0x12>
 800ee38:	b30e      	cbz	r6, 800ee7e <__multadd+0x7e>
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	42ab      	cmp	r3, r5
 800ee3e:	dc19      	bgt.n	800ee74 <__multadd+0x74>
 800ee40:	6861      	ldr	r1, [r4, #4]
 800ee42:	4638      	mov	r0, r7
 800ee44:	3101      	adds	r1, #1
 800ee46:	f7ff ff79 	bl	800ed3c <_Balloc>
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	b928      	cbnz	r0, 800ee5a <__multadd+0x5a>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	4b0c      	ldr	r3, [pc, #48]	; (800ee84 <__multadd+0x84>)
 800ee52:	480d      	ldr	r0, [pc, #52]	; (800ee88 <__multadd+0x88>)
 800ee54:	21b5      	movs	r1, #181	; 0xb5
 800ee56:	f7fe fcab 	bl	800d7b0 <__assert_func>
 800ee5a:	6922      	ldr	r2, [r4, #16]
 800ee5c:	3202      	adds	r2, #2
 800ee5e:	f104 010c 	add.w	r1, r4, #12
 800ee62:	0092      	lsls	r2, r2, #2
 800ee64:	300c      	adds	r0, #12
 800ee66:	f7fc fe57 	bl	800bb18 <memcpy>
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4638      	mov	r0, r7
 800ee6e:	f7ff ffa5 	bl	800edbc <_Bfree>
 800ee72:	4644      	mov	r4, r8
 800ee74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee78:	3501      	adds	r5, #1
 800ee7a:	615e      	str	r6, [r3, #20]
 800ee7c:	6125      	str	r5, [r4, #16]
 800ee7e:	4620      	mov	r0, r4
 800ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee84:	08010e64 	.word	0x08010e64
 800ee88:	08010ef0 	.word	0x08010ef0

0800ee8c <__s2b>:
 800ee8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee90:	460c      	mov	r4, r1
 800ee92:	4615      	mov	r5, r2
 800ee94:	461f      	mov	r7, r3
 800ee96:	2209      	movs	r2, #9
 800ee98:	3308      	adds	r3, #8
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800eea0:	2100      	movs	r1, #0
 800eea2:	2201      	movs	r2, #1
 800eea4:	429a      	cmp	r2, r3
 800eea6:	db09      	blt.n	800eebc <__s2b+0x30>
 800eea8:	4630      	mov	r0, r6
 800eeaa:	f7ff ff47 	bl	800ed3c <_Balloc>
 800eeae:	b940      	cbnz	r0, 800eec2 <__s2b+0x36>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	4b19      	ldr	r3, [pc, #100]	; (800ef18 <__s2b+0x8c>)
 800eeb4:	4819      	ldr	r0, [pc, #100]	; (800ef1c <__s2b+0x90>)
 800eeb6:	21ce      	movs	r1, #206	; 0xce
 800eeb8:	f7fe fc7a 	bl	800d7b0 <__assert_func>
 800eebc:	0052      	lsls	r2, r2, #1
 800eebe:	3101      	adds	r1, #1
 800eec0:	e7f0      	b.n	800eea4 <__s2b+0x18>
 800eec2:	9b08      	ldr	r3, [sp, #32]
 800eec4:	6143      	str	r3, [r0, #20]
 800eec6:	2d09      	cmp	r5, #9
 800eec8:	f04f 0301 	mov.w	r3, #1
 800eecc:	6103      	str	r3, [r0, #16]
 800eece:	dd16      	ble.n	800eefe <__s2b+0x72>
 800eed0:	f104 0909 	add.w	r9, r4, #9
 800eed4:	46c8      	mov	r8, r9
 800eed6:	442c      	add	r4, r5
 800eed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eedc:	4601      	mov	r1, r0
 800eede:	3b30      	subs	r3, #48	; 0x30
 800eee0:	220a      	movs	r2, #10
 800eee2:	4630      	mov	r0, r6
 800eee4:	f7ff ff8c 	bl	800ee00 <__multadd>
 800eee8:	45a0      	cmp	r8, r4
 800eeea:	d1f5      	bne.n	800eed8 <__s2b+0x4c>
 800eeec:	f1a5 0408 	sub.w	r4, r5, #8
 800eef0:	444c      	add	r4, r9
 800eef2:	1b2d      	subs	r5, r5, r4
 800eef4:	1963      	adds	r3, r4, r5
 800eef6:	42bb      	cmp	r3, r7
 800eef8:	db04      	blt.n	800ef04 <__s2b+0x78>
 800eefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefe:	340a      	adds	r4, #10
 800ef00:	2509      	movs	r5, #9
 800ef02:	e7f6      	b.n	800eef2 <__s2b+0x66>
 800ef04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef08:	4601      	mov	r1, r0
 800ef0a:	3b30      	subs	r3, #48	; 0x30
 800ef0c:	220a      	movs	r2, #10
 800ef0e:	4630      	mov	r0, r6
 800ef10:	f7ff ff76 	bl	800ee00 <__multadd>
 800ef14:	e7ee      	b.n	800eef4 <__s2b+0x68>
 800ef16:	bf00      	nop
 800ef18:	08010e64 	.word	0x08010e64
 800ef1c:	08010ef0 	.word	0x08010ef0

0800ef20 <__hi0bits>:
 800ef20:	0c03      	lsrs	r3, r0, #16
 800ef22:	041b      	lsls	r3, r3, #16
 800ef24:	b9d3      	cbnz	r3, 800ef5c <__hi0bits+0x3c>
 800ef26:	0400      	lsls	r0, r0, #16
 800ef28:	2310      	movs	r3, #16
 800ef2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef2e:	bf04      	itt	eq
 800ef30:	0200      	lsleq	r0, r0, #8
 800ef32:	3308      	addeq	r3, #8
 800ef34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef38:	bf04      	itt	eq
 800ef3a:	0100      	lsleq	r0, r0, #4
 800ef3c:	3304      	addeq	r3, #4
 800ef3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef42:	bf04      	itt	eq
 800ef44:	0080      	lsleq	r0, r0, #2
 800ef46:	3302      	addeq	r3, #2
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	db05      	blt.n	800ef58 <__hi0bits+0x38>
 800ef4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef50:	f103 0301 	add.w	r3, r3, #1
 800ef54:	bf08      	it	eq
 800ef56:	2320      	moveq	r3, #32
 800ef58:	4618      	mov	r0, r3
 800ef5a:	4770      	bx	lr
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e7e4      	b.n	800ef2a <__hi0bits+0xa>

0800ef60 <__lo0bits>:
 800ef60:	6803      	ldr	r3, [r0, #0]
 800ef62:	f013 0207 	ands.w	r2, r3, #7
 800ef66:	4601      	mov	r1, r0
 800ef68:	d00b      	beq.n	800ef82 <__lo0bits+0x22>
 800ef6a:	07da      	lsls	r2, r3, #31
 800ef6c:	d423      	bmi.n	800efb6 <__lo0bits+0x56>
 800ef6e:	0798      	lsls	r0, r3, #30
 800ef70:	bf49      	itett	mi
 800ef72:	085b      	lsrmi	r3, r3, #1
 800ef74:	089b      	lsrpl	r3, r3, #2
 800ef76:	2001      	movmi	r0, #1
 800ef78:	600b      	strmi	r3, [r1, #0]
 800ef7a:	bf5c      	itt	pl
 800ef7c:	600b      	strpl	r3, [r1, #0]
 800ef7e:	2002      	movpl	r0, #2
 800ef80:	4770      	bx	lr
 800ef82:	b298      	uxth	r0, r3
 800ef84:	b9a8      	cbnz	r0, 800efb2 <__lo0bits+0x52>
 800ef86:	0c1b      	lsrs	r3, r3, #16
 800ef88:	2010      	movs	r0, #16
 800ef8a:	b2da      	uxtb	r2, r3
 800ef8c:	b90a      	cbnz	r2, 800ef92 <__lo0bits+0x32>
 800ef8e:	3008      	adds	r0, #8
 800ef90:	0a1b      	lsrs	r3, r3, #8
 800ef92:	071a      	lsls	r2, r3, #28
 800ef94:	bf04      	itt	eq
 800ef96:	091b      	lsreq	r3, r3, #4
 800ef98:	3004      	addeq	r0, #4
 800ef9a:	079a      	lsls	r2, r3, #30
 800ef9c:	bf04      	itt	eq
 800ef9e:	089b      	lsreq	r3, r3, #2
 800efa0:	3002      	addeq	r0, #2
 800efa2:	07da      	lsls	r2, r3, #31
 800efa4:	d403      	bmi.n	800efae <__lo0bits+0x4e>
 800efa6:	085b      	lsrs	r3, r3, #1
 800efa8:	f100 0001 	add.w	r0, r0, #1
 800efac:	d005      	beq.n	800efba <__lo0bits+0x5a>
 800efae:	600b      	str	r3, [r1, #0]
 800efb0:	4770      	bx	lr
 800efb2:	4610      	mov	r0, r2
 800efb4:	e7e9      	b.n	800ef8a <__lo0bits+0x2a>
 800efb6:	2000      	movs	r0, #0
 800efb8:	4770      	bx	lr
 800efba:	2020      	movs	r0, #32
 800efbc:	4770      	bx	lr
	...

0800efc0 <__i2b>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	460c      	mov	r4, r1
 800efc4:	2101      	movs	r1, #1
 800efc6:	f7ff feb9 	bl	800ed3c <_Balloc>
 800efca:	4602      	mov	r2, r0
 800efcc:	b928      	cbnz	r0, 800efda <__i2b+0x1a>
 800efce:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <__i2b+0x24>)
 800efd0:	4805      	ldr	r0, [pc, #20]	; (800efe8 <__i2b+0x28>)
 800efd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800efd6:	f7fe fbeb 	bl	800d7b0 <__assert_func>
 800efda:	2301      	movs	r3, #1
 800efdc:	6144      	str	r4, [r0, #20]
 800efde:	6103      	str	r3, [r0, #16]
 800efe0:	bd10      	pop	{r4, pc}
 800efe2:	bf00      	nop
 800efe4:	08010e64 	.word	0x08010e64
 800efe8:	08010ef0 	.word	0x08010ef0

0800efec <__multiply>:
 800efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff0:	4691      	mov	r9, r2
 800eff2:	690a      	ldr	r2, [r1, #16]
 800eff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eff8:	429a      	cmp	r2, r3
 800effa:	bfb8      	it	lt
 800effc:	460b      	movlt	r3, r1
 800effe:	460c      	mov	r4, r1
 800f000:	bfbc      	itt	lt
 800f002:	464c      	movlt	r4, r9
 800f004:	4699      	movlt	r9, r3
 800f006:	6927      	ldr	r7, [r4, #16]
 800f008:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f00c:	68a3      	ldr	r3, [r4, #8]
 800f00e:	6861      	ldr	r1, [r4, #4]
 800f010:	eb07 060a 	add.w	r6, r7, sl
 800f014:	42b3      	cmp	r3, r6
 800f016:	b085      	sub	sp, #20
 800f018:	bfb8      	it	lt
 800f01a:	3101      	addlt	r1, #1
 800f01c:	f7ff fe8e 	bl	800ed3c <_Balloc>
 800f020:	b930      	cbnz	r0, 800f030 <__multiply+0x44>
 800f022:	4602      	mov	r2, r0
 800f024:	4b44      	ldr	r3, [pc, #272]	; (800f138 <__multiply+0x14c>)
 800f026:	4845      	ldr	r0, [pc, #276]	; (800f13c <__multiply+0x150>)
 800f028:	f240 115d 	movw	r1, #349	; 0x15d
 800f02c:	f7fe fbc0 	bl	800d7b0 <__assert_func>
 800f030:	f100 0514 	add.w	r5, r0, #20
 800f034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f038:	462b      	mov	r3, r5
 800f03a:	2200      	movs	r2, #0
 800f03c:	4543      	cmp	r3, r8
 800f03e:	d321      	bcc.n	800f084 <__multiply+0x98>
 800f040:	f104 0314 	add.w	r3, r4, #20
 800f044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f048:	f109 0314 	add.w	r3, r9, #20
 800f04c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f050:	9202      	str	r2, [sp, #8]
 800f052:	1b3a      	subs	r2, r7, r4
 800f054:	3a15      	subs	r2, #21
 800f056:	f022 0203 	bic.w	r2, r2, #3
 800f05a:	3204      	adds	r2, #4
 800f05c:	f104 0115 	add.w	r1, r4, #21
 800f060:	428f      	cmp	r7, r1
 800f062:	bf38      	it	cc
 800f064:	2204      	movcc	r2, #4
 800f066:	9201      	str	r2, [sp, #4]
 800f068:	9a02      	ldr	r2, [sp, #8]
 800f06a:	9303      	str	r3, [sp, #12]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d80c      	bhi.n	800f08a <__multiply+0x9e>
 800f070:	2e00      	cmp	r6, #0
 800f072:	dd03      	ble.n	800f07c <__multiply+0x90>
 800f074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d05a      	beq.n	800f132 <__multiply+0x146>
 800f07c:	6106      	str	r6, [r0, #16]
 800f07e:	b005      	add	sp, #20
 800f080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f084:	f843 2b04 	str.w	r2, [r3], #4
 800f088:	e7d8      	b.n	800f03c <__multiply+0x50>
 800f08a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f08e:	f1ba 0f00 	cmp.w	sl, #0
 800f092:	d024      	beq.n	800f0de <__multiply+0xf2>
 800f094:	f104 0e14 	add.w	lr, r4, #20
 800f098:	46a9      	mov	r9, r5
 800f09a:	f04f 0c00 	mov.w	ip, #0
 800f09e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f0a2:	f8d9 1000 	ldr.w	r1, [r9]
 800f0a6:	fa1f fb82 	uxth.w	fp, r2
 800f0aa:	b289      	uxth	r1, r1
 800f0ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800f0b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f0b4:	f8d9 2000 	ldr.w	r2, [r9]
 800f0b8:	4461      	add	r1, ip
 800f0ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0be:	fb0a c20b 	mla	r2, sl, fp, ip
 800f0c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f0c6:	b289      	uxth	r1, r1
 800f0c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f0cc:	4577      	cmp	r7, lr
 800f0ce:	f849 1b04 	str.w	r1, [r9], #4
 800f0d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0d6:	d8e2      	bhi.n	800f09e <__multiply+0xb2>
 800f0d8:	9a01      	ldr	r2, [sp, #4]
 800f0da:	f845 c002 	str.w	ip, [r5, r2]
 800f0de:	9a03      	ldr	r2, [sp, #12]
 800f0e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	f1b9 0f00 	cmp.w	r9, #0
 800f0ea:	d020      	beq.n	800f12e <__multiply+0x142>
 800f0ec:	6829      	ldr	r1, [r5, #0]
 800f0ee:	f104 0c14 	add.w	ip, r4, #20
 800f0f2:	46ae      	mov	lr, r5
 800f0f4:	f04f 0a00 	mov.w	sl, #0
 800f0f8:	f8bc b000 	ldrh.w	fp, [ip]
 800f0fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f100:	fb09 220b 	mla	r2, r9, fp, r2
 800f104:	4492      	add	sl, r2
 800f106:	b289      	uxth	r1, r1
 800f108:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f10c:	f84e 1b04 	str.w	r1, [lr], #4
 800f110:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f114:	f8be 1000 	ldrh.w	r1, [lr]
 800f118:	0c12      	lsrs	r2, r2, #16
 800f11a:	fb09 1102 	mla	r1, r9, r2, r1
 800f11e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f122:	4567      	cmp	r7, ip
 800f124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f128:	d8e6      	bhi.n	800f0f8 <__multiply+0x10c>
 800f12a:	9a01      	ldr	r2, [sp, #4]
 800f12c:	50a9      	str	r1, [r5, r2]
 800f12e:	3504      	adds	r5, #4
 800f130:	e79a      	b.n	800f068 <__multiply+0x7c>
 800f132:	3e01      	subs	r6, #1
 800f134:	e79c      	b.n	800f070 <__multiply+0x84>
 800f136:	bf00      	nop
 800f138:	08010e64 	.word	0x08010e64
 800f13c:	08010ef0 	.word	0x08010ef0

0800f140 <__pow5mult>:
 800f140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f144:	4615      	mov	r5, r2
 800f146:	f012 0203 	ands.w	r2, r2, #3
 800f14a:	4606      	mov	r6, r0
 800f14c:	460f      	mov	r7, r1
 800f14e:	d007      	beq.n	800f160 <__pow5mult+0x20>
 800f150:	4c25      	ldr	r4, [pc, #148]	; (800f1e8 <__pow5mult+0xa8>)
 800f152:	3a01      	subs	r2, #1
 800f154:	2300      	movs	r3, #0
 800f156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f15a:	f7ff fe51 	bl	800ee00 <__multadd>
 800f15e:	4607      	mov	r7, r0
 800f160:	10ad      	asrs	r5, r5, #2
 800f162:	d03d      	beq.n	800f1e0 <__pow5mult+0xa0>
 800f164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f166:	b97c      	cbnz	r4, 800f188 <__pow5mult+0x48>
 800f168:	2010      	movs	r0, #16
 800f16a:	f7fc fcc5 	bl	800baf8 <malloc>
 800f16e:	4602      	mov	r2, r0
 800f170:	6270      	str	r0, [r6, #36]	; 0x24
 800f172:	b928      	cbnz	r0, 800f180 <__pow5mult+0x40>
 800f174:	4b1d      	ldr	r3, [pc, #116]	; (800f1ec <__pow5mult+0xac>)
 800f176:	481e      	ldr	r0, [pc, #120]	; (800f1f0 <__pow5mult+0xb0>)
 800f178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f17c:	f7fe fb18 	bl	800d7b0 <__assert_func>
 800f180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f184:	6004      	str	r4, [r0, #0]
 800f186:	60c4      	str	r4, [r0, #12]
 800f188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f18c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f190:	b94c      	cbnz	r4, 800f1a6 <__pow5mult+0x66>
 800f192:	f240 2171 	movw	r1, #625	; 0x271
 800f196:	4630      	mov	r0, r6
 800f198:	f7ff ff12 	bl	800efc0 <__i2b>
 800f19c:	2300      	movs	r3, #0
 800f19e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	6003      	str	r3, [r0, #0]
 800f1a6:	f04f 0900 	mov.w	r9, #0
 800f1aa:	07eb      	lsls	r3, r5, #31
 800f1ac:	d50a      	bpl.n	800f1c4 <__pow5mult+0x84>
 800f1ae:	4639      	mov	r1, r7
 800f1b0:	4622      	mov	r2, r4
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7ff ff1a 	bl	800efec <__multiply>
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7ff fdfd 	bl	800edbc <_Bfree>
 800f1c2:	4647      	mov	r7, r8
 800f1c4:	106d      	asrs	r5, r5, #1
 800f1c6:	d00b      	beq.n	800f1e0 <__pow5mult+0xa0>
 800f1c8:	6820      	ldr	r0, [r4, #0]
 800f1ca:	b938      	cbnz	r0, 800f1dc <__pow5mult+0x9c>
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	f7ff ff0b 	bl	800efec <__multiply>
 800f1d6:	6020      	str	r0, [r4, #0]
 800f1d8:	f8c0 9000 	str.w	r9, [r0]
 800f1dc:	4604      	mov	r4, r0
 800f1de:	e7e4      	b.n	800f1aa <__pow5mult+0x6a>
 800f1e0:	4638      	mov	r0, r7
 800f1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e6:	bf00      	nop
 800f1e8:	08011040 	.word	0x08011040
 800f1ec:	08010cfc 	.word	0x08010cfc
 800f1f0:	08010ef0 	.word	0x08010ef0

0800f1f4 <__lshift>:
 800f1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f8:	460c      	mov	r4, r1
 800f1fa:	6849      	ldr	r1, [r1, #4]
 800f1fc:	6923      	ldr	r3, [r4, #16]
 800f1fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f202:	68a3      	ldr	r3, [r4, #8]
 800f204:	4607      	mov	r7, r0
 800f206:	4691      	mov	r9, r2
 800f208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f20c:	f108 0601 	add.w	r6, r8, #1
 800f210:	42b3      	cmp	r3, r6
 800f212:	db0b      	blt.n	800f22c <__lshift+0x38>
 800f214:	4638      	mov	r0, r7
 800f216:	f7ff fd91 	bl	800ed3c <_Balloc>
 800f21a:	4605      	mov	r5, r0
 800f21c:	b948      	cbnz	r0, 800f232 <__lshift+0x3e>
 800f21e:	4602      	mov	r2, r0
 800f220:	4b2a      	ldr	r3, [pc, #168]	; (800f2cc <__lshift+0xd8>)
 800f222:	482b      	ldr	r0, [pc, #172]	; (800f2d0 <__lshift+0xdc>)
 800f224:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f228:	f7fe fac2 	bl	800d7b0 <__assert_func>
 800f22c:	3101      	adds	r1, #1
 800f22e:	005b      	lsls	r3, r3, #1
 800f230:	e7ee      	b.n	800f210 <__lshift+0x1c>
 800f232:	2300      	movs	r3, #0
 800f234:	f100 0114 	add.w	r1, r0, #20
 800f238:	f100 0210 	add.w	r2, r0, #16
 800f23c:	4618      	mov	r0, r3
 800f23e:	4553      	cmp	r3, sl
 800f240:	db37      	blt.n	800f2b2 <__lshift+0xbe>
 800f242:	6920      	ldr	r0, [r4, #16]
 800f244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f248:	f104 0314 	add.w	r3, r4, #20
 800f24c:	f019 091f 	ands.w	r9, r9, #31
 800f250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f258:	d02f      	beq.n	800f2ba <__lshift+0xc6>
 800f25a:	f1c9 0e20 	rsb	lr, r9, #32
 800f25e:	468a      	mov	sl, r1
 800f260:	f04f 0c00 	mov.w	ip, #0
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	fa02 f209 	lsl.w	r2, r2, r9
 800f26a:	ea42 020c 	orr.w	r2, r2, ip
 800f26e:	f84a 2b04 	str.w	r2, [sl], #4
 800f272:	f853 2b04 	ldr.w	r2, [r3], #4
 800f276:	4298      	cmp	r0, r3
 800f278:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f27c:	d8f2      	bhi.n	800f264 <__lshift+0x70>
 800f27e:	1b03      	subs	r3, r0, r4
 800f280:	3b15      	subs	r3, #21
 800f282:	f023 0303 	bic.w	r3, r3, #3
 800f286:	3304      	adds	r3, #4
 800f288:	f104 0215 	add.w	r2, r4, #21
 800f28c:	4290      	cmp	r0, r2
 800f28e:	bf38      	it	cc
 800f290:	2304      	movcc	r3, #4
 800f292:	f841 c003 	str.w	ip, [r1, r3]
 800f296:	f1bc 0f00 	cmp.w	ip, #0
 800f29a:	d001      	beq.n	800f2a0 <__lshift+0xac>
 800f29c:	f108 0602 	add.w	r6, r8, #2
 800f2a0:	3e01      	subs	r6, #1
 800f2a2:	4638      	mov	r0, r7
 800f2a4:	612e      	str	r6, [r5, #16]
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	f7ff fd88 	bl	800edbc <_Bfree>
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	e7c1      	b.n	800f23e <__lshift+0x4a>
 800f2ba:	3904      	subs	r1, #4
 800f2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2c4:	4298      	cmp	r0, r3
 800f2c6:	d8f9      	bhi.n	800f2bc <__lshift+0xc8>
 800f2c8:	e7ea      	b.n	800f2a0 <__lshift+0xac>
 800f2ca:	bf00      	nop
 800f2cc:	08010e64 	.word	0x08010e64
 800f2d0:	08010ef0 	.word	0x08010ef0

0800f2d4 <__mcmp>:
 800f2d4:	b530      	push	{r4, r5, lr}
 800f2d6:	6902      	ldr	r2, [r0, #16]
 800f2d8:	690c      	ldr	r4, [r1, #16]
 800f2da:	1b12      	subs	r2, r2, r4
 800f2dc:	d10e      	bne.n	800f2fc <__mcmp+0x28>
 800f2de:	f100 0314 	add.w	r3, r0, #20
 800f2e2:	3114      	adds	r1, #20
 800f2e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f2e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f2ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f2f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f2f4:	42a5      	cmp	r5, r4
 800f2f6:	d003      	beq.n	800f300 <__mcmp+0x2c>
 800f2f8:	d305      	bcc.n	800f306 <__mcmp+0x32>
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	bd30      	pop	{r4, r5, pc}
 800f300:	4283      	cmp	r3, r0
 800f302:	d3f3      	bcc.n	800f2ec <__mcmp+0x18>
 800f304:	e7fa      	b.n	800f2fc <__mcmp+0x28>
 800f306:	f04f 32ff 	mov.w	r2, #4294967295
 800f30a:	e7f7      	b.n	800f2fc <__mcmp+0x28>

0800f30c <__mdiff>:
 800f30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f310:	460c      	mov	r4, r1
 800f312:	4606      	mov	r6, r0
 800f314:	4611      	mov	r1, r2
 800f316:	4620      	mov	r0, r4
 800f318:	4690      	mov	r8, r2
 800f31a:	f7ff ffdb 	bl	800f2d4 <__mcmp>
 800f31e:	1e05      	subs	r5, r0, #0
 800f320:	d110      	bne.n	800f344 <__mdiff+0x38>
 800f322:	4629      	mov	r1, r5
 800f324:	4630      	mov	r0, r6
 800f326:	f7ff fd09 	bl	800ed3c <_Balloc>
 800f32a:	b930      	cbnz	r0, 800f33a <__mdiff+0x2e>
 800f32c:	4b3a      	ldr	r3, [pc, #232]	; (800f418 <__mdiff+0x10c>)
 800f32e:	4602      	mov	r2, r0
 800f330:	f240 2132 	movw	r1, #562	; 0x232
 800f334:	4839      	ldr	r0, [pc, #228]	; (800f41c <__mdiff+0x110>)
 800f336:	f7fe fa3b 	bl	800d7b0 <__assert_func>
 800f33a:	2301      	movs	r3, #1
 800f33c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f344:	bfa4      	itt	ge
 800f346:	4643      	movge	r3, r8
 800f348:	46a0      	movge	r8, r4
 800f34a:	4630      	mov	r0, r6
 800f34c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f350:	bfa6      	itte	ge
 800f352:	461c      	movge	r4, r3
 800f354:	2500      	movge	r5, #0
 800f356:	2501      	movlt	r5, #1
 800f358:	f7ff fcf0 	bl	800ed3c <_Balloc>
 800f35c:	b920      	cbnz	r0, 800f368 <__mdiff+0x5c>
 800f35e:	4b2e      	ldr	r3, [pc, #184]	; (800f418 <__mdiff+0x10c>)
 800f360:	4602      	mov	r2, r0
 800f362:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f366:	e7e5      	b.n	800f334 <__mdiff+0x28>
 800f368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f36c:	6926      	ldr	r6, [r4, #16]
 800f36e:	60c5      	str	r5, [r0, #12]
 800f370:	f104 0914 	add.w	r9, r4, #20
 800f374:	f108 0514 	add.w	r5, r8, #20
 800f378:	f100 0e14 	add.w	lr, r0, #20
 800f37c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f384:	f108 0210 	add.w	r2, r8, #16
 800f388:	46f2      	mov	sl, lr
 800f38a:	2100      	movs	r1, #0
 800f38c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f394:	fa1f f883 	uxth.w	r8, r3
 800f398:	fa11 f18b 	uxtah	r1, r1, fp
 800f39c:	0c1b      	lsrs	r3, r3, #16
 800f39e:	eba1 0808 	sub.w	r8, r1, r8
 800f3a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f3aa:	fa1f f888 	uxth.w	r8, r8
 800f3ae:	1419      	asrs	r1, r3, #16
 800f3b0:	454e      	cmp	r6, r9
 800f3b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f3b6:	f84a 3b04 	str.w	r3, [sl], #4
 800f3ba:	d8e7      	bhi.n	800f38c <__mdiff+0x80>
 800f3bc:	1b33      	subs	r3, r6, r4
 800f3be:	3b15      	subs	r3, #21
 800f3c0:	f023 0303 	bic.w	r3, r3, #3
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	3415      	adds	r4, #21
 800f3c8:	42a6      	cmp	r6, r4
 800f3ca:	bf38      	it	cc
 800f3cc:	2304      	movcc	r3, #4
 800f3ce:	441d      	add	r5, r3
 800f3d0:	4473      	add	r3, lr
 800f3d2:	469e      	mov	lr, r3
 800f3d4:	462e      	mov	r6, r5
 800f3d6:	4566      	cmp	r6, ip
 800f3d8:	d30e      	bcc.n	800f3f8 <__mdiff+0xec>
 800f3da:	f10c 0203 	add.w	r2, ip, #3
 800f3de:	1b52      	subs	r2, r2, r5
 800f3e0:	f022 0203 	bic.w	r2, r2, #3
 800f3e4:	3d03      	subs	r5, #3
 800f3e6:	45ac      	cmp	ip, r5
 800f3e8:	bf38      	it	cc
 800f3ea:	2200      	movcc	r2, #0
 800f3ec:	441a      	add	r2, r3
 800f3ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f3f2:	b17b      	cbz	r3, 800f414 <__mdiff+0x108>
 800f3f4:	6107      	str	r7, [r0, #16]
 800f3f6:	e7a3      	b.n	800f340 <__mdiff+0x34>
 800f3f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800f3fc:	fa11 f288 	uxtah	r2, r1, r8
 800f400:	1414      	asrs	r4, r2, #16
 800f402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f406:	b292      	uxth	r2, r2
 800f408:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f40c:	f84e 2b04 	str.w	r2, [lr], #4
 800f410:	1421      	asrs	r1, r4, #16
 800f412:	e7e0      	b.n	800f3d6 <__mdiff+0xca>
 800f414:	3f01      	subs	r7, #1
 800f416:	e7ea      	b.n	800f3ee <__mdiff+0xe2>
 800f418:	08010e64 	.word	0x08010e64
 800f41c:	08010ef0 	.word	0x08010ef0

0800f420 <__ulp>:
 800f420:	b082      	sub	sp, #8
 800f422:	ed8d 0b00 	vstr	d0, [sp]
 800f426:	9b01      	ldr	r3, [sp, #4]
 800f428:	4912      	ldr	r1, [pc, #72]	; (800f474 <__ulp+0x54>)
 800f42a:	4019      	ands	r1, r3
 800f42c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f430:	2900      	cmp	r1, #0
 800f432:	dd05      	ble.n	800f440 <__ulp+0x20>
 800f434:	2200      	movs	r2, #0
 800f436:	460b      	mov	r3, r1
 800f438:	ec43 2b10 	vmov	d0, r2, r3
 800f43c:	b002      	add	sp, #8
 800f43e:	4770      	bx	lr
 800f440:	4249      	negs	r1, r1
 800f442:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f446:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f44a:	f04f 0200 	mov.w	r2, #0
 800f44e:	f04f 0300 	mov.w	r3, #0
 800f452:	da04      	bge.n	800f45e <__ulp+0x3e>
 800f454:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f458:	fa41 f300 	asr.w	r3, r1, r0
 800f45c:	e7ec      	b.n	800f438 <__ulp+0x18>
 800f45e:	f1a0 0114 	sub.w	r1, r0, #20
 800f462:	291e      	cmp	r1, #30
 800f464:	bfda      	itte	le
 800f466:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f46a:	fa20 f101 	lsrle.w	r1, r0, r1
 800f46e:	2101      	movgt	r1, #1
 800f470:	460a      	mov	r2, r1
 800f472:	e7e1      	b.n	800f438 <__ulp+0x18>
 800f474:	7ff00000 	.word	0x7ff00000

0800f478 <__b2d>:
 800f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47a:	6905      	ldr	r5, [r0, #16]
 800f47c:	f100 0714 	add.w	r7, r0, #20
 800f480:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f484:	1f2e      	subs	r6, r5, #4
 800f486:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7ff fd48 	bl	800ef20 <__hi0bits>
 800f490:	f1c0 0320 	rsb	r3, r0, #32
 800f494:	280a      	cmp	r0, #10
 800f496:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f514 <__b2d+0x9c>
 800f49a:	600b      	str	r3, [r1, #0]
 800f49c:	dc14      	bgt.n	800f4c8 <__b2d+0x50>
 800f49e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f4a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800f4a6:	42b7      	cmp	r7, r6
 800f4a8:	ea41 030c 	orr.w	r3, r1, ip
 800f4ac:	bf34      	ite	cc
 800f4ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f4b2:	2100      	movcs	r1, #0
 800f4b4:	3015      	adds	r0, #21
 800f4b6:	fa04 f000 	lsl.w	r0, r4, r0
 800f4ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800f4be:	ea40 0201 	orr.w	r2, r0, r1
 800f4c2:	ec43 2b10 	vmov	d0, r2, r3
 800f4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4c8:	42b7      	cmp	r7, r6
 800f4ca:	bf3a      	itte	cc
 800f4cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f4d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800f4d4:	2100      	movcs	r1, #0
 800f4d6:	380b      	subs	r0, #11
 800f4d8:	d017      	beq.n	800f50a <__b2d+0x92>
 800f4da:	f1c0 0c20 	rsb	ip, r0, #32
 800f4de:	fa04 f500 	lsl.w	r5, r4, r0
 800f4e2:	42be      	cmp	r6, r7
 800f4e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800f4e8:	ea45 0504 	orr.w	r5, r5, r4
 800f4ec:	bf8c      	ite	hi
 800f4ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f4f2:	2400      	movls	r4, #0
 800f4f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f4f8:	fa01 f000 	lsl.w	r0, r1, r0
 800f4fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800f500:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f504:	ea40 0204 	orr.w	r2, r0, r4
 800f508:	e7db      	b.n	800f4c2 <__b2d+0x4a>
 800f50a:	ea44 030c 	orr.w	r3, r4, ip
 800f50e:	460a      	mov	r2, r1
 800f510:	e7d7      	b.n	800f4c2 <__b2d+0x4a>
 800f512:	bf00      	nop
 800f514:	3ff00000 	.word	0x3ff00000

0800f518 <__d2b>:
 800f518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f51c:	4689      	mov	r9, r1
 800f51e:	2101      	movs	r1, #1
 800f520:	ec57 6b10 	vmov	r6, r7, d0
 800f524:	4690      	mov	r8, r2
 800f526:	f7ff fc09 	bl	800ed3c <_Balloc>
 800f52a:	4604      	mov	r4, r0
 800f52c:	b930      	cbnz	r0, 800f53c <__d2b+0x24>
 800f52e:	4602      	mov	r2, r0
 800f530:	4b25      	ldr	r3, [pc, #148]	; (800f5c8 <__d2b+0xb0>)
 800f532:	4826      	ldr	r0, [pc, #152]	; (800f5cc <__d2b+0xb4>)
 800f534:	f240 310a 	movw	r1, #778	; 0x30a
 800f538:	f7fe f93a 	bl	800d7b0 <__assert_func>
 800f53c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f544:	bb35      	cbnz	r5, 800f594 <__d2b+0x7c>
 800f546:	2e00      	cmp	r6, #0
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	d028      	beq.n	800f59e <__d2b+0x86>
 800f54c:	4668      	mov	r0, sp
 800f54e:	9600      	str	r6, [sp, #0]
 800f550:	f7ff fd06 	bl	800ef60 <__lo0bits>
 800f554:	9900      	ldr	r1, [sp, #0]
 800f556:	b300      	cbz	r0, 800f59a <__d2b+0x82>
 800f558:	9a01      	ldr	r2, [sp, #4]
 800f55a:	f1c0 0320 	rsb	r3, r0, #32
 800f55e:	fa02 f303 	lsl.w	r3, r2, r3
 800f562:	430b      	orrs	r3, r1
 800f564:	40c2      	lsrs	r2, r0
 800f566:	6163      	str	r3, [r4, #20]
 800f568:	9201      	str	r2, [sp, #4]
 800f56a:	9b01      	ldr	r3, [sp, #4]
 800f56c:	61a3      	str	r3, [r4, #24]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	bf14      	ite	ne
 800f572:	2202      	movne	r2, #2
 800f574:	2201      	moveq	r2, #1
 800f576:	6122      	str	r2, [r4, #16]
 800f578:	b1d5      	cbz	r5, 800f5b0 <__d2b+0x98>
 800f57a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f57e:	4405      	add	r5, r0
 800f580:	f8c9 5000 	str.w	r5, [r9]
 800f584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f588:	f8c8 0000 	str.w	r0, [r8]
 800f58c:	4620      	mov	r0, r4
 800f58e:	b003      	add	sp, #12
 800f590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f598:	e7d5      	b.n	800f546 <__d2b+0x2e>
 800f59a:	6161      	str	r1, [r4, #20]
 800f59c:	e7e5      	b.n	800f56a <__d2b+0x52>
 800f59e:	a801      	add	r0, sp, #4
 800f5a0:	f7ff fcde 	bl	800ef60 <__lo0bits>
 800f5a4:	9b01      	ldr	r3, [sp, #4]
 800f5a6:	6163      	str	r3, [r4, #20]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	6122      	str	r2, [r4, #16]
 800f5ac:	3020      	adds	r0, #32
 800f5ae:	e7e3      	b.n	800f578 <__d2b+0x60>
 800f5b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5b8:	f8c9 0000 	str.w	r0, [r9]
 800f5bc:	6918      	ldr	r0, [r3, #16]
 800f5be:	f7ff fcaf 	bl	800ef20 <__hi0bits>
 800f5c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5c6:	e7df      	b.n	800f588 <__d2b+0x70>
 800f5c8:	08010e64 	.word	0x08010e64
 800f5cc:	08010ef0 	.word	0x08010ef0

0800f5d0 <__ratio>:
 800f5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	4688      	mov	r8, r1
 800f5d6:	4669      	mov	r1, sp
 800f5d8:	4681      	mov	r9, r0
 800f5da:	f7ff ff4d 	bl	800f478 <__b2d>
 800f5de:	a901      	add	r1, sp, #4
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	ec55 4b10 	vmov	r4, r5, d0
 800f5e6:	f7ff ff47 	bl	800f478 <__b2d>
 800f5ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f5f2:	eba3 0c02 	sub.w	ip, r3, r2
 800f5f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f600:	ec51 0b10 	vmov	r0, r1, d0
 800f604:	2b00      	cmp	r3, #0
 800f606:	bfd6      	itet	le
 800f608:	460a      	movle	r2, r1
 800f60a:	462a      	movgt	r2, r5
 800f60c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f610:	468b      	mov	fp, r1
 800f612:	462f      	mov	r7, r5
 800f614:	bfd4      	ite	le
 800f616:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f61a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f61e:	4620      	mov	r0, r4
 800f620:	ee10 2a10 	vmov	r2, s0
 800f624:	465b      	mov	r3, fp
 800f626:	4639      	mov	r1, r7
 800f628:	f7f1 f928 	bl	800087c <__aeabi_ddiv>
 800f62c:	ec41 0b10 	vmov	d0, r0, r1
 800f630:	b003      	add	sp, #12
 800f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f636 <__copybits>:
 800f636:	3901      	subs	r1, #1
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	1149      	asrs	r1, r1, #5
 800f63c:	6914      	ldr	r4, [r2, #16]
 800f63e:	3101      	adds	r1, #1
 800f640:	f102 0314 	add.w	r3, r2, #20
 800f644:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f648:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f64c:	1f05      	subs	r5, r0, #4
 800f64e:	42a3      	cmp	r3, r4
 800f650:	d30c      	bcc.n	800f66c <__copybits+0x36>
 800f652:	1aa3      	subs	r3, r4, r2
 800f654:	3b11      	subs	r3, #17
 800f656:	f023 0303 	bic.w	r3, r3, #3
 800f65a:	3211      	adds	r2, #17
 800f65c:	42a2      	cmp	r2, r4
 800f65e:	bf88      	it	hi
 800f660:	2300      	movhi	r3, #0
 800f662:	4418      	add	r0, r3
 800f664:	2300      	movs	r3, #0
 800f666:	4288      	cmp	r0, r1
 800f668:	d305      	bcc.n	800f676 <__copybits+0x40>
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f670:	f845 6f04 	str.w	r6, [r5, #4]!
 800f674:	e7eb      	b.n	800f64e <__copybits+0x18>
 800f676:	f840 3b04 	str.w	r3, [r0], #4
 800f67a:	e7f4      	b.n	800f666 <__copybits+0x30>

0800f67c <__any_on>:
 800f67c:	f100 0214 	add.w	r2, r0, #20
 800f680:	6900      	ldr	r0, [r0, #16]
 800f682:	114b      	asrs	r3, r1, #5
 800f684:	4298      	cmp	r0, r3
 800f686:	b510      	push	{r4, lr}
 800f688:	db11      	blt.n	800f6ae <__any_on+0x32>
 800f68a:	dd0a      	ble.n	800f6a2 <__any_on+0x26>
 800f68c:	f011 011f 	ands.w	r1, r1, #31
 800f690:	d007      	beq.n	800f6a2 <__any_on+0x26>
 800f692:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f696:	fa24 f001 	lsr.w	r0, r4, r1
 800f69a:	fa00 f101 	lsl.w	r1, r0, r1
 800f69e:	428c      	cmp	r4, r1
 800f6a0:	d10b      	bne.n	800f6ba <__any_on+0x3e>
 800f6a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d803      	bhi.n	800f6b2 <__any_on+0x36>
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	bd10      	pop	{r4, pc}
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	e7f7      	b.n	800f6a2 <__any_on+0x26>
 800f6b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	d0f5      	beq.n	800f6a6 <__any_on+0x2a>
 800f6ba:	2001      	movs	r0, #1
 800f6bc:	e7f6      	b.n	800f6ac <__any_on+0x30>

0800f6be <_calloc_r>:
 800f6be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6c0:	fba1 2402 	umull	r2, r4, r1, r2
 800f6c4:	b94c      	cbnz	r4, 800f6da <_calloc_r+0x1c>
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	9201      	str	r2, [sp, #4]
 800f6ca:	f7fc faa7 	bl	800bc1c <_malloc_r>
 800f6ce:	9a01      	ldr	r2, [sp, #4]
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	b930      	cbnz	r0, 800f6e2 <_calloc_r+0x24>
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	b003      	add	sp, #12
 800f6d8:	bd30      	pop	{r4, r5, pc}
 800f6da:	220c      	movs	r2, #12
 800f6dc:	6002      	str	r2, [r0, #0]
 800f6de:	2500      	movs	r5, #0
 800f6e0:	e7f8      	b.n	800f6d4 <_calloc_r+0x16>
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	f7fc fa26 	bl	800bb34 <memset>
 800f6e8:	e7f4      	b.n	800f6d4 <_calloc_r+0x16>

0800f6ea <_realloc_r>:
 800f6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ee:	4680      	mov	r8, r0
 800f6f0:	4614      	mov	r4, r2
 800f6f2:	460e      	mov	r6, r1
 800f6f4:	b921      	cbnz	r1, 800f700 <_realloc_r+0x16>
 800f6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	f7fc ba8e 	b.w	800bc1c <_malloc_r>
 800f700:	b92a      	cbnz	r2, 800f70e <_realloc_r+0x24>
 800f702:	f7fc fa1f 	bl	800bb44 <_free_r>
 800f706:	4625      	mov	r5, r4
 800f708:	4628      	mov	r0, r5
 800f70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70e:	f000 fb3b 	bl	800fd88 <_malloc_usable_size_r>
 800f712:	4284      	cmp	r4, r0
 800f714:	4607      	mov	r7, r0
 800f716:	d802      	bhi.n	800f71e <_realloc_r+0x34>
 800f718:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f71c:	d812      	bhi.n	800f744 <_realloc_r+0x5a>
 800f71e:	4621      	mov	r1, r4
 800f720:	4640      	mov	r0, r8
 800f722:	f7fc fa7b 	bl	800bc1c <_malloc_r>
 800f726:	4605      	mov	r5, r0
 800f728:	2800      	cmp	r0, #0
 800f72a:	d0ed      	beq.n	800f708 <_realloc_r+0x1e>
 800f72c:	42bc      	cmp	r4, r7
 800f72e:	4622      	mov	r2, r4
 800f730:	4631      	mov	r1, r6
 800f732:	bf28      	it	cs
 800f734:	463a      	movcs	r2, r7
 800f736:	f7fc f9ef 	bl	800bb18 <memcpy>
 800f73a:	4631      	mov	r1, r6
 800f73c:	4640      	mov	r0, r8
 800f73e:	f7fc fa01 	bl	800bb44 <_free_r>
 800f742:	e7e1      	b.n	800f708 <_realloc_r+0x1e>
 800f744:	4635      	mov	r5, r6
 800f746:	e7df      	b.n	800f708 <_realloc_r+0x1e>

0800f748 <__ssputs_r>:
 800f748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f74c:	688e      	ldr	r6, [r1, #8]
 800f74e:	429e      	cmp	r6, r3
 800f750:	4682      	mov	sl, r0
 800f752:	460c      	mov	r4, r1
 800f754:	4690      	mov	r8, r2
 800f756:	461f      	mov	r7, r3
 800f758:	d838      	bhi.n	800f7cc <__ssputs_r+0x84>
 800f75a:	898a      	ldrh	r2, [r1, #12]
 800f75c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f760:	d032      	beq.n	800f7c8 <__ssputs_r+0x80>
 800f762:	6825      	ldr	r5, [r4, #0]
 800f764:	6909      	ldr	r1, [r1, #16]
 800f766:	eba5 0901 	sub.w	r9, r5, r1
 800f76a:	6965      	ldr	r5, [r4, #20]
 800f76c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f774:	3301      	adds	r3, #1
 800f776:	444b      	add	r3, r9
 800f778:	106d      	asrs	r5, r5, #1
 800f77a:	429d      	cmp	r5, r3
 800f77c:	bf38      	it	cc
 800f77e:	461d      	movcc	r5, r3
 800f780:	0553      	lsls	r3, r2, #21
 800f782:	d531      	bpl.n	800f7e8 <__ssputs_r+0xa0>
 800f784:	4629      	mov	r1, r5
 800f786:	f7fc fa49 	bl	800bc1c <_malloc_r>
 800f78a:	4606      	mov	r6, r0
 800f78c:	b950      	cbnz	r0, 800f7a4 <__ssputs_r+0x5c>
 800f78e:	230c      	movs	r3, #12
 800f790:	f8ca 3000 	str.w	r3, [sl]
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f79a:	81a3      	strh	r3, [r4, #12]
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a4:	6921      	ldr	r1, [r4, #16]
 800f7a6:	464a      	mov	r2, r9
 800f7a8:	f7fc f9b6 	bl	800bb18 <memcpy>
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7b6:	81a3      	strh	r3, [r4, #12]
 800f7b8:	6126      	str	r6, [r4, #16]
 800f7ba:	6165      	str	r5, [r4, #20]
 800f7bc:	444e      	add	r6, r9
 800f7be:	eba5 0509 	sub.w	r5, r5, r9
 800f7c2:	6026      	str	r6, [r4, #0]
 800f7c4:	60a5      	str	r5, [r4, #8]
 800f7c6:	463e      	mov	r6, r7
 800f7c8:	42be      	cmp	r6, r7
 800f7ca:	d900      	bls.n	800f7ce <__ssputs_r+0x86>
 800f7cc:	463e      	mov	r6, r7
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	4632      	mov	r2, r6
 800f7d2:	4641      	mov	r1, r8
 800f7d4:	f000 fabe 	bl	800fd54 <memmove>
 800f7d8:	68a3      	ldr	r3, [r4, #8]
 800f7da:	1b9b      	subs	r3, r3, r6
 800f7dc:	60a3      	str	r3, [r4, #8]
 800f7de:	6823      	ldr	r3, [r4, #0]
 800f7e0:	4433      	add	r3, r6
 800f7e2:	6023      	str	r3, [r4, #0]
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	e7db      	b.n	800f7a0 <__ssputs_r+0x58>
 800f7e8:	462a      	mov	r2, r5
 800f7ea:	f7ff ff7e 	bl	800f6ea <_realloc_r>
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d1e1      	bne.n	800f7b8 <__ssputs_r+0x70>
 800f7f4:	6921      	ldr	r1, [r4, #16]
 800f7f6:	4650      	mov	r0, sl
 800f7f8:	f7fc f9a4 	bl	800bb44 <_free_r>
 800f7fc:	e7c7      	b.n	800f78e <__ssputs_r+0x46>
	...

0800f800 <_svfiprintf_r>:
 800f800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f804:	4698      	mov	r8, r3
 800f806:	898b      	ldrh	r3, [r1, #12]
 800f808:	061b      	lsls	r3, r3, #24
 800f80a:	b09d      	sub	sp, #116	; 0x74
 800f80c:	4607      	mov	r7, r0
 800f80e:	460d      	mov	r5, r1
 800f810:	4614      	mov	r4, r2
 800f812:	d50e      	bpl.n	800f832 <_svfiprintf_r+0x32>
 800f814:	690b      	ldr	r3, [r1, #16]
 800f816:	b963      	cbnz	r3, 800f832 <_svfiprintf_r+0x32>
 800f818:	2140      	movs	r1, #64	; 0x40
 800f81a:	f7fc f9ff 	bl	800bc1c <_malloc_r>
 800f81e:	6028      	str	r0, [r5, #0]
 800f820:	6128      	str	r0, [r5, #16]
 800f822:	b920      	cbnz	r0, 800f82e <_svfiprintf_r+0x2e>
 800f824:	230c      	movs	r3, #12
 800f826:	603b      	str	r3, [r7, #0]
 800f828:	f04f 30ff 	mov.w	r0, #4294967295
 800f82c:	e0d1      	b.n	800f9d2 <_svfiprintf_r+0x1d2>
 800f82e:	2340      	movs	r3, #64	; 0x40
 800f830:	616b      	str	r3, [r5, #20]
 800f832:	2300      	movs	r3, #0
 800f834:	9309      	str	r3, [sp, #36]	; 0x24
 800f836:	2320      	movs	r3, #32
 800f838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f840:	2330      	movs	r3, #48	; 0x30
 800f842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f9ec <_svfiprintf_r+0x1ec>
 800f846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f84a:	f04f 0901 	mov.w	r9, #1
 800f84e:	4623      	mov	r3, r4
 800f850:	469a      	mov	sl, r3
 800f852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f856:	b10a      	cbz	r2, 800f85c <_svfiprintf_r+0x5c>
 800f858:	2a25      	cmp	r2, #37	; 0x25
 800f85a:	d1f9      	bne.n	800f850 <_svfiprintf_r+0x50>
 800f85c:	ebba 0b04 	subs.w	fp, sl, r4
 800f860:	d00b      	beq.n	800f87a <_svfiprintf_r+0x7a>
 800f862:	465b      	mov	r3, fp
 800f864:	4622      	mov	r2, r4
 800f866:	4629      	mov	r1, r5
 800f868:	4638      	mov	r0, r7
 800f86a:	f7ff ff6d 	bl	800f748 <__ssputs_r>
 800f86e:	3001      	adds	r0, #1
 800f870:	f000 80aa 	beq.w	800f9c8 <_svfiprintf_r+0x1c8>
 800f874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f876:	445a      	add	r2, fp
 800f878:	9209      	str	r2, [sp, #36]	; 0x24
 800f87a:	f89a 3000 	ldrb.w	r3, [sl]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f000 80a2 	beq.w	800f9c8 <_svfiprintf_r+0x1c8>
 800f884:	2300      	movs	r3, #0
 800f886:	f04f 32ff 	mov.w	r2, #4294967295
 800f88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f88e:	f10a 0a01 	add.w	sl, sl, #1
 800f892:	9304      	str	r3, [sp, #16]
 800f894:	9307      	str	r3, [sp, #28]
 800f896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f89a:	931a      	str	r3, [sp, #104]	; 0x68
 800f89c:	4654      	mov	r4, sl
 800f89e:	2205      	movs	r2, #5
 800f8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a4:	4851      	ldr	r0, [pc, #324]	; (800f9ec <_svfiprintf_r+0x1ec>)
 800f8a6:	f7f0 fcb3 	bl	8000210 <memchr>
 800f8aa:	9a04      	ldr	r2, [sp, #16]
 800f8ac:	b9d8      	cbnz	r0, 800f8e6 <_svfiprintf_r+0xe6>
 800f8ae:	06d0      	lsls	r0, r2, #27
 800f8b0:	bf44      	itt	mi
 800f8b2:	2320      	movmi	r3, #32
 800f8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b8:	0711      	lsls	r1, r2, #28
 800f8ba:	bf44      	itt	mi
 800f8bc:	232b      	movmi	r3, #43	; 0x2b
 800f8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c8:	d015      	beq.n	800f8f6 <_svfiprintf_r+0xf6>
 800f8ca:	9a07      	ldr	r2, [sp, #28]
 800f8cc:	4654      	mov	r4, sl
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	f04f 0c0a 	mov.w	ip, #10
 800f8d4:	4621      	mov	r1, r4
 800f8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8da:	3b30      	subs	r3, #48	; 0x30
 800f8dc:	2b09      	cmp	r3, #9
 800f8de:	d94e      	bls.n	800f97e <_svfiprintf_r+0x17e>
 800f8e0:	b1b0      	cbz	r0, 800f910 <_svfiprintf_r+0x110>
 800f8e2:	9207      	str	r2, [sp, #28]
 800f8e4:	e014      	b.n	800f910 <_svfiprintf_r+0x110>
 800f8e6:	eba0 0308 	sub.w	r3, r0, r8
 800f8ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	9304      	str	r3, [sp, #16]
 800f8f2:	46a2      	mov	sl, r4
 800f8f4:	e7d2      	b.n	800f89c <_svfiprintf_r+0x9c>
 800f8f6:	9b03      	ldr	r3, [sp, #12]
 800f8f8:	1d19      	adds	r1, r3, #4
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	9103      	str	r1, [sp, #12]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	bfbb      	ittet	lt
 800f902:	425b      	neglt	r3, r3
 800f904:	f042 0202 	orrlt.w	r2, r2, #2
 800f908:	9307      	strge	r3, [sp, #28]
 800f90a:	9307      	strlt	r3, [sp, #28]
 800f90c:	bfb8      	it	lt
 800f90e:	9204      	strlt	r2, [sp, #16]
 800f910:	7823      	ldrb	r3, [r4, #0]
 800f912:	2b2e      	cmp	r3, #46	; 0x2e
 800f914:	d10c      	bne.n	800f930 <_svfiprintf_r+0x130>
 800f916:	7863      	ldrb	r3, [r4, #1]
 800f918:	2b2a      	cmp	r3, #42	; 0x2a
 800f91a:	d135      	bne.n	800f988 <_svfiprintf_r+0x188>
 800f91c:	9b03      	ldr	r3, [sp, #12]
 800f91e:	1d1a      	adds	r2, r3, #4
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	9203      	str	r2, [sp, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	bfb8      	it	lt
 800f928:	f04f 33ff 	movlt.w	r3, #4294967295
 800f92c:	3402      	adds	r4, #2
 800f92e:	9305      	str	r3, [sp, #20]
 800f930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f9fc <_svfiprintf_r+0x1fc>
 800f934:	7821      	ldrb	r1, [r4, #0]
 800f936:	2203      	movs	r2, #3
 800f938:	4650      	mov	r0, sl
 800f93a:	f7f0 fc69 	bl	8000210 <memchr>
 800f93e:	b140      	cbz	r0, 800f952 <_svfiprintf_r+0x152>
 800f940:	2340      	movs	r3, #64	; 0x40
 800f942:	eba0 000a 	sub.w	r0, r0, sl
 800f946:	fa03 f000 	lsl.w	r0, r3, r0
 800f94a:	9b04      	ldr	r3, [sp, #16]
 800f94c:	4303      	orrs	r3, r0
 800f94e:	3401      	adds	r4, #1
 800f950:	9304      	str	r3, [sp, #16]
 800f952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f956:	4826      	ldr	r0, [pc, #152]	; (800f9f0 <_svfiprintf_r+0x1f0>)
 800f958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f95c:	2206      	movs	r2, #6
 800f95e:	f7f0 fc57 	bl	8000210 <memchr>
 800f962:	2800      	cmp	r0, #0
 800f964:	d038      	beq.n	800f9d8 <_svfiprintf_r+0x1d8>
 800f966:	4b23      	ldr	r3, [pc, #140]	; (800f9f4 <_svfiprintf_r+0x1f4>)
 800f968:	bb1b      	cbnz	r3, 800f9b2 <_svfiprintf_r+0x1b2>
 800f96a:	9b03      	ldr	r3, [sp, #12]
 800f96c:	3307      	adds	r3, #7
 800f96e:	f023 0307 	bic.w	r3, r3, #7
 800f972:	3308      	adds	r3, #8
 800f974:	9303      	str	r3, [sp, #12]
 800f976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f978:	4433      	add	r3, r6
 800f97a:	9309      	str	r3, [sp, #36]	; 0x24
 800f97c:	e767      	b.n	800f84e <_svfiprintf_r+0x4e>
 800f97e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f982:	460c      	mov	r4, r1
 800f984:	2001      	movs	r0, #1
 800f986:	e7a5      	b.n	800f8d4 <_svfiprintf_r+0xd4>
 800f988:	2300      	movs	r3, #0
 800f98a:	3401      	adds	r4, #1
 800f98c:	9305      	str	r3, [sp, #20]
 800f98e:	4619      	mov	r1, r3
 800f990:	f04f 0c0a 	mov.w	ip, #10
 800f994:	4620      	mov	r0, r4
 800f996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f99a:	3a30      	subs	r2, #48	; 0x30
 800f99c:	2a09      	cmp	r2, #9
 800f99e:	d903      	bls.n	800f9a8 <_svfiprintf_r+0x1a8>
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d0c5      	beq.n	800f930 <_svfiprintf_r+0x130>
 800f9a4:	9105      	str	r1, [sp, #20]
 800f9a6:	e7c3      	b.n	800f930 <_svfiprintf_r+0x130>
 800f9a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e7f0      	b.n	800f994 <_svfiprintf_r+0x194>
 800f9b2:	ab03      	add	r3, sp, #12
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	462a      	mov	r2, r5
 800f9b8:	4b0f      	ldr	r3, [pc, #60]	; (800f9f8 <_svfiprintf_r+0x1f8>)
 800f9ba:	a904      	add	r1, sp, #16
 800f9bc:	4638      	mov	r0, r7
 800f9be:	f7fc fa41 	bl	800be44 <_printf_float>
 800f9c2:	1c42      	adds	r2, r0, #1
 800f9c4:	4606      	mov	r6, r0
 800f9c6:	d1d6      	bne.n	800f976 <_svfiprintf_r+0x176>
 800f9c8:	89ab      	ldrh	r3, [r5, #12]
 800f9ca:	065b      	lsls	r3, r3, #25
 800f9cc:	f53f af2c 	bmi.w	800f828 <_svfiprintf_r+0x28>
 800f9d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9d2:	b01d      	add	sp, #116	; 0x74
 800f9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d8:	ab03      	add	r3, sp, #12
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	462a      	mov	r2, r5
 800f9de:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <_svfiprintf_r+0x1f8>)
 800f9e0:	a904      	add	r1, sp, #16
 800f9e2:	4638      	mov	r0, r7
 800f9e4:	f7fc fcd2 	bl	800c38c <_printf_i>
 800f9e8:	e7eb      	b.n	800f9c2 <_svfiprintf_r+0x1c2>
 800f9ea:	bf00      	nop
 800f9ec:	0801104c 	.word	0x0801104c
 800f9f0:	08011056 	.word	0x08011056
 800f9f4:	0800be45 	.word	0x0800be45
 800f9f8:	0800f749 	.word	0x0800f749
 800f9fc:	08011052 	.word	0x08011052

0800fa00 <__sfputc_r>:
 800fa00:	6893      	ldr	r3, [r2, #8]
 800fa02:	3b01      	subs	r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	b410      	push	{r4}
 800fa08:	6093      	str	r3, [r2, #8]
 800fa0a:	da08      	bge.n	800fa1e <__sfputc_r+0x1e>
 800fa0c:	6994      	ldr	r4, [r2, #24]
 800fa0e:	42a3      	cmp	r3, r4
 800fa10:	db01      	blt.n	800fa16 <__sfputc_r+0x16>
 800fa12:	290a      	cmp	r1, #10
 800fa14:	d103      	bne.n	800fa1e <__sfputc_r+0x1e>
 800fa16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa1a:	f7fd bdf7 	b.w	800d60c <__swbuf_r>
 800fa1e:	6813      	ldr	r3, [r2, #0]
 800fa20:	1c58      	adds	r0, r3, #1
 800fa22:	6010      	str	r0, [r2, #0]
 800fa24:	7019      	strb	r1, [r3, #0]
 800fa26:	4608      	mov	r0, r1
 800fa28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <__sfputs_r>:
 800fa2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa30:	4606      	mov	r6, r0
 800fa32:	460f      	mov	r7, r1
 800fa34:	4614      	mov	r4, r2
 800fa36:	18d5      	adds	r5, r2, r3
 800fa38:	42ac      	cmp	r4, r5
 800fa3a:	d101      	bne.n	800fa40 <__sfputs_r+0x12>
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	e007      	b.n	800fa50 <__sfputs_r+0x22>
 800fa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa44:	463a      	mov	r2, r7
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7ff ffda 	bl	800fa00 <__sfputc_r>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d1f3      	bne.n	800fa38 <__sfputs_r+0xa>
 800fa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa54 <_vfiprintf_r>:
 800fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa58:	460d      	mov	r5, r1
 800fa5a:	b09d      	sub	sp, #116	; 0x74
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	4698      	mov	r8, r3
 800fa60:	4606      	mov	r6, r0
 800fa62:	b118      	cbz	r0, 800fa6c <_vfiprintf_r+0x18>
 800fa64:	6983      	ldr	r3, [r0, #24]
 800fa66:	b90b      	cbnz	r3, 800fa6c <_vfiprintf_r+0x18>
 800fa68:	f7fb ff80 	bl	800b96c <__sinit>
 800fa6c:	4b89      	ldr	r3, [pc, #548]	; (800fc94 <_vfiprintf_r+0x240>)
 800fa6e:	429d      	cmp	r5, r3
 800fa70:	d11b      	bne.n	800faaa <_vfiprintf_r+0x56>
 800fa72:	6875      	ldr	r5, [r6, #4]
 800fa74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa76:	07d9      	lsls	r1, r3, #31
 800fa78:	d405      	bmi.n	800fa86 <_vfiprintf_r+0x32>
 800fa7a:	89ab      	ldrh	r3, [r5, #12]
 800fa7c:	059a      	lsls	r2, r3, #22
 800fa7e:	d402      	bmi.n	800fa86 <_vfiprintf_r+0x32>
 800fa80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa82:	f7fc f836 	bl	800baf2 <__retarget_lock_acquire_recursive>
 800fa86:	89ab      	ldrh	r3, [r5, #12]
 800fa88:	071b      	lsls	r3, r3, #28
 800fa8a:	d501      	bpl.n	800fa90 <_vfiprintf_r+0x3c>
 800fa8c:	692b      	ldr	r3, [r5, #16]
 800fa8e:	b9eb      	cbnz	r3, 800facc <_vfiprintf_r+0x78>
 800fa90:	4629      	mov	r1, r5
 800fa92:	4630      	mov	r0, r6
 800fa94:	f7fd fe1e 	bl	800d6d4 <__swsetup_r>
 800fa98:	b1c0      	cbz	r0, 800facc <_vfiprintf_r+0x78>
 800fa9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa9c:	07dc      	lsls	r4, r3, #31
 800fa9e:	d50e      	bpl.n	800fabe <_vfiprintf_r+0x6a>
 800faa0:	f04f 30ff 	mov.w	r0, #4294967295
 800faa4:	b01d      	add	sp, #116	; 0x74
 800faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faaa:	4b7b      	ldr	r3, [pc, #492]	; (800fc98 <_vfiprintf_r+0x244>)
 800faac:	429d      	cmp	r5, r3
 800faae:	d101      	bne.n	800fab4 <_vfiprintf_r+0x60>
 800fab0:	68b5      	ldr	r5, [r6, #8]
 800fab2:	e7df      	b.n	800fa74 <_vfiprintf_r+0x20>
 800fab4:	4b79      	ldr	r3, [pc, #484]	; (800fc9c <_vfiprintf_r+0x248>)
 800fab6:	429d      	cmp	r5, r3
 800fab8:	bf08      	it	eq
 800faba:	68f5      	ldreq	r5, [r6, #12]
 800fabc:	e7da      	b.n	800fa74 <_vfiprintf_r+0x20>
 800fabe:	89ab      	ldrh	r3, [r5, #12]
 800fac0:	0598      	lsls	r0, r3, #22
 800fac2:	d4ed      	bmi.n	800faa0 <_vfiprintf_r+0x4c>
 800fac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fac6:	f7fc f815 	bl	800baf4 <__retarget_lock_release_recursive>
 800faca:	e7e9      	b.n	800faa0 <_vfiprintf_r+0x4c>
 800facc:	2300      	movs	r3, #0
 800face:	9309      	str	r3, [sp, #36]	; 0x24
 800fad0:	2320      	movs	r3, #32
 800fad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fad6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fada:	2330      	movs	r3, #48	; 0x30
 800fadc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fca0 <_vfiprintf_r+0x24c>
 800fae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fae4:	f04f 0901 	mov.w	r9, #1
 800fae8:	4623      	mov	r3, r4
 800faea:	469a      	mov	sl, r3
 800faec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faf0:	b10a      	cbz	r2, 800faf6 <_vfiprintf_r+0xa2>
 800faf2:	2a25      	cmp	r2, #37	; 0x25
 800faf4:	d1f9      	bne.n	800faea <_vfiprintf_r+0x96>
 800faf6:	ebba 0b04 	subs.w	fp, sl, r4
 800fafa:	d00b      	beq.n	800fb14 <_vfiprintf_r+0xc0>
 800fafc:	465b      	mov	r3, fp
 800fafe:	4622      	mov	r2, r4
 800fb00:	4629      	mov	r1, r5
 800fb02:	4630      	mov	r0, r6
 800fb04:	f7ff ff93 	bl	800fa2e <__sfputs_r>
 800fb08:	3001      	adds	r0, #1
 800fb0a:	f000 80aa 	beq.w	800fc62 <_vfiprintf_r+0x20e>
 800fb0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb10:	445a      	add	r2, fp
 800fb12:	9209      	str	r2, [sp, #36]	; 0x24
 800fb14:	f89a 3000 	ldrb.w	r3, [sl]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f000 80a2 	beq.w	800fc62 <_vfiprintf_r+0x20e>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	f04f 32ff 	mov.w	r2, #4294967295
 800fb24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb28:	f10a 0a01 	add.w	sl, sl, #1
 800fb2c:	9304      	str	r3, [sp, #16]
 800fb2e:	9307      	str	r3, [sp, #28]
 800fb30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb34:	931a      	str	r3, [sp, #104]	; 0x68
 800fb36:	4654      	mov	r4, sl
 800fb38:	2205      	movs	r2, #5
 800fb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb3e:	4858      	ldr	r0, [pc, #352]	; (800fca0 <_vfiprintf_r+0x24c>)
 800fb40:	f7f0 fb66 	bl	8000210 <memchr>
 800fb44:	9a04      	ldr	r2, [sp, #16]
 800fb46:	b9d8      	cbnz	r0, 800fb80 <_vfiprintf_r+0x12c>
 800fb48:	06d1      	lsls	r1, r2, #27
 800fb4a:	bf44      	itt	mi
 800fb4c:	2320      	movmi	r3, #32
 800fb4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb52:	0713      	lsls	r3, r2, #28
 800fb54:	bf44      	itt	mi
 800fb56:	232b      	movmi	r3, #43	; 0x2b
 800fb58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb60:	2b2a      	cmp	r3, #42	; 0x2a
 800fb62:	d015      	beq.n	800fb90 <_vfiprintf_r+0x13c>
 800fb64:	9a07      	ldr	r2, [sp, #28]
 800fb66:	4654      	mov	r4, sl
 800fb68:	2000      	movs	r0, #0
 800fb6a:	f04f 0c0a 	mov.w	ip, #10
 800fb6e:	4621      	mov	r1, r4
 800fb70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb74:	3b30      	subs	r3, #48	; 0x30
 800fb76:	2b09      	cmp	r3, #9
 800fb78:	d94e      	bls.n	800fc18 <_vfiprintf_r+0x1c4>
 800fb7a:	b1b0      	cbz	r0, 800fbaa <_vfiprintf_r+0x156>
 800fb7c:	9207      	str	r2, [sp, #28]
 800fb7e:	e014      	b.n	800fbaa <_vfiprintf_r+0x156>
 800fb80:	eba0 0308 	sub.w	r3, r0, r8
 800fb84:	fa09 f303 	lsl.w	r3, r9, r3
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	9304      	str	r3, [sp, #16]
 800fb8c:	46a2      	mov	sl, r4
 800fb8e:	e7d2      	b.n	800fb36 <_vfiprintf_r+0xe2>
 800fb90:	9b03      	ldr	r3, [sp, #12]
 800fb92:	1d19      	adds	r1, r3, #4
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	9103      	str	r1, [sp, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	bfbb      	ittet	lt
 800fb9c:	425b      	neglt	r3, r3
 800fb9e:	f042 0202 	orrlt.w	r2, r2, #2
 800fba2:	9307      	strge	r3, [sp, #28]
 800fba4:	9307      	strlt	r3, [sp, #28]
 800fba6:	bfb8      	it	lt
 800fba8:	9204      	strlt	r2, [sp, #16]
 800fbaa:	7823      	ldrb	r3, [r4, #0]
 800fbac:	2b2e      	cmp	r3, #46	; 0x2e
 800fbae:	d10c      	bne.n	800fbca <_vfiprintf_r+0x176>
 800fbb0:	7863      	ldrb	r3, [r4, #1]
 800fbb2:	2b2a      	cmp	r3, #42	; 0x2a
 800fbb4:	d135      	bne.n	800fc22 <_vfiprintf_r+0x1ce>
 800fbb6:	9b03      	ldr	r3, [sp, #12]
 800fbb8:	1d1a      	adds	r2, r3, #4
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	9203      	str	r2, [sp, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	bfb8      	it	lt
 800fbc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbc6:	3402      	adds	r4, #2
 800fbc8:	9305      	str	r3, [sp, #20]
 800fbca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fcb0 <_vfiprintf_r+0x25c>
 800fbce:	7821      	ldrb	r1, [r4, #0]
 800fbd0:	2203      	movs	r2, #3
 800fbd2:	4650      	mov	r0, sl
 800fbd4:	f7f0 fb1c 	bl	8000210 <memchr>
 800fbd8:	b140      	cbz	r0, 800fbec <_vfiprintf_r+0x198>
 800fbda:	2340      	movs	r3, #64	; 0x40
 800fbdc:	eba0 000a 	sub.w	r0, r0, sl
 800fbe0:	fa03 f000 	lsl.w	r0, r3, r0
 800fbe4:	9b04      	ldr	r3, [sp, #16]
 800fbe6:	4303      	orrs	r3, r0
 800fbe8:	3401      	adds	r4, #1
 800fbea:	9304      	str	r3, [sp, #16]
 800fbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbf0:	482c      	ldr	r0, [pc, #176]	; (800fca4 <_vfiprintf_r+0x250>)
 800fbf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbf6:	2206      	movs	r2, #6
 800fbf8:	f7f0 fb0a 	bl	8000210 <memchr>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d03f      	beq.n	800fc80 <_vfiprintf_r+0x22c>
 800fc00:	4b29      	ldr	r3, [pc, #164]	; (800fca8 <_vfiprintf_r+0x254>)
 800fc02:	bb1b      	cbnz	r3, 800fc4c <_vfiprintf_r+0x1f8>
 800fc04:	9b03      	ldr	r3, [sp, #12]
 800fc06:	3307      	adds	r3, #7
 800fc08:	f023 0307 	bic.w	r3, r3, #7
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	9303      	str	r3, [sp, #12]
 800fc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc12:	443b      	add	r3, r7
 800fc14:	9309      	str	r3, [sp, #36]	; 0x24
 800fc16:	e767      	b.n	800fae8 <_vfiprintf_r+0x94>
 800fc18:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	2001      	movs	r0, #1
 800fc20:	e7a5      	b.n	800fb6e <_vfiprintf_r+0x11a>
 800fc22:	2300      	movs	r3, #0
 800fc24:	3401      	adds	r4, #1
 800fc26:	9305      	str	r3, [sp, #20]
 800fc28:	4619      	mov	r1, r3
 800fc2a:	f04f 0c0a 	mov.w	ip, #10
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc34:	3a30      	subs	r2, #48	; 0x30
 800fc36:	2a09      	cmp	r2, #9
 800fc38:	d903      	bls.n	800fc42 <_vfiprintf_r+0x1ee>
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d0c5      	beq.n	800fbca <_vfiprintf_r+0x176>
 800fc3e:	9105      	str	r1, [sp, #20]
 800fc40:	e7c3      	b.n	800fbca <_vfiprintf_r+0x176>
 800fc42:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc46:	4604      	mov	r4, r0
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e7f0      	b.n	800fc2e <_vfiprintf_r+0x1da>
 800fc4c:	ab03      	add	r3, sp, #12
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	462a      	mov	r2, r5
 800fc52:	4b16      	ldr	r3, [pc, #88]	; (800fcac <_vfiprintf_r+0x258>)
 800fc54:	a904      	add	r1, sp, #16
 800fc56:	4630      	mov	r0, r6
 800fc58:	f7fc f8f4 	bl	800be44 <_printf_float>
 800fc5c:	4607      	mov	r7, r0
 800fc5e:	1c78      	adds	r0, r7, #1
 800fc60:	d1d6      	bne.n	800fc10 <_vfiprintf_r+0x1bc>
 800fc62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc64:	07d9      	lsls	r1, r3, #31
 800fc66:	d405      	bmi.n	800fc74 <_vfiprintf_r+0x220>
 800fc68:	89ab      	ldrh	r3, [r5, #12]
 800fc6a:	059a      	lsls	r2, r3, #22
 800fc6c:	d402      	bmi.n	800fc74 <_vfiprintf_r+0x220>
 800fc6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc70:	f7fb ff40 	bl	800baf4 <__retarget_lock_release_recursive>
 800fc74:	89ab      	ldrh	r3, [r5, #12]
 800fc76:	065b      	lsls	r3, r3, #25
 800fc78:	f53f af12 	bmi.w	800faa0 <_vfiprintf_r+0x4c>
 800fc7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc7e:	e711      	b.n	800faa4 <_vfiprintf_r+0x50>
 800fc80:	ab03      	add	r3, sp, #12
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	462a      	mov	r2, r5
 800fc86:	4b09      	ldr	r3, [pc, #36]	; (800fcac <_vfiprintf_r+0x258>)
 800fc88:	a904      	add	r1, sp, #16
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f7fc fb7e 	bl	800c38c <_printf_i>
 800fc90:	e7e4      	b.n	800fc5c <_vfiprintf_r+0x208>
 800fc92:	bf00      	nop
 800fc94:	08010c84 	.word	0x08010c84
 800fc98:	08010ca4 	.word	0x08010ca4
 800fc9c:	08010c64 	.word	0x08010c64
 800fca0:	0801104c 	.word	0x0801104c
 800fca4:	08011056 	.word	0x08011056
 800fca8:	0800be45 	.word	0x0800be45
 800fcac:	0800fa2f 	.word	0x0800fa2f
 800fcb0:	08011052 	.word	0x08011052

0800fcb4 <_read_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d07      	ldr	r5, [pc, #28]	; (800fcd4 <_read_r+0x20>)
 800fcb8:	4604      	mov	r4, r0
 800fcba:	4608      	mov	r0, r1
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f7f4 fdd4 	bl	8004870 <_read>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_read_r+0x1e>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_read_r+0x1e>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	2001617c 	.word	0x2001617c

0800fcd8 <nan>:
 800fcd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fce0 <nan+0x8>
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	00000000 	.word	0x00000000
 800fce4:	7ff80000 	.word	0x7ff80000

0800fce8 <__ascii_wctomb>:
 800fce8:	b149      	cbz	r1, 800fcfe <__ascii_wctomb+0x16>
 800fcea:	2aff      	cmp	r2, #255	; 0xff
 800fcec:	bf85      	ittet	hi
 800fcee:	238a      	movhi	r3, #138	; 0x8a
 800fcf0:	6003      	strhi	r3, [r0, #0]
 800fcf2:	700a      	strbls	r2, [r1, #0]
 800fcf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fcf8:	bf98      	it	ls
 800fcfa:	2001      	movls	r0, #1
 800fcfc:	4770      	bx	lr
 800fcfe:	4608      	mov	r0, r1
 800fd00:	4770      	bx	lr

0800fd02 <abort>:
 800fd02:	b508      	push	{r3, lr}
 800fd04:	2006      	movs	r0, #6
 800fd06:	f000 f86f 	bl	800fde8 <raise>
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	f7f4 fda6 	bl	800485c <_exit>

0800fd10 <_fstat_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d07      	ldr	r5, [pc, #28]	; (800fd30 <_fstat_r+0x20>)
 800fd14:	2300      	movs	r3, #0
 800fd16:	4604      	mov	r4, r0
 800fd18:	4608      	mov	r0, r1
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	602b      	str	r3, [r5, #0]
 800fd1e:	f7f4 fdd0 	bl	80048c2 <_fstat>
 800fd22:	1c43      	adds	r3, r0, #1
 800fd24:	d102      	bne.n	800fd2c <_fstat_r+0x1c>
 800fd26:	682b      	ldr	r3, [r5, #0]
 800fd28:	b103      	cbz	r3, 800fd2c <_fstat_r+0x1c>
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	bd38      	pop	{r3, r4, r5, pc}
 800fd2e:	bf00      	nop
 800fd30:	2001617c 	.word	0x2001617c

0800fd34 <_isatty_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4d06      	ldr	r5, [pc, #24]	; (800fd50 <_isatty_r+0x1c>)
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	4608      	mov	r0, r1
 800fd3e:	602b      	str	r3, [r5, #0]
 800fd40:	f7f4 fdcf 	bl	80048e2 <_isatty>
 800fd44:	1c43      	adds	r3, r0, #1
 800fd46:	d102      	bne.n	800fd4e <_isatty_r+0x1a>
 800fd48:	682b      	ldr	r3, [r5, #0]
 800fd4a:	b103      	cbz	r3, 800fd4e <_isatty_r+0x1a>
 800fd4c:	6023      	str	r3, [r4, #0]
 800fd4e:	bd38      	pop	{r3, r4, r5, pc}
 800fd50:	2001617c 	.word	0x2001617c

0800fd54 <memmove>:
 800fd54:	4288      	cmp	r0, r1
 800fd56:	b510      	push	{r4, lr}
 800fd58:	eb01 0402 	add.w	r4, r1, r2
 800fd5c:	d902      	bls.n	800fd64 <memmove+0x10>
 800fd5e:	4284      	cmp	r4, r0
 800fd60:	4623      	mov	r3, r4
 800fd62:	d807      	bhi.n	800fd74 <memmove+0x20>
 800fd64:	1e43      	subs	r3, r0, #1
 800fd66:	42a1      	cmp	r1, r4
 800fd68:	d008      	beq.n	800fd7c <memmove+0x28>
 800fd6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd72:	e7f8      	b.n	800fd66 <memmove+0x12>
 800fd74:	4402      	add	r2, r0
 800fd76:	4601      	mov	r1, r0
 800fd78:	428a      	cmp	r2, r1
 800fd7a:	d100      	bne.n	800fd7e <memmove+0x2a>
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd86:	e7f7      	b.n	800fd78 <memmove+0x24>

0800fd88 <_malloc_usable_size_r>:
 800fd88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd8c:	1f18      	subs	r0, r3, #4
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	bfbc      	itt	lt
 800fd92:	580b      	ldrlt	r3, [r1, r0]
 800fd94:	18c0      	addlt	r0, r0, r3
 800fd96:	4770      	bx	lr

0800fd98 <_raise_r>:
 800fd98:	291f      	cmp	r1, #31
 800fd9a:	b538      	push	{r3, r4, r5, lr}
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	460d      	mov	r5, r1
 800fda0:	d904      	bls.n	800fdac <_raise_r+0x14>
 800fda2:	2316      	movs	r3, #22
 800fda4:	6003      	str	r3, [r0, #0]
 800fda6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdaa:	bd38      	pop	{r3, r4, r5, pc}
 800fdac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fdae:	b112      	cbz	r2, 800fdb6 <_raise_r+0x1e>
 800fdb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdb4:	b94b      	cbnz	r3, 800fdca <_raise_r+0x32>
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f000 f830 	bl	800fe1c <_getpid_r>
 800fdbc:	462a      	mov	r2, r5
 800fdbe:	4601      	mov	r1, r0
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdc6:	f000 b817 	b.w	800fdf8 <_kill_r>
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d00a      	beq.n	800fde4 <_raise_r+0x4c>
 800fdce:	1c59      	adds	r1, r3, #1
 800fdd0:	d103      	bne.n	800fdda <_raise_r+0x42>
 800fdd2:	2316      	movs	r3, #22
 800fdd4:	6003      	str	r3, [r0, #0]
 800fdd6:	2001      	movs	r0, #1
 800fdd8:	e7e7      	b.n	800fdaa <_raise_r+0x12>
 800fdda:	2400      	movs	r4, #0
 800fddc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fde0:	4628      	mov	r0, r5
 800fde2:	4798      	blx	r3
 800fde4:	2000      	movs	r0, #0
 800fde6:	e7e0      	b.n	800fdaa <_raise_r+0x12>

0800fde8 <raise>:
 800fde8:	4b02      	ldr	r3, [pc, #8]	; (800fdf4 <raise+0xc>)
 800fdea:	4601      	mov	r1, r0
 800fdec:	6818      	ldr	r0, [r3, #0]
 800fdee:	f7ff bfd3 	b.w	800fd98 <_raise_r>
 800fdf2:	bf00      	nop
 800fdf4:	2000001c 	.word	0x2000001c

0800fdf8 <_kill_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d07      	ldr	r5, [pc, #28]	; (800fe18 <_kill_r+0x20>)
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4608      	mov	r0, r1
 800fe02:	4611      	mov	r1, r2
 800fe04:	602b      	str	r3, [r5, #0]
 800fe06:	f7f4 fd19 	bl	800483c <_kill>
 800fe0a:	1c43      	adds	r3, r0, #1
 800fe0c:	d102      	bne.n	800fe14 <_kill_r+0x1c>
 800fe0e:	682b      	ldr	r3, [r5, #0]
 800fe10:	b103      	cbz	r3, 800fe14 <_kill_r+0x1c>
 800fe12:	6023      	str	r3, [r4, #0]
 800fe14:	bd38      	pop	{r3, r4, r5, pc}
 800fe16:	bf00      	nop
 800fe18:	2001617c 	.word	0x2001617c

0800fe1c <_getpid_r>:
 800fe1c:	f7f4 bd06 	b.w	800482c <_getpid>

0800fe20 <trunc>:
 800fe20:	ec51 0b10 	vmov	r0, r1, d0
 800fe24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fe28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fe2c:	2b13      	cmp	r3, #19
 800fe2e:	b5d0      	push	{r4, r6, r7, lr}
 800fe30:	460c      	mov	r4, r1
 800fe32:	dc10      	bgt.n	800fe56 <trunc+0x36>
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	bfa5      	ittet	ge
 800fe38:	4a11      	ldrge	r2, [pc, #68]	; (800fe80 <trunc+0x60>)
 800fe3a:	fa42 f303 	asrge.w	r3, r2, r3
 800fe3e:	2100      	movlt	r1, #0
 800fe40:	2100      	movge	r1, #0
 800fe42:	bfb9      	ittee	lt
 800fe44:	2000      	movlt	r0, #0
 800fe46:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800fe4a:	2000      	movge	r0, #0
 800fe4c:	ea24 0103 	bicge.w	r1, r4, r3
 800fe50:	ec41 0b10 	vmov	d0, r0, r1
 800fe54:	bdd0      	pop	{r4, r6, r7, pc}
 800fe56:	2b33      	cmp	r3, #51	; 0x33
 800fe58:	dd08      	ble.n	800fe6c <trunc+0x4c>
 800fe5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe5e:	d1f7      	bne.n	800fe50 <trunc+0x30>
 800fe60:	ee10 2a10 	vmov	r2, s0
 800fe64:	460b      	mov	r3, r1
 800fe66:	f7f0 fa29 	bl	80002bc <__adddf3>
 800fe6a:	e7f1      	b.n	800fe50 <trunc+0x30>
 800fe6c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fe70:	f04f 33ff 	mov.w	r3, #4294967295
 800fe74:	fa23 f202 	lsr.w	r2, r3, r2
 800fe78:	ea20 0602 	bic.w	r6, r0, r2
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	e7e7      	b.n	800fe50 <trunc+0x30>
 800fe80:	000fffff 	.word	0x000fffff
 800fe84:	00000000 	.word	0x00000000

0800fe88 <log>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	ed2d 8b02 	vpush	{d8}
 800fe8e:	ec55 4b10 	vmov	r4, r5, d0
 800fe92:	f000 f839 	bl	800ff08 <__ieee754_log>
 800fe96:	4622      	mov	r2, r4
 800fe98:	462b      	mov	r3, r5
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	eeb0 8a40 	vmov.f32	s16, s0
 800fea2:	eef0 8a60 	vmov.f32	s17, s1
 800fea6:	f7f0 fe59 	bl	8000b5c <__aeabi_dcmpun>
 800feaa:	b998      	cbnz	r0, 800fed4 <log+0x4c>
 800feac:	2200      	movs	r2, #0
 800feae:	2300      	movs	r3, #0
 800feb0:	4620      	mov	r0, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	f7f0 fe48 	bl	8000b48 <__aeabi_dcmpgt>
 800feb8:	b960      	cbnz	r0, 800fed4 <log+0x4c>
 800feba:	2200      	movs	r2, #0
 800febc:	2300      	movs	r3, #0
 800febe:	4620      	mov	r0, r4
 800fec0:	4629      	mov	r1, r5
 800fec2:	f7f0 fe19 	bl	8000af8 <__aeabi_dcmpeq>
 800fec6:	b160      	cbz	r0, 800fee2 <log+0x5a>
 800fec8:	f7fb fc1e 	bl	800b708 <__errno>
 800fecc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800fef8 <log+0x70>
 800fed0:	2322      	movs	r3, #34	; 0x22
 800fed2:	6003      	str	r3, [r0, #0]
 800fed4:	eeb0 0a48 	vmov.f32	s0, s16
 800fed8:	eef0 0a68 	vmov.f32	s1, s17
 800fedc:	ecbd 8b02 	vpop	{d8}
 800fee0:	bd38      	pop	{r3, r4, r5, pc}
 800fee2:	f7fb fc11 	bl	800b708 <__errno>
 800fee6:	ecbd 8b02 	vpop	{d8}
 800feea:	2321      	movs	r3, #33	; 0x21
 800feec:	6003      	str	r3, [r0, #0]
 800feee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fef2:	4803      	ldr	r0, [pc, #12]	; (800ff00 <log+0x78>)
 800fef4:	f7ff bef0 	b.w	800fcd8 <nan>
 800fef8:	00000000 	.word	0x00000000
 800fefc:	fff00000 	.word	0xfff00000
 800ff00:	08010dfb 	.word	0x08010dfb
 800ff04:	00000000 	.word	0x00000000

0800ff08 <__ieee754_log>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	ec51 0b10 	vmov	r0, r1, d0
 800ff10:	ed2d 8b04 	vpush	{d8-d9}
 800ff14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ff18:	b083      	sub	sp, #12
 800ff1a:	460d      	mov	r5, r1
 800ff1c:	da29      	bge.n	800ff72 <__ieee754_log+0x6a>
 800ff1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff22:	4303      	orrs	r3, r0
 800ff24:	ee10 2a10 	vmov	r2, s0
 800ff28:	d10c      	bne.n	800ff44 <__ieee754_log+0x3c>
 800ff2a:	49cf      	ldr	r1, [pc, #828]	; (8010268 <__ieee754_log+0x360>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	2300      	movs	r3, #0
 800ff30:	2000      	movs	r0, #0
 800ff32:	f7f0 fca3 	bl	800087c <__aeabi_ddiv>
 800ff36:	ec41 0b10 	vmov	d0, r0, r1
 800ff3a:	b003      	add	sp, #12
 800ff3c:	ecbd 8b04 	vpop	{d8-d9}
 800ff40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff44:	2900      	cmp	r1, #0
 800ff46:	da05      	bge.n	800ff54 <__ieee754_log+0x4c>
 800ff48:	460b      	mov	r3, r1
 800ff4a:	f7f0 f9b5 	bl	80002b8 <__aeabi_dsub>
 800ff4e:	2200      	movs	r2, #0
 800ff50:	2300      	movs	r3, #0
 800ff52:	e7ee      	b.n	800ff32 <__ieee754_log+0x2a>
 800ff54:	4bc5      	ldr	r3, [pc, #788]	; (801026c <__ieee754_log+0x364>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	f7f0 fb66 	bl	8000628 <__aeabi_dmul>
 800ff5c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ff60:	460d      	mov	r5, r1
 800ff62:	4ac3      	ldr	r2, [pc, #780]	; (8010270 <__ieee754_log+0x368>)
 800ff64:	4295      	cmp	r5, r2
 800ff66:	dd06      	ble.n	800ff76 <__ieee754_log+0x6e>
 800ff68:	4602      	mov	r2, r0
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	f7f0 f9a6 	bl	80002bc <__adddf3>
 800ff70:	e7e1      	b.n	800ff36 <__ieee754_log+0x2e>
 800ff72:	2300      	movs	r3, #0
 800ff74:	e7f5      	b.n	800ff62 <__ieee754_log+0x5a>
 800ff76:	152c      	asrs	r4, r5, #20
 800ff78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ff7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ff80:	441c      	add	r4, r3
 800ff82:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ff86:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ff8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ff8e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ff92:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ff96:	ea42 0105 	orr.w	r1, r2, r5
 800ff9a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	4bb4      	ldr	r3, [pc, #720]	; (8010274 <__ieee754_log+0x36c>)
 800ffa2:	f7f0 f989 	bl	80002b8 <__aeabi_dsub>
 800ffa6:	1cab      	adds	r3, r5, #2
 800ffa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	4682      	mov	sl, r0
 800ffb0:	468b      	mov	fp, r1
 800ffb2:	f04f 0200 	mov.w	r2, #0
 800ffb6:	dc53      	bgt.n	8010060 <__ieee754_log+0x158>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	f7f0 fd9d 	bl	8000af8 <__aeabi_dcmpeq>
 800ffbe:	b1d0      	cbz	r0, 800fff6 <__ieee754_log+0xee>
 800ffc0:	2c00      	cmp	r4, #0
 800ffc2:	f000 8122 	beq.w	801020a <__ieee754_log+0x302>
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f7f0 fac4 	bl	8000554 <__aeabi_i2d>
 800ffcc:	a390      	add	r3, pc, #576	; (adr r3, 8010210 <__ieee754_log+0x308>)
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	f7f0 fb27 	bl	8000628 <__aeabi_dmul>
 800ffda:	a38f      	add	r3, pc, #572	; (adr r3, 8010218 <__ieee754_log+0x310>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	460d      	mov	r5, r1
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	f7f0 fb1e 	bl	8000628 <__aeabi_dmul>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	4620      	mov	r0, r4
 800fff2:	4629      	mov	r1, r5
 800fff4:	e7ba      	b.n	800ff6c <__ieee754_log+0x64>
 800fff6:	a38a      	add	r3, pc, #552	; (adr r3, 8010220 <__ieee754_log+0x318>)
 800fff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffc:	4650      	mov	r0, sl
 800fffe:	4659      	mov	r1, fp
 8010000:	f7f0 fb12 	bl	8000628 <__aeabi_dmul>
 8010004:	4602      	mov	r2, r0
 8010006:	460b      	mov	r3, r1
 8010008:	2000      	movs	r0, #0
 801000a:	499b      	ldr	r1, [pc, #620]	; (8010278 <__ieee754_log+0x370>)
 801000c:	f7f0 f954 	bl	80002b8 <__aeabi_dsub>
 8010010:	4652      	mov	r2, sl
 8010012:	4606      	mov	r6, r0
 8010014:	460f      	mov	r7, r1
 8010016:	465b      	mov	r3, fp
 8010018:	4650      	mov	r0, sl
 801001a:	4659      	mov	r1, fp
 801001c:	f7f0 fb04 	bl	8000628 <__aeabi_dmul>
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	4630      	mov	r0, r6
 8010026:	4639      	mov	r1, r7
 8010028:	f7f0 fafe 	bl	8000628 <__aeabi_dmul>
 801002c:	4606      	mov	r6, r0
 801002e:	460f      	mov	r7, r1
 8010030:	b914      	cbnz	r4, 8010038 <__ieee754_log+0x130>
 8010032:	4632      	mov	r2, r6
 8010034:	463b      	mov	r3, r7
 8010036:	e0a2      	b.n	801017e <__ieee754_log+0x276>
 8010038:	4620      	mov	r0, r4
 801003a:	f7f0 fa8b 	bl	8000554 <__aeabi_i2d>
 801003e:	a374      	add	r3, pc, #464	; (adr r3, 8010210 <__ieee754_log+0x308>)
 8010040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010044:	4680      	mov	r8, r0
 8010046:	4689      	mov	r9, r1
 8010048:	f7f0 faee 	bl	8000628 <__aeabi_dmul>
 801004c:	a372      	add	r3, pc, #456	; (adr r3, 8010218 <__ieee754_log+0x310>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	4604      	mov	r4, r0
 8010054:	460d      	mov	r5, r1
 8010056:	4640      	mov	r0, r8
 8010058:	4649      	mov	r1, r9
 801005a:	f7f0 fae5 	bl	8000628 <__aeabi_dmul>
 801005e:	e0a7      	b.n	80101b0 <__ieee754_log+0x2a8>
 8010060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010064:	f7f0 f92a 	bl	80002bc <__adddf3>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4650      	mov	r0, sl
 801006e:	4659      	mov	r1, fp
 8010070:	f7f0 fc04 	bl	800087c <__aeabi_ddiv>
 8010074:	ec41 0b18 	vmov	d8, r0, r1
 8010078:	4620      	mov	r0, r4
 801007a:	f7f0 fa6b 	bl	8000554 <__aeabi_i2d>
 801007e:	ec53 2b18 	vmov	r2, r3, d8
 8010082:	ec41 0b19 	vmov	d9, r0, r1
 8010086:	ec51 0b18 	vmov	r0, r1, d8
 801008a:	f7f0 facd 	bl	8000628 <__aeabi_dmul>
 801008e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010092:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	4602      	mov	r2, r0
 801009a:	460b      	mov	r3, r1
 801009c:	4680      	mov	r8, r0
 801009e:	4689      	mov	r9, r1
 80100a0:	f7f0 fac2 	bl	8000628 <__aeabi_dmul>
 80100a4:	a360      	add	r3, pc, #384	; (adr r3, 8010228 <__ieee754_log+0x320>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	4606      	mov	r6, r0
 80100ac:	460f      	mov	r7, r1
 80100ae:	f7f0 fabb 	bl	8000628 <__aeabi_dmul>
 80100b2:	a35f      	add	r3, pc, #380	; (adr r3, 8010230 <__ieee754_log+0x328>)
 80100b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b8:	f7f0 f900 	bl	80002bc <__adddf3>
 80100bc:	4632      	mov	r2, r6
 80100be:	463b      	mov	r3, r7
 80100c0:	f7f0 fab2 	bl	8000628 <__aeabi_dmul>
 80100c4:	a35c      	add	r3, pc, #368	; (adr r3, 8010238 <__ieee754_log+0x330>)
 80100c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ca:	f7f0 f8f7 	bl	80002bc <__adddf3>
 80100ce:	4632      	mov	r2, r6
 80100d0:	463b      	mov	r3, r7
 80100d2:	f7f0 faa9 	bl	8000628 <__aeabi_dmul>
 80100d6:	a35a      	add	r3, pc, #360	; (adr r3, 8010240 <__ieee754_log+0x338>)
 80100d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100dc:	f7f0 f8ee 	bl	80002bc <__adddf3>
 80100e0:	4642      	mov	r2, r8
 80100e2:	464b      	mov	r3, r9
 80100e4:	f7f0 faa0 	bl	8000628 <__aeabi_dmul>
 80100e8:	a357      	add	r3, pc, #348	; (adr r3, 8010248 <__ieee754_log+0x340>)
 80100ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ee:	4680      	mov	r8, r0
 80100f0:	4689      	mov	r9, r1
 80100f2:	4630      	mov	r0, r6
 80100f4:	4639      	mov	r1, r7
 80100f6:	f7f0 fa97 	bl	8000628 <__aeabi_dmul>
 80100fa:	a355      	add	r3, pc, #340	; (adr r3, 8010250 <__ieee754_log+0x348>)
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	f7f0 f8dc 	bl	80002bc <__adddf3>
 8010104:	4632      	mov	r2, r6
 8010106:	463b      	mov	r3, r7
 8010108:	f7f0 fa8e 	bl	8000628 <__aeabi_dmul>
 801010c:	a352      	add	r3, pc, #328	; (adr r3, 8010258 <__ieee754_log+0x350>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	f7f0 f8d3 	bl	80002bc <__adddf3>
 8010116:	4632      	mov	r2, r6
 8010118:	463b      	mov	r3, r7
 801011a:	f7f0 fa85 	bl	8000628 <__aeabi_dmul>
 801011e:	460b      	mov	r3, r1
 8010120:	4602      	mov	r2, r0
 8010122:	4649      	mov	r1, r9
 8010124:	4640      	mov	r0, r8
 8010126:	f7f0 f8c9 	bl	80002bc <__adddf3>
 801012a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801012e:	9b01      	ldr	r3, [sp, #4]
 8010130:	3551      	adds	r5, #81	; 0x51
 8010132:	431d      	orrs	r5, r3
 8010134:	2d00      	cmp	r5, #0
 8010136:	4680      	mov	r8, r0
 8010138:	4689      	mov	r9, r1
 801013a:	dd48      	ble.n	80101ce <__ieee754_log+0x2c6>
 801013c:	4b4e      	ldr	r3, [pc, #312]	; (8010278 <__ieee754_log+0x370>)
 801013e:	2200      	movs	r2, #0
 8010140:	4650      	mov	r0, sl
 8010142:	4659      	mov	r1, fp
 8010144:	f7f0 fa70 	bl	8000628 <__aeabi_dmul>
 8010148:	4652      	mov	r2, sl
 801014a:	465b      	mov	r3, fp
 801014c:	f7f0 fa6c 	bl	8000628 <__aeabi_dmul>
 8010150:	4602      	mov	r2, r0
 8010152:	460b      	mov	r3, r1
 8010154:	4606      	mov	r6, r0
 8010156:	460f      	mov	r7, r1
 8010158:	4640      	mov	r0, r8
 801015a:	4649      	mov	r1, r9
 801015c:	f7f0 f8ae 	bl	80002bc <__adddf3>
 8010160:	ec53 2b18 	vmov	r2, r3, d8
 8010164:	f7f0 fa60 	bl	8000628 <__aeabi_dmul>
 8010168:	4680      	mov	r8, r0
 801016a:	4689      	mov	r9, r1
 801016c:	b964      	cbnz	r4, 8010188 <__ieee754_log+0x280>
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	4630      	mov	r0, r6
 8010174:	4639      	mov	r1, r7
 8010176:	f7f0 f89f 	bl	80002b8 <__aeabi_dsub>
 801017a:	4602      	mov	r2, r0
 801017c:	460b      	mov	r3, r1
 801017e:	4650      	mov	r0, sl
 8010180:	4659      	mov	r1, fp
 8010182:	f7f0 f899 	bl	80002b8 <__aeabi_dsub>
 8010186:	e6d6      	b.n	800ff36 <__ieee754_log+0x2e>
 8010188:	a321      	add	r3, pc, #132	; (adr r3, 8010210 <__ieee754_log+0x308>)
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	ec51 0b19 	vmov	r0, r1, d9
 8010192:	f7f0 fa49 	bl	8000628 <__aeabi_dmul>
 8010196:	a320      	add	r3, pc, #128	; (adr r3, 8010218 <__ieee754_log+0x310>)
 8010198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019c:	4604      	mov	r4, r0
 801019e:	460d      	mov	r5, r1
 80101a0:	ec51 0b19 	vmov	r0, r1, d9
 80101a4:	f7f0 fa40 	bl	8000628 <__aeabi_dmul>
 80101a8:	4642      	mov	r2, r8
 80101aa:	464b      	mov	r3, r9
 80101ac:	f7f0 f886 	bl	80002bc <__adddf3>
 80101b0:	4602      	mov	r2, r0
 80101b2:	460b      	mov	r3, r1
 80101b4:	4630      	mov	r0, r6
 80101b6:	4639      	mov	r1, r7
 80101b8:	f7f0 f87e 	bl	80002b8 <__aeabi_dsub>
 80101bc:	4652      	mov	r2, sl
 80101be:	465b      	mov	r3, fp
 80101c0:	f7f0 f87a 	bl	80002b8 <__aeabi_dsub>
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	4620      	mov	r0, r4
 80101ca:	4629      	mov	r1, r5
 80101cc:	e7d9      	b.n	8010182 <__ieee754_log+0x27a>
 80101ce:	4602      	mov	r2, r0
 80101d0:	460b      	mov	r3, r1
 80101d2:	4650      	mov	r0, sl
 80101d4:	4659      	mov	r1, fp
 80101d6:	f7f0 f86f 	bl	80002b8 <__aeabi_dsub>
 80101da:	ec53 2b18 	vmov	r2, r3, d8
 80101de:	f7f0 fa23 	bl	8000628 <__aeabi_dmul>
 80101e2:	4606      	mov	r6, r0
 80101e4:	460f      	mov	r7, r1
 80101e6:	2c00      	cmp	r4, #0
 80101e8:	f43f af23 	beq.w	8010032 <__ieee754_log+0x12a>
 80101ec:	a308      	add	r3, pc, #32	; (adr r3, 8010210 <__ieee754_log+0x308>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	ec51 0b19 	vmov	r0, r1, d9
 80101f6:	f7f0 fa17 	bl	8000628 <__aeabi_dmul>
 80101fa:	a307      	add	r3, pc, #28	; (adr r3, 8010218 <__ieee754_log+0x310>)
 80101fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010200:	4604      	mov	r4, r0
 8010202:	460d      	mov	r5, r1
 8010204:	ec51 0b19 	vmov	r0, r1, d9
 8010208:	e727      	b.n	801005a <__ieee754_log+0x152>
 801020a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010260 <__ieee754_log+0x358>
 801020e:	e694      	b.n	800ff3a <__ieee754_log+0x32>
 8010210:	fee00000 	.word	0xfee00000
 8010214:	3fe62e42 	.word	0x3fe62e42
 8010218:	35793c76 	.word	0x35793c76
 801021c:	3dea39ef 	.word	0x3dea39ef
 8010220:	55555555 	.word	0x55555555
 8010224:	3fd55555 	.word	0x3fd55555
 8010228:	df3e5244 	.word	0xdf3e5244
 801022c:	3fc2f112 	.word	0x3fc2f112
 8010230:	96cb03de 	.word	0x96cb03de
 8010234:	3fc74664 	.word	0x3fc74664
 8010238:	94229359 	.word	0x94229359
 801023c:	3fd24924 	.word	0x3fd24924
 8010240:	55555593 	.word	0x55555593
 8010244:	3fe55555 	.word	0x3fe55555
 8010248:	d078c69f 	.word	0xd078c69f
 801024c:	3fc39a09 	.word	0x3fc39a09
 8010250:	1d8e78af 	.word	0x1d8e78af
 8010254:	3fcc71c5 	.word	0x3fcc71c5
 8010258:	9997fa04 	.word	0x9997fa04
 801025c:	3fd99999 	.word	0x3fd99999
	...
 8010268:	c3500000 	.word	0xc3500000
 801026c:	43500000 	.word	0x43500000
 8010270:	7fefffff 	.word	0x7fefffff
 8010274:	3ff00000 	.word	0x3ff00000
 8010278:	3fe00000 	.word	0x3fe00000

0801027c <_init>:
 801027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027e:	bf00      	nop
 8010280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010282:	bc08      	pop	{r3}
 8010284:	469e      	mov	lr, r3
 8010286:	4770      	bx	lr

08010288 <_fini>:
 8010288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028a:	bf00      	nop
 801028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028e:	bc08      	pop	{r3}
 8010290:	469e      	mov	lr, r3
 8010292:	4770      	bx	lr
