
SEU_EN3_SBC_54016341J.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  0800bdc0  0800bdc0  0001bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c834  0800c834  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c834  0800c834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c83c  0800c83c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000160fc  200001e4  0800ca28  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200162e0  0800ca28  000262e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a285  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004390  00000000  00000000  0003a499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0003e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8f4  00000000  00000000  00040ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f87  00000000  00000000  0005b49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e589  00000000  00000000  00074423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001129ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb4  00000000  00000000  001129fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bda4 	.word	0x0800bda4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800bda4 	.word	0x0800bda4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <put_leds>:
float tempValue;
int sensor = 0;
int alarmValue = 0;

void put_leds(uint8_t dato)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]

	if (dato & 0x01)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <put_leds+0x20>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4845      	ldr	r0, [pc, #276]	; (800108c <put_leds+0x130>)
 8000f76:	f003 fab3 	bl	80044e0 <HAL_GPIO_WritePin>
 8000f7a:	e004      	b.n	8000f86 <put_leds+0x2a>
	else
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4842      	ldr	r0, [pc, #264]	; (800108c <put_leds+0x130>)
 8000f82:	f003 faad 	bl	80044e0 <HAL_GPIO_WritePin>

	if (dato & 0x02)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <put_leds+0x42>
		HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f96:	483d      	ldr	r0, [pc, #244]	; (800108c <put_leds+0x130>)
 8000f98:	f003 faa2 	bl	80044e0 <HAL_GPIO_WritePin>
 8000f9c:	e005      	b.n	8000faa <put_leds+0x4e>
	else
		HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	4839      	ldr	r0, [pc, #228]	; (800108c <put_leds+0x130>)
 8000fa6:	f003 fa9b 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato & 0x04)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <put_leds+0x66>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	4835      	ldr	r0, [pc, #212]	; (8001090 <put_leds+0x134>)
 8000fbc:	f003 fa90 	bl	80044e0 <HAL_GPIO_WritePin>
 8000fc0:	e005      	b.n	8000fce <put_leds+0x72>
	else
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	4831      	ldr	r0, [pc, #196]	; (8001090 <put_leds+0x134>)
 8000fca:	f003 fa89 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato & 0x08)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <put_leds+0x88>
		HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	482b      	ldr	r0, [pc, #172]	; (800108c <put_leds+0x130>)
 8000fde:	f003 fa7f 	bl	80044e0 <HAL_GPIO_WritePin>
 8000fe2:	e004      	b.n	8000fee <put_leds+0x92>
	else
		HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4828      	ldr	r0, [pc, #160]	; (800108c <put_leds+0x130>)
 8000fea:	f003 fa79 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato & 0x10)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <put_leds+0xa8>
		HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4823      	ldr	r0, [pc, #140]	; (800108c <put_leds+0x130>)
 8000ffe:	f003 fa6f 	bl	80044e0 <HAL_GPIO_WritePin>
 8001002:	e004      	b.n	800100e <put_leds+0xb2>
	else
		HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <put_leds+0x130>)
 800100a:	f003 fa69 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato & 0x20)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <put_leds+0xc8>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	481c      	ldr	r0, [pc, #112]	; (8001090 <put_leds+0x134>)
 800101e:	f003 fa5f 	bl	80044e0 <HAL_GPIO_WritePin>
 8001022:	e004      	b.n	800102e <put_leds+0xd2>
	else
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4819      	ldr	r0, [pc, #100]	; (8001090 <put_leds+0x134>)
 800102a:	f003 fa59 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato & 0x40)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <put_leds+0xe8>
		HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <put_leds+0x130>)
 800103e:	f003 fa4f 	bl	80044e0 <HAL_GPIO_WritePin>
 8001042:	e004      	b.n	800104e <put_leds+0xf2>
	else
		HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <put_leds+0x130>)
 800104a:	f003 fa49 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato & 0x80)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da05      	bge.n	8001062 <put_leds+0x106>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <put_leds+0x134>)
 800105c:	f003 fa40 	bl	80044e0 <HAL_GPIO_WritePin>
 8001060:	e004      	b.n	800106c <put_leds+0x110>
	else
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <put_leds+0x134>)
 8001068:	f003 fa3a 	bl	80044e0 <HAL_GPIO_WritePin>
	if (dato == 0)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <put_leds+0x126>
	{
		put_leds(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff72 	bl	8000f5c <put_leds>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <put_leds+0x130>)
 800107e:	f003 fa2f 	bl	80044e0 <HAL_GPIO_WritePin>
	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400
 8001090:	40020000 	.word	0x40020000

08001094 <ConvertidorA_D>:
		put_leds(255);
	}
}

uint32_t ConvertidorA_D(uint8_t channel)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	uint32_t valueAD;
	ADC_ChannelConfTypeDef sConfig;
	switch (channel)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d014      	beq.n	80010ce <ConvertidorA_D+0x3a>
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	dc19      	bgt.n	80010dc <ConvertidorA_D+0x48>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <ConvertidorA_D+0x1e>
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d007      	beq.n	80010c0 <ConvertidorA_D+0x2c>
 80010b0:	e014      	b.n	80010dc <ConvertidorA_D+0x48>
	{
	case 0:
		// sensor de luz
		sConfig.Channel = ADC_CHANNEL_0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
		break;
 80010be:	e00d      	b.n	80010dc <ConvertidorA_D+0x48>
	case 1:
		// sensor de temp
		sConfig.Channel = ADC_CHANNEL_1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
		break;
 80010cc:	e006      	b.n	80010dc <ConvertidorA_D+0x48>
	case 4:
		// POT
		sConfig.Channel = ADC_CHANNEL_4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
		break;
 80010da:	bf00      	nop
	}
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <ConvertidorA_D+0x78>)
 80010e4:	f002 f940 	bl	8003368 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <ConvertidorA_D+0x78>)
 80010ea:	f001 fff1 	bl	80030d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10000);
 80010ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <ConvertidorA_D+0x78>)
 80010f4:	f002 f8a0 	bl	8003238 <HAL_ADC_PollForConversion>
	valueAD = HAL_ADC_GetValue(&hadc1);
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <ConvertidorA_D+0x78>)
 80010fa:	f002 f928 	bl	800334e <HAL_ADC_GetValue>
 80010fe:	61f8      	str	r0, [r7, #28]
	return valueAD;
 8001100:	69fb      	ldr	r3, [r7, #28]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000218 	.word	0x20000218

08001110 <setOffAlarm>:
		}
	}
}

void setOffAlarm(float value, float trigger)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a01 	vstr	s0, [r7, #4]
 800111a:	edc7 0a00 	vstr	s1, [r7]
	if (value > trigger)
 800111e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd08      	ble.n	8001142 <setOffAlarm+0x32>
	{
		alarmValue = 1;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <setOffAlarm+0x44>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <setOffAlarm+0x48>)
 800113c:	f003 f9d0 	bl	80044e0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8001140:	e004      	b.n	800114c <setOffAlarm+0x3c>
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <setOffAlarm+0x48>)
 8001148:	f003 f9ca 	bl	80044e0 <HAL_GPIO_WritePin>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000214 	.word	0x20000214
 8001158:	40020000 	.word	0x40020000

0800115c <turnOnLedsLight>:

void turnOnLedsLight(float value)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a01 	vstr	s0, [r7, #4]
	float div = 3.3 / 8;
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <turnOnLedsLight+0x100>)
 8001168:	60fb      	str	r3, [r7, #12]
	if (value <= div)
 800116a:	ed97 7a01 	vldr	s14, [r7, #4]
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	d803      	bhi.n	8001184 <turnOnLedsLight+0x28>
	{
		put_leds(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff feed 	bl	8000f5c <put_leds>
	}
	else
	{
		put_leds(255);
	}
}
 8001182:	e066      	b.n	8001252 <turnOnLedsLight+0xf6>
	else if (value <= div * 2)
 8001184:	edd7 7a03 	vldr	s15, [r7, #12]
 8001188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800118c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	d803      	bhi.n	80011a2 <turnOnLedsLight+0x46>
		put_leds(3);
 800119a:	2003      	movs	r0, #3
 800119c:	f7ff fede 	bl	8000f5c <put_leds>
}
 80011a0:	e057      	b.n	8001252 <turnOnLedsLight+0xf6>
	else if (value <= div * 3)
 80011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80011aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d803      	bhi.n	80011c4 <turnOnLedsLight+0x68>
		put_leds(7);
 80011bc:	2007      	movs	r0, #7
 80011be:	f7ff fecd 	bl	8000f5c <put_leds>
}
 80011c2:	e046      	b.n	8001252 <turnOnLedsLight+0xf6>
	else if (value <= div * 4)
 80011c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d803      	bhi.n	80011e6 <turnOnLedsLight+0x8a>
		put_leds(15);
 80011de:	200f      	movs	r0, #15
 80011e0:	f7ff febc 	bl	8000f5c <put_leds>
}
 80011e4:	e035      	b.n	8001252 <turnOnLedsLight+0xf6>
	else if (value <= div * 5)
 80011e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d803      	bhi.n	8001208 <turnOnLedsLight+0xac>
		put_leds(31);
 8001200:	201f      	movs	r0, #31
 8001202:	f7ff feab 	bl	8000f5c <put_leds>
}
 8001206:	e024      	b.n	8001252 <turnOnLedsLight+0xf6>
	else if (value <= div * 6)
 8001208:	edd7 7a03 	vldr	s15, [r7, #12]
 800120c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	ed97 7a01 	vldr	s14, [r7, #4]
 8001218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	d803      	bhi.n	800122a <turnOnLedsLight+0xce>
		put_leds(63);
 8001222:	203f      	movs	r0, #63	; 0x3f
 8001224:	f7ff fe9a 	bl	8000f5c <put_leds>
}
 8001228:	e013      	b.n	8001252 <turnOnLedsLight+0xf6>
	else if (value <= div * 7)
 800122a:	edd7 7a03 	vldr	s15, [r7, #12]
 800122e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	ed97 7a01 	vldr	s14, [r7, #4]
 800123a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d803      	bhi.n	800124c <turnOnLedsLight+0xf0>
		put_leds(127);
 8001244:	207f      	movs	r0, #127	; 0x7f
 8001246:	f7ff fe89 	bl	8000f5c <put_leds>
}
 800124a:	e002      	b.n	8001252 <turnOnLedsLight+0xf6>
		put_leds(255);
 800124c:	20ff      	movs	r0, #255	; 0xff
 800124e:	f7ff fe85 	bl	8000f5c <put_leds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	3ed33333 	.word	0x3ed33333

08001260 <turnOnLedsTemp>:

void turnOnLedsTemp(float initValue, float currentValue)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	ed87 0a01 	vstr	s0, [r7, #4]
 800126a:	edc7 0a00 	vstr	s1, [r7]
	float div = 0.04;
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <turnOnLedsTemp+0x13c>)
 8001270:	60fb      	str	r3, [r7, #12]
	if (currentValue <= (initValue + div))
 8001272:	ed97 7a01 	vldr	s14, [r7, #4]
 8001276:	edd7 7a03 	vldr	s15, [r7, #12]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	ed97 7a00 	vldr	s14, [r7]
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d803      	bhi.n	8001294 <turnOnLedsTemp+0x34>
	{
		put_leds(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fe65 	bl	8000f5c <put_leds>
	}
	else
	{
		put_leds(255);
	}
}
 8001292:	e07e      	b.n	8001392 <turnOnLedsTemp+0x132>
	else if (currentValue <= (initValue + (div * 2)))
 8001294:	edd7 7a03 	vldr	s15, [r7, #12]
 8001298:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a4:	ed97 7a00 	vldr	s14, [r7]
 80012a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	d803      	bhi.n	80012ba <turnOnLedsTemp+0x5a>
		put_leds(3);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff fe52 	bl	8000f5c <put_leds>
}
 80012b8:	e06b      	b.n	8001392 <turnOnLedsTemp+0x132>
	else if (currentValue <= (initValue + (div * 3)))
 80012ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80012be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80012c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	ed97 7a00 	vldr	s14, [r7]
 80012d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d803      	bhi.n	80012e4 <turnOnLedsTemp+0x84>
		put_leds(7);
 80012dc:	2007      	movs	r0, #7
 80012de:	f7ff fe3d 	bl	8000f5c <put_leds>
}
 80012e2:	e056      	b.n	8001392 <turnOnLedsTemp+0x132>
	else if (currentValue <= (initValue + (div * 4)))
 80012e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80012ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f8:	ed97 7a00 	vldr	s14, [r7]
 80012fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d803      	bhi.n	800130e <turnOnLedsTemp+0xae>
		put_leds(15);
 8001306:	200f      	movs	r0, #15
 8001308:	f7ff fe28 	bl	8000f5c <put_leds>
}
 800130c:	e041      	b.n	8001392 <turnOnLedsTemp+0x132>
	else if (currentValue <= (initValue + (div * 5)))
 800130e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001312:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001316:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131a:	edd7 7a01 	vldr	s15, [r7, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ed97 7a00 	vldr	s14, [r7]
 8001326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d803      	bhi.n	8001338 <turnOnLedsTemp+0xd8>
		put_leds(31);
 8001330:	201f      	movs	r0, #31
 8001332:	f7ff fe13 	bl	8000f5c <put_leds>
}
 8001336:	e02c      	b.n	8001392 <turnOnLedsTemp+0x132>
	else if (currentValue <= (initValue + (div * 6)))
 8001338:	edd7 7a03 	vldr	s15, [r7, #12]
 800133c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001340:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001344:	edd7 7a01 	vldr	s15, [r7, #4]
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	ed97 7a00 	vldr	s14, [r7]
 8001350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d803      	bhi.n	8001362 <turnOnLedsTemp+0x102>
		put_leds(63);
 800135a:	203f      	movs	r0, #63	; 0x3f
 800135c:	f7ff fdfe 	bl	8000f5c <put_leds>
}
 8001360:	e017      	b.n	8001392 <turnOnLedsTemp+0x132>
	else if (currentValue <= (initValue + (div * 7)))
 8001362:	edd7 7a03 	vldr	s15, [r7, #12]
 8001366:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800136a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	ed97 7a00 	vldr	s14, [r7]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d803      	bhi.n	800138c <turnOnLedsTemp+0x12c>
		put_leds(127);
 8001384:	207f      	movs	r0, #127	; 0x7f
 8001386:	f7ff fde9 	bl	8000f5c <put_leds>
}
 800138a:	e002      	b.n	8001392 <turnOnLedsTemp+0x132>
		put_leds(255);
 800138c:	20ff      	movs	r0, #255	; 0xff
 800138e:	f7ff fde5 	bl	8000f5c <put_leds>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	3d23d70a 	.word	0x3d23d70a

080013a0 <runHW>:
		rightButtonState = GPIO_PIN_SET;
	}
}

void runHW()
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
 80013a4:	af00      	add	r7, sp, #0
	GPIO_PinState leftButtonLastState = GPIO_PIN_SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  GPIO_PinState rightButtonState = GPIO_PIN_SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  sensor = 0; //0 = LDR || 1 = NTC
 80013b2:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <runHW+0x240>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
	  potValue = ConvertidorA_D(4);
 80013b8:	2004      	movs	r0, #4
 80013ba:	f7ff fe6b 	bl	8001094 <ConvertidorA_D>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a88      	ldr	r2, [pc, #544]	; (80015e4 <runHW+0x244>)
 80013c2:	6013      	str	r3, [r2, #0]
	  float lastPot = ((potValue * 3.3)/4095.0);
 80013c4:	4b87      	ldr	r3, [pc, #540]	; (80015e4 <runHW+0x244>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8a3 	bl	8000514 <__aeabi_ui2d>
 80013ce:	a37e      	add	r3, pc, #504	; (adr r3, 80015c8 <runHW+0x228>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f918 	bl	8000608 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	a37b      	add	r3, pc, #492	; (adr r3, 80015d0 <runHW+0x230>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff fa39 	bl	800085c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbe1 	bl	8000bb8 <__aeabi_d2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
	  uint32_t tempInit = ConvertidorA_D(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff fe4a 	bl	8001094 <ConvertidorA_D>
 8001400:	6238      	str	r0, [r7, #32]
	  float initTempValue = ((4096-tempInit)*3.3)/4095;
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f883 	bl	8000514 <__aeabi_ui2d>
 800140e:	a36e      	add	r3, pc, #440	; (adr r3, 80015c8 <runHW+0x228>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f8f8 	bl	8000608 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	a36b      	add	r3, pc, #428	; (adr r3, 80015d0 <runHW+0x230>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff fa19 	bl	800085c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fbc1 	bl	8000bb8 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	61fb      	str	r3, [r7, #28]
	  uint32_t valueADTemp = ConvertidorA_D(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff fe2a 	bl	8001094 <ConvertidorA_D>
 8001440:	61b8      	str	r0, [r7, #24]
	  float valueBigTemp = 4096-valueADTemp;
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	edc7 7a05 	vstr	s15, [r7, #20]
	  tempValue = (valueBigTemp*3.3)/4095;
 8001454:	6978      	ldr	r0, [r7, #20]
 8001456:	f7ff f87f 	bl	8000558 <__aeabi_f2d>
 800145a:	a35b      	add	r3, pc, #364	; (adr r3, 80015c8 <runHW+0x228>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8d2 	bl	8000608 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	a358      	add	r3, pc, #352	; (adr r3, 80015d0 <runHW+0x230>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f9f3 	bl	800085c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb9b 	bl	8000bb8 <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4a58      	ldr	r2, [pc, #352]	; (80015e8 <runHW+0x248>)
 8001486:	6013      	str	r3, [r2, #0]
	  float trigger = lastPot;
 8001488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
	  while (1)
	  {
		 //Choose sensor
		 GPIO_PinState lbCurrentState = HAL_GPIO_ReadPin(PULSADOR1_GPIO_Port, PULSADOR1_Pin);
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	4857      	ldr	r0, [pc, #348]	; (80015ec <runHW+0x24c>)
 8001490:	f003 f80e 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	74fb      	strb	r3, [r7, #19]
		 if(leftButtonLastState != lbCurrentState && lbCurrentState == GPIO_PIN_RESET) {
 8001498:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d005      	beq.n	80014ae <runHW+0x10e>
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <runHW+0x10e>
			  leftButtonLastState = GPIO_PIN_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		 }

		 if(leftButtonLastState != lbCurrentState && lbCurrentState == GPIO_PIN_SET) {
 80014ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80014b2:	7cfb      	ldrb	r3, [r7, #19]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d016      	beq.n	80014e6 <runHW+0x146>
 80014b8:	7cfb      	ldrb	r3, [r7, #19]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d113      	bne.n	80014e6 <runHW+0x146>
			 leftButtonLastState = GPIO_PIN_SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			 if (sensor == 0) {
 80014c4:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <runHW+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <runHW+0x13a>
				 printf("changing to NTC\r\n");
 80014cc:	4848      	ldr	r0, [pc, #288]	; (80015f0 <runHW+0x250>)
 80014ce:	f008 fc0d 	bl	8009cec <puts>
				 sensor = 1;
 80014d2:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <runHW+0x240>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e005      	b.n	80014e6 <runHW+0x146>
			 } else {
				 printf("changing to LDR\r\n");
 80014da:	4846      	ldr	r0, [pc, #280]	; (80015f4 <runHW+0x254>)
 80014dc:	f008 fc06 	bl	8009cec <puts>
				 sensor = 0;
 80014e0:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <runHW+0x240>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
			 }
		 }

		 //set trigger
		 potValue = ConvertidorA_D(4);
 80014e6:	2004      	movs	r0, #4
 80014e8:	f7ff fdd4 	bl	8001094 <ConvertidorA_D>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <runHW+0x244>)
 80014f0:	6013      	str	r3, [r2, #0]
		 float currentPot = ((potValue * 3.3)/4095.0);
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <runHW+0x244>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f80c 	bl	8000514 <__aeabi_ui2d>
 80014fc:	a332      	add	r3, pc, #200	; (adr r3, 80015c8 <runHW+0x228>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f881 	bl	8000608 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a330      	add	r3, pc, #192	; (adr r3, 80015d0 <runHW+0x230>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f9a2 	bl	800085c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb4a 	bl	8000bb8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	60fb      	str	r3, [r7, #12]
		 //printf("Value del pot %.2f \r\n", currentPot);
		 if (currentPot > (lastPot+0.35) || currentPot < (lastPot - 0.35)) {
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff f815 	bl	8000558 <__aeabi_f2d>
 800152e:	4604      	mov	r4, r0
 8001530:	460d      	mov	r5, r1
 8001532:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	a327      	add	r3, pc, #156	; (adr r3, 80015d8 <runHW+0x238>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7fe fead 	bl	800029c <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7ff faed 	bl	8000b28 <__aeabi_dcmpgt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d115      	bne.n	8001580 <runHW+0x1e0>
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7fe ffff 	bl	8000558 <__aeabi_f2d>
 800155a:	4604      	mov	r4, r0
 800155c:	460d      	mov	r5, r1
 800155e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001560:	f7fe fffa 	bl	8000558 <__aeabi_f2d>
 8001564:	a31c      	add	r3, pc, #112	; (adr r3, 80015d8 <runHW+0x238>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe fe95 	bl	8000298 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7ff fab9 	bl	8000aec <__aeabi_dcmplt>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d04c      	beq.n	800161a <runHW+0x27a>
		 	printf("pot changed %.2f\r\n", currentPot);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7fe ffe9 	bl	8000558 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <runHW+0x258>)
 800158c:	f008 fb28 	bl	8009be0 <iprintf>
		 	lastPot = currentPot;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
		 	trigger = currentPot;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
		 	for(int i = 0; i<8;i++) {
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
 800159c:	e03a      	b.n	8001614 <runHW+0x274>
		 		turnOnLedsLight(currentPot);
 800159e:	ed97 0a03 	vldr	s0, [r7, #12]
 80015a2:	f7ff fddb 	bl	800115c <turnOnLedsLight>
		 		for (int j = 0; j < 1000000; j++) {}
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	e002      	b.n	80015b2 <runHW+0x212>
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	3301      	adds	r3, #1
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b4:	4a11      	ldr	r2, [pc, #68]	; (80015fc <runHW+0x25c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	ddf8      	ble.n	80015ac <runHW+0x20c>
		 			put_leds(0);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fcce 	bl	8000f5c <put_leds>
		 			for (int j = 0; j < 1000000; j++) {}
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c4:	e01f      	b.n	8001606 <runHW+0x266>
 80015c6:	bf00      	nop
 80015c8:	66666666 	.word	0x66666666
 80015cc:	400a6666 	.word	0x400a6666
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40affe00 	.word	0x40affe00
 80015d8:	66666666 	.word	0x66666666
 80015dc:	3fd66666 	.word	0x3fd66666
 80015e0:	20000210 	.word	0x20000210
 80015e4:	20000200 	.word	0x20000200
 80015e8:	2000020c 	.word	0x2000020c
 80015ec:	40020800 	.word	0x40020800
 80015f0:	0800bdc0 	.word	0x0800bdc0
 80015f4:	0800bdd4 	.word	0x0800bdd4
 80015f8:	0800bde8 	.word	0x0800bde8
 80015fc:	000f423f 	.word	0x000f423f
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	3301      	adds	r3, #1
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	4a5d      	ldr	r2, [pc, #372]	; (8001780 <runHW+0x3e0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	ddf8      	ble.n	8001600 <runHW+0x260>
		 	for(int i = 0; i<8;i++) {
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	3301      	adds	r3, #1
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
 8001614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001616:	2b07      	cmp	r3, #7
 8001618:	ddc1      	ble.n	800159e <runHW+0x1fe>
		 	}
		 }

		 //LIGHT SENSOR
		 if (sensor == 0) {
 800161a:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <runHW+0x3e4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d136      	bne.n	8001690 <runHW+0x2f0>
			 uint32_t valueADLum = ConvertidorA_D(0);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fd36 	bl	8001094 <ConvertidorA_D>
 8001628:	60b8      	str	r0, [r7, #8]
			 float valueBigLum = 4096-valueADLum;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001638:	edc7 7a01 	vstr	s15, [r7, #4]
			 lumValue = (valueBigLum*3.3)/4095;
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe ff8b 	bl	8000558 <__aeabi_f2d>
 8001642:	a34b      	add	r3, pc, #300	; (adr r3, 8001770 <runHW+0x3d0>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ffde 	bl	8000608 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	a348      	add	r3, pc, #288	; (adr r3, 8001778 <runHW+0x3d8>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7ff f8ff 	bl	800085c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff faa7 	bl	8000bb8 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	4a46      	ldr	r2, [pc, #280]	; (8001788 <runHW+0x3e8>)
 800166e:	6013      	str	r3, [r2, #0]
			 //printf("Value de la luz %.2f \r\n", lumValue);
			 turnOnLedsLight(lumValue);
 8001670:	4b45      	ldr	r3, [pc, #276]	; (8001788 <runHW+0x3e8>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	f7ff fd6f 	bl	800115c <turnOnLedsLight>

			 setOffAlarm(lumValue, trigger);
 800167e:	4b42      	ldr	r3, [pc, #264]	; (8001788 <runHW+0x3e8>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f7ff fd40 	bl	8001110 <setOffAlarm>
		 }

		 //TEMP SENSOR
	 	 if (sensor == 1) {
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <runHW+0x3e4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d138      	bne.n	800170a <runHW+0x36a>
	 		valueADTemp = ConvertidorA_D(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fcfb 	bl	8001094 <ConvertidorA_D>
 800169e:	61b8      	str	r0, [r7, #24]
	 		valueBigTemp = 4096-valueADTemp;
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ae:	edc7 7a05 	vstr	s15, [r7, #20]
	 		tempValue = (valueBigTemp*3.3)/4095;
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	a32d      	add	r3, pc, #180	; (adr r3, 8001770 <runHW+0x3d0>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ffa3 	bl	8000608 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	a32b      	add	r3, pc, #172	; (adr r3, 8001778 <runHW+0x3d8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f8c4 	bl	800085c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa6c 	bl	8000bb8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a2a      	ldr	r2, [pc, #168]	; (800178c <runHW+0x3ec>)
 80016e4:	6013      	str	r3, [r2, #0]
	 		//float resis = ((3.3*10000)/((3.3-valueBigTemp)/(4095*3.3)))-10000;
	 		//printf("Value de la temp %.2f \r\n Value init temp %.2f \r\n", tempValue, initTempValue);
	 		//printf("Value de la resis %.2f \r\n", resis);
	 		turnOnLedsTemp(initTempValue, tempValue);
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <runHW+0x3ec>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	eef0 0a67 	vmov.f32	s1, s15
 80016f0:	ed97 0a07 	vldr	s0, [r7, #28]
 80016f4:	f7ff fdb4 	bl	8001260 <turnOnLedsTemp>

	 		//adjust leds maxvalue - minvalue and set leds according to the currentValue
	 		setOffAlarm(tempValue, trigger);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <runHW+0x3ec>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	f7ff fd03 	bl	8001110 <setOffAlarm>
	 	 }


		 //RESET SCREAM
		 GPIO_PinState rbCurrentState = HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin);
 800170a:	2140      	movs	r1, #64	; 0x40
 800170c:	4820      	ldr	r0, [pc, #128]	; (8001790 <runHW+0x3f0>)
 800170e:	f002 fecf 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	70fb      	strb	r3, [r7, #3]
		 if(rightButtonState != rbCurrentState && rbCurrentState == GPIO_PIN_RESET && alarmValue == 1) {
 8001716:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	429a      	cmp	r2, r3
 800171e:	d011      	beq.n	8001744 <runHW+0x3a4>
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10e      	bne.n	8001744 <runHW+0x3a4>
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <runHW+0x3f4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10a      	bne.n	8001744 <runHW+0x3a4>
		 	rightButtonState = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		 	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <runHW+0x3f8>)
 800173a:	f002 fed1 	bl	80044e0 <HAL_GPIO_WritePin>
		 	alarmValue = 0;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <runHW+0x3f4>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
		 }

		 if(rightButtonState != rbCurrentState && rbCurrentState == GPIO_PIN_SET) {
 8001744:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	429a      	cmp	r2, r3
 800174c:	d005      	beq.n	800175a <runHW+0x3ba>
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <runHW+0x3ba>
		 	rightButtonState = GPIO_PIN_SET;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		 }

		 {int c;for (c = 0; c < 1000000; c++);}
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
 800175e:	e002      	b.n	8001766 <runHW+0x3c6>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3301      	adds	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <runHW+0x3e0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	ddf8      	ble.n	8001760 <runHW+0x3c0>
	  {
 800176e:	e68d      	b.n	800148c <runHW+0xec>
 8001770:	66666666 	.word	0x66666666
 8001774:	400a6666 	.word	0x400a6666
 8001778:	00000000 	.word	0x00000000
 800177c:	40affe00 	.word	0x40affe00
 8001780:	000f423f 	.word	0x000f423f
 8001784:	20000210 	.word	0x20000210
 8001788:	20000208 	.word	0x20000208
 800178c:	2000020c 	.word	0x2000020c
 8001790:	40020400 	.word	0x40020400
 8001794:	20000214 	.word	0x20000214
 8001798:	40020000 	.word	0x40020000

0800179c <_write>:
#include <string.h>
#include "comunicaciones.h"
#include "main.h"

int _write(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00b      	b.n	80017c6 <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	1c4b      	adds	r3, r1, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b8:	2201      	movs	r2, #1
 80017ba:	4807      	ldr	r0, [pc, #28]	; (80017d8 <_write+0x3c>)
 80017bc:	f003 fb8f 	bl	8004ede <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbef      	blt.n	80017ae <_write+0x12>
	}

	return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002a4 	.word	0x200002a4

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e0:	f001 fbc0 	bl	8002f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e4:	f000 f816 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f000 f962 	bl	8001ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ec:	f000 f922 	bl	8001a34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017f0:	f000 f8f6 	bl	80019e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017f4:	f000 f8ca 	bl	800198c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80017f8:	f000 f876 	bl	80018e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf ("SBC_PRJ at "  __TIME__ "\r\n");
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <main+0x34>)
 80017fe:	f008 fa75 	bl	8009cec <puts>
  //ESP8266_RESET();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001802:	f004 fa0f 	bl	8005c24 <osKernelInitialize>
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
  CONFIGURACION_INICIAL();
 8001806:	f001 fae5 	bl	8002dd4 <CONFIGURACION_INICIAL>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 800180a:	f004 fa2f 	bl	8005c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800180e:	e7fe      	b.n	800180e <main+0x32>
 8001810:	0800be14 	.word	0x0800be14

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	; 0x50
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	2230      	movs	r2, #48	; 0x30
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f007 fc8a 	bl	800913c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <SystemClock_Config+0xcc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <SystemClock_Config+0xcc>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <SystemClock_Config+0xcc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <SystemClock_Config+0xd0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <SystemClock_Config+0xd0>)
 800185e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001874:	2301      	movs	r3, #1
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	2310      	movs	r3, #16
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001884:	2310      	movs	r3, #16
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001888:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800188c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800188e:	2304      	movs	r3, #4
 8001890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001892:	2304      	movs	r3, #4
 8001894:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fe3a 	bl	8004514 <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018a6:	f000 f9c9 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2302      	movs	r3, #2
 80018b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2102      	movs	r1, #2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f89c 	bl	8004a04 <HAL_RCC_ClockConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018d2:	f000 f9b3 	bl	8001c3c <Error_Handler>
  }
}
 80018d6:	bf00      	nop
 80018d8:	3750      	adds	r7, #80	; 0x50
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000

080018e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ee:	463b      	mov	r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <MX_ADC1_Init+0x98>)
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <MX_ADC1_Init+0x9c>)
 80018fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <MX_ADC1_Init+0x98>)
 8001902:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001906:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_ADC1_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_ADC1_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_ADC1_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_ADC1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_ADC1_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_ADC1_Init+0x98>)
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <MX_ADC1_Init+0xa0>)
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_ADC1_Init+0x98>)
 8001936:	2201      	movs	r2, #1
 8001938:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_ADC1_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_ADC1_Init+0x98>)
 8001944:	2201      	movs	r2, #1
 8001946:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_ADC1_Init+0x98>)
 800194a:	f001 fb7d 	bl	8003048 <HAL_ADC_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001954:	f000 f972 	bl	8001c3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_ADC1_Init+0x98>)
 800196a:	f001 fcfd 	bl	8003368 <HAL_ADC_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001974:	f000 f962 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000218 	.word	0x20000218
 8001984:	40012000 	.word	0x40012000
 8001988:	0f000001 	.word	0x0f000001

0800198c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_USART1_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019c4:	f003 fa3e 	bl	8004e44 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019ce:	f000 f935 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000260 	.word	0x20000260
 80019dc:	40011000 	.word	0x40011000

080019e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <MX_USART2_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a18:	f003 fa14 	bl	8004e44 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f000 f90b 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200002a4 	.word	0x200002a4
 8001a30:	40004400 	.word	0x40004400

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_DMA_Init+0x78>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <MX_DMA_Init+0x78>)
 8001a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_DMA_Init+0x78>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_DMA_Init+0x78>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <MX_DMA_Init+0x78>)
 8001a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_DMA_Init+0x78>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2105      	movs	r1, #5
 8001a76:	2010      	movs	r0, #16
 8001a78:	f001 ff7f 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f001 ff98 	bl	80039b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2105      	movs	r1, #5
 8001a86:	203a      	movs	r0, #58	; 0x3a
 8001a88:	f001 ff77 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a8c:	203a      	movs	r0, #58	; 0x3a
 8001a8e:	f001 ff90 	bl	80039b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2105      	movs	r1, #5
 8001a96:	2046      	movs	r0, #70	; 0x46
 8001a98:	f001 ff6f 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a9c:	2046      	movs	r0, #70	; 0x46
 8001a9e:	f001 ff88 	bl	80039b2 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a50      	ldr	r2, [pc, #320]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a42      	ldr	r2, [pc, #264]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <MX_GPIO_Init+0x17c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2102      	movs	r1, #2
 8001b3a:	483d      	ldr	r0, [pc, #244]	; (8001c30 <MX_GPIO_Init+0x180>)
 8001b3c:	f002 fcd0 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|BUZZER_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001b46:	483b      	ldr	r0, [pc, #236]	; (8001c34 <MX_GPIO_Init+0x184>)
 8001b48:	f002 fcca 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	4838      	ldr	r0, [pc, #224]	; (8001c34 <MX_GPIO_Init+0x184>)
 8001b52:	f002 fcc5 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_Pin|LED2_Pin|LED5_Pin|LED1_Pin
 8001b56:	2200      	movs	r2, #0
 8001b58:	f240 4139 	movw	r1, #1081	; 0x439
 8001b5c:	4836      	ldr	r0, [pc, #216]	; (8001c38 <MX_GPIO_Init+0x188>)
 8001b5e:	f002 fcbf 	bl	80044e0 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	482d      	ldr	r0, [pc, #180]	; (8001c30 <MX_GPIO_Init+0x180>)
 8001b7a:	f002 fb15 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP8266_RESET_Pin */
  GPIO_InitStruct.Pin = ESP8266_RESET_Pin;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_RESET_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4826      	ldr	r0, [pc, #152]	; (8001c30 <MX_GPIO_Init+0x180>)
 8001b96:	f002 fb07 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED8_Pin BUZZER_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|BUZZER_Pin|LED3_Pin;
 8001b9a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4820      	ldr	r0, [pc, #128]	; (8001c34 <MX_GPIO_Init+0x184>)
 8001bb4:	f002 faf8 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001bb8:	2340      	movs	r3, #64	; 0x40
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4819      	ldr	r0, [pc, #100]	; (8001c34 <MX_GPIO_Init+0x184>)
 8001bd0:	f002 faea 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED2_Pin LED5_Pin LED1_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED2_Pin|LED5_Pin|LED1_Pin
 8001bd4:	f240 4339 	movw	r3, #1081	; 0x439
 8001bd8:	617b      	str	r3, [r7, #20]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MX_GPIO_Init+0x188>)
 8001bee:	f002 fadb 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR1_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin;
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR1_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	480a      	ldr	r0, [pc, #40]	; (8001c30 <MX_GPIO_Init+0x180>)
 8001c06:	f002 facf 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR2_Pin */
  GPIO_InitStruct.Pin = PULSADOR2_Pin;
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR2_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_GPIO_Init+0x188>)
 8001c1e:	f002 fac3 	bl	80041a8 <HAL_GPIO_Init>

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020400 	.word	0x40020400

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_MspInit+0x54>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_MspInit+0x54>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_MspInit+0x54>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_MspInit+0x54>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_MspInit+0x54>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_MspInit+0x54>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	210f      	movs	r1, #15
 8001c8a:	f06f 0001 	mvn.w	r0, #1
 8001c8e:	f001 fe74 	bl	800397a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_ADC_MspInit+0x7c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d127      	bne.n	8001d12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin|NTC_Pin|POT_Pin;
 8001cfa:	2313      	movs	r3, #19
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0x84>)
 8001d0e:	f002 fa4b 	bl	80041a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40012000 	.word	0x40012000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a78      	ldr	r2, [pc, #480]	; (8001f28 <HAL_UART_MspInit+0x200>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	f040 808a 	bne.w	8001e60 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d96:	2307      	movs	r3, #7
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4863      	ldr	r0, [pc, #396]	; (8001f30 <HAL_UART_MspInit+0x208>)
 8001da2:	f002 fa01 	bl	80041a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001da8:	4a63      	ldr	r2, [pc, #396]	; (8001f38 <HAL_UART_MspInit+0x210>)
 8001daa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001dac:	4b61      	ldr	r3, [pc, #388]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db4:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc0:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dce:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dda:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de0:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001de6:	4853      	ldr	r0, [pc, #332]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001de8:	f001 fdfe 	bl	80039e8 <HAL_DMA_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001df2:	f7ff ff23 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_UART_MspInit+0x20c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e02:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_UART_MspInit+0x218>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e08:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e10:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e24:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e30:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e42:	483e      	ldr	r0, [pc, #248]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e44:	f001 fdd0 	bl	80039e8 <HAL_DMA_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001e4e:	f7ff fef5 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a39      	ldr	r2, [pc, #228]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
 8001e58:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <HAL_UART_MspInit+0x214>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e5e:	e05e      	b.n	8001f1e <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_UART_MspInit+0x21c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d159      	bne.n	8001f1e <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_UART_MspInit+0x204>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481c      	ldr	r0, [pc, #112]	; (8001f30 <HAL_UART_MspInit+0x208>)
 8001ebe:	f002 f973 	bl	80041a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_UART_MspInit+0x224>)
 8001ec6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ece:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f02:	4811      	ldr	r0, [pc, #68]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001f04:	f001 fd70 	bl	80039e8 <HAL_DMA_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8001f0e:	f7ff fe95 	bl	8001c3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
 8001f18:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <HAL_UART_MspInit+0x220>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	; 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	200002e8 	.word	0x200002e8
 8001f38:	40026440 	.word	0x40026440
 8001f3c:	20000348 	.word	0x20000348
 8001f40:	400264b8 	.word	0x400264b8
 8001f44:	40004400 	.word	0x40004400
 8001f48:	200003a8 	.word	0x200003a8
 8001f4c:	40026088 	.word	0x40026088

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <NMI_Handler+0x4>

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f001 f842 	bl	8003008 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f84:	f005 fd66 	bl	8007a54 <xTaskGetSchedulerState>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f8e:	f006 fc4b 	bl	8008828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <DMA1_Stream5_IRQHandler+0x10>)
 8001f9e:	f001 fe99 	bl	8003cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200003a8 	.word	0x200003a8

08001fac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA2_Stream2_IRQHandler+0x10>)
 8001fb2:	f001 fe8f 	bl	8003cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200002e8 	.word	0x200002e8

08001fc0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA2_Stream7_IRQHandler+0x10>)
 8001fc6:	f001 fe85 	bl	8003cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000348 	.word	0x20000348

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_kill>:

int _kill(int pid, int sig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fee:	f006 fe97 	bl	8008d20 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2216      	movs	r2, #22
 8001ff6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffe7 	bl	8001fe4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002016:	e7fe      	b.n	8002016 <_exit+0x12>

08002018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
	}

return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f006 fe18 	bl	8008d20 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	20000c08 	.word	0x20000c08
 8002124:	200162e0 	.word	0x200162e0

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <cleanResponse>:




void cleanResponse(uint8_t * data,int maxlen)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]


	uint8_t * j,*from, *pc;


	 i=0;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
	 while ((j=(uint8_t *)strstr((char *)data,"+IPD"))){
 800215a:	e01b      	b.n	8002194 <cleanResponse+0x48>

		 from=(uint8_t *)strstr((char *)j,":");
 800215c:	213a      	movs	r1, #58	; 0x3a
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f007 fea9 	bl	8009eb6 <strchr>
 8002164:	6138      	str	r0, [r7, #16]
		 from++;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	3301      	adds	r3, #1
 800216a:	613b      	str	r3, [r7, #16]

		 	 for (pc=from;pc<(data+2048);pc++)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e00a      	b.n	8002188 <cleanResponse+0x3c>
			 	*(j++)=*(from++);
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	1c53      	adds	r3, r2, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1c59      	adds	r1, r3, #1
 800217c:	6179      	str	r1, [r7, #20]
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	701a      	strb	r2, [r3, #0]
		 	 for (pc=from;pc<(data+2048);pc++)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3ee      	bcc.n	8002172 <cleanResponse+0x26>
	 while ((j=(uint8_t *)strstr((char *)data,"+IPD"))){
 8002194:	4924      	ldr	r1, [pc, #144]	; (8002228 <cleanResponse+0xdc>)
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f007 fe9a 	bl	8009ed0 <strstr>
 800219c:	6178      	str	r0, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1db      	bne.n	800215c <cleanResponse+0x10>
	 };
	 	 do
			                  {
			                  }while(data[i++]!='{');
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	61ba      	str	r2, [r7, #24]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b7b      	cmp	r3, #123	; 0x7b
 80021b4:	d1f6      	bne.n	80021a4 <cleanResponse+0x58>
			                  i--;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
	for (t=0;t<(2048-i);t++)
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	e00d      	b.n	80021de <cleanResponse+0x92>
		data[t]=data[t+i];
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	441a      	add	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	440b      	add	r3, r1
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
	for (t=0;t<(2048-i);t++)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dbeb      	blt.n	80021c2 <cleanResponse+0x76>

	i=0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]

    for (t=0;t<2048;t++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e00a      	b.n	800220a <cleanResponse+0xbe>
    	if (data[t]=='}')
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b7d      	cmp	r3, #125	; 0x7d
 80021fe:	d101      	bne.n	8002204 <cleanResponse+0xb8>
    		i=t;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	61bb      	str	r3, [r7, #24]
    for (t=0;t<2048;t++)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002210:	dbf0      	blt.n	80021f4 <cleanResponse+0xa8>
    data[i+1]=0;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3301      	adds	r3, #1
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]




}
 800221e:	bf00      	nop
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	0800bea8 	.word	0x0800bea8

0800222c <test_mode>:
#include "main.h";
#include "HW.h";
#include "comunicaciones.h";
#include "task_MODE.h";

void test_mode() {
 800222c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af04      	add	r7, sp, #16
	//barrido leds
	put_leds(0);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fe91 	bl	8000f5c <put_leds>
	led_check();
 800223a:	f000 f851 	bl	80022e0 <led_check>
	//BIP
	pip();
 800223e:	f000 f8c3 	bl	80023c8 <pip>
	//Valores T,L,P
	printf("Temp %f, Light %f, Pot %f\n\r", tempValue, lumValue, (float) potValue);
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <test_mode+0x98>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f986 	bl	8000558 <__aeabi_f2d>
 800224c:	4680      	mov	r8, r0
 800224e:	4689      	mov	r9, r1
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <test_mode+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f97f 	bl	8000558 <__aeabi_f2d>
 800225a:	4604      	mov	r4, r0
 800225c:	460d      	mov	r5, r1
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <test_mode+0xa0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f973 	bl	8000558 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800227a:	e9cd 4500 	strd	r4, r5, [sp]
 800227e:	4642      	mov	r2, r8
 8002280:	464b      	mov	r3, r9
 8002282:	4813      	ldr	r0, [pc, #76]	; (80022d0 <test_mode+0xa4>)
 8002284:	f007 fcac 	bl	8009be0 <iprintf>
	//Valores buttons
	printf("Value btn1 %c, Value btn2 %c\n\r", get_button_value(HAL_GPIO_ReadPin(PULSADOR1_GPIO_Port, PULSADOR1_Pin)), get_button_value(HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin)));
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	4812      	ldr	r0, [pc, #72]	; (80022d4 <test_mode+0xa8>)
 800228c:	f002 f910 	bl	80044b0 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8ac 	bl	80023f0 <get_button_value>
 8002298:	4603      	mov	r3, r0
 800229a:	461c      	mov	r4, r3
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	480e      	ldr	r0, [pc, #56]	; (80022d8 <test_mode+0xac>)
 80022a0:	f002 f906 	bl	80044b0 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f8a2 	bl	80023f0 <get_button_value>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	4621      	mov	r1, r4
 80022b2:	480a      	ldr	r0, [pc, #40]	; (80022dc <test_mode+0xb0>)
 80022b4:	f007 fc94 	bl	8009be0 <iprintf>
	//Enviar AT
	checkWIFI();
 80022b8:	f000 fa3e 	bl	8002738 <checkWIFI>
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c4:	2000020c 	.word	0x2000020c
 80022c8:	20000208 	.word	0x20000208
 80022cc:	20000200 	.word	0x20000200
 80022d0:	0800beb0 	.word	0x0800beb0
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	0800becc 	.word	0x0800becc

080022e0 <led_check>:

void led_check() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	2110      	movs	r1, #16
 80022e8:	4835      	ldr	r0, [pc, #212]	; (80023c0 <led_check+0xe0>)
 80022ea:	f002 f8f9 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 80022ee:	20fa      	movs	r0, #250	; 0xfa
 80022f0:	f003 fce2 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2110      	movs	r1, #16
 80022f8:	4831      	ldr	r0, [pc, #196]	; (80023c0 <led_check+0xe0>)
 80022fa:	f002 f8f1 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002304:	482e      	ldr	r0, [pc, #184]	; (80023c0 <led_check+0xe0>)
 8002306:	f002 f8eb 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 800230a:	20fa      	movs	r0, #250	; 0xfa
 800230c:	f003 fcd4 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002316:	482a      	ldr	r0, [pc, #168]	; (80023c0 <led_check+0xe0>)
 8002318:	f002 f8e2 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 800231c:	2201      	movs	r2, #1
 800231e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002322:	4828      	ldr	r0, [pc, #160]	; (80023c4 <led_check+0xe4>)
 8002324:	f002 f8dc 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 8002328:	20fa      	movs	r0, #250	; 0xfa
 800232a:	f003 fcc5 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002334:	4823      	ldr	r0, [pc, #140]	; (80023c4 <led_check+0xe4>)
 8002336:	f002 f8d3 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	2120      	movs	r1, #32
 800233e:	4820      	ldr	r0, [pc, #128]	; (80023c0 <led_check+0xe0>)
 8002340:	f002 f8ce 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 8002344:	20fa      	movs	r0, #250	; 0xfa
 8002346:	f003 fcb7 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2120      	movs	r1, #32
 800234e:	481c      	ldr	r0, [pc, #112]	; (80023c0 <led_check+0xe0>)
 8002350:	f002 f8c6 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 8002354:	2201      	movs	r2, #1
 8002356:	2108      	movs	r1, #8
 8002358:	4819      	ldr	r0, [pc, #100]	; (80023c0 <led_check+0xe0>)
 800235a:	f002 f8c1 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 800235e:	20fa      	movs	r0, #250	; 0xfa
 8002360:	f003 fcaa 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	2108      	movs	r1, #8
 8002368:	4815      	ldr	r0, [pc, #84]	; (80023c0 <led_check+0xe0>)
 800236a:	f002 f8b9 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	4814      	ldr	r0, [pc, #80]	; (80023c4 <led_check+0xe4>)
 8002374:	f002 f8b4 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 8002378:	20fa      	movs	r0, #250	; 0xfa
 800237a:	f003 fc9d 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	2140      	movs	r1, #64	; 0x40
 8002382:	4810      	ldr	r0, [pc, #64]	; (80023c4 <led_check+0xe4>)
 8002384:	f002 f8ac 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	2101      	movs	r1, #1
 800238c:	480c      	ldr	r0, [pc, #48]	; (80023c0 <led_check+0xe0>)
 800238e:	f002 f8a7 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 8002392:	20fa      	movs	r0, #250	; 0xfa
 8002394:	f003 fc90 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	2101      	movs	r1, #1
 800239c:	4808      	ldr	r0, [pc, #32]	; (80023c0 <led_check+0xe0>)
 800239e:	f002 f89f 	bl	80044e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2120      	movs	r1, #32
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <led_check+0xe4>)
 80023a8:	f002 f89a 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(250);
 80023ac:	20fa      	movs	r0, #250	; 0xfa
 80023ae:	f003 fc83 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2120      	movs	r1, #32
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <led_check+0xe4>)
 80023b8:	f002 f892 	bl	80044e0 <HAL_GPIO_WritePin>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020000 	.word	0x40020000

080023c8 <pip>:

void pip() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_SET);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <pip+0x24>)
 80023d2:	f002 f885 	bl	80044e0 <HAL_GPIO_WritePin>
	osDelay(150);
 80023d6:	2096      	movs	r0, #150	; 0x96
 80023d8:	f003 fc6e 	bl	8005cb8 <osDelay>
	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <pip+0x24>)
 80023e2:	f002 f87d 	bl	80044e0 <HAL_GPIO_WritePin>
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020000 	.word	0x40020000

080023f0 <get_button_value>:

char get_button_value(GPIO_PinState pinState) {
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
	if(pinState == GPIO_PIN_SET) {
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <get_button_value+0x14>
		return 'P';
 8002400:	2350      	movs	r3, #80	; 0x50
 8002402:	e000      	b.n	8002406 <get_button_value+0x16>
	} else {
		return 'N';
 8002404:	234e      	movs	r3, #78	; 0x4e
	}
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <read>:
#include "task_READ.h"
#include "task_WRITE.h"
#include "task_TIME.h"


void read() {
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 800241a:	af00      	add	r7, sp, #0

	printf("READ\r\n");
 800241c:	4845      	ldr	r0, [pc, #276]	; (8002534 <read+0x120>)
 800241e:	f007 fc65 	bl	8009cec <puts>
	int signal;
	//CJSON_PUBLIC(cJSON *) responseJson;

	//char* sensorName = "SensorSEU_SEU_SBC00";
	char* sensorName = "SensorSEU_PPB20";
 8002422:	4b45      	ldr	r3, [pc, #276]	; (8002538 <read+0x124>)
 8002424:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
	char json[500];
	char jsonTemplate[] = "{\"entities\":[{\"type\":\"Sensor\",\"isPattern\":\"false\",\"id\":\"%s\"}]}\r\n";
 8002428:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800242c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8002430:	4a42      	ldr	r2, [pc, #264]	; (800253c <read+0x128>)
 8002432:	4618      	mov	r0, r3
 8002434:	4611      	mov	r1, r2
 8002436:	2341      	movs	r3, #65	; 0x41
 8002438:	461a      	mov	r2, r3
 800243a:	f006 fe71 	bl	8009120 <memcpy>
	sprintf(json, jsonTemplate, sensorName);
 800243e:	f507 711c 	add.w	r1, r7, #624	; 0x270
 8002442:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002446:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 800244a:	4618      	mov	r0, r3
 800244c:	f007 fcd0 	bl	8009df0 <siprintf>

	char request[500];
	char requestTemplate[] = "POST /v1/queryContext HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: %lu\r\n\r\n %s";
 8002450:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002454:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002458:	4a39      	ldr	r2, [pc, #228]	; (8002540 <read+0x12c>)
 800245a:	4618      	mov	r0, r3
 800245c:	4611      	mov	r1, r2
 800245e:	2375      	movs	r3, #117	; 0x75
 8002460:	461a      	mov	r2, r3
 8002462:	f006 fe5d 	bl	8009120 <memcpy>
	sprintf(request, requestTemplate, strlen(json), json);
 8002466:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd feb8 	bl	80001e0 <strlen>
 8002470:	4602      	mov	r2, r0
 8002472:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002476:	1d39      	adds	r1, r7, #4
 8002478:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800247c:	f007 fcb8 	bl	8009df0 <siprintf>

	signal = 1;
 8002480:	2301      	movs	r3, #1
 8002482:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
	do {
		if (COMM_request.command==0){ //nada quiere nada
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <read+0x130>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d113      	bne.n	80024b6 <read+0xa2>
			COMM_request.command=1;
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <read+0x130>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]
			COMM_request.result=0;
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <read+0x130>)
 8002496:	2200      	movs	r2, #0
 8002498:	605a      	str	r2, [r3, #4]
			COMM_request.dst_port=1026;
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <read+0x130>)
 800249c:	f240 4202 	movw	r2, #1026	; 0x402
 80024a0:	609a      	str	r2, [r3, #8]
			COMM_request.dst_address=(uint8_t *)"pperez-seu-or.disca.upv.es";
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <read+0x130>)
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <read+0x134>)
 80024a6:	60da      	str	r2, [r3, #12]
			COMM_request.HTTP_request=(uint8_t *) request;
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <read+0x130>)
 80024aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024ae:	6113      	str	r3, [r2, #16]
			signal=0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
		}
	}
	while(signal);
 80024b6:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e3      	bne.n	8002486 <read+0x72>

	COMM_request.HTTP_response = ESP_Send_Request(COMM_request.dst_address, COMM_request.dst_port, COMM_request.HTTP_request);
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <read+0x130>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <read+0x130>)
 80024c4:	6891      	ldr	r1, [r2, #8]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <read+0x130>)
 80024c8:	6912      	ldr	r2, [r2, #16]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f972 	bl	80027b4 <ESP_Send_Request>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <read+0x130>)
 80024d6:	615a      	str	r2, [r3, #20]

	while(COMM_request.result==0);
 80024d8:	bf00      	nop
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <read+0x130>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0fb      	beq.n	80024da <read+0xc6>

	printf("END READ\n\r");
 80024e2:	481a      	ldr	r0, [pc, #104]	; (800254c <read+0x138>)
 80024e4:	f007 fb7c 	bl	8009be0 <iprintf>
	cleanResponse(COMM_request.HTTP_response, strlen(COMM_request.HTTP_response));
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <read+0x130>)
 80024ea:	695c      	ldr	r4, [r3, #20]
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <read+0x130>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fd fe75 	bl	80001e0 <strlen>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff fe26 	bl	800214c <cleanResponse>

	printf("\n\r CLEAN JSON %s\n\r", COMM_request.HTTP_response);
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <read+0x130>)
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4619      	mov	r1, r3
 8002506:	4812      	ldr	r0, [pc, #72]	; (8002550 <read+0x13c>)
 8002508:	f007 fb6a 	bl	8009be0 <iprintf>

	printf("RESPONSE JSON %s\r\n", (const char *) responseJson);

	cJSON_Delete(json);*/

	COMM_request.command=0;
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <read+0x130>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
	COMM_request.result=0;
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <read+0x130>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]

	vTaskDelay(10/portTICK_RATE_MS );
 8002518:	200a      	movs	r0, #10
 800251a:	f004 fd05 	bl	8006f28 <vTaskDelay>
	global_time_it++;
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <read+0x140>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <read+0x140>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	f207 47b4 	addw	r7, r7, #1204	; 0x4b4
 800252e:	46bd      	mov	sp, r7
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	bf00      	nop
 8002534:	0800beec 	.word	0x0800beec
 8002538:	0800bef4 	.word	0x0800bef4
 800253c:	0800bf40 	.word	0x0800bf40
 8002540:	0800bf84 	.word	0x0800bf84
 8002544:	20000c0c 	.word	0x20000c0c
 8002548:	0800bf04 	.word	0x0800bf04
 800254c:	0800bf20 	.word	0x0800bf20
 8002550:	0800bf2c 	.word	0x0800bf2c
 8002554:	20000c24 	.word	0x20000c24

08002558 <WIFI_RESET>:
uint32_t global_wifi_ready;

uint8_t aux_buff_WIFI[2048];
uint8_t buff_WIFI_response[2048];

void WIFI_RESET(void){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
	// RESET
	unsigned int ct;
	uint32_t global_wifi_ready = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2102      	movs	r1, #2
 8002566:	481e      	ldr	r0, [pc, #120]	; (80025e0 <WIFI_RESET+0x88>)
 8002568:	f001 ffba 	bl	80044e0 <HAL_GPIO_WritePin>
	for (ct=0;ct<1000000;ct++);
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	e002      	b.n	8002578 <WIFI_RESET+0x20>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3301      	adds	r3, #1
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <WIFI_RESET+0x8c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d9f8      	bls.n	8002572 <WIFI_RESET+0x1a>
	HAL_UART_Init(&huart1);
 8002580:	4819      	ldr	r0, [pc, #100]	; (80025e8 <WIFI_RESET+0x90>)
 8002582:	f002 fc5f 	bl	8004e44 <HAL_UART_Init>
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	e007      	b.n	800259c <WIFI_RESET+0x44>
 800258c:	4a17      	ldr	r2, [pc, #92]	; (80025ec <WIFI_RESET+0x94>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3301      	adds	r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a2:	d3f3      	bcc.n	800258c <WIFI_RESET+0x34>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 80025a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a8:	4910      	ldr	r1, [pc, #64]	; (80025ec <WIFI_RESET+0x94>)
 80025aa:	480f      	ldr	r0, [pc, #60]	; (80025e8 <WIFI_RESET+0x90>)
 80025ac:	f002 fd29 	bl	8005002 <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_SET);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2102      	movs	r1, #2
 80025b4:	480a      	ldr	r0, [pc, #40]	; (80025e0 <WIFI_RESET+0x88>)
 80025b6:	f001 ff93 	bl	80044e0 <HAL_GPIO_WritePin>

	vTaskDelay(1000/portTICK_RATE_MS );
 80025ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025be:	f004 fcb3 	bl	8006f28 <vTaskDelay>
   	HAL_UART_DMAStop(&huart1);
 80025c2:	4809      	ldr	r0, [pc, #36]	; (80025e8 <WIFI_RESET+0x90>)
 80025c4:	f002 fd4d 	bl	8005062 <HAL_UART_DMAStop>
	printf("XXXXX %s",buff_recv);
 80025c8:	4908      	ldr	r1, [pc, #32]	; (80025ec <WIFI_RESET+0x94>)
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <WIFI_RESET+0x98>)
 80025cc:	f007 fb08 	bl	8009be0 <iprintf>
	printf("XXXXX\r\n\n\n\n");
 80025d0:	4808      	ldr	r0, [pc, #32]	; (80025f4 <WIFI_RESET+0x9c>)
 80025d2:	f007 fb8b 	bl	8009cec <puts>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40020800 	.word	0x40020800
 80025e4:	000f423f 	.word	0x000f423f
 80025e8:	20000260 	.word	0x20000260
 80025ec:	20000408 	.word	0x20000408
 80025f0:	0800c008 	.word	0x0800c008
 80025f4:	0800c014 	.word	0x0800c014

080025f8 <WIFI_Boot>:


void WIFI_Boot(void)

{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	unsigned int ct;

 	printf("Reseting...\r\n");
 80025fe:	4842      	ldr	r0, [pc, #264]	; (8002708 <WIFI_Boot+0x110>)
 8002600:	f007 fb74 	bl	8009cec <puts>

 	WIFI_RESET();
 8002604:	f7ff ffa8 	bl	8002558 <WIFI_RESET>
 	printf("Init...\r\n");
 8002608:	4840      	ldr	r0, [pc, #256]	; (800270c <WIFI_Boot+0x114>)
 800260a:	f007 fb6f 	bl	8009cec <puts>

 	HAL_UART_Init(&huart1);
 800260e:	4840      	ldr	r0, [pc, #256]	; (8002710 <WIFI_Boot+0x118>)
 8002610:	f002 fc18 	bl	8004e44 <HAL_UART_Init>

 	// version
 	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	e007      	b.n	800262a <WIFI_Boot+0x32>
 800261a:	4a3e      	ldr	r2, [pc, #248]	; (8002714 <WIFI_Boot+0x11c>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3301      	adds	r3, #1
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	d3f3      	bcc.n	800261a <WIFI_Boot+0x22>
 	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8002632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002636:	4937      	ldr	r1, [pc, #220]	; (8002714 <WIFI_Boot+0x11c>)
 8002638:	4835      	ldr	r0, [pc, #212]	; (8002710 <WIFI_Boot+0x118>)
 800263a:	f002 fce2 	bl	8005002 <HAL_UART_Receive_DMA>
 	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT\r\n",strlen("AT\r\n"),10000);
 800263e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002642:	2204      	movs	r2, #4
 8002644:	4934      	ldr	r1, [pc, #208]	; (8002718 <WIFI_Boot+0x120>)
 8002646:	4832      	ldr	r0, [pc, #200]	; (8002710 <WIFI_Boot+0x118>)
 8002648:	f002 fc49 	bl	8004ede <HAL_UART_Transmit>
	 vTaskDelay(100/portTICK_RATE_MS );
 800264c:	2064      	movs	r0, #100	; 0x64
 800264e:	f004 fc6b 	bl	8006f28 <vTaskDelay>
 	HAL_UART_DMAStop(&huart1);
 8002652:	482f      	ldr	r0, [pc, #188]	; (8002710 <WIFI_Boot+0x118>)
 8002654:	f002 fd05 	bl	8005062 <HAL_UART_DMAStop>
	printf("1: %s",buff_recv);
 8002658:	492e      	ldr	r1, [pc, #184]	; (8002714 <WIFI_Boot+0x11c>)
 800265a:	4830      	ldr	r0, [pc, #192]	; (800271c <WIFI_Boot+0x124>)
 800265c:	f007 fac0 	bl	8009be0 <iprintf>

	printf("2: %s",buff_recv);
*/

	// Pon en modo station=1,  station+access_point=3
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	e007      	b.n	8002676 <WIFI_Boot+0x7e>
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <WIFI_Boot+0x11c>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267c:	d3f3      	bcc.n	8002666 <WIFI_Boot+0x6e>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 800267e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002682:	4924      	ldr	r1, [pc, #144]	; (8002714 <WIFI_Boot+0x11c>)
 8002684:	4822      	ldr	r0, [pc, #136]	; (8002710 <WIFI_Boot+0x118>)
 8002686:	f002 fcbc 	bl	8005002 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <WIFI_Boot+0x128>)
 800268c:	220d      	movs	r2, #13
 800268e:	4925      	ldr	r1, [pc, #148]	; (8002724 <WIFI_Boot+0x12c>)
 8002690:	481f      	ldr	r0, [pc, #124]	; (8002710 <WIFI_Boot+0x118>)
 8002692:	f002 fc24 	bl	8004ede <HAL_UART_Transmit>
	 vTaskDelay(100/portTICK_RATE_MS );
 8002696:	2064      	movs	r0, #100	; 0x64
 8002698:	f004 fc46 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 800269c:	481c      	ldr	r0, [pc, #112]	; (8002710 <WIFI_Boot+0x118>)
 800269e:	f002 fce0 	bl	8005062 <HAL_UART_DMAStop>
	printf("3: %s",buff_recv);
 80026a2:	491c      	ldr	r1, [pc, #112]	; (8002714 <WIFI_Boot+0x11c>)
 80026a4:	4820      	ldr	r0, [pc, #128]	; (8002728 <WIFI_Boot+0x130>)
 80026a6:	f007 fa9b 	bl	8009be0 <iprintf>

	// Programa la contraseña del access-point
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	e007      	b.n	80026c0 <WIFI_Boot+0xc8>
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <WIFI_Boot+0x11c>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3301      	adds	r3, #1
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c6:	d3f3      	bcc.n	80026b0 <WIFI_Boot+0xb8>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 80026c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026cc:	4911      	ldr	r1, [pc, #68]	; (8002714 <WIFI_Boot+0x11c>)
 80026ce:	4810      	ldr	r0, [pc, #64]	; (8002710 <WIFI_Boot+0x118>)
 80026d0:	f002 fc97 	bl	8005002 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1,( unsigned char *) "AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n",strlen("AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n"),10000);
 80026d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80026d8:	2221      	movs	r2, #33	; 0x21
 80026da:	4914      	ldr	r1, [pc, #80]	; (800272c <WIFI_Boot+0x134>)
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <WIFI_Boot+0x118>)
 80026de:	f002 fbfe 	bl	8004ede <HAL_UART_Transmit>
	vTaskDelay(5000/portTICK_RATE_MS );
 80026e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80026e6:	f004 fc1f 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 80026ea:	4809      	ldr	r0, [pc, #36]	; (8002710 <WIFI_Boot+0x118>)
 80026ec:	f002 fcb9 	bl	8005062 <HAL_UART_DMAStop>
	printf("4: %s",buff_recv);
 80026f0:	4908      	ldr	r1, [pc, #32]	; (8002714 <WIFI_Boot+0x11c>)
 80026f2:	480f      	ldr	r0, [pc, #60]	; (8002730 <WIFI_Boot+0x138>)
 80026f4:	f007 fa74 	bl	8009be0 <iprintf>
	vTaskDelay(5000/portTICK_RATE_MS );
	while(buff_recv[0] == 0);
	HAL_UART_DMAStop(&huart1);
	printf("5: %s",buff_recv);*/

	global_wifi_ready = 1;
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <WIFI_Boot+0x13c>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	0800c020 	.word	0x0800c020
 800270c:	0800c030 	.word	0x0800c030
 8002710:	20000260 	.word	0x20000260
 8002714:	20000408 	.word	0x20000408
 8002718:	0800c03c 	.word	0x0800c03c
 800271c:	0800c044 	.word	0x0800c044
 8002720:	000186a0 	.word	0x000186a0
 8002724:	0800c04c 	.word	0x0800c04c
 8002728:	0800c05c 	.word	0x0800c05c
 800272c:	0800c064 	.word	0x0800c064
 8002730:	0800c088 	.word	0x0800c088
 8002734:	20000c28 	.word	0x20000c28

08002738 <checkWIFI>:

int checkWIFI() {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
	int ct;
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	e007      	b.n	8002754 <checkWIFI+0x1c>
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <checkWIFI+0x6c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3301      	adds	r3, #1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800275a:	dbf3      	blt.n	8002744 <checkWIFI+0xc>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 800275c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002760:	4910      	ldr	r1, [pc, #64]	; (80027a4 <checkWIFI+0x6c>)
 8002762:	4811      	ldr	r0, [pc, #68]	; (80027a8 <checkWIFI+0x70>)
 8002764:	f002 fc4d 	bl	8005002 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 8002768:	f242 7310 	movw	r3, #10000	; 0x2710
 800276c:	220a      	movs	r2, #10
 800276e:	490f      	ldr	r1, [pc, #60]	; (80027ac <checkWIFI+0x74>)
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <checkWIFI+0x70>)
 8002772:	f002 fbb4 	bl	8004ede <HAL_UART_Transmit>
	vTaskDelay(2000/portTICK_RATE_MS );
 8002776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800277a:	f004 fbd5 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 800277e:	480a      	ldr	r0, [pc, #40]	; (80027a8 <checkWIFI+0x70>)
 8002780:	f002 fc6f 	bl	8005062 <HAL_UART_DMAStop>
	printf("5: %s",buff_recv);
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <checkWIFI+0x6c>)
 8002786:	480a      	ldr	r0, [pc, #40]	; (80027b0 <checkWIFI+0x78>)
 8002788:	f007 fa2a 	bl	8009be0 <iprintf>
		+CIFSR:STAIP,"0.0.0.0"
		+CIFSR:STAMAC,"c8:c9:a3:c5:ef:78"
	 * */


	if (buff_recv[0] != 0) {
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <checkWIFI+0x6c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <checkWIFI+0x60>
		return 1;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <checkWIFI+0x62>
	}
	return 0;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000408 	.word	0x20000408
 80027a8:	20000260 	.word	0x20000260
 80027ac:	0800c090 	.word	0x0800c090
 80027b0:	0800c09c 	.word	0x0800c09c

080027b4 <ESP_Send_Request>:


uint8_t * ESP_Send_Request(uint8_t * dst_address, uint32_t dst_port, uint8_t * request){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
    int ct;

	// abrir conexión con
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e007      	b.n	80027d6 <ESP_Send_Request+0x22>
 80027c6:	4a55      	ldr	r2, [pc, #340]	; (800291c <ESP_Send_Request+0x168>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4413      	add	r3, r2
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027dc:	dbf3      	blt.n	80027c6 <ESP_Send_Request+0x12>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 80027de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e2:	494e      	ldr	r1, [pc, #312]	; (800291c <ESP_Send_Request+0x168>)
 80027e4:	484e      	ldr	r0, [pc, #312]	; (8002920 <ESP_Send_Request+0x16c>)
 80027e6:	f002 fc0c 	bl	8005002 <HAL_UART_Receive_DMA>
	sprintf(( char *)aux_buff_WIFI,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",dst_address,(int)dst_port);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	494d      	ldr	r1, [pc, #308]	; (8002924 <ESP_Send_Request+0x170>)
 80027f0:	484d      	ldr	r0, [pc, #308]	; (8002928 <ESP_Send_Request+0x174>)
 80027f2:	f007 fafd 	bl	8009df0 <siprintf>
	HAL_UART_Transmit(&huart1, ( unsigned char *) aux_buff_WIFI,strlen((const char *)aux_buff_WIFI),10000);
 80027f6:	484c      	ldr	r0, [pc, #304]	; (8002928 <ESP_Send_Request+0x174>)
 80027f8:	f7fd fcf2 	bl	80001e0 <strlen>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f242 7310 	movw	r3, #10000	; 0x2710
 8002804:	4948      	ldr	r1, [pc, #288]	; (8002928 <ESP_Send_Request+0x174>)
 8002806:	4846      	ldr	r0, [pc, #280]	; (8002920 <ESP_Send_Request+0x16c>)
 8002808:	f002 fb69 	bl	8004ede <HAL_UART_Transmit>
	vTaskDelay(200/portTICK_RATE_MS );
 800280c:	20c8      	movs	r0, #200	; 0xc8
 800280e:	f004 fb8b 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8002812:	4843      	ldr	r0, [pc, #268]	; (8002920 <ESP_Send_Request+0x16c>)
 8002814:	f002 fc25 	bl	8005062 <HAL_UART_DMAStop>
	// %s",buff_recv);

	// enviar una peticion HTTP

	int lc=strlen((const char *)request);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fd fce1 	bl	80001e0 <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	613b      	str	r3, [r7, #16]
	sprintf((char *)aux_buff_WIFI,"AT+CIPSEND=%d\r\n",lc);
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4941      	ldr	r1, [pc, #260]	; (800292c <ESP_Send_Request+0x178>)
 8002826:	4840      	ldr	r0, [pc, #256]	; (8002928 <ESP_Send_Request+0x174>)
 8002828:	f007 fae2 	bl	8009df0 <siprintf>
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e007      	b.n	8002842 <ESP_Send_Request+0x8e>
 8002832:	4a3a      	ldr	r2, [pc, #232]	; (800291c <ESP_Send_Request+0x168>)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	4413      	add	r3, r2
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002848:	dbf3      	blt.n	8002832 <ESP_Send_Request+0x7e>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 800284a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800284e:	4933      	ldr	r1, [pc, #204]	; (800291c <ESP_Send_Request+0x168>)
 8002850:	4833      	ldr	r0, [pc, #204]	; (8002920 <ESP_Send_Request+0x16c>)
 8002852:	f002 fbd6 	bl	8005002 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1,( const uint8_t *)aux_buff_WIFI,strlen((const char *)aux_buff_WIFI),10000);
 8002856:	4834      	ldr	r0, [pc, #208]	; (8002928 <ESP_Send_Request+0x174>)
 8002858:	f7fd fcc2 	bl	80001e0 <strlen>
 800285c:	4603      	mov	r3, r0
 800285e:	b29a      	uxth	r2, r3
 8002860:	f242 7310 	movw	r3, #10000	; 0x2710
 8002864:	4930      	ldr	r1, [pc, #192]	; (8002928 <ESP_Send_Request+0x174>)
 8002866:	482e      	ldr	r0, [pc, #184]	; (8002920 <ESP_Send_Request+0x16c>)
 8002868:	f002 fb39 	bl	8004ede <HAL_UART_Transmit>
	vTaskDelay(200/portTICK_RATE_MS );
 800286c:	20c8      	movs	r0, #200	; 0xc8
 800286e:	f004 fb5b 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8002872:	482b      	ldr	r0, [pc, #172]	; (8002920 <ESP_Send_Request+0x16c>)
 8002874:	f002 fbf5 	bl	8005062 <HAL_UART_DMAStop>
	//printf("7: %s",buff_recv);
	// ahora HTTP

	for (ct=0;ct<2048;ct++) buff_WIFI_response[ct]=0;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e007      	b.n	800288e <ESP_Send_Request+0xda>
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <ESP_Send_Request+0x17c>)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4413      	add	r3, r2
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002894:	dbf3      	blt.n	800287e <ESP_Send_Request+0xca>
	HAL_UART_Receive_DMA(&huart1, buff_WIFI_response,2048);
 8002896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800289a:	4925      	ldr	r1, [pc, #148]	; (8002930 <ESP_Send_Request+0x17c>)
 800289c:	4820      	ldr	r0, [pc, #128]	; (8002920 <ESP_Send_Request+0x16c>)
 800289e:	f002 fbb0 	bl	8005002 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, request,strlen( (const char *)request),10000);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd fc9c 	bl	80001e0 <strlen>
 80028a8:	4603      	mov	r3, r0
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	481b      	ldr	r0, [pc, #108]	; (8002920 <ESP_Send_Request+0x16c>)
 80028b4:	f002 fb13 	bl	8004ede <HAL_UART_Transmit>
	vTaskDelay(2000/portTICK_RATE_MS );
 80028b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028bc:	f004 fb34 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 80028c0:	4817      	ldr	r0, [pc, #92]	; (8002920 <ESP_Send_Request+0x16c>)
 80028c2:	f002 fbce 	bl	8005062 <HAL_UART_DMAStop>
	//printf("8: %s",buff_WIFI_response);

	// cerrar conexión

	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e007      	b.n	80028dc <ESP_Send_Request+0x128>
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <ESP_Send_Request+0x168>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4413      	add	r3, r2
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e2:	dbf3      	blt.n	80028cc <ESP_Send_Request+0x118>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 80028e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e8:	490c      	ldr	r1, [pc, #48]	; (800291c <ESP_Send_Request+0x168>)
 80028ea:	480d      	ldr	r0, [pc, #52]	; (8002920 <ESP_Send_Request+0x16c>)
 80028ec:	f002 fb89 	bl	8005002 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CIPCLOSE\r\n",strlen("AT+CIPCLOSE\r\n"),10000);
 80028f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80028f4:	220d      	movs	r2, #13
 80028f6:	490f      	ldr	r1, [pc, #60]	; (8002934 <ESP_Send_Request+0x180>)
 80028f8:	4809      	ldr	r0, [pc, #36]	; (8002920 <ESP_Send_Request+0x16c>)
 80028fa:	f002 faf0 	bl	8004ede <HAL_UART_Transmit>
	vTaskDelay(200/portTICK_RATE_MS );
 80028fe:	20c8      	movs	r0, #200	; 0xc8
 8002900:	f004 fb12 	bl	8006f28 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8002904:	4806      	ldr	r0, [pc, #24]	; (8002920 <ESP_Send_Request+0x16c>)
 8002906:	f002 fbac 	bl	8005062 <HAL_UART_DMAStop>
	//printf("9: %s",buff_recv);

	COMM_request.result = 1;
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <ESP_Send_Request+0x184>)
 800290c:	2201      	movs	r2, #1
 800290e:	605a      	str	r2, [r3, #4]

	return buff_WIFI_response;
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <ESP_Send_Request+0x17c>)
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000408 	.word	0x20000408
 8002920:	20000260 	.word	0x20000260
 8002924:	0800c0a4 	.word	0x0800c0a4
 8002928:	20000c2c 	.word	0x20000c2c
 800292c:	0800c0c0 	.word	0x0800c0c0
 8002930:	2000142c 	.word	0x2000142c
 8002934:	0800c0d0 	.word	0x0800c0d0
 8002938:	20000c0c 	.word	0x20000c0c

0800293c <write>:
#include "cJSON.h"

char* sensorName = "SensorSEU_SEU_SBC00";
char alarmChar;

void write(){
 800293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002940:	f2ad 6d34 	subw	sp, sp, #1588	; 0x634
 8002944:	af12      	add	r7, sp, #72	; 0x48

	printf("WRITE\n\r");
 8002946:	4875      	ldr	r0, [pc, #468]	; (8002b1c <write+0x1e0>)
 8002948:	f007 f94a 	bl	8009be0 <iprintf>
	int signal;
	int sensor;
	printf("reading sensor\n\r");
 800294c:	4874      	ldr	r0, [pc, #464]	; (8002b20 <write+0x1e4>)
 800294e:	f007 f947 	bl	8009be0 <iprintf>
	alarmChar = get_alarm_char();
 8002952:	f000 f91b 	bl	8002b8c <get_alarm_char>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	4b72      	ldr	r3, [pc, #456]	; (8002b24 <write+0x1e8>)
 800295c:	701a      	strb	r2, [r3, #0]
	printf("start jsons\n\r");
 800295e:	4872      	ldr	r0, [pc, #456]	; (8002b28 <write+0x1ec>)
 8002960:	f007 f93e 	bl	8009be0 <iprintf>
	char json[500];
	char jsonTemplate[] = "{\"contextElements\":[{\"type\":\"Sensor\",\"isPattern\":\"false\",\"id\":\"%s\",\"attributes\":[{\"name\":\"Alarma\",\"type\":\"boolean\",\"value\":\"%c\"},{\"name\":\"Alarma_src\",\"type\":\"string\",\"value\":\"%s\"},{\"name\":\"IntensidadLuz\",\"type\":\"floatArray\",\"value\":\"%f,%f,%f,%f\"},{\"name\":\"Temperatura\",\"type\":\"floatArray\",\"value\":\"%f,%f,%f,%f\"}]}],\"updateAction\":\"APPEND\"}\r\n";
 8002964:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8002968:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800296c:	4a6f      	ldr	r2, [pc, #444]	; (8002b2c <write+0x1f0>)
 800296e:	4618      	mov	r0, r3
 8002970:	4611      	mov	r1, r2
 8002972:	f44f 73ab 	mov.w	r3, #342	; 0x156
 8002976:	461a      	mov	r2, r3
 8002978:	f006 fbd2 	bl	8009120 <memcpy>
	sprintf(json, jsonTemplate, sensorName, alarmChar,sensorName, lumValue, lumValue, lumValue, lumValue, tempValue, tempValue, tempValue, tempValue);
 800297c:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <write+0x1f4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <write+0x1e8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	4b69      	ldr	r3, [pc, #420]	; (8002b30 <write+0x1f4>)
 800298a:	681e      	ldr	r6, [r3, #0]
 800298c:	4b69      	ldr	r3, [pc, #420]	; (8002b34 <write+0x1f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fde1 	bl	8000558 <__aeabi_f2d>
 8002996:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800299a:	4b66      	ldr	r3, [pc, #408]	; (8002b34 <write+0x1f8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdda 	bl	8000558 <__aeabi_f2d>
 80029a4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80029a8:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <write+0x1f8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fdd3 	bl	8000558 <__aeabi_f2d>
 80029b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029b6:	4b5f      	ldr	r3, [pc, #380]	; (8002b34 <write+0x1f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fdcc 	bl	8000558 <__aeabi_f2d>
 80029c0:	e9c7 0100 	strd	r0, r1, [r7]
 80029c4:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <write+0x1fc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdc5 	bl	8000558 <__aeabi_f2d>
 80029ce:	4682      	mov	sl, r0
 80029d0:	468b      	mov	fp, r1
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <write+0x1fc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdbe 	bl	8000558 <__aeabi_f2d>
 80029dc:	4680      	mov	r8, r0
 80029de:	4689      	mov	r9, r1
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <write+0x1fc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdb7 	bl	8000558 <__aeabi_f2d>
 80029ea:	4604      	mov	r4, r0
 80029ec:	460d      	mov	r5, r1
 80029ee:	4b52      	ldr	r3, [pc, #328]	; (8002b38 <write+0x1fc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fdb0 	bl	8000558 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002a00:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8002a04:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002a08:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8002a0c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002a10:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002a14:	ed97 7b00 	vldr	d7, [r7]
 8002a18:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002a1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a20:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a24:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a2c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a34:	9600      	str	r6, [sp, #0]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	f007 f9d9 	bl	8009df0 <siprintf>

	char request[500];
	char requestTemplate[] = "POST /v1/updateContext HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: %lu\r\n\r\n %s";
 8002a3e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8002a42:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8002a46:	4a3d      	ldr	r2, [pc, #244]	; (8002b3c <write+0x200>)
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	2376      	movs	r3, #118	; 0x76
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f006 fb66 	bl	8009120 <memcpy>
	sprintf(request, requestTemplate, strlen(json), json);
 8002a54:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fbc1 	bl	80001e0 <strlen>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a64:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002a68:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8002a6c:	f007 f9c0 	bl	8009df0 <siprintf>
	printf(request);
 8002a70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a74:	4618      	mov	r0, r3
 8002a76:	f007 f8b3 	bl	8009be0 <iprintf>

	signal=1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
	do {
		if (COMM_request.command==0){ //nada quiere nada
 8002a80:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <write+0x204>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d113      	bne.n	8002ab0 <write+0x174>
			COMM_request.command=1;
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <write+0x204>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
			COMM_request.result=0;
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <write+0x204>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]
			COMM_request.dst_port=1026;
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <write+0x204>)
 8002a96:	f240 4202 	movw	r2, #1026	; 0x402
 8002a9a:	609a      	str	r2, [r3, #8]
			COMM_request.dst_address=(uint8_t *)"pperez-seu-or.disca.upv.es";
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <write+0x204>)
 8002a9e:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <write+0x208>)
 8002aa0:	60da      	str	r2, [r3, #12]
			COMM_request.HTTP_request=(uint8_t *) request;
 8002aa2:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <write+0x204>)
 8002aa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002aa8:	6113      	str	r3, [r2, #16]
			signal=0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		}
	}
	while(signal);
 8002ab0:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e3      	bne.n	8002a80 <write+0x144>


	COMM_request.HTTP_response = ESP_Send_Request(COMM_request.dst_address, COMM_request.dst_port, COMM_request.HTTP_request);
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <write+0x204>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <write+0x204>)
 8002abe:	6891      	ldr	r1, [r2, #8]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <write+0x204>)
 8002ac2:	6912      	ldr	r2, [r2, #16]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fe75 	bl	80027b4 <ESP_Send_Request>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <write+0x204>)
 8002ad0:	615a      	str	r2, [r3, #20]

	printf("\n\nTrying to read result\n\n\r");
 8002ad2:	481d      	ldr	r0, [pc, #116]	; (8002b48 <write+0x20c>)
 8002ad4:	f007 f884 	bl	8009be0 <iprintf>
	while(COMM_request.result==0);
 8002ad8:	bf00      	nop
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <write+0x204>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0fb      	beq.n	8002ada <write+0x19e>

	printf("\n\nParsing res \n\n\r");
 8002ae2:	481a      	ldr	r0, [pc, #104]	; (8002b4c <write+0x210>)
 8002ae4:	f007 f87c 	bl	8009be0 <iprintf>
	printf("\n\n WRITE reponse buffer %s\n\n", (const char *)COMM_request.HTTP_response);
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <write+0x204>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	4619      	mov	r1, r3
 8002aee:	4818      	ldr	r0, [pc, #96]	; (8002b50 <write+0x214>)
 8002af0:	f007 f876 	bl	8009be0 <iprintf>

	COMM_request.command=0;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <write+0x204>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
	COMM_request.result=0;
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <write+0x204>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]


  	vTaskDelay(10/portTICK_RATE_MS );
 8002b00:	200a      	movs	r0, #10
 8002b02:	f004 fa11 	bl	8006f28 <vTaskDelay>
	global_time_it++;
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <write+0x218>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <write+0x218>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	f207 57ec 	addw	r7, r7, #1516	; 0x5ec
 8002b16:	46bd      	mov	sp, r7
 8002b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1c:	0800c0f4 	.word	0x0800c0f4
 8002b20:	0800c0fc 	.word	0x0800c0fc
 8002b24:	20001c2c 	.word	0x20001c2c
 8002b28:	0800c110 	.word	0x0800c110
 8002b2c:	0800c18c 	.word	0x0800c18c
 8002b30:	20000004 	.word	0x20000004
 8002b34:	20000208 	.word	0x20000208
 8002b38:	2000020c 	.word	0x2000020c
 8002b3c:	0800c2e4 	.word	0x0800c2e4
 8002b40:	20000c0c 	.word	0x20000c0c
 8002b44:	0800c120 	.word	0x0800c120
 8002b48:	0800c13c 	.word	0x0800c13c
 8002b4c:	0800c158 	.word	0x0800c158
 8002b50:	0800c16c 	.word	0x0800c16c
 8002b54:	20000c24 	.word	0x20000c24

08002b58 <get_char_by_sensor>:

char get_char_by_sensor(float alarmValue) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(alarmValue >= trigger) {
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <get_char_by_sensor+0x30>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	db01      	blt.n	8002b7a <get_char_by_sensor+0x22>
		return 'T';
 8002b76:	2354      	movs	r3, #84	; 0x54
 8002b78:	e000      	b.n	8002b7c <get_char_by_sensor+0x24>
	} else {
		return 'F';
 8002b7a:	2346      	movs	r3, #70	; 0x46
	}
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000204 	.word	0x20000204

08002b8c <get_alarm_char>:

char get_alarm_char() {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	if (sensor == 0) {
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <get_alarm_char+0x44>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <get_alarm_char+0x24>
		alarmChar = get_char_by_sensor(lumValue);
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <get_alarm_char+0x48>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	f7ff ffd9 	bl	8002b58 <get_char_by_sensor>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <get_alarm_char+0x4c>)
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e00a      	b.n	8002bc6 <get_alarm_char+0x3a>
	} else {
		alarmChar = get_char_by_sensor(tempValue);
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <get_alarm_char+0x50>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	f7ff ffcd 	bl	8002b58 <get_char_by_sensor>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <get_alarm_char+0x4c>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	}
	return alarmChar;
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <get_alarm_char+0x4c>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000210 	.word	0x20000210
 8002bd4:	20000208 	.word	0x20000208
 8002bd8:	20001c2c 	.word	0x20001c2c
 8002bdc:	2000020c 	.word	0x2000020c

08002be0 <Task_HW>:
SemaphoreHandle_t BROKER_xSem = NULL;
int state = 0; // 0 conected | 1 clon | 2 test
TaskHandle_t xHWHandle;


void Task_HW( void *pvParameters ) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	for(;;)
	  {
		runHW();
 8002be8:	f7fe fbda 	bl	80013a0 <runHW>
	    osDelay(1);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f003 f863 	bl	8005cb8 <osDelay>
	  {
 8002bf2:	e7f9      	b.n	8002be8 <Task_HW+0x8>

08002bf4 <Task_WIFI>:
	  }
}
void Task_WIFI( void *pvParameters ) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	WIFI_Boot();
 8002bfc:	f7ff fcfc 	bl	80025f8 <WIFI_Boot>
	printf("\n\nboot done \n\n\r");
 8002c00:	4803      	ldr	r0, [pc, #12]	; (8002c10 <Task_WIFI+0x1c>)
 8002c02:	f006 ffed 	bl	8009be0 <iprintf>
	for(;;)
	  {
		osDelay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f003 f856 	bl	8005cb8 <osDelay>
	  {
 8002c0c:	e7fb      	b.n	8002c06 <Task_WIFI+0x12>
 8002c0e:	bf00      	nop
 8002c10:	0800c35c 	.word	0x0800c35c

08002c14 <Task_WRITE>:
	  }
}

void Task_WRITE() {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	for(;;) {
		if(global_wifi_ready == 0) {
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <Task_WRITE+0x54>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <Task_WRITE+0x16>
			vTaskDelay(500/portTICK_RATE_MS );
 8002c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c24:	f004 f980 	bl	8006f28 <vTaskDelay>
			continue;
 8002c28:	e01c      	b.n	8002c64 <Task_WRITE+0x50>
		}

		if(state != 0) {
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <Task_WRITE+0x58>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <Task_WRITE+0x28>
			vTaskDelay(500/portTICK_RATE_MS );
 8002c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c36:	f004 f977 	bl	8006f28 <vTaskDelay>
			continue;
 8002c3a:	e013      	b.n	8002c64 <Task_WRITE+0x50>
		}

		xSemaphoreTake(BROKER_xSem, 10000/portTICK_RATE_MS);
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <Task_WRITE+0x5c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f242 7110 	movw	r1, #10000	; 0x2710
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fd25 	bl	8006694 <xQueueSemaphoreTake>
		write();
 8002c4a:	f7ff fe77 	bl	800293c <write>
		xSemaphoreGive(BROKER_xSem);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <Task_WRITE+0x5c>)
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	2200      	movs	r2, #0
 8002c56:	2100      	movs	r1, #0
 8002c58:	f003 faa2 	bl	80061a0 <xQueueGenericSend>

		osDelay(10000);
 8002c5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002c60:	f003 f82a 	bl	8005cb8 <osDelay>
	for(;;) {
 8002c64:	e7d8      	b.n	8002c18 <Task_WRITE+0x4>
 8002c66:	bf00      	nop
 8002c68:	20000c28 	.word	0x20000c28
 8002c6c:	20001c34 	.word	0x20001c34
 8002c70:	20001c30 	.word	0x20001c30

08002c74 <Task_READ>:
	}
}

void Task_READ( void *pvParameters ) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	for(;;)
	  {
		if(global_wifi_ready == 0) {
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <Task_READ+0x5c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <Task_READ+0x1a>
			vTaskDelay(500/portTICK_RATE_MS );
 8002c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c88:	f004 f94e 	bl	8006f28 <vTaskDelay>
			continue;
 8002c8c:	e01f      	b.n	8002cce <Task_READ+0x5a>
		}

		if(state != 1) {
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <Task_READ+0x60>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d004      	beq.n	8002ca0 <Task_READ+0x2c>
			vTaskDelay(500/portTICK_RATE_MS );
 8002c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c9a:	f004 f945 	bl	8006f28 <vTaskDelay>
			continue;
 8002c9e:	e016      	b.n	8002cce <Task_READ+0x5a>
		}

		xSemaphoreTake(BROKER_xSem, 10000/portTICK_RATE_MS);
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <Task_READ+0x64>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f242 7110 	movw	r1, #10000	; 0x2710
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 fcf3 	bl	8006694 <xQueueSemaphoreTake>
		printf("semaphore taken");
 8002cae:	480b      	ldr	r0, [pc, #44]	; (8002cdc <Task_READ+0x68>)
 8002cb0:	f006 ff96 	bl	8009be0 <iprintf>
		read();
 8002cb4:	f7ff fbae 	bl	8002414 <read>
		xSemaphoreGive(BROKER_xSem);
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <Task_READ+0x64>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f003 fa6d 	bl	80061a0 <xQueueGenericSend>

	    osDelay(1000);
 8002cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cca:	f002 fff5 	bl	8005cb8 <osDelay>
	  {
 8002cce:	e7d5      	b.n	8002c7c <Task_READ+0x8>
 8002cd0:	20000c28 	.word	0x20000c28
 8002cd4:	20001c34 	.word	0x20001c34
 8002cd8:	20001c30 	.word	0x20001c30
 8002cdc:	0800c36c 	.word	0x0800c36c

08002ce0 <Task_MODE>:
	  }
}

void Task_MODE( void *pvParameters ) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	GPIO_PinState rbLastState = HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin);
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	4832      	ldr	r0, [pc, #200]	; (8002db4 <Task_MODE+0xd4>)
 8002cec:	f001 fbe0 	bl	80044b0 <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
	for(;;) {
	 	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	482f      	ldr	r0, [pc, #188]	; (8002db8 <Task_MODE+0xd8>)
 8002cfa:	f001 fbf1 	bl	80044e0 <HAL_GPIO_WritePin>
	 	GPIO_PinState buzzerState = HAL_GPIO_ReadPin(GPIOA, BUZZER_Pin);
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	482d      	ldr	r0, [pc, #180]	; (8002db8 <Task_MODE+0xd8>)
 8002d02:	f001 fbd5 	bl	80044b0 <HAL_GPIO_ReadPin>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73bb      	strb	r3, [r7, #14]
		GPIO_PinState rbCurrentState = HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin);
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	4829      	ldr	r0, [pc, #164]	; (8002db4 <Task_MODE+0xd4>)
 8002d0e:	f001 fbcf 	bl	80044b0 <HAL_GPIO_ReadPin>
 8002d12:	4603      	mov	r3, r0
 8002d14:	737b      	strb	r3, [r7, #13]
		if (rbLastState != rbCurrentState && rbCurrentState == GPIO_PIN_RESET && buzzerState == GPIO_PIN_RESET && alarmValue == 0) {
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	7b7b      	ldrb	r3, [r7, #13]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d023      	beq.n	8002d66 <Task_MODE+0x86>
 8002d1e:	7b7b      	ldrb	r3, [r7, #13]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d120      	bne.n	8002d66 <Task_MODE+0x86>
 8002d24:	7bbb      	ldrb	r3, [r7, #14]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11d      	bne.n	8002d66 <Task_MODE+0x86>
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <Task_MODE+0xdc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <Task_MODE+0x86>
			state++;
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <Task_MODE+0xe0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <Task_MODE+0xe0>)
 8002d3a:	6013      	str	r3, [r2, #0]
			switch(state) {
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <Task_MODE+0xe0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d002      	beq.n	8002d4a <Task_MODE+0x6a>
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d004      	beq.n	8002d52 <Task_MODE+0x72>
 8002d48:	e007      	b.n	8002d5a <Task_MODE+0x7a>
				case 1:
					printf("CLON MODE\r\n");
 8002d4a:	481e      	ldr	r0, [pc, #120]	; (8002dc4 <Task_MODE+0xe4>)
 8002d4c:	f006 ffce 	bl	8009cec <puts>
					break;
 8002d50:	e007      	b.n	8002d62 <Task_MODE+0x82>
				case 2:
					printf("TEST MODE\r\n");
 8002d52:	481d      	ldr	r0, [pc, #116]	; (8002dc8 <Task_MODE+0xe8>)
 8002d54:	f006 ffca 	bl	8009cec <puts>
					break;
 8002d58:	e003      	b.n	8002d62 <Task_MODE+0x82>
				default:
					printf("CONNECTED MODE\r\n");
 8002d5a:	481c      	ldr	r0, [pc, #112]	; (8002dcc <Task_MODE+0xec>)
 8002d5c:	f006 ffc6 	bl	8009cec <puts>
					break;
 8002d60:	bf00      	nop
			}
			rbLastState = GPIO_PIN_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
		}
		if(rbLastState != rbCurrentState && rbCurrentState == GPIO_PIN_SET && alarmValue == 0) {
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	7b7b      	ldrb	r3, [r7, #13]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d008      	beq.n	8002d80 <Task_MODE+0xa0>
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <Task_MODE+0xa0>
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <Task_MODE+0xdc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <Task_MODE+0xa0>
			rbLastState = GPIO_PIN_SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
		}


		if(state == 2){
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <Task_MODE+0xe0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d111      	bne.n	8002dac <Task_MODE+0xcc>
			vTaskSuspend(xHWHandle);
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <Task_MODE+0xf0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 f8ff 	bl	8006f90 <vTaskSuspend>
			test_mode();
 8002d92:	f7ff fa4b 	bl	800222c <test_mode>
			vTaskResume(xHWHandle);
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <Task_MODE+0xf0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 f9a0 	bl	80070e0 <vTaskResume>
			state = 0;
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <Task_MODE+0xe0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
			printf("CONNECTED MODE\r\n");
 8002da6:	4809      	ldr	r0, [pc, #36]	; (8002dcc <Task_MODE+0xec>)
 8002da8:	f006 ffa0 	bl	8009cec <puts>
		}

		osDelay(100);
 8002dac:	2064      	movs	r0, #100	; 0x64
 8002dae:	f002 ff83 	bl	8005cb8 <osDelay>
	for(;;) {
 8002db2:	e79f      	b.n	8002cf4 <Task_MODE+0x14>
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	20000214 	.word	0x20000214
 8002dc0:	20001c34 	.word	0x20001c34
 8002dc4:	0800c37c 	.word	0x0800c37c
 8002dc8:	0800c388 	.word	0x0800c388
 8002dcc:	0800c394 	.word	0x0800c394
 8002dd0:	20001c38 	.word	0x20001c38

08002dd4 <CONFIGURACION_INICIAL>:
	}
}

void CONFIGURACION_INICIAL(void){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af02      	add	r7, sp, #8
 BaseType_t res_task;
 BROKER_xSem = xSemaphoreCreateMutex();
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f003 f9c7 	bl	800616e <xQueueCreateMutex>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4a3d      	ldr	r2, [pc, #244]	; (8002ed8 <CONFIGURACION_INICIAL+0x104>)
 8002de4:	6013      	str	r3, [r2, #0]
 xSemaphoreGive(BROKER_xSem);
 8002de6:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <CONFIGURACION_INICIAL+0x104>)
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	2300      	movs	r3, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	f003 f9d6 	bl	80061a0 <xQueueGenericSend>

 res_task=xTaskCreate(Task_HW,"HW",1024,NULL,NORMAL_PRIORITY,&xHWHandle);
 8002df4:	4b39      	ldr	r3, [pc, #228]	; (8002edc <CONFIGURACION_INICIAL+0x108>)
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	231b      	movs	r3, #27
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e02:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <CONFIGURACION_INICIAL+0x10c>)
 8002e04:	4837      	ldr	r0, [pc, #220]	; (8002ee4 <CONFIGURACION_INICIAL+0x110>)
 8002e06:	f003 ff34 	bl	8006c72 <xTaskCreate>
 8002e0a:	6078      	str	r0, [r7, #4]
 		if( res_task != pdPASS ){
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d006      	beq.n	8002e20 <CONFIGURACION_INICIAL+0x4c>
 				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002e12:	4835      	ldr	r0, [pc, #212]	; (8002ee8 <CONFIGURACION_INICIAL+0x114>)
 8002e14:	f006 ff6a 	bl	8009cec <puts>
 				fflush(NULL);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f006 f849 	bl	8008eb0 <fflush>
 				while(1);
 8002e1e:	e7fe      	b.n	8002e1e <CONFIGURACION_INICIAL+0x4a>
 		}

 res_task=xTaskCreate(Task_WIFI,"WIFI",512,NULL,NORMAL_PRIORITY ,NULL);
 8002e20:	2300      	movs	r3, #0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	231b      	movs	r3, #27
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2e:	492f      	ldr	r1, [pc, #188]	; (8002eec <CONFIGURACION_INICIAL+0x118>)
 8002e30:	482f      	ldr	r0, [pc, #188]	; (8002ef0 <CONFIGURACION_INICIAL+0x11c>)
 8002e32:	f003 ff1e 	bl	8006c72 <xTaskCreate>
 8002e36:	6078      	str	r0, [r7, #4]
 			if( res_task != pdPASS ){
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d006      	beq.n	8002e4c <CONFIGURACION_INICIAL+0x78>
 					printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002e3e:	482a      	ldr	r0, [pc, #168]	; (8002ee8 <CONFIGURACION_INICIAL+0x114>)
 8002e40:	f006 ff54 	bl	8009cec <puts>
 					fflush(NULL);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f006 f833 	bl	8008eb0 <fflush>
 					while(1);
 8002e4a:	e7fe      	b.n	8002e4a <CONFIGURACION_INICIAL+0x76>
 			}

 res_task=xTaskCreate( Task_WRITE,"WRITE",2048,NULL,	NORMAL_PRIORITY,NULL);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	231b      	movs	r3, #27
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2300      	movs	r3, #0
 8002e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e5a:	4926      	ldr	r1, [pc, #152]	; (8002ef4 <CONFIGURACION_INICIAL+0x120>)
 8002e5c:	4826      	ldr	r0, [pc, #152]	; (8002ef8 <CONFIGURACION_INICIAL+0x124>)
 8002e5e:	f003 ff08 	bl	8006c72 <xTaskCreate>
 8002e62:	6078      	str	r0, [r7, #4]
 	 	 	if( res_task != pdPASS ){
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d006      	beq.n	8002e78 <CONFIGURACION_INICIAL+0xa4>
 					printf("PANIC: Error al crear Tarea TIME\r\n");
 8002e6a:	4824      	ldr	r0, [pc, #144]	; (8002efc <CONFIGURACION_INICIAL+0x128>)
 8002e6c:	f006 ff3e 	bl	8009cec <puts>
 					fflush(NULL);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f006 f81d 	bl	8008eb0 <fflush>
 					while(1);
 8002e76:	e7fe      	b.n	8002e76 <CONFIGURACION_INICIAL+0xa2>
 				}

 res_task=xTaskCreate( Task_READ,"READ",4096,NULL,	NORMAL_PRIORITY,NULL);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	231b      	movs	r3, #27
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2300      	movs	r3, #0
 8002e82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e86:	491e      	ldr	r1, [pc, #120]	; (8002f00 <CONFIGURACION_INICIAL+0x12c>)
 8002e88:	481e      	ldr	r0, [pc, #120]	; (8002f04 <CONFIGURACION_INICIAL+0x130>)
 8002e8a:	f003 fef2 	bl	8006c72 <xTaskCreate>
 8002e8e:	6078      	str	r0, [r7, #4]
 	 	 	if( res_task != pdPASS ){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d006      	beq.n	8002ea4 <CONFIGURACION_INICIAL+0xd0>
  					printf("PANIC: Error al crear Tarea TIME\r\n");
 8002e96:	4819      	ldr	r0, [pc, #100]	; (8002efc <CONFIGURACION_INICIAL+0x128>)
 8002e98:	f006 ff28 	bl	8009cec <puts>
  					fflush(NULL);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f006 f807 	bl	8008eb0 <fflush>
  					while(1);
 8002ea2:	e7fe      	b.n	8002ea2 <CONFIGURACION_INICIAL+0xce>
  				}

 res_task=xTaskCreate( Task_MODE,"MODE",1024,NULL,	NORMAL_PRIORITY,NULL);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2300      	movs	r3, #0
 8002eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eb2:	4915      	ldr	r1, [pc, #84]	; (8002f08 <CONFIGURACION_INICIAL+0x134>)
 8002eb4:	4815      	ldr	r0, [pc, #84]	; (8002f0c <CONFIGURACION_INICIAL+0x138>)
 8002eb6:	f003 fedc 	bl	8006c72 <xTaskCreate>
 8002eba:	6078      	str	r0, [r7, #4]
  	 	 	if( res_task != pdPASS ){
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d006      	beq.n	8002ed0 <CONFIGURACION_INICIAL+0xfc>
  	 	 			printf("PANIC: Error al crear Tarea TIME\r\n");
 8002ec2:	480e      	ldr	r0, [pc, #56]	; (8002efc <CONFIGURACION_INICIAL+0x128>)
 8002ec4:	f006 ff12 	bl	8009cec <puts>
 	 	 	  		fflush(NULL);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f005 fff1 	bl	8008eb0 <fflush>
 	 	 	  		while(1);
 8002ece:	e7fe      	b.n	8002ece <CONFIGURACION_INICIAL+0xfa>
 	 	 	  	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20001c30 	.word	0x20001c30
 8002edc:	20001c38 	.word	0x20001c38
 8002ee0:	0800c3a4 	.word	0x0800c3a4
 8002ee4:	08002be1 	.word	0x08002be1
 8002ee8:	0800c3a8 	.word	0x0800c3a8
 8002eec:	0800c3d4 	.word	0x0800c3d4
 8002ef0:	08002bf5 	.word	0x08002bf5
 8002ef4:	0800c3dc 	.word	0x0800c3dc
 8002ef8:	08002c15 	.word	0x08002c15
 8002efc:	0800c3e4 	.word	0x0800c3e4
 8002f00:	0800c408 	.word	0x0800c408
 8002f04:	08002c75 	.word	0x08002c75
 8002f08:	0800c410 	.word	0x0800c410
 8002f0c:	08002ce1 	.word	0x08002ce1

08002f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f14:	480d      	ldr	r0, [pc, #52]	; (8002f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f16:	490e      	ldr	r1, [pc, #56]	; (8002f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f18:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f2c:	4c0b      	ldr	r4, [pc, #44]	; (8002f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f3a:	f7ff f8f5 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3e:	f006 f8bf 	bl	80090c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f42:	f7fe fc4b 	bl	80017dc <main>
  bx  lr    
 8002f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f54:	0800c844 	.word	0x0800c844
  ldr r2, =_sbss
 8002f58:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002f5c:	200162e0 	.word	0x200162e0

08002f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f60:	e7fe      	b.n	8002f60 <ADC_IRQHandler>
	...

08002f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_Init+0x40>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_Init+0x40>)
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_Init+0x40>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_Init+0x40>)
 8002f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_Init+0x40>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f000 fce9 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f92:	200f      	movs	r0, #15
 8002f94:	f000 f808 	bl	8002fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f98:	f7fe fe56 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023c00 	.word	0x40023c00

08002fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_InitTick+0x54>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_InitTick+0x58>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fd01 	bl	80039ce <HAL_SYSTICK_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00e      	b.n	8002ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d80a      	bhi.n	8002ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f000 fcc9 	bl	800397a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe8:	4a06      	ldr	r2, [pc, #24]	; (8003004 <HAL_InitTick+0x5c>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000000 	.word	0x20000000
 8003000:	2000000c 	.word	0x2000000c
 8003004:	20000008 	.word	0x20000008

08003008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_IncTick+0x20>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_IncTick+0x24>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4413      	add	r3, r2
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_IncTick+0x24>)
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c
 800302c:	20001c3c 	.word	0x20001c3c

08003030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return uwTick;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_GetTick+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20001c3c 	.word	0x20001c3c

08003048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e033      	b.n	80030c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe fe1a 	bl	8001ca0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800308e:	f023 0302 	bic.w	r3, r3, #2
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa96 	bl	80035cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
 80030b6:	e001      	b.n	80030bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Start+0x1a>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e097      	b.n	800321a <HAL_ADC_Start+0x14a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d018      	beq.n	8003132 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003110:	4b45      	ldr	r3, [pc, #276]	; (8003228 <HAL_ADC_Start+0x158>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a45      	ldr	r2, [pc, #276]	; (800322c <HAL_ADC_Start+0x15c>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9a      	lsrs	r2, r3, #18
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003124:	e002      	b.n	800312c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d15f      	bne.n	8003200 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800316a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317e:	d106      	bne.n	800318e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f023 0206 	bic.w	r2, r3, #6
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
 800318c:	e002      	b.n	8003194 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_ADC_Start+0x160>)
 800319e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d129      	bne.n	8003218 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e020      	b.n	8003218 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_ADC_Start+0x164>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d11b      	bne.n	8003218 <HAL_ADC_Start+0x148>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d114      	bne.n	8003218 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	e00b      	b.n	8003218 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000
 800322c:	431bde83 	.word	0x431bde83
 8003230:	40012300 	.word	0x40012300
 8003234:	40012000 	.word	0x40012000

08003238 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003254:	d113      	bne.n	800327e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003264:	d10b      	bne.n	800327e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e063      	b.n	8003346 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800327e:	f7ff fed7 	bl	8003030 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003284:	e021      	b.n	80032ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d01d      	beq.n	80032ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_ADC_PollForConversion+0x6c>
 8003294:	f7ff fecc 	bl	8003030 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d212      	bcs.n	80032ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d00b      	beq.n	80032ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f043 0204 	orr.w	r2, r3, #4
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e03d      	b.n	8003346 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d1d6      	bne.n	8003286 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0212 	mvn.w	r2, #18
 80032e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d123      	bne.n	8003344 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	d11f      	bne.n	8003344 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800331c:	2b00      	cmp	r3, #0
 800331e:	d111      	bne.n	8003344 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x1c>
 8003380:	2302      	movs	r3, #2
 8003382:	e113      	b.n	80035ac <HAL_ADC_ConfigChannel+0x244>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b09      	cmp	r3, #9
 8003392:	d925      	bls.n	80033e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	3b1e      	subs	r3, #30
 80033aa:	2207      	movs	r2, #7
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43da      	mvns	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	400a      	ands	r2, r1
 80033b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68d9      	ldr	r1, [r3, #12]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	4618      	mov	r0, r3
 80033cc:	4603      	mov	r3, r0
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4403      	add	r3, r0
 80033d2:	3b1e      	subs	r3, #30
 80033d4:	409a      	lsls	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	e022      	b.n	8003426 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6919      	ldr	r1, [r3, #16]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	2207      	movs	r2, #7
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	400a      	ands	r2, r1
 8003402:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6919      	ldr	r1, [r3, #16]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	4618      	mov	r0, r3
 8003416:	4603      	mov	r3, r0
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4403      	add	r3, r0
 800341c:	409a      	lsls	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d824      	bhi.n	8003478 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	3b05      	subs	r3, #5
 8003440:	221f      	movs	r2, #31
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	400a      	ands	r2, r1
 800344e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	4618      	mov	r0, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	3b05      	subs	r3, #5
 800346a:	fa00 f203 	lsl.w	r2, r0, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	635a      	str	r2, [r3, #52]	; 0x34
 8003476:	e04c      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d824      	bhi.n	80034ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	3b23      	subs	r3, #35	; 0x23
 8003492:	221f      	movs	r2, #31
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43da      	mvns	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	400a      	ands	r2, r1
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b23      	subs	r3, #35	; 0x23
 80034bc:	fa00 f203 	lsl.w	r2, r0, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
 80034c8:	e023      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3b41      	subs	r3, #65	; 0x41
 80034dc:	221f      	movs	r2, #31
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b41      	subs	r3, #65	; 0x41
 8003506:	fa00 f203 	lsl.w	r2, r0, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_ADC_ConfigChannel+0x250>)
 8003514:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a28      	ldr	r2, [pc, #160]	; (80035bc <HAL_ADC_ConfigChannel+0x254>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10f      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1d8>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b12      	cmp	r3, #18
 8003526:	d10b      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_ADC_ConfigChannel+0x254>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d12b      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x23a>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_ADC_ConfigChannel+0x258>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <HAL_ADC_ConfigChannel+0x1f4>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b11      	cmp	r3, #17
 800355a:	d122      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <HAL_ADC_ConfigChannel+0x258>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d111      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <HAL_ADC_ConfigChannel+0x260>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	0c9a      	lsrs	r2, r3, #18
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003594:	e002      	b.n	800359c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3b01      	subs	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f9      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40012300 	.word	0x40012300
 80035bc:	40012000 	.word	0x40012000
 80035c0:	10000012 	.word	0x10000012
 80035c4:	20000000 	.word	0x20000000
 80035c8:	431bde83 	.word	0x431bde83

080035cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d4:	4b79      	ldr	r3, [pc, #484]	; (80037bc <ADC_Init+0x1f0>)
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <ADC_Init+0x1f4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003672:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e00f      	b.n	80036ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0202 	bic.w	r2, r2, #2
 80036d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6899      	ldr	r1, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7e1b      	ldrb	r3, [r3, #24]
 80036e4:	005a      	lsls	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003706:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003716:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	3b01      	subs	r3, #1
 8003724:	035a      	lsls	r2, r3, #13
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	e007      	b.n	8003740 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800373e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	3b01      	subs	r3, #1
 800375c:	051a      	lsls	r2, r3, #20
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003782:	025a      	lsls	r2, r3, #9
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	029a      	lsls	r2, r3, #10
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40012300 	.word	0x40012300
 80037c0:	0f000001 	.word	0x0f000001

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db0b      	blt.n	8003852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4907      	ldr	r1, [pc, #28]	; (8003860 <__NVIC_EnableIRQ+0x38>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2001      	movs	r0, #1
 800384a:	fa00 f202 	lsl.w	r2, r0, r2
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e100 	.word	0xe000e100

08003864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	; (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	; (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003900:	f04f 31ff 	mov.w	r1, #4294967295
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	4313      	orrs	r3, r2
         );
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003930:	d301      	bcc.n	8003936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <SysTick_Config+0x40>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393e:	210f      	movs	r1, #15
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	f7ff ff8e 	bl	8003864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SysTick_Config+0x40>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <SysTick_Config+0x40>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff29 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800398c:	f7ff ff3e 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff ff8e 	bl	80038b8 <NVIC_EncodePriority>
 800399c:	4602      	mov	r2, r0
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5d 	bl	8003864 <__NVIC_SetPriority>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff31 	bl	8003828 <__NVIC_EnableIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffa2 	bl	8003920 <SysTick_Config>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7ff fb1c 	bl	8003030 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e099      	b.n	8003b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a24:	e00f      	b.n	8003a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a26:	f7ff fb03 	bl	8003030 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d908      	bls.n	8003a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e078      	b.n	8003b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e8      	bne.n	8003a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_DMA_Init+0x158>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d117      	bne.n	8003b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fadf 	bl	80040b0 <DMA_CheckFifoParam>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b06:	2301      	movs	r3, #1
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa96 	bl	8004044 <DMA_CalcBaseAndBitshift>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	223f      	movs	r2, #63	; 0x3f
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	f010803f 	.word	0xf010803f

08003b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Start_IT+0x26>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e040      	b.n	8003bec <HAL_DMA_Start_IT+0xa8>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d12f      	bne.n	8003bde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fa28 	bl	8003fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	223f      	movs	r2, #63	; 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0216 	orr.w	r2, r2, #22
 8003bb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0208 	orr.w	r2, r2, #8
 8003bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e005      	b.n	8003bea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
 8003be8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c02:	f7ff fa15 	bl	8003030 <HAL_GetTick>
 8003c06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e052      	b.n	8003ccc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0216 	bic.w	r2, r2, #22
 8003c34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_DMA_Abort+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0208 	bic.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	e013      	b.n	8003ca0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c78:	f7ff f9da 	bl	8003030 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d90c      	bls.n	8003ca0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e015      	b.n	8003ccc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e4      	bne.n	8003c78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	223f      	movs	r2, #63	; 0x3f
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ce0:	4b8e      	ldr	r3, [pc, #568]	; (8003f1c <HAL_DMA_IRQHandler+0x248>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a8e      	ldr	r2, [pc, #568]	; (8003f20 <HAL_DMA_IRQHandler+0x24c>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a9b      	lsrs	r3, r3, #10
 8003cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	2208      	movs	r2, #8
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01a      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	2201      	movs	r2, #1
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	2201      	movs	r2, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d012      	beq.n	8003dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	2204      	movs	r2, #4
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0204 	orr.w	r2, r3, #4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	2210      	movs	r2, #16
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d043      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03c      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2210      	movs	r2, #16
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d018      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d024      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	e01f      	b.n	8003e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
 8003e14:	e016      	b.n	8003e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0208 	bic.w	r2, r2, #8
 8003e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2220      	movs	r2, #32
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 808f 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8087 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d136      	bne.n	8003eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0216 	bic.w	r2, r2, #22
 8003e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_DMA_IRQHandler+0x1da>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0208 	bic.w	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	223f      	movs	r2, #63	; 0x3f
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d07e      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
        }
        return;
 8003eea:	e079      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d031      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
 8003f18:	e02c      	b.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d023      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
 8003f34:	e01e      	b.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0210 	bic.w	r2, r2, #16
 8003f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d032      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d307      	bcc.n	8003fbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f2      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x2cc>
 8003fba:	e000      	b.n	8003fbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
 8003fde:	e000      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fe0:	bf00      	nop
    }
  }
}
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d108      	bne.n	8004028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004026:	e007      	b.n	8004038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	3b10      	subs	r3, #16
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <DMA_CalcBaseAndBitshift+0x68>)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d909      	bls.n	8004086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
 8004084:	e007      	b.n	8004096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	aaaaaaab 	.word	0xaaaaaaab
 80040ac:	0800c448 	.word	0x0800c448

080040b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d11f      	bne.n	800410a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d856      	bhi.n	800417e <DMA_CheckFifoParam+0xce>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <DMA_CheckFifoParam+0x28>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040fb 	.word	0x080040fb
 80040e0:	080040e9 	.word	0x080040e9
 80040e4:	0800417f 	.word	0x0800417f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d046      	beq.n	8004182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f8:	e043      	b.n	8004182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004102:	d140      	bne.n	8004186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004108:	e03d      	b.n	8004186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004112:	d121      	bne.n	8004158 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d837      	bhi.n	800418a <DMA_CheckFifoParam+0xda>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <DMA_CheckFifoParam+0x70>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	08004137 	.word	0x08004137
 8004128:	08004131 	.word	0x08004131
 800412c:	08004149 	.word	0x08004149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e030      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d025      	beq.n	800418e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004146:	e022      	b.n	800418e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004150:	d11f      	bne.n	8004192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004156:	e01c      	b.n	8004192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d903      	bls.n	8004166 <DMA_CheckFifoParam+0xb6>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d003      	beq.n	800416c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004164:	e018      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      break;
 800416a:	e015      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00e      	beq.n	8004196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e00b      	b.n	8004196 <DMA_CheckFifoParam+0xe6>
      break;
 800417e:	bf00      	nop
 8004180:	e00a      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
 8004184:	e008      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      break;
 8004186:	bf00      	nop
 8004188:	e006      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      break;
 800418a:	bf00      	nop
 800418c:	e004      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      break;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      break;   
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <DMA_CheckFifoParam+0xe8>
      break;
 8004196:	bf00      	nop
    }
  } 
  
  return status; 
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e159      	b.n	8004478 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041c4:	2201      	movs	r2, #1
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	429a      	cmp	r2, r3
 80041de:	f040 8148 	bne.w	8004472 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d005      	beq.n	80041fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d130      	bne.n	800425c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	2203      	movs	r2, #3
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004230:	2201      	movs	r2, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 0201 	and.w	r2, r3, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b03      	cmp	r3, #3
 8004266:	d017      	beq.n	8004298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	2203      	movs	r2, #3
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d123      	bne.n	80042ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	08da      	lsrs	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3208      	adds	r2, #8
 80042ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	220f      	movs	r2, #15
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	08da      	lsrs	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3208      	adds	r2, #8
 80042e6:	69b9      	ldr	r1, [r7, #24]
 80042e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2203      	movs	r2, #3
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0203 	and.w	r2, r3, #3
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80a2 	beq.w	8004472 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	4b57      	ldr	r3, [pc, #348]	; (8004490 <HAL_GPIO_Init+0x2e8>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	4a56      	ldr	r2, [pc, #344]	; (8004490 <HAL_GPIO_Init+0x2e8>)
 8004338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800433c:	6453      	str	r3, [r2, #68]	; 0x44
 800433e:	4b54      	ldr	r3, [pc, #336]	; (8004490 <HAL_GPIO_Init+0x2e8>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800434a:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_GPIO_Init+0x2ec>)
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	089b      	lsrs	r3, r3, #2
 8004350:	3302      	adds	r3, #2
 8004352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	220f      	movs	r2, #15
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a49      	ldr	r2, [pc, #292]	; (8004498 <HAL_GPIO_Init+0x2f0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d019      	beq.n	80043aa <HAL_GPIO_Init+0x202>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a48      	ldr	r2, [pc, #288]	; (800449c <HAL_GPIO_Init+0x2f4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_GPIO_Init+0x1fe>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <HAL_GPIO_Init+0x2f8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00d      	beq.n	80043a2 <HAL_GPIO_Init+0x1fa>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a46      	ldr	r2, [pc, #280]	; (80044a4 <HAL_GPIO_Init+0x2fc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <HAL_GPIO_Init+0x1f6>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a45      	ldr	r2, [pc, #276]	; (80044a8 <HAL_GPIO_Init+0x300>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_GPIO_Init+0x1f2>
 8004396:	2304      	movs	r3, #4
 8004398:	e008      	b.n	80043ac <HAL_GPIO_Init+0x204>
 800439a:	2307      	movs	r3, #7
 800439c:	e006      	b.n	80043ac <HAL_GPIO_Init+0x204>
 800439e:	2303      	movs	r3, #3
 80043a0:	e004      	b.n	80043ac <HAL_GPIO_Init+0x204>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_Init+0x204>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_GPIO_Init+0x204>
 80043aa:	2300      	movs	r3, #0
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	f002 0203 	and.w	r2, r2, #3
 80043b2:	0092      	lsls	r2, r2, #2
 80043b4:	4093      	lsls	r3, r2
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043bc:	4935      	ldr	r1, [pc, #212]	; (8004494 <HAL_GPIO_Init+0x2ec>)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	3302      	adds	r3, #2
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ca:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_GPIO_Init+0x304>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ee:	4a2f      	ldr	r2, [pc, #188]	; (80044ac <HAL_GPIO_Init+0x304>)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f4:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <HAL_GPIO_Init+0x304>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004418:	4a24      	ldr	r2, [pc, #144]	; (80044ac <HAL_GPIO_Init+0x304>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <HAL_GPIO_Init+0x304>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004442:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <HAL_GPIO_Init+0x304>)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <HAL_GPIO_Init+0x304>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <HAL_GPIO_Init+0x304>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	f67f aea2 	bls.w	80041c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	40013800 	.word	0x40013800
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020c00 	.word	0x40020c00
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40013c00 	.word	0x40013c00

080044b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e001      	b.n	80044d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
 80044ec:	4613      	mov	r3, r2
 80044ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f0:	787b      	ldrb	r3, [r7, #1]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044fc:	e003      	b.n	8004506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044fe:	887b      	ldrh	r3, [r7, #2]
 8004500:	041a      	lsls	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	619a      	str	r2, [r3, #24]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe fd30 	bl	8003030 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe fd2c 	bl	8003030 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fe fd1c 	bl	8003030 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe fd18 	bl	8003030 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fe fcd1 	bl	8003030 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fe fccd 	bl	8003030 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe fcb0 	bl	8003030 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fe fcac 	bl	8003030 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fe fc90 	bl	8003030 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fe fc8c 	bl	8003030 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fe fc79 	bl	8003030 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fe fc75 	bl	8003030 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fe fc35 	bl	8003030 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fe fc31 	bl	8003030 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fe fbf6 	bl	8003030 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fe fbf2 	bl	8003030 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fe fbe0 	bl	8003030 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fe fbdc 	bl	8003030 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fe fbb0 	bl	8003030 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fe fbac 	bl	8003030 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fe fb85 	bl	8003030 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fe fb81 	bl	8003030 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe fb6e 	bl	8003030 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fe fb6a 	bl	8003030 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fe fa9c 	bl	8003030 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fe fa98 	bl	8003030 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe f9fc 	bl	8002fa8 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800c430 	.word	0x0800c430
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000008 	.word	0x20000008

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb ffba 	bl	8000c58 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb ff60 	bl	8000c58 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000000 	.word	0x20000000

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	0800c440 	.word	0x0800c440

08004e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e20:	f7ff ffdc 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0b5b      	lsrs	r3, r3, #13
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0800c440 	.word	0x0800c440

08004e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e03f      	b.n	8004ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc ff5c 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fc23 	bl	80056d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	; 0x28
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d17c      	bne.n	8004ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_Transmit+0x2c>
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e075      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_UART_Transmit+0x3e>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e06e      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2221      	movs	r2, #33	; 0x21
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f32:	f7fe f87d 	bl	8003030 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d108      	bne.n	8004f60 <HAL_UART_Transmit+0x82>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e003      	b.n	8004f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f70:	e02a      	b.n	8004fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fa11 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e036      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e007      	b.n	8004fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1cf      	bne.n	8004f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2140      	movs	r1, #64	; 0x40
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f9e1 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e006      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b20      	cmp	r3, #32
 800501a:	d11d      	bne.n	8005058 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Receive_DMA+0x26>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e016      	b.n	800505a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_UART_Receive_DMA+0x38>
 8005036:	2302      	movs	r3, #2
 8005038:	e00f      	b.n	800505a <HAL_UART_Receive_DMA+0x58>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	461a      	mov	r2, r3
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa16 	bl	8005480 <UART_Start_Receive_DMA>
 8005054:	4603      	mov	r3, r0
 8005056:	e000      	b.n	800505a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b090      	sub	sp, #64	; 0x40
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b21      	cmp	r3, #33	; 0x21
 800508e:	d128      	bne.n	80050e2 <HAL_UART_DMAStop+0x80>
 8005090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d025      	beq.n	80050e2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	623b      	str	r3, [r7, #32]
   return(result);
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050b6:	633a      	str	r2, [r7, #48]	; 0x30
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d004      	beq.n	80050dc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fd8c 	bl	8003bf4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fa6d 	bl	80055bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b22      	cmp	r3, #34	; 0x22
 8005102:	d128      	bne.n	8005156 <HAL_UART_DMAStop+0xf4>
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d025      	beq.n	8005156 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60fb      	str	r3, [r7, #12]
   return(result);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	617b      	str	r3, [r7, #20]
   return(result);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fd52 	bl	8003bf4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fa5b 	bl	800560c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3740      	adds	r7, #64	; 0x40
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b09c      	sub	sp, #112	; 0x70
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d172      	bne.n	80052b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d2:	2200      	movs	r2, #0
 80051d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80051f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	667b      	str	r3, [r7, #100]	; 0x64
 8005222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3314      	adds	r3, #20
 8005228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800522a:	647a      	str	r2, [r7, #68]	; 0x44
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	623b      	str	r3, [r7, #32]
   return(result);
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005254:	663b      	str	r3, [r7, #96]	; 0x60
 8005256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800525e:	633a      	str	r2, [r7, #48]	; 0x30
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	2b01      	cmp	r3, #1
 8005280:	d119      	bne.n	80052b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	60fb      	str	r3, [r7, #12]
   return(result);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 0310 	bic.w	r3, r3, #16
 8005298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052a2:	61fa      	str	r2, [r7, #28]
 80052a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	617b      	str	r3, [r7, #20]
   return(result);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e5      	bne.n	8005282 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d106      	bne.n	80052cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052c2:	4619      	mov	r1, r3
 80052c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052c6:	f7ff ff69 	bl	800519c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052ca:	e002      	b.n	80052d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80052cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052ce:	f7ff ff47 	bl	8005160 <HAL_UART_RxCpltCallback>
}
 80052d2:	bf00      	nop
 80052d4:	3770      	adds	r7, #112	; 0x70
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d108      	bne.n	8005302 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4619      	mov	r1, r3
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff ff4e 	bl	800519c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005300:	e002      	b.n	8005308 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff ff36 	bl	8005174 <HAL_UART_RxHalfCpltCallback>
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b21      	cmp	r3, #33	; 0x21
 8005342:	d108      	bne.n	8005356 <UART_DMAError+0x46>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f000 f933 	bl	80055bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b22      	cmp	r3, #34	; 0x22
 8005376:	d108      	bne.n	800538a <UART_DMAError+0x7a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f000 f941 	bl	800560c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0210 	orr.w	r2, r3, #16
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f7ff fef6 	bl	8005188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b090      	sub	sp, #64	; 0x40
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b4:	e050      	b.n	8005458 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d04c      	beq.n	8005458 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053c4:	f7fd fe34 	bl	8003030 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d241      	bcs.n	8005458 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053f4:	637a      	str	r2, [r7, #52]	; 0x34
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	613b      	str	r3, [r7, #16]
   return(result);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005428:	623a      	str	r2, [r7, #32]
 800542a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	6a3a      	ldr	r2, [r7, #32]
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	61bb      	str	r3, [r7, #24]
   return(result);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e00f      	b.n	8005478 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	d09f      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3740      	adds	r7, #64	; 0x40
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b098      	sub	sp, #96	; 0x60
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2222      	movs	r2, #34	; 0x22
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <UART_Start_Receive_DMA+0x130>)
 80054ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	4a3f      	ldr	r2, [pc, #252]	; (80055b4 <UART_Start_Receive_DMA+0x134>)
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4a3e      	ldr	r2, [pc, #248]	; (80055b8 <UART_Start_Receive_DMA+0x138>)
 80054be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2200      	movs	r2, #0
 80054c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	f7fe fb30 	bl	8003b44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d019      	beq.n	800553e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800551a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	65bb      	str	r3, [r7, #88]	; 0x58
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800552a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800555e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	617b      	str	r3, [r7, #20]
   return(result);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005588:	653b      	str	r3, [r7, #80]	; 0x50
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005592:	627a      	str	r2, [r7, #36]	; 0x24
 8005594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6a39      	ldr	r1, [r7, #32]
 8005598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3760      	adds	r7, #96	; 0x60
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	080051b5 	.word	0x080051b5
 80055b4:	080052db 	.word	0x080052db
 80055b8:	08005311 	.word	0x08005311

080055bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	61ba      	str	r2, [r7, #24]
 80055e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005600:	bf00      	nop
 8005602:	3724      	adds	r7, #36	; 0x24
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b095      	sub	sp, #84	; 0x54
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005634:	643a      	str	r2, [r7, #64]	; 0x40
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	61fb      	str	r3, [r7, #28]
   return(result);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3314      	adds	r3, #20
 8005666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800566e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e5      	bne.n	8005648 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	d119      	bne.n	80056b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	60bb      	str	r3, [r7, #8]
   return(result);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0310 	bic.w	r3, r3, #16
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a4:	61ba      	str	r2, [r7, #24]
 80056a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056c6:	bf00      	nop
 80056c8:	3754      	adds	r7, #84	; 0x54
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b0c0      	sub	sp, #256	; 0x100
 80056da:	af00      	add	r7, sp, #0
 80056dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	68d9      	ldr	r1, [r3, #12]
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	ea40 0301 	orr.w	r3, r0, r1
 80056fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	431a      	orrs	r2, r3
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	431a      	orrs	r2, r3
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800572c:	f021 010c 	bic.w	r1, r1, #12
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800573a:	430b      	orrs	r3, r1
 800573c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	6999      	ldr	r1, [r3, #24]
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	ea40 0301 	orr.w	r3, r0, r1
 800575a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b8f      	ldr	r3, [pc, #572]	; (80059a0 <UART_SetConfig+0x2cc>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d005      	beq.n	8005774 <UART_SetConfig+0xa0>
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <UART_SetConfig+0x2d0>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d104      	bne.n	800577e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7ff fb52 	bl	8004e1c <HAL_RCC_GetPCLK2Freq>
 8005778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800577c:	e003      	b.n	8005786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7ff fb39 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 8005782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	f040 810c 	bne.w	80059ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005798:	2200      	movs	r2, #0
 800579a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800579e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	1891      	adds	r1, r2, r2
 80057ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ae:	415b      	adcs	r3, r3
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057b6:	4621      	mov	r1, r4
 80057b8:	eb12 0801 	adds.w	r8, r2, r1
 80057bc:	4629      	mov	r1, r5
 80057be:	eb43 0901 	adc.w	r9, r3, r1
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d6:	4690      	mov	r8, r2
 80057d8:	4699      	mov	r9, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	eb18 0303 	adds.w	r3, r8, r3
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e4:	462b      	mov	r3, r5
 80057e6:	eb49 0303 	adc.w	r3, r9, r3
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005802:	460b      	mov	r3, r1
 8005804:	18db      	adds	r3, r3, r3
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	4613      	mov	r3, r2
 800580a:	eb42 0303 	adc.w	r3, r2, r3
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005818:	f7fb fa1e 	bl	8000c58 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005822:	fba3 2302 	umull	r2, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	011c      	lsls	r4, r3, #4
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	64b9      	str	r1, [r7, #72]	; 0x48
 8005844:	415b      	adcs	r3, r3
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800584c:	4641      	mov	r1, r8
 800584e:	eb12 0a01 	adds.w	sl, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0b01 	adc.w	fp, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586c:	4692      	mov	sl, r2
 800586e:	469b      	mov	fp, r3
 8005870:	4643      	mov	r3, r8
 8005872:	eb1a 0303 	adds.w	r3, sl, r3
 8005876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587a:	464b      	mov	r3, r9
 800587c:	eb4b 0303 	adc.w	r3, fp, r3
 8005880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005898:	460b      	mov	r3, r1
 800589a:	18db      	adds	r3, r3, r3
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
 800589e:	4613      	mov	r3, r2
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
 80058a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ae:	f7fb f9d3 	bl	8000c58 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058ba:	fba3 2301 	umull	r2, r3, r3, r1
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2264      	movs	r2, #100	; 0x64
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	1acb      	subs	r3, r1, r3
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058d0:	fba3 2302 	umull	r2, r3, r3, r2
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058dc:	441c      	add	r4, r3
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	1891      	adds	r1, r2, r2
 80058f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f8:	415b      	adcs	r3, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005900:	4641      	mov	r1, r8
 8005902:	1851      	adds	r1, r2, r1
 8005904:	6339      	str	r1, [r7, #48]	; 0x30
 8005906:	4649      	mov	r1, r9
 8005908:	414b      	adcs	r3, r1
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005918:	4659      	mov	r1, fp
 800591a:	00cb      	lsls	r3, r1, #3
 800591c:	4651      	mov	r1, sl
 800591e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005922:	4651      	mov	r1, sl
 8005924:	00ca      	lsls	r2, r1, #3
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	4603      	mov	r3, r0
 800592c:	4642      	mov	r2, r8
 800592e:	189b      	adds	r3, r3, r2
 8005930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005934:	464b      	mov	r3, r9
 8005936:	460a      	mov	r2, r1
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800594c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005954:	460b      	mov	r3, r1
 8005956:	18db      	adds	r3, r3, r3
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	4613      	mov	r3, r2
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800596a:	f7fb f975 	bl	8000c58 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	; 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	3332      	adds	r3, #50	; 0x32
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 0207 	and.w	r2, r3, #7
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4422      	add	r2, r4
 800599a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800599c:	e105      	b.n	8005baa <UART_SetConfig+0x4d6>
 800599e:	bf00      	nop
 80059a0:	40011000 	.word	0x40011000
 80059a4:	40011400 	.word	0x40011400
 80059a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	1891      	adds	r1, r2, r2
 80059c4:	6239      	str	r1, [r7, #32]
 80059c6:	415b      	adcs	r3, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ce:	4641      	mov	r1, r8
 80059d0:	1854      	adds	r4, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0501 	adc.w	r5, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	00eb      	lsls	r3, r5, #3
 80059e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e6:	00e2      	lsls	r2, r4, #3
 80059e8:	4614      	mov	r4, r2
 80059ea:	461d      	mov	r5, r3
 80059ec:	4643      	mov	r3, r8
 80059ee:	18e3      	adds	r3, r4, r3
 80059f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f4:	464b      	mov	r3, r9
 80059f6:	eb45 0303 	adc.w	r3, r5, r3
 80059fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	008b      	lsls	r3, r1, #2
 8005a1e:	4621      	mov	r1, r4
 8005a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a24:	4621      	mov	r1, r4
 8005a26:	008a      	lsls	r2, r1, #2
 8005a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a2c:	f7fb f914 	bl	8000c58 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005a36:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	011c      	lsls	r4, r3, #4
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	61b9      	str	r1, [r7, #24]
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a60:	4641      	mov	r1, r8
 8005a62:	1851      	adds	r1, r2, r1
 8005a64:	6139      	str	r1, [r7, #16]
 8005a66:	4649      	mov	r1, r9
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a78:	4659      	mov	r1, fp
 8005a7a:	00cb      	lsls	r3, r1, #3
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a82:	4651      	mov	r1, sl
 8005a84:	00ca      	lsls	r2, r1, #3
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a94:	464b      	mov	r3, r9
 8005a96:	460a      	mov	r2, r1
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ab8:	4649      	mov	r1, r9
 8005aba:	008b      	lsls	r3, r1, #2
 8005abc:	4641      	mov	r1, r8
 8005abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	008a      	lsls	r2, r1, #2
 8005ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aca:	f7fb f8c5 	bl	8000c58 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af2:	441c      	add	r4, r3
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	673b      	str	r3, [r7, #112]	; 0x70
 8005afc:	677a      	str	r2, [r7, #116]	; 0x74
 8005afe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b12:	4641      	mov	r1, r8
 8005b14:	1851      	adds	r1, r2, r1
 8005b16:	6039      	str	r1, [r7, #0]
 8005b18:	4649      	mov	r1, r9
 8005b1a:	414b      	adcs	r3, r1
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	00cb      	lsls	r3, r1, #3
 8005b2e:	4651      	mov	r1, sl
 8005b30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b34:	4651      	mov	r1, sl
 8005b36:	00ca      	lsls	r2, r1, #3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b44:	464b      	mov	r3, r9
 8005b46:	460a      	mov	r2, r1
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	663b      	str	r3, [r7, #96]	; 0x60
 8005b58:	667a      	str	r2, [r7, #100]	; 0x64
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b66:	4649      	mov	r1, r9
 8005b68:	008b      	lsls	r3, r1, #2
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b70:	4641      	mov	r1, r8
 8005b72:	008a      	lsls	r2, r1, #2
 8005b74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b78:	f7fb f86e 	bl	8000c58 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 1302 	umull	r1, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2164      	movs	r1, #100	; 0x64
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	; 0x32
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4422      	add	r2, r4
 8005ba8:	609a      	str	r2, [r3, #8]
}
 8005baa:	bf00      	nop
 8005bac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb6:	bf00      	nop
 8005bb8:	51eb851f 	.word	0x51eb851f

08005bbc <__NVIC_SetPriority>:
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	6039      	str	r1, [r7, #0]
 8005bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	db0a      	blt.n	8005be6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	490c      	ldr	r1, [pc, #48]	; (8005c08 <__NVIC_SetPriority+0x4c>)
 8005bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bda:	0112      	lsls	r2, r2, #4
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	440b      	add	r3, r1
 8005be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005be4:	e00a      	b.n	8005bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	4908      	ldr	r1, [pc, #32]	; (8005c0c <__NVIC_SetPriority+0x50>)
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	3b04      	subs	r3, #4
 8005bf4:	0112      	lsls	r2, r2, #4
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	761a      	strb	r2, [r3, #24]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	e000e100 	.word	0xe000e100
 8005c0c:	e000ed00 	.word	0xe000ed00

08005c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c14:	2100      	movs	r1, #0
 8005c16:	f06f 0004 	mvn.w	r0, #4
 8005c1a:	f7ff ffcf 	bl	8005bbc <__NVIC_SetPriority>
#endif
}
 8005c1e:	bf00      	nop
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c2a:	f3ef 8305 	mrs	r3, IPSR
 8005c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c36:	f06f 0305 	mvn.w	r3, #5
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e00c      	b.n	8005c58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <osKernelInitialize+0x44>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <osKernelInitialize+0x44>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	e002      	b.n	8005c58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
 8005c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c58:	687b      	ldr	r3, [r7, #4]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20001c40 	.word	0x20001c40

08005c6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c72:	f3ef 8305 	mrs	r3, IPSR
 8005c76:	603b      	str	r3, [r7, #0]
  return(result);
 8005c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c7e:	f06f 0305 	mvn.w	r3, #5
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	e010      	b.n	8005ca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <osKernelStart+0x48>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d109      	bne.n	8005ca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c8e:	f7ff ffbf 	bl	8005c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <osKernelStart+0x48>)
 8005c94:	2202      	movs	r2, #2
 8005c96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c98:	f001 fa80 	bl	800719c <vTaskStartScheduler>
      stat = osOK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e002      	b.n	8005ca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ca8:	687b      	ldr	r3, [r7, #4]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20001c40 	.word	0x20001c40

08005cb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc0:	f3ef 8305 	mrs	r3, IPSR
 8005cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <osDelay+0x1c>
    stat = osErrorISR;
 8005ccc:	f06f 0305 	mvn.w	r3, #5
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e007      	b.n	8005ce4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 f922 	bl	8006f28 <vTaskDelay>
    }
  }

  return (stat);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <vApplicationGetIdleTaskMemory+0x2c>)
 8005d00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <vApplicationGetIdleTaskMemory+0x30>)
 8005d06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	601a      	str	r2, [r3, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20001c44 	.word	0x20001c44
 8005d20:	20001d00 	.word	0x20001d00

08005d24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a07      	ldr	r2, [pc, #28]	; (8005d50 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4a06      	ldr	r2, [pc, #24]	; (8005d54 <vApplicationGetTimerTaskMemory+0x30>)
 8005d3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d42:	601a      	str	r2, [r3, #0]
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20001f00 	.word	0x20001f00
 8005d54:	20001fbc 	.word	0x20001fbc

08005d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f103 0208 	add.w	r2, r3, #8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f103 0208 	add.w	r2, r3, #8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 0208 	add.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d103      	bne.n	8005e1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e00c      	b.n	8005e34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e002      	b.n	8005e28 <vListInsert+0x2e>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d2f6      	bcs.n	8005e22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6892      	ldr	r2, [r2, #8]
 8005e82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6852      	ldr	r2, [r2, #4]
 8005e8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d103      	bne.n	8005ea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	1e5a      	subs	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ee6:	bf00      	nop
 8005ee8:	e7fe      	b.n	8005ee8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005eea:	f002 fc0b 	bl	8008704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	441a      	add	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	68f9      	ldr	r1, [r7, #12]
 8005f1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	441a      	add	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	22ff      	movs	r2, #255	; 0xff
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d114      	bne.n	8005f6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01a      	beq.n	8005f7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3310      	adds	r3, #16
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fbbf 	bl	80076d0 <xTaskRemoveFromEventList>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d012      	beq.n	8005f7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <xQueueGenericReset+0xcc>)
 8005f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	e009      	b.n	8005f7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fef2 	bl	8005d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3324      	adds	r3, #36	; 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff feed 	bl	8005d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f7e:	f002 fbf1 	bl	8008764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f82:	2301      	movs	r3, #1
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	; 0x38
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <xQueueGenericCreateStatic+0x52>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <xQueueGenericCreateStatic+0x56>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xQueueGenericCreateStatic+0x58>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	623b      	str	r3, [r7, #32]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <xQueueGenericCreateStatic+0x7e>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <xQueueGenericCreateStatic+0x82>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <xQueueGenericCreateStatic+0x84>
 8006012:	2300      	movs	r3, #0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	61fb      	str	r3, [r7, #28]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800602e:	2350      	movs	r3, #80	; 0x50
 8006030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b50      	cmp	r3, #80	; 0x50
 8006036:	d00a      	beq.n	800604e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61bb      	str	r3, [r7, #24]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800604e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006062:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f83f 	bl	80060f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006078:	4618      	mov	r0, r3
 800607a:	3730      	adds	r7, #48	; 0x30
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	613b      	str	r3, [r7, #16]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3350      	adds	r3, #80	; 0x50
 80060b8:	4618      	mov	r0, r3
 80060ba:	f002 fc45 	bl	8008948 <pvPortMalloc>
 80060be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3350      	adds	r3, #80	; 0x50
 80060ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060d8:	79fa      	ldrb	r2, [r7, #7]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	4613      	mov	r3, r2
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f805 	bl	80060f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ea:	69bb      	ldr	r3, [r7, #24]
	}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e002      	b.n	8006116 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006122:	2101      	movs	r1, #1
 8006124:	69b8      	ldr	r0, [r7, #24]
 8006126:	f7ff fecb 	bl	8005ec0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00e      	beq.n	8006166 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800615a:	2300      	movs	r3, #0
 800615c:	2200      	movs	r2, #0
 800615e:	2100      	movs	r1, #0
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f81d 	bl	80061a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006178:	2301      	movs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	461a      	mov	r2, r3
 8006184:	6939      	ldr	r1, [r7, #16]
 8006186:	6978      	ldr	r0, [r7, #20]
 8006188:	f7ff ff7a 	bl	8006080 <xQueueGenericCreate>
 800618c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff ffd3 	bl	800613a <prvInitialiseMutex>

		return xNewQueue;
 8006194:	68fb      	ldr	r3, [r7, #12]
	}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08e      	sub	sp, #56	; 0x38
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xQueueGenericSend+0x32>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <xQueueGenericSend+0x40>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <xQueueGenericSend+0x44>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <xQueueGenericSend+0x46>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <xQueueGenericSend+0x60>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d103      	bne.n	800620e <xQueueGenericSend+0x6e>
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <xQueueGenericSend+0x72>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <xQueueGenericSend+0x74>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xQueueGenericSend+0x8e>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	623b      	str	r3, [r7, #32]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622e:	f001 fc11 	bl	8007a54 <xTaskGetSchedulerState>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <xQueueGenericSend+0x9e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueGenericSend+0xa2>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericSend+0xa4>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueGenericSend+0xbe>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61fb      	str	r3, [r7, #28]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625e:	f002 fa51 	bl	8008704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <xQueueGenericSend+0xd4>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d129      	bne.n	80062c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800627a:	f000 fb2f 	bl	80068dc <prvCopyDataToQueue>
 800627e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	3324      	adds	r3, #36	; 0x24
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fa1f 	bl	80076d0 <xTaskRemoveFromEventList>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d013      	beq.n	80062c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006298:	4b3f      	ldr	r3, [pc, #252]	; (8006398 <xQueueGenericSend+0x1f8>)
 800629a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	e00a      	b.n	80062c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062b0:	4b39      	ldr	r3, [pc, #228]	; (8006398 <xQueueGenericSend+0x1f8>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062c0:	f002 fa50 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e063      	b.n	8006390 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062ce:	f002 fa49 	bl	8008764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e05c      	b.n	8006390 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062dc:	f107 0314 	add.w	r3, r7, #20
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 fa59 	bl	8007798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062e6:	2301      	movs	r3, #1
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ea:	f002 fa3b 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ee:	f000 ffc5 	bl	800727c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062f2:	f002 fa07 	bl	8008704 <vPortEnterCritical>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062fc:	b25b      	sxtb	r3, r3
 80062fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006302:	d103      	bne.n	800630c <xQueueGenericSend+0x16c>
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d103      	bne.n	8006322 <xQueueGenericSend+0x182>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006322:	f002 fa1f 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006326:	1d3a      	adds	r2, r7, #4
 8006328:	f107 0314 	add.w	r3, r7, #20
 800632c:	4611      	mov	r1, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fa48 	bl	80077c4 <xTaskCheckForTimeOut>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d124      	bne.n	8006384 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800633a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633c:	f000 fbc6 	bl	8006acc <prvIsQueueFull>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d018      	beq.n	8006378 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	3310      	adds	r3, #16
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f96e 	bl	8007630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006356:	f000 fb51 	bl	80069fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800635a:	f000 ff9d 	bl	8007298 <xTaskResumeAll>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f af7c 	bne.w	800625e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <xQueueGenericSend+0x1f8>)
 8006368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	e772      	b.n	800625e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800637a:	f000 fb3f 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800637e:	f000 ff8b 	bl	8007298 <xTaskResumeAll>
 8006382:	e76c      	b.n	800625e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006386:	f000 fb39 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800638a:	f000 ff85 	bl	8007298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800638e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006390:	4618      	mov	r0, r3
 8006392:	3738      	adds	r7, #56	; 0x38
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b090      	sub	sp, #64	; 0x40
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <xQueueGenericSendFromISR+0x3c>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <xQueueGenericSendFromISR+0x40>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <xQueueGenericSendFromISR+0x42>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d103      	bne.n	8006406 <xQueueGenericSendFromISR+0x6a>
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <xQueueGenericSendFromISR+0x6e>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <xQueueGenericSendFromISR+0x70>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006426:	f002 fa4f 	bl	80088c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800642a:	f3ef 8211 	mrs	r2, BASEPRI
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	61fa      	str	r2, [r7, #28]
 8006440:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006442:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <xQueueGenericSendFromISR+0xbc>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d12f      	bne.n	80064b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800646e:	f000 fa35 	bl	80068dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006472:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d112      	bne.n	80064a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d016      	beq.n	80064b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	3324      	adds	r3, #36	; 0x24
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f921 	bl	80076d0 <xTaskRemoveFromEventList>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00e      	beq.n	80064b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e007      	b.n	80064b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064a6:	3301      	adds	r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	b25a      	sxtb	r2, r3
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064b2:	2301      	movs	r3, #1
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064b6:	e001      	b.n	80064bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3740      	adds	r7, #64	; 0x40
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	; 0x30
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <xQueueReceive+0x30>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	623b      	str	r3, [r7, #32]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <xQueueReceive+0x3e>
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <xQueueReceive+0x42>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <xQueueReceive+0x44>
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xQueueReceive+0x5e>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	61fb      	str	r3, [r7, #28]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006532:	f001 fa8f 	bl	8007a54 <xTaskGetSchedulerState>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <xQueueReceive+0x6e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <xQueueReceive+0x72>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueReceive+0x74>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueReceive+0x8e>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	61bb      	str	r3, [r7, #24]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006562:	f002 f8cf 	bl	8008704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01f      	beq.n	80065b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006576:	f000 fa1b 	bl	80069b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	1e5a      	subs	r2, r3, #1
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00f      	beq.n	80065aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	3310      	adds	r3, #16
 800658e:	4618      	mov	r0, r3
 8006590:	f001 f89e 	bl	80076d0 <xTaskRemoveFromEventList>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800659a:	4b3d      	ldr	r3, [pc, #244]	; (8006690 <xQueueReceive+0x1bc>)
 800659c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065aa:	f002 f8db 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e069      	b.n	8006686 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b8:	f002 f8d4 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065bc:	2300      	movs	r3, #0
 80065be:	e062      	b.n	8006686 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 f8e4 	bl	8007798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065d0:	2301      	movs	r3, #1
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065d4:	f002 f8c6 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d8:	f000 fe50 	bl	800727c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065dc:	f002 f892 	bl	8008704 <vPortEnterCritical>
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d103      	bne.n	80065f6 <xQueueReceive+0x122>
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d103      	bne.n	800660c <xQueueReceive+0x138>
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800660c:	f002 f8aa 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006610:	1d3a      	adds	r2, r7, #4
 8006612:	f107 0310 	add.w	r3, r7, #16
 8006616:	4611      	mov	r1, r2
 8006618:	4618      	mov	r0, r3
 800661a:	f001 f8d3 	bl	80077c4 <xTaskCheckForTimeOut>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d123      	bne.n	800666c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006626:	f000 fa3b 	bl	8006aa0 <prvIsQueueEmpty>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d017      	beq.n	8006660 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	3324      	adds	r3, #36	; 0x24
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fff9 	bl	8007630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800663e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006640:	f000 f9dc 	bl	80069fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006644:	f000 fe28 	bl	8007298 <xTaskResumeAll>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d189      	bne.n	8006562 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800664e:	4b10      	ldr	r3, [pc, #64]	; (8006690 <xQueueReceive+0x1bc>)
 8006650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	e780      	b.n	8006562 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006662:	f000 f9cb 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006666:	f000 fe17 	bl	8007298 <xTaskResumeAll>
 800666a:	e77a      	b.n	8006562 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800666c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666e:	f000 f9c5 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006672:	f000 fe11 	bl	8007298 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006678:	f000 fa12 	bl	8006aa0 <prvIsQueueEmpty>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	f43f af6f 	beq.w	8006562 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006684:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006686:	4618      	mov	r0, r3
 8006688:	3730      	adds	r7, #48	; 0x30
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08e      	sub	sp, #56	; 0x38
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	623b      	str	r3, [r7, #32]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	61fb      	str	r3, [r7, #28]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e4:	f001 f9b6 	bl	8007a54 <xTaskGetSchedulerState>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <xQueueSemaphoreTake+0x60>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueSemaphoreTake+0x64>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <xQueueSemaphoreTake+0x66>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61bb      	str	r3, [r7, #24]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006714:	f001 fff6 	bl	8008704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	d024      	beq.n	800676e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006734:	f001 fb04 	bl	8007d40 <pvTaskIncrementMutexHeldCount>
 8006738:	4602      	mov	r2, r0
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00f      	beq.n	8006766 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	3310      	adds	r3, #16
 800674a:	4618      	mov	r0, r3
 800674c:	f000 ffc0 	bl	80076d0 <xTaskRemoveFromEventList>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006756:	4b54      	ldr	r3, [pc, #336]	; (80068a8 <xQueueSemaphoreTake+0x214>)
 8006758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006766:	f001 fffd 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 800676a:	2301      	movs	r3, #1
 800676c:	e097      	b.n	800689e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d111      	bne.n	8006798 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	617b      	str	r3, [r7, #20]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006790:	f001 ffe8 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006794:	2300      	movs	r3, #0
 8006796:	e082      	b.n	800689e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800679e:	f107 030c 	add.w	r3, r7, #12
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fff8 	bl	8007798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067ac:	f001 ffda 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067b0:	f000 fd64 	bl	800727c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067b4:	f001 ffa6 	bl	8008704 <vPortEnterCritical>
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d103      	bne.n	80067ce <xQueueSemaphoreTake+0x13a>
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d103      	bne.n	80067e4 <xQueueSemaphoreTake+0x150>
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067e4:	f001 ffbe 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e8:	463a      	mov	r2, r7
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ffe7 	bl	80077c4 <xTaskCheckForTimeOut>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d132      	bne.n	8006862 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067fe:	f000 f94f 	bl	8006aa0 <prvIsQueueEmpty>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d026      	beq.n	8006856 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006810:	f001 ff78 	bl	8008704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f001 f939 	bl	8007a90 <xTaskPriorityInherit>
 800681e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006820:	f001 ffa0 	bl	8008764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	3324      	adds	r3, #36	; 0x24
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f000 feff 	bl	8007630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006834:	f000 f8e2 	bl	80069fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006838:	f000 fd2e 	bl	8007298 <xTaskResumeAll>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	f47f af68 	bne.w	8006714 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006844:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <xQueueSemaphoreTake+0x214>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	e75e      	b.n	8006714 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006858:	f000 f8d0 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800685c:	f000 fd1c 	bl	8007298 <xTaskResumeAll>
 8006860:	e758      	b.n	8006714 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006864:	f000 f8ca 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006868:	f000 fd16 	bl	8007298 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800686c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800686e:	f000 f917 	bl	8006aa0 <prvIsQueueEmpty>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	f43f af4d 	beq.w	8006714 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00d      	beq.n	800689c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006880:	f001 ff40 	bl	8008704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006886:	f000 f811 	bl	80068ac <prvGetDisinheritPriorityAfterTimeout>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006892:	4618      	mov	r0, r3
 8006894:	f001 f9d2 	bl	8007c3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006898:	f001 ff64 	bl	8008764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800689c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3738      	adds	r7, #56	; 0x38
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e001      	b.n	80068ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068ce:	68fb      	ldr	r3, [r7, #12]
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d14d      	bne.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f92a 	bl	8007b60 <xTaskPriorityDisinherit>
 800690c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	e043      	b.n	800699e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d119      	bne.n	8006950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6858      	ldr	r0, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	461a      	mov	r2, r3
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	f002 fbfa 	bl	8009120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d32b      	bcc.n	800699e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	e026      	b.n	800699e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68d8      	ldr	r0, [r3, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	461a      	mov	r2, r3
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	f002 fbe0 	bl	8009120 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	425b      	negs	r3, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d207      	bcs.n	800698c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	425b      	negs	r3, r3
 8006986:	441a      	add	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d105      	bne.n	800699e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3b01      	subs	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069a6:	697b      	ldr	r3, [r7, #20]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d303      	bcc.n	80069e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68d9      	ldr	r1, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	461a      	mov	r2, r3
 80069ee:	6838      	ldr	r0, [r7, #0]
 80069f0:	f002 fb96 	bl	8009120 <memcpy>
	}
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a04:	f001 fe7e 	bl	8008704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a10:	e011      	b.n	8006a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3324      	adds	r3, #36	; 0x24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fe56 	bl	80076d0 <xTaskRemoveFromEventList>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2a:	f000 ff2d 	bl	8007888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dce9      	bgt.n	8006a12 <prvUnlockQueue+0x16>
 8006a3e:	e000      	b.n	8006a42 <prvUnlockQueue+0x46>
					break;
 8006a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 fe8b 	bl	8008764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a4e:	f001 fe59 	bl	8008704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	e011      	b.n	8006a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3310      	adds	r3, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fe31 	bl	80076d0 <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a74:	f000 ff08 	bl	8007888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dce9      	bgt.n	8006a5c <prvUnlockQueue+0x60>
 8006a88:	e000      	b.n	8006a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	22ff      	movs	r2, #255	; 0xff
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a94:	f001 fe66 	bl	8008764 <vPortExitCritical>
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa8:	f001 fe2c 	bl	8008704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e001      	b.n	8006abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006abe:	f001 fe51 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad4:	f001 fe16 	bl	8008704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f001 fe39 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e014      	b.n	8006b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b0c:	4a0f      	ldr	r2, [pc, #60]	; (8006b4c <vQueueAddToRegistry+0x50>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b18:	490c      	ldr	r1, [pc, #48]	; (8006b4c <vQueueAddToRegistry+0x50>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b22:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <vQueueAddToRegistry+0x50>)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b2e:	e006      	b.n	8006b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d9e7      	bls.n	8006b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	200023bc 	.word	0x200023bc

08006b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b60:	f001 fdd0 	bl	8008704 <vPortEnterCritical>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d103      	bne.n	8006b7a <vQueueWaitForMessageRestricted+0x2a>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d103      	bne.n	8006b90 <vQueueWaitForMessageRestricted+0x40>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b90:	f001 fde8 	bl	8008764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fd67 	bl	8007678 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006baa:	6978      	ldr	r0, [r7, #20]
 8006bac:	f7ff ff26 	bl	80069fc <prvUnlockQueue>
	}
 8006bb0:	bf00      	nop
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08e      	sub	sp, #56	; 0x38
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	623b      	str	r3, [r7, #32]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xTaskCreateStatic+0x46>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	61fb      	str	r3, [r7, #28]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bfe:	23bc      	movs	r3, #188	; 0xbc
 8006c00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2bbc      	cmp	r3, #188	; 0xbc
 8006c06:	d00a      	beq.n	8006c1e <xTaskCreateStatic+0x66>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	61bb      	str	r3, [r7, #24]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01e      	beq.n	8006c64 <xTaskCreateStatic+0xac>
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01b      	beq.n	8006c64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9303      	str	r3, [sp, #12]
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	9302      	str	r3, [sp, #8]
 8006c46:	f107 0314 	add.w	r3, r7, #20
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f850 	bl	8006cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c5e:	f000 f8f3 	bl	8006e48 <prvAddNewTaskToReadyList>
 8006c62:	e001      	b.n	8006c68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c68:	697b      	ldr	r3, [r7, #20]
	}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b08c      	sub	sp, #48	; 0x30
 8006c76:	af04      	add	r7, sp, #16
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fe5e 	bl	8008948 <pvPortMalloc>
 8006c8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00e      	beq.n	8006cb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c94:	20bc      	movs	r0, #188	; 0xbc
 8006c96:	f001 fe57 	bl	8008948 <pvPortMalloc>
 8006c9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ca8:	e005      	b.n	8006cb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	f001 ff18 	bl	8008ae0 <vPortFree>
 8006cb0:	e001      	b.n	8006cb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d017      	beq.n	8006cec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9303      	str	r3, [sp, #12]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	9302      	str	r3, [sp, #8]
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f80e 	bl	8006cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ce0:	69f8      	ldr	r0, [r7, #28]
 8006ce2:	f000 f8b1 	bl	8006e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	e002      	b.n	8006cf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cec:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	461a      	mov	r2, r3
 8006d14:	21a5      	movs	r1, #165	; 0xa5
 8006d16:	f002 fa11 	bl	800913c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d24:	3b01      	subs	r3, #1
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f023 0307 	bic.w	r3, r3, #7
 8006d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	617b      	str	r3, [r7, #20]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01f      	beq.n	8006d9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e012      	b.n	8006d86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	7819      	ldrb	r1, [r3, #0]
 8006d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3334      	adds	r3, #52	; 0x34
 8006d70:	460a      	mov	r2, r1
 8006d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d006      	beq.n	8006d8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	2b0f      	cmp	r3, #15
 8006d8a:	d9e9      	bls.n	8006d60 <prvInitialiseNewTask+0x64>
 8006d8c:	e000      	b.n	8006d90 <prvInitialiseNewTask+0x94>
			{
				break;
 8006d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d98:	e003      	b.n	8006da2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	2b37      	cmp	r3, #55	; 0x37
 8006da6:	d901      	bls.n	8006dac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006da8:	2337      	movs	r3, #55	; 0x37
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	2200      	movs	r2, #0
 8006dbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe ffe8 	bl	8005d98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	3318      	adds	r3, #24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe ffe3 	bl	8005d98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	3354      	adds	r3, #84	; 0x54
 8006dfc:	2260      	movs	r2, #96	; 0x60
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 f99b 	bl	800913c <memset>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <prvInitialiseNewTask+0x140>)
 8006e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <prvInitialiseNewTask+0x144>)
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	4a0b      	ldr	r2, [pc, #44]	; (8006e44 <prvInitialiseNewTask+0x148>)
 8006e16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	69b8      	ldr	r0, [r7, #24]
 8006e1e:	f001 fb45 	bl	80084ac <pxPortInitialiseStack>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e34:	bf00      	nop
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	0800c574 	.word	0x0800c574
 8006e40:	0800c594 	.word	0x0800c594
 8006e44:	0800c554 	.word	0x0800c554

08006e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e50:	f001 fc58 	bl	8008704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e54:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e66:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e6c:	4b27      	ldr	r3, [pc, #156]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d110      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e74:	f000 fd2c 	bl	80078d0 <prvInitialiseTaskLists>
 8006e78:	e00d      	b.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e7a:	4b26      	ldr	r3, [pc, #152]	; (8006f14 <prvAddNewTaskToReadyList+0xcc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e82:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d802      	bhi.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e96:	4b20      	ldr	r3, [pc, #128]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <prvAddNewTaskToReadyList+0xd4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <prvAddNewTaskToReadyList+0x74>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <prvAddNewTaskToReadyList+0xd4>)
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <prvAddNewTaskToReadyList+0xd8>)
 8006eca:	441a      	add	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7fe ff6d 	bl	8005db2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fc44 	bl	8008764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <prvAddNewTaskToReadyList+0xcc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d207      	bcs.n	8006f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <prvAddNewTaskToReadyList+0xdc>)
 8006ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200028d0 	.word	0x200028d0
 8006f10:	200023fc 	.word	0x200023fc
 8006f14:	200028dc 	.word	0x200028dc
 8006f18:	200028ec 	.word	0x200028ec
 8006f1c:	200028d8 	.word	0x200028d8
 8006f20:	20002400 	.word	0x20002400
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d017      	beq.n	8006f6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <vTaskDelay+0x60>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <vTaskDelay+0x30>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60bb      	str	r3, [r7, #8]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f58:	f000 f990 	bl	800727c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 ff02 	bl	8007d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f64:	f000 f998 	bl	8007298 <xTaskResumeAll>
 8006f68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d107      	bne.n	8006f80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <vTaskDelay+0x64>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200028f8 	.word	0x200028f8
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f98:	f001 fbb4 	bl	8008704 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <vTaskSuspend+0x18>
 8006fa2:	4b30      	ldr	r3, [pc, #192]	; (8007064 <vTaskSuspend+0xd4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	e000      	b.n	8006faa <vTaskSuspend+0x1a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe ff5b 	bl	8005e6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3318      	adds	r3, #24
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe ff52 	bl	8005e6c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4826      	ldr	r0, [pc, #152]	; (8007068 <vTaskSuspend+0xd8>)
 8006fd0:	f7fe feef 	bl	8005db2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d103      	bne.n	8006fe8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006fe8:	f001 fbbc 	bl	8008764 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006fec:	4b1f      	ldr	r3, [pc, #124]	; (800706c <vTaskSuspend+0xdc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006ff4:	f001 fb86 	bl	8008704 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006ff8:	f000 fd0c 	bl	8007a14 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006ffc:	f001 fbb2 	bl	8008764 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007000:	4b18      	ldr	r3, [pc, #96]	; (8007064 <vTaskSuspend+0xd4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	429a      	cmp	r2, r3
 8007008:	d127      	bne.n	800705a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800700a:	4b18      	ldr	r3, [pc, #96]	; (800706c <vTaskSuspend+0xdc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007012:	4b17      	ldr	r3, [pc, #92]	; (8007070 <vTaskSuspend+0xe0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <vTaskSuspend+0xa0>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	60bb      	str	r3, [r7, #8]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007030:	4b10      	ldr	r3, [pc, #64]	; (8007074 <vTaskSuspend+0xe4>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007040:	e00b      	b.n	800705a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <vTaskSuspend+0xd8>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <vTaskSuspend+0xe8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d103      	bne.n	8007056 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <vTaskSuspend+0xd4>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
	}
 8007054:	e001      	b.n	800705a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8007056:	f000 fa87 	bl	8007568 <vTaskSwitchContext>
	}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200023fc 	.word	0x200023fc
 8007068:	200028bc 	.word	0x200028bc
 800706c:	200028dc 	.word	0x200028dc
 8007070:	200028f8 	.word	0x200028f8
 8007074:	e000ed04 	.word	0xe000ed04
 8007078:	200028d0 	.word	0x200028d0

0800707c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007084:	2300      	movs	r3, #0
 8007086:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60fb      	str	r3, [r7, #12]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	4a0a      	ldr	r2, [pc, #40]	; (80070d8 <prvTaskIsTaskSuspended+0x5c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10a      	bne.n	80070c8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	4a09      	ldr	r2, [pc, #36]	; (80070dc <prvTaskIsTaskSuspended+0x60>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d005      	beq.n	80070c8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	200028bc 	.word	0x200028bc
 80070dc:	20002890 	.word	0x20002890

080070e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <vTaskResume+0x28>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	60bb      	str	r3, [r7, #8]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007108:	4b20      	ldr	r3, [pc, #128]	; (800718c <vTaskResume+0xac>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	429a      	cmp	r2, r3
 8007110:	d038      	beq.n	8007184 <vTaskResume+0xa4>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d035      	beq.n	8007184 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007118:	f001 faf4 	bl	8008704 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff ffad 	bl	800707c <prvTaskIsTaskSuspended>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02b      	beq.n	8007180 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3304      	adds	r3, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fe9d 	bl	8005e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007136:	4b16      	ldr	r3, [pc, #88]	; (8007190 <vTaskResume+0xb0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d903      	bls.n	8007146 <vTaskResume+0x66>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	4a13      	ldr	r2, [pc, #76]	; (8007190 <vTaskResume+0xb0>)
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4a10      	ldr	r2, [pc, #64]	; (8007194 <vTaskResume+0xb4>)
 8007154:	441a      	add	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3304      	adds	r3, #4
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7fe fe28 	bl	8005db2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <vTaskResume+0xac>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	429a      	cmp	r2, r3
 800716e:	d307      	bcc.n	8007180 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <vTaskResume+0xb8>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007180:	f001 faf0 	bl	8008764 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200023fc 	.word	0x200023fc
 8007190:	200028d8 	.word	0x200028d8
 8007194:	20002400 	.word	0x20002400
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071aa:	463a      	mov	r2, r7
 80071ac:	1d39      	adds	r1, r7, #4
 80071ae:	f107 0308 	add.w	r3, r7, #8
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fd9c 	bl	8005cf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	9202      	str	r2, [sp, #8]
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	2300      	movs	r3, #0
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2300      	movs	r3, #0
 80071c8:	460a      	mov	r2, r1
 80071ca:	4924      	ldr	r1, [pc, #144]	; (800725c <vTaskStartScheduler+0xc0>)
 80071cc:	4824      	ldr	r0, [pc, #144]	; (8007260 <vTaskStartScheduler+0xc4>)
 80071ce:	f7ff fcf3 	bl	8006bb8 <xTaskCreateStatic>
 80071d2:	4603      	mov	r3, r0
 80071d4:	4a23      	ldr	r2, [pc, #140]	; (8007264 <vTaskStartScheduler+0xc8>)
 80071d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071d8:	4b22      	ldr	r3, [pc, #136]	; (8007264 <vTaskStartScheduler+0xc8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071e0:	2301      	movs	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	e001      	b.n	80071ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d102      	bne.n	80071f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071f0:	f000 fe0e 	bl	8007e10 <xTimerCreateTimerTask>
 80071f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d11b      	bne.n	8007234 <vTaskStartScheduler+0x98>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	613b      	str	r3, [r7, #16]
}
 800720e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007210:	4b15      	ldr	r3, [pc, #84]	; (8007268 <vTaskStartScheduler+0xcc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3354      	adds	r3, #84	; 0x54
 8007216:	4a15      	ldr	r2, [pc, #84]	; (800726c <vTaskStartScheduler+0xd0>)
 8007218:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <vTaskStartScheduler+0xd4>)
 800721c:	f04f 32ff 	mov.w	r2, #4294967295
 8007220:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007222:	4b14      	ldr	r3, [pc, #80]	; (8007274 <vTaskStartScheduler+0xd8>)
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <vTaskStartScheduler+0xdc>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800722e:	f001 f9c7 	bl	80085c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007232:	e00e      	b.n	8007252 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d10a      	bne.n	8007252 <vTaskStartScheduler+0xb6>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	60fb      	str	r3, [r7, #12]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <vTaskStartScheduler+0xb4>
}
 8007252:	bf00      	nop
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	0800c418 	.word	0x0800c418
 8007260:	080078a1 	.word	0x080078a1
 8007264:	200028f4 	.word	0x200028f4
 8007268:	200023fc 	.word	0x200023fc
 800726c:	20000014 	.word	0x20000014
 8007270:	200028f0 	.word	0x200028f0
 8007274:	200028dc 	.word	0x200028dc
 8007278:	200028d4 	.word	0x200028d4

0800727c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <vTaskSuspendAll+0x18>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a03      	ldr	r2, [pc, #12]	; (8007294 <vTaskSuspendAll+0x18>)
 8007288:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800728a:	bf00      	nop
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	200028f8 	.word	0x200028f8

08007298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072a6:	4b42      	ldr	r3, [pc, #264]	; (80073b0 <xTaskResumeAll+0x118>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	603b      	str	r3, [r7, #0]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072c4:	f001 fa1e 	bl	8008704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072c8:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <xTaskResumeAll+0x118>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	4a38      	ldr	r2, [pc, #224]	; (80073b0 <xTaskResumeAll+0x118>)
 80072d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d2:	4b37      	ldr	r3, [pc, #220]	; (80073b0 <xTaskResumeAll+0x118>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d162      	bne.n	80073a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072da:	4b36      	ldr	r3, [pc, #216]	; (80073b4 <xTaskResumeAll+0x11c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d05e      	beq.n	80073a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072e2:	e02f      	b.n	8007344 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b34      	ldr	r3, [pc, #208]	; (80073b8 <xTaskResumeAll+0x120>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3318      	adds	r3, #24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fdbb 	bl	8005e6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fdb6 	bl	8005e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	4b2d      	ldr	r3, [pc, #180]	; (80073bc <xTaskResumeAll+0x124>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d903      	bls.n	8007314 <xTaskResumeAll+0x7c>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	4a2a      	ldr	r2, [pc, #168]	; (80073bc <xTaskResumeAll+0x124>)
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4a27      	ldr	r2, [pc, #156]	; (80073c0 <xTaskResumeAll+0x128>)
 8007322:	441a      	add	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3304      	adds	r3, #4
 8007328:	4619      	mov	r1, r3
 800732a:	4610      	mov	r0, r2
 800732c:	f7fe fd41 	bl	8005db2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <xTaskResumeAll+0x12c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800733e:	4b22      	ldr	r3, [pc, #136]	; (80073c8 <xTaskResumeAll+0x130>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007344:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <xTaskResumeAll+0x120>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1cb      	bne.n	80072e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007352:	f000 fb5f 	bl	8007a14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007356:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <xTaskResumeAll+0x134>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007362:	f000 f847 	bl	80073f4 <xTaskIncrementTick>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800736c:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <xTaskResumeAll+0x130>)
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3b01      	subs	r3, #1
 8007376:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f1      	bne.n	8007362 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800737e:	4b13      	ldr	r3, [pc, #76]	; (80073cc <xTaskResumeAll+0x134>)
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007384:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <xTaskResumeAll+0x130>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <xTaskResumeAll+0x138>)
 8007392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073a0:	f001 f9e0 	bl	8008764 <vPortExitCritical>

	return xAlreadyYielded;
 80073a4:	68bb      	ldr	r3, [r7, #8]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200028f8 	.word	0x200028f8
 80073b4:	200028d0 	.word	0x200028d0
 80073b8:	20002890 	.word	0x20002890
 80073bc:	200028d8 	.word	0x200028d8
 80073c0:	20002400 	.word	0x20002400
 80073c4:	200023fc 	.word	0x200023fc
 80073c8:	200028e4 	.word	0x200028e4
 80073cc:	200028e0 	.word	0x200028e0
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <xTaskGetTickCount+0x1c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073e0:	687b      	ldr	r3, [r7, #4]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	200028d4 	.word	0x200028d4

080073f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073fe:	4b4f      	ldr	r3, [pc, #316]	; (800753c <xTaskIncrementTick+0x148>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 808f 	bne.w	8007526 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007408:	4b4d      	ldr	r3, [pc, #308]	; (8007540 <xTaskIncrementTick+0x14c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007410:	4a4b      	ldr	r2, [pc, #300]	; (8007540 <xTaskIncrementTick+0x14c>)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d120      	bne.n	800745e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800741c:	4b49      	ldr	r3, [pc, #292]	; (8007544 <xTaskIncrementTick+0x150>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <xTaskIncrementTick+0x48>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	603b      	str	r3, [r7, #0]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xTaskIncrementTick+0x46>
 800743c:	4b41      	ldr	r3, [pc, #260]	; (8007544 <xTaskIncrementTick+0x150>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	4b41      	ldr	r3, [pc, #260]	; (8007548 <xTaskIncrementTick+0x154>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a3f      	ldr	r2, [pc, #252]	; (8007544 <xTaskIncrementTick+0x150>)
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	4a3f      	ldr	r2, [pc, #252]	; (8007548 <xTaskIncrementTick+0x154>)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	4b3e      	ldr	r3, [pc, #248]	; (800754c <xTaskIncrementTick+0x158>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a3d      	ldr	r2, [pc, #244]	; (800754c <xTaskIncrementTick+0x158>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	f000 fadb 	bl	8007a14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800745e:	4b3c      	ldr	r3, [pc, #240]	; (8007550 <xTaskIncrementTick+0x15c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d349      	bcc.n	80074fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007468:	4b36      	ldr	r3, [pc, #216]	; (8007544 <xTaskIncrementTick+0x150>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007472:	4b37      	ldr	r3, [pc, #220]	; (8007550 <xTaskIncrementTick+0x15c>)
 8007474:	f04f 32ff 	mov.w	r2, #4294967295
 8007478:	601a      	str	r2, [r3, #0]
					break;
 800747a:	e03f      	b.n	80074fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747c:	4b31      	ldr	r3, [pc, #196]	; (8007544 <xTaskIncrementTick+0x150>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	d203      	bcs.n	800749c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007494:	4a2e      	ldr	r2, [pc, #184]	; (8007550 <xTaskIncrementTick+0x15c>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800749a:	e02f      	b.n	80074fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3304      	adds	r3, #4
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe fce3 	bl	8005e6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	3318      	adds	r3, #24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fcda 	bl	8005e6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b25      	ldr	r3, [pc, #148]	; (8007554 <xTaskIncrementTick+0x160>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <xTaskIncrementTick+0xd8>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a22      	ldr	r2, [pc, #136]	; (8007554 <xTaskIncrementTick+0x160>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <xTaskIncrementTick+0x164>)
 80074da:	441a      	add	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fc65 	bl	8005db2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4b1b      	ldr	r3, [pc, #108]	; (800755c <xTaskIncrementTick+0x168>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d3b8      	bcc.n	8007468 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074fa:	e7b5      	b.n	8007468 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074fc:	4b17      	ldr	r3, [pc, #92]	; (800755c <xTaskIncrementTick+0x168>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	4915      	ldr	r1, [pc, #84]	; (8007558 <xTaskIncrementTick+0x164>)
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d901      	bls.n	8007518 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <xTaskIncrementTick+0x16c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e004      	b.n	8007530 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <xTaskIncrementTick+0x170>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a0d      	ldr	r2, [pc, #52]	; (8007564 <xTaskIncrementTick+0x170>)
 800752e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007530:	697b      	ldr	r3, [r7, #20]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200028f8 	.word	0x200028f8
 8007540:	200028d4 	.word	0x200028d4
 8007544:	20002888 	.word	0x20002888
 8007548:	2000288c 	.word	0x2000288c
 800754c:	200028e8 	.word	0x200028e8
 8007550:	200028f0 	.word	0x200028f0
 8007554:	200028d8 	.word	0x200028d8
 8007558:	20002400 	.word	0x20002400
 800755c:	200023fc 	.word	0x200023fc
 8007560:	200028e4 	.word	0x200028e4
 8007564:	200028e0 	.word	0x200028e0

08007568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800756e:	4b2a      	ldr	r3, [pc, #168]	; (8007618 <vTaskSwitchContext+0xb0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007576:	4b29      	ldr	r3, [pc, #164]	; (800761c <vTaskSwitchContext+0xb4>)
 8007578:	2201      	movs	r2, #1
 800757a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800757c:	e046      	b.n	800760c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800757e:	4b27      	ldr	r3, [pc, #156]	; (800761c <vTaskSwitchContext+0xb4>)
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007584:	4b26      	ldr	r3, [pc, #152]	; (8007620 <vTaskSwitchContext+0xb8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e010      	b.n	80075ae <vTaskSwitchContext+0x46>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	607b      	str	r3, [r7, #4]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <vTaskSwitchContext+0x3e>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	491d      	ldr	r1, [pc, #116]	; (8007624 <vTaskSwitchContext+0xbc>)
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0e4      	beq.n	800758c <vTaskSwitchContext+0x24>
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4a15      	ldr	r2, [pc, #84]	; (8007624 <vTaskSwitchContext+0xbc>)
 80075ce:	4413      	add	r3, r2
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	3308      	adds	r3, #8
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d104      	bne.n	80075f2 <vTaskSwitchContext+0x8a>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4a0b      	ldr	r2, [pc, #44]	; (8007628 <vTaskSwitchContext+0xc0>)
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4a08      	ldr	r2, [pc, #32]	; (8007620 <vTaskSwitchContext+0xb8>)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007602:	4b09      	ldr	r3, [pc, #36]	; (8007628 <vTaskSwitchContext+0xc0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3354      	adds	r3, #84	; 0x54
 8007608:	4a08      	ldr	r2, [pc, #32]	; (800762c <vTaskSwitchContext+0xc4>)
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	200028f8 	.word	0x200028f8
 800761c:	200028e4 	.word	0x200028e4
 8007620:	200028d8 	.word	0x200028d8
 8007624:	20002400 	.word	0x20002400
 8007628:	200023fc 	.word	0x200023fc
 800762c:	20000014 	.word	0x20000014

08007630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007656:	4b07      	ldr	r3, [pc, #28]	; (8007674 <vTaskPlaceOnEventList+0x44>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3318      	adds	r3, #24
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fe fbcb 	bl	8005dfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007664:	2101      	movs	r1, #1
 8007666:	6838      	ldr	r0, [r7, #0]
 8007668:	f000 fb7e 	bl	8007d68 <prvAddCurrentTaskToDelayedList>
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200023fc 	.word	0x200023fc

08007678 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	617b      	str	r3, [r7, #20]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <vTaskPlaceOnEventListRestricted+0x54>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4619      	mov	r1, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7fe fb82 	bl	8005db2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80076b4:	f04f 33ff 	mov.w	r3, #4294967295
 80076b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	68b8      	ldr	r0, [r7, #8]
 80076be:	f000 fb53 	bl	8007d68 <prvAddCurrentTaskToDelayedList>
	}
 80076c2:	bf00      	nop
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200023fc 	.word	0x200023fc

080076d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3318      	adds	r3, #24
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fbb3 	bl	8005e6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007706:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <xTaskRemoveFromEventList+0xb0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d11d      	bne.n	800774a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fbaa 	bl	8005e6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	4b19      	ldr	r3, [pc, #100]	; (8007784 <xTaskRemoveFromEventList+0xb4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <xTaskRemoveFromEventList+0x5c>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a16      	ldr	r2, [pc, #88]	; (8007784 <xTaskRemoveFromEventList+0xb4>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <xTaskRemoveFromEventList+0xb8>)
 800773a:	441a      	add	r2, r3
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f7fe fb35 	bl	8005db2 <vListInsertEnd>
 8007748:	e005      	b.n	8007756 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3318      	adds	r3, #24
 800774e:	4619      	mov	r1, r3
 8007750:	480e      	ldr	r0, [pc, #56]	; (800778c <xTaskRemoveFromEventList+0xbc>)
 8007752:	f7fe fb2e 	bl	8005db2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <xTaskRemoveFromEventList+0xc0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d905      	bls.n	8007770 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <xTaskRemoveFromEventList+0xc4>)
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e001      	b.n	8007774 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007774:	697b      	ldr	r3, [r7, #20]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	200028f8 	.word	0x200028f8
 8007784:	200028d8 	.word	0x200028d8
 8007788:	20002400 	.word	0x20002400
 800778c:	20002890 	.word	0x20002890
 8007790:	200023fc 	.word	0x200023fc
 8007794:	200028e4 	.word	0x200028e4

08007798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077a0:	4b06      	ldr	r3, [pc, #24]	; (80077bc <vTaskInternalSetTimeOutState+0x24>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <vTaskInternalSetTimeOutState+0x28>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	605a      	str	r2, [r3, #4]
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	200028e8 	.word	0x200028e8
 80077c0:	200028d4 	.word	0x200028d4

080077c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	613b      	str	r3, [r7, #16]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007806:	f000 ff7d 	bl	8008704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <xTaskCheckForTimeOut+0xbc>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d102      	bne.n	800782a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e023      	b.n	8007872 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4b15      	ldr	r3, [pc, #84]	; (8007884 <xTaskCheckForTimeOut+0xc0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d007      	beq.n	8007846 <xTaskCheckForTimeOut+0x82>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	429a      	cmp	r2, r3
 800783e:	d302      	bcc.n	8007846 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	e015      	b.n	8007872 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	429a      	cmp	r2, r3
 800784e:	d20b      	bcs.n	8007868 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	1ad2      	subs	r2, r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff9b 	bl	8007798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	e004      	b.n	8007872 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800786e:	2301      	movs	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007872:	f000 ff77 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8007876:	69fb      	ldr	r3, [r7, #28]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	200028d4 	.word	0x200028d4
 8007884:	200028e8 	.word	0x200028e8

08007888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800788c:	4b03      	ldr	r3, [pc, #12]	; (800789c <vTaskMissedYield+0x14>)
 800788e:	2201      	movs	r2, #1
 8007890:	601a      	str	r2, [r3, #0]
}
 8007892:	bf00      	nop
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	200028e4 	.word	0x200028e4

080078a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078a8:	f000 f852 	bl	8007950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <prvIdleTask+0x28>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d9f9      	bls.n	80078a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <prvIdleTask+0x2c>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078c4:	e7f0      	b.n	80078a8 <prvIdleTask+0x8>
 80078c6:	bf00      	nop
 80078c8:	20002400 	.word	0x20002400
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078d6:	2300      	movs	r3, #0
 80078d8:	607b      	str	r3, [r7, #4]
 80078da:	e00c      	b.n	80078f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4a12      	ldr	r2, [pc, #72]	; (8007930 <prvInitialiseTaskLists+0x60>)
 80078e8:	4413      	add	r3, r2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fa34 	bl	8005d58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3301      	adds	r3, #1
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b37      	cmp	r3, #55	; 0x37
 80078fa:	d9ef      	bls.n	80078dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078fc:	480d      	ldr	r0, [pc, #52]	; (8007934 <prvInitialiseTaskLists+0x64>)
 80078fe:	f7fe fa2b 	bl	8005d58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007902:	480d      	ldr	r0, [pc, #52]	; (8007938 <prvInitialiseTaskLists+0x68>)
 8007904:	f7fe fa28 	bl	8005d58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007908:	480c      	ldr	r0, [pc, #48]	; (800793c <prvInitialiseTaskLists+0x6c>)
 800790a:	f7fe fa25 	bl	8005d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800790e:	480c      	ldr	r0, [pc, #48]	; (8007940 <prvInitialiseTaskLists+0x70>)
 8007910:	f7fe fa22 	bl	8005d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007914:	480b      	ldr	r0, [pc, #44]	; (8007944 <prvInitialiseTaskLists+0x74>)
 8007916:	f7fe fa1f 	bl	8005d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800791a:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <prvInitialiseTaskLists+0x78>)
 800791c:	4a05      	ldr	r2, [pc, #20]	; (8007934 <prvInitialiseTaskLists+0x64>)
 800791e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007920:	4b0a      	ldr	r3, [pc, #40]	; (800794c <prvInitialiseTaskLists+0x7c>)
 8007922:	4a05      	ldr	r2, [pc, #20]	; (8007938 <prvInitialiseTaskLists+0x68>)
 8007924:	601a      	str	r2, [r3, #0]
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20002400 	.word	0x20002400
 8007934:	20002860 	.word	0x20002860
 8007938:	20002874 	.word	0x20002874
 800793c:	20002890 	.word	0x20002890
 8007940:	200028a4 	.word	0x200028a4
 8007944:	200028bc 	.word	0x200028bc
 8007948:	20002888 	.word	0x20002888
 800794c:	2000288c 	.word	0x2000288c

08007950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007956:	e019      	b.n	800798c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007958:	f000 fed4 	bl	8008704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <prvCheckTasksWaitingTermination+0x50>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fa7f 	bl	8005e6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800796e:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <prvCheckTasksWaitingTermination+0x54>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3b01      	subs	r3, #1
 8007974:	4a0b      	ldr	r2, [pc, #44]	; (80079a4 <prvCheckTasksWaitingTermination+0x54>)
 8007976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <prvCheckTasksWaitingTermination+0x58>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3b01      	subs	r3, #1
 800797e:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <prvCheckTasksWaitingTermination+0x58>)
 8007980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007982:	f000 feef 	bl	8008764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f810 	bl	80079ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <prvCheckTasksWaitingTermination+0x58>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e1      	bne.n	8007958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	200028a4 	.word	0x200028a4
 80079a4:	200028d0 	.word	0x200028d0
 80079a8:	200028b8 	.word	0x200028b8

080079ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3354      	adds	r3, #84	; 0x54
 80079b8:	4618      	mov	r0, r3
 80079ba:	f002 f9ad 	bl	8009d18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 f887 	bl	8008ae0 <vPortFree>
				vPortFree( pxTCB );
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f884 	bl	8008ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079d8:	e018      	b.n	8007a0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d103      	bne.n	80079ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f87b 	bl	8008ae0 <vPortFree>
	}
 80079ea:	e00f      	b.n	8007a0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d00a      	beq.n	8007a0c <prvDeleteTCB+0x60>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <prvDeleteTCB+0x5e>
	}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <prvResetNextTaskUnblockTime+0x38>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d104      	bne.n	8007a2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a24:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <prvResetNextTaskUnblockTime+0x3c>)
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a2c:	e008      	b.n	8007a40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <prvResetNextTaskUnblockTime+0x38>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4a04      	ldr	r2, [pc, #16]	; (8007a50 <prvResetNextTaskUnblockTime+0x3c>)
 8007a3e:	6013      	str	r3, [r2, #0]
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20002888 	.word	0x20002888
 8007a50:	200028f0 	.word	0x200028f0

08007a54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a5a:	4b0b      	ldr	r3, [pc, #44]	; (8007a88 <xTaskGetSchedulerState+0x34>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a62:	2301      	movs	r3, #1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	e008      	b.n	8007a7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a68:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <xTaskGetSchedulerState+0x38>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d102      	bne.n	8007a76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a70:	2302      	movs	r3, #2
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	e001      	b.n	8007a7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a7a:	687b      	ldr	r3, [r7, #4]
	}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	200028dc 	.word	0x200028dc
 8007a8c:	200028f8 	.word	0x200028f8

08007a90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d051      	beq.n	8007b4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aaa:	4b2a      	ldr	r3, [pc, #168]	; (8007b54 <xTaskPriorityInherit+0xc4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d241      	bcs.n	8007b38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	db06      	blt.n	8007aca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <xTaskPriorityInherit+0xc4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6959      	ldr	r1, [r3, #20]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <xTaskPriorityInherit+0xc8>)
 8007adc:	4413      	add	r3, r2
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	d122      	bne.n	8007b28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe f9c0 	bl	8005e6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007aec:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <xTaskPriorityInherit+0xc4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <xTaskPriorityInherit+0xcc>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d903      	bls.n	8007b0a <xTaskPriorityInherit+0x7a>
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <xTaskPriorityInherit+0xcc>)
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <xTaskPriorityInherit+0xc8>)
 8007b18:	441a      	add	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7fe f946 	bl	8005db2 <vListInsertEnd>
 8007b26:	e004      	b.n	8007b32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <xTaskPriorityInherit+0xc4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b32:	2301      	movs	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	e008      	b.n	8007b4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <xTaskPriorityInherit+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d201      	bcs.n	8007b4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b46:	2301      	movs	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	200023fc 	.word	0x200023fc
 8007b58:	20002400 	.word	0x20002400
 8007b5c:	200028d8 	.word	0x200028d8

08007b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d056      	beq.n	8007c24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <xTaskPriorityDisinherit+0xd0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d00a      	beq.n	8007b96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60bb      	str	r3, [r7, #8]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d02c      	beq.n	8007c24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d128      	bne.n	8007c24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe f948 	bl	8005e6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <xTaskPriorityDisinherit+0xd4>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <xTaskPriorityDisinherit+0xa4>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4a0c      	ldr	r2, [pc, #48]	; (8007c34 <xTaskPriorityDisinherit+0xd4>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4a09      	ldr	r2, [pc, #36]	; (8007c38 <xTaskPriorityDisinherit+0xd8>)
 8007c12:	441a      	add	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe f8c9 	bl	8005db2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c20:	2301      	movs	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c24:	697b      	ldr	r3, [r7, #20]
	}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200023fc 	.word	0x200023fc
 8007c34:	200028d8 	.word	0x200028d8
 8007c38:	20002400 	.word	0x20002400

08007c3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d06a      	beq.n	8007d2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d902      	bls.n	8007c82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e002      	b.n	8007c88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d04b      	beq.n	8007d2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d146      	bne.n	8007d2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c9c:	4b25      	ldr	r3, [pc, #148]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d10a      	bne.n	8007cbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60bb      	str	r3, [r7, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	db04      	blt.n	8007cda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6959      	ldr	r1, [r3, #20]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4a13      	ldr	r2, [pc, #76]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007cea:	4413      	add	r3, r2
 8007cec:	4299      	cmp	r1, r3
 8007cee:	d11c      	bne.n	8007d2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe f8b9 	bl	8005e6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d903      	bls.n	8007d0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4a07      	ldr	r2, [pc, #28]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d1c:	441a      	add	r2, r3
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe f844 	bl	8005db2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d2a:	bf00      	nop
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	200023fc 	.word	0x200023fc
 8007d38:	20002400 	.word	0x20002400
 8007d3c:	200028d8 	.word	0x200028d8

08007d40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d44:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d52:	3201      	adds	r2, #1
 8007d54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d58:	681b      	ldr	r3, [r3, #0]
	}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	200023fc 	.word	0x200023fc

08007d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d72:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d78:	4b20      	ldr	r3, [pc, #128]	; (8007dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe f874 	bl	8005e6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d10a      	bne.n	8007da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d92:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4819      	ldr	r0, [pc, #100]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d9c:	f7fe f809 	bl	8005db2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007da0:	e026      	b.n	8007df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4413      	add	r3, r2
 8007da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d209      	bcs.n	8007dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dba:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7fe f817 	bl	8005dfa <vListInsert>
}
 8007dcc:	e010      	b.n	8007df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dce:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fe f80d 	bl	8005dfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d202      	bcs.n	8007df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dea:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6013      	str	r3, [r2, #0]
}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	200028d4 	.word	0x200028d4
 8007dfc:	200023fc 	.word	0x200023fc
 8007e00:	200028bc 	.word	0x200028bc
 8007e04:	2000288c 	.word	0x2000288c
 8007e08:	20002888 	.word	0x20002888
 8007e0c:	200028f0 	.word	0x200028f0

08007e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e1a:	f000 fb07 	bl	800842c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e1e:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <xTimerCreateTimerTask+0x80>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d021      	beq.n	8007e6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e2e:	1d3a      	adds	r2, r7, #4
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fd ff73 	bl	8005d24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	9202      	str	r2, [sp, #8]
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	2302      	movs	r3, #2
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	460a      	mov	r2, r1
 8007e50:	4910      	ldr	r1, [pc, #64]	; (8007e94 <xTimerCreateTimerTask+0x84>)
 8007e52:	4811      	ldr	r0, [pc, #68]	; (8007e98 <xTimerCreateTimerTask+0x88>)
 8007e54:	f7fe feb0 	bl	8006bb8 <xTaskCreateStatic>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <xTimerCreateTimerTask+0x8c>)
 8007e5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <xTimerCreateTimerTask+0x8c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e66:	2301      	movs	r3, #1
 8007e68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e86:	697b      	ldr	r3, [r7, #20]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	2000292c 	.word	0x2000292c
 8007e94:	0800c420 	.word	0x0800c420
 8007e98:	08007fd5 	.word	0x08007fd5
 8007e9c:	20002930 	.word	0x20002930

08007ea0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	; 0x28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xTimerGenericCommand+0x2e>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	623b      	str	r3, [r7, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ece:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <xTimerGenericCommand+0x98>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d02a      	beq.n	8007f2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b05      	cmp	r3, #5
 8007ee6:	dc18      	bgt.n	8007f1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ee8:	f7ff fdb4 	bl	8007a54 <xTaskGetSchedulerState>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d109      	bne.n	8007f06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <xTimerGenericCommand+0x98>)
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	f107 0110 	add.w	r1, r7, #16
 8007efa:	2300      	movs	r3, #0
 8007efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efe:	f7fe f94f 	bl	80061a0 <xQueueGenericSend>
 8007f02:	6278      	str	r0, [r7, #36]	; 0x24
 8007f04:	e012      	b.n	8007f2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <xTimerGenericCommand+0x98>)
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f107 0110 	add.w	r1, r7, #16
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2200      	movs	r2, #0
 8007f12:	f7fe f945 	bl	80061a0 <xQueueGenericSend>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
 8007f18:	e008      	b.n	8007f2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f1a:	4b07      	ldr	r3, [pc, #28]	; (8007f38 <xTimerGenericCommand+0x98>)
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f107 0110 	add.w	r1, r7, #16
 8007f22:	2300      	movs	r3, #0
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	f7fe fa39 	bl	800639c <xQueueGenericSendFromISR>
 8007f2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3728      	adds	r7, #40	; 0x28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	2000292c 	.word	0x2000292c

08007f3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f46:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <prvProcessExpiredTimer+0x94>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fd ff89 	bl	8005e6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d022      	beq.n	8007fae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	18d1      	adds	r1, r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	6978      	ldr	r0, [r7, #20]
 8007f76:	f000 f8d1 	bl	800811c <prvInsertTimerInActiveList>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01f      	beq.n	8007fc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f80:	2300      	movs	r3, #0
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	6978      	ldr	r0, [r7, #20]
 8007f8c:	f7ff ff88 	bl	8007ea0 <xTimerGenericCommand>
 8007f90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d113      	bne.n	8007fc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	6978      	ldr	r0, [r7, #20]
 8007fc6:	4798      	blx	r3
}
 8007fc8:	bf00      	nop
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20002924 	.word	0x20002924

08007fd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fdc:	f107 0308 	add.w	r3, r7, #8
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f857 	bl	8008094 <prvGetNextExpireTime>
 8007fe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4619      	mov	r1, r3
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f803 	bl	8007ff8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ff2:	f000 f8d5 	bl	80081a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ff6:	e7f1      	b.n	8007fdc <prvTimerTask+0x8>

08007ff8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008002:	f7ff f93b 	bl	800727c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f866 	bl	80080dc <prvSampleTimeNow>
 8008010:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d130      	bne.n	800807a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <prvProcessTimerOrBlockTask+0x3c>
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	429a      	cmp	r2, r3
 8008024:	d806      	bhi.n	8008034 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008026:	f7ff f937 	bl	8007298 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ff85 	bl	8007f3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008032:	e024      	b.n	800807e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d008      	beq.n	800804c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <prvProcessTimerOrBlockTask+0x90>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <prvProcessTimerOrBlockTask+0x50>
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <prvProcessTimerOrBlockTask+0x52>
 8008048:	2300      	movs	r3, #0
 800804a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <prvProcessTimerOrBlockTask+0x94>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4619      	mov	r1, r3
 800805a:	f7fe fd79 	bl	8006b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800805e:	f7ff f91b 	bl	8007298 <xTaskResumeAll>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <prvProcessTimerOrBlockTask+0x98>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
}
 8008078:	e001      	b.n	800807e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800807a:	f7ff f90d 	bl	8007298 <xTaskResumeAll>
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20002928 	.word	0x20002928
 800808c:	2000292c 	.word	0x2000292c
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <prvGetNextExpireTime+0x44>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <prvGetNextExpireTime+0x16>
 80080a6:	2201      	movs	r2, #1
 80080a8:	e000      	b.n	80080ac <prvGetNextExpireTime+0x18>
 80080aa:	2200      	movs	r2, #0
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080b8:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <prvGetNextExpireTime+0x44>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	e001      	b.n	80080c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080c8:	68fb      	ldr	r3, [r7, #12]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20002924 	.word	0x20002924

080080dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080e4:	f7ff f976 	bl	80073d4 <xTaskGetTickCount>
 80080e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <prvSampleTimeNow+0x3c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d205      	bcs.n	8008100 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080f4:	f000 f936 	bl	8008364 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	e002      	b.n	8008106 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008106:	4a04      	ldr	r2, [pc, #16]	; (8008118 <prvSampleTimeNow+0x3c>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800810c:	68fb      	ldr	r3, [r7, #12]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20002934 	.word	0x20002934

0800811c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	429a      	cmp	r2, r3
 8008140:	d812      	bhi.n	8008168 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	429a      	cmp	r2, r3
 800814e:	d302      	bcc.n	8008156 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008150:	2301      	movs	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e01b      	b.n	800818e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008156:	4b10      	ldr	r3, [pc, #64]	; (8008198 <prvInsertTimerInActiveList+0x7c>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3304      	adds	r3, #4
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f7fd fe4a 	bl	8005dfa <vListInsert>
 8008166:	e012      	b.n	800818e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d206      	bcs.n	800817e <prvInsertTimerInActiveList+0x62>
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e007      	b.n	800818e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <prvInsertTimerInActiveList+0x80>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3304      	adds	r3, #4
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f7fd fe36 	bl	8005dfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800818e:	697b      	ldr	r3, [r7, #20]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	20002928 	.word	0x20002928
 800819c:	20002924 	.word	0x20002924

080081a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08e      	sub	sp, #56	; 0x38
 80081a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081a6:	e0ca      	b.n	800833e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da18      	bge.n	80081e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081ae:	1d3b      	adds	r3, r7, #4
 80081b0:	3304      	adds	r3, #4
 80081b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	61fb      	str	r3, [r7, #28]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d6:	6850      	ldr	r0, [r2, #4]
 80081d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081da:	6892      	ldr	r2, [r2, #8]
 80081dc:	4611      	mov	r1, r2
 80081de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f2c0 80aa 	blt.w	800833c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	3304      	adds	r3, #4
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fd fe37 	bl	8005e6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081fe:	463b      	mov	r3, r7
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff6b 	bl	80080dc <prvSampleTimeNow>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b09      	cmp	r3, #9
 800820c:	f200 8097 	bhi.w	800833e <prvProcessReceivedCommands+0x19e>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <prvProcessReceivedCommands+0x78>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008241 	.word	0x08008241
 800821c:	08008241 	.word	0x08008241
 8008220:	08008241 	.word	0x08008241
 8008224:	080082b5 	.word	0x080082b5
 8008228:	080082c9 	.word	0x080082c9
 800822c:	08008313 	.word	0x08008313
 8008230:	08008241 	.word	0x08008241
 8008234:	08008241 	.word	0x08008241
 8008238:	080082b5 	.word	0x080082b5
 800823c:	080082c9 	.word	0x080082c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008246:	f043 0301 	orr.w	r3, r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	18d1      	adds	r1, r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008260:	f7ff ff5c 	bl	800811c <prvInsertTimerInActiveList>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d069      	beq.n	800833e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008270:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d05e      	beq.n	800833e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	441a      	add	r2, r3
 8008288:	2300      	movs	r3, #0
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	2300      	movs	r3, #0
 800828e:	2100      	movs	r1, #0
 8008290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008292:	f7ff fe05 	bl	8007ea0 <xTimerGenericCommand>
 8008296:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d14f      	bne.n	800833e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	61bb      	str	r3, [r7, #24]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ba:	f023 0301 	bic.w	r3, r3, #1
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082c6:	e03a      	b.n	800833e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	617b      	str	r3, [r7, #20]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	18d1      	adds	r1, r2, r3
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830c:	f7ff ff06 	bl	800811c <prvInsertTimerInActiveList>
					break;
 8008310:	e015      	b.n	800833e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008322:	f000 fbdd 	bl	8008ae0 <vPortFree>
 8008326:	e00a      	b.n	800833e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800833a:	e000      	b.n	800833e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800833c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800833e:	4b08      	ldr	r3, [pc, #32]	; (8008360 <prvProcessReceivedCommands+0x1c0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	1d39      	adds	r1, r7, #4
 8008344:	2200      	movs	r2, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe f8c4 	bl	80064d4 <xQueueReceive>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	f47f af2a 	bne.w	80081a8 <prvProcessReceivedCommands+0x8>
	}
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	3730      	adds	r7, #48	; 0x30
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2000292c 	.word	0x2000292c

08008364 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800836a:	e048      	b.n	80083fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800836c:	4b2d      	ldr	r3, [pc, #180]	; (8008424 <prvSwitchTimerLists+0xc0>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008376:	4b2b      	ldr	r3, [pc, #172]	; (8008424 <prvSwitchTimerLists+0xc0>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3304      	adds	r3, #4
 8008384:	4618      	mov	r0, r3
 8008386:	f7fd fd71 	bl	8005e6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d02e      	beq.n	80083fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4413      	add	r3, r2
 80083a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d90e      	bls.n	80083d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083be:	4b19      	ldr	r3, [pc, #100]	; (8008424 <prvSwitchTimerLists+0xc0>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7fd fd16 	bl	8005dfa <vListInsert>
 80083ce:	e016      	b.n	80083fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083d0:	2300      	movs	r3, #0
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	2300      	movs	r3, #0
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7ff fd60 	bl	8007ea0 <xTimerGenericCommand>
 80083e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	603b      	str	r3, [r7, #0]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <prvSwitchTimerLists+0xc0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1b1      	bne.n	800836c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008408:	4b06      	ldr	r3, [pc, #24]	; (8008424 <prvSwitchTimerLists+0xc0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800840e:	4b06      	ldr	r3, [pc, #24]	; (8008428 <prvSwitchTimerLists+0xc4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a04      	ldr	r2, [pc, #16]	; (8008424 <prvSwitchTimerLists+0xc0>)
 8008414:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008416:	4a04      	ldr	r2, [pc, #16]	; (8008428 <prvSwitchTimerLists+0xc4>)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	6013      	str	r3, [r2, #0]
}
 800841c:	bf00      	nop
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20002924 	.word	0x20002924
 8008428:	20002928 	.word	0x20002928

0800842c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008432:	f000 f967 	bl	8008704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008436:	4b15      	ldr	r3, [pc, #84]	; (800848c <prvCheckForValidListAndQueue+0x60>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d120      	bne.n	8008480 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800843e:	4814      	ldr	r0, [pc, #80]	; (8008490 <prvCheckForValidListAndQueue+0x64>)
 8008440:	f7fd fc8a 	bl	8005d58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008444:	4813      	ldr	r0, [pc, #76]	; (8008494 <prvCheckForValidListAndQueue+0x68>)
 8008446:	f7fd fc87 	bl	8005d58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800844a:	4b13      	ldr	r3, [pc, #76]	; (8008498 <prvCheckForValidListAndQueue+0x6c>)
 800844c:	4a10      	ldr	r2, [pc, #64]	; (8008490 <prvCheckForValidListAndQueue+0x64>)
 800844e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008450:	4b12      	ldr	r3, [pc, #72]	; (800849c <prvCheckForValidListAndQueue+0x70>)
 8008452:	4a10      	ldr	r2, [pc, #64]	; (8008494 <prvCheckForValidListAndQueue+0x68>)
 8008454:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008456:	2300      	movs	r3, #0
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <prvCheckForValidListAndQueue+0x74>)
 800845c:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <prvCheckForValidListAndQueue+0x78>)
 800845e:	2110      	movs	r1, #16
 8008460:	200a      	movs	r0, #10
 8008462:	f7fd fd95 	bl	8005f90 <xQueueGenericCreateStatic>
 8008466:	4603      	mov	r3, r0
 8008468:	4a08      	ldr	r2, [pc, #32]	; (800848c <prvCheckForValidListAndQueue+0x60>)
 800846a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <prvCheckForValidListAndQueue+0x60>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <prvCheckForValidListAndQueue+0x60>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	490b      	ldr	r1, [pc, #44]	; (80084a8 <prvCheckForValidListAndQueue+0x7c>)
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fb3e 	bl	8006afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008480:	f000 f970 	bl	8008764 <vPortExitCritical>
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	2000292c 	.word	0x2000292c
 8008490:	200028fc 	.word	0x200028fc
 8008494:	20002910 	.word	0x20002910
 8008498:	20002924 	.word	0x20002924
 800849c:	20002928 	.word	0x20002928
 80084a0:	200029d8 	.word	0x200029d8
 80084a4:	20002938 	.word	0x20002938
 80084a8:	0800c428 	.word	0x0800c428

080084ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3b04      	subs	r3, #4
 80084bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084dc:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <pxPortInitialiseStack+0x64>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b14      	subs	r3, #20
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3b04      	subs	r3, #4
 80084f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f06f 0202 	mvn.w	r2, #2
 80084fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3b20      	subs	r3, #32
 8008500:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008502:	68fb      	ldr	r3, [r7, #12]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	08008515 	.word	0x08008515

08008514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <prvTaskExitError+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d00a      	beq.n	800853e <prvTaskExitError+0x2a>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	60fb      	str	r3, [r7, #12]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <prvTaskExitError+0x28>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60bb      	str	r3, [r7, #8]
}
 8008550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008552:	bf00      	nop
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0fc      	beq.n	8008554 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	20000010 	.word	0x20000010
 800856c:	00000000 	.word	0x00000000

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	4770      	bx	lr
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst2>:
 8008590:	200023fc 	.word	0x200023fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008598:	4808      	ldr	r0, [pc, #32]	; (80085bc <prvPortStartFirstTask+0x24>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8814 	msr	CONTROL, r0
 80085aa:	b662      	cpsie	i
 80085ac:	b661      	cpsie	f
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	df00      	svc	0
 80085b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ba:	bf00      	nop
 80085bc:	e000ed08 	.word	0xe000ed08

080085c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085c6:	4b46      	ldr	r3, [pc, #280]	; (80086e0 <xPortStartScheduler+0x120>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a46      	ldr	r2, [pc, #280]	; (80086e4 <xPortStartScheduler+0x124>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10a      	bne.n	80085e6 <xPortStartScheduler+0x26>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085e6:	4b3e      	ldr	r3, [pc, #248]	; (80086e0 <xPortStartScheduler+0x120>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3f      	ldr	r2, [pc, #252]	; (80086e8 <xPortStartScheduler+0x128>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10a      	bne.n	8008606 <xPortStartScheduler+0x46>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008606:	4b39      	ldr	r3, [pc, #228]	; (80086ec <xPortStartScheduler+0x12c>)
 8008608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4b31      	ldr	r3, [pc, #196]	; (80086f0 <xPortStartScheduler+0x130>)
 800862c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800862e:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <xPortStartScheduler+0x134>)
 8008630:	2207      	movs	r2, #7
 8008632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008634:	e009      	b.n	800864a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008636:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <xPortStartScheduler+0x134>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3b01      	subs	r3, #1
 800863c:	4a2d      	ldr	r2, [pc, #180]	; (80086f4 <xPortStartScheduler+0x134>)
 800863e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d0ef      	beq.n	8008636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008656:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <xPortStartScheduler+0x134>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1c3 0307 	rsb	r3, r3, #7
 800865e:	2b04      	cmp	r3, #4
 8008660:	d00a      	beq.n	8008678 <xPortStartScheduler+0xb8>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <xPortStartScheduler+0x134>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <xPortStartScheduler+0x134>)
 8008680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008682:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <xPortStartScheduler+0x134>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800868a:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <xPortStartScheduler+0x134>)
 800868c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <xPortStartScheduler+0x138>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <xPortStartScheduler+0x138>)
 800869c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <xPortStartScheduler+0x138>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <xPortStartScheduler+0x138>)
 80086a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086ae:	f000 f8dd 	bl	800886c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <xPortStartScheduler+0x13c>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086b8:	f000 f8fc 	bl	80088b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <xPortStartScheduler+0x140>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <xPortStartScheduler+0x140>)
 80086c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086c8:	f7ff ff66 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086cc:	f7fe ff4c 	bl	8007568 <vTaskSwitchContext>
	prvTaskExitError();
 80086d0:	f7ff ff20 	bl	8008514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	e000ed00 	.word	0xe000ed00
 80086e4:	410fc271 	.word	0x410fc271
 80086e8:	410fc270 	.word	0x410fc270
 80086ec:	e000e400 	.word	0xe000e400
 80086f0:	20002a28 	.word	0x20002a28
 80086f4:	20002a2c 	.word	0x20002a2c
 80086f8:	e000ed20 	.word	0xe000ed20
 80086fc:	20000010 	.word	0x20000010
 8008700:	e000ef34 	.word	0xe000ef34

08008704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800871e:	4b0f      	ldr	r3, [pc, #60]	; (800875c <vPortEnterCritical+0x58>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <vPortEnterCritical+0x58>)
 8008726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <vPortEnterCritical+0x58>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d10f      	bne.n	8008750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <vPortEnterCritical+0x5c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <vPortEnterCritical+0x4c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	603b      	str	r3, [r7, #0]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vPortEnterCritical+0x4a>
	}
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	20000010 	.word	0x20000010
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800876a:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <vPortExitCritical+0x50>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <vPortExitCritical+0x24>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <vPortExitCritical+0x50>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3b01      	subs	r3, #1
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <vPortExitCritical+0x50>)
 8008790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008792:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <vPortExitCritical+0x50>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <vPortExitCritical+0x42>
 800879a:	2300      	movs	r3, #0
 800879c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f383 8811 	msr	BASEPRI, r3
}
 80087a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000010 	.word	0x20000010
	...

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	; (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087e4:	f380 8811 	msr	BASEPRI, r0
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f7fe feba 	bl	8007568 <vTaskSwitchContext>
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f380 8811 	msr	BASEPRI, r0
 80087fc:	bc09      	pop	{r0, r3}
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	6808      	ldr	r0, [r1, #0]
 8008802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008806:	f01e 0f10 	tst.w	lr, #16
 800880a:	bf08      	it	eq
 800880c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008810:	f380 8809 	msr	PSP, r0
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w

08008820 <pxCurrentTCBConst>:
 8008820:	200023fc 	.word	0x200023fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008842:	f7fe fdd7 	bl	80073f4 <xTaskIncrementTick>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <xPortSysTickHandler+0x40>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008876:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <vPortSetupTimerInterrupt+0x38>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <vPortSetupTimerInterrupt+0x3c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <vPortSetupTimerInterrupt+0x40>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	099b      	lsrs	r3, r3, #6
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <vPortSetupTimerInterrupt+0x44>)
 800888a:	3b01      	subs	r3, #1
 800888c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800888e:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008890:	2207      	movs	r2, #7
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e010 	.word	0xe000e010
 80088a4:	e000e018 	.word	0xe000e018
 80088a8:	20000000 	.word	0x20000000
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	e000e014 	.word	0xe000e014

080088b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088c4 <vPortEnableVFP+0x10>
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088c2:	bf00      	nop
 80088c4:	e000ed88 	.word	0xe000ed88

080088c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d914      	bls.n	8008904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088da:	4a17      	ldr	r2, [pc, #92]	; (8008938 <vPortValidateInterruptPriority+0x70>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e4:	4b15      	ldr	r3, [pc, #84]	; (800893c <vPortValidateInterruptPriority+0x74>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20a      	bcs.n	8008904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <vPortValidateInterruptPriority+0x78>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800890c:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <vPortValidateInterruptPriority+0x7c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d90a      	bls.n	800892a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	603b      	str	r3, [r7, #0]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <vPortValidateInterruptPriority+0x60>
	}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	e000e3f0 	.word	0xe000e3f0
 800893c:	20002a28 	.word	0x20002a28
 8008940:	e000ed0c 	.word	0xe000ed0c
 8008944:	20002a2c 	.word	0x20002a2c

08008948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	; 0x28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008954:	f7fe fc92 	bl	800727c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008958:	4b5b      	ldr	r3, [pc, #364]	; (8008ac8 <pvPortMalloc+0x180>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008960:	f000 f920 	bl	8008ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008964:	4b59      	ldr	r3, [pc, #356]	; (8008acc <pvPortMalloc+0x184>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	f040 8093 	bne.w	8008a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01d      	beq.n	80089b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008978:	2208      	movs	r2, #8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b00      	cmp	r3, #0
 8008988:	d014      	beq.n	80089b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f023 0307 	bic.w	r3, r3, #7
 8008990:	3308      	adds	r3, #8
 8008992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <pvPortMalloc+0x6c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	617b      	str	r3, [r7, #20]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d06e      	beq.n	8008a98 <pvPortMalloc+0x150>
 80089ba:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <pvPortMalloc+0x188>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d869      	bhi.n	8008a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089c4:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <pvPortMalloc+0x18c>)
 80089c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <pvPortMalloc+0x18c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ce:	e004      	b.n	80089da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d903      	bls.n	80089ec <pvPortMalloc+0xa4>
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f1      	bne.n	80089d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ec:	4b36      	ldr	r3, [pc, #216]	; (8008ac8 <pvPortMalloc+0x180>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d050      	beq.n	8008a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2208      	movs	r2, #8
 80089fc:	4413      	add	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	2308      	movs	r3, #8
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d91f      	bls.n	8008a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <pvPortMalloc+0xf8>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	613b      	str	r3, [r7, #16]
}
 8008a3c:	bf00      	nop
 8008a3e:	e7fe      	b.n	8008a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a52:	69b8      	ldr	r0, [r7, #24]
 8008a54:	f000 f90a 	bl	8008c6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a58:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <pvPortMalloc+0x190>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d203      	bcs.n	8008a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <pvPortMalloc+0x190>)
 8008a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x184>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <pvPortMalloc+0x194>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4a11      	ldr	r2, [pc, #68]	; (8008adc <pvPortMalloc+0x194>)
 8008a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a98:	f7fe fbfe 	bl	8007298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <pvPortMalloc+0x174>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <pvPortMalloc+0x172>
	return pvReturn;
 8008abc:	69fb      	ldr	r3, [r7, #28]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3728      	adds	r7, #40	; 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200162b8 	.word	0x200162b8
 8008acc:	200162cc 	.word	0x200162cc
 8008ad0:	200162bc 	.word	0x200162bc
 8008ad4:	200162b0 	.word	0x200162b0
 8008ad8:	200162c0 	.word	0x200162c0
 8008adc:	200162c4 	.word	0x200162c4

08008ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d04d      	beq.n	8008b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af2:	2308      	movs	r3, #8
 8008af4:	425b      	negs	r3, r3
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4413      	add	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <vPortFree+0xb8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <vPortFree+0x44>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <vPortFree+0x62>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	60bb      	str	r3, [r7, #8]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <vPortFree+0xb8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01e      	beq.n	8008b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11a      	bne.n	8008b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <vPortFree+0xb8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b68:	f7fe fb88 	bl	800727c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <vPortFree+0xbc>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <vPortFree+0xbc>)
 8008b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f000 f876 	bl	8008c6c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <vPortFree+0xc0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a06      	ldr	r2, [pc, #24]	; (8008ba0 <vPortFree+0xc0>)
 8008b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b8a:	f7fe fb85 	bl	8007298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200162cc 	.word	0x200162cc
 8008b9c:	200162bc 	.word	0x200162bc
 8008ba0:	200162c8 	.word	0x200162c8

08008ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008baa:	4b29      	ldr	r3, [pc, #164]	; (8008c50 <prvHeapInit+0xac>)
 8008bac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bae:	4b29      	ldr	r3, [pc, #164]	; (8008c54 <prvHeapInit+0xb0>)
 8008bb0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00c      	beq.n	8008bd6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3307      	adds	r3, #7
 8008bc0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f023 0307 	bic.w	r3, r3, #7
 8008bc8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	4a20      	ldr	r2, [pc, #128]	; (8008c54 <prvHeapInit+0xb0>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bda:	4a1f      	ldr	r2, [pc, #124]	; (8008c58 <prvHeapInit+0xb4>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008be0:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <prvHeapInit+0xb4>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bee:	2208      	movs	r2, #8
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f023 0307 	bic.w	r3, r3, #7
 8008bfc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a16      	ldr	r2, [pc, #88]	; (8008c5c <prvHeapInit+0xb8>)
 8008c02:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c04:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <prvHeapInit+0xb8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c0c:	4b13      	ldr	r3, [pc, #76]	; (8008c5c <prvHeapInit+0xb8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	1ad2      	subs	r2, r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c22:	4b0e      	ldr	r3, [pc, #56]	; (8008c5c <prvHeapInit+0xb8>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4a0c      	ldr	r2, [pc, #48]	; (8008c60 <prvHeapInit+0xbc>)
 8008c30:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4a0b      	ldr	r2, [pc, #44]	; (8008c64 <prvHeapInit+0xc0>)
 8008c38:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <prvHeapInit+0xc4>)
 8008c3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c40:	601a      	str	r2, [r3, #0]
}
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	00013880 	.word	0x00013880
 8008c54:	20002a30 	.word	0x20002a30
 8008c58:	200162b0 	.word	0x200162b0
 8008c5c:	200162b8 	.word	0x200162b8
 8008c60:	200162c0 	.word	0x200162c0
 8008c64:	200162bc 	.word	0x200162bc
 8008c68:	200162cc 	.word	0x200162cc

08008c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c74:	4b28      	ldr	r3, [pc, #160]	; (8008d18 <prvInsertBlockIntoFreeList+0xac>)
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e002      	b.n	8008c80 <prvInsertBlockIntoFreeList+0x14>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d8f7      	bhi.n	8008c7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4413      	add	r3, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d108      	bne.n	8008cae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	441a      	add	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d118      	bne.n	8008cf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <prvInsertBlockIntoFreeList+0xb0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d00d      	beq.n	8008cea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	441a      	add	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e008      	b.n	8008cfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cea:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <prvInsertBlockIntoFreeList+0xb0>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	e003      	b.n	8008cfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d002      	beq.n	8008d0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	200162b0 	.word	0x200162b0
 8008d1c:	200162b8 	.word	0x200162b8

08008d20 <__errno>:
 8008d20:	4b01      	ldr	r3, [pc, #4]	; (8008d28 <__errno+0x8>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	20000014 	.word	0x20000014

08008d2c <__sflush_r>:
 8008d2c:	898a      	ldrh	r2, [r1, #12]
 8008d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	4605      	mov	r5, r0
 8008d34:	0710      	lsls	r0, r2, #28
 8008d36:	460c      	mov	r4, r1
 8008d38:	d458      	bmi.n	8008dec <__sflush_r+0xc0>
 8008d3a:	684b      	ldr	r3, [r1, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dc05      	bgt.n	8008d4c <__sflush_r+0x20>
 8008d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dc02      	bgt.n	8008d4c <__sflush_r+0x20>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	d0f9      	beq.n	8008d46 <__sflush_r+0x1a>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d58:	682f      	ldr	r7, [r5, #0]
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	d032      	beq.n	8008dc4 <__sflush_r+0x98>
 8008d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	075a      	lsls	r2, r3, #29
 8008d64:	d505      	bpl.n	8008d72 <__sflush_r+0x46>
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	1ac0      	subs	r0, r0, r3
 8008d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d6c:	b10b      	cbz	r3, 8008d72 <__sflush_r+0x46>
 8008d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d70:	1ac0      	subs	r0, r0, r3
 8008d72:	2300      	movs	r3, #0
 8008d74:	4602      	mov	r2, r0
 8008d76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d78:	6a21      	ldr	r1, [r4, #32]
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b0      	blx	r6
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	d106      	bne.n	8008d92 <__sflush_r+0x66>
 8008d84:	6829      	ldr	r1, [r5, #0]
 8008d86:	291d      	cmp	r1, #29
 8008d88:	d82c      	bhi.n	8008de4 <__sflush_r+0xb8>
 8008d8a:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <__sflush_r+0x108>)
 8008d8c:	40ca      	lsrs	r2, r1
 8008d8e:	07d6      	lsls	r6, r2, #31
 8008d90:	d528      	bpl.n	8008de4 <__sflush_r+0xb8>
 8008d92:	2200      	movs	r2, #0
 8008d94:	6062      	str	r2, [r4, #4]
 8008d96:	04d9      	lsls	r1, r3, #19
 8008d98:	6922      	ldr	r2, [r4, #16]
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	d504      	bpl.n	8008da8 <__sflush_r+0x7c>
 8008d9e:	1c42      	adds	r2, r0, #1
 8008da0:	d101      	bne.n	8008da6 <__sflush_r+0x7a>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	b903      	cbnz	r3, 8008da8 <__sflush_r+0x7c>
 8008da6:	6560      	str	r0, [r4, #84]	; 0x54
 8008da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008daa:	602f      	str	r7, [r5, #0]
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d0ca      	beq.n	8008d46 <__sflush_r+0x1a>
 8008db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d002      	beq.n	8008dbe <__sflush_r+0x92>
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f9c7 	bl	800914c <_free_r>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8008dc2:	e7c1      	b.n	8008d48 <__sflush_r+0x1c>
 8008dc4:	6a21      	ldr	r1, [r4, #32]
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b0      	blx	r6
 8008dcc:	1c41      	adds	r1, r0, #1
 8008dce:	d1c7      	bne.n	8008d60 <__sflush_r+0x34>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0c4      	beq.n	8008d60 <__sflush_r+0x34>
 8008dd6:	2b1d      	cmp	r3, #29
 8008dd8:	d001      	beq.n	8008dde <__sflush_r+0xb2>
 8008dda:	2b16      	cmp	r3, #22
 8008ddc:	d101      	bne.n	8008de2 <__sflush_r+0xb6>
 8008dde:	602f      	str	r7, [r5, #0]
 8008de0:	e7b1      	b.n	8008d46 <__sflush_r+0x1a>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	e7ad      	b.n	8008d48 <__sflush_r+0x1c>
 8008dec:	690f      	ldr	r7, [r1, #16]
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	d0a9      	beq.n	8008d46 <__sflush_r+0x1a>
 8008df2:	0793      	lsls	r3, r2, #30
 8008df4:	680e      	ldr	r6, [r1, #0]
 8008df6:	bf08      	it	eq
 8008df8:	694b      	ldreq	r3, [r1, #20]
 8008dfa:	600f      	str	r7, [r1, #0]
 8008dfc:	bf18      	it	ne
 8008dfe:	2300      	movne	r3, #0
 8008e00:	eba6 0807 	sub.w	r8, r6, r7
 8008e04:	608b      	str	r3, [r1, #8]
 8008e06:	f1b8 0f00 	cmp.w	r8, #0
 8008e0a:	dd9c      	ble.n	8008d46 <__sflush_r+0x1a>
 8008e0c:	6a21      	ldr	r1, [r4, #32]
 8008e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e10:	4643      	mov	r3, r8
 8008e12:	463a      	mov	r2, r7
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b0      	blx	r6
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	dc06      	bgt.n	8008e2a <__sflush_r+0xfe>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e78e      	b.n	8008d48 <__sflush_r+0x1c>
 8008e2a:	4407      	add	r7, r0
 8008e2c:	eba8 0800 	sub.w	r8, r8, r0
 8008e30:	e7e9      	b.n	8008e06 <__sflush_r+0xda>
 8008e32:	bf00      	nop
 8008e34:	20400001 	.word	0x20400001

08008e38 <_fflush_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	690b      	ldr	r3, [r1, #16]
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	b913      	cbnz	r3, 8008e48 <_fflush_r+0x10>
 8008e42:	2500      	movs	r5, #0
 8008e44:	4628      	mov	r0, r5
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	b118      	cbz	r0, 8008e52 <_fflush_r+0x1a>
 8008e4a:	6983      	ldr	r3, [r0, #24]
 8008e4c:	b90b      	cbnz	r3, 8008e52 <_fflush_r+0x1a>
 8008e4e:	f000 f899 	bl	8008f84 <__sinit>
 8008e52:	4b14      	ldr	r3, [pc, #80]	; (8008ea4 <_fflush_r+0x6c>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d11b      	bne.n	8008e90 <_fflush_r+0x58>
 8008e58:	686c      	ldr	r4, [r5, #4]
 8008e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0ef      	beq.n	8008e42 <_fflush_r+0xa>
 8008e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e64:	07d0      	lsls	r0, r2, #31
 8008e66:	d404      	bmi.n	8008e72 <_fflush_r+0x3a>
 8008e68:	0599      	lsls	r1, r3, #22
 8008e6a:	d402      	bmi.n	8008e72 <_fflush_r+0x3a>
 8008e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6e:	f000 f94c 	bl	800910a <__retarget_lock_acquire_recursive>
 8008e72:	4628      	mov	r0, r5
 8008e74:	4621      	mov	r1, r4
 8008e76:	f7ff ff59 	bl	8008d2c <__sflush_r>
 8008e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e7c:	07da      	lsls	r2, r3, #31
 8008e7e:	4605      	mov	r5, r0
 8008e80:	d4e0      	bmi.n	8008e44 <_fflush_r+0xc>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	059b      	lsls	r3, r3, #22
 8008e86:	d4dd      	bmi.n	8008e44 <_fflush_r+0xc>
 8008e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e8a:	f000 f93f 	bl	800910c <__retarget_lock_release_recursive>
 8008e8e:	e7d9      	b.n	8008e44 <_fflush_r+0xc>
 8008e90:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <_fflush_r+0x70>)
 8008e92:	429c      	cmp	r4, r3
 8008e94:	d101      	bne.n	8008e9a <_fflush_r+0x62>
 8008e96:	68ac      	ldr	r4, [r5, #8]
 8008e98:	e7df      	b.n	8008e5a <_fflush_r+0x22>
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <_fflush_r+0x74>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	bf08      	it	eq
 8008ea0:	68ec      	ldreq	r4, [r5, #12]
 8008ea2:	e7da      	b.n	8008e5a <_fflush_r+0x22>
 8008ea4:	0800c574 	.word	0x0800c574
 8008ea8:	0800c594 	.word	0x0800c594
 8008eac:	0800c554 	.word	0x0800c554

08008eb0 <fflush>:
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	b920      	cbnz	r0, 8008ebe <fflush+0xe>
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <fflush+0x18>)
 8008eb6:	4905      	ldr	r1, [pc, #20]	; (8008ecc <fflush+0x1c>)
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f000 b8e1 	b.w	8009080 <_fwalk_reent>
 8008ebe:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <fflush+0x20>)
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f7ff bfb9 	b.w	8008e38 <_fflush_r>
 8008ec6:	bf00      	nop
 8008ec8:	0800c5b4 	.word	0x0800c5b4
 8008ecc:	08008e39 	.word	0x08008e39
 8008ed0:	20000014 	.word	0x20000014

08008ed4 <std>:
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	b510      	push	{r4, lr}
 8008ed8:	4604      	mov	r4, r0
 8008eda:	e9c0 3300 	strd	r3, r3, [r0]
 8008ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ee2:	6083      	str	r3, [r0, #8]
 8008ee4:	8181      	strh	r1, [r0, #12]
 8008ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ee8:	81c2      	strh	r2, [r0, #14]
 8008eea:	6183      	str	r3, [r0, #24]
 8008eec:	4619      	mov	r1, r3
 8008eee:	2208      	movs	r2, #8
 8008ef0:	305c      	adds	r0, #92	; 0x5c
 8008ef2:	f000 f923 	bl	800913c <memset>
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <std+0x38>)
 8008ef8:	6263      	str	r3, [r4, #36]	; 0x24
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <std+0x3c>)
 8008efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008efe:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <std+0x40>)
 8008f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <std+0x44>)
 8008f04:	6224      	str	r4, [r4, #32]
 8008f06:	6323      	str	r3, [r4, #48]	; 0x30
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	08009e31 	.word	0x08009e31
 8008f10:	08009e53 	.word	0x08009e53
 8008f14:	08009e8b 	.word	0x08009e8b
 8008f18:	08009eaf 	.word	0x08009eaf

08008f1c <_cleanup_r>:
 8008f1c:	4901      	ldr	r1, [pc, #4]	; (8008f24 <_cleanup_r+0x8>)
 8008f1e:	f000 b8af 	b.w	8009080 <_fwalk_reent>
 8008f22:	bf00      	nop
 8008f24:	08008e39 	.word	0x08008e39

08008f28 <__sfmoreglue>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	2268      	movs	r2, #104	; 0x68
 8008f2c:	1e4d      	subs	r5, r1, #1
 8008f2e:	4355      	muls	r5, r2
 8008f30:	460e      	mov	r6, r1
 8008f32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f36:	f000 f975 	bl	8009224 <_malloc_r>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	b140      	cbz	r0, 8008f50 <__sfmoreglue+0x28>
 8008f3e:	2100      	movs	r1, #0
 8008f40:	e9c0 1600 	strd	r1, r6, [r0]
 8008f44:	300c      	adds	r0, #12
 8008f46:	60a0      	str	r0, [r4, #8]
 8008f48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f4c:	f000 f8f6 	bl	800913c <memset>
 8008f50:	4620      	mov	r0, r4
 8008f52:	bd70      	pop	{r4, r5, r6, pc}

08008f54 <__sfp_lock_acquire>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__sfp_lock_acquire+0x8>)
 8008f56:	f000 b8d8 	b.w	800910a <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200162d1 	.word	0x200162d1

08008f60 <__sfp_lock_release>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__sfp_lock_release+0x8>)
 8008f62:	f000 b8d3 	b.w	800910c <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	200162d1 	.word	0x200162d1

08008f6c <__sinit_lock_acquire>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__sinit_lock_acquire+0x8>)
 8008f6e:	f000 b8cc 	b.w	800910a <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	200162d2 	.word	0x200162d2

08008f78 <__sinit_lock_release>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__sinit_lock_release+0x8>)
 8008f7a:	f000 b8c7 	b.w	800910c <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	200162d2 	.word	0x200162d2

08008f84 <__sinit>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	4604      	mov	r4, r0
 8008f88:	f7ff fff0 	bl	8008f6c <__sinit_lock_acquire>
 8008f8c:	69a3      	ldr	r3, [r4, #24]
 8008f8e:	b11b      	cbz	r3, 8008f98 <__sinit+0x14>
 8008f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f94:	f7ff bff0 	b.w	8008f78 <__sinit_lock_release>
 8008f98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f9c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <__sinit+0x68>)
 8008fa0:	4a13      	ldr	r2, [pc, #76]	; (8008ff0 <__sinit+0x6c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	bf04      	itt	eq
 8008faa:	2301      	moveq	r3, #1
 8008fac:	61a3      	streq	r3, [r4, #24]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f820 	bl	8008ff4 <__sfp>
 8008fb4:	6060      	str	r0, [r4, #4]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f81c 	bl	8008ff4 <__sfp>
 8008fbc:	60a0      	str	r0, [r4, #8]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 f818 	bl	8008ff4 <__sfp>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	60e0      	str	r0, [r4, #12]
 8008fc8:	2104      	movs	r1, #4
 8008fca:	6860      	ldr	r0, [r4, #4]
 8008fcc:	f7ff ff82 	bl	8008ed4 <std>
 8008fd0:	68a0      	ldr	r0, [r4, #8]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	2109      	movs	r1, #9
 8008fd6:	f7ff ff7d 	bl	8008ed4 <std>
 8008fda:	68e0      	ldr	r0, [r4, #12]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	2112      	movs	r1, #18
 8008fe0:	f7ff ff78 	bl	8008ed4 <std>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	61a3      	str	r3, [r4, #24]
 8008fe8:	e7d2      	b.n	8008f90 <__sinit+0xc>
 8008fea:	bf00      	nop
 8008fec:	0800c5b4 	.word	0x0800c5b4
 8008ff0:	08008f1d 	.word	0x08008f1d

08008ff4 <__sfp>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	f7ff ffac 	bl	8008f54 <__sfp_lock_acquire>
 8008ffc:	4b1e      	ldr	r3, [pc, #120]	; (8009078 <__sfp+0x84>)
 8008ffe:	681e      	ldr	r6, [r3, #0]
 8009000:	69b3      	ldr	r3, [r6, #24]
 8009002:	b913      	cbnz	r3, 800900a <__sfp+0x16>
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff ffbd 	bl	8008f84 <__sinit>
 800900a:	3648      	adds	r6, #72	; 0x48
 800900c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009010:	3b01      	subs	r3, #1
 8009012:	d503      	bpl.n	800901c <__sfp+0x28>
 8009014:	6833      	ldr	r3, [r6, #0]
 8009016:	b30b      	cbz	r3, 800905c <__sfp+0x68>
 8009018:	6836      	ldr	r6, [r6, #0]
 800901a:	e7f7      	b.n	800900c <__sfp+0x18>
 800901c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009020:	b9d5      	cbnz	r5, 8009058 <__sfp+0x64>
 8009022:	4b16      	ldr	r3, [pc, #88]	; (800907c <__sfp+0x88>)
 8009024:	60e3      	str	r3, [r4, #12]
 8009026:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800902a:	6665      	str	r5, [r4, #100]	; 0x64
 800902c:	f000 f86c 	bl	8009108 <__retarget_lock_init_recursive>
 8009030:	f7ff ff96 	bl	8008f60 <__sfp_lock_release>
 8009034:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009038:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800903c:	6025      	str	r5, [r4, #0]
 800903e:	61a5      	str	r5, [r4, #24]
 8009040:	2208      	movs	r2, #8
 8009042:	4629      	mov	r1, r5
 8009044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009048:	f000 f878 	bl	800913c <memset>
 800904c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009054:	4620      	mov	r0, r4
 8009056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009058:	3468      	adds	r4, #104	; 0x68
 800905a:	e7d9      	b.n	8009010 <__sfp+0x1c>
 800905c:	2104      	movs	r1, #4
 800905e:	4638      	mov	r0, r7
 8009060:	f7ff ff62 	bl	8008f28 <__sfmoreglue>
 8009064:	4604      	mov	r4, r0
 8009066:	6030      	str	r0, [r6, #0]
 8009068:	2800      	cmp	r0, #0
 800906a:	d1d5      	bne.n	8009018 <__sfp+0x24>
 800906c:	f7ff ff78 	bl	8008f60 <__sfp_lock_release>
 8009070:	230c      	movs	r3, #12
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	e7ee      	b.n	8009054 <__sfp+0x60>
 8009076:	bf00      	nop
 8009078:	0800c5b4 	.word	0x0800c5b4
 800907c:	ffff0001 	.word	0xffff0001

08009080 <_fwalk_reent>:
 8009080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009084:	4606      	mov	r6, r0
 8009086:	4688      	mov	r8, r1
 8009088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800908c:	2700      	movs	r7, #0
 800908e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009092:	f1b9 0901 	subs.w	r9, r9, #1
 8009096:	d505      	bpl.n	80090a4 <_fwalk_reent+0x24>
 8009098:	6824      	ldr	r4, [r4, #0]
 800909a:	2c00      	cmp	r4, #0
 800909c:	d1f7      	bne.n	800908e <_fwalk_reent+0xe>
 800909e:	4638      	mov	r0, r7
 80090a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a4:	89ab      	ldrh	r3, [r5, #12]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d907      	bls.n	80090ba <_fwalk_reent+0x3a>
 80090aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ae:	3301      	adds	r3, #1
 80090b0:	d003      	beq.n	80090ba <_fwalk_reent+0x3a>
 80090b2:	4629      	mov	r1, r5
 80090b4:	4630      	mov	r0, r6
 80090b6:	47c0      	blx	r8
 80090b8:	4307      	orrs	r7, r0
 80090ba:	3568      	adds	r5, #104	; 0x68
 80090bc:	e7e9      	b.n	8009092 <_fwalk_reent+0x12>
	...

080090c0 <__libc_init_array>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	4d0d      	ldr	r5, [pc, #52]	; (80090f8 <__libc_init_array+0x38>)
 80090c4:	4c0d      	ldr	r4, [pc, #52]	; (80090fc <__libc_init_array+0x3c>)
 80090c6:	1b64      	subs	r4, r4, r5
 80090c8:	10a4      	asrs	r4, r4, #2
 80090ca:	2600      	movs	r6, #0
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	d109      	bne.n	80090e4 <__libc_init_array+0x24>
 80090d0:	4d0b      	ldr	r5, [pc, #44]	; (8009100 <__libc_init_array+0x40>)
 80090d2:	4c0c      	ldr	r4, [pc, #48]	; (8009104 <__libc_init_array+0x44>)
 80090d4:	f002 fe66 	bl	800bda4 <_init>
 80090d8:	1b64      	subs	r4, r4, r5
 80090da:	10a4      	asrs	r4, r4, #2
 80090dc:	2600      	movs	r6, #0
 80090de:	42a6      	cmp	r6, r4
 80090e0:	d105      	bne.n	80090ee <__libc_init_array+0x2e>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e8:	4798      	blx	r3
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7ee      	b.n	80090cc <__libc_init_array+0xc>
 80090ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f2:	4798      	blx	r3
 80090f4:	3601      	adds	r6, #1
 80090f6:	e7f2      	b.n	80090de <__libc_init_array+0x1e>
 80090f8:	0800c83c 	.word	0x0800c83c
 80090fc:	0800c83c 	.word	0x0800c83c
 8009100:	0800c83c 	.word	0x0800c83c
 8009104:	0800c840 	.word	0x0800c840

08009108 <__retarget_lock_init_recursive>:
 8009108:	4770      	bx	lr

0800910a <__retarget_lock_acquire_recursive>:
 800910a:	4770      	bx	lr

0800910c <__retarget_lock_release_recursive>:
 800910c:	4770      	bx	lr
	...

08009110 <malloc>:
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <malloc+0xc>)
 8009112:	4601      	mov	r1, r0
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f000 b885 	b.w	8009224 <_malloc_r>
 800911a:	bf00      	nop
 800911c:	20000014 	.word	0x20000014

08009120 <memcpy>:
 8009120:	440a      	add	r2, r1
 8009122:	4291      	cmp	r1, r2
 8009124:	f100 33ff 	add.w	r3, r0, #4294967295
 8009128:	d100      	bne.n	800912c <memcpy+0xc>
 800912a:	4770      	bx	lr
 800912c:	b510      	push	{r4, lr}
 800912e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009136:	4291      	cmp	r1, r2
 8009138:	d1f9      	bne.n	800912e <memcpy+0xe>
 800913a:	bd10      	pop	{r4, pc}

0800913c <memset>:
 800913c:	4402      	add	r2, r0
 800913e:	4603      	mov	r3, r0
 8009140:	4293      	cmp	r3, r2
 8009142:	d100      	bne.n	8009146 <memset+0xa>
 8009144:	4770      	bx	lr
 8009146:	f803 1b01 	strb.w	r1, [r3], #1
 800914a:	e7f9      	b.n	8009140 <memset+0x4>

0800914c <_free_r>:
 800914c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800914e:	2900      	cmp	r1, #0
 8009150:	d044      	beq.n	80091dc <_free_r+0x90>
 8009152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009156:	9001      	str	r0, [sp, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f1a1 0404 	sub.w	r4, r1, #4
 800915e:	bfb8      	it	lt
 8009160:	18e4      	addlt	r4, r4, r3
 8009162:	f001 feb5 	bl	800aed0 <__malloc_lock>
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <_free_r+0x94>)
 8009168:	9801      	ldr	r0, [sp, #4]
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	b933      	cbnz	r3, 800917c <_free_r+0x30>
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6014      	str	r4, [r2, #0]
 8009172:	b003      	add	sp, #12
 8009174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009178:	f001 beb0 	b.w	800aedc <__malloc_unlock>
 800917c:	42a3      	cmp	r3, r4
 800917e:	d908      	bls.n	8009192 <_free_r+0x46>
 8009180:	6825      	ldr	r5, [r4, #0]
 8009182:	1961      	adds	r1, r4, r5
 8009184:	428b      	cmp	r3, r1
 8009186:	bf01      	itttt	eq
 8009188:	6819      	ldreq	r1, [r3, #0]
 800918a:	685b      	ldreq	r3, [r3, #4]
 800918c:	1949      	addeq	r1, r1, r5
 800918e:	6021      	streq	r1, [r4, #0]
 8009190:	e7ed      	b.n	800916e <_free_r+0x22>
 8009192:	461a      	mov	r2, r3
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b10b      	cbz	r3, 800919c <_free_r+0x50>
 8009198:	42a3      	cmp	r3, r4
 800919a:	d9fa      	bls.n	8009192 <_free_r+0x46>
 800919c:	6811      	ldr	r1, [r2, #0]
 800919e:	1855      	adds	r5, r2, r1
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	d10b      	bne.n	80091bc <_free_r+0x70>
 80091a4:	6824      	ldr	r4, [r4, #0]
 80091a6:	4421      	add	r1, r4
 80091a8:	1854      	adds	r4, r2, r1
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	d1e0      	bne.n	8009172 <_free_r+0x26>
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	6053      	str	r3, [r2, #4]
 80091b6:	4421      	add	r1, r4
 80091b8:	6011      	str	r1, [r2, #0]
 80091ba:	e7da      	b.n	8009172 <_free_r+0x26>
 80091bc:	d902      	bls.n	80091c4 <_free_r+0x78>
 80091be:	230c      	movs	r3, #12
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	e7d6      	b.n	8009172 <_free_r+0x26>
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf04      	itt	eq
 80091cc:	6819      	ldreq	r1, [r3, #0]
 80091ce:	685b      	ldreq	r3, [r3, #4]
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	bf04      	itt	eq
 80091d4:	1949      	addeq	r1, r1, r5
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	6054      	str	r4, [r2, #4]
 80091da:	e7ca      	b.n	8009172 <_free_r+0x26>
 80091dc:	b003      	add	sp, #12
 80091de:	bd30      	pop	{r4, r5, pc}
 80091e0:	200162d4 	.word	0x200162d4

080091e4 <sbrk_aligned>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0e      	ldr	r6, [pc, #56]	; (8009220 <sbrk_aligned+0x3c>)
 80091e8:	460c      	mov	r4, r1
 80091ea:	6831      	ldr	r1, [r6, #0]
 80091ec:	4605      	mov	r5, r0
 80091ee:	b911      	cbnz	r1, 80091f6 <sbrk_aligned+0x12>
 80091f0:	f000 fdee 	bl	8009dd0 <_sbrk_r>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 fde9 	bl	8009dd0 <_sbrk_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d00a      	beq.n	8009218 <sbrk_aligned+0x34>
 8009202:	1cc4      	adds	r4, r0, #3
 8009204:	f024 0403 	bic.w	r4, r4, #3
 8009208:	42a0      	cmp	r0, r4
 800920a:	d007      	beq.n	800921c <sbrk_aligned+0x38>
 800920c:	1a21      	subs	r1, r4, r0
 800920e:	4628      	mov	r0, r5
 8009210:	f000 fdde 	bl	8009dd0 <_sbrk_r>
 8009214:	3001      	adds	r0, #1
 8009216:	d101      	bne.n	800921c <sbrk_aligned+0x38>
 8009218:	f04f 34ff 	mov.w	r4, #4294967295
 800921c:	4620      	mov	r0, r4
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	200162d8 	.word	0x200162d8

08009224 <_malloc_r>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	1ccd      	adds	r5, r1, #3
 800922a:	f025 0503 	bic.w	r5, r5, #3
 800922e:	3508      	adds	r5, #8
 8009230:	2d0c      	cmp	r5, #12
 8009232:	bf38      	it	cc
 8009234:	250c      	movcc	r5, #12
 8009236:	2d00      	cmp	r5, #0
 8009238:	4607      	mov	r7, r0
 800923a:	db01      	blt.n	8009240 <_malloc_r+0x1c>
 800923c:	42a9      	cmp	r1, r5
 800923e:	d905      	bls.n	800924c <_malloc_r+0x28>
 8009240:	230c      	movs	r3, #12
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	2600      	movs	r6, #0
 8009246:	4630      	mov	r0, r6
 8009248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800924c:	4e2e      	ldr	r6, [pc, #184]	; (8009308 <_malloc_r+0xe4>)
 800924e:	f001 fe3f 	bl	800aed0 <__malloc_lock>
 8009252:	6833      	ldr	r3, [r6, #0]
 8009254:	461c      	mov	r4, r3
 8009256:	bb34      	cbnz	r4, 80092a6 <_malloc_r+0x82>
 8009258:	4629      	mov	r1, r5
 800925a:	4638      	mov	r0, r7
 800925c:	f7ff ffc2 	bl	80091e4 <sbrk_aligned>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	4604      	mov	r4, r0
 8009264:	d14d      	bne.n	8009302 <_malloc_r+0xde>
 8009266:	6834      	ldr	r4, [r6, #0]
 8009268:	4626      	mov	r6, r4
 800926a:	2e00      	cmp	r6, #0
 800926c:	d140      	bne.n	80092f0 <_malloc_r+0xcc>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	4631      	mov	r1, r6
 8009272:	4638      	mov	r0, r7
 8009274:	eb04 0803 	add.w	r8, r4, r3
 8009278:	f000 fdaa 	bl	8009dd0 <_sbrk_r>
 800927c:	4580      	cmp	r8, r0
 800927e:	d13a      	bne.n	80092f6 <_malloc_r+0xd2>
 8009280:	6821      	ldr	r1, [r4, #0]
 8009282:	3503      	adds	r5, #3
 8009284:	1a6d      	subs	r5, r5, r1
 8009286:	f025 0503 	bic.w	r5, r5, #3
 800928a:	3508      	adds	r5, #8
 800928c:	2d0c      	cmp	r5, #12
 800928e:	bf38      	it	cc
 8009290:	250c      	movcc	r5, #12
 8009292:	4629      	mov	r1, r5
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff ffa5 	bl	80091e4 <sbrk_aligned>
 800929a:	3001      	adds	r0, #1
 800929c:	d02b      	beq.n	80092f6 <_malloc_r+0xd2>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	442b      	add	r3, r5
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	e00e      	b.n	80092c4 <_malloc_r+0xa0>
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	1b52      	subs	r2, r2, r5
 80092aa:	d41e      	bmi.n	80092ea <_malloc_r+0xc6>
 80092ac:	2a0b      	cmp	r2, #11
 80092ae:	d916      	bls.n	80092de <_malloc_r+0xba>
 80092b0:	1961      	adds	r1, r4, r5
 80092b2:	42a3      	cmp	r3, r4
 80092b4:	6025      	str	r5, [r4, #0]
 80092b6:	bf18      	it	ne
 80092b8:	6059      	strne	r1, [r3, #4]
 80092ba:	6863      	ldr	r3, [r4, #4]
 80092bc:	bf08      	it	eq
 80092be:	6031      	streq	r1, [r6, #0]
 80092c0:	5162      	str	r2, [r4, r5]
 80092c2:	604b      	str	r3, [r1, #4]
 80092c4:	4638      	mov	r0, r7
 80092c6:	f104 060b 	add.w	r6, r4, #11
 80092ca:	f001 fe07 	bl	800aedc <__malloc_unlock>
 80092ce:	f026 0607 	bic.w	r6, r6, #7
 80092d2:	1d23      	adds	r3, r4, #4
 80092d4:	1af2      	subs	r2, r6, r3
 80092d6:	d0b6      	beq.n	8009246 <_malloc_r+0x22>
 80092d8:	1b9b      	subs	r3, r3, r6
 80092da:	50a3      	str	r3, [r4, r2]
 80092dc:	e7b3      	b.n	8009246 <_malloc_r+0x22>
 80092de:	6862      	ldr	r2, [r4, #4]
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	bf0c      	ite	eq
 80092e4:	6032      	streq	r2, [r6, #0]
 80092e6:	605a      	strne	r2, [r3, #4]
 80092e8:	e7ec      	b.n	80092c4 <_malloc_r+0xa0>
 80092ea:	4623      	mov	r3, r4
 80092ec:	6864      	ldr	r4, [r4, #4]
 80092ee:	e7b2      	b.n	8009256 <_malloc_r+0x32>
 80092f0:	4634      	mov	r4, r6
 80092f2:	6876      	ldr	r6, [r6, #4]
 80092f4:	e7b9      	b.n	800926a <_malloc_r+0x46>
 80092f6:	230c      	movs	r3, #12
 80092f8:	603b      	str	r3, [r7, #0]
 80092fa:	4638      	mov	r0, r7
 80092fc:	f001 fdee 	bl	800aedc <__malloc_unlock>
 8009300:	e7a1      	b.n	8009246 <_malloc_r+0x22>
 8009302:	6025      	str	r5, [r4, #0]
 8009304:	e7de      	b.n	80092c4 <_malloc_r+0xa0>
 8009306:	bf00      	nop
 8009308:	200162d4 	.word	0x200162d4

0800930c <__cvt>:
 800930c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	ec55 4b10 	vmov	r4, r5, d0
 8009314:	2d00      	cmp	r5, #0
 8009316:	460e      	mov	r6, r1
 8009318:	4619      	mov	r1, r3
 800931a:	462b      	mov	r3, r5
 800931c:	bfbb      	ittet	lt
 800931e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009322:	461d      	movlt	r5, r3
 8009324:	2300      	movge	r3, #0
 8009326:	232d      	movlt	r3, #45	; 0x2d
 8009328:	700b      	strb	r3, [r1, #0]
 800932a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800932c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009330:	4691      	mov	r9, r2
 8009332:	f023 0820 	bic.w	r8, r3, #32
 8009336:	bfbc      	itt	lt
 8009338:	4622      	movlt	r2, r4
 800933a:	4614      	movlt	r4, r2
 800933c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009340:	d005      	beq.n	800934e <__cvt+0x42>
 8009342:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009346:	d100      	bne.n	800934a <__cvt+0x3e>
 8009348:	3601      	adds	r6, #1
 800934a:	2102      	movs	r1, #2
 800934c:	e000      	b.n	8009350 <__cvt+0x44>
 800934e:	2103      	movs	r1, #3
 8009350:	ab03      	add	r3, sp, #12
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	ab02      	add	r3, sp, #8
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	ec45 4b10 	vmov	d0, r4, r5
 800935c:	4653      	mov	r3, sl
 800935e:	4632      	mov	r2, r6
 8009360:	f000 ff3a 	bl	800a1d8 <_dtoa_r>
 8009364:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009368:	4607      	mov	r7, r0
 800936a:	d102      	bne.n	8009372 <__cvt+0x66>
 800936c:	f019 0f01 	tst.w	r9, #1
 8009370:	d022      	beq.n	80093b8 <__cvt+0xac>
 8009372:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009376:	eb07 0906 	add.w	r9, r7, r6
 800937a:	d110      	bne.n	800939e <__cvt+0x92>
 800937c:	783b      	ldrb	r3, [r7, #0]
 800937e:	2b30      	cmp	r3, #48	; 0x30
 8009380:	d10a      	bne.n	8009398 <__cvt+0x8c>
 8009382:	2200      	movs	r2, #0
 8009384:	2300      	movs	r3, #0
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f7 fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800938e:	b918      	cbnz	r0, 8009398 <__cvt+0x8c>
 8009390:	f1c6 0601 	rsb	r6, r6, #1
 8009394:	f8ca 6000 	str.w	r6, [sl]
 8009398:	f8da 3000 	ldr.w	r3, [sl]
 800939c:	4499      	add	r9, r3
 800939e:	2200      	movs	r2, #0
 80093a0:	2300      	movs	r3, #0
 80093a2:	4620      	mov	r0, r4
 80093a4:	4629      	mov	r1, r5
 80093a6:	f7f7 fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80093aa:	b108      	cbz	r0, 80093b0 <__cvt+0xa4>
 80093ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80093b0:	2230      	movs	r2, #48	; 0x30
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	454b      	cmp	r3, r9
 80093b6:	d307      	bcc.n	80093c8 <__cvt+0xbc>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093bc:	1bdb      	subs	r3, r3, r7
 80093be:	4638      	mov	r0, r7
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	b004      	add	sp, #16
 80093c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c8:	1c59      	adds	r1, r3, #1
 80093ca:	9103      	str	r1, [sp, #12]
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e7f0      	b.n	80093b2 <__cvt+0xa6>

080093d0 <__exponent>:
 80093d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d2:	4603      	mov	r3, r0
 80093d4:	2900      	cmp	r1, #0
 80093d6:	bfb8      	it	lt
 80093d8:	4249      	neglt	r1, r1
 80093da:	f803 2b02 	strb.w	r2, [r3], #2
 80093de:	bfb4      	ite	lt
 80093e0:	222d      	movlt	r2, #45	; 0x2d
 80093e2:	222b      	movge	r2, #43	; 0x2b
 80093e4:	2909      	cmp	r1, #9
 80093e6:	7042      	strb	r2, [r0, #1]
 80093e8:	dd2a      	ble.n	8009440 <__exponent+0x70>
 80093ea:	f10d 0407 	add.w	r4, sp, #7
 80093ee:	46a4      	mov	ip, r4
 80093f0:	270a      	movs	r7, #10
 80093f2:	46a6      	mov	lr, r4
 80093f4:	460a      	mov	r2, r1
 80093f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80093fa:	fb07 1516 	mls	r5, r7, r6, r1
 80093fe:	3530      	adds	r5, #48	; 0x30
 8009400:	2a63      	cmp	r2, #99	; 0x63
 8009402:	f104 34ff 	add.w	r4, r4, #4294967295
 8009406:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800940a:	4631      	mov	r1, r6
 800940c:	dcf1      	bgt.n	80093f2 <__exponent+0x22>
 800940e:	3130      	adds	r1, #48	; 0x30
 8009410:	f1ae 0502 	sub.w	r5, lr, #2
 8009414:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009418:	1c44      	adds	r4, r0, #1
 800941a:	4629      	mov	r1, r5
 800941c:	4561      	cmp	r1, ip
 800941e:	d30a      	bcc.n	8009436 <__exponent+0x66>
 8009420:	f10d 0209 	add.w	r2, sp, #9
 8009424:	eba2 020e 	sub.w	r2, r2, lr
 8009428:	4565      	cmp	r5, ip
 800942a:	bf88      	it	hi
 800942c:	2200      	movhi	r2, #0
 800942e:	4413      	add	r3, r2
 8009430:	1a18      	subs	r0, r3, r0
 8009432:	b003      	add	sp, #12
 8009434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800943a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800943e:	e7ed      	b.n	800941c <__exponent+0x4c>
 8009440:	2330      	movs	r3, #48	; 0x30
 8009442:	3130      	adds	r1, #48	; 0x30
 8009444:	7083      	strb	r3, [r0, #2]
 8009446:	70c1      	strb	r1, [r0, #3]
 8009448:	1d03      	adds	r3, r0, #4
 800944a:	e7f1      	b.n	8009430 <__exponent+0x60>

0800944c <_printf_float>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	ed2d 8b02 	vpush	{d8}
 8009454:	b08d      	sub	sp, #52	; 0x34
 8009456:	460c      	mov	r4, r1
 8009458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800945c:	4616      	mov	r6, r2
 800945e:	461f      	mov	r7, r3
 8009460:	4605      	mov	r5, r0
 8009462:	f001 fca7 	bl	800adb4 <_localeconv_r>
 8009466:	f8d0 a000 	ldr.w	sl, [r0]
 800946a:	4650      	mov	r0, sl
 800946c:	f7f6 feb8 	bl	80001e0 <strlen>
 8009470:	2300      	movs	r3, #0
 8009472:	930a      	str	r3, [sp, #40]	; 0x28
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	9305      	str	r3, [sp, #20]
 8009478:	f8d8 3000 	ldr.w	r3, [r8]
 800947c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009480:	3307      	adds	r3, #7
 8009482:	f023 0307 	bic.w	r3, r3, #7
 8009486:	f103 0208 	add.w	r2, r3, #8
 800948a:	f8c8 2000 	str.w	r2, [r8]
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009496:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800949a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800949e:	9307      	str	r3, [sp, #28]
 80094a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80094a4:	ee08 0a10 	vmov	s16, r0
 80094a8:	4b9f      	ldr	r3, [pc, #636]	; (8009728 <_printf_float+0x2dc>)
 80094aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094ae:	f04f 32ff 	mov.w	r2, #4294967295
 80094b2:	f7f7 fb43 	bl	8000b3c <__aeabi_dcmpun>
 80094b6:	bb88      	cbnz	r0, 800951c <_printf_float+0xd0>
 80094b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094bc:	4b9a      	ldr	r3, [pc, #616]	; (8009728 <_printf_float+0x2dc>)
 80094be:	f04f 32ff 	mov.w	r2, #4294967295
 80094c2:	f7f7 fb1d 	bl	8000b00 <__aeabi_dcmple>
 80094c6:	bb48      	cbnz	r0, 800951c <_printf_float+0xd0>
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	4640      	mov	r0, r8
 80094ce:	4649      	mov	r1, r9
 80094d0:	f7f7 fb0c 	bl	8000aec <__aeabi_dcmplt>
 80094d4:	b110      	cbz	r0, 80094dc <_printf_float+0x90>
 80094d6:	232d      	movs	r3, #45	; 0x2d
 80094d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094dc:	4b93      	ldr	r3, [pc, #588]	; (800972c <_printf_float+0x2e0>)
 80094de:	4894      	ldr	r0, [pc, #592]	; (8009730 <_printf_float+0x2e4>)
 80094e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80094e4:	bf94      	ite	ls
 80094e6:	4698      	movls	r8, r3
 80094e8:	4680      	movhi	r8, r0
 80094ea:	2303      	movs	r3, #3
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	f023 0204 	bic.w	r2, r3, #4
 80094f4:	6022      	str	r2, [r4, #0]
 80094f6:	f04f 0900 	mov.w	r9, #0
 80094fa:	9700      	str	r7, [sp, #0]
 80094fc:	4633      	mov	r3, r6
 80094fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f9d8 	bl	80098b8 <_printf_common>
 8009508:	3001      	adds	r0, #1
 800950a:	f040 8090 	bne.w	800962e <_printf_float+0x1e2>
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	b00d      	add	sp, #52	; 0x34
 8009514:	ecbd 8b02 	vpop	{d8}
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	f7f7 fb0a 	bl	8000b3c <__aeabi_dcmpun>
 8009528:	b140      	cbz	r0, 800953c <_printf_float+0xf0>
 800952a:	464b      	mov	r3, r9
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfbc      	itt	lt
 8009530:	232d      	movlt	r3, #45	; 0x2d
 8009532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009536:	487f      	ldr	r0, [pc, #508]	; (8009734 <_printf_float+0x2e8>)
 8009538:	4b7f      	ldr	r3, [pc, #508]	; (8009738 <_printf_float+0x2ec>)
 800953a:	e7d1      	b.n	80094e0 <_printf_float+0x94>
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009542:	9206      	str	r2, [sp, #24]
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	d13f      	bne.n	80095c8 <_printf_float+0x17c>
 8009548:	2306      	movs	r3, #6
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	9b05      	ldr	r3, [sp, #20]
 800954e:	6861      	ldr	r1, [r4, #4]
 8009550:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009554:	2300      	movs	r3, #0
 8009556:	9303      	str	r3, [sp, #12]
 8009558:	ab0a      	add	r3, sp, #40	; 0x28
 800955a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800955e:	ab09      	add	r3, sp, #36	; 0x24
 8009560:	ec49 8b10 	vmov	d0, r8, r9
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	6022      	str	r2, [r4, #0]
 8009568:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800956c:	4628      	mov	r0, r5
 800956e:	f7ff fecd 	bl	800930c <__cvt>
 8009572:	9b06      	ldr	r3, [sp, #24]
 8009574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009576:	2b47      	cmp	r3, #71	; 0x47
 8009578:	4680      	mov	r8, r0
 800957a:	d108      	bne.n	800958e <_printf_float+0x142>
 800957c:	1cc8      	adds	r0, r1, #3
 800957e:	db02      	blt.n	8009586 <_printf_float+0x13a>
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	4299      	cmp	r1, r3
 8009584:	dd41      	ble.n	800960a <_printf_float+0x1be>
 8009586:	f1ab 0b02 	sub.w	fp, fp, #2
 800958a:	fa5f fb8b 	uxtb.w	fp, fp
 800958e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009592:	d820      	bhi.n	80095d6 <_printf_float+0x18a>
 8009594:	3901      	subs	r1, #1
 8009596:	465a      	mov	r2, fp
 8009598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800959c:	9109      	str	r1, [sp, #36]	; 0x24
 800959e:	f7ff ff17 	bl	80093d0 <__exponent>
 80095a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095a4:	1813      	adds	r3, r2, r0
 80095a6:	2a01      	cmp	r2, #1
 80095a8:	4681      	mov	r9, r0
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	dc02      	bgt.n	80095b4 <_printf_float+0x168>
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	07d2      	lsls	r2, r2, #31
 80095b2:	d501      	bpl.n	80095b8 <_printf_float+0x16c>
 80095b4:	3301      	adds	r3, #1
 80095b6:	6123      	str	r3, [r4, #16]
 80095b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d09c      	beq.n	80094fa <_printf_float+0xae>
 80095c0:	232d      	movs	r3, #45	; 0x2d
 80095c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c6:	e798      	b.n	80094fa <_printf_float+0xae>
 80095c8:	9a06      	ldr	r2, [sp, #24]
 80095ca:	2a47      	cmp	r2, #71	; 0x47
 80095cc:	d1be      	bne.n	800954c <_printf_float+0x100>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1bc      	bne.n	800954c <_printf_float+0x100>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e7b9      	b.n	800954a <_printf_float+0xfe>
 80095d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80095da:	d118      	bne.n	800960e <_printf_float+0x1c2>
 80095dc:	2900      	cmp	r1, #0
 80095de:	6863      	ldr	r3, [r4, #4]
 80095e0:	dd0b      	ble.n	80095fa <_printf_float+0x1ae>
 80095e2:	6121      	str	r1, [r4, #16]
 80095e4:	b913      	cbnz	r3, 80095ec <_printf_float+0x1a0>
 80095e6:	6822      	ldr	r2, [r4, #0]
 80095e8:	07d0      	lsls	r0, r2, #31
 80095ea:	d502      	bpl.n	80095f2 <_printf_float+0x1a6>
 80095ec:	3301      	adds	r3, #1
 80095ee:	440b      	add	r3, r1
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80095f4:	f04f 0900 	mov.w	r9, #0
 80095f8:	e7de      	b.n	80095b8 <_printf_float+0x16c>
 80095fa:	b913      	cbnz	r3, 8009602 <_printf_float+0x1b6>
 80095fc:	6822      	ldr	r2, [r4, #0]
 80095fe:	07d2      	lsls	r2, r2, #31
 8009600:	d501      	bpl.n	8009606 <_printf_float+0x1ba>
 8009602:	3302      	adds	r3, #2
 8009604:	e7f4      	b.n	80095f0 <_printf_float+0x1a4>
 8009606:	2301      	movs	r3, #1
 8009608:	e7f2      	b.n	80095f0 <_printf_float+0x1a4>
 800960a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800960e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009610:	4299      	cmp	r1, r3
 8009612:	db05      	blt.n	8009620 <_printf_float+0x1d4>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	6121      	str	r1, [r4, #16]
 8009618:	07d8      	lsls	r0, r3, #31
 800961a:	d5ea      	bpl.n	80095f2 <_printf_float+0x1a6>
 800961c:	1c4b      	adds	r3, r1, #1
 800961e:	e7e7      	b.n	80095f0 <_printf_float+0x1a4>
 8009620:	2900      	cmp	r1, #0
 8009622:	bfd4      	ite	le
 8009624:	f1c1 0202 	rsble	r2, r1, #2
 8009628:	2201      	movgt	r2, #1
 800962a:	4413      	add	r3, r2
 800962c:	e7e0      	b.n	80095f0 <_printf_float+0x1a4>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	055a      	lsls	r2, r3, #21
 8009632:	d407      	bmi.n	8009644 <_printf_float+0x1f8>
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	4642      	mov	r2, r8
 8009638:	4631      	mov	r1, r6
 800963a:	4628      	mov	r0, r5
 800963c:	47b8      	blx	r7
 800963e:	3001      	adds	r0, #1
 8009640:	d12c      	bne.n	800969c <_printf_float+0x250>
 8009642:	e764      	b.n	800950e <_printf_float+0xc2>
 8009644:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009648:	f240 80e0 	bls.w	800980c <_printf_float+0x3c0>
 800964c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009650:	2200      	movs	r2, #0
 8009652:	2300      	movs	r3, #0
 8009654:	f7f7 fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009658:	2800      	cmp	r0, #0
 800965a:	d034      	beq.n	80096c6 <_printf_float+0x27a>
 800965c:	4a37      	ldr	r2, [pc, #220]	; (800973c <_printf_float+0x2f0>)
 800965e:	2301      	movs	r3, #1
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af51 	beq.w	800950e <_printf_float+0xc2>
 800966c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009670:	429a      	cmp	r2, r3
 8009672:	db02      	blt.n	800967a <_printf_float+0x22e>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07d8      	lsls	r0, r3, #31
 8009678:	d510      	bpl.n	800969c <_printf_float+0x250>
 800967a:	ee18 3a10 	vmov	r3, s16
 800967e:	4652      	mov	r2, sl
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47b8      	blx	r7
 8009686:	3001      	adds	r0, #1
 8009688:	f43f af41 	beq.w	800950e <_printf_float+0xc2>
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	f104 091a 	add.w	r9, r4, #26
 8009694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009696:	3b01      	subs	r3, #1
 8009698:	4543      	cmp	r3, r8
 800969a:	dc09      	bgt.n	80096b0 <_printf_float+0x264>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	079b      	lsls	r3, r3, #30
 80096a0:	f100 8105 	bmi.w	80098ae <_printf_float+0x462>
 80096a4:	68e0      	ldr	r0, [r4, #12]
 80096a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a8:	4298      	cmp	r0, r3
 80096aa:	bfb8      	it	lt
 80096ac:	4618      	movlt	r0, r3
 80096ae:	e730      	b.n	8009512 <_printf_float+0xc6>
 80096b0:	2301      	movs	r3, #1
 80096b2:	464a      	mov	r2, r9
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b8      	blx	r7
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f af27 	beq.w	800950e <_printf_float+0xc2>
 80096c0:	f108 0801 	add.w	r8, r8, #1
 80096c4:	e7e6      	b.n	8009694 <_printf_float+0x248>
 80096c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc39      	bgt.n	8009740 <_printf_float+0x2f4>
 80096cc:	4a1b      	ldr	r2, [pc, #108]	; (800973c <_printf_float+0x2f0>)
 80096ce:	2301      	movs	r3, #1
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	f43f af19 	beq.w	800950e <_printf_float+0xc2>
 80096dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096e0:	4313      	orrs	r3, r2
 80096e2:	d102      	bne.n	80096ea <_printf_float+0x29e>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	07d9      	lsls	r1, r3, #31
 80096e8:	d5d8      	bpl.n	800969c <_printf_float+0x250>
 80096ea:	ee18 3a10 	vmov	r3, s16
 80096ee:	4652      	mov	r2, sl
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f af09 	beq.w	800950e <_printf_float+0xc2>
 80096fc:	f04f 0900 	mov.w	r9, #0
 8009700:	f104 0a1a 	add.w	sl, r4, #26
 8009704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009706:	425b      	negs	r3, r3
 8009708:	454b      	cmp	r3, r9
 800970a:	dc01      	bgt.n	8009710 <_printf_float+0x2c4>
 800970c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970e:	e792      	b.n	8009636 <_printf_float+0x1ea>
 8009710:	2301      	movs	r3, #1
 8009712:	4652      	mov	r2, sl
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	47b8      	blx	r7
 800971a:	3001      	adds	r0, #1
 800971c:	f43f aef7 	beq.w	800950e <_printf_float+0xc2>
 8009720:	f109 0901 	add.w	r9, r9, #1
 8009724:	e7ee      	b.n	8009704 <_printf_float+0x2b8>
 8009726:	bf00      	nop
 8009728:	7fefffff 	.word	0x7fefffff
 800972c:	0800c5b8 	.word	0x0800c5b8
 8009730:	0800c5bc 	.word	0x0800c5bc
 8009734:	0800c5c4 	.word	0x0800c5c4
 8009738:	0800c5c0 	.word	0x0800c5c0
 800973c:	0800c5c8 	.word	0x0800c5c8
 8009740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009744:	429a      	cmp	r2, r3
 8009746:	bfa8      	it	ge
 8009748:	461a      	movge	r2, r3
 800974a:	2a00      	cmp	r2, #0
 800974c:	4691      	mov	r9, r2
 800974e:	dc37      	bgt.n	80097c0 <_printf_float+0x374>
 8009750:	f04f 0b00 	mov.w	fp, #0
 8009754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009758:	f104 021a 	add.w	r2, r4, #26
 800975c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800975e:	9305      	str	r3, [sp, #20]
 8009760:	eba3 0309 	sub.w	r3, r3, r9
 8009764:	455b      	cmp	r3, fp
 8009766:	dc33      	bgt.n	80097d0 <_printf_float+0x384>
 8009768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800976c:	429a      	cmp	r2, r3
 800976e:	db3b      	blt.n	80097e8 <_printf_float+0x39c>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	07da      	lsls	r2, r3, #31
 8009774:	d438      	bmi.n	80097e8 <_printf_float+0x39c>
 8009776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009778:	9a05      	ldr	r2, [sp, #20]
 800977a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800977c:	1a9a      	subs	r2, r3, r2
 800977e:	eba3 0901 	sub.w	r9, r3, r1
 8009782:	4591      	cmp	r9, r2
 8009784:	bfa8      	it	ge
 8009786:	4691      	movge	r9, r2
 8009788:	f1b9 0f00 	cmp.w	r9, #0
 800978c:	dc35      	bgt.n	80097fa <_printf_float+0x3ae>
 800978e:	f04f 0800 	mov.w	r8, #0
 8009792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009796:	f104 0a1a 	add.w	sl, r4, #26
 800979a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	eba3 0309 	sub.w	r3, r3, r9
 80097a4:	4543      	cmp	r3, r8
 80097a6:	f77f af79 	ble.w	800969c <_printf_float+0x250>
 80097aa:	2301      	movs	r3, #1
 80097ac:	4652      	mov	r2, sl
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b8      	blx	r7
 80097b4:	3001      	adds	r0, #1
 80097b6:	f43f aeaa 	beq.w	800950e <_printf_float+0xc2>
 80097ba:	f108 0801 	add.w	r8, r8, #1
 80097be:	e7ec      	b.n	800979a <_printf_float+0x34e>
 80097c0:	4613      	mov	r3, r2
 80097c2:	4631      	mov	r1, r6
 80097c4:	4642      	mov	r2, r8
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b8      	blx	r7
 80097ca:	3001      	adds	r0, #1
 80097cc:	d1c0      	bne.n	8009750 <_printf_float+0x304>
 80097ce:	e69e      	b.n	800950e <_printf_float+0xc2>
 80097d0:	2301      	movs	r3, #1
 80097d2:	4631      	mov	r1, r6
 80097d4:	4628      	mov	r0, r5
 80097d6:	9205      	str	r2, [sp, #20]
 80097d8:	47b8      	blx	r7
 80097da:	3001      	adds	r0, #1
 80097dc:	f43f ae97 	beq.w	800950e <_printf_float+0xc2>
 80097e0:	9a05      	ldr	r2, [sp, #20]
 80097e2:	f10b 0b01 	add.w	fp, fp, #1
 80097e6:	e7b9      	b.n	800975c <_printf_float+0x310>
 80097e8:	ee18 3a10 	vmov	r3, s16
 80097ec:	4652      	mov	r2, sl
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	d1be      	bne.n	8009776 <_printf_float+0x32a>
 80097f8:	e689      	b.n	800950e <_printf_float+0xc2>
 80097fa:	9a05      	ldr	r2, [sp, #20]
 80097fc:	464b      	mov	r3, r9
 80097fe:	4442      	add	r2, r8
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	d1c1      	bne.n	800978e <_printf_float+0x342>
 800980a:	e680      	b.n	800950e <_printf_float+0xc2>
 800980c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800980e:	2a01      	cmp	r2, #1
 8009810:	dc01      	bgt.n	8009816 <_printf_float+0x3ca>
 8009812:	07db      	lsls	r3, r3, #31
 8009814:	d538      	bpl.n	8009888 <_printf_float+0x43c>
 8009816:	2301      	movs	r3, #1
 8009818:	4642      	mov	r2, r8
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	47b8      	blx	r7
 8009820:	3001      	adds	r0, #1
 8009822:	f43f ae74 	beq.w	800950e <_printf_float+0xc2>
 8009826:	ee18 3a10 	vmov	r3, s16
 800982a:	4652      	mov	r2, sl
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f ae6b 	beq.w	800950e <_printf_float+0xc2>
 8009838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800983c:	2200      	movs	r2, #0
 800983e:	2300      	movs	r3, #0
 8009840:	f7f7 f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009844:	b9d8      	cbnz	r0, 800987e <_printf_float+0x432>
 8009846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009848:	f108 0201 	add.w	r2, r8, #1
 800984c:	3b01      	subs	r3, #1
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	d10e      	bne.n	8009876 <_printf_float+0x42a>
 8009858:	e659      	b.n	800950e <_printf_float+0xc2>
 800985a:	2301      	movs	r3, #1
 800985c:	4652      	mov	r2, sl
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	f43f ae52 	beq.w	800950e <_printf_float+0xc2>
 800986a:	f108 0801 	add.w	r8, r8, #1
 800986e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009870:	3b01      	subs	r3, #1
 8009872:	4543      	cmp	r3, r8
 8009874:	dcf1      	bgt.n	800985a <_printf_float+0x40e>
 8009876:	464b      	mov	r3, r9
 8009878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800987c:	e6dc      	b.n	8009638 <_printf_float+0x1ec>
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	f104 0a1a 	add.w	sl, r4, #26
 8009886:	e7f2      	b.n	800986e <_printf_float+0x422>
 8009888:	2301      	movs	r3, #1
 800988a:	4642      	mov	r2, r8
 800988c:	e7df      	b.n	800984e <_printf_float+0x402>
 800988e:	2301      	movs	r3, #1
 8009890:	464a      	mov	r2, r9
 8009892:	4631      	mov	r1, r6
 8009894:	4628      	mov	r0, r5
 8009896:	47b8      	blx	r7
 8009898:	3001      	adds	r0, #1
 800989a:	f43f ae38 	beq.w	800950e <_printf_float+0xc2>
 800989e:	f108 0801 	add.w	r8, r8, #1
 80098a2:	68e3      	ldr	r3, [r4, #12]
 80098a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098a6:	1a5b      	subs	r3, r3, r1
 80098a8:	4543      	cmp	r3, r8
 80098aa:	dcf0      	bgt.n	800988e <_printf_float+0x442>
 80098ac:	e6fa      	b.n	80096a4 <_printf_float+0x258>
 80098ae:	f04f 0800 	mov.w	r8, #0
 80098b2:	f104 0919 	add.w	r9, r4, #25
 80098b6:	e7f4      	b.n	80098a2 <_printf_float+0x456>

080098b8 <_printf_common>:
 80098b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098bc:	4616      	mov	r6, r2
 80098be:	4699      	mov	r9, r3
 80098c0:	688a      	ldr	r2, [r1, #8]
 80098c2:	690b      	ldr	r3, [r1, #16]
 80098c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	bfb8      	it	lt
 80098cc:	4613      	movlt	r3, r2
 80098ce:	6033      	str	r3, [r6, #0]
 80098d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098d4:	4607      	mov	r7, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	b10a      	cbz	r2, 80098de <_printf_common+0x26>
 80098da:	3301      	adds	r3, #1
 80098dc:	6033      	str	r3, [r6, #0]
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	0699      	lsls	r1, r3, #26
 80098e2:	bf42      	ittt	mi
 80098e4:	6833      	ldrmi	r3, [r6, #0]
 80098e6:	3302      	addmi	r3, #2
 80098e8:	6033      	strmi	r3, [r6, #0]
 80098ea:	6825      	ldr	r5, [r4, #0]
 80098ec:	f015 0506 	ands.w	r5, r5, #6
 80098f0:	d106      	bne.n	8009900 <_printf_common+0x48>
 80098f2:	f104 0a19 	add.w	sl, r4, #25
 80098f6:	68e3      	ldr	r3, [r4, #12]
 80098f8:	6832      	ldr	r2, [r6, #0]
 80098fa:	1a9b      	subs	r3, r3, r2
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	dc26      	bgt.n	800994e <_printf_common+0x96>
 8009900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009904:	1e13      	subs	r3, r2, #0
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	bf18      	it	ne
 800990a:	2301      	movne	r3, #1
 800990c:	0692      	lsls	r2, r2, #26
 800990e:	d42b      	bmi.n	8009968 <_printf_common+0xb0>
 8009910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009914:	4649      	mov	r1, r9
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	3001      	adds	r0, #1
 800991c:	d01e      	beq.n	800995c <_printf_common+0xa4>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	68e5      	ldr	r5, [r4, #12]
 8009922:	6832      	ldr	r2, [r6, #0]
 8009924:	f003 0306 	and.w	r3, r3, #6
 8009928:	2b04      	cmp	r3, #4
 800992a:	bf08      	it	eq
 800992c:	1aad      	subeq	r5, r5, r2
 800992e:	68a3      	ldr	r3, [r4, #8]
 8009930:	6922      	ldr	r2, [r4, #16]
 8009932:	bf0c      	ite	eq
 8009934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009938:	2500      	movne	r5, #0
 800993a:	4293      	cmp	r3, r2
 800993c:	bfc4      	itt	gt
 800993e:	1a9b      	subgt	r3, r3, r2
 8009940:	18ed      	addgt	r5, r5, r3
 8009942:	2600      	movs	r6, #0
 8009944:	341a      	adds	r4, #26
 8009946:	42b5      	cmp	r5, r6
 8009948:	d11a      	bne.n	8009980 <_printf_common+0xc8>
 800994a:	2000      	movs	r0, #0
 800994c:	e008      	b.n	8009960 <_printf_common+0xa8>
 800994e:	2301      	movs	r3, #1
 8009950:	4652      	mov	r2, sl
 8009952:	4649      	mov	r1, r9
 8009954:	4638      	mov	r0, r7
 8009956:	47c0      	blx	r8
 8009958:	3001      	adds	r0, #1
 800995a:	d103      	bne.n	8009964 <_printf_common+0xac>
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009964:	3501      	adds	r5, #1
 8009966:	e7c6      	b.n	80098f6 <_printf_common+0x3e>
 8009968:	18e1      	adds	r1, r4, r3
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	2030      	movs	r0, #48	; 0x30
 800996e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009972:	4422      	add	r2, r4
 8009974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800997c:	3302      	adds	r3, #2
 800997e:	e7c7      	b.n	8009910 <_printf_common+0x58>
 8009980:	2301      	movs	r3, #1
 8009982:	4622      	mov	r2, r4
 8009984:	4649      	mov	r1, r9
 8009986:	4638      	mov	r0, r7
 8009988:	47c0      	blx	r8
 800998a:	3001      	adds	r0, #1
 800998c:	d0e6      	beq.n	800995c <_printf_common+0xa4>
 800998e:	3601      	adds	r6, #1
 8009990:	e7d9      	b.n	8009946 <_printf_common+0x8e>
	...

08009994 <_printf_i>:
 8009994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	7e0f      	ldrb	r7, [r1, #24]
 800999a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800999c:	2f78      	cmp	r7, #120	; 0x78
 800999e:	4691      	mov	r9, r2
 80099a0:	4680      	mov	r8, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	469a      	mov	sl, r3
 80099a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099aa:	d807      	bhi.n	80099bc <_printf_i+0x28>
 80099ac:	2f62      	cmp	r7, #98	; 0x62
 80099ae:	d80a      	bhi.n	80099c6 <_printf_i+0x32>
 80099b0:	2f00      	cmp	r7, #0
 80099b2:	f000 80d8 	beq.w	8009b66 <_printf_i+0x1d2>
 80099b6:	2f58      	cmp	r7, #88	; 0x58
 80099b8:	f000 80a3 	beq.w	8009b02 <_printf_i+0x16e>
 80099bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099c4:	e03a      	b.n	8009a3c <_printf_i+0xa8>
 80099c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ca:	2b15      	cmp	r3, #21
 80099cc:	d8f6      	bhi.n	80099bc <_printf_i+0x28>
 80099ce:	a101      	add	r1, pc, #4	; (adr r1, 80099d4 <_printf_i+0x40>)
 80099d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099d4:	08009a2d 	.word	0x08009a2d
 80099d8:	08009a41 	.word	0x08009a41
 80099dc:	080099bd 	.word	0x080099bd
 80099e0:	080099bd 	.word	0x080099bd
 80099e4:	080099bd 	.word	0x080099bd
 80099e8:	080099bd 	.word	0x080099bd
 80099ec:	08009a41 	.word	0x08009a41
 80099f0:	080099bd 	.word	0x080099bd
 80099f4:	080099bd 	.word	0x080099bd
 80099f8:	080099bd 	.word	0x080099bd
 80099fc:	080099bd 	.word	0x080099bd
 8009a00:	08009b4d 	.word	0x08009b4d
 8009a04:	08009a71 	.word	0x08009a71
 8009a08:	08009b2f 	.word	0x08009b2f
 8009a0c:	080099bd 	.word	0x080099bd
 8009a10:	080099bd 	.word	0x080099bd
 8009a14:	08009b6f 	.word	0x08009b6f
 8009a18:	080099bd 	.word	0x080099bd
 8009a1c:	08009a71 	.word	0x08009a71
 8009a20:	080099bd 	.word	0x080099bd
 8009a24:	080099bd 	.word	0x080099bd
 8009a28:	08009b37 	.word	0x08009b37
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	602a      	str	r2, [r5, #0]
 8009a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e0a3      	b.n	8009b88 <_printf_i+0x1f4>
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	6829      	ldr	r1, [r5, #0]
 8009a44:	0606      	lsls	r6, r0, #24
 8009a46:	f101 0304 	add.w	r3, r1, #4
 8009a4a:	d50a      	bpl.n	8009a62 <_printf_i+0xce>
 8009a4c:	680e      	ldr	r6, [r1, #0]
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	2e00      	cmp	r6, #0
 8009a52:	da03      	bge.n	8009a5c <_printf_i+0xc8>
 8009a54:	232d      	movs	r3, #45	; 0x2d
 8009a56:	4276      	negs	r6, r6
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a5c:	485e      	ldr	r0, [pc, #376]	; (8009bd8 <_printf_i+0x244>)
 8009a5e:	230a      	movs	r3, #10
 8009a60:	e019      	b.n	8009a96 <_printf_i+0x102>
 8009a62:	680e      	ldr	r6, [r1, #0]
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a6a:	bf18      	it	ne
 8009a6c:	b236      	sxthne	r6, r6
 8009a6e:	e7ef      	b.n	8009a50 <_printf_i+0xbc>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	6820      	ldr	r0, [r4, #0]
 8009a74:	1d19      	adds	r1, r3, #4
 8009a76:	6029      	str	r1, [r5, #0]
 8009a78:	0601      	lsls	r1, r0, #24
 8009a7a:	d501      	bpl.n	8009a80 <_printf_i+0xec>
 8009a7c:	681e      	ldr	r6, [r3, #0]
 8009a7e:	e002      	b.n	8009a86 <_printf_i+0xf2>
 8009a80:	0646      	lsls	r6, r0, #25
 8009a82:	d5fb      	bpl.n	8009a7c <_printf_i+0xe8>
 8009a84:	881e      	ldrh	r6, [r3, #0]
 8009a86:	4854      	ldr	r0, [pc, #336]	; (8009bd8 <_printf_i+0x244>)
 8009a88:	2f6f      	cmp	r7, #111	; 0x6f
 8009a8a:	bf0c      	ite	eq
 8009a8c:	2308      	moveq	r3, #8
 8009a8e:	230a      	movne	r3, #10
 8009a90:	2100      	movs	r1, #0
 8009a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a96:	6865      	ldr	r5, [r4, #4]
 8009a98:	60a5      	str	r5, [r4, #8]
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	bfa2      	ittt	ge
 8009a9e:	6821      	ldrge	r1, [r4, #0]
 8009aa0:	f021 0104 	bicge.w	r1, r1, #4
 8009aa4:	6021      	strge	r1, [r4, #0]
 8009aa6:	b90e      	cbnz	r6, 8009aac <_printf_i+0x118>
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	d04d      	beq.n	8009b48 <_printf_i+0x1b4>
 8009aac:	4615      	mov	r5, r2
 8009aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ab6:	5dc7      	ldrb	r7, [r0, r7]
 8009ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009abc:	4637      	mov	r7, r6
 8009abe:	42bb      	cmp	r3, r7
 8009ac0:	460e      	mov	r6, r1
 8009ac2:	d9f4      	bls.n	8009aae <_printf_i+0x11a>
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d10b      	bne.n	8009ae0 <_printf_i+0x14c>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	07de      	lsls	r6, r3, #31
 8009acc:	d508      	bpl.n	8009ae0 <_printf_i+0x14c>
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	6861      	ldr	r1, [r4, #4]
 8009ad2:	4299      	cmp	r1, r3
 8009ad4:	bfde      	ittt	le
 8009ad6:	2330      	movle	r3, #48	; 0x30
 8009ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ae0:	1b52      	subs	r2, r2, r5
 8009ae2:	6122      	str	r2, [r4, #16]
 8009ae4:	f8cd a000 	str.w	sl, [sp]
 8009ae8:	464b      	mov	r3, r9
 8009aea:	aa03      	add	r2, sp, #12
 8009aec:	4621      	mov	r1, r4
 8009aee:	4640      	mov	r0, r8
 8009af0:	f7ff fee2 	bl	80098b8 <_printf_common>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d14c      	bne.n	8009b92 <_printf_i+0x1fe>
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	b004      	add	sp, #16
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	4835      	ldr	r0, [pc, #212]	; (8009bd8 <_printf_i+0x244>)
 8009b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b08:	6829      	ldr	r1, [r5, #0]
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b10:	6029      	str	r1, [r5, #0]
 8009b12:	061d      	lsls	r5, r3, #24
 8009b14:	d514      	bpl.n	8009b40 <_printf_i+0x1ac>
 8009b16:	07df      	lsls	r7, r3, #31
 8009b18:	bf44      	itt	mi
 8009b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b1e:	6023      	strmi	r3, [r4, #0]
 8009b20:	b91e      	cbnz	r6, 8009b2a <_printf_i+0x196>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	f023 0320 	bic.w	r3, r3, #32
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	2310      	movs	r3, #16
 8009b2c:	e7b0      	b.n	8009a90 <_printf_i+0xfc>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	f043 0320 	orr.w	r3, r3, #32
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	2378      	movs	r3, #120	; 0x78
 8009b38:	4828      	ldr	r0, [pc, #160]	; (8009bdc <_printf_i+0x248>)
 8009b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b3e:	e7e3      	b.n	8009b08 <_printf_i+0x174>
 8009b40:	0659      	lsls	r1, r3, #25
 8009b42:	bf48      	it	mi
 8009b44:	b2b6      	uxthmi	r6, r6
 8009b46:	e7e6      	b.n	8009b16 <_printf_i+0x182>
 8009b48:	4615      	mov	r5, r2
 8009b4a:	e7bb      	b.n	8009ac4 <_printf_i+0x130>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	6826      	ldr	r6, [r4, #0]
 8009b50:	6961      	ldr	r1, [r4, #20]
 8009b52:	1d18      	adds	r0, r3, #4
 8009b54:	6028      	str	r0, [r5, #0]
 8009b56:	0635      	lsls	r5, r6, #24
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	d501      	bpl.n	8009b60 <_printf_i+0x1cc>
 8009b5c:	6019      	str	r1, [r3, #0]
 8009b5e:	e002      	b.n	8009b66 <_printf_i+0x1d2>
 8009b60:	0670      	lsls	r0, r6, #25
 8009b62:	d5fb      	bpl.n	8009b5c <_printf_i+0x1c8>
 8009b64:	8019      	strh	r1, [r3, #0]
 8009b66:	2300      	movs	r3, #0
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	4615      	mov	r5, r2
 8009b6c:	e7ba      	b.n	8009ae4 <_printf_i+0x150>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	1d1a      	adds	r2, r3, #4
 8009b72:	602a      	str	r2, [r5, #0]
 8009b74:	681d      	ldr	r5, [r3, #0]
 8009b76:	6862      	ldr	r2, [r4, #4]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f7f6 fb38 	bl	80001f0 <memchr>
 8009b80:	b108      	cbz	r0, 8009b86 <_printf_i+0x1f2>
 8009b82:	1b40      	subs	r0, r0, r5
 8009b84:	6060      	str	r0, [r4, #4]
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b90:	e7a8      	b.n	8009ae4 <_printf_i+0x150>
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4649      	mov	r1, r9
 8009b98:	4640      	mov	r0, r8
 8009b9a:	47d0      	blx	sl
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d0ab      	beq.n	8009af8 <_printf_i+0x164>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	079b      	lsls	r3, r3, #30
 8009ba4:	d413      	bmi.n	8009bce <_printf_i+0x23a>
 8009ba6:	68e0      	ldr	r0, [r4, #12]
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	4298      	cmp	r0, r3
 8009bac:	bfb8      	it	lt
 8009bae:	4618      	movlt	r0, r3
 8009bb0:	e7a4      	b.n	8009afc <_printf_i+0x168>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	47d0      	blx	sl
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d09b      	beq.n	8009af8 <_printf_i+0x164>
 8009bc0:	3501      	adds	r5, #1
 8009bc2:	68e3      	ldr	r3, [r4, #12]
 8009bc4:	9903      	ldr	r1, [sp, #12]
 8009bc6:	1a5b      	subs	r3, r3, r1
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	dcf2      	bgt.n	8009bb2 <_printf_i+0x21e>
 8009bcc:	e7eb      	b.n	8009ba6 <_printf_i+0x212>
 8009bce:	2500      	movs	r5, #0
 8009bd0:	f104 0619 	add.w	r6, r4, #25
 8009bd4:	e7f5      	b.n	8009bc2 <_printf_i+0x22e>
 8009bd6:	bf00      	nop
 8009bd8:	0800c5ca 	.word	0x0800c5ca
 8009bdc:	0800c5db 	.word	0x0800c5db

08009be0 <iprintf>:
 8009be0:	b40f      	push	{r0, r1, r2, r3}
 8009be2:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <iprintf+0x2c>)
 8009be4:	b513      	push	{r0, r1, r4, lr}
 8009be6:	681c      	ldr	r4, [r3, #0]
 8009be8:	b124      	cbz	r4, 8009bf4 <iprintf+0x14>
 8009bea:	69a3      	ldr	r3, [r4, #24]
 8009bec:	b913      	cbnz	r3, 8009bf4 <iprintf+0x14>
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f7ff f9c8 	bl	8008f84 <__sinit>
 8009bf4:	ab05      	add	r3, sp, #20
 8009bf6:	9a04      	ldr	r2, [sp, #16]
 8009bf8:	68a1      	ldr	r1, [r4, #8]
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f001 fec1 	bl	800b984 <_vfiprintf_r>
 8009c02:	b002      	add	sp, #8
 8009c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c08:	b004      	add	sp, #16
 8009c0a:	4770      	bx	lr
 8009c0c:	20000014 	.word	0x20000014

08009c10 <_puts_r>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	460e      	mov	r6, r1
 8009c14:	4605      	mov	r5, r0
 8009c16:	b118      	cbz	r0, 8009c20 <_puts_r+0x10>
 8009c18:	6983      	ldr	r3, [r0, #24]
 8009c1a:	b90b      	cbnz	r3, 8009c20 <_puts_r+0x10>
 8009c1c:	f7ff f9b2 	bl	8008f84 <__sinit>
 8009c20:	69ab      	ldr	r3, [r5, #24]
 8009c22:	68ac      	ldr	r4, [r5, #8]
 8009c24:	b913      	cbnz	r3, 8009c2c <_puts_r+0x1c>
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7ff f9ac 	bl	8008f84 <__sinit>
 8009c2c:	4b2c      	ldr	r3, [pc, #176]	; (8009ce0 <_puts_r+0xd0>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	d120      	bne.n	8009c74 <_puts_r+0x64>
 8009c32:	686c      	ldr	r4, [r5, #4]
 8009c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c36:	07db      	lsls	r3, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_puts_r+0x36>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	0598      	lsls	r0, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_puts_r+0x36>
 8009c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c42:	f7ff fa62 	bl	800910a <__retarget_lock_acquire_recursive>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	0719      	lsls	r1, r3, #28
 8009c4a:	d51d      	bpl.n	8009c88 <_puts_r+0x78>
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	b1db      	cbz	r3, 8009c88 <_puts_r+0x78>
 8009c50:	3e01      	subs	r6, #1
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	60a3      	str	r3, [r4, #8]
 8009c5c:	bb39      	cbnz	r1, 8009cae <_puts_r+0x9e>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da38      	bge.n	8009cd4 <_puts_r+0xc4>
 8009c62:	4622      	mov	r2, r4
 8009c64:	210a      	movs	r1, #10
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f948 	bl	8009efc <__swbuf_r>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d011      	beq.n	8009c94 <_puts_r+0x84>
 8009c70:	250a      	movs	r5, #10
 8009c72:	e011      	b.n	8009c98 <_puts_r+0x88>
 8009c74:	4b1b      	ldr	r3, [pc, #108]	; (8009ce4 <_puts_r+0xd4>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	d101      	bne.n	8009c7e <_puts_r+0x6e>
 8009c7a:	68ac      	ldr	r4, [r5, #8]
 8009c7c:	e7da      	b.n	8009c34 <_puts_r+0x24>
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <_puts_r+0xd8>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	bf08      	it	eq
 8009c84:	68ec      	ldreq	r4, [r5, #12]
 8009c86:	e7d5      	b.n	8009c34 <_puts_r+0x24>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f99a 	bl	8009fc4 <__swsetup_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d0dd      	beq.n	8009c50 <_puts_r+0x40>
 8009c94:	f04f 35ff 	mov.w	r5, #4294967295
 8009c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c9a:	07da      	lsls	r2, r3, #31
 8009c9c:	d405      	bmi.n	8009caa <_puts_r+0x9a>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	059b      	lsls	r3, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_puts_r+0x9a>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca6:	f7ff fa31 	bl	800910c <__retarget_lock_release_recursive>
 8009caa:	4628      	mov	r0, r5
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	da04      	bge.n	8009cbc <_puts_r+0xac>
 8009cb2:	69a2      	ldr	r2, [r4, #24]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	dc06      	bgt.n	8009cc6 <_puts_r+0xb6>
 8009cb8:	290a      	cmp	r1, #10
 8009cba:	d004      	beq.n	8009cc6 <_puts_r+0xb6>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	6022      	str	r2, [r4, #0]
 8009cc2:	7019      	strb	r1, [r3, #0]
 8009cc4:	e7c5      	b.n	8009c52 <_puts_r+0x42>
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 f917 	bl	8009efc <__swbuf_r>
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d1bf      	bne.n	8009c52 <_puts_r+0x42>
 8009cd2:	e7df      	b.n	8009c94 <_puts_r+0x84>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	250a      	movs	r5, #10
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	6022      	str	r2, [r4, #0]
 8009cdc:	701d      	strb	r5, [r3, #0]
 8009cde:	e7db      	b.n	8009c98 <_puts_r+0x88>
 8009ce0:	0800c574 	.word	0x0800c574
 8009ce4:	0800c594 	.word	0x0800c594
 8009ce8:	0800c554 	.word	0x0800c554

08009cec <puts>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <puts+0xc>)
 8009cee:	4601      	mov	r1, r0
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	f7ff bf8d 	b.w	8009c10 <_puts_r>
 8009cf6:	bf00      	nop
 8009cf8:	20000014 	.word	0x20000014

08009cfc <cleanup_glue>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	460c      	mov	r4, r1
 8009d00:	6809      	ldr	r1, [r1, #0]
 8009d02:	4605      	mov	r5, r0
 8009d04:	b109      	cbz	r1, 8009d0a <cleanup_glue+0xe>
 8009d06:	f7ff fff9 	bl	8009cfc <cleanup_glue>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d12:	f7ff ba1b 	b.w	800914c <_free_r>
	...

08009d18 <_reclaim_reent>:
 8009d18:	4b2c      	ldr	r3, [pc, #176]	; (8009dcc <_reclaim_reent+0xb4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4283      	cmp	r3, r0
 8009d1e:	b570      	push	{r4, r5, r6, lr}
 8009d20:	4604      	mov	r4, r0
 8009d22:	d051      	beq.n	8009dc8 <_reclaim_reent+0xb0>
 8009d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d26:	b143      	cbz	r3, 8009d3a <_reclaim_reent+0x22>
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d14a      	bne.n	8009dc4 <_reclaim_reent+0xac>
 8009d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d30:	6819      	ldr	r1, [r3, #0]
 8009d32:	b111      	cbz	r1, 8009d3a <_reclaim_reent+0x22>
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7ff fa09 	bl	800914c <_free_r>
 8009d3a:	6961      	ldr	r1, [r4, #20]
 8009d3c:	b111      	cbz	r1, 8009d44 <_reclaim_reent+0x2c>
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7ff fa04 	bl	800914c <_free_r>
 8009d44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d46:	b111      	cbz	r1, 8009d4e <_reclaim_reent+0x36>
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7ff f9ff 	bl	800914c <_free_r>
 8009d4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d50:	b111      	cbz	r1, 8009d58 <_reclaim_reent+0x40>
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7ff f9fa 	bl	800914c <_free_r>
 8009d58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d5a:	b111      	cbz	r1, 8009d62 <_reclaim_reent+0x4a>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7ff f9f5 	bl	800914c <_free_r>
 8009d62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d64:	b111      	cbz	r1, 8009d6c <_reclaim_reent+0x54>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7ff f9f0 	bl	800914c <_free_r>
 8009d6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d6e:	b111      	cbz	r1, 8009d76 <_reclaim_reent+0x5e>
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff f9eb 	bl	800914c <_free_r>
 8009d76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d78:	b111      	cbz	r1, 8009d80 <_reclaim_reent+0x68>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff f9e6 	bl	800914c <_free_r>
 8009d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d82:	b111      	cbz	r1, 8009d8a <_reclaim_reent+0x72>
 8009d84:	4620      	mov	r0, r4
 8009d86:	f7ff f9e1 	bl	800914c <_free_r>
 8009d8a:	69a3      	ldr	r3, [r4, #24]
 8009d8c:	b1e3      	cbz	r3, 8009dc8 <_reclaim_reent+0xb0>
 8009d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d90:	4620      	mov	r0, r4
 8009d92:	4798      	blx	r3
 8009d94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d96:	b1b9      	cbz	r1, 8009dc8 <_reclaim_reent+0xb0>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d9e:	f7ff bfad 	b.w	8009cfc <cleanup_glue>
 8009da2:	5949      	ldr	r1, [r1, r5]
 8009da4:	b941      	cbnz	r1, 8009db8 <_reclaim_reent+0xa0>
 8009da6:	3504      	adds	r5, #4
 8009da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009daa:	2d80      	cmp	r5, #128	; 0x80
 8009dac:	68d9      	ldr	r1, [r3, #12]
 8009dae:	d1f8      	bne.n	8009da2 <_reclaim_reent+0x8a>
 8009db0:	4620      	mov	r0, r4
 8009db2:	f7ff f9cb 	bl	800914c <_free_r>
 8009db6:	e7ba      	b.n	8009d2e <_reclaim_reent+0x16>
 8009db8:	680e      	ldr	r6, [r1, #0]
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff f9c6 	bl	800914c <_free_r>
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	e7ef      	b.n	8009da4 <_reclaim_reent+0x8c>
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	e7ef      	b.n	8009da8 <_reclaim_reent+0x90>
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000014 	.word	0x20000014

08009dd0 <_sbrk_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d06      	ldr	r5, [pc, #24]	; (8009dec <_sbrk_r+0x1c>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	602b      	str	r3, [r5, #0]
 8009ddc:	f7f8 f96e 	bl	80020bc <_sbrk>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_sbrk_r+0x1a>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_sbrk_r+0x1a>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	200162dc 	.word	0x200162dc

08009df0 <siprintf>:
 8009df0:	b40e      	push	{r1, r2, r3}
 8009df2:	b500      	push	{lr}
 8009df4:	b09c      	sub	sp, #112	; 0x70
 8009df6:	ab1d      	add	r3, sp, #116	; 0x74
 8009df8:	9002      	str	r0, [sp, #8]
 8009dfa:	9006      	str	r0, [sp, #24]
 8009dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e00:	4809      	ldr	r0, [pc, #36]	; (8009e28 <siprintf+0x38>)
 8009e02:	9107      	str	r1, [sp, #28]
 8009e04:	9104      	str	r1, [sp, #16]
 8009e06:	4909      	ldr	r1, [pc, #36]	; (8009e2c <siprintf+0x3c>)
 8009e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0c:	9105      	str	r1, [sp, #20]
 8009e0e:	6800      	ldr	r0, [r0, #0]
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	a902      	add	r1, sp, #8
 8009e14:	f001 fc8c 	bl	800b730 <_svfiprintf_r>
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
 8009e1e:	b01c      	add	sp, #112	; 0x70
 8009e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e24:	b003      	add	sp, #12
 8009e26:	4770      	bx	lr
 8009e28:	20000014 	.word	0x20000014
 8009e2c:	ffff0208 	.word	0xffff0208

08009e30 <__sread>:
 8009e30:	b510      	push	{r4, lr}
 8009e32:	460c      	mov	r4, r1
 8009e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e38:	f001 fed4 	bl	800bbe4 <_read_r>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	bfab      	itete	ge
 8009e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e42:	89a3      	ldrhlt	r3, [r4, #12]
 8009e44:	181b      	addge	r3, r3, r0
 8009e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e4a:	bfac      	ite	ge
 8009e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e4e:	81a3      	strhlt	r3, [r4, #12]
 8009e50:	bd10      	pop	{r4, pc}

08009e52 <__swrite>:
 8009e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e56:	461f      	mov	r7, r3
 8009e58:	898b      	ldrh	r3, [r1, #12]
 8009e5a:	05db      	lsls	r3, r3, #23
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	4616      	mov	r6, r2
 8009e62:	d505      	bpl.n	8009e70 <__swrite+0x1e>
 8009e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e68:	2302      	movs	r3, #2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f000 ffa6 	bl	800adbc <_lseek_r>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	463b      	mov	r3, r7
 8009e80:	4628      	mov	r0, r5
 8009e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e86:	f000 b88b 	b.w	8009fa0 <_write_r>

08009e8a <__sseek>:
 8009e8a:	b510      	push	{r4, lr}
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e92:	f000 ff93 	bl	800adbc <_lseek_r>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	bf15      	itete	ne
 8009e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ea6:	81a3      	strheq	r3, [r4, #12]
 8009ea8:	bf18      	it	ne
 8009eaa:	81a3      	strhne	r3, [r4, #12]
 8009eac:	bd10      	pop	{r4, pc}

08009eae <__sclose>:
 8009eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb2:	f000 b8f5 	b.w	800a0a0 <_close_r>

08009eb6 <strchr>:
 8009eb6:	b2c9      	uxtb	r1, r1
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ebe:	b11a      	cbz	r2, 8009ec8 <strchr+0x12>
 8009ec0:	428a      	cmp	r2, r1
 8009ec2:	d1f9      	bne.n	8009eb8 <strchr+0x2>
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	4770      	bx	lr
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	bf18      	it	ne
 8009ecc:	2300      	movne	r3, #0
 8009ece:	e7f9      	b.n	8009ec4 <strchr+0xe>

08009ed0 <strstr>:
 8009ed0:	780a      	ldrb	r2, [r1, #0]
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	b96a      	cbnz	r2, 8009ef2 <strstr+0x22>
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d109      	bne.n	8009ef0 <strstr+0x20>
 8009edc:	460c      	mov	r4, r1
 8009ede:	4605      	mov	r5, r0
 8009ee0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0f6      	beq.n	8009ed6 <strstr+0x6>
 8009ee8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009eec:	429e      	cmp	r6, r3
 8009eee:	d0f7      	beq.n	8009ee0 <strstr+0x10>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	7803      	ldrb	r3, [r0, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1ef      	bne.n	8009ed8 <strstr+0x8>
 8009ef8:	4618      	mov	r0, r3
 8009efa:	e7ec      	b.n	8009ed6 <strstr+0x6>

08009efc <__swbuf_r>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	460e      	mov	r6, r1
 8009f00:	4614      	mov	r4, r2
 8009f02:	4605      	mov	r5, r0
 8009f04:	b118      	cbz	r0, 8009f0e <__swbuf_r+0x12>
 8009f06:	6983      	ldr	r3, [r0, #24]
 8009f08:	b90b      	cbnz	r3, 8009f0e <__swbuf_r+0x12>
 8009f0a:	f7ff f83b 	bl	8008f84 <__sinit>
 8009f0e:	4b21      	ldr	r3, [pc, #132]	; (8009f94 <__swbuf_r+0x98>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	d12b      	bne.n	8009f6c <__swbuf_r+0x70>
 8009f14:	686c      	ldr	r4, [r5, #4]
 8009f16:	69a3      	ldr	r3, [r4, #24]
 8009f18:	60a3      	str	r3, [r4, #8]
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	071a      	lsls	r2, r3, #28
 8009f1e:	d52f      	bpl.n	8009f80 <__swbuf_r+0x84>
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	b36b      	cbz	r3, 8009f80 <__swbuf_r+0x84>
 8009f24:	6923      	ldr	r3, [r4, #16]
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	1ac0      	subs	r0, r0, r3
 8009f2a:	6963      	ldr	r3, [r4, #20]
 8009f2c:	b2f6      	uxtb	r6, r6
 8009f2e:	4283      	cmp	r3, r0
 8009f30:	4637      	mov	r7, r6
 8009f32:	dc04      	bgt.n	8009f3e <__swbuf_r+0x42>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	f7fe ff7e 	bl	8008e38 <_fflush_r>
 8009f3c:	bb30      	cbnz	r0, 8009f8c <__swbuf_r+0x90>
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	60a3      	str	r3, [r4, #8]
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	6022      	str	r2, [r4, #0]
 8009f4a:	701e      	strb	r6, [r3, #0]
 8009f4c:	6963      	ldr	r3, [r4, #20]
 8009f4e:	3001      	adds	r0, #1
 8009f50:	4283      	cmp	r3, r0
 8009f52:	d004      	beq.n	8009f5e <__swbuf_r+0x62>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	07db      	lsls	r3, r3, #31
 8009f58:	d506      	bpl.n	8009f68 <__swbuf_r+0x6c>
 8009f5a:	2e0a      	cmp	r6, #10
 8009f5c:	d104      	bne.n	8009f68 <__swbuf_r+0x6c>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f7fe ff69 	bl	8008e38 <_fflush_r>
 8009f66:	b988      	cbnz	r0, 8009f8c <__swbuf_r+0x90>
 8009f68:	4638      	mov	r0, r7
 8009f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <__swbuf_r+0x9c>)
 8009f6e:	429c      	cmp	r4, r3
 8009f70:	d101      	bne.n	8009f76 <__swbuf_r+0x7a>
 8009f72:	68ac      	ldr	r4, [r5, #8]
 8009f74:	e7cf      	b.n	8009f16 <__swbuf_r+0x1a>
 8009f76:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <__swbuf_r+0xa0>)
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	bf08      	it	eq
 8009f7c:	68ec      	ldreq	r4, [r5, #12]
 8009f7e:	e7ca      	b.n	8009f16 <__swbuf_r+0x1a>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f81e 	bl	8009fc4 <__swsetup_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d0cb      	beq.n	8009f24 <__swbuf_r+0x28>
 8009f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f90:	e7ea      	b.n	8009f68 <__swbuf_r+0x6c>
 8009f92:	bf00      	nop
 8009f94:	0800c574 	.word	0x0800c574
 8009f98:	0800c594 	.word	0x0800c594
 8009f9c:	0800c554 	.word	0x0800c554

08009fa0 <_write_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d07      	ldr	r5, [pc, #28]	; (8009fc0 <_write_r+0x20>)
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	4608      	mov	r0, r1
 8009fa8:	4611      	mov	r1, r2
 8009faa:	2200      	movs	r2, #0
 8009fac:	602a      	str	r2, [r5, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f7f7 fbf4 	bl	800179c <_write>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_write_r+0x1e>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_write_r+0x1e>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	200162dc 	.word	0x200162dc

08009fc4 <__swsetup_r>:
 8009fc4:	4b32      	ldr	r3, [pc, #200]	; (800a090 <__swsetup_r+0xcc>)
 8009fc6:	b570      	push	{r4, r5, r6, lr}
 8009fc8:	681d      	ldr	r5, [r3, #0]
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460c      	mov	r4, r1
 8009fce:	b125      	cbz	r5, 8009fda <__swsetup_r+0x16>
 8009fd0:	69ab      	ldr	r3, [r5, #24]
 8009fd2:	b913      	cbnz	r3, 8009fda <__swsetup_r+0x16>
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f7fe ffd5 	bl	8008f84 <__sinit>
 8009fda:	4b2e      	ldr	r3, [pc, #184]	; (800a094 <__swsetup_r+0xd0>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	d10f      	bne.n	800a000 <__swsetup_r+0x3c>
 8009fe0:	686c      	ldr	r4, [r5, #4]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe8:	0719      	lsls	r1, r3, #28
 8009fea:	d42c      	bmi.n	800a046 <__swsetup_r+0x82>
 8009fec:	06dd      	lsls	r5, r3, #27
 8009fee:	d411      	bmi.n	800a014 <__swsetup_r+0x50>
 8009ff0:	2309      	movs	r3, #9
 8009ff2:	6033      	str	r3, [r6, #0]
 8009ff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ff8:	81a3      	strh	r3, [r4, #12]
 8009ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffe:	e03e      	b.n	800a07e <__swsetup_r+0xba>
 800a000:	4b25      	ldr	r3, [pc, #148]	; (800a098 <__swsetup_r+0xd4>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d101      	bne.n	800a00a <__swsetup_r+0x46>
 800a006:	68ac      	ldr	r4, [r5, #8]
 800a008:	e7eb      	b.n	8009fe2 <__swsetup_r+0x1e>
 800a00a:	4b24      	ldr	r3, [pc, #144]	; (800a09c <__swsetup_r+0xd8>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	bf08      	it	eq
 800a010:	68ec      	ldreq	r4, [r5, #12]
 800a012:	e7e6      	b.n	8009fe2 <__swsetup_r+0x1e>
 800a014:	0758      	lsls	r0, r3, #29
 800a016:	d512      	bpl.n	800a03e <__swsetup_r+0x7a>
 800a018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a01a:	b141      	cbz	r1, 800a02e <__swsetup_r+0x6a>
 800a01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a020:	4299      	cmp	r1, r3
 800a022:	d002      	beq.n	800a02a <__swsetup_r+0x66>
 800a024:	4630      	mov	r0, r6
 800a026:	f7ff f891 	bl	800914c <_free_r>
 800a02a:	2300      	movs	r3, #0
 800a02c:	6363      	str	r3, [r4, #52]	; 0x34
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	2300      	movs	r3, #0
 800a038:	6063      	str	r3, [r4, #4]
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	f043 0308 	orr.w	r3, r3, #8
 800a044:	81a3      	strh	r3, [r4, #12]
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	b94b      	cbnz	r3, 800a05e <__swsetup_r+0x9a>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a054:	d003      	beq.n	800a05e <__swsetup_r+0x9a>
 800a056:	4621      	mov	r1, r4
 800a058:	4630      	mov	r0, r6
 800a05a:	f000 fee7 	bl	800ae2c <__smakebuf_r>
 800a05e:	89a0      	ldrh	r0, [r4, #12]
 800a060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a064:	f010 0301 	ands.w	r3, r0, #1
 800a068:	d00a      	beq.n	800a080 <__swsetup_r+0xbc>
 800a06a:	2300      	movs	r3, #0
 800a06c:	60a3      	str	r3, [r4, #8]
 800a06e:	6963      	ldr	r3, [r4, #20]
 800a070:	425b      	negs	r3, r3
 800a072:	61a3      	str	r3, [r4, #24]
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	b943      	cbnz	r3, 800a08a <__swsetup_r+0xc6>
 800a078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a07c:	d1ba      	bne.n	8009ff4 <__swsetup_r+0x30>
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	0781      	lsls	r1, r0, #30
 800a082:	bf58      	it	pl
 800a084:	6963      	ldrpl	r3, [r4, #20]
 800a086:	60a3      	str	r3, [r4, #8]
 800a088:	e7f4      	b.n	800a074 <__swsetup_r+0xb0>
 800a08a:	2000      	movs	r0, #0
 800a08c:	e7f7      	b.n	800a07e <__swsetup_r+0xba>
 800a08e:	bf00      	nop
 800a090:	20000014 	.word	0x20000014
 800a094:	0800c574 	.word	0x0800c574
 800a098:	0800c594 	.word	0x0800c594
 800a09c:	0800c554 	.word	0x0800c554

0800a0a0 <_close_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d06      	ldr	r5, [pc, #24]	; (800a0bc <_close_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7f7 ffd1 	bl	8002052 <_close>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_close_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_close_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	200162dc 	.word	0x200162dc

0800a0c0 <quorem>:
 800a0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	6903      	ldr	r3, [r0, #16]
 800a0c6:	690c      	ldr	r4, [r1, #16]
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	f2c0 8081 	blt.w	800a1d2 <quorem+0x112>
 800a0d0:	3c01      	subs	r4, #1
 800a0d2:	f101 0814 	add.w	r8, r1, #20
 800a0d6:	f100 0514 	add.w	r5, r0, #20
 800a0da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0f8:	d331      	bcc.n	800a15e <quorem+0x9e>
 800a0fa:	f04f 0e00 	mov.w	lr, #0
 800a0fe:	4640      	mov	r0, r8
 800a100:	46ac      	mov	ip, r5
 800a102:	46f2      	mov	sl, lr
 800a104:	f850 2b04 	ldr.w	r2, [r0], #4
 800a108:	b293      	uxth	r3, r2
 800a10a:	fb06 e303 	mla	r3, r6, r3, lr
 800a10e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a112:	b29b      	uxth	r3, r3
 800a114:	ebaa 0303 	sub.w	r3, sl, r3
 800a118:	f8dc a000 	ldr.w	sl, [ip]
 800a11c:	0c12      	lsrs	r2, r2, #16
 800a11e:	fa13 f38a 	uxtah	r3, r3, sl
 800a122:	fb06 e202 	mla	r2, r6, r2, lr
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	9b00      	ldr	r3, [sp, #0]
 800a12a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a12e:	b292      	uxth	r2, r2
 800a130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a138:	f8bd 3000 	ldrh.w	r3, [sp]
 800a13c:	4581      	cmp	r9, r0
 800a13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a142:	f84c 3b04 	str.w	r3, [ip], #4
 800a146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a14a:	d2db      	bcs.n	800a104 <quorem+0x44>
 800a14c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a150:	b92b      	cbnz	r3, 800a15e <quorem+0x9e>
 800a152:	9b01      	ldr	r3, [sp, #4]
 800a154:	3b04      	subs	r3, #4
 800a156:	429d      	cmp	r5, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	d32e      	bcc.n	800a1ba <quorem+0xfa>
 800a15c:	613c      	str	r4, [r7, #16]
 800a15e:	4638      	mov	r0, r7
 800a160:	f001 f944 	bl	800b3ec <__mcmp>
 800a164:	2800      	cmp	r0, #0
 800a166:	db24      	blt.n	800a1b2 <quorem+0xf2>
 800a168:	3601      	adds	r6, #1
 800a16a:	4628      	mov	r0, r5
 800a16c:	f04f 0c00 	mov.w	ip, #0
 800a170:	f858 2b04 	ldr.w	r2, [r8], #4
 800a174:	f8d0 e000 	ldr.w	lr, [r0]
 800a178:	b293      	uxth	r3, r2
 800a17a:	ebac 0303 	sub.w	r3, ip, r3
 800a17e:	0c12      	lsrs	r2, r2, #16
 800a180:	fa13 f38e 	uxtah	r3, r3, lr
 800a184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a192:	45c1      	cmp	r9, r8
 800a194:	f840 3b04 	str.w	r3, [r0], #4
 800a198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a19c:	d2e8      	bcs.n	800a170 <quorem+0xb0>
 800a19e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a6:	b922      	cbnz	r2, 800a1b2 <quorem+0xf2>
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	429d      	cmp	r5, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	d30a      	bcc.n	800a1c6 <quorem+0x106>
 800a1b0:	613c      	str	r4, [r7, #16]
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	b003      	add	sp, #12
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	6812      	ldr	r2, [r2, #0]
 800a1bc:	3b04      	subs	r3, #4
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	d1cc      	bne.n	800a15c <quorem+0x9c>
 800a1c2:	3c01      	subs	r4, #1
 800a1c4:	e7c7      	b.n	800a156 <quorem+0x96>
 800a1c6:	6812      	ldr	r2, [r2, #0]
 800a1c8:	3b04      	subs	r3, #4
 800a1ca:	2a00      	cmp	r2, #0
 800a1cc:	d1f0      	bne.n	800a1b0 <quorem+0xf0>
 800a1ce:	3c01      	subs	r4, #1
 800a1d0:	e7eb      	b.n	800a1aa <quorem+0xea>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e7ee      	b.n	800a1b4 <quorem+0xf4>
	...

0800a1d8 <_dtoa_r>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	ed2d 8b04 	vpush	{d8-d9}
 800a1e0:	ec57 6b10 	vmov	r6, r7, d0
 800a1e4:	b093      	sub	sp, #76	; 0x4c
 800a1e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1ec:	9106      	str	r1, [sp, #24]
 800a1ee:	ee10 aa10 	vmov	sl, s0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1f8:	46bb      	mov	fp, r7
 800a1fa:	b975      	cbnz	r5, 800a21a <_dtoa_r+0x42>
 800a1fc:	2010      	movs	r0, #16
 800a1fe:	f7fe ff87 	bl	8009110 <malloc>
 800a202:	4602      	mov	r2, r0
 800a204:	6260      	str	r0, [r4, #36]	; 0x24
 800a206:	b920      	cbnz	r0, 800a212 <_dtoa_r+0x3a>
 800a208:	4ba7      	ldr	r3, [pc, #668]	; (800a4a8 <_dtoa_r+0x2d0>)
 800a20a:	21ea      	movs	r1, #234	; 0xea
 800a20c:	48a7      	ldr	r0, [pc, #668]	; (800a4ac <_dtoa_r+0x2d4>)
 800a20e:	f001 fd09 	bl	800bc24 <__assert_func>
 800a212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a216:	6005      	str	r5, [r0, #0]
 800a218:	60c5      	str	r5, [r0, #12]
 800a21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a21c:	6819      	ldr	r1, [r3, #0]
 800a21e:	b151      	cbz	r1, 800a236 <_dtoa_r+0x5e>
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	604a      	str	r2, [r1, #4]
 800a224:	2301      	movs	r3, #1
 800a226:	4093      	lsls	r3, r2
 800a228:	608b      	str	r3, [r1, #8]
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fe9c 	bl	800af68 <_Bfree>
 800a230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	1e3b      	subs	r3, r7, #0
 800a238:	bfaa      	itet	ge
 800a23a:	2300      	movge	r3, #0
 800a23c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a240:	f8c8 3000 	strge.w	r3, [r8]
 800a244:	4b9a      	ldr	r3, [pc, #616]	; (800a4b0 <_dtoa_r+0x2d8>)
 800a246:	bfbc      	itt	lt
 800a248:	2201      	movlt	r2, #1
 800a24a:	f8c8 2000 	strlt.w	r2, [r8]
 800a24e:	ea33 030b 	bics.w	r3, r3, fp
 800a252:	d11b      	bne.n	800a28c <_dtoa_r+0xb4>
 800a254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a256:	f242 730f 	movw	r3, #9999	; 0x270f
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a260:	4333      	orrs	r3, r6
 800a262:	f000 8592 	beq.w	800ad8a <_dtoa_r+0xbb2>
 800a266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a268:	b963      	cbnz	r3, 800a284 <_dtoa_r+0xac>
 800a26a:	4b92      	ldr	r3, [pc, #584]	; (800a4b4 <_dtoa_r+0x2dc>)
 800a26c:	e022      	b.n	800a2b4 <_dtoa_r+0xdc>
 800a26e:	4b92      	ldr	r3, [pc, #584]	; (800a4b8 <_dtoa_r+0x2e0>)
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	3308      	adds	r3, #8
 800a274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	9801      	ldr	r0, [sp, #4]
 800a27a:	b013      	add	sp, #76	; 0x4c
 800a27c:	ecbd 8b04 	vpop	{d8-d9}
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a284:	4b8b      	ldr	r3, [pc, #556]	; (800a4b4 <_dtoa_r+0x2dc>)
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	3303      	adds	r3, #3
 800a28a:	e7f3      	b.n	800a274 <_dtoa_r+0x9c>
 800a28c:	2200      	movs	r2, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	f7f6 fc20 	bl	8000ad8 <__aeabi_dcmpeq>
 800a298:	ec4b ab19 	vmov	d9, sl, fp
 800a29c:	4680      	mov	r8, r0
 800a29e:	b158      	cbz	r0, 800a2b8 <_dtoa_r+0xe0>
 800a2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 856b 	beq.w	800ad84 <_dtoa_r+0xbac>
 800a2ae:	4883      	ldr	r0, [pc, #524]	; (800a4bc <_dtoa_r+0x2e4>)
 800a2b0:	6018      	str	r0, [r3, #0]
 800a2b2:	1e43      	subs	r3, r0, #1
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	e7df      	b.n	800a278 <_dtoa_r+0xa0>
 800a2b8:	ec4b ab10 	vmov	d0, sl, fp
 800a2bc:	aa10      	add	r2, sp, #64	; 0x40
 800a2be:	a911      	add	r1, sp, #68	; 0x44
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f001 f939 	bl	800b538 <__d2b>
 800a2c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a2ca:	ee08 0a10 	vmov	s16, r0
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	f000 8084 	beq.w	800a3dc <_dtoa_r+0x204>
 800a2d4:	ee19 3a90 	vmov	r3, s19
 800a2d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a2e0:	4656      	mov	r6, sl
 800a2e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a2e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a2ee:	4b74      	ldr	r3, [pc, #464]	; (800a4c0 <_dtoa_r+0x2e8>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f5 ffcf 	bl	8000298 <__aeabi_dsub>
 800a2fa:	a365      	add	r3, pc, #404	; (adr r3, 800a490 <_dtoa_r+0x2b8>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f7f6 f982 	bl	8000608 <__aeabi_dmul>
 800a304:	a364      	add	r3, pc, #400	; (adr r3, 800a498 <_dtoa_r+0x2c0>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ffc7 	bl	800029c <__adddf3>
 800a30e:	4606      	mov	r6, r0
 800a310:	4628      	mov	r0, r5
 800a312:	460f      	mov	r7, r1
 800a314:	f7f6 f90e 	bl	8000534 <__aeabi_i2d>
 800a318:	a361      	add	r3, pc, #388	; (adr r3, 800a4a0 <_dtoa_r+0x2c8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f6 f973 	bl	8000608 <__aeabi_dmul>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	f7f5 ffb7 	bl	800029c <__adddf3>
 800a32e:	4606      	mov	r6, r0
 800a330:	460f      	mov	r7, r1
 800a332:	f7f6 fc19 	bl	8000b68 <__aeabi_d2iz>
 800a336:	2200      	movs	r2, #0
 800a338:	9000      	str	r0, [sp, #0]
 800a33a:	2300      	movs	r3, #0
 800a33c:	4630      	mov	r0, r6
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f6 fbd4 	bl	8000aec <__aeabi_dcmplt>
 800a344:	b150      	cbz	r0, 800a35c <_dtoa_r+0x184>
 800a346:	9800      	ldr	r0, [sp, #0]
 800a348:	f7f6 f8f4 	bl	8000534 <__aeabi_i2d>
 800a34c:	4632      	mov	r2, r6
 800a34e:	463b      	mov	r3, r7
 800a350:	f7f6 fbc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a354:	b910      	cbnz	r0, 800a35c <_dtoa_r+0x184>
 800a356:	9b00      	ldr	r3, [sp, #0]
 800a358:	3b01      	subs	r3, #1
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	9b00      	ldr	r3, [sp, #0]
 800a35e:	2b16      	cmp	r3, #22
 800a360:	d85a      	bhi.n	800a418 <_dtoa_r+0x240>
 800a362:	9a00      	ldr	r2, [sp, #0]
 800a364:	4b57      	ldr	r3, [pc, #348]	; (800a4c4 <_dtoa_r+0x2ec>)
 800a366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	ec51 0b19 	vmov	r0, r1, d9
 800a372:	f7f6 fbbb 	bl	8000aec <__aeabi_dcmplt>
 800a376:	2800      	cmp	r0, #0
 800a378:	d050      	beq.n	800a41c <_dtoa_r+0x244>
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2300      	movs	r3, #0
 800a382:	930b      	str	r3, [sp, #44]	; 0x2c
 800a384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a386:	1b5d      	subs	r5, r3, r5
 800a388:	1e6b      	subs	r3, r5, #1
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	bf45      	ittet	mi
 800a38e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a392:	9304      	strmi	r3, [sp, #16]
 800a394:	2300      	movpl	r3, #0
 800a396:	2300      	movmi	r3, #0
 800a398:	bf4c      	ite	mi
 800a39a:	9305      	strmi	r3, [sp, #20]
 800a39c:	9304      	strpl	r3, [sp, #16]
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	db3d      	blt.n	800a420 <_dtoa_r+0x248>
 800a3a4:	9b05      	ldr	r3, [sp, #20]
 800a3a6:	9a00      	ldr	r2, [sp, #0]
 800a3a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a3aa:	4413      	add	r3, r2
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	9b06      	ldr	r3, [sp, #24]
 800a3b4:	2b09      	cmp	r3, #9
 800a3b6:	f200 8089 	bhi.w	800a4cc <_dtoa_r+0x2f4>
 800a3ba:	2b05      	cmp	r3, #5
 800a3bc:	bfc4      	itt	gt
 800a3be:	3b04      	subgt	r3, #4
 800a3c0:	9306      	strgt	r3, [sp, #24]
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	f1a3 0302 	sub.w	r3, r3, #2
 800a3c8:	bfcc      	ite	gt
 800a3ca:	2500      	movgt	r5, #0
 800a3cc:	2501      	movle	r5, #1
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	f200 8087 	bhi.w	800a4e2 <_dtoa_r+0x30a>
 800a3d4:	e8df f003 	tbb	[pc, r3]
 800a3d8:	59383a2d 	.word	0x59383a2d
 800a3dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3e0:	441d      	add	r5, r3
 800a3e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3e6:	2b20      	cmp	r3, #32
 800a3e8:	bfc1      	itttt	gt
 800a3ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a3f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3fa:	bfda      	itte	le
 800a3fc:	f1c3 0320 	rsble	r3, r3, #32
 800a400:	fa06 f003 	lslle.w	r0, r6, r3
 800a404:	4318      	orrgt	r0, r3
 800a406:	f7f6 f885 	bl	8000514 <__aeabi_ui2d>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4606      	mov	r6, r0
 800a40e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a412:	3d01      	subs	r5, #1
 800a414:	930e      	str	r3, [sp, #56]	; 0x38
 800a416:	e76a      	b.n	800a2ee <_dtoa_r+0x116>
 800a418:	2301      	movs	r3, #1
 800a41a:	e7b2      	b.n	800a382 <_dtoa_r+0x1aa>
 800a41c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a41e:	e7b1      	b.n	800a384 <_dtoa_r+0x1ac>
 800a420:	9b04      	ldr	r3, [sp, #16]
 800a422:	9a00      	ldr	r2, [sp, #0]
 800a424:	1a9b      	subs	r3, r3, r2
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	4253      	negs	r3, r2
 800a42a:	9307      	str	r3, [sp, #28]
 800a42c:	2300      	movs	r3, #0
 800a42e:	930a      	str	r3, [sp, #40]	; 0x28
 800a430:	e7bf      	b.n	800a3b2 <_dtoa_r+0x1da>
 800a432:	2300      	movs	r3, #0
 800a434:	9308      	str	r3, [sp, #32]
 800a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc55      	bgt.n	800a4e8 <_dtoa_r+0x310>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a442:	461a      	mov	r2, r3
 800a444:	9209      	str	r2, [sp, #36]	; 0x24
 800a446:	e00c      	b.n	800a462 <_dtoa_r+0x28a>
 800a448:	2301      	movs	r3, #1
 800a44a:	e7f3      	b.n	800a434 <_dtoa_r+0x25c>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a450:	9308      	str	r3, [sp, #32]
 800a452:	9b00      	ldr	r3, [sp, #0]
 800a454:	4413      	add	r3, r2
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	3301      	adds	r3, #1
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	9303      	str	r3, [sp, #12]
 800a45e:	bfb8      	it	lt
 800a460:	2301      	movlt	r3, #1
 800a462:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a464:	2200      	movs	r2, #0
 800a466:	6042      	str	r2, [r0, #4]
 800a468:	2204      	movs	r2, #4
 800a46a:	f102 0614 	add.w	r6, r2, #20
 800a46e:	429e      	cmp	r6, r3
 800a470:	6841      	ldr	r1, [r0, #4]
 800a472:	d93d      	bls.n	800a4f0 <_dtoa_r+0x318>
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fd37 	bl	800aee8 <_Balloc>
 800a47a:	9001      	str	r0, [sp, #4]
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d13b      	bne.n	800a4f8 <_dtoa_r+0x320>
 800a480:	4b11      	ldr	r3, [pc, #68]	; (800a4c8 <_dtoa_r+0x2f0>)
 800a482:	4602      	mov	r2, r0
 800a484:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a488:	e6c0      	b.n	800a20c <_dtoa_r+0x34>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e7df      	b.n	800a44e <_dtoa_r+0x276>
 800a48e:	bf00      	nop
 800a490:	636f4361 	.word	0x636f4361
 800a494:	3fd287a7 	.word	0x3fd287a7
 800a498:	8b60c8b3 	.word	0x8b60c8b3
 800a49c:	3fc68a28 	.word	0x3fc68a28
 800a4a0:	509f79fb 	.word	0x509f79fb
 800a4a4:	3fd34413 	.word	0x3fd34413
 800a4a8:	0800c5f9 	.word	0x0800c5f9
 800a4ac:	0800c610 	.word	0x0800c610
 800a4b0:	7ff00000 	.word	0x7ff00000
 800a4b4:	0800c5f5 	.word	0x0800c5f5
 800a4b8:	0800c5ec 	.word	0x0800c5ec
 800a4bc:	0800c5c9 	.word	0x0800c5c9
 800a4c0:	3ff80000 	.word	0x3ff80000
 800a4c4:	0800c710 	.word	0x0800c710
 800a4c8:	0800c66b 	.word	0x0800c66b
 800a4cc:	2501      	movs	r5, #1
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	9306      	str	r3, [sp, #24]
 800a4d2:	9508      	str	r5, [sp, #32]
 800a4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2312      	movs	r3, #18
 800a4e0:	e7b0      	b.n	800a444 <_dtoa_r+0x26c>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	9308      	str	r3, [sp, #32]
 800a4e6:	e7f5      	b.n	800a4d4 <_dtoa_r+0x2fc>
 800a4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4ee:	e7b8      	b.n	800a462 <_dtoa_r+0x28a>
 800a4f0:	3101      	adds	r1, #1
 800a4f2:	6041      	str	r1, [r0, #4]
 800a4f4:	0052      	lsls	r2, r2, #1
 800a4f6:	e7b8      	b.n	800a46a <_dtoa_r+0x292>
 800a4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4fa:	9a01      	ldr	r2, [sp, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	2b0e      	cmp	r3, #14
 800a502:	f200 809d 	bhi.w	800a640 <_dtoa_r+0x468>
 800a506:	2d00      	cmp	r5, #0
 800a508:	f000 809a 	beq.w	800a640 <_dtoa_r+0x468>
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dd32      	ble.n	800a578 <_dtoa_r+0x3a0>
 800a512:	4ab7      	ldr	r2, [pc, #732]	; (800a7f0 <_dtoa_r+0x618>)
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a51c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a520:	9b00      	ldr	r3, [sp, #0]
 800a522:	05d8      	lsls	r0, r3, #23
 800a524:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a528:	d516      	bpl.n	800a558 <_dtoa_r+0x380>
 800a52a:	4bb2      	ldr	r3, [pc, #712]	; (800a7f4 <_dtoa_r+0x61c>)
 800a52c:	ec51 0b19 	vmov	r0, r1, d9
 800a530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a534:	f7f6 f992 	bl	800085c <__aeabi_ddiv>
 800a538:	f007 070f 	and.w	r7, r7, #15
 800a53c:	4682      	mov	sl, r0
 800a53e:	468b      	mov	fp, r1
 800a540:	2503      	movs	r5, #3
 800a542:	4eac      	ldr	r6, [pc, #688]	; (800a7f4 <_dtoa_r+0x61c>)
 800a544:	b957      	cbnz	r7, 800a55c <_dtoa_r+0x384>
 800a546:	4642      	mov	r2, r8
 800a548:	464b      	mov	r3, r9
 800a54a:	4650      	mov	r0, sl
 800a54c:	4659      	mov	r1, fp
 800a54e:	f7f6 f985 	bl	800085c <__aeabi_ddiv>
 800a552:	4682      	mov	sl, r0
 800a554:	468b      	mov	fp, r1
 800a556:	e028      	b.n	800a5aa <_dtoa_r+0x3d2>
 800a558:	2502      	movs	r5, #2
 800a55a:	e7f2      	b.n	800a542 <_dtoa_r+0x36a>
 800a55c:	07f9      	lsls	r1, r7, #31
 800a55e:	d508      	bpl.n	800a572 <_dtoa_r+0x39a>
 800a560:	4640      	mov	r0, r8
 800a562:	4649      	mov	r1, r9
 800a564:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a568:	f7f6 f84e 	bl	8000608 <__aeabi_dmul>
 800a56c:	3501      	adds	r5, #1
 800a56e:	4680      	mov	r8, r0
 800a570:	4689      	mov	r9, r1
 800a572:	107f      	asrs	r7, r7, #1
 800a574:	3608      	adds	r6, #8
 800a576:	e7e5      	b.n	800a544 <_dtoa_r+0x36c>
 800a578:	f000 809b 	beq.w	800a6b2 <_dtoa_r+0x4da>
 800a57c:	9b00      	ldr	r3, [sp, #0]
 800a57e:	4f9d      	ldr	r7, [pc, #628]	; (800a7f4 <_dtoa_r+0x61c>)
 800a580:	425e      	negs	r6, r3
 800a582:	4b9b      	ldr	r3, [pc, #620]	; (800a7f0 <_dtoa_r+0x618>)
 800a584:	f006 020f 	and.w	r2, r6, #15
 800a588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	ec51 0b19 	vmov	r0, r1, d9
 800a594:	f7f6 f838 	bl	8000608 <__aeabi_dmul>
 800a598:	1136      	asrs	r6, r6, #4
 800a59a:	4682      	mov	sl, r0
 800a59c:	468b      	mov	fp, r1
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2502      	movs	r5, #2
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	d17a      	bne.n	800a69c <_dtoa_r+0x4c4>
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1d3      	bne.n	800a552 <_dtoa_r+0x37a>
 800a5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 8082 	beq.w	800a6b6 <_dtoa_r+0x4de>
 800a5b2:	4b91      	ldr	r3, [pc, #580]	; (800a7f8 <_dtoa_r+0x620>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4650      	mov	r0, sl
 800a5b8:	4659      	mov	r1, fp
 800a5ba:	f7f6 fa97 	bl	8000aec <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d079      	beq.n	800a6b6 <_dtoa_r+0x4de>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d076      	beq.n	800a6b6 <_dtoa_r+0x4de>
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dd36      	ble.n	800a63c <_dtoa_r+0x464>
 800a5ce:	9b00      	ldr	r3, [sp, #0]
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	4659      	mov	r1, fp
 800a5d4:	1e5f      	subs	r7, r3, #1
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4b88      	ldr	r3, [pc, #544]	; (800a7fc <_dtoa_r+0x624>)
 800a5da:	f7f6 f815 	bl	8000608 <__aeabi_dmul>
 800a5de:	9e02      	ldr	r6, [sp, #8]
 800a5e0:	4682      	mov	sl, r0
 800a5e2:	468b      	mov	fp, r1
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f7f5 ffa4 	bl	8000534 <__aeabi_i2d>
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	f7f6 f80a 	bl	8000608 <__aeabi_dmul>
 800a5f4:	4b82      	ldr	r3, [pc, #520]	; (800a800 <_dtoa_r+0x628>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f7f5 fe50 	bl	800029c <__adddf3>
 800a5fc:	46d0      	mov	r8, sl
 800a5fe:	46d9      	mov	r9, fp
 800a600:	4682      	mov	sl, r0
 800a602:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a606:	2e00      	cmp	r6, #0
 800a608:	d158      	bne.n	800a6bc <_dtoa_r+0x4e4>
 800a60a:	4b7e      	ldr	r3, [pc, #504]	; (800a804 <_dtoa_r+0x62c>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	4640      	mov	r0, r8
 800a610:	4649      	mov	r1, r9
 800a612:	f7f5 fe41 	bl	8000298 <__aeabi_dsub>
 800a616:	4652      	mov	r2, sl
 800a618:	465b      	mov	r3, fp
 800a61a:	4680      	mov	r8, r0
 800a61c:	4689      	mov	r9, r1
 800a61e:	f7f6 fa83 	bl	8000b28 <__aeabi_dcmpgt>
 800a622:	2800      	cmp	r0, #0
 800a624:	f040 8295 	bne.w	800ab52 <_dtoa_r+0x97a>
 800a628:	4652      	mov	r2, sl
 800a62a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a62e:	4640      	mov	r0, r8
 800a630:	4649      	mov	r1, r9
 800a632:	f7f6 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800a636:	2800      	cmp	r0, #0
 800a638:	f040 8289 	bne.w	800ab4e <_dtoa_r+0x976>
 800a63c:	ec5b ab19 	vmov	sl, fp, d9
 800a640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a642:	2b00      	cmp	r3, #0
 800a644:	f2c0 8148 	blt.w	800a8d8 <_dtoa_r+0x700>
 800a648:	9a00      	ldr	r2, [sp, #0]
 800a64a:	2a0e      	cmp	r2, #14
 800a64c:	f300 8144 	bgt.w	800a8d8 <_dtoa_r+0x700>
 800a650:	4b67      	ldr	r3, [pc, #412]	; (800a7f0 <_dtoa_r+0x618>)
 800a652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a656:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f280 80d5 	bge.w	800a80c <_dtoa_r+0x634>
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f300 80d1 	bgt.w	800a80c <_dtoa_r+0x634>
 800a66a:	f040 826f 	bne.w	800ab4c <_dtoa_r+0x974>
 800a66e:	4b65      	ldr	r3, [pc, #404]	; (800a804 <_dtoa_r+0x62c>)
 800a670:	2200      	movs	r2, #0
 800a672:	4640      	mov	r0, r8
 800a674:	4649      	mov	r1, r9
 800a676:	f7f5 ffc7 	bl	8000608 <__aeabi_dmul>
 800a67a:	4652      	mov	r2, sl
 800a67c:	465b      	mov	r3, fp
 800a67e:	f7f6 fa49 	bl	8000b14 <__aeabi_dcmpge>
 800a682:	9e03      	ldr	r6, [sp, #12]
 800a684:	4637      	mov	r7, r6
 800a686:	2800      	cmp	r0, #0
 800a688:	f040 8245 	bne.w	800ab16 <_dtoa_r+0x93e>
 800a68c:	9d01      	ldr	r5, [sp, #4]
 800a68e:	2331      	movs	r3, #49	; 0x31
 800a690:	f805 3b01 	strb.w	r3, [r5], #1
 800a694:	9b00      	ldr	r3, [sp, #0]
 800a696:	3301      	adds	r3, #1
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	e240      	b.n	800ab1e <_dtoa_r+0x946>
 800a69c:	07f2      	lsls	r2, r6, #31
 800a69e:	d505      	bpl.n	800a6ac <_dtoa_r+0x4d4>
 800a6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a4:	f7f5 ffb0 	bl	8000608 <__aeabi_dmul>
 800a6a8:	3501      	adds	r5, #1
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	1076      	asrs	r6, r6, #1
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	e777      	b.n	800a5a2 <_dtoa_r+0x3ca>
 800a6b2:	2502      	movs	r5, #2
 800a6b4:	e779      	b.n	800a5aa <_dtoa_r+0x3d2>
 800a6b6:	9f00      	ldr	r7, [sp, #0]
 800a6b8:	9e03      	ldr	r6, [sp, #12]
 800a6ba:	e794      	b.n	800a5e6 <_dtoa_r+0x40e>
 800a6bc:	9901      	ldr	r1, [sp, #4]
 800a6be:	4b4c      	ldr	r3, [pc, #304]	; (800a7f0 <_dtoa_r+0x618>)
 800a6c0:	4431      	add	r1, r6
 800a6c2:	910d      	str	r1, [sp, #52]	; 0x34
 800a6c4:	9908      	ldr	r1, [sp, #32]
 800a6c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	d043      	beq.n	800a75a <_dtoa_r+0x582>
 800a6d2:	494d      	ldr	r1, [pc, #308]	; (800a808 <_dtoa_r+0x630>)
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f7f6 f8c1 	bl	800085c <__aeabi_ddiv>
 800a6da:	4652      	mov	r2, sl
 800a6dc:	465b      	mov	r3, fp
 800a6de:	f7f5 fddb 	bl	8000298 <__aeabi_dsub>
 800a6e2:	9d01      	ldr	r5, [sp, #4]
 800a6e4:	4682      	mov	sl, r0
 800a6e6:	468b      	mov	fp, r1
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	f7f6 fa3c 	bl	8000b68 <__aeabi_d2iz>
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	f7f5 ff1f 	bl	8000534 <__aeabi_i2d>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 fdcb 	bl	8000298 <__aeabi_dsub>
 800a702:	3630      	adds	r6, #48	; 0x30
 800a704:	f805 6b01 	strb.w	r6, [r5], #1
 800a708:	4652      	mov	r2, sl
 800a70a:	465b      	mov	r3, fp
 800a70c:	4680      	mov	r8, r0
 800a70e:	4689      	mov	r9, r1
 800a710:	f7f6 f9ec 	bl	8000aec <__aeabi_dcmplt>
 800a714:	2800      	cmp	r0, #0
 800a716:	d163      	bne.n	800a7e0 <_dtoa_r+0x608>
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	4936      	ldr	r1, [pc, #216]	; (800a7f8 <_dtoa_r+0x620>)
 800a71e:	2000      	movs	r0, #0
 800a720:	f7f5 fdba 	bl	8000298 <__aeabi_dsub>
 800a724:	4652      	mov	r2, sl
 800a726:	465b      	mov	r3, fp
 800a728:	f7f6 f9e0 	bl	8000aec <__aeabi_dcmplt>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f040 80b5 	bne.w	800a89c <_dtoa_r+0x6c4>
 800a732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a734:	429d      	cmp	r5, r3
 800a736:	d081      	beq.n	800a63c <_dtoa_r+0x464>
 800a738:	4b30      	ldr	r3, [pc, #192]	; (800a7fc <_dtoa_r+0x624>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	4650      	mov	r0, sl
 800a73e:	4659      	mov	r1, fp
 800a740:	f7f5 ff62 	bl	8000608 <__aeabi_dmul>
 800a744:	4b2d      	ldr	r3, [pc, #180]	; (800a7fc <_dtoa_r+0x624>)
 800a746:	4682      	mov	sl, r0
 800a748:	468b      	mov	fp, r1
 800a74a:	4640      	mov	r0, r8
 800a74c:	4649      	mov	r1, r9
 800a74e:	2200      	movs	r2, #0
 800a750:	f7f5 ff5a 	bl	8000608 <__aeabi_dmul>
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	e7c6      	b.n	800a6e8 <_dtoa_r+0x510>
 800a75a:	4650      	mov	r0, sl
 800a75c:	4659      	mov	r1, fp
 800a75e:	f7f5 ff53 	bl	8000608 <__aeabi_dmul>
 800a762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a764:	9d01      	ldr	r5, [sp, #4]
 800a766:	930f      	str	r3, [sp, #60]	; 0x3c
 800a768:	4682      	mov	sl, r0
 800a76a:	468b      	mov	fp, r1
 800a76c:	4649      	mov	r1, r9
 800a76e:	4640      	mov	r0, r8
 800a770:	f7f6 f9fa 	bl	8000b68 <__aeabi_d2iz>
 800a774:	4606      	mov	r6, r0
 800a776:	f7f5 fedd 	bl	8000534 <__aeabi_i2d>
 800a77a:	3630      	adds	r6, #48	; 0x30
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	f7f5 fd88 	bl	8000298 <__aeabi_dsub>
 800a788:	f805 6b01 	strb.w	r6, [r5], #1
 800a78c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a78e:	429d      	cmp	r5, r3
 800a790:	4680      	mov	r8, r0
 800a792:	4689      	mov	r9, r1
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	d124      	bne.n	800a7e4 <_dtoa_r+0x60c>
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <_dtoa_r+0x630>)
 800a79c:	4650      	mov	r0, sl
 800a79e:	4659      	mov	r1, fp
 800a7a0:	f7f5 fd7c 	bl	800029c <__adddf3>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	f7f6 f9bc 	bl	8000b28 <__aeabi_dcmpgt>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d173      	bne.n	800a89c <_dtoa_r+0x6c4>
 800a7b4:	4652      	mov	r2, sl
 800a7b6:	465b      	mov	r3, fp
 800a7b8:	4913      	ldr	r1, [pc, #76]	; (800a808 <_dtoa_r+0x630>)
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f7f5 fd6c 	bl	8000298 <__aeabi_dsub>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	f7f6 f990 	bl	8000aec <__aeabi_dcmplt>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	f43f af35 	beq.w	800a63c <_dtoa_r+0x464>
 800a7d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7d4:	1e6b      	subs	r3, r5, #1
 800a7d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7dc:	2b30      	cmp	r3, #48	; 0x30
 800a7de:	d0f8      	beq.n	800a7d2 <_dtoa_r+0x5fa>
 800a7e0:	9700      	str	r7, [sp, #0]
 800a7e2:	e049      	b.n	800a878 <_dtoa_r+0x6a0>
 800a7e4:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <_dtoa_r+0x624>)
 800a7e6:	f7f5 ff0f 	bl	8000608 <__aeabi_dmul>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	4689      	mov	r9, r1
 800a7ee:	e7bd      	b.n	800a76c <_dtoa_r+0x594>
 800a7f0:	0800c710 	.word	0x0800c710
 800a7f4:	0800c6e8 	.word	0x0800c6e8
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	40240000 	.word	0x40240000
 800a800:	401c0000 	.word	0x401c0000
 800a804:	40140000 	.word	0x40140000
 800a808:	3fe00000 	.word	0x3fe00000
 800a80c:	9d01      	ldr	r5, [sp, #4]
 800a80e:	4656      	mov	r6, sl
 800a810:	465f      	mov	r7, fp
 800a812:	4642      	mov	r2, r8
 800a814:	464b      	mov	r3, r9
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f6 f81f 	bl	800085c <__aeabi_ddiv>
 800a81e:	f7f6 f9a3 	bl	8000b68 <__aeabi_d2iz>
 800a822:	4682      	mov	sl, r0
 800a824:	f7f5 fe86 	bl	8000534 <__aeabi_i2d>
 800a828:	4642      	mov	r2, r8
 800a82a:	464b      	mov	r3, r9
 800a82c:	f7f5 feec 	bl	8000608 <__aeabi_dmul>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a83c:	f7f5 fd2c 	bl	8000298 <__aeabi_dsub>
 800a840:	f805 6b01 	strb.w	r6, [r5], #1
 800a844:	9e01      	ldr	r6, [sp, #4]
 800a846:	9f03      	ldr	r7, [sp, #12]
 800a848:	1bae      	subs	r6, r5, r6
 800a84a:	42b7      	cmp	r7, r6
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	d135      	bne.n	800a8be <_dtoa_r+0x6e6>
 800a852:	f7f5 fd23 	bl	800029c <__adddf3>
 800a856:	4642      	mov	r2, r8
 800a858:	464b      	mov	r3, r9
 800a85a:	4606      	mov	r6, r0
 800a85c:	460f      	mov	r7, r1
 800a85e:	f7f6 f963 	bl	8000b28 <__aeabi_dcmpgt>
 800a862:	b9d0      	cbnz	r0, 800a89a <_dtoa_r+0x6c2>
 800a864:	4642      	mov	r2, r8
 800a866:	464b      	mov	r3, r9
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f6 f934 	bl	8000ad8 <__aeabi_dcmpeq>
 800a870:	b110      	cbz	r0, 800a878 <_dtoa_r+0x6a0>
 800a872:	f01a 0f01 	tst.w	sl, #1
 800a876:	d110      	bne.n	800a89a <_dtoa_r+0x6c2>
 800a878:	4620      	mov	r0, r4
 800a87a:	ee18 1a10 	vmov	r1, s16
 800a87e:	f000 fb73 	bl	800af68 <_Bfree>
 800a882:	2300      	movs	r3, #0
 800a884:	9800      	ldr	r0, [sp, #0]
 800a886:	702b      	strb	r3, [r5, #0]
 800a888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a88a:	3001      	adds	r0, #1
 800a88c:	6018      	str	r0, [r3, #0]
 800a88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a890:	2b00      	cmp	r3, #0
 800a892:	f43f acf1 	beq.w	800a278 <_dtoa_r+0xa0>
 800a896:	601d      	str	r5, [r3, #0]
 800a898:	e4ee      	b.n	800a278 <_dtoa_r+0xa0>
 800a89a:	9f00      	ldr	r7, [sp, #0]
 800a89c:	462b      	mov	r3, r5
 800a89e:	461d      	mov	r5, r3
 800a8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8a4:	2a39      	cmp	r2, #57	; 0x39
 800a8a6:	d106      	bne.n	800a8b6 <_dtoa_r+0x6de>
 800a8a8:	9a01      	ldr	r2, [sp, #4]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d1f7      	bne.n	800a89e <_dtoa_r+0x6c6>
 800a8ae:	9901      	ldr	r1, [sp, #4]
 800a8b0:	2230      	movs	r2, #48	; 0x30
 800a8b2:	3701      	adds	r7, #1
 800a8b4:	700a      	strb	r2, [r1, #0]
 800a8b6:	781a      	ldrb	r2, [r3, #0]
 800a8b8:	3201      	adds	r2, #1
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e790      	b.n	800a7e0 <_dtoa_r+0x608>
 800a8be:	4ba6      	ldr	r3, [pc, #664]	; (800ab58 <_dtoa_r+0x980>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f7f5 fea1 	bl	8000608 <__aeabi_dmul>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	460f      	mov	r7, r1
 800a8ce:	f7f6 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d09d      	beq.n	800a812 <_dtoa_r+0x63a>
 800a8d6:	e7cf      	b.n	800a878 <_dtoa_r+0x6a0>
 800a8d8:	9a08      	ldr	r2, [sp, #32]
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	f000 80d7 	beq.w	800aa8e <_dtoa_r+0x8b6>
 800a8e0:	9a06      	ldr	r2, [sp, #24]
 800a8e2:	2a01      	cmp	r2, #1
 800a8e4:	f300 80ba 	bgt.w	800aa5c <_dtoa_r+0x884>
 800a8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	f000 80b2 	beq.w	800aa54 <_dtoa_r+0x87c>
 800a8f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8f4:	9e07      	ldr	r6, [sp, #28]
 800a8f6:	9d04      	ldr	r5, [sp, #16]
 800a8f8:	9a04      	ldr	r2, [sp, #16]
 800a8fa:	441a      	add	r2, r3
 800a8fc:	9204      	str	r2, [sp, #16]
 800a8fe:	9a05      	ldr	r2, [sp, #20]
 800a900:	2101      	movs	r1, #1
 800a902:	441a      	add	r2, r3
 800a904:	4620      	mov	r0, r4
 800a906:	9205      	str	r2, [sp, #20]
 800a908:	f000 fbe6 	bl	800b0d8 <__i2b>
 800a90c:	4607      	mov	r7, r0
 800a90e:	2d00      	cmp	r5, #0
 800a910:	dd0c      	ble.n	800a92c <_dtoa_r+0x754>
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd09      	ble.n	800a92c <_dtoa_r+0x754>
 800a918:	42ab      	cmp	r3, r5
 800a91a:	9a04      	ldr	r2, [sp, #16]
 800a91c:	bfa8      	it	ge
 800a91e:	462b      	movge	r3, r5
 800a920:	1ad2      	subs	r2, r2, r3
 800a922:	9204      	str	r2, [sp, #16]
 800a924:	9a05      	ldr	r2, [sp, #20]
 800a926:	1aed      	subs	r5, r5, r3
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	9305      	str	r3, [sp, #20]
 800a92c:	9b07      	ldr	r3, [sp, #28]
 800a92e:	b31b      	cbz	r3, 800a978 <_dtoa_r+0x7a0>
 800a930:	9b08      	ldr	r3, [sp, #32]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 80af 	beq.w	800aa96 <_dtoa_r+0x8be>
 800a938:	2e00      	cmp	r6, #0
 800a93a:	dd13      	ble.n	800a964 <_dtoa_r+0x78c>
 800a93c:	4639      	mov	r1, r7
 800a93e:	4632      	mov	r2, r6
 800a940:	4620      	mov	r0, r4
 800a942:	f000 fc89 	bl	800b258 <__pow5mult>
 800a946:	ee18 2a10 	vmov	r2, s16
 800a94a:	4601      	mov	r1, r0
 800a94c:	4607      	mov	r7, r0
 800a94e:	4620      	mov	r0, r4
 800a950:	f000 fbd8 	bl	800b104 <__multiply>
 800a954:	ee18 1a10 	vmov	r1, s16
 800a958:	4680      	mov	r8, r0
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 fb04 	bl	800af68 <_Bfree>
 800a960:	ee08 8a10 	vmov	s16, r8
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	1b9a      	subs	r2, r3, r6
 800a968:	d006      	beq.n	800a978 <_dtoa_r+0x7a0>
 800a96a:	ee18 1a10 	vmov	r1, s16
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 fc72 	bl	800b258 <__pow5mult>
 800a974:	ee08 0a10 	vmov	s16, r0
 800a978:	2101      	movs	r1, #1
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fbac 	bl	800b0d8 <__i2b>
 800a980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	4606      	mov	r6, r0
 800a986:	f340 8088 	ble.w	800aa9a <_dtoa_r+0x8c2>
 800a98a:	461a      	mov	r2, r3
 800a98c:	4601      	mov	r1, r0
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 fc62 	bl	800b258 <__pow5mult>
 800a994:	9b06      	ldr	r3, [sp, #24]
 800a996:	2b01      	cmp	r3, #1
 800a998:	4606      	mov	r6, r0
 800a99a:	f340 8081 	ble.w	800aaa0 <_dtoa_r+0x8c8>
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	6933      	ldr	r3, [r6, #16]
 800a9a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9a8:	6918      	ldr	r0, [r3, #16]
 800a9aa:	f000 fb45 	bl	800b038 <__hi0bits>
 800a9ae:	f1c0 0020 	rsb	r0, r0, #32
 800a9b2:	9b05      	ldr	r3, [sp, #20]
 800a9b4:	4418      	add	r0, r3
 800a9b6:	f010 001f 	ands.w	r0, r0, #31
 800a9ba:	f000 8092 	beq.w	800aae2 <_dtoa_r+0x90a>
 800a9be:	f1c0 0320 	rsb	r3, r0, #32
 800a9c2:	2b04      	cmp	r3, #4
 800a9c4:	f340 808a 	ble.w	800aadc <_dtoa_r+0x904>
 800a9c8:	f1c0 001c 	rsb	r0, r0, #28
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	4403      	add	r3, r0
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	9b05      	ldr	r3, [sp, #20]
 800a9d4:	4403      	add	r3, r0
 800a9d6:	4405      	add	r5, r0
 800a9d8:	9305      	str	r3, [sp, #20]
 800a9da:	9b04      	ldr	r3, [sp, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd07      	ble.n	800a9f0 <_dtoa_r+0x818>
 800a9e0:	ee18 1a10 	vmov	r1, s16
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 fc90 	bl	800b30c <__lshift>
 800a9ec:	ee08 0a10 	vmov	s16, r0
 800a9f0:	9b05      	ldr	r3, [sp, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dd05      	ble.n	800aa02 <_dtoa_r+0x82a>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fc86 	bl	800b30c <__lshift>
 800aa00:	4606      	mov	r6, r0
 800aa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d06e      	beq.n	800aae6 <_dtoa_r+0x90e>
 800aa08:	ee18 0a10 	vmov	r0, s16
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	f000 fced 	bl	800b3ec <__mcmp>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	da67      	bge.n	800aae6 <_dtoa_r+0x90e>
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	ee18 1a10 	vmov	r1, s16
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	220a      	movs	r2, #10
 800aa22:	2300      	movs	r3, #0
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fac1 	bl	800afac <__multadd>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	ee08 0a10 	vmov	s16, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 81b1 	beq.w	800ad98 <_dtoa_r+0xbc0>
 800aa36:	2300      	movs	r3, #0
 800aa38:	4639      	mov	r1, r7
 800aa3a:	220a      	movs	r2, #10
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 fab5 	bl	800afac <__multadd>
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	4607      	mov	r7, r0
 800aa48:	f300 808e 	bgt.w	800ab68 <_dtoa_r+0x990>
 800aa4c:	9b06      	ldr	r3, [sp, #24]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	dc51      	bgt.n	800aaf6 <_dtoa_r+0x91e>
 800aa52:	e089      	b.n	800ab68 <_dtoa_r+0x990>
 800aa54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa5a:	e74b      	b.n	800a8f4 <_dtoa_r+0x71c>
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	1e5e      	subs	r6, r3, #1
 800aa60:	9b07      	ldr	r3, [sp, #28]
 800aa62:	42b3      	cmp	r3, r6
 800aa64:	bfbf      	itttt	lt
 800aa66:	9b07      	ldrlt	r3, [sp, #28]
 800aa68:	9607      	strlt	r6, [sp, #28]
 800aa6a:	1af2      	sublt	r2, r6, r3
 800aa6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa6e:	bfb6      	itet	lt
 800aa70:	189b      	addlt	r3, r3, r2
 800aa72:	1b9e      	subge	r6, r3, r6
 800aa74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	bfb8      	it	lt
 800aa7a:	2600      	movlt	r6, #0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bfb7      	itett	lt
 800aa80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa88:	1a9d      	sublt	r5, r3, r2
 800aa8a:	2300      	movlt	r3, #0
 800aa8c:	e734      	b.n	800a8f8 <_dtoa_r+0x720>
 800aa8e:	9e07      	ldr	r6, [sp, #28]
 800aa90:	9d04      	ldr	r5, [sp, #16]
 800aa92:	9f08      	ldr	r7, [sp, #32]
 800aa94:	e73b      	b.n	800a90e <_dtoa_r+0x736>
 800aa96:	9a07      	ldr	r2, [sp, #28]
 800aa98:	e767      	b.n	800a96a <_dtoa_r+0x792>
 800aa9a:	9b06      	ldr	r3, [sp, #24]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	dc18      	bgt.n	800aad2 <_dtoa_r+0x8fa>
 800aaa0:	f1ba 0f00 	cmp.w	sl, #0
 800aaa4:	d115      	bne.n	800aad2 <_dtoa_r+0x8fa>
 800aaa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaaa:	b993      	cbnz	r3, 800aad2 <_dtoa_r+0x8fa>
 800aaac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aab0:	0d1b      	lsrs	r3, r3, #20
 800aab2:	051b      	lsls	r3, r3, #20
 800aab4:	b183      	cbz	r3, 800aad8 <_dtoa_r+0x900>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	3301      	adds	r3, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	9b05      	ldr	r3, [sp, #20]
 800aabe:	3301      	adds	r3, #1
 800aac0:	9305      	str	r3, [sp, #20]
 800aac2:	f04f 0801 	mov.w	r8, #1
 800aac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f47f af6a 	bne.w	800a9a2 <_dtoa_r+0x7ca>
 800aace:	2001      	movs	r0, #1
 800aad0:	e76f      	b.n	800a9b2 <_dtoa_r+0x7da>
 800aad2:	f04f 0800 	mov.w	r8, #0
 800aad6:	e7f6      	b.n	800aac6 <_dtoa_r+0x8ee>
 800aad8:	4698      	mov	r8, r3
 800aada:	e7f4      	b.n	800aac6 <_dtoa_r+0x8ee>
 800aadc:	f43f af7d 	beq.w	800a9da <_dtoa_r+0x802>
 800aae0:	4618      	mov	r0, r3
 800aae2:	301c      	adds	r0, #28
 800aae4:	e772      	b.n	800a9cc <_dtoa_r+0x7f4>
 800aae6:	9b03      	ldr	r3, [sp, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	dc37      	bgt.n	800ab5c <_dtoa_r+0x984>
 800aaec:	9b06      	ldr	r3, [sp, #24]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	dd34      	ble.n	800ab5c <_dtoa_r+0x984>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	9302      	str	r3, [sp, #8]
 800aaf6:	9b02      	ldr	r3, [sp, #8]
 800aaf8:	b96b      	cbnz	r3, 800ab16 <_dtoa_r+0x93e>
 800aafa:	4631      	mov	r1, r6
 800aafc:	2205      	movs	r2, #5
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 fa54 	bl	800afac <__multadd>
 800ab04:	4601      	mov	r1, r0
 800ab06:	4606      	mov	r6, r0
 800ab08:	ee18 0a10 	vmov	r0, s16
 800ab0c:	f000 fc6e 	bl	800b3ec <__mcmp>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f73f adbb 	bgt.w	800a68c <_dtoa_r+0x4b4>
 800ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab18:	9d01      	ldr	r5, [sp, #4]
 800ab1a:	43db      	mvns	r3, r3
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	f04f 0800 	mov.w	r8, #0
 800ab22:	4631      	mov	r1, r6
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fa1f 	bl	800af68 <_Bfree>
 800ab2a:	2f00      	cmp	r7, #0
 800ab2c:	f43f aea4 	beq.w	800a878 <_dtoa_r+0x6a0>
 800ab30:	f1b8 0f00 	cmp.w	r8, #0
 800ab34:	d005      	beq.n	800ab42 <_dtoa_r+0x96a>
 800ab36:	45b8      	cmp	r8, r7
 800ab38:	d003      	beq.n	800ab42 <_dtoa_r+0x96a>
 800ab3a:	4641      	mov	r1, r8
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 fa13 	bl	800af68 <_Bfree>
 800ab42:	4639      	mov	r1, r7
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 fa0f 	bl	800af68 <_Bfree>
 800ab4a:	e695      	b.n	800a878 <_dtoa_r+0x6a0>
 800ab4c:	2600      	movs	r6, #0
 800ab4e:	4637      	mov	r7, r6
 800ab50:	e7e1      	b.n	800ab16 <_dtoa_r+0x93e>
 800ab52:	9700      	str	r7, [sp, #0]
 800ab54:	4637      	mov	r7, r6
 800ab56:	e599      	b.n	800a68c <_dtoa_r+0x4b4>
 800ab58:	40240000 	.word	0x40240000
 800ab5c:	9b08      	ldr	r3, [sp, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f000 80ca 	beq.w	800acf8 <_dtoa_r+0xb20>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	9302      	str	r3, [sp, #8]
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	dd05      	ble.n	800ab78 <_dtoa_r+0x9a0>
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fbcb 	bl	800b30c <__lshift>
 800ab76:	4607      	mov	r7, r0
 800ab78:	f1b8 0f00 	cmp.w	r8, #0
 800ab7c:	d05b      	beq.n	800ac36 <_dtoa_r+0xa5e>
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 f9b1 	bl	800aee8 <_Balloc>
 800ab86:	4605      	mov	r5, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <_dtoa_r+0x9be>
 800ab8a:	4b87      	ldr	r3, [pc, #540]	; (800ada8 <_dtoa_r+0xbd0>)
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab92:	f7ff bb3b 	b.w	800a20c <_dtoa_r+0x34>
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	3202      	adds	r2, #2
 800ab9a:	0092      	lsls	r2, r2, #2
 800ab9c:	f107 010c 	add.w	r1, r7, #12
 800aba0:	300c      	adds	r0, #12
 800aba2:	f7fe fabd 	bl	8009120 <memcpy>
 800aba6:	2201      	movs	r2, #1
 800aba8:	4629      	mov	r1, r5
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fbae 	bl	800b30c <__lshift>
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	f103 0901 	add.w	r9, r3, #1
 800abb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800abba:	4413      	add	r3, r2
 800abbc:	9305      	str	r3, [sp, #20]
 800abbe:	f00a 0301 	and.w	r3, sl, #1
 800abc2:	46b8      	mov	r8, r7
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	4607      	mov	r7, r0
 800abc8:	4631      	mov	r1, r6
 800abca:	ee18 0a10 	vmov	r0, s16
 800abce:	f7ff fa77 	bl	800a0c0 <quorem>
 800abd2:	4641      	mov	r1, r8
 800abd4:	9002      	str	r0, [sp, #8]
 800abd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800abda:	ee18 0a10 	vmov	r0, s16
 800abde:	f000 fc05 	bl	800b3ec <__mcmp>
 800abe2:	463a      	mov	r2, r7
 800abe4:	9003      	str	r0, [sp, #12]
 800abe6:	4631      	mov	r1, r6
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fc1b 	bl	800b424 <__mdiff>
 800abee:	68c2      	ldr	r2, [r0, #12]
 800abf0:	f109 3bff 	add.w	fp, r9, #4294967295
 800abf4:	4605      	mov	r5, r0
 800abf6:	bb02      	cbnz	r2, 800ac3a <_dtoa_r+0xa62>
 800abf8:	4601      	mov	r1, r0
 800abfa:	ee18 0a10 	vmov	r0, s16
 800abfe:	f000 fbf5 	bl	800b3ec <__mcmp>
 800ac02:	4602      	mov	r2, r0
 800ac04:	4629      	mov	r1, r5
 800ac06:	4620      	mov	r0, r4
 800ac08:	9207      	str	r2, [sp, #28]
 800ac0a:	f000 f9ad 	bl	800af68 <_Bfree>
 800ac0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac12:	ea43 0102 	orr.w	r1, r3, r2
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	464d      	mov	r5, r9
 800ac1c:	d10f      	bne.n	800ac3e <_dtoa_r+0xa66>
 800ac1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac22:	d02a      	beq.n	800ac7a <_dtoa_r+0xaa2>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	dd02      	ble.n	800ac30 <_dtoa_r+0xa58>
 800ac2a:	9b02      	ldr	r3, [sp, #8]
 800ac2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac30:	f88b a000 	strb.w	sl, [fp]
 800ac34:	e775      	b.n	800ab22 <_dtoa_r+0x94a>
 800ac36:	4638      	mov	r0, r7
 800ac38:	e7ba      	b.n	800abb0 <_dtoa_r+0x9d8>
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	e7e2      	b.n	800ac04 <_dtoa_r+0xa2c>
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	db04      	blt.n	800ac4e <_dtoa_r+0xa76>
 800ac44:	9906      	ldr	r1, [sp, #24]
 800ac46:	430b      	orrs	r3, r1
 800ac48:	9904      	ldr	r1, [sp, #16]
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	d122      	bne.n	800ac94 <_dtoa_r+0xabc>
 800ac4e:	2a00      	cmp	r2, #0
 800ac50:	ddee      	ble.n	800ac30 <_dtoa_r+0xa58>
 800ac52:	ee18 1a10 	vmov	r1, s16
 800ac56:	2201      	movs	r2, #1
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fb57 	bl	800b30c <__lshift>
 800ac5e:	4631      	mov	r1, r6
 800ac60:	ee08 0a10 	vmov	s16, r0
 800ac64:	f000 fbc2 	bl	800b3ec <__mcmp>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	dc03      	bgt.n	800ac74 <_dtoa_r+0xa9c>
 800ac6c:	d1e0      	bne.n	800ac30 <_dtoa_r+0xa58>
 800ac6e:	f01a 0f01 	tst.w	sl, #1
 800ac72:	d0dd      	beq.n	800ac30 <_dtoa_r+0xa58>
 800ac74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac78:	d1d7      	bne.n	800ac2a <_dtoa_r+0xa52>
 800ac7a:	2339      	movs	r3, #57	; 0x39
 800ac7c:	f88b 3000 	strb.w	r3, [fp]
 800ac80:	462b      	mov	r3, r5
 800ac82:	461d      	mov	r5, r3
 800ac84:	3b01      	subs	r3, #1
 800ac86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac8a:	2a39      	cmp	r2, #57	; 0x39
 800ac8c:	d071      	beq.n	800ad72 <_dtoa_r+0xb9a>
 800ac8e:	3201      	adds	r2, #1
 800ac90:	701a      	strb	r2, [r3, #0]
 800ac92:	e746      	b.n	800ab22 <_dtoa_r+0x94a>
 800ac94:	2a00      	cmp	r2, #0
 800ac96:	dd07      	ble.n	800aca8 <_dtoa_r+0xad0>
 800ac98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac9c:	d0ed      	beq.n	800ac7a <_dtoa_r+0xaa2>
 800ac9e:	f10a 0301 	add.w	r3, sl, #1
 800aca2:	f88b 3000 	strb.w	r3, [fp]
 800aca6:	e73c      	b.n	800ab22 <_dtoa_r+0x94a>
 800aca8:	9b05      	ldr	r3, [sp, #20]
 800acaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800acae:	4599      	cmp	r9, r3
 800acb0:	d047      	beq.n	800ad42 <_dtoa_r+0xb6a>
 800acb2:	ee18 1a10 	vmov	r1, s16
 800acb6:	2300      	movs	r3, #0
 800acb8:	220a      	movs	r2, #10
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 f976 	bl	800afac <__multadd>
 800acc0:	45b8      	cmp	r8, r7
 800acc2:	ee08 0a10 	vmov	s16, r0
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	f04f 020a 	mov.w	r2, #10
 800acce:	4641      	mov	r1, r8
 800acd0:	4620      	mov	r0, r4
 800acd2:	d106      	bne.n	800ace2 <_dtoa_r+0xb0a>
 800acd4:	f000 f96a 	bl	800afac <__multadd>
 800acd8:	4680      	mov	r8, r0
 800acda:	4607      	mov	r7, r0
 800acdc:	f109 0901 	add.w	r9, r9, #1
 800ace0:	e772      	b.n	800abc8 <_dtoa_r+0x9f0>
 800ace2:	f000 f963 	bl	800afac <__multadd>
 800ace6:	4639      	mov	r1, r7
 800ace8:	4680      	mov	r8, r0
 800acea:	2300      	movs	r3, #0
 800acec:	220a      	movs	r2, #10
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f95c 	bl	800afac <__multadd>
 800acf4:	4607      	mov	r7, r0
 800acf6:	e7f1      	b.n	800acdc <_dtoa_r+0xb04>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	9302      	str	r3, [sp, #8]
 800acfc:	9d01      	ldr	r5, [sp, #4]
 800acfe:	ee18 0a10 	vmov	r0, s16
 800ad02:	4631      	mov	r1, r6
 800ad04:	f7ff f9dc 	bl	800a0c0 <quorem>
 800ad08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad0c:	9b01      	ldr	r3, [sp, #4]
 800ad0e:	f805 ab01 	strb.w	sl, [r5], #1
 800ad12:	1aea      	subs	r2, r5, r3
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	dd09      	ble.n	800ad2e <_dtoa_r+0xb56>
 800ad1a:	ee18 1a10 	vmov	r1, s16
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f942 	bl	800afac <__multadd>
 800ad28:	ee08 0a10 	vmov	s16, r0
 800ad2c:	e7e7      	b.n	800acfe <_dtoa_r+0xb26>
 800ad2e:	9b02      	ldr	r3, [sp, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bfc8      	it	gt
 800ad34:	461d      	movgt	r5, r3
 800ad36:	9b01      	ldr	r3, [sp, #4]
 800ad38:	bfd8      	it	le
 800ad3a:	2501      	movle	r5, #1
 800ad3c:	441d      	add	r5, r3
 800ad3e:	f04f 0800 	mov.w	r8, #0
 800ad42:	ee18 1a10 	vmov	r1, s16
 800ad46:	2201      	movs	r2, #1
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fadf 	bl	800b30c <__lshift>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	ee08 0a10 	vmov	s16, r0
 800ad54:	f000 fb4a 	bl	800b3ec <__mcmp>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	dc91      	bgt.n	800ac80 <_dtoa_r+0xaa8>
 800ad5c:	d102      	bne.n	800ad64 <_dtoa_r+0xb8c>
 800ad5e:	f01a 0f01 	tst.w	sl, #1
 800ad62:	d18d      	bne.n	800ac80 <_dtoa_r+0xaa8>
 800ad64:	462b      	mov	r3, r5
 800ad66:	461d      	mov	r5, r3
 800ad68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad6c:	2a30      	cmp	r2, #48	; 0x30
 800ad6e:	d0fa      	beq.n	800ad66 <_dtoa_r+0xb8e>
 800ad70:	e6d7      	b.n	800ab22 <_dtoa_r+0x94a>
 800ad72:	9a01      	ldr	r2, [sp, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d184      	bne.n	800ac82 <_dtoa_r+0xaaa>
 800ad78:	9b00      	ldr	r3, [sp, #0]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	2331      	movs	r3, #49	; 0x31
 800ad80:	7013      	strb	r3, [r2, #0]
 800ad82:	e6ce      	b.n	800ab22 <_dtoa_r+0x94a>
 800ad84:	4b09      	ldr	r3, [pc, #36]	; (800adac <_dtoa_r+0xbd4>)
 800ad86:	f7ff ba95 	b.w	800a2b4 <_dtoa_r+0xdc>
 800ad8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f aa6e 	bne.w	800a26e <_dtoa_r+0x96>
 800ad92:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <_dtoa_r+0xbd8>)
 800ad94:	f7ff ba8e 	b.w	800a2b4 <_dtoa_r+0xdc>
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dcae      	bgt.n	800acfc <_dtoa_r+0xb24>
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	f73f aea8 	bgt.w	800aaf6 <_dtoa_r+0x91e>
 800ada6:	e7a9      	b.n	800acfc <_dtoa_r+0xb24>
 800ada8:	0800c66b 	.word	0x0800c66b
 800adac:	0800c5c8 	.word	0x0800c5c8
 800adb0:	0800c5ec 	.word	0x0800c5ec

0800adb4 <_localeconv_r>:
 800adb4:	4800      	ldr	r0, [pc, #0]	; (800adb8 <_localeconv_r+0x4>)
 800adb6:	4770      	bx	lr
 800adb8:	20000168 	.word	0x20000168

0800adbc <_lseek_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4d07      	ldr	r5, [pc, #28]	; (800addc <_lseek_r+0x20>)
 800adc0:	4604      	mov	r4, r0
 800adc2:	4608      	mov	r0, r1
 800adc4:	4611      	mov	r1, r2
 800adc6:	2200      	movs	r2, #0
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	f7f7 f968 	bl	80020a0 <_lseek>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_lseek_r+0x1e>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_lseek_r+0x1e>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	200162dc 	.word	0x200162dc

0800ade0 <__swhatbuf_r>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	460e      	mov	r6, r1
 800ade4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade8:	2900      	cmp	r1, #0
 800adea:	b096      	sub	sp, #88	; 0x58
 800adec:	4614      	mov	r4, r2
 800adee:	461d      	mov	r5, r3
 800adf0:	da08      	bge.n	800ae04 <__swhatbuf_r+0x24>
 800adf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	061a      	lsls	r2, r3, #24
 800adfc:	d410      	bmi.n	800ae20 <__swhatbuf_r+0x40>
 800adfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae02:	e00e      	b.n	800ae22 <__swhatbuf_r+0x42>
 800ae04:	466a      	mov	r2, sp
 800ae06:	f000 ff3d 	bl	800bc84 <_fstat_r>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	dbf1      	blt.n	800adf2 <__swhatbuf_r+0x12>
 800ae0e:	9a01      	ldr	r2, [sp, #4]
 800ae10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae18:	425a      	negs	r2, r3
 800ae1a:	415a      	adcs	r2, r3
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	e7ee      	b.n	800adfe <__swhatbuf_r+0x1e>
 800ae20:	2340      	movs	r3, #64	; 0x40
 800ae22:	2000      	movs	r0, #0
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	b016      	add	sp, #88	; 0x58
 800ae28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae2c <__smakebuf_r>:
 800ae2c:	898b      	ldrh	r3, [r1, #12]
 800ae2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae30:	079d      	lsls	r5, r3, #30
 800ae32:	4606      	mov	r6, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	d507      	bpl.n	800ae48 <__smakebuf_r+0x1c>
 800ae38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	2301      	movs	r3, #1
 800ae42:	6163      	str	r3, [r4, #20]
 800ae44:	b002      	add	sp, #8
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	ab01      	add	r3, sp, #4
 800ae4a:	466a      	mov	r2, sp
 800ae4c:	f7ff ffc8 	bl	800ade0 <__swhatbuf_r>
 800ae50:	9900      	ldr	r1, [sp, #0]
 800ae52:	4605      	mov	r5, r0
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7fe f9e5 	bl	8009224 <_malloc_r>
 800ae5a:	b948      	cbnz	r0, 800ae70 <__smakebuf_r+0x44>
 800ae5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae60:	059a      	lsls	r2, r3, #22
 800ae62:	d4ef      	bmi.n	800ae44 <__smakebuf_r+0x18>
 800ae64:	f023 0303 	bic.w	r3, r3, #3
 800ae68:	f043 0302 	orr.w	r3, r3, #2
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	e7e3      	b.n	800ae38 <__smakebuf_r+0xc>
 800ae70:	4b0d      	ldr	r3, [pc, #52]	; (800aea8 <__smakebuf_r+0x7c>)
 800ae72:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	6020      	str	r0, [r4, #0]
 800ae78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae7c:	81a3      	strh	r3, [r4, #12]
 800ae7e:	9b00      	ldr	r3, [sp, #0]
 800ae80:	6163      	str	r3, [r4, #20]
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	6120      	str	r0, [r4, #16]
 800ae86:	b15b      	cbz	r3, 800aea0 <__smakebuf_r+0x74>
 800ae88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f000 ff0b 	bl	800bca8 <_isatty_r>
 800ae92:	b128      	cbz	r0, 800aea0 <__smakebuf_r+0x74>
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	f023 0303 	bic.w	r3, r3, #3
 800ae9a:	f043 0301 	orr.w	r3, r3, #1
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	89a0      	ldrh	r0, [r4, #12]
 800aea2:	4305      	orrs	r5, r0
 800aea4:	81a5      	strh	r5, [r4, #12]
 800aea6:	e7cd      	b.n	800ae44 <__smakebuf_r+0x18>
 800aea8:	08008f1d 	.word	0x08008f1d

0800aeac <__ascii_mbtowc>:
 800aeac:	b082      	sub	sp, #8
 800aeae:	b901      	cbnz	r1, 800aeb2 <__ascii_mbtowc+0x6>
 800aeb0:	a901      	add	r1, sp, #4
 800aeb2:	b142      	cbz	r2, 800aec6 <__ascii_mbtowc+0x1a>
 800aeb4:	b14b      	cbz	r3, 800aeca <__ascii_mbtowc+0x1e>
 800aeb6:	7813      	ldrb	r3, [r2, #0]
 800aeb8:	600b      	str	r3, [r1, #0]
 800aeba:	7812      	ldrb	r2, [r2, #0]
 800aebc:	1e10      	subs	r0, r2, #0
 800aebe:	bf18      	it	ne
 800aec0:	2001      	movne	r0, #1
 800aec2:	b002      	add	sp, #8
 800aec4:	4770      	bx	lr
 800aec6:	4610      	mov	r0, r2
 800aec8:	e7fb      	b.n	800aec2 <__ascii_mbtowc+0x16>
 800aeca:	f06f 0001 	mvn.w	r0, #1
 800aece:	e7f8      	b.n	800aec2 <__ascii_mbtowc+0x16>

0800aed0 <__malloc_lock>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__malloc_lock+0x8>)
 800aed2:	f7fe b91a 	b.w	800910a <__retarget_lock_acquire_recursive>
 800aed6:	bf00      	nop
 800aed8:	200162d0 	.word	0x200162d0

0800aedc <__malloc_unlock>:
 800aedc:	4801      	ldr	r0, [pc, #4]	; (800aee4 <__malloc_unlock+0x8>)
 800aede:	f7fe b915 	b.w	800910c <__retarget_lock_release_recursive>
 800aee2:	bf00      	nop
 800aee4:	200162d0 	.word	0x200162d0

0800aee8 <_Balloc>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aeec:	4604      	mov	r4, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	b976      	cbnz	r6, 800af10 <_Balloc+0x28>
 800aef2:	2010      	movs	r0, #16
 800aef4:	f7fe f90c 	bl	8009110 <malloc>
 800aef8:	4602      	mov	r2, r0
 800aefa:	6260      	str	r0, [r4, #36]	; 0x24
 800aefc:	b920      	cbnz	r0, 800af08 <_Balloc+0x20>
 800aefe:	4b18      	ldr	r3, [pc, #96]	; (800af60 <_Balloc+0x78>)
 800af00:	4818      	ldr	r0, [pc, #96]	; (800af64 <_Balloc+0x7c>)
 800af02:	2166      	movs	r1, #102	; 0x66
 800af04:	f000 fe8e 	bl	800bc24 <__assert_func>
 800af08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af0c:	6006      	str	r6, [r0, #0]
 800af0e:	60c6      	str	r6, [r0, #12]
 800af10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af12:	68f3      	ldr	r3, [r6, #12]
 800af14:	b183      	cbz	r3, 800af38 <_Balloc+0x50>
 800af16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af1e:	b9b8      	cbnz	r0, 800af50 <_Balloc+0x68>
 800af20:	2101      	movs	r1, #1
 800af22:	fa01 f605 	lsl.w	r6, r1, r5
 800af26:	1d72      	adds	r2, r6, #5
 800af28:	0092      	lsls	r2, r2, #2
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fb60 	bl	800b5f0 <_calloc_r>
 800af30:	b160      	cbz	r0, 800af4c <_Balloc+0x64>
 800af32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af36:	e00e      	b.n	800af56 <_Balloc+0x6e>
 800af38:	2221      	movs	r2, #33	; 0x21
 800af3a:	2104      	movs	r1, #4
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 fb57 	bl	800b5f0 <_calloc_r>
 800af42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af44:	60f0      	str	r0, [r6, #12]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e4      	bne.n	800af16 <_Balloc+0x2e>
 800af4c:	2000      	movs	r0, #0
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	6802      	ldr	r2, [r0, #0]
 800af52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af56:	2300      	movs	r3, #0
 800af58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af5c:	e7f7      	b.n	800af4e <_Balloc+0x66>
 800af5e:	bf00      	nop
 800af60:	0800c5f9 	.word	0x0800c5f9
 800af64:	0800c686 	.word	0x0800c686

0800af68 <_Bfree>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af6c:	4605      	mov	r5, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	b976      	cbnz	r6, 800af90 <_Bfree+0x28>
 800af72:	2010      	movs	r0, #16
 800af74:	f7fe f8cc 	bl	8009110 <malloc>
 800af78:	4602      	mov	r2, r0
 800af7a:	6268      	str	r0, [r5, #36]	; 0x24
 800af7c:	b920      	cbnz	r0, 800af88 <_Bfree+0x20>
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <_Bfree+0x3c>)
 800af80:	4809      	ldr	r0, [pc, #36]	; (800afa8 <_Bfree+0x40>)
 800af82:	218a      	movs	r1, #138	; 0x8a
 800af84:	f000 fe4e 	bl	800bc24 <__assert_func>
 800af88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af8c:	6006      	str	r6, [r0, #0]
 800af8e:	60c6      	str	r6, [r0, #12]
 800af90:	b13c      	cbz	r4, 800afa2 <_Bfree+0x3a>
 800af92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af94:	6862      	ldr	r2, [r4, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af9c:	6021      	str	r1, [r4, #0]
 800af9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	0800c5f9 	.word	0x0800c5f9
 800afa8:	0800c686 	.word	0x0800c686

0800afac <__multadd>:
 800afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb0:	690d      	ldr	r5, [r1, #16]
 800afb2:	4607      	mov	r7, r0
 800afb4:	460c      	mov	r4, r1
 800afb6:	461e      	mov	r6, r3
 800afb8:	f101 0c14 	add.w	ip, r1, #20
 800afbc:	2000      	movs	r0, #0
 800afbe:	f8dc 3000 	ldr.w	r3, [ip]
 800afc2:	b299      	uxth	r1, r3
 800afc4:	fb02 6101 	mla	r1, r2, r1, r6
 800afc8:	0c1e      	lsrs	r6, r3, #16
 800afca:	0c0b      	lsrs	r3, r1, #16
 800afcc:	fb02 3306 	mla	r3, r2, r6, r3
 800afd0:	b289      	uxth	r1, r1
 800afd2:	3001      	adds	r0, #1
 800afd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afd8:	4285      	cmp	r5, r0
 800afda:	f84c 1b04 	str.w	r1, [ip], #4
 800afde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afe2:	dcec      	bgt.n	800afbe <__multadd+0x12>
 800afe4:	b30e      	cbz	r6, 800b02a <__multadd+0x7e>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dc19      	bgt.n	800b020 <__multadd+0x74>
 800afec:	6861      	ldr	r1, [r4, #4]
 800afee:	4638      	mov	r0, r7
 800aff0:	3101      	adds	r1, #1
 800aff2:	f7ff ff79 	bl	800aee8 <_Balloc>
 800aff6:	4680      	mov	r8, r0
 800aff8:	b928      	cbnz	r0, 800b006 <__multadd+0x5a>
 800affa:	4602      	mov	r2, r0
 800affc:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <__multadd+0x84>)
 800affe:	480d      	ldr	r0, [pc, #52]	; (800b034 <__multadd+0x88>)
 800b000:	21b5      	movs	r1, #181	; 0xb5
 800b002:	f000 fe0f 	bl	800bc24 <__assert_func>
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	f104 010c 	add.w	r1, r4, #12
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	300c      	adds	r0, #12
 800b012:	f7fe f885 	bl	8009120 <memcpy>
 800b016:	4621      	mov	r1, r4
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff ffa5 	bl	800af68 <_Bfree>
 800b01e:	4644      	mov	r4, r8
 800b020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b024:	3501      	adds	r5, #1
 800b026:	615e      	str	r6, [r3, #20]
 800b028:	6125      	str	r5, [r4, #16]
 800b02a:	4620      	mov	r0, r4
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b030:	0800c66b 	.word	0x0800c66b
 800b034:	0800c686 	.word	0x0800c686

0800b038 <__hi0bits>:
 800b038:	0c03      	lsrs	r3, r0, #16
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	b9d3      	cbnz	r3, 800b074 <__hi0bits+0x3c>
 800b03e:	0400      	lsls	r0, r0, #16
 800b040:	2310      	movs	r3, #16
 800b042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b046:	bf04      	itt	eq
 800b048:	0200      	lsleq	r0, r0, #8
 800b04a:	3308      	addeq	r3, #8
 800b04c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b050:	bf04      	itt	eq
 800b052:	0100      	lsleq	r0, r0, #4
 800b054:	3304      	addeq	r3, #4
 800b056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b05a:	bf04      	itt	eq
 800b05c:	0080      	lsleq	r0, r0, #2
 800b05e:	3302      	addeq	r3, #2
 800b060:	2800      	cmp	r0, #0
 800b062:	db05      	blt.n	800b070 <__hi0bits+0x38>
 800b064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b068:	f103 0301 	add.w	r3, r3, #1
 800b06c:	bf08      	it	eq
 800b06e:	2320      	moveq	r3, #32
 800b070:	4618      	mov	r0, r3
 800b072:	4770      	bx	lr
 800b074:	2300      	movs	r3, #0
 800b076:	e7e4      	b.n	800b042 <__hi0bits+0xa>

0800b078 <__lo0bits>:
 800b078:	6803      	ldr	r3, [r0, #0]
 800b07a:	f013 0207 	ands.w	r2, r3, #7
 800b07e:	4601      	mov	r1, r0
 800b080:	d00b      	beq.n	800b09a <__lo0bits+0x22>
 800b082:	07da      	lsls	r2, r3, #31
 800b084:	d423      	bmi.n	800b0ce <__lo0bits+0x56>
 800b086:	0798      	lsls	r0, r3, #30
 800b088:	bf49      	itett	mi
 800b08a:	085b      	lsrmi	r3, r3, #1
 800b08c:	089b      	lsrpl	r3, r3, #2
 800b08e:	2001      	movmi	r0, #1
 800b090:	600b      	strmi	r3, [r1, #0]
 800b092:	bf5c      	itt	pl
 800b094:	600b      	strpl	r3, [r1, #0]
 800b096:	2002      	movpl	r0, #2
 800b098:	4770      	bx	lr
 800b09a:	b298      	uxth	r0, r3
 800b09c:	b9a8      	cbnz	r0, 800b0ca <__lo0bits+0x52>
 800b09e:	0c1b      	lsrs	r3, r3, #16
 800b0a0:	2010      	movs	r0, #16
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	b90a      	cbnz	r2, 800b0aa <__lo0bits+0x32>
 800b0a6:	3008      	adds	r0, #8
 800b0a8:	0a1b      	lsrs	r3, r3, #8
 800b0aa:	071a      	lsls	r2, r3, #28
 800b0ac:	bf04      	itt	eq
 800b0ae:	091b      	lsreq	r3, r3, #4
 800b0b0:	3004      	addeq	r0, #4
 800b0b2:	079a      	lsls	r2, r3, #30
 800b0b4:	bf04      	itt	eq
 800b0b6:	089b      	lsreq	r3, r3, #2
 800b0b8:	3002      	addeq	r0, #2
 800b0ba:	07da      	lsls	r2, r3, #31
 800b0bc:	d403      	bmi.n	800b0c6 <__lo0bits+0x4e>
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	f100 0001 	add.w	r0, r0, #1
 800b0c4:	d005      	beq.n	800b0d2 <__lo0bits+0x5a>
 800b0c6:	600b      	str	r3, [r1, #0]
 800b0c8:	4770      	bx	lr
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	e7e9      	b.n	800b0a2 <__lo0bits+0x2a>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	4770      	bx	lr
 800b0d2:	2020      	movs	r0, #32
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__i2b>:
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	2101      	movs	r1, #1
 800b0de:	f7ff ff03 	bl	800aee8 <_Balloc>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	b928      	cbnz	r0, 800b0f2 <__i2b+0x1a>
 800b0e6:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <__i2b+0x24>)
 800b0e8:	4805      	ldr	r0, [pc, #20]	; (800b100 <__i2b+0x28>)
 800b0ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0ee:	f000 fd99 	bl	800bc24 <__assert_func>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6144      	str	r4, [r0, #20]
 800b0f6:	6103      	str	r3, [r0, #16]
 800b0f8:	bd10      	pop	{r4, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800c66b 	.word	0x0800c66b
 800b100:	0800c686 	.word	0x0800c686

0800b104 <__multiply>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	4691      	mov	r9, r2
 800b10a:	690a      	ldr	r2, [r1, #16]
 800b10c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b110:	429a      	cmp	r2, r3
 800b112:	bfb8      	it	lt
 800b114:	460b      	movlt	r3, r1
 800b116:	460c      	mov	r4, r1
 800b118:	bfbc      	itt	lt
 800b11a:	464c      	movlt	r4, r9
 800b11c:	4699      	movlt	r9, r3
 800b11e:	6927      	ldr	r7, [r4, #16]
 800b120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	6861      	ldr	r1, [r4, #4]
 800b128:	eb07 060a 	add.w	r6, r7, sl
 800b12c:	42b3      	cmp	r3, r6
 800b12e:	b085      	sub	sp, #20
 800b130:	bfb8      	it	lt
 800b132:	3101      	addlt	r1, #1
 800b134:	f7ff fed8 	bl	800aee8 <_Balloc>
 800b138:	b930      	cbnz	r0, 800b148 <__multiply+0x44>
 800b13a:	4602      	mov	r2, r0
 800b13c:	4b44      	ldr	r3, [pc, #272]	; (800b250 <__multiply+0x14c>)
 800b13e:	4845      	ldr	r0, [pc, #276]	; (800b254 <__multiply+0x150>)
 800b140:	f240 115d 	movw	r1, #349	; 0x15d
 800b144:	f000 fd6e 	bl	800bc24 <__assert_func>
 800b148:	f100 0514 	add.w	r5, r0, #20
 800b14c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b150:	462b      	mov	r3, r5
 800b152:	2200      	movs	r2, #0
 800b154:	4543      	cmp	r3, r8
 800b156:	d321      	bcc.n	800b19c <__multiply+0x98>
 800b158:	f104 0314 	add.w	r3, r4, #20
 800b15c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b160:	f109 0314 	add.w	r3, r9, #20
 800b164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	1b3a      	subs	r2, r7, r4
 800b16c:	3a15      	subs	r2, #21
 800b16e:	f022 0203 	bic.w	r2, r2, #3
 800b172:	3204      	adds	r2, #4
 800b174:	f104 0115 	add.w	r1, r4, #21
 800b178:	428f      	cmp	r7, r1
 800b17a:	bf38      	it	cc
 800b17c:	2204      	movcc	r2, #4
 800b17e:	9201      	str	r2, [sp, #4]
 800b180:	9a02      	ldr	r2, [sp, #8]
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	429a      	cmp	r2, r3
 800b186:	d80c      	bhi.n	800b1a2 <__multiply+0x9e>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	dd03      	ble.n	800b194 <__multiply+0x90>
 800b18c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b190:	2b00      	cmp	r3, #0
 800b192:	d05a      	beq.n	800b24a <__multiply+0x146>
 800b194:	6106      	str	r6, [r0, #16]
 800b196:	b005      	add	sp, #20
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	f843 2b04 	str.w	r2, [r3], #4
 800b1a0:	e7d8      	b.n	800b154 <__multiply+0x50>
 800b1a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1a6:	f1ba 0f00 	cmp.w	sl, #0
 800b1aa:	d024      	beq.n	800b1f6 <__multiply+0xf2>
 800b1ac:	f104 0e14 	add.w	lr, r4, #20
 800b1b0:	46a9      	mov	r9, r5
 800b1b2:	f04f 0c00 	mov.w	ip, #0
 800b1b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1ba:	f8d9 1000 	ldr.w	r1, [r9]
 800b1be:	fa1f fb82 	uxth.w	fp, r2
 800b1c2:	b289      	uxth	r1, r1
 800b1c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b1cc:	f8d9 2000 	ldr.w	r2, [r9]
 800b1d0:	4461      	add	r1, ip
 800b1d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1de:	b289      	uxth	r1, r1
 800b1e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1e4:	4577      	cmp	r7, lr
 800b1e6:	f849 1b04 	str.w	r1, [r9], #4
 800b1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1ee:	d8e2      	bhi.n	800b1b6 <__multiply+0xb2>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	f845 c002 	str.w	ip, [r5, r2]
 800b1f6:	9a03      	ldr	r2, [sp, #12]
 800b1f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	f1b9 0f00 	cmp.w	r9, #0
 800b202:	d020      	beq.n	800b246 <__multiply+0x142>
 800b204:	6829      	ldr	r1, [r5, #0]
 800b206:	f104 0c14 	add.w	ip, r4, #20
 800b20a:	46ae      	mov	lr, r5
 800b20c:	f04f 0a00 	mov.w	sl, #0
 800b210:	f8bc b000 	ldrh.w	fp, [ip]
 800b214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b218:	fb09 220b 	mla	r2, r9, fp, r2
 800b21c:	4492      	add	sl, r2
 800b21e:	b289      	uxth	r1, r1
 800b220:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b224:	f84e 1b04 	str.w	r1, [lr], #4
 800b228:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b22c:	f8be 1000 	ldrh.w	r1, [lr]
 800b230:	0c12      	lsrs	r2, r2, #16
 800b232:	fb09 1102 	mla	r1, r9, r2, r1
 800b236:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b23a:	4567      	cmp	r7, ip
 800b23c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b240:	d8e6      	bhi.n	800b210 <__multiply+0x10c>
 800b242:	9a01      	ldr	r2, [sp, #4]
 800b244:	50a9      	str	r1, [r5, r2]
 800b246:	3504      	adds	r5, #4
 800b248:	e79a      	b.n	800b180 <__multiply+0x7c>
 800b24a:	3e01      	subs	r6, #1
 800b24c:	e79c      	b.n	800b188 <__multiply+0x84>
 800b24e:	bf00      	nop
 800b250:	0800c66b 	.word	0x0800c66b
 800b254:	0800c686 	.word	0x0800c686

0800b258 <__pow5mult>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4615      	mov	r5, r2
 800b25e:	f012 0203 	ands.w	r2, r2, #3
 800b262:	4606      	mov	r6, r0
 800b264:	460f      	mov	r7, r1
 800b266:	d007      	beq.n	800b278 <__pow5mult+0x20>
 800b268:	4c25      	ldr	r4, [pc, #148]	; (800b300 <__pow5mult+0xa8>)
 800b26a:	3a01      	subs	r2, #1
 800b26c:	2300      	movs	r3, #0
 800b26e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b272:	f7ff fe9b 	bl	800afac <__multadd>
 800b276:	4607      	mov	r7, r0
 800b278:	10ad      	asrs	r5, r5, #2
 800b27a:	d03d      	beq.n	800b2f8 <__pow5mult+0xa0>
 800b27c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b27e:	b97c      	cbnz	r4, 800b2a0 <__pow5mult+0x48>
 800b280:	2010      	movs	r0, #16
 800b282:	f7fd ff45 	bl	8009110 <malloc>
 800b286:	4602      	mov	r2, r0
 800b288:	6270      	str	r0, [r6, #36]	; 0x24
 800b28a:	b928      	cbnz	r0, 800b298 <__pow5mult+0x40>
 800b28c:	4b1d      	ldr	r3, [pc, #116]	; (800b304 <__pow5mult+0xac>)
 800b28e:	481e      	ldr	r0, [pc, #120]	; (800b308 <__pow5mult+0xb0>)
 800b290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b294:	f000 fcc6 	bl	800bc24 <__assert_func>
 800b298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b29c:	6004      	str	r4, [r0, #0]
 800b29e:	60c4      	str	r4, [r0, #12]
 800b2a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2a8:	b94c      	cbnz	r4, 800b2be <__pow5mult+0x66>
 800b2aa:	f240 2171 	movw	r1, #625	; 0x271
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff ff12 	bl	800b0d8 <__i2b>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	6003      	str	r3, [r0, #0]
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	07eb      	lsls	r3, r5, #31
 800b2c4:	d50a      	bpl.n	800b2dc <__pow5mult+0x84>
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7ff ff1a 	bl	800b104 <__multiply>
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7ff fe47 	bl	800af68 <_Bfree>
 800b2da:	4647      	mov	r7, r8
 800b2dc:	106d      	asrs	r5, r5, #1
 800b2de:	d00b      	beq.n	800b2f8 <__pow5mult+0xa0>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	b938      	cbnz	r0, 800b2f4 <__pow5mult+0x9c>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff ff0b 	bl	800b104 <__multiply>
 800b2ee:	6020      	str	r0, [r4, #0]
 800b2f0:	f8c0 9000 	str.w	r9, [r0]
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	e7e4      	b.n	800b2c2 <__pow5mult+0x6a>
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fe:	bf00      	nop
 800b300:	0800c7d8 	.word	0x0800c7d8
 800b304:	0800c5f9 	.word	0x0800c5f9
 800b308:	0800c686 	.word	0x0800c686

0800b30c <__lshift>:
 800b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b310:	460c      	mov	r4, r1
 800b312:	6849      	ldr	r1, [r1, #4]
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	4607      	mov	r7, r0
 800b31e:	4691      	mov	r9, r2
 800b320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b324:	f108 0601 	add.w	r6, r8, #1
 800b328:	42b3      	cmp	r3, r6
 800b32a:	db0b      	blt.n	800b344 <__lshift+0x38>
 800b32c:	4638      	mov	r0, r7
 800b32e:	f7ff fddb 	bl	800aee8 <_Balloc>
 800b332:	4605      	mov	r5, r0
 800b334:	b948      	cbnz	r0, 800b34a <__lshift+0x3e>
 800b336:	4602      	mov	r2, r0
 800b338:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <__lshift+0xd8>)
 800b33a:	482b      	ldr	r0, [pc, #172]	; (800b3e8 <__lshift+0xdc>)
 800b33c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b340:	f000 fc70 	bl	800bc24 <__assert_func>
 800b344:	3101      	adds	r1, #1
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	e7ee      	b.n	800b328 <__lshift+0x1c>
 800b34a:	2300      	movs	r3, #0
 800b34c:	f100 0114 	add.w	r1, r0, #20
 800b350:	f100 0210 	add.w	r2, r0, #16
 800b354:	4618      	mov	r0, r3
 800b356:	4553      	cmp	r3, sl
 800b358:	db37      	blt.n	800b3ca <__lshift+0xbe>
 800b35a:	6920      	ldr	r0, [r4, #16]
 800b35c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b360:	f104 0314 	add.w	r3, r4, #20
 800b364:	f019 091f 	ands.w	r9, r9, #31
 800b368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b36c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b370:	d02f      	beq.n	800b3d2 <__lshift+0xc6>
 800b372:	f1c9 0e20 	rsb	lr, r9, #32
 800b376:	468a      	mov	sl, r1
 800b378:	f04f 0c00 	mov.w	ip, #0
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	fa02 f209 	lsl.w	r2, r2, r9
 800b382:	ea42 020c 	orr.w	r2, r2, ip
 800b386:	f84a 2b04 	str.w	r2, [sl], #4
 800b38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38e:	4298      	cmp	r0, r3
 800b390:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b394:	d8f2      	bhi.n	800b37c <__lshift+0x70>
 800b396:	1b03      	subs	r3, r0, r4
 800b398:	3b15      	subs	r3, #21
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	3304      	adds	r3, #4
 800b3a0:	f104 0215 	add.w	r2, r4, #21
 800b3a4:	4290      	cmp	r0, r2
 800b3a6:	bf38      	it	cc
 800b3a8:	2304      	movcc	r3, #4
 800b3aa:	f841 c003 	str.w	ip, [r1, r3]
 800b3ae:	f1bc 0f00 	cmp.w	ip, #0
 800b3b2:	d001      	beq.n	800b3b8 <__lshift+0xac>
 800b3b4:	f108 0602 	add.w	r6, r8, #2
 800b3b8:	3e01      	subs	r6, #1
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	612e      	str	r6, [r5, #16]
 800b3be:	4621      	mov	r1, r4
 800b3c0:	f7ff fdd2 	bl	800af68 <_Bfree>
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	e7c1      	b.n	800b356 <__lshift+0x4a>
 800b3d2:	3904      	subs	r1, #4
 800b3d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3dc:	4298      	cmp	r0, r3
 800b3de:	d8f9      	bhi.n	800b3d4 <__lshift+0xc8>
 800b3e0:	e7ea      	b.n	800b3b8 <__lshift+0xac>
 800b3e2:	bf00      	nop
 800b3e4:	0800c66b 	.word	0x0800c66b
 800b3e8:	0800c686 	.word	0x0800c686

0800b3ec <__mcmp>:
 800b3ec:	b530      	push	{r4, r5, lr}
 800b3ee:	6902      	ldr	r2, [r0, #16]
 800b3f0:	690c      	ldr	r4, [r1, #16]
 800b3f2:	1b12      	subs	r2, r2, r4
 800b3f4:	d10e      	bne.n	800b414 <__mcmp+0x28>
 800b3f6:	f100 0314 	add.w	r3, r0, #20
 800b3fa:	3114      	adds	r1, #20
 800b3fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b40c:	42a5      	cmp	r5, r4
 800b40e:	d003      	beq.n	800b418 <__mcmp+0x2c>
 800b410:	d305      	bcc.n	800b41e <__mcmp+0x32>
 800b412:	2201      	movs	r2, #1
 800b414:	4610      	mov	r0, r2
 800b416:	bd30      	pop	{r4, r5, pc}
 800b418:	4283      	cmp	r3, r0
 800b41a:	d3f3      	bcc.n	800b404 <__mcmp+0x18>
 800b41c:	e7fa      	b.n	800b414 <__mcmp+0x28>
 800b41e:	f04f 32ff 	mov.w	r2, #4294967295
 800b422:	e7f7      	b.n	800b414 <__mcmp+0x28>

0800b424 <__mdiff>:
 800b424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	460c      	mov	r4, r1
 800b42a:	4606      	mov	r6, r0
 800b42c:	4611      	mov	r1, r2
 800b42e:	4620      	mov	r0, r4
 800b430:	4690      	mov	r8, r2
 800b432:	f7ff ffdb 	bl	800b3ec <__mcmp>
 800b436:	1e05      	subs	r5, r0, #0
 800b438:	d110      	bne.n	800b45c <__mdiff+0x38>
 800b43a:	4629      	mov	r1, r5
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff fd53 	bl	800aee8 <_Balloc>
 800b442:	b930      	cbnz	r0, 800b452 <__mdiff+0x2e>
 800b444:	4b3a      	ldr	r3, [pc, #232]	; (800b530 <__mdiff+0x10c>)
 800b446:	4602      	mov	r2, r0
 800b448:	f240 2132 	movw	r1, #562	; 0x232
 800b44c:	4839      	ldr	r0, [pc, #228]	; (800b534 <__mdiff+0x110>)
 800b44e:	f000 fbe9 	bl	800bc24 <__assert_func>
 800b452:	2301      	movs	r3, #1
 800b454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	bfa4      	itt	ge
 800b45e:	4643      	movge	r3, r8
 800b460:	46a0      	movge	r8, r4
 800b462:	4630      	mov	r0, r6
 800b464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b468:	bfa6      	itte	ge
 800b46a:	461c      	movge	r4, r3
 800b46c:	2500      	movge	r5, #0
 800b46e:	2501      	movlt	r5, #1
 800b470:	f7ff fd3a 	bl	800aee8 <_Balloc>
 800b474:	b920      	cbnz	r0, 800b480 <__mdiff+0x5c>
 800b476:	4b2e      	ldr	r3, [pc, #184]	; (800b530 <__mdiff+0x10c>)
 800b478:	4602      	mov	r2, r0
 800b47a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b47e:	e7e5      	b.n	800b44c <__mdiff+0x28>
 800b480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b484:	6926      	ldr	r6, [r4, #16]
 800b486:	60c5      	str	r5, [r0, #12]
 800b488:	f104 0914 	add.w	r9, r4, #20
 800b48c:	f108 0514 	add.w	r5, r8, #20
 800b490:	f100 0e14 	add.w	lr, r0, #20
 800b494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b49c:	f108 0210 	add.w	r2, r8, #16
 800b4a0:	46f2      	mov	sl, lr
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4ac:	fa1f f883 	uxth.w	r8, r3
 800b4b0:	fa11 f18b 	uxtah	r1, r1, fp
 800b4b4:	0c1b      	lsrs	r3, r3, #16
 800b4b6:	eba1 0808 	sub.w	r8, r1, r8
 800b4ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4c2:	fa1f f888 	uxth.w	r8, r8
 800b4c6:	1419      	asrs	r1, r3, #16
 800b4c8:	454e      	cmp	r6, r9
 800b4ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b4d2:	d8e7      	bhi.n	800b4a4 <__mdiff+0x80>
 800b4d4:	1b33      	subs	r3, r6, r4
 800b4d6:	3b15      	subs	r3, #21
 800b4d8:	f023 0303 	bic.w	r3, r3, #3
 800b4dc:	3304      	adds	r3, #4
 800b4de:	3415      	adds	r4, #21
 800b4e0:	42a6      	cmp	r6, r4
 800b4e2:	bf38      	it	cc
 800b4e4:	2304      	movcc	r3, #4
 800b4e6:	441d      	add	r5, r3
 800b4e8:	4473      	add	r3, lr
 800b4ea:	469e      	mov	lr, r3
 800b4ec:	462e      	mov	r6, r5
 800b4ee:	4566      	cmp	r6, ip
 800b4f0:	d30e      	bcc.n	800b510 <__mdiff+0xec>
 800b4f2:	f10c 0203 	add.w	r2, ip, #3
 800b4f6:	1b52      	subs	r2, r2, r5
 800b4f8:	f022 0203 	bic.w	r2, r2, #3
 800b4fc:	3d03      	subs	r5, #3
 800b4fe:	45ac      	cmp	ip, r5
 800b500:	bf38      	it	cc
 800b502:	2200      	movcc	r2, #0
 800b504:	441a      	add	r2, r3
 800b506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b50a:	b17b      	cbz	r3, 800b52c <__mdiff+0x108>
 800b50c:	6107      	str	r7, [r0, #16]
 800b50e:	e7a3      	b.n	800b458 <__mdiff+0x34>
 800b510:	f856 8b04 	ldr.w	r8, [r6], #4
 800b514:	fa11 f288 	uxtah	r2, r1, r8
 800b518:	1414      	asrs	r4, r2, #16
 800b51a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b51e:	b292      	uxth	r2, r2
 800b520:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b524:	f84e 2b04 	str.w	r2, [lr], #4
 800b528:	1421      	asrs	r1, r4, #16
 800b52a:	e7e0      	b.n	800b4ee <__mdiff+0xca>
 800b52c:	3f01      	subs	r7, #1
 800b52e:	e7ea      	b.n	800b506 <__mdiff+0xe2>
 800b530:	0800c66b 	.word	0x0800c66b
 800b534:	0800c686 	.word	0x0800c686

0800b538 <__d2b>:
 800b538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	4689      	mov	r9, r1
 800b53e:	2101      	movs	r1, #1
 800b540:	ec57 6b10 	vmov	r6, r7, d0
 800b544:	4690      	mov	r8, r2
 800b546:	f7ff fccf 	bl	800aee8 <_Balloc>
 800b54a:	4604      	mov	r4, r0
 800b54c:	b930      	cbnz	r0, 800b55c <__d2b+0x24>
 800b54e:	4602      	mov	r2, r0
 800b550:	4b25      	ldr	r3, [pc, #148]	; (800b5e8 <__d2b+0xb0>)
 800b552:	4826      	ldr	r0, [pc, #152]	; (800b5ec <__d2b+0xb4>)
 800b554:	f240 310a 	movw	r1, #778	; 0x30a
 800b558:	f000 fb64 	bl	800bc24 <__assert_func>
 800b55c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b564:	bb35      	cbnz	r5, 800b5b4 <__d2b+0x7c>
 800b566:	2e00      	cmp	r6, #0
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	d028      	beq.n	800b5be <__d2b+0x86>
 800b56c:	4668      	mov	r0, sp
 800b56e:	9600      	str	r6, [sp, #0]
 800b570:	f7ff fd82 	bl	800b078 <__lo0bits>
 800b574:	9900      	ldr	r1, [sp, #0]
 800b576:	b300      	cbz	r0, 800b5ba <__d2b+0x82>
 800b578:	9a01      	ldr	r2, [sp, #4]
 800b57a:	f1c0 0320 	rsb	r3, r0, #32
 800b57e:	fa02 f303 	lsl.w	r3, r2, r3
 800b582:	430b      	orrs	r3, r1
 800b584:	40c2      	lsrs	r2, r0
 800b586:	6163      	str	r3, [r4, #20]
 800b588:	9201      	str	r2, [sp, #4]
 800b58a:	9b01      	ldr	r3, [sp, #4]
 800b58c:	61a3      	str	r3, [r4, #24]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	bf14      	ite	ne
 800b592:	2202      	movne	r2, #2
 800b594:	2201      	moveq	r2, #1
 800b596:	6122      	str	r2, [r4, #16]
 800b598:	b1d5      	cbz	r5, 800b5d0 <__d2b+0x98>
 800b59a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b59e:	4405      	add	r5, r0
 800b5a0:	f8c9 5000 	str.w	r5, [r9]
 800b5a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5a8:	f8c8 0000 	str.w	r0, [r8]
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	b003      	add	sp, #12
 800b5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5b8:	e7d5      	b.n	800b566 <__d2b+0x2e>
 800b5ba:	6161      	str	r1, [r4, #20]
 800b5bc:	e7e5      	b.n	800b58a <__d2b+0x52>
 800b5be:	a801      	add	r0, sp, #4
 800b5c0:	f7ff fd5a 	bl	800b078 <__lo0bits>
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	6163      	str	r3, [r4, #20]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	6122      	str	r2, [r4, #16]
 800b5cc:	3020      	adds	r0, #32
 800b5ce:	e7e3      	b.n	800b598 <__d2b+0x60>
 800b5d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5d8:	f8c9 0000 	str.w	r0, [r9]
 800b5dc:	6918      	ldr	r0, [r3, #16]
 800b5de:	f7ff fd2b 	bl	800b038 <__hi0bits>
 800b5e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5e6:	e7df      	b.n	800b5a8 <__d2b+0x70>
 800b5e8:	0800c66b 	.word	0x0800c66b
 800b5ec:	0800c686 	.word	0x0800c686

0800b5f0 <_calloc_r>:
 800b5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5f2:	fba1 2402 	umull	r2, r4, r1, r2
 800b5f6:	b94c      	cbnz	r4, 800b60c <_calloc_r+0x1c>
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	9201      	str	r2, [sp, #4]
 800b5fc:	f7fd fe12 	bl	8009224 <_malloc_r>
 800b600:	9a01      	ldr	r2, [sp, #4]
 800b602:	4605      	mov	r5, r0
 800b604:	b930      	cbnz	r0, 800b614 <_calloc_r+0x24>
 800b606:	4628      	mov	r0, r5
 800b608:	b003      	add	sp, #12
 800b60a:	bd30      	pop	{r4, r5, pc}
 800b60c:	220c      	movs	r2, #12
 800b60e:	6002      	str	r2, [r0, #0]
 800b610:	2500      	movs	r5, #0
 800b612:	e7f8      	b.n	800b606 <_calloc_r+0x16>
 800b614:	4621      	mov	r1, r4
 800b616:	f7fd fd91 	bl	800913c <memset>
 800b61a:	e7f4      	b.n	800b606 <_calloc_r+0x16>

0800b61c <_realloc_r>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	4680      	mov	r8, r0
 800b622:	4614      	mov	r4, r2
 800b624:	460e      	mov	r6, r1
 800b626:	b921      	cbnz	r1, 800b632 <_realloc_r+0x16>
 800b628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	4611      	mov	r1, r2
 800b62e:	f7fd bdf9 	b.w	8009224 <_malloc_r>
 800b632:	b92a      	cbnz	r2, 800b640 <_realloc_r+0x24>
 800b634:	f7fd fd8a 	bl	800914c <_free_r>
 800b638:	4625      	mov	r5, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b640:	f000 fb5c 	bl	800bcfc <_malloc_usable_size_r>
 800b644:	4284      	cmp	r4, r0
 800b646:	4607      	mov	r7, r0
 800b648:	d802      	bhi.n	800b650 <_realloc_r+0x34>
 800b64a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b64e:	d812      	bhi.n	800b676 <_realloc_r+0x5a>
 800b650:	4621      	mov	r1, r4
 800b652:	4640      	mov	r0, r8
 800b654:	f7fd fde6 	bl	8009224 <_malloc_r>
 800b658:	4605      	mov	r5, r0
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d0ed      	beq.n	800b63a <_realloc_r+0x1e>
 800b65e:	42bc      	cmp	r4, r7
 800b660:	4622      	mov	r2, r4
 800b662:	4631      	mov	r1, r6
 800b664:	bf28      	it	cs
 800b666:	463a      	movcs	r2, r7
 800b668:	f7fd fd5a 	bl	8009120 <memcpy>
 800b66c:	4631      	mov	r1, r6
 800b66e:	4640      	mov	r0, r8
 800b670:	f7fd fd6c 	bl	800914c <_free_r>
 800b674:	e7e1      	b.n	800b63a <_realloc_r+0x1e>
 800b676:	4635      	mov	r5, r6
 800b678:	e7df      	b.n	800b63a <_realloc_r+0x1e>

0800b67a <__ssputs_r>:
 800b67a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67e:	688e      	ldr	r6, [r1, #8]
 800b680:	429e      	cmp	r6, r3
 800b682:	4682      	mov	sl, r0
 800b684:	460c      	mov	r4, r1
 800b686:	4690      	mov	r8, r2
 800b688:	461f      	mov	r7, r3
 800b68a:	d838      	bhi.n	800b6fe <__ssputs_r+0x84>
 800b68c:	898a      	ldrh	r2, [r1, #12]
 800b68e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b692:	d032      	beq.n	800b6fa <__ssputs_r+0x80>
 800b694:	6825      	ldr	r5, [r4, #0]
 800b696:	6909      	ldr	r1, [r1, #16]
 800b698:	eba5 0901 	sub.w	r9, r5, r1
 800b69c:	6965      	ldr	r5, [r4, #20]
 800b69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	444b      	add	r3, r9
 800b6aa:	106d      	asrs	r5, r5, #1
 800b6ac:	429d      	cmp	r5, r3
 800b6ae:	bf38      	it	cc
 800b6b0:	461d      	movcc	r5, r3
 800b6b2:	0553      	lsls	r3, r2, #21
 800b6b4:	d531      	bpl.n	800b71a <__ssputs_r+0xa0>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7fd fdb4 	bl	8009224 <_malloc_r>
 800b6bc:	4606      	mov	r6, r0
 800b6be:	b950      	cbnz	r0, 800b6d6 <__ssputs_r+0x5c>
 800b6c0:	230c      	movs	r3, #12
 800b6c2:	f8ca 3000 	str.w	r3, [sl]
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d6:	6921      	ldr	r1, [r4, #16]
 800b6d8:	464a      	mov	r2, r9
 800b6da:	f7fd fd21 	bl	8009120 <memcpy>
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	6126      	str	r6, [r4, #16]
 800b6ec:	6165      	str	r5, [r4, #20]
 800b6ee:	444e      	add	r6, r9
 800b6f0:	eba5 0509 	sub.w	r5, r5, r9
 800b6f4:	6026      	str	r6, [r4, #0]
 800b6f6:	60a5      	str	r5, [r4, #8]
 800b6f8:	463e      	mov	r6, r7
 800b6fa:	42be      	cmp	r6, r7
 800b6fc:	d900      	bls.n	800b700 <__ssputs_r+0x86>
 800b6fe:	463e      	mov	r6, r7
 800b700:	6820      	ldr	r0, [r4, #0]
 800b702:	4632      	mov	r2, r6
 800b704:	4641      	mov	r1, r8
 800b706:	f000 fadf 	bl	800bcc8 <memmove>
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	1b9b      	subs	r3, r3, r6
 800b70e:	60a3      	str	r3, [r4, #8]
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	4433      	add	r3, r6
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	2000      	movs	r0, #0
 800b718:	e7db      	b.n	800b6d2 <__ssputs_r+0x58>
 800b71a:	462a      	mov	r2, r5
 800b71c:	f7ff ff7e 	bl	800b61c <_realloc_r>
 800b720:	4606      	mov	r6, r0
 800b722:	2800      	cmp	r0, #0
 800b724:	d1e1      	bne.n	800b6ea <__ssputs_r+0x70>
 800b726:	6921      	ldr	r1, [r4, #16]
 800b728:	4650      	mov	r0, sl
 800b72a:	f7fd fd0f 	bl	800914c <_free_r>
 800b72e:	e7c7      	b.n	800b6c0 <__ssputs_r+0x46>

0800b730 <_svfiprintf_r>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	4698      	mov	r8, r3
 800b736:	898b      	ldrh	r3, [r1, #12]
 800b738:	061b      	lsls	r3, r3, #24
 800b73a:	b09d      	sub	sp, #116	; 0x74
 800b73c:	4607      	mov	r7, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	4614      	mov	r4, r2
 800b742:	d50e      	bpl.n	800b762 <_svfiprintf_r+0x32>
 800b744:	690b      	ldr	r3, [r1, #16]
 800b746:	b963      	cbnz	r3, 800b762 <_svfiprintf_r+0x32>
 800b748:	2140      	movs	r1, #64	; 0x40
 800b74a:	f7fd fd6b 	bl	8009224 <_malloc_r>
 800b74e:	6028      	str	r0, [r5, #0]
 800b750:	6128      	str	r0, [r5, #16]
 800b752:	b920      	cbnz	r0, 800b75e <_svfiprintf_r+0x2e>
 800b754:	230c      	movs	r3, #12
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	e0d1      	b.n	800b902 <_svfiprintf_r+0x1d2>
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	616b      	str	r3, [r5, #20]
 800b762:	2300      	movs	r3, #0
 800b764:	9309      	str	r3, [sp, #36]	; 0x24
 800b766:	2320      	movs	r3, #32
 800b768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b76c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b770:	2330      	movs	r3, #48	; 0x30
 800b772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b91c <_svfiprintf_r+0x1ec>
 800b776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b77a:	f04f 0901 	mov.w	r9, #1
 800b77e:	4623      	mov	r3, r4
 800b780:	469a      	mov	sl, r3
 800b782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b786:	b10a      	cbz	r2, 800b78c <_svfiprintf_r+0x5c>
 800b788:	2a25      	cmp	r2, #37	; 0x25
 800b78a:	d1f9      	bne.n	800b780 <_svfiprintf_r+0x50>
 800b78c:	ebba 0b04 	subs.w	fp, sl, r4
 800b790:	d00b      	beq.n	800b7aa <_svfiprintf_r+0x7a>
 800b792:	465b      	mov	r3, fp
 800b794:	4622      	mov	r2, r4
 800b796:	4629      	mov	r1, r5
 800b798:	4638      	mov	r0, r7
 800b79a:	f7ff ff6e 	bl	800b67a <__ssputs_r>
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f000 80aa 	beq.w	800b8f8 <_svfiprintf_r+0x1c8>
 800b7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a6:	445a      	add	r2, fp
 800b7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 80a2 	beq.w	800b8f8 <_svfiprintf_r+0x1c8>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7be:	f10a 0a01 	add.w	sl, sl, #1
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	9307      	str	r3, [sp, #28]
 800b7c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b7cc:	4654      	mov	r4, sl
 800b7ce:	2205      	movs	r2, #5
 800b7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d4:	4851      	ldr	r0, [pc, #324]	; (800b91c <_svfiprintf_r+0x1ec>)
 800b7d6:	f7f4 fd0b 	bl	80001f0 <memchr>
 800b7da:	9a04      	ldr	r2, [sp, #16]
 800b7dc:	b9d8      	cbnz	r0, 800b816 <_svfiprintf_r+0xe6>
 800b7de:	06d0      	lsls	r0, r2, #27
 800b7e0:	bf44      	itt	mi
 800b7e2:	2320      	movmi	r3, #32
 800b7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e8:	0711      	lsls	r1, r2, #28
 800b7ea:	bf44      	itt	mi
 800b7ec:	232b      	movmi	r3, #43	; 0x2b
 800b7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f8:	d015      	beq.n	800b826 <_svfiprintf_r+0xf6>
 800b7fa:	9a07      	ldr	r2, [sp, #28]
 800b7fc:	4654      	mov	r4, sl
 800b7fe:	2000      	movs	r0, #0
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4621      	mov	r1, r4
 800b806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80a:	3b30      	subs	r3, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d94e      	bls.n	800b8ae <_svfiprintf_r+0x17e>
 800b810:	b1b0      	cbz	r0, 800b840 <_svfiprintf_r+0x110>
 800b812:	9207      	str	r2, [sp, #28]
 800b814:	e014      	b.n	800b840 <_svfiprintf_r+0x110>
 800b816:	eba0 0308 	sub.w	r3, r0, r8
 800b81a:	fa09 f303 	lsl.w	r3, r9, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	46a2      	mov	sl, r4
 800b824:	e7d2      	b.n	800b7cc <_svfiprintf_r+0x9c>
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	1d19      	adds	r1, r3, #4
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	9103      	str	r1, [sp, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bfbb      	ittet	lt
 800b832:	425b      	neglt	r3, r3
 800b834:	f042 0202 	orrlt.w	r2, r2, #2
 800b838:	9307      	strge	r3, [sp, #28]
 800b83a:	9307      	strlt	r3, [sp, #28]
 800b83c:	bfb8      	it	lt
 800b83e:	9204      	strlt	r2, [sp, #16]
 800b840:	7823      	ldrb	r3, [r4, #0]
 800b842:	2b2e      	cmp	r3, #46	; 0x2e
 800b844:	d10c      	bne.n	800b860 <_svfiprintf_r+0x130>
 800b846:	7863      	ldrb	r3, [r4, #1]
 800b848:	2b2a      	cmp	r3, #42	; 0x2a
 800b84a:	d135      	bne.n	800b8b8 <_svfiprintf_r+0x188>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	1d1a      	adds	r2, r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	9203      	str	r2, [sp, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfb8      	it	lt
 800b858:	f04f 33ff 	movlt.w	r3, #4294967295
 800b85c:	3402      	adds	r4, #2
 800b85e:	9305      	str	r3, [sp, #20]
 800b860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b92c <_svfiprintf_r+0x1fc>
 800b864:	7821      	ldrb	r1, [r4, #0]
 800b866:	2203      	movs	r2, #3
 800b868:	4650      	mov	r0, sl
 800b86a:	f7f4 fcc1 	bl	80001f0 <memchr>
 800b86e:	b140      	cbz	r0, 800b882 <_svfiprintf_r+0x152>
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	eba0 000a 	sub.w	r0, r0, sl
 800b876:	fa03 f000 	lsl.w	r0, r3, r0
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	4303      	orrs	r3, r0
 800b87e:	3401      	adds	r4, #1
 800b880:	9304      	str	r3, [sp, #16]
 800b882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b886:	4826      	ldr	r0, [pc, #152]	; (800b920 <_svfiprintf_r+0x1f0>)
 800b888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b88c:	2206      	movs	r2, #6
 800b88e:	f7f4 fcaf 	bl	80001f0 <memchr>
 800b892:	2800      	cmp	r0, #0
 800b894:	d038      	beq.n	800b908 <_svfiprintf_r+0x1d8>
 800b896:	4b23      	ldr	r3, [pc, #140]	; (800b924 <_svfiprintf_r+0x1f4>)
 800b898:	bb1b      	cbnz	r3, 800b8e2 <_svfiprintf_r+0x1b2>
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	3307      	adds	r3, #7
 800b89e:	f023 0307 	bic.w	r3, r3, #7
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	9303      	str	r3, [sp, #12]
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	4433      	add	r3, r6
 800b8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ac:	e767      	b.n	800b77e <_svfiprintf_r+0x4e>
 800b8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	e7a5      	b.n	800b804 <_svfiprintf_r+0xd4>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	9305      	str	r3, [sp, #20]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	f04f 0c0a 	mov.w	ip, #10
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ca:	3a30      	subs	r2, #48	; 0x30
 800b8cc:	2a09      	cmp	r2, #9
 800b8ce:	d903      	bls.n	800b8d8 <_svfiprintf_r+0x1a8>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0c5      	beq.n	800b860 <_svfiprintf_r+0x130>
 800b8d4:	9105      	str	r1, [sp, #20]
 800b8d6:	e7c3      	b.n	800b860 <_svfiprintf_r+0x130>
 800b8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8dc:	4604      	mov	r4, r0
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7f0      	b.n	800b8c4 <_svfiprintf_r+0x194>
 800b8e2:	ab03      	add	r3, sp, #12
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <_svfiprintf_r+0x1f8>)
 800b8ea:	a904      	add	r1, sp, #16
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f7fd fdad 	bl	800944c <_printf_float>
 800b8f2:	1c42      	adds	r2, r0, #1
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	d1d6      	bne.n	800b8a6 <_svfiprintf_r+0x176>
 800b8f8:	89ab      	ldrh	r3, [r5, #12]
 800b8fa:	065b      	lsls	r3, r3, #25
 800b8fc:	f53f af2c 	bmi.w	800b758 <_svfiprintf_r+0x28>
 800b900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b902:	b01d      	add	sp, #116	; 0x74
 800b904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <_svfiprintf_r+0x1f8>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	4638      	mov	r0, r7
 800b914:	f7fe f83e 	bl	8009994 <_printf_i>
 800b918:	e7eb      	b.n	800b8f2 <_svfiprintf_r+0x1c2>
 800b91a:	bf00      	nop
 800b91c:	0800c7e4 	.word	0x0800c7e4
 800b920:	0800c7ee 	.word	0x0800c7ee
 800b924:	0800944d 	.word	0x0800944d
 800b928:	0800b67b 	.word	0x0800b67b
 800b92c:	0800c7ea 	.word	0x0800c7ea

0800b930 <__sfputc_r>:
 800b930:	6893      	ldr	r3, [r2, #8]
 800b932:	3b01      	subs	r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	b410      	push	{r4}
 800b938:	6093      	str	r3, [r2, #8]
 800b93a:	da08      	bge.n	800b94e <__sfputc_r+0x1e>
 800b93c:	6994      	ldr	r4, [r2, #24]
 800b93e:	42a3      	cmp	r3, r4
 800b940:	db01      	blt.n	800b946 <__sfputc_r+0x16>
 800b942:	290a      	cmp	r1, #10
 800b944:	d103      	bne.n	800b94e <__sfputc_r+0x1e>
 800b946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b94a:	f7fe bad7 	b.w	8009efc <__swbuf_r>
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	1c58      	adds	r0, r3, #1
 800b952:	6010      	str	r0, [r2, #0]
 800b954:	7019      	strb	r1, [r3, #0]
 800b956:	4608      	mov	r0, r1
 800b958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <__sfputs_r>:
 800b95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b960:	4606      	mov	r6, r0
 800b962:	460f      	mov	r7, r1
 800b964:	4614      	mov	r4, r2
 800b966:	18d5      	adds	r5, r2, r3
 800b968:	42ac      	cmp	r4, r5
 800b96a:	d101      	bne.n	800b970 <__sfputs_r+0x12>
 800b96c:	2000      	movs	r0, #0
 800b96e:	e007      	b.n	800b980 <__sfputs_r+0x22>
 800b970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b974:	463a      	mov	r2, r7
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff ffda 	bl	800b930 <__sfputc_r>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d1f3      	bne.n	800b968 <__sfputs_r+0xa>
 800b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b984 <_vfiprintf_r>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	460d      	mov	r5, r1
 800b98a:	b09d      	sub	sp, #116	; 0x74
 800b98c:	4614      	mov	r4, r2
 800b98e:	4698      	mov	r8, r3
 800b990:	4606      	mov	r6, r0
 800b992:	b118      	cbz	r0, 800b99c <_vfiprintf_r+0x18>
 800b994:	6983      	ldr	r3, [r0, #24]
 800b996:	b90b      	cbnz	r3, 800b99c <_vfiprintf_r+0x18>
 800b998:	f7fd faf4 	bl	8008f84 <__sinit>
 800b99c:	4b89      	ldr	r3, [pc, #548]	; (800bbc4 <_vfiprintf_r+0x240>)
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	d11b      	bne.n	800b9da <_vfiprintf_r+0x56>
 800b9a2:	6875      	ldr	r5, [r6, #4]
 800b9a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a6:	07d9      	lsls	r1, r3, #31
 800b9a8:	d405      	bmi.n	800b9b6 <_vfiprintf_r+0x32>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	059a      	lsls	r2, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_vfiprintf_r+0x32>
 800b9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9b2:	f7fd fbaa 	bl	800910a <__retarget_lock_acquire_recursive>
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	071b      	lsls	r3, r3, #28
 800b9ba:	d501      	bpl.n	800b9c0 <_vfiprintf_r+0x3c>
 800b9bc:	692b      	ldr	r3, [r5, #16]
 800b9be:	b9eb      	cbnz	r3, 800b9fc <_vfiprintf_r+0x78>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7fe fafe 	bl	8009fc4 <__swsetup_r>
 800b9c8:	b1c0      	cbz	r0, 800b9fc <_vfiprintf_r+0x78>
 800b9ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9cc:	07dc      	lsls	r4, r3, #31
 800b9ce:	d50e      	bpl.n	800b9ee <_vfiprintf_r+0x6a>
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	b01d      	add	sp, #116	; 0x74
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	4b7b      	ldr	r3, [pc, #492]	; (800bbc8 <_vfiprintf_r+0x244>)
 800b9dc:	429d      	cmp	r5, r3
 800b9de:	d101      	bne.n	800b9e4 <_vfiprintf_r+0x60>
 800b9e0:	68b5      	ldr	r5, [r6, #8]
 800b9e2:	e7df      	b.n	800b9a4 <_vfiprintf_r+0x20>
 800b9e4:	4b79      	ldr	r3, [pc, #484]	; (800bbcc <_vfiprintf_r+0x248>)
 800b9e6:	429d      	cmp	r5, r3
 800b9e8:	bf08      	it	eq
 800b9ea:	68f5      	ldreq	r5, [r6, #12]
 800b9ec:	e7da      	b.n	800b9a4 <_vfiprintf_r+0x20>
 800b9ee:	89ab      	ldrh	r3, [r5, #12]
 800b9f0:	0598      	lsls	r0, r3, #22
 800b9f2:	d4ed      	bmi.n	800b9d0 <_vfiprintf_r+0x4c>
 800b9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9f6:	f7fd fb89 	bl	800910c <__retarget_lock_release_recursive>
 800b9fa:	e7e9      	b.n	800b9d0 <_vfiprintf_r+0x4c>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ba00:	2320      	movs	r3, #32
 800ba02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba0a:	2330      	movs	r3, #48	; 0x30
 800ba0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbd0 <_vfiprintf_r+0x24c>
 800ba10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba14:	f04f 0901 	mov.w	r9, #1
 800ba18:	4623      	mov	r3, r4
 800ba1a:	469a      	mov	sl, r3
 800ba1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba20:	b10a      	cbz	r2, 800ba26 <_vfiprintf_r+0xa2>
 800ba22:	2a25      	cmp	r2, #37	; 0x25
 800ba24:	d1f9      	bne.n	800ba1a <_vfiprintf_r+0x96>
 800ba26:	ebba 0b04 	subs.w	fp, sl, r4
 800ba2a:	d00b      	beq.n	800ba44 <_vfiprintf_r+0xc0>
 800ba2c:	465b      	mov	r3, fp
 800ba2e:	4622      	mov	r2, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7ff ff93 	bl	800b95e <__sfputs_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	f000 80aa 	beq.w	800bb92 <_vfiprintf_r+0x20e>
 800ba3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba40:	445a      	add	r2, fp
 800ba42:	9209      	str	r2, [sp, #36]	; 0x24
 800ba44:	f89a 3000 	ldrb.w	r3, [sl]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 80a2 	beq.w	800bb92 <_vfiprintf_r+0x20e>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295
 800ba54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba58:	f10a 0a01 	add.w	sl, sl, #1
 800ba5c:	9304      	str	r3, [sp, #16]
 800ba5e:	9307      	str	r3, [sp, #28]
 800ba60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba64:	931a      	str	r3, [sp, #104]	; 0x68
 800ba66:	4654      	mov	r4, sl
 800ba68:	2205      	movs	r2, #5
 800ba6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6e:	4858      	ldr	r0, [pc, #352]	; (800bbd0 <_vfiprintf_r+0x24c>)
 800ba70:	f7f4 fbbe 	bl	80001f0 <memchr>
 800ba74:	9a04      	ldr	r2, [sp, #16]
 800ba76:	b9d8      	cbnz	r0, 800bab0 <_vfiprintf_r+0x12c>
 800ba78:	06d1      	lsls	r1, r2, #27
 800ba7a:	bf44      	itt	mi
 800ba7c:	2320      	movmi	r3, #32
 800ba7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba82:	0713      	lsls	r3, r2, #28
 800ba84:	bf44      	itt	mi
 800ba86:	232b      	movmi	r3, #43	; 0x2b
 800ba88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba90:	2b2a      	cmp	r3, #42	; 0x2a
 800ba92:	d015      	beq.n	800bac0 <_vfiprintf_r+0x13c>
 800ba94:	9a07      	ldr	r2, [sp, #28]
 800ba96:	4654      	mov	r4, sl
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f04f 0c0a 	mov.w	ip, #10
 800ba9e:	4621      	mov	r1, r4
 800baa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baa4:	3b30      	subs	r3, #48	; 0x30
 800baa6:	2b09      	cmp	r3, #9
 800baa8:	d94e      	bls.n	800bb48 <_vfiprintf_r+0x1c4>
 800baaa:	b1b0      	cbz	r0, 800bada <_vfiprintf_r+0x156>
 800baac:	9207      	str	r2, [sp, #28]
 800baae:	e014      	b.n	800bada <_vfiprintf_r+0x156>
 800bab0:	eba0 0308 	sub.w	r3, r0, r8
 800bab4:	fa09 f303 	lsl.w	r3, r9, r3
 800bab8:	4313      	orrs	r3, r2
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	46a2      	mov	sl, r4
 800babe:	e7d2      	b.n	800ba66 <_vfiprintf_r+0xe2>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	1d19      	adds	r1, r3, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	9103      	str	r1, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfbb      	ittet	lt
 800bacc:	425b      	neglt	r3, r3
 800bace:	f042 0202 	orrlt.w	r2, r2, #2
 800bad2:	9307      	strge	r3, [sp, #28]
 800bad4:	9307      	strlt	r3, [sp, #28]
 800bad6:	bfb8      	it	lt
 800bad8:	9204      	strlt	r2, [sp, #16]
 800bada:	7823      	ldrb	r3, [r4, #0]
 800badc:	2b2e      	cmp	r3, #46	; 0x2e
 800bade:	d10c      	bne.n	800bafa <_vfiprintf_r+0x176>
 800bae0:	7863      	ldrb	r3, [r4, #1]
 800bae2:	2b2a      	cmp	r3, #42	; 0x2a
 800bae4:	d135      	bne.n	800bb52 <_vfiprintf_r+0x1ce>
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	1d1a      	adds	r2, r3, #4
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	9203      	str	r2, [sp, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfb8      	it	lt
 800baf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800baf6:	3402      	adds	r4, #2
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbe0 <_vfiprintf_r+0x25c>
 800bafe:	7821      	ldrb	r1, [r4, #0]
 800bb00:	2203      	movs	r2, #3
 800bb02:	4650      	mov	r0, sl
 800bb04:	f7f4 fb74 	bl	80001f0 <memchr>
 800bb08:	b140      	cbz	r0, 800bb1c <_vfiprintf_r+0x198>
 800bb0a:	2340      	movs	r3, #64	; 0x40
 800bb0c:	eba0 000a 	sub.w	r0, r0, sl
 800bb10:	fa03 f000 	lsl.w	r0, r3, r0
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	4303      	orrs	r3, r0
 800bb18:	3401      	adds	r4, #1
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb20:	482c      	ldr	r0, [pc, #176]	; (800bbd4 <_vfiprintf_r+0x250>)
 800bb22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb26:	2206      	movs	r2, #6
 800bb28:	f7f4 fb62 	bl	80001f0 <memchr>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d03f      	beq.n	800bbb0 <_vfiprintf_r+0x22c>
 800bb30:	4b29      	ldr	r3, [pc, #164]	; (800bbd8 <_vfiprintf_r+0x254>)
 800bb32:	bb1b      	cbnz	r3, 800bb7c <_vfiprintf_r+0x1f8>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	3307      	adds	r3, #7
 800bb38:	f023 0307 	bic.w	r3, r3, #7
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	9303      	str	r3, [sp, #12]
 800bb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb42:	443b      	add	r3, r7
 800bb44:	9309      	str	r3, [sp, #36]	; 0x24
 800bb46:	e767      	b.n	800ba18 <_vfiprintf_r+0x94>
 800bb48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e7a5      	b.n	800ba9e <_vfiprintf_r+0x11a>
 800bb52:	2300      	movs	r3, #0
 800bb54:	3401      	adds	r4, #1
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f04f 0c0a 	mov.w	ip, #10
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb64:	3a30      	subs	r2, #48	; 0x30
 800bb66:	2a09      	cmp	r2, #9
 800bb68:	d903      	bls.n	800bb72 <_vfiprintf_r+0x1ee>
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0c5      	beq.n	800bafa <_vfiprintf_r+0x176>
 800bb6e:	9105      	str	r1, [sp, #20]
 800bb70:	e7c3      	b.n	800bafa <_vfiprintf_r+0x176>
 800bb72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb76:	4604      	mov	r4, r0
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e7f0      	b.n	800bb5e <_vfiprintf_r+0x1da>
 800bb7c:	ab03      	add	r3, sp, #12
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	462a      	mov	r2, r5
 800bb82:	4b16      	ldr	r3, [pc, #88]	; (800bbdc <_vfiprintf_r+0x258>)
 800bb84:	a904      	add	r1, sp, #16
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7fd fc60 	bl	800944c <_printf_float>
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	1c78      	adds	r0, r7, #1
 800bb90:	d1d6      	bne.n	800bb40 <_vfiprintf_r+0x1bc>
 800bb92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb94:	07d9      	lsls	r1, r3, #31
 800bb96:	d405      	bmi.n	800bba4 <_vfiprintf_r+0x220>
 800bb98:	89ab      	ldrh	r3, [r5, #12]
 800bb9a:	059a      	lsls	r2, r3, #22
 800bb9c:	d402      	bmi.n	800bba4 <_vfiprintf_r+0x220>
 800bb9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba0:	f7fd fab4 	bl	800910c <__retarget_lock_release_recursive>
 800bba4:	89ab      	ldrh	r3, [r5, #12]
 800bba6:	065b      	lsls	r3, r3, #25
 800bba8:	f53f af12 	bmi.w	800b9d0 <_vfiprintf_r+0x4c>
 800bbac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbae:	e711      	b.n	800b9d4 <_vfiprintf_r+0x50>
 800bbb0:	ab03      	add	r3, sp, #12
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	4b09      	ldr	r3, [pc, #36]	; (800bbdc <_vfiprintf_r+0x258>)
 800bbb8:	a904      	add	r1, sp, #16
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7fd feea 	bl	8009994 <_printf_i>
 800bbc0:	e7e4      	b.n	800bb8c <_vfiprintf_r+0x208>
 800bbc2:	bf00      	nop
 800bbc4:	0800c574 	.word	0x0800c574
 800bbc8:	0800c594 	.word	0x0800c594
 800bbcc:	0800c554 	.word	0x0800c554
 800bbd0:	0800c7e4 	.word	0x0800c7e4
 800bbd4:	0800c7ee 	.word	0x0800c7ee
 800bbd8:	0800944d 	.word	0x0800944d
 800bbdc:	0800b95f 	.word	0x0800b95f
 800bbe0:	0800c7ea 	.word	0x0800c7ea

0800bbe4 <_read_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d07      	ldr	r5, [pc, #28]	; (800bc04 <_read_r+0x20>)
 800bbe8:	4604      	mov	r4, r0
 800bbea:	4608      	mov	r0, r1
 800bbec:	4611      	mov	r1, r2
 800bbee:	2200      	movs	r2, #0
 800bbf0:	602a      	str	r2, [r5, #0]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f7f6 fa10 	bl	8002018 <_read>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_read_r+0x1e>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_read_r+0x1e>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	200162dc 	.word	0x200162dc

0800bc08 <__ascii_wctomb>:
 800bc08:	b149      	cbz	r1, 800bc1e <__ascii_wctomb+0x16>
 800bc0a:	2aff      	cmp	r2, #255	; 0xff
 800bc0c:	bf85      	ittet	hi
 800bc0e:	238a      	movhi	r3, #138	; 0x8a
 800bc10:	6003      	strhi	r3, [r0, #0]
 800bc12:	700a      	strbls	r2, [r1, #0]
 800bc14:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc18:	bf98      	it	ls
 800bc1a:	2001      	movls	r0, #1
 800bc1c:	4770      	bx	lr
 800bc1e:	4608      	mov	r0, r1
 800bc20:	4770      	bx	lr
	...

0800bc24 <__assert_func>:
 800bc24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc26:	4614      	mov	r4, r2
 800bc28:	461a      	mov	r2, r3
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <__assert_func+0x2c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4605      	mov	r5, r0
 800bc30:	68d8      	ldr	r0, [r3, #12]
 800bc32:	b14c      	cbz	r4, 800bc48 <__assert_func+0x24>
 800bc34:	4b07      	ldr	r3, [pc, #28]	; (800bc54 <__assert_func+0x30>)
 800bc36:	9100      	str	r1, [sp, #0]
 800bc38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc3c:	4906      	ldr	r1, [pc, #24]	; (800bc58 <__assert_func+0x34>)
 800bc3e:	462b      	mov	r3, r5
 800bc40:	f000 f80e 	bl	800bc60 <fiprintf>
 800bc44:	f000 f862 	bl	800bd0c <abort>
 800bc48:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <__assert_func+0x38>)
 800bc4a:	461c      	mov	r4, r3
 800bc4c:	e7f3      	b.n	800bc36 <__assert_func+0x12>
 800bc4e:	bf00      	nop
 800bc50:	20000014 	.word	0x20000014
 800bc54:	0800c7f5 	.word	0x0800c7f5
 800bc58:	0800c802 	.word	0x0800c802
 800bc5c:	0800c830 	.word	0x0800c830

0800bc60 <fiprintf>:
 800bc60:	b40e      	push	{r1, r2, r3}
 800bc62:	b503      	push	{r0, r1, lr}
 800bc64:	4601      	mov	r1, r0
 800bc66:	ab03      	add	r3, sp, #12
 800bc68:	4805      	ldr	r0, [pc, #20]	; (800bc80 <fiprintf+0x20>)
 800bc6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6e:	6800      	ldr	r0, [r0, #0]
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	f7ff fe87 	bl	800b984 <_vfiprintf_r>
 800bc76:	b002      	add	sp, #8
 800bc78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc7c:	b003      	add	sp, #12
 800bc7e:	4770      	bx	lr
 800bc80:	20000014 	.word	0x20000014

0800bc84 <_fstat_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d07      	ldr	r5, [pc, #28]	; (800bca4 <_fstat_r+0x20>)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	4611      	mov	r1, r2
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	f7f6 f9ea 	bl	800206a <_fstat>
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	d102      	bne.n	800bca0 <_fstat_r+0x1c>
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	b103      	cbz	r3, 800bca0 <_fstat_r+0x1c>
 800bc9e:	6023      	str	r3, [r4, #0]
 800bca0:	bd38      	pop	{r3, r4, r5, pc}
 800bca2:	bf00      	nop
 800bca4:	200162dc 	.word	0x200162dc

0800bca8 <_isatty_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d06      	ldr	r5, [pc, #24]	; (800bcc4 <_isatty_r+0x1c>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7f6 f9e9 	bl	800208a <_isatty>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_isatty_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_isatty_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	200162dc 	.word	0x200162dc

0800bcc8 <memmove>:
 800bcc8:	4288      	cmp	r0, r1
 800bcca:	b510      	push	{r4, lr}
 800bccc:	eb01 0402 	add.w	r4, r1, r2
 800bcd0:	d902      	bls.n	800bcd8 <memmove+0x10>
 800bcd2:	4284      	cmp	r4, r0
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	d807      	bhi.n	800bce8 <memmove+0x20>
 800bcd8:	1e43      	subs	r3, r0, #1
 800bcda:	42a1      	cmp	r1, r4
 800bcdc:	d008      	beq.n	800bcf0 <memmove+0x28>
 800bcde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bce6:	e7f8      	b.n	800bcda <memmove+0x12>
 800bce8:	4402      	add	r2, r0
 800bcea:	4601      	mov	r1, r0
 800bcec:	428a      	cmp	r2, r1
 800bcee:	d100      	bne.n	800bcf2 <memmove+0x2a>
 800bcf0:	bd10      	pop	{r4, pc}
 800bcf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcfa:	e7f7      	b.n	800bcec <memmove+0x24>

0800bcfc <_malloc_usable_size_r>:
 800bcfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd00:	1f18      	subs	r0, r3, #4
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bfbc      	itt	lt
 800bd06:	580b      	ldrlt	r3, [r1, r0]
 800bd08:	18c0      	addlt	r0, r0, r3
 800bd0a:	4770      	bx	lr

0800bd0c <abort>:
 800bd0c:	b508      	push	{r3, lr}
 800bd0e:	2006      	movs	r0, #6
 800bd10:	f000 f82c 	bl	800bd6c <raise>
 800bd14:	2001      	movs	r0, #1
 800bd16:	f7f6 f975 	bl	8002004 <_exit>

0800bd1a <_raise_r>:
 800bd1a:	291f      	cmp	r1, #31
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4604      	mov	r4, r0
 800bd20:	460d      	mov	r5, r1
 800bd22:	d904      	bls.n	800bd2e <_raise_r+0x14>
 800bd24:	2316      	movs	r3, #22
 800bd26:	6003      	str	r3, [r0, #0]
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	bd38      	pop	{r3, r4, r5, pc}
 800bd2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd30:	b112      	cbz	r2, 800bd38 <_raise_r+0x1e>
 800bd32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd36:	b94b      	cbnz	r3, 800bd4c <_raise_r+0x32>
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 f831 	bl	800bda0 <_getpid_r>
 800bd3e:	462a      	mov	r2, r5
 800bd40:	4601      	mov	r1, r0
 800bd42:	4620      	mov	r0, r4
 800bd44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd48:	f000 b818 	b.w	800bd7c <_kill_r>
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d00a      	beq.n	800bd66 <_raise_r+0x4c>
 800bd50:	1c59      	adds	r1, r3, #1
 800bd52:	d103      	bne.n	800bd5c <_raise_r+0x42>
 800bd54:	2316      	movs	r3, #22
 800bd56:	6003      	str	r3, [r0, #0]
 800bd58:	2001      	movs	r0, #1
 800bd5a:	e7e7      	b.n	800bd2c <_raise_r+0x12>
 800bd5c:	2400      	movs	r4, #0
 800bd5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd62:	4628      	mov	r0, r5
 800bd64:	4798      	blx	r3
 800bd66:	2000      	movs	r0, #0
 800bd68:	e7e0      	b.n	800bd2c <_raise_r+0x12>
	...

0800bd6c <raise>:
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <raise+0xc>)
 800bd6e:	4601      	mov	r1, r0
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f7ff bfd2 	b.w	800bd1a <_raise_r>
 800bd76:	bf00      	nop
 800bd78:	20000014 	.word	0x20000014

0800bd7c <_kill_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	; (800bd9c <_kill_r+0x20>)
 800bd80:	2300      	movs	r3, #0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4608      	mov	r0, r1
 800bd86:	4611      	mov	r1, r2
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f7f6 f92b 	bl	8001fe4 <_kill>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d102      	bne.n	800bd98 <_kill_r+0x1c>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	b103      	cbz	r3, 800bd98 <_kill_r+0x1c>
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200162dc 	.word	0x200162dc

0800bda0 <_getpid_r>:
 800bda0:	f7f6 b918 	b.w	8001fd4 <_getpid>

0800bda4 <_init>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr

0800bdb0 <_fini>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr
