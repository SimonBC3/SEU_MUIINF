
Proy_SEU_Ent2_23_00PROF06_PPB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08010398  08010398  00020398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b48  08010b48  000309cc  2**0
                  CONTENTS
  4 .ARM          00000008  08010b48  08010b48  00020b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b50  08010b50  000309cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010b50  08010b50  00020b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b58  08010b58  00020b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009cc  20000000  08010b5c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017100  200009d0  08011528  000309d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017ad0  08011528  00037ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5d4  00000000  00000000  000309fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000454d  00000000  00000000  0004dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00052520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  00053ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007dde  00000000  00000000  00054f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001998d  00000000  00000000  0005cd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a10  00000000  00000000  0007669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001170ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000713c  00000000  00000000  001170fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009d0 	.word	0x200009d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801037c 	.word	0x0801037c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009d4 	.word	0x200009d4
 80001dc:	0801037c 	.word	0x0801037c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <case_insensitive_strcmp+0x16>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e056      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d10d      	bne.n	8001066 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e050      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e04a      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <case_insensitive_strcmp+0xd4>)
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d103      	bne.n	8001086 <case_insensitive_strcmp+0x5e>
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f103 0220 	add.w	r2, r3, #32
 8001084:	e000      	b.n	8001088 <case_insensitive_strcmp+0x60>
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73bb      	strb	r3, [r7, #14]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	3301      	adds	r3, #1
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <case_insensitive_strcmp+0xd4>)
 8001094:	440b      	add	r3, r1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <case_insensitive_strcmp+0x7e>
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	3320      	adds	r3, #32
 80010a4:	e000      	b.n	80010a8 <case_insensitive_strcmp+0x80>
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0d0      	beq.n	800104e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	737b      	strb	r3, [r7, #13]
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <case_insensitive_strcmp+0xd4>)
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d103      	bne.n	80010cc <case_insensitive_strcmp+0xa4>
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	f103 0220 	add.w	r2, r3, #32
 80010ca:	e000      	b.n	80010ce <case_insensitive_strcmp+0xa6>
 80010cc:	7b7a      	ldrb	r2, [r7, #13]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	733b      	strb	r3, [r7, #12]
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4908      	ldr	r1, [pc, #32]	; (80010fc <case_insensitive_strcmp+0xd4>)
 80010da:	440b      	add	r3, r1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <case_insensitive_strcmp+0xc4>
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	3320      	adds	r3, #32
 80010ea:	e000      	b.n	80010ee <case_insensitive_strcmp+0xc6>
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	1ad3      	subs	r3, r2, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	080106ec 	.word	0x080106ec

08001100 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	4798      	blx	r3
 8001110:	60f8      	str	r0, [r7, #12]
    if (node)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001118:	2228      	movs	r2, #40	; 0x28
 800111a:	2100      	movs	r1, #0
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f009 fa9f 	bl	800a660 <memset>
    }

    return node;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001138:	e037      	b.n	80011aa <cJSON_Delete+0x7e>
    {
        next = item->next;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d108      	bne.n	800115e <cJSON_Delete+0x32>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffe7 	bl	800112c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <cJSON_Delete+0x52>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <cJSON_Delete+0x90>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6912      	ldr	r2, [r2, #16]
 800117a:	4610      	mov	r0, r2
 800117c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <cJSON_Delete+0x72>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <cJSON_Delete+0x90>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6a12      	ldr	r2, [r2, #32]
 800119a:	4610      	mov	r0, r2
 800119c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <cJSON_Delete+0x90>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	4798      	blx	r3
        item = next;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1c4      	bne.n	800113a <cJSON_Delete+0xe>
    }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000000 	.word	0x20000000

080011c0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011c4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	; 0x60
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011ea:	f7ff ffe9 	bl	80011c0 <get_decimal_point>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <parse_number+0x36>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <parse_number+0x3a>
    {
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0c6      	b.n	8001398 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800120e:	e063      	b.n	80012d8 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b45      	cmp	r3, #69	; 0x45
 8001222:	dc3d      	bgt.n	80012a0 <parse_number+0xd0>
 8001224:	2b2b      	cmp	r3, #43	; 0x2b
 8001226:	db66      	blt.n	80012f6 <parse_number+0x126>
 8001228:	3b2b      	subs	r3, #43	; 0x2b
 800122a:	2b1a      	cmp	r3, #26
 800122c:	d863      	bhi.n	80012f6 <parse_number+0x126>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <parse_number+0x64>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	080012a5 	.word	0x080012a5
 8001238:	080012f7 	.word	0x080012f7
 800123c:	080012a5 	.word	0x080012a5
 8001240:	080012c3 	.word	0x080012c3
 8001244:	080012f7 	.word	0x080012f7
 8001248:	080012a5 	.word	0x080012a5
 800124c:	080012a5 	.word	0x080012a5
 8001250:	080012a5 	.word	0x080012a5
 8001254:	080012a5 	.word	0x080012a5
 8001258:	080012a5 	.word	0x080012a5
 800125c:	080012a5 	.word	0x080012a5
 8001260:	080012a5 	.word	0x080012a5
 8001264:	080012a5 	.word	0x080012a5
 8001268:	080012a5 	.word	0x080012a5
 800126c:	080012a5 	.word	0x080012a5
 8001270:	080012f7 	.word	0x080012f7
 8001274:	080012f7 	.word	0x080012f7
 8001278:	080012f7 	.word	0x080012f7
 800127c:	080012f7 	.word	0x080012f7
 8001280:	080012f7 	.word	0x080012f7
 8001284:	080012f7 	.word	0x080012f7
 8001288:	080012f7 	.word	0x080012f7
 800128c:	080012f7 	.word	0x080012f7
 8001290:	080012f7 	.word	0x080012f7
 8001294:	080012f7 	.word	0x080012f7
 8001298:	080012f7 	.word	0x080012f7
 800129c:	080012a5 	.word	0x080012a5
 80012a0:	2b65      	cmp	r3, #101	; 0x65
 80012a2:	d128      	bne.n	80012f6 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6899      	ldr	r1, [r3, #8]
 80012ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ae:	440b      	add	r3, r1
 80012b0:	4413      	add	r3, r2
 80012b2:	7819      	ldrb	r1, [r3, #0]
 80012b4:	f107 0208 	add.w	r2, r7, #8
 80012b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ba:	4413      	add	r3, r2
 80012bc:	460a      	mov	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
                break;
 80012c0:	e007      	b.n	80012d2 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c8:	4413      	add	r3, r2
 80012ca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80012ce:	701a      	strb	r2, [r3, #0]
                break;
 80012d0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80012d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d4:	3301      	adds	r3, #1
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012da:	2b3e      	cmp	r3, #62	; 0x3e
 80012dc:	d80d      	bhi.n	80012fa <parse_number+0x12a>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00a      	beq.n	80012fa <parse_number+0x12a>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ea:	441a      	add	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d38d      	bcc.n	8001210 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80012f4:	e001      	b.n	80012fa <parse_number+0x12a>
                goto loop_end;
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <parse_number+0x12c>
loop_end:
 80012fa:	bf00      	nop
    number_c_string[i] = '\0';
 80012fc:	f107 0208 	add.w	r2, r7, #8
 8001300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001308:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f00a fad2 	bl	800b8bc <strtod>
 8001318:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800131c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	429a      	cmp	r2, r3
 8001324:	d101      	bne.n	800132a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8001326:	2300      	movs	r3, #0
 8001328:	e036      	b.n	8001398 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001330:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001334:	a31b      	add	r3, pc, #108	; (adr r3, 80013a4 <parse_number+0x1d4>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800133e:	f7ff fbf9 	bl	8000b34 <__aeabi_dcmpge>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800134e:	615a      	str	r2, [r3, #20]
 8001350:	e015      	b.n	800137e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <parse_number+0x1d0>)
 8001358:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800135c:	f7ff fbe0 	bl	8000b20 <__aeabi_dcmple>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	e006      	b.n	800137e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001370:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001374:	f7ff fc08 	bl	8000b88 <__aeabi_d2iz>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2208      	movs	r2, #8
 8001382:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	1a8a      	subs	r2, r1, r2
 8001390:	441a      	add	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	609a      	str	r2, [r3, #8]
    return true;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3760      	adds	r7, #96	; 0x60
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	c1e00000 	.word	0xc1e00000
 80013a4:	ffc00000 	.word	0xffc00000
 80013a8:	41dfffff 	.word	0x41dfffff

080013ac <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	e04c      	b.n	800145c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b2f      	cmp	r3, #47	; 0x2f
 80013cc:	d90f      	bls.n	80013ee <parse_hex4+0x42>
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b39      	cmp	r3, #57	; 0x39
 80013d8:	d809      	bhi.n	80013ee <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	3b30      	subs	r3, #48	; 0x30
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e02d      	b.n	800144a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d90f      	bls.n	800141a <parse_hex4+0x6e>
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b46      	cmp	r3, #70	; 0x46
 8001404:	d809      	bhi.n	800141a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	3b37      	subs	r3, #55	; 0x37
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e017      	b.n	800144a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b60      	cmp	r3, #96	; 0x60
 8001424:	d90f      	bls.n	8001446 <parse_hex4+0x9a>
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b66      	cmp	r3, #102	; 0x66
 8001430:	d809      	bhi.n	8001446 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	3b57      	subs	r3, #87	; 0x57
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001446:	2300      	movs	r3, #0
 8001448:	e00c      	b.n	8001464 <parse_hex4+0xb8>
        }

        if (i < 3)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d802      	bhi.n	8001456 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d9af      	bls.n	80013c2 <parse_hex4+0x16>
        }
    }

    return h;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	f340 80b7 	ble.w	800161a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	3302      	adds	r3, #2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff7b 	bl	80013ac <parse_hex4>
 80014b6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80014be:	d304      	bcc.n	80014ca <utf16_literal_to_utf8+0x5a>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80014c6:	f0c0 80aa 	bcc.w	800161e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80014d0:	d337      	bcc.n	8001542 <utf16_literal_to_utf8+0xd2>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80014d8:	d233      	bcs.n	8001542 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3306      	adds	r3, #6
 80014de:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014e4:	230c      	movs	r3, #12
 80014e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	f340 8096 	ble.w	8001622 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b5c      	cmp	r3, #92	; 0x5c
 80014fc:	f040 8093 	bne.w	8001626 <utf16_literal_to_utf8+0x1b6>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b75      	cmp	r3, #117	; 0x75
 8001508:	f040 808d 	bne.w	8001626 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3302      	adds	r3, #2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff4b 	bl	80013ac <parse_hex4>
 8001516:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800151e:	f0c0 8084 	bcc.w	800162a <utf16_literal_to_utf8+0x1ba>
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001528:	d27f      	bcs.n	800162a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	029a      	lsls	r2, r3, #10
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <utf16_literal_to_utf8+0x1cc>)
 8001530:	4013      	ands	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001538:	4313      	orrs	r3, r2
 800153a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001540:	e004      	b.n	800154c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001542:	2306      	movs	r3, #6
 8001544:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	2b7f      	cmp	r3, #127	; 0x7f
 8001550:	d803      	bhi.n	800155a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001558:	e01f      	b.n	800159a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001560:	d206      	bcs.n	8001570 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	f887 3020 	strb.w	r3, [r7, #32]
 800156e:	e014      	b.n	800159a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001576:	d206      	bcs.n	8001586 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001578:	2303      	movs	r3, #3
 800157a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800157e:	23e0      	movs	r3, #224	; 0xe0
 8001580:	f887 3020 	strb.w	r3, [r7, #32]
 8001584:	e009      	b.n	800159a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800158c:	d24f      	bcs.n	800162e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800158e:	2304      	movs	r3, #4
 8001590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001594:	23f0      	movs	r3, #240	; 0xf0
 8001596:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800159a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800159e:	3b01      	subs	r3, #1
 80015a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80015a4:	e015      	b.n	80015d2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015b8:	440b      	add	r3, r1
 80015ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80015c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015cc:	3b01      	subs	r3, #1
 80015ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80015d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1e5      	bne.n	80015a6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80015da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d909      	bls.n	80015f6 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	b2d9      	uxtb	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800160e:	441a      	add	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001614:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001618:	e00b      	b.n	8001632 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800161a:	bf00      	nop
 800161c:	e008      	b.n	8001630 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800161e:	bf00      	nop
 8001620:	e006      	b.n	8001630 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001622:	bf00      	nop
 8001624:	e004      	b.n	8001630 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001626:	bf00      	nop
 8001628:	e002      	b.n	8001630 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800162e:	bf00      	nop

fail:
    return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	000ffc00 	.word	0x000ffc00

08001640 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	3301      	adds	r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	3301      	adds	r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b22      	cmp	r3, #34	; 0x22
 800167c:	f040 8102 	bne.w	8001884 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001688:	e017      	b.n	80016ba <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b5c      	cmp	r3, #92	; 0x5c
 8001690:	d110      	bne.n	80016b4 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	461a      	mov	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	f080 80f0 	bcs.w	8001888 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	3301      	adds	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
                input_end++;
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	3301      	adds	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	3301      	adds	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a3a      	ldr	r2, [r7, #32]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d203      	bcs.n	80016d4 <parse_string+0x94>
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b22      	cmp	r3, #34	; 0x22
 80016d2:	d1da      	bne.n	800168a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	f080 80d2 	bcs.w	800188c <parse_string+0x24c>
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b22      	cmp	r3, #34	; 0x22
 80016ee:	f040 80cd 	bne.w	800188c <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4413      	add	r3, r2
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	461a      	mov	r2, r3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	3201      	adds	r2, #1
 8001710:	4610      	mov	r0, r2
 8001712:	4798      	blx	r3
 8001714:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80b9 	beq.w	8001890 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001722:	e093      	b.n	800184c <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b5c      	cmp	r3, #92	; 0x5c
 800172a:	d008      	beq.n	800173e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800172c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172e:	1c53      	adds	r3, r2, #1
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1c59      	adds	r1, r3, #1
 8001736:	60f9      	str	r1, [r7, #12]
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e086      	b.n	800184c <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800173e:	2302      	movs	r3, #2
 8001740:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001742:	6a3a      	ldr	r2, [r7, #32]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f340 80a3 	ble.w	8001894 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b75      	cmp	r3, #117	; 0x75
 8001756:	f300 809f 	bgt.w	8001898 <parse_string+0x258>
 800175a:	2b5c      	cmp	r3, #92	; 0x5c
 800175c:	da04      	bge.n	8001768 <parse_string+0x128>
 800175e:	2b22      	cmp	r3, #34	; 0x22
 8001760:	d05c      	beq.n	800181c <parse_string+0x1dc>
 8001762:	2b2f      	cmp	r3, #47	; 0x2f
 8001764:	d05a      	beq.n	800181c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001766:	e097      	b.n	8001898 <parse_string+0x258>
            switch (input_pointer[1])
 8001768:	3b5c      	subs	r3, #92	; 0x5c
 800176a:	2b19      	cmp	r3, #25
 800176c:	f200 8094 	bhi.w	8001898 <parse_string+0x258>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <parse_string+0x138>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	0800181d 	.word	0x0800181d
 800177c:	08001899 	.word	0x08001899
 8001780:	08001899 	.word	0x08001899
 8001784:	08001899 	.word	0x08001899
 8001788:	08001899 	.word	0x08001899
 800178c:	08001899 	.word	0x08001899
 8001790:	080017e1 	.word	0x080017e1
 8001794:	08001899 	.word	0x08001899
 8001798:	08001899 	.word	0x08001899
 800179c:	08001899 	.word	0x08001899
 80017a0:	080017ed 	.word	0x080017ed
 80017a4:	08001899 	.word	0x08001899
 80017a8:	08001899 	.word	0x08001899
 80017ac:	08001899 	.word	0x08001899
 80017b0:	08001899 	.word	0x08001899
 80017b4:	08001899 	.word	0x08001899
 80017b8:	08001899 	.word	0x08001899
 80017bc:	08001899 	.word	0x08001899
 80017c0:	080017f9 	.word	0x080017f9
 80017c4:	08001899 	.word	0x08001899
 80017c8:	08001899 	.word	0x08001899
 80017cc:	08001899 	.word	0x08001899
 80017d0:	08001805 	.word	0x08001805
 80017d4:	08001899 	.word	0x08001899
 80017d8:	08001811 	.word	0x08001811
 80017dc:	0800182b 	.word	0x0800182b
                    *output_pointer++ = '\b';
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60fa      	str	r2, [r7, #12]
 80017e6:	2208      	movs	r2, #8
 80017e8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ea:	e02b      	b.n	8001844 <parse_string+0x204>
                    *output_pointer++ = '\f';
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60fa      	str	r2, [r7, #12]
 80017f2:	220c      	movs	r2, #12
 80017f4:	701a      	strb	r2, [r3, #0]
                    break;
 80017f6:	e025      	b.n	8001844 <parse_string+0x204>
                    *output_pointer++ = '\n';
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60fa      	str	r2, [r7, #12]
 80017fe:	220a      	movs	r2, #10
 8001800:	701a      	strb	r2, [r3, #0]
                    break;
 8001802:	e01f      	b.n	8001844 <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60fa      	str	r2, [r7, #12]
 800180a:	220d      	movs	r2, #13
 800180c:	701a      	strb	r2, [r3, #0]
                    break;
 800180e:	e019      	b.n	8001844 <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60fa      	str	r2, [r7, #12]
 8001816:	2209      	movs	r2, #9
 8001818:	701a      	strb	r2, [r3, #0]
                    break;
 800181a:	e013      	b.n	8001844 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60fa      	str	r2, [r7, #12]
 8001822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001824:	7852      	ldrb	r2, [r2, #1]
 8001826:	701a      	strb	r2, [r3, #0]
                    break;
 8001828:	e00c      	b.n	8001844 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	461a      	mov	r2, r3
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001834:	f7ff fe1c 	bl	8001470 <utf16_literal_to_utf8>
 8001838:	4603      	mov	r3, r0
 800183a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d02c      	beq.n	800189c <parse_string+0x25c>
                    break;
 8001842:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001848:	4413      	add	r3, r2
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	429a      	cmp	r2, r3
 8001852:	f4ff af67 	bcc.w	8001724 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2210      	movs	r2, #16
 8001860:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	461a      	mov	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	609a      	str	r2, [r3, #8]

    return true;
 8001880:	2301      	movs	r3, #1
 8001882:	e01e      	b.n	80018c2 <parse_string+0x282>
        goto fail;
 8001884:	bf00      	nop
 8001886:	e00a      	b.n	800189e <parse_string+0x25e>
                    goto fail;
 8001888:	bf00      	nop
 800188a:	e008      	b.n	800189e <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800188c:	bf00      	nop
 800188e:	e006      	b.n	800189e <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001890:	bf00      	nop
 8001892:	e004      	b.n	800189e <parse_string+0x25e>
                goto fail;
 8001894:	bf00      	nop
 8001896:	e002      	b.n	800189e <parse_string+0x25e>
                    goto fail;
 8001898:	bf00      	nop
 800189a:	e000      	b.n	800189e <parse_string+0x25e>
                        goto fail;
 800189c:	bf00      	nop

fail:
    if (output != NULL)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	69f8      	ldr	r0, [r7, #28]
 80018aa:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	609a      	str	r2, [r3, #8]
    }

    return false;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop

080018cc <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <buffer_skip_whitespace+0x16>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e02c      	b.n	8001940 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <buffer_skip_whitespace+0x2c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d306      	bcc.n	8001906 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	e021      	b.n	8001940 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00d      	beq.n	8001928 <buffer_skip_whitespace+0x5c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d207      	bcs.n	8001928 <buffer_skip_whitespace+0x5c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b20      	cmp	r3, #32
 8001926:	d9e9      	bls.n	80018fc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	d104      	bne.n	800193e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <skip_utf8_bom+0x1e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <skip_utf8_bom+0x1e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <skip_utf8_bom+0x22>
    {
        return NULL;
 800196a:	2300      	movs	r3, #0
 800196c:	e01c      	b.n	80019a8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d018      	beq.n	80019a6 <skip_utf8_bom+0x5a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	1d1a      	adds	r2, r3, #4
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d211      	bcs.n	80019a6 <skip_utf8_bom+0x5a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4413      	add	r3, r2
 800198c:	2203      	movs	r2, #3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <skip_utf8_bom+0x64>)
 8001990:	4618      	mov	r0, r3
 8001992:	f009 f945 	bl	800ac20 <strncmp>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	1cda      	adds	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	080103d0 	.word	0x080103d0

080019b4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e00c      	b.n	80019e4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7fe fc12 	bl	80001f4 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f805 	bl	80019ec <cJSON_ParseWithLengthOpts>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d042      	beq.n	8001aaa <cJSON_ParseWithLengthOpts+0xbe>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d03f      	beq.n	8001aaa <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001a36:	4a39      	ldr	r2, [pc, #228]	; (8001b1c <cJSON_ParseWithLengthOpts+0x130>)
 8001a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a42:	4836      	ldr	r0, [pc, #216]	; (8001b1c <cJSON_ParseWithLengthOpts+0x130>)
 8001a44:	f7ff fb5c 	bl	8001100 <cJSON_New_Item>
 8001a48:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d02e      	beq.n	8001aae <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff79 	bl	800194c <skip_utf8_bom>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff35 	bl	80018cc <buffer_skip_whitespace>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4619      	mov	r1, r3
 8001a66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a68:	f000 f868 	bl	8001b3c <parse_value>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01f      	beq.n	8001ab2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff25 	bl	80018cc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d215      	bcs.n	8001ab6 <cJSON_ParseWithLengthOpts+0xca>
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	441a      	add	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	e031      	b.n	8001b0e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001aaa:	bf00      	nop
 8001aac:	e004      	b.n	8001ab8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001aae:	bf00      	nop
 8001ab0:	e002      	b.n	8001ab8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001ab2:	bf00      	nop
 8001ab4:	e000      	b.n	8001ab8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001ab6:	bf00      	nop

fail:
    if (item != NULL)
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001abe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ac0:	f7ff fb34 	bl	800112c <cJSON_Delete>
    }

    if (value != NULL)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d020      	beq.n	8001b0c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d202      	bcs.n	8001ae0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e005      	b.n	8001aec <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	441a      	add	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <cJSON_ParseWithLengthOpts+0x12c>)
 8001afe:	461a      	mov	r2, r3
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b08:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3738      	adds	r7, #56	; 0x38
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200009ec 	.word	0x200009ec
 8001b1c:	20000000 	.word	0x20000000

08001b20 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff41 	bl	80019b4 <cJSON_ParseWithOpts>
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <parse_value+0x18>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b54:	2300      	movs	r3, #0
 8001b56:	e0d2      	b.n	8001cfe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01d      	beq.n	8001b9a <parse_value+0x5e>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	1d1a      	adds	r2, r3, #4
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d816      	bhi.n	8001b9a <parse_value+0x5e>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4413      	add	r3, r2
 8001b76:	2204      	movs	r2, #4
 8001b78:	4963      	ldr	r1, [pc, #396]	; (8001d08 <parse_value+0x1cc>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f009 f850 	bl	800ac20 <strncmp>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	1d1a      	adds	r2, r3, #4
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	609a      	str	r2, [r3, #8]
        return true;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0b1      	b.n	8001cfe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01d      	beq.n	8001bdc <parse_value+0xa0>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	1d5a      	adds	r2, r3, #5
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d816      	bhi.n	8001bdc <parse_value+0xa0>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2205      	movs	r2, #5
 8001bba:	4954      	ldr	r1, [pc, #336]	; (8001d0c <parse_value+0x1d0>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f009 f82f 	bl	800ac20 <strncmp>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	1d5a      	adds	r2, r3, #5
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	609a      	str	r2, [r3, #8]
        return true;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e090      	b.n	8001cfe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d020      	beq.n	8001c24 <parse_value+0xe8>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d819      	bhi.n	8001c24 <parse_value+0xe8>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4944      	ldr	r1, [pc, #272]	; (8001d10 <parse_value+0x1d4>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f009 f80e 	bl	800ac20 <strncmp>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10c      	bne.n	8001c24 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	1d1a      	adds	r2, r3, #4
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	609a      	str	r2, [r3, #8]
        return true;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e06c      	b.n	8001cfe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d013      	beq.n	8001c52 <parse_value+0x116>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d20d      	bcs.n	8001c52 <parse_value+0x116>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b22      	cmp	r3, #34	; 0x22
 8001c44:	d105      	bne.n	8001c52 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fcf9 	bl	8001640 <parse_string>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	e055      	b.n	8001cfe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <parse_value+0x164>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d21d      	bcs.n	8001ca0 <parse_value+0x164>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b2d      	cmp	r3, #45	; 0x2d
 8001c72:	d00f      	beq.n	8001c94 <parse_value+0x158>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b2f      	cmp	r3, #47	; 0x2f
 8001c82:	d90d      	bls.n	8001ca0 <parse_value+0x164>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b39      	cmp	r3, #57	; 0x39
 8001c92:	d805      	bhi.n	8001ca0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fa9a 	bl	80011d0 <parse_number>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	e02e      	b.n	8001cfe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d013      	beq.n	8001cce <parse_value+0x192>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d20d      	bcs.n	8001cce <parse_value+0x192>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b5b      	cmp	r3, #91	; 0x5b
 8001cc0:	d105      	bne.n	8001cce <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f825 	bl	8001d14 <parse_array>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e017      	b.n	8001cfe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <parse_value+0x1c0>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d20d      	bcs.n	8001cfc <parse_value+0x1c0>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b7b      	cmp	r3, #123	; 0x7b
 8001cee:	d105      	bne.n	8001cfc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8d2 	bl	8001e9c <parse_object>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	e000      	b.n	8001cfe <parse_value+0x1c2>
    }

    return false;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	080103a4 	.word	0x080103a4
 8001d0c:	080103d4 	.word	0x080103d4
 8001d10:	080103dc 	.word	0x080103dc

08001d14 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2e:	d301      	bcc.n	8001d34 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001d30:	2300      	movs	r3, #0
 8001d32:	e0af      	b.n	8001e94 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b5b      	cmp	r3, #91	; 0x5b
 8001d4c:	f040 8094 	bne.w	8001e78 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f7ff fdb6 	bl	80018cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <parse_array+0x6e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d207      	bcs.n	8001d82 <parse_array+0x6e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b5d      	cmp	r3, #93	; 0x5d
 8001d80:	d061      	beq.n	8001e46 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <parse_array+0x80>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d305      	bcc.n	8001da0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d9e:	e072      	b.n	8001e86 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	3310      	adds	r3, #16
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f9a6 	bl	8001100 <cJSON_New_Item>
 8001db4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d05f      	beq.n	8001e7c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e007      	b.n	8001ddc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001de6:	6838      	ldr	r0, [r7, #0]
 8001de8:	f7ff fd70 	bl	80018cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dec:	6839      	ldr	r1, [r7, #0]
 8001dee:	6938      	ldr	r0, [r7, #16]
 8001df0:	f7ff fea4 	bl	8001b3c <parse_value>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d042      	beq.n	8001e80 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f7ff fd66 	bl	80018cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <parse_array+0x10e>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d207      	bcs.n	8001e22 <parse_array+0x10e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001e20:	d0c3      	beq.n	8001daa <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d02d      	beq.n	8001e84 <parse_array+0x170>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d227      	bcs.n	8001e84 <parse_array+0x170>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b5d      	cmp	r3, #93	; 0x5d
 8001e42:	d11f      	bne.n	8001e84 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e44:	e000      	b.n	8001e48 <parse_array+0x134>
        goto success;
 8001e46:	bf00      	nop
    input_buffer->depth--;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <parse_array+0x14a>
        head->prev = current_item;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	609a      	str	r2, [r3, #8]

    return true;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00d      	b.n	8001e94 <parse_array+0x180>
        goto fail;
 8001e78:	bf00      	nop
 8001e7a:	e004      	b.n	8001e86 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e7c:	bf00      	nop
 8001e7e:	e002      	b.n	8001e86 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e84:	bf00      	nop

fail:
    if (head != NULL)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f7ff f94d 	bl	800112c <cJSON_Delete>
    }

    return false;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb6:	d301      	bcc.n	8001ebc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e0ea      	b.n	8002092 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80d0 	beq.w	800206e <parse_object+0x1d2>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	f080 80c9 	bcs.w	800206e <parse_object+0x1d2>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b7b      	cmp	r3, #123	; 0x7b
 8001eea:	f040 80c0 	bne.w	800206e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	f7ff fce7 	bl	80018cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <parse_object+0x86>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d208      	bcs.n	8001f22 <parse_object+0x86>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4413      	add	r3, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b7d      	cmp	r3, #125	; 0x7d
 8001f1e:	f000 808d 	beq.w	800203c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <parse_object+0x98>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d305      	bcc.n	8001f40 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001f3e:	e0a1      	b.n	8002084 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f8d6 	bl	8001100 <cJSON_New_Item>
 8001f54:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 808a 	beq.w	8002072 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e007      	b.n	8001f7e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f88:	6838      	ldr	r0, [r7, #0]
 8001f8a:	f7ff fc9f 	bl	80018cc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	6938      	ldr	r0, [r7, #16]
 8001f92:	f7ff fb55 	bl	8001640 <parse_string>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d06c      	beq.n	8002076 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f9c:	6838      	ldr	r0, [r7, #0]
 8001f9e:	f7ff fc95 	bl	80018cc <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d061      	beq.n	800207a <parse_object+0x1de>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d25b      	bcs.n	800207a <parse_object+0x1de>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4413      	add	r3, r2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b3a      	cmp	r3, #58	; 0x3a
 8001fd0:	d153      	bne.n	800207a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fdc:	6838      	ldr	r0, [r7, #0]
 8001fde:	f7ff fc75 	bl	80018cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	6938      	ldr	r0, [r7, #16]
 8001fe6:	f7ff fda9 	bl	8001b3c <parse_value>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d046      	beq.n	800207e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f7ff fc6b 	bl	80018cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <parse_object+0x17c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <parse_object+0x17c>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b2c      	cmp	r3, #44	; 0x2c
 8002016:	d098      	beq.n	8001f4a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d031      	beq.n	8002082 <parse_object+0x1e6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d22b      	bcs.n	8002082 <parse_object+0x1e6>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b7d      	cmp	r3, #125	; 0x7d
 8002038:	d123      	bne.n	8002082 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800203a:	e000      	b.n	800203e <parse_object+0x1a2>
        goto success; /* empty object */
 800203c:	bf00      	nop
    input_buffer->depth--;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <parse_object+0x1b8>
        head->prev = current_item;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	60da      	str	r2, [r3, #12]
    item->child = head;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	609a      	str	r2, [r3, #8]
    return true;
 800206a:	2301      	movs	r3, #1
 800206c:	e011      	b.n	8002092 <parse_object+0x1f6>
        goto fail; /* not an object */
 800206e:	bf00      	nop
 8002070:	e008      	b.n	8002084 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002072:	bf00      	nop
 8002074:	e006      	b.n	8002084 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002076:	bf00      	nop
 8002078:	e004      	b.n	8002084 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800207a:	bf00      	nop
 800207c:	e002      	b.n	8002084 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800207e:	bf00      	nop
 8002080:	e000      	b.n	8002084 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002082:	bf00      	nop

fail:
    if (head != NULL)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff f84e 	bl	800112c <cJSON_Delete>
    }

    return false;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <get_object_item+0x1c>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <get_object_item+0x20>
    {
        return NULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e033      	b.n	8002122 <get_object_item+0x88>
    }

    current_element = object->child;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d017      	beq.n	80020f6 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020c6:	e002      	b.n	80020ce <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01c      	beq.n	800210e <get_object_item+0x74>
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <get_object_item+0x74>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4619      	mov	r1, r3
 80020e2:	68b8      	ldr	r0, [r7, #8]
 80020e4:	f7fe f87c 	bl	80001e0 <strcmp>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ec      	bne.n	80020c8 <get_object_item+0x2e>
 80020ee:	e00e      	b.n	800210e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <get_object_item+0x74>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4619      	mov	r1, r3
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f7fe ff90 	bl	8001028 <case_insensitive_strcmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <get_object_item+0x82>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <get_object_item+0x86>
        return NULL;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <get_object_item+0x88>
    }

    return current_element;
 8002120:	697b      	ldr	r3, [r7, #20]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002134:	2200      	movs	r2, #0
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffae 	bl	800209a <get_object_item>
 800213e:	4603      	mov	r3, r0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800214c:	f001 ff7c 	bl	8004048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002150:	f000 f812 	bl	8002178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002154:	f000 f95e 	bl	8002414 <MX_GPIO_Init>
  MX_DMA_Init();
 8002158:	f000 f91e 	bl	8002398 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800215c:	f000 f8f2 	bl	8002344 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002160:	f000 f8c6 	bl	80022f0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002164:	f000 f872 	bl	800224c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  CONFIGURACION_INICIAL();
 8002168:	f000 fcbe 	bl	8002ae8 <CONFIGURACION_INICIAL>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800216c:	f004 fde6 	bl	8006d3c <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8002170:	f004 fe08 	bl	8006d84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002174:	e7fe      	b.n	8002174 <main+0x2c>
	...

08002178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	2230      	movs	r2, #48	; 0x30
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f008 fa6a 	bl	800a660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <SystemClock_Config+0xcc>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <SystemClock_Config+0xcc>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <SystemClock_Config+0xcc>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <SystemClock_Config+0xd0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <SystemClock_Config+0xd0>)
 80021c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <SystemClock_Config+0xd0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021dc:	2310      	movs	r3, #16
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e0:	2302      	movs	r3, #2
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021e8:	2310      	movs	r3, #16
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021f2:	2304      	movs	r3, #4
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021f6:	2304      	movs	r3, #4
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fa:	f107 0320 	add.w	r3, r7, #32
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fa14 	bl	800562c <HAL_RCC_OscConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800220a:	f000 f9c9 	bl	80025a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220e:	230f      	movs	r3, #15
 8002210:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002212:	2302      	movs	r3, #2
 8002214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2102      	movs	r1, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fc76 	bl	8005b1c <HAL_RCC_ClockConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002236:	f000 f9b3 	bl	80025a0 <Error_Handler>
  }
}
 800223a:	bf00      	nop
 800223c:	3750      	adds	r7, #80	; 0x50
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000

0800224c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <MX_ADC1_Init+0x98>)
 8002260:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <MX_ADC1_Init+0x9c>)
 8002262:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <MX_ADC1_Init+0x98>)
 8002266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800226a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_ADC1_Init+0x98>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_ADC1_Init+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_ADC1_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <MX_ADC1_Init+0x98>)
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <MX_ADC1_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_ADC1_Init+0x98>)
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <MX_ADC1_Init+0xa0>)
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <MX_ADC1_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <MX_ADC1_Init+0x98>)
 800229a:	2201      	movs	r2, #1
 800229c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_ADC1_Init+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <MX_ADC1_Init+0x98>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <MX_ADC1_Init+0x98>)
 80022ae:	f001 ff3d 	bl	800412c <HAL_ADC_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022b8:	f000 f972 	bl	80025a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022bc:	2300      	movs	r3, #0
 80022be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_ADC1_Init+0x98>)
 80022ce:	f002 f8bd 	bl	800444c <HAL_ADC_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80022d8:	f000 f962 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200009f4 	.word	0x200009f4
 80022e8:	40012000 	.word	0x40012000
 80022ec:	0f000001 	.word	0x0f000001

080022f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART1_UART_Init+0x4c>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_USART1_UART_Init+0x50>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <MX_USART1_UART_Init+0x4c>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART1_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART1_UART_Init+0x4c>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART1_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART1_UART_Init+0x4c>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART1_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART1_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART1_UART_Init+0x4c>)
 8002328:	f003 fe18 	bl	8005f5c <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002332:	f000 f935 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000a3c 	.word	0x20000a3c
 8002340:	40011000 	.word	0x40011000

08002344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <MX_USART2_UART_Init+0x50>)
 800234c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 8002350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 800236a:	220c      	movs	r2, #12
 800236c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_USART2_UART_Init+0x4c>)
 800237c:	f003 fdee 	bl	8005f5c <HAL_UART_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002386:	f000 f90b 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000a80 	.word	0x20000a80
 8002394:	40004400 	.word	0x40004400

08002398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_DMA_Init+0x78>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <MX_DMA_Init+0x78>)
 80023a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_DMA_Init+0x78>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_DMA_Init+0x78>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <MX_DMA_Init+0x78>)
 80023c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_DMA_Init+0x78>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2105      	movs	r1, #5
 80023da:	2010      	movs	r0, #16
 80023dc:	f002 fb55 	bl	8004a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023e0:	2010      	movs	r0, #16
 80023e2:	f002 fb6e 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2105      	movs	r1, #5
 80023ea:	203a      	movs	r0, #58	; 0x3a
 80023ec:	f002 fb4d 	bl	8004a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023f0:	203a      	movs	r0, #58	; 0x3a
 80023f2:	f002 fb66 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2105      	movs	r1, #5
 80023fa:	2046      	movs	r0, #70	; 0x46
 80023fc:	f002 fb45 	bl	8004a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002400:	2046      	movs	r0, #70	; 0x46
 8002402:	f002 fb5e 	bl	8004ac2 <HAL_NVIC_EnableIRQ>

}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800

08002414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b58      	ldr	r3, [pc, #352]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a57      	ldr	r2, [pc, #348]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b55      	ldr	r3, [pc, #340]	; (8002590 <MX_GPIO_Init+0x17c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b51      	ldr	r3, [pc, #324]	; (8002590 <MX_GPIO_Init+0x17c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a50      	ldr	r2, [pc, #320]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b4e      	ldr	r3, [pc, #312]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a49      	ldr	r2, [pc, #292]	; (8002590 <MX_GPIO_Init+0x17c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a42      	ldr	r2, [pc, #264]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b40      	ldr	r3, [pc, #256]	; (8002590 <MX_GPIO_Init+0x17c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2102      	movs	r1, #2
 800249e:	483d      	ldr	r0, [pc, #244]	; (8002594 <MX_GPIO_Init+0x180>)
 80024a0:	f003 f8aa 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D8_Pin|Buzzer_Pin|D3_Pin, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80024aa:	483b      	ldr	r0, [pc, #236]	; (8002598 <MX_GPIO_Init+0x184>)
 80024ac:	f003 f8a4 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	2140      	movs	r1, #64	; 0x40
 80024b4:	4838      	ldr	r0, [pc, #224]	; (8002598 <MX_GPIO_Init+0x184>)
 80024b6:	f003 f89f 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D2_Pin|D5_Pin|D1_Pin
 80024ba:	2200      	movs	r2, #0
 80024bc:	f240 4139 	movw	r1, #1081	; 0x439
 80024c0:	4836      	ldr	r0, [pc, #216]	; (800259c <MX_GPIO_Init+0x188>)
 80024c2:	f003 f899 	bl	80055f8 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	482d      	ldr	r0, [pc, #180]	; (8002594 <MX_GPIO_Init+0x180>)
 80024de:	f002 feef 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP8266_RESET_Pin */
  GPIO_InitStruct.Pin = ESP8266_RESET_Pin;
 80024e2:	2302      	movs	r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_RESET_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4826      	ldr	r0, [pc, #152]	; (8002594 <MX_GPIO_Init+0x180>)
 80024fa:	f002 fee1 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin Buzzer_Pin D3_Pin */
  GPIO_InitStruct.Pin = D8_Pin|Buzzer_Pin|D3_Pin;
 80024fe:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002504:	2301      	movs	r3, #1
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	4820      	ldr	r0, [pc, #128]	; (8002598 <MX_GPIO_Init+0x184>)
 8002518:	f002 fed2 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002528:	2302      	movs	r3, #2
 800252a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4619      	mov	r1, r3
 8002532:	4819      	ldr	r0, [pc, #100]	; (8002598 <MX_GPIO_Init+0x184>)
 8002534:	f002 fec4 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin D5_Pin D1_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin|D5_Pin|D1_Pin
 8002538:	f240 4339 	movw	r3, #1081	; 0x439
 800253c:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	4812      	ldr	r0, [pc, #72]	; (800259c <MX_GPIO_Init+0x188>)
 8002552:	f002 feb5 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR1_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin;
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR1_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	480a      	ldr	r0, [pc, #40]	; (8002594 <MX_GPIO_Init+0x180>)
 800256a:	f002 fea9 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR2_Pin */
  GPIO_InitStruct.Pin = PULSADOR2_Pin;
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002576:	2301      	movs	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR2_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_GPIO_Init+0x188>)
 8002582:	f002 fe9d 	bl	80052c0 <HAL_GPIO_Init>

}
 8002586:	bf00      	nop
 8002588:	3728      	adds	r7, #40	; 0x28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40020800 	.word	0x40020800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <Error_Handler+0x8>
	...

080025ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_MspInit+0x54>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_MspInit+0x54>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_MspInit+0x54>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_MspInit+0x54>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <HAL_MspInit+0x54>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_MspInit+0x54>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	210f      	movs	r1, #15
 80025ee:	f06f 0001 	mvn.w	r0, #1
 80025f2:	f002 fa4a 	bl	8004a8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800

08002604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_ADC_MspInit+0x7c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d127      	bne.n	8002676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_ADC_MspInit+0x80>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_ADC_MspInit+0x80>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_ADC_MspInit+0x80>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_ADC_MspInit+0x80>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_ADC_MspInit+0x80>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_ADC_MspInit+0x80>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin|NTC_Pin|POT_Pin;
 800265e:	2313      	movs	r3, #19
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002662:	2303      	movs	r3, #3
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <HAL_ADC_MspInit+0x84>)
 8002672:	f002 fe25 	bl	80052c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	; 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40012000 	.word	0x40012000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a78      	ldr	r2, [pc, #480]	; (800288c <HAL_UART_MspInit+0x200>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f040 808a 	bne.w	80027c4 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_UART_MspInit+0x204>)
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_UART_MspInit+0x204>)
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6453      	str	r3, [r2, #68]	; 0x44
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_UART_MspInit+0x204>)
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_UART_MspInit+0x204>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_UART_MspInit+0x204>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_UART_MspInit+0x204>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026fa:	2307      	movs	r3, #7
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	4619      	mov	r1, r3
 8002704:	4863      	ldr	r0, [pc, #396]	; (8002894 <HAL_UART_MspInit+0x208>)
 8002706:	f002 fddb 	bl	80052c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_UART_MspInit+0x20c>)
 800270c:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_UART_MspInit+0x210>)
 800270e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002716:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002718:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_UART_MspInit+0x20c>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271e:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002724:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <HAL_UART_MspInit+0x20c>)
 800272e:	2200      	movs	r2, #0
 8002730:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002732:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002738:	4b57      	ldr	r3, [pc, #348]	; (8002898 <HAL_UART_MspInit+0x20c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800273e:	4b56      	ldr	r3, [pc, #344]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002744:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800274a:	4853      	ldr	r0, [pc, #332]	; (8002898 <HAL_UART_MspInit+0x20c>)
 800274c:	f002 f9d8 	bl	8004b00 <HAL_DMA_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002756:	f7ff ff23 	bl	80025a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_UART_MspInit+0x20c>)
 800275e:	639a      	str	r2, [r3, #56]	; 0x38
 8002760:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <HAL_UART_MspInit+0x20c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002766:	4b4e      	ldr	r3, [pc, #312]	; (80028a0 <HAL_UART_MspInit+0x214>)
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_UART_MspInit+0x218>)
 800276a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <HAL_UART_MspInit+0x214>)
 800276e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002772:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002774:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_UART_MspInit+0x214>)
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <HAL_UART_MspInit+0x214>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002780:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_UART_MspInit+0x214>)
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002788:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <HAL_UART_MspInit+0x214>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278e:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_UART_MspInit+0x214>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002794:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <HAL_UART_MspInit+0x214>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_UART_MspInit+0x214>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a0:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_UART_MspInit+0x214>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027a6:	483e      	ldr	r0, [pc, #248]	; (80028a0 <HAL_UART_MspInit+0x214>)
 80027a8:	f002 f9aa 	bl	8004b00 <HAL_DMA_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80027b2:	f7ff fef5 	bl	80025a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a39      	ldr	r2, [pc, #228]	; (80028a0 <HAL_UART_MspInit+0x214>)
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
 80027bc:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <HAL_UART_MspInit+0x214>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027c2:	e05e      	b.n	8002882 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a37      	ldr	r2, [pc, #220]	; (80028a8 <HAL_UART_MspInit+0x21c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d159      	bne.n	8002882 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <HAL_UART_MspInit+0x204>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <HAL_UART_MspInit+0x204>)
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_UART_MspInit+0x204>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_UART_MspInit+0x204>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_UART_MspInit+0x204>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_UART_MspInit+0x204>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002806:	230c      	movs	r3, #12
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002816:	2307      	movs	r3, #7
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	481c      	ldr	r0, [pc, #112]	; (8002894 <HAL_UART_MspInit+0x208>)
 8002822:	f002 fd4d 	bl	80052c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002826:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002828:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_UART_MspInit+0x224>)
 800282a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_UART_MspInit+0x220>)
 800282e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002832:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_UART_MspInit+0x220>)
 800283c:	2200      	movs	r2, #0
 800283e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002846:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_UART_MspInit+0x220>)
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_UART_MspInit+0x220>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002866:	4811      	ldr	r0, [pc, #68]	; (80028ac <HAL_UART_MspInit+0x220>)
 8002868:	f002 f94a 	bl	8004b00 <HAL_DMA_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8002872:	f7ff fe95 	bl	80025a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_UART_MspInit+0x220>)
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
 800287c:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <HAL_UART_MspInit+0x220>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002882:	bf00      	nop
 8002884:	3730      	adds	r7, #48	; 0x30
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40011000 	.word	0x40011000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	20000ac4 	.word	0x20000ac4
 800289c:	40026440 	.word	0x40026440
 80028a0:	20000b24 	.word	0x20000b24
 80028a4:	400264b8 	.word	0x400264b8
 80028a8:	40004400 	.word	0x40004400
 80028ac:	20000b84 	.word	0x20000b84
 80028b0:	40026088 	.word	0x40026088

080028b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <NMI_Handler+0x4>

080028ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <HardFault_Handler+0x4>

080028c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <MemManage_Handler+0x4>

080028c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e4:	f001 fc02 	bl	80040ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028e8:	f006 f866 	bl	80089b8 <xTaskGetSchedulerState>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80028f2:	f006 ff49 	bl	8009788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <DMA1_Stream5_IRQHandler+0x10>)
 8002902:	f002 fa73 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000b84 	.word	0x20000b84

08002910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <DMA2_Stream2_IRQHandler+0x10>)
 8002916:	f002 fa69 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000ac4 	.word	0x20000ac4

08002924 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <DMA2_Stream7_IRQHandler+0x10>)
 800292a:	f002 fa5f 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000b24 	.word	0x20000b24

08002938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
	return 1;
 800293c:	2301      	movs	r3, #1
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_kill>:

int _kill(int pid, int sig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002952:	f007 f995 	bl	8009c80 <__errno>
 8002956:	4603      	mov	r3, r0
 8002958:	2216      	movs	r2, #22
 800295a:	601a      	str	r2, [r3, #0]
	return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_exit>:

void _exit (int status)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ffe7 	bl	8002948 <_kill>
	while (1) {}		/* Make sure we hang here */
 800297a:	e7fe      	b.n	800297a <_exit+0x12>

0800297c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e00a      	b.n	80029a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800298e:	f3af 8000 	nop.w
 8002992:	4601      	mov	r1, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	b2ca      	uxtb	r2, r1
 800299c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbf0      	blt.n	800298e <_read+0x12>
	}

return len;
 80029ac:	687b      	ldr	r3, [r7, #4]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e009      	b.n	80029dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	60ba      	str	r2, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3301      	adds	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	dbf1      	blt.n	80029c8 <_write+0x12>
	}
	return len;
 80029e4:	687b      	ldr	r3, [r7, #4]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_close>:

int _close(int file)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	return -1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a16:	605a      	str	r2, [r3, #4]
	return 0;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_isatty>:

int _isatty(int file)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
	return 0;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <_sbrk+0x5c>)
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <_sbrk+0x60>)
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <_sbrk+0x64>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <_sbrk+0x64>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <_sbrk+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a88:	f007 f8fa 	bl	8009c80 <__errno>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	220c      	movs	r2, #12
 8002a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e009      	b.n	8002aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <_sbrk+0x64>)
 8002aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20020000 	.word	0x20020000
 8002ab8:	00000400 	.word	0x00000400
 8002abc:	20000be4 	.word	0x20000be4
 8002ac0:	20017ad0 	.word	0x20017ad0

08002ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <SystemInit+0x20>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <SystemInit+0x20>)
 8002ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <CONFIGURACION_INICIAL>:

uint8_t buff_recv[2048];



void CONFIGURACION_INICIAL(void){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af02      	add	r7, sp, #8

	BaseType_t res_task;



 	IObuff=bufferCreat(128);
 8002aee:	2080      	movs	r0, #128	; 0x80
 8002af0:	f001 fa26 	bl	8003f40 <bufferCreat>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <CONFIGURACION_INICIAL+0x88>)
 8002af8:	6013      	str	r3, [r2, #0]

 	if (!IObuff) return;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <CONFIGURACION_INICIAL+0x88>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d032      	beq.n	8002b68 <CONFIGURACION_INICIAL+0x80>

	res_task=xTaskCreate( Task_HW,"Tarea_HW",2048,NULL,	NORMAL_PRIORITY,NULL);
 8002b02:	2300      	movs	r3, #0
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	231b      	movs	r3, #27
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b10:	4918      	ldr	r1, [pc, #96]	; (8002b74 <CONFIGURACION_INICIAL+0x8c>)
 8002b12:	4819      	ldr	r0, [pc, #100]	; (8002b78 <CONFIGURACION_INICIAL+0x90>)
 8002b14:	f005 f93b 	bl	8007d8e <xTaskCreate>
 8002b18:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d006      	beq.n	8002b2e <CONFIGURACION_INICIAL+0x46>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002b20:	4816      	ldr	r0, [pc, #88]	; (8002b7c <CONFIGURACION_INICIAL+0x94>)
 8002b22:	f007 fdf7 	bl	800a714 <puts>
			fflush(NULL);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f007 f964 	bl	8009df4 <fflush>
			while(1);
 8002b2c:	e7fe      	b.n	8002b2c <CONFIGURACION_INICIAL+0x44>
	}



	res_task=xTaskCreate(Task_CONSOLE,"CONSOLA",2048,NULL,	NORMAL_PRIORITY,NULL);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	231b      	movs	r3, #27
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3c:	4910      	ldr	r1, [pc, #64]	; (8002b80 <CONFIGURACION_INICIAL+0x98>)
 8002b3e:	4811      	ldr	r0, [pc, #68]	; (8002b84 <CONFIGURACION_INICIAL+0x9c>)
 8002b40:	f005 f925 	bl	8007d8e <xTaskCreate>
 8002b44:	6078      	str	r0, [r7, #4]
 		if( res_task != pdPASS ){
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d006      	beq.n	8002b5a <CONFIGURACION_INICIAL+0x72>
 				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002b4c:	480b      	ldr	r0, [pc, #44]	; (8002b7c <CONFIGURACION_INICIAL+0x94>)
 8002b4e:	f007 fde1 	bl	800a714 <puts>
 				fflush(NULL);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f007 f94e 	bl	8009df4 <fflush>
 				while(1);
 8002b58:	e7fe      	b.n	8002b58 <CONFIGURACION_INICIAL+0x70>
 		}

 		Task_WIFI_init();
 8002b5a:	f000 fe9b 	bl	8003894 <Task_WIFI_init>
 		Task_TIME_init();
 8002b5e:	f000 fdb9 	bl	80036d4 <Task_TIME_init>
 		Task_COMM_init();
 8002b62:	f000 f811 	bl	8002b88 <Task_COMM_init>
 8002b66:	e000      	b.n	8002b6a <CONFIGURACION_INICIAL+0x82>
 	if (!IObuff) return;
 8002b68:	bf00      	nop


}
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20001c08 	.word	0x20001c08
 8002b74:	080103e4 	.word	0x080103e4
 8002b78:	08002e69 	.word	0x08002e69
 8002b7c:	080103f0 	.word	0x080103f0
 8002b80:	0801041c 	.word	0x0801041c
 8002b84:	08002dd1 	.word	0x08002dd1

08002b88 <Task_COMM_init>:
scomm_request_t COMM_request;
SemaphoreHandle_t COMM_xSem = NULL;
uint32_t global_comm_it;


void Task_COMM_init(void){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af02      	add	r7, sp, #8
	BaseType_t res_task;

	global_comm_it=0;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <Task_COMM_init+0x64>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

	COMM_xSem=xSemaphoreCreateMutex();
 8002b94:	2001      	movs	r0, #1
 8002b96:	f004 fb76 	bl	8007286 <xQueueCreateMutex>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <Task_COMM_init+0x68>)
 8002b9e:	6013      	str	r3, [r2, #0]
	if( COMM_xSem == NULL ){
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <Task_COMM_init+0x68>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <Task_COMM_init+0x2e>
		printf("PANIC: Error al crear el Semáforo ORION\r\n");
 8002ba8:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <Task_COMM_init+0x6c>)
 8002baa:	f007 fdb3 	bl	800a714 <puts>
		fflush(NULL);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f007 f920 	bl	8009df4 <fflush>
		while(1);
 8002bb4:	e7fe      	b.n	8002bb4 <Task_COMM_init+0x2c>
	}

 	res_task=xTaskCreate(Task_COMM,"COMMUNICATION",2048,NULL,	NORMAL_PRIORITY,NULL);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	231b      	movs	r3, #27
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <Task_COMM_init+0x70>)
 8002bc6:	480d      	ldr	r0, [pc, #52]	; (8002bfc <Task_COMM_init+0x74>)
 8002bc8:	f005 f8e1 	bl	8007d8e <xTaskCreate>
 8002bcc:	6078      	str	r0, [r7, #4]
 	if( res_task != pdPASS ){
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d006      	beq.n	8002be2 <Task_COMM_init+0x5a>
 	 				printf("PANIC: Error al crear Tarea Comunicaciones\r\n");
 8002bd4:	480a      	ldr	r0, [pc, #40]	; (8002c00 <Task_COMM_init+0x78>)
 8002bd6:	f007 fd9d 	bl	800a714 <puts>
 	 				fflush(NULL);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f007 f90a 	bl	8009df4 <fflush>
 	 				while(1);
 8002be0:	e7fe      	b.n	8002be0 <Task_COMM_init+0x58>
 	}
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20001404 	.word	0x20001404
 8002bf0:	20001400 	.word	0x20001400
 8002bf4:	08010424 	.word	0x08010424
 8002bf8:	08010450 	.word	0x08010450
 8002bfc:	08002c05 	.word	0x08002c05
 8002c00:	08010460 	.word	0x08010460

08002c04 <Task_COMM>:

void Task_COMM( void *pvParameters ){
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

	int signal;

	while (global_wifi_ready==0) osDelay(1);
 8002c0c:	e002      	b.n	8002c14 <Task_COMM+0x10>
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f004 f8de 	bl	8006dd0 <osDelay>
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <Task_COMM+0xdc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f8      	beq.n	8002c0e <Task_COMM+0xa>

	while (1) {

		signal=1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
		do {
			if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <Task_COMM+0xe0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f004 fdbf 	bl	80077ac <xQueueSemaphoreTake>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d004      	beq.n	8002c3e <Task_COMM+0x3a>
				bprintf("\r\n\n\nHARAKIRI!!\n\n\n");
 8002c34:	482c      	ldr	r0, [pc, #176]	; (8002ce8 <Task_COMM+0xe4>)
 8002c36:	f000 f8f3 	bl	8002e20 <bprintf>
		   		HAL_NVIC_SystemReset();
 8002c3a:	f001 ff50 	bl	8004ade <HAL_NVIC_SystemReset>
		}

		// aquí tengo la exclusión mutua asegurada.
		if (COMM_request.command==0){ //nada quiere nada
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <Task_COMM+0xe8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <Task_COMM+0x58>
			xSemaphoreGive(COMM_xSem); // i’m going out critical section
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <Task_COMM+0xe0>)
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f004 fb32 	bl	80072b8 <xQueueGenericSend>
			osDelay(100);
 8002c54:	2064      	movs	r0, #100	; 0x64
 8002c56:	f004 f8bb 	bl	8006dd0 <osDelay>
 8002c5a:	e001      	b.n	8002c60 <Task_COMM+0x5c>
		}else signal=0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]

		}while(signal);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1dc      	bne.n	8002c20 <Task_COMM+0x1c>

		xSemaphoreGive(COMM_xSem); // i’m going out critical section
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <Task_COMM+0xe0>)
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f004 fb22 	bl	80072b8 <xQueueGenericSend>

		// Here is safe access to COMM_request because other thread has put COMM_request.command to 1 so before write any other thread must read 0 in this item.

		COMM_request.HTTP_response=ESP_Send_Request(COMM_request.dst_address,COMM_request.dst_port,COMM_request.HTTP_request);
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <Task_COMM+0xe8>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <Task_COMM+0xe8>)
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <Task_COMM+0xe8>)
 8002c80:	6912      	ldr	r2, [r2, #16]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 ff80 	bl	8003b88 <ESP_Send_Request>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <Task_COMM+0xe8>)
 8002c8c:	6153      	str	r3, [r2, #20]

		// remove headers and +IPD messages from ESP32 as a result you have json pure string IF it is completely recover from server in a unique +IPD message

		cleanResponse(COMM_request.HTTP_response,strlen((char *)COMM_request.HTTP_response));
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <Task_COMM+0xe8>)
 8002c90:	695c      	ldr	r4, [r3, #20]
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <Task_COMM+0xe8>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd faac 	bl	80001f4 <strlen>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f825 	bl	8002cf0 <cleanResponse>



		if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <Task_COMM+0xe0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fd7c 	bl	80077ac <xQueueSemaphoreTake>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d004      	beq.n	8002cc4 <Task_COMM+0xc0>
			bprintf("\r\n\n\nHARAKIRI!!\n\n\n");
 8002cba:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <Task_COMM+0xe4>)
 8002cbc:	f000 f8b0 	bl	8002e20 <bprintf>
		    HAL_NVIC_SystemReset();
 8002cc0:	f001 ff0d 	bl	8004ade <HAL_NVIC_SystemReset>
		}

		// if ESP does not receive response or there are any errors result must be different to 1
		COMM_request.result=1;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <Task_COMM+0xe8>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	605a      	str	r2, [r3, #4]
		xSemaphoreGive(COMM_xSem); // i’m going out critical section
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <Task_COMM+0xe0>)
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f004 faf0 	bl	80072b8 <xQueueGenericSend>

		vTaskDelay(10/portTICK_RATE_MS );
 8002cd8:	200a      	movs	r0, #10
 8002cda:	f005 f9dd 	bl	8008098 <vTaskDelay>
		signal=1;
 8002cde:	e79d      	b.n	8002c1c <Task_COMM+0x18>
 8002ce0:	20001c60 	.word	0x20001c60
 8002ce4:	20001400 	.word	0x20001400
 8002ce8:	0801048c 	.word	0x0801048c
 8002cec:	200013e8 	.word	0x200013e8

08002cf0 <cleanResponse>:




void cleanResponse(uint8_t * data,int maxlen)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]


	uint8_t * j,*from, *pc;


	 i=0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
	 while ((j=(uint8_t *)strstr((char *)data,"+IPD"))){
 8002cfe:	e01b      	b.n	8002d38 <cleanResponse+0x48>

		 from=(uint8_t *)strstr((char *)j,":");
 8002d00:	213a      	movs	r1, #58	; 0x3a
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f007 ff7f 	bl	800ac06 <strchr>
 8002d08:	6138      	str	r0, [r7, #16]
		 from++;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]

		 	 for (pc=from;pc<(data+2048);pc++)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e00a      	b.n	8002d2c <cleanResponse+0x3c>
			 	*(j++)=*(from++);
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	1c53      	adds	r3, r2, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	6179      	str	r1, [r7, #20]
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
		 	 for (pc=from;pc<(data+2048);pc++)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3ee      	bcc.n	8002d16 <cleanResponse+0x26>
	 while ((j=(uint8_t *)strstr((char *)data,"+IPD"))){
 8002d38:	4924      	ldr	r1, [pc, #144]	; (8002dcc <cleanResponse+0xdc>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f007 ff84 	bl	800ac48 <strstr>
 8002d40:	6178      	str	r0, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1db      	bne.n	8002d00 <cleanResponse+0x10>
	 };
	 	 do
			                  {
			                  }while(data[i++]!='{');
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	61ba      	str	r2, [r7, #24]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b7b      	cmp	r3, #123	; 0x7b
 8002d58:	d1f6      	bne.n	8002d48 <cleanResponse+0x58>
			                  i--;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
	for (t=0;t<(2048-i);t++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	e00d      	b.n	8002d82 <cleanResponse+0x92>
		data[t]=data[t+i];
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	441a      	add	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	440b      	add	r3, r1
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	701a      	strb	r2, [r3, #0]
	for (t=0;t<(2048-i);t++)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	dbeb      	blt.n	8002d66 <cleanResponse+0x76>

	i=0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]

    for (t=0;t<2048;t++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e00a      	b.n	8002dae <cleanResponse+0xbe>
    	if (data[t]=='}')
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b7d      	cmp	r3, #125	; 0x7d
 8002da2:	d101      	bne.n	8002da8 <cleanResponse+0xb8>
    		i=t;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	61bb      	str	r3, [r7, #24]
    for (t=0;t<2048;t++)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db4:	dbf0      	blt.n	8002d98 <cleanResponse+0xa8>
    data[i+1]=0;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3301      	adds	r3, #1
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]




}
 8002dc2:	bf00      	nop
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	080104a0 	.word	0x080104a0

08002dd0 <Task_CONSOLE>:
#include <stdarg.h>

char bprint_buff[2048];
BUFF_BUFFER_t * IObuff;

void Task_CONSOLE( void *pvParameters ){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
	while(1){

		IObuff->get(IObuff,&car);
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <Task_CONSOLE+0x48>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <Task_CONSOLE+0x48>)
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	f107 010a 	add.w	r1, r7, #10
 8002dea:	4610      	mov	r0, r2
 8002dec:	4798      	blx	r3
		do
			{
			res=HAL_UART_Transmit(& huart2,&car,1,10000);
 8002dee:	f107 010a 	add.w	r1, r7, #10
 8002df2:	f242 7310 	movw	r3, #10000	; 0x2710
 8002df6:	2201      	movs	r2, #1
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <Task_CONSOLE+0x4c>)
 8002dfa:	f003 f8fc 	bl	8005ff6 <HAL_UART_Transmit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	72fb      	strb	r3, [r7, #11]
			if (res!=HAL_OK) while(1);
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d000      	beq.n	8002e0a <Task_CONSOLE+0x3a>
 8002e08:	e7fe      	b.n	8002e08 <Task_CONSOLE+0x38>
			}while(res!= HAL_OK);
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <Task_CONSOLE+0x1e>

		it++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
		IObuff->get(IObuff,&car);
 8002e16:	e7e1      	b.n	8002ddc <Task_CONSOLE+0xc>
 8002e18:	20001c08 	.word	0x20001c08
 8002e1c:	20000a80 	.word	0x20000a80

08002e20 <bprintf>:
     }
	 IObuff->puts(IObuff,(BUFF_ITEM_t *)cad,strlen(cad));
}


void bprintf ( const char *fmt, ...){
 8002e20:	b40f      	push	{r0, r1, r2, r3}
 8002e22:	b5b0      	push	{r4, r5, r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
	  va_list ap;


	  va_start(ap, fmt);
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	607b      	str	r3, [r7, #4]
	  vsprintf(bprint_buff,fmt,ap);
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	69b9      	ldr	r1, [r7, #24]
 8002e32:	480b      	ldr	r0, [pc, #44]	; (8002e60 <bprintf+0x40>)
 8002e34:	f009 ff58 	bl	800cce8 <vsprintf>
	  va_end(ap);
 	  IObuff->puts(IObuff,(BUFF_ITEM_t *)bprint_buff,strlen(bprint_buff));
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <bprintf+0x44>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691c      	ldr	r4, [r3, #16]
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <bprintf+0x44>)
 8002e40:	681d      	ldr	r5, [r3, #0]
 8002e42:	4807      	ldr	r0, [pc, #28]	; (8002e60 <bprintf+0x40>)
 8002e44:	f7fd f9d6 	bl	80001f4 <strlen>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4904      	ldr	r1, [pc, #16]	; (8002e60 <bprintf+0x40>)
 8002e4e:	4628      	mov	r0, r5
 8002e50:	47a0      	blx	r4

}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002e5c:	b004      	add	sp, #16
 8002e5e:	4770      	bx	lr
 8002e60:	20001408 	.word	0x20001408
 8002e64:	20001c08 	.word	0x20001c08

08002e68 <Task_HW>:
uint32_t HZ_parpadeo;




void Task_HW( void *pvParameters ){
 8002e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e6c:	b08e      	sub	sp, #56	; 0x38
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]


	int t,hw_two_buttons;
	uint32_t valueAD;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
	GPIO_PinState switch_1, switch_2, switch_1_ant, switch_2_ant;

    float aux;

    TickType_t last_time_alarm_change=0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24

    hw_two_buttons=0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30

	switch_1_ant = GPIO_PIN_SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch_2_ant = GPIO_PIN_SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	global_hw_it = 0;
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <Task_HW+0x204>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

	HZ_parpadeo=100;
 8002e9a:	4b75      	ldr	r3, [pc, #468]	; (8003070 <Task_HW+0x208>)
 8002e9c:	2264      	movs	r2, #100	; 0x64
 8002e9e:	601a      	str	r2, [r3, #0]

	global_sensor=0;
 8002ea0:	4b74      	ldr	r3, [pc, #464]	; (8003074 <Task_HW+0x20c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]


	global_sensor_level_max[0]=30.0;
 8002ea6:	4b74      	ldr	r3, [pc, #464]	; (8003078 <Task_HW+0x210>)
 8002ea8:	4a74      	ldr	r2, [pc, #464]	; (800307c <Task_HW+0x214>)
 8002eaa:	601a      	str	r2, [r3, #0]
	global_sensor_level_min[0]=25.0;
 8002eac:	4b74      	ldr	r3, [pc, #464]	; (8003080 <Task_HW+0x218>)
 8002eae:	4a75      	ldr	r2, [pc, #468]	; (8003084 <Task_HW+0x21c>)
 8002eb0:	601a      	str	r2, [r3, #0]
	global_sensor_level_max[1]=100.0;
 8002eb2:	4b71      	ldr	r3, [pc, #452]	; (8003078 <Task_HW+0x210>)
 8002eb4:	4a74      	ldr	r2, [pc, #464]	; (8003088 <Task_HW+0x220>)
 8002eb6:	605a      	str	r2, [r3, #4]
	global_sensor_level_min[1]=0.0;
 8002eb8:	4b71      	ldr	r3, [pc, #452]	; (8003080 <Task_HW+0x218>)
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
	global_sensor_level_alarm[0]=100.0;   // nivel de alarma por sensor
 8002ec0:	4b72      	ldr	r3, [pc, #456]	; (800308c <Task_HW+0x224>)
 8002ec2:	4a71      	ldr	r2, [pc, #452]	; (8003088 <Task_HW+0x220>)
 8002ec4:	601a      	str	r2, [r3, #0]
	global_sensor_level_alarm[1]=100.0;   // nivel de alarma por sensor
 8002ec6:	4b71      	ldr	r3, [pc, #452]	; (800308c <Task_HW+0x224>)
 8002ec8:	4a6f      	ldr	r2, [pc, #444]	; (8003088 <Task_HW+0x220>)
 8002eca:	605a      	str	r2, [r3, #4]

	global_alarm_trigger_time=xTaskGetTickCount();
 8002ecc:	f005 fa34 	bl	8008338 <xTaskGetTickCount>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a6f      	ldr	r2, [pc, #444]	; (8003090 <Task_HW+0x228>)
 8002ed4:	6013      	str	r3, [r2, #0]


	bprintf (PASCU_PRJ " at "__TIME__ "\r\n");
 8002ed6:	486f      	ldr	r0, [pc, #444]	; (8003094 <Task_HW+0x22c>)
 8002ed8:	f7ff ffa2 	bl	8002e20 <bprintf>
	bprintf ("Module: " IoT_NAME "\r\n\r\n");
 8002edc:	486e      	ldr	r0, [pc, #440]	; (8003098 <Task_HW+0x230>)
 8002ede:	f7ff ff9f 	bl	8002e20 <bprintf>


	while (1) {
		global_hw_it++;
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <Task_HW+0x204>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a60      	ldr	r2, [pc, #384]	; (800306c <Task_HW+0x204>)
 8002eea:	6013      	str	r3, [r2, #0]

		//leer los microinterruptores
		switch_1 = HAL_GPIO_ReadPin(PULSADOR1_GPIO_Port, PULSADOR1_Pin);
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	486b      	ldr	r0, [pc, #428]	; (800309c <Task_HW+0x234>)
 8002ef0:	f002 fb6a 	bl	80055c8 <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		switch_2 = HAL_GPIO_ReadPin(PULSADOR2_GPIO_Port, PULSADOR2_Pin);
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	4868      	ldr	r0, [pc, #416]	; (80030a0 <Task_HW+0x238>)
 8002efe:	f002 fb63 	bl	80055c8 <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		if ((switch_1 == GPIO_PIN_RESET) && (switch_2 == GPIO_PIN_RESET))
 8002f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <Task_HW+0xd6>
 8002f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d112      	bne.n	8002f3e <Task_HW+0xd6>
		{
			hw_two_buttons++;
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
			if (hw_two_buttons>20000){ // sin retardos
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002f24:	4293      	cmp	r3, r2
 8002f26:	dd0c      	ble.n	8002f42 <Task_HW+0xda>

				 bprintf("\r\n*** RESETTING ***\r\n      ",20);
 8002f28:	2114      	movs	r1, #20
 8002f2a:	485e      	ldr	r0, [pc, #376]	; (80030a4 <Task_HW+0x23c>)
 8002f2c:	f7ff ff78 	bl	8002e20 <bprintf>
				 WIFI_Boot();
 8002f30:	f000 fd78 	bl	8003a24 <WIFI_Boot>
				 HAL_NVIC_SystemReset();
 8002f34:	f001 fdd3 	bl	8004ade <HAL_NVIC_SystemReset>
				 hw_two_buttons=0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
			if (hw_two_buttons>20000){ // sin retardos
 8002f3c:	e001      	b.n	8002f42 <Task_HW+0xda>
			}
		}
		else{

			hw_two_buttons=0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// DIGITAL INPUT

		if (switch_2 == GPIO_PIN_SET) {
 8002f42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d112      	bne.n	8002f70 <Task_HW+0x108>
			if ((switch_1_ant == GPIO_PIN_SET) && (switch_1 == GPIO_PIN_RESET)) {
 8002f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10e      	bne.n	8002f70 <Task_HW+0x108>
 8002f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <Task_HW+0x108>
				global_sensor = (global_sensor + 1) % 2; // 0 a 1
 8002f5a:	4b46      	ldr	r3, [pc, #280]	; (8003074 <Task_HW+0x20c>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	bfb8      	it	lt
 8002f68:	425b      	neglt	r3, r3
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <Task_HW+0x20c>)
 8002f6e:	701a      	strb	r2, [r3, #0]
			}
	    }

		// fin alarma
		// si se pulsa el boton derecho para el buzzer y marca el momento
		if ((switch_2_ant == GPIO_PIN_SET) && (switch_2 == GPIO_PIN_RESET)) {
 8002f70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10f      	bne.n	8002f98 <Task_HW+0x130>
 8002f78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <Task_HW+0x130>

				if (global_buzzer==1){
 8002f80:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <Task_HW+0x240>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <Task_HW+0x130>
					/*al pulsar boton derecha se apaga y se toma el tiempo, no se puede encender si han pasado menos de 10 segundos*/
					global_alarm_trigger_time=xTaskGetTickCount();
 8002f88:	f005 f9d6 	bl	8008338 <xTaskGetTickCount>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4a40      	ldr	r2, [pc, #256]	; (8003090 <Task_HW+0x228>)
 8002f90:	6013      	str	r3, [r2, #0]
					global_buzzer=0;
 8002f92:	4b45      	ldr	r3, [pc, #276]	; (80030a8 <Task_HW+0x240>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
				}
		}

		// DIGITAL_OUTPUT

 		pon_Nivel(global_sensor, HZ_parpadeo);
 8002f98:	4b36      	ldr	r3, [pc, #216]	; (8003074 <Task_HW+0x20c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <Task_HW+0x208>)
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fa98 	bl	80034d8 <pon_Nivel>

		for (t = 0; t < 8; t++){
 8002fa8:	2300      	movs	r3, #0
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
 8002fac:	e08f      	b.n	80030ce <Task_HW+0x266>
			switch (t) {
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	f200 8089 	bhi.w	80030c8 <Task_HW+0x260>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <Task_HW+0x154>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fdd 	.word	0x08002fdd
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08003007 	.word	0x08003007
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	08003031 	.word	0x08003031
 8002fd0:	08003045 	.word	0x08003045
 8002fd4:	08003059 	.word	0x08003059
 8002fd8:	080030b5 	.word	0x080030b5
			case 0:
				HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, global_LEDS[t]);
 8002fdc:	4a33      	ldr	r2, [pc, #204]	; (80030ac <Task_HW+0x244>)
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	482d      	ldr	r0, [pc, #180]	; (80030a0 <Task_HW+0x238>)
 8002fea:	f002 fb05 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 8002fee:	e06b      	b.n	80030c8 <Task_HW+0x260>
			case 1:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, global_LEDS[t]);
 8002ff0:	4a2e      	ldr	r2, [pc, #184]	; (80030ac <Task_HW+0x244>)
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ffe:	4828      	ldr	r0, [pc, #160]	; (80030a0 <Task_HW+0x238>)
 8003000:	f002 fafa 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 8003004:	e060      	b.n	80030c8 <Task_HW+0x260>
			case 2:
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, global_LEDS[t]);
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <Task_HW+0x244>)
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003014:	4826      	ldr	r0, [pc, #152]	; (80030b0 <Task_HW+0x248>)
 8003016:	f002 faef 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 800301a:	e055      	b.n	80030c8 <Task_HW+0x260>
			case 3:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, global_LEDS[t]);
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <Task_HW+0x244>)
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	4413      	add	r3, r2
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	2120      	movs	r1, #32
 8003028:	481d      	ldr	r0, [pc, #116]	; (80030a0 <Task_HW+0x238>)
 800302a:	f002 fae5 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 800302e:	e04b      	b.n	80030c8 <Task_HW+0x260>
			case 4:
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, global_LEDS[t]);
 8003030:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <Task_HW+0x244>)
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	2108      	movs	r1, #8
 800303c:	4818      	ldr	r0, [pc, #96]	; (80030a0 <Task_HW+0x238>)
 800303e:	f002 fadb 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 8003042:	e041      	b.n	80030c8 <Task_HW+0x260>
			case 5:
				HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, global_LEDS[t]);
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <Task_HW+0x244>)
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	4817      	ldr	r0, [pc, #92]	; (80030b0 <Task_HW+0x248>)
 8003052:	f002 fad1 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 8003056:	e037      	b.n	80030c8 <Task_HW+0x260>
			case 6:
				HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, global_LEDS[t]);
 8003058:	4a14      	ldr	r2, [pc, #80]	; (80030ac <Task_HW+0x244>)
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	2101      	movs	r1, #1
 8003064:	480e      	ldr	r0, [pc, #56]	; (80030a0 <Task_HW+0x238>)
 8003066:	f002 fac7 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 800306a:	e02d      	b.n	80030c8 <Task_HW+0x260>
 800306c:	20001c44 	.word	0x20001c44
 8003070:	20001c48 	.word	0x20001c48
 8003074:	20001c0c 	.word	0x20001c0c
 8003078:	20001c10 	.word	0x20001c10
 800307c:	41f00000 	.word	0x41f00000
 8003080:	20001c18 	.word	0x20001c18
 8003084:	41c80000 	.word	0x41c80000
 8003088:	42c80000 	.word	0x42c80000
 800308c:	20001c20 	.word	0x20001c20
 8003090:	20001c40 	.word	0x20001c40
 8003094:	080104a8 	.word	0x080104a8
 8003098:	080104d8 	.word	0x080104d8
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020400 	.word	0x40020400
 80030a4:	080104f4 	.word	0x080104f4
 80030a8:	20001c3c 	.word	0x20001c3c
 80030ac:	20001c34 	.word	0x20001c34
 80030b0:	40020000 	.word	0x40020000
			case 7:
				HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, global_LEDS[t]);
 80030b4:	4aca      	ldr	r2, [pc, #808]	; (80033e0 <Task_HW+0x578>)
 80030b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b8:	4413      	add	r3, r2
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	2120      	movs	r1, #32
 80030c0:	48c8      	ldr	r0, [pc, #800]	; (80033e4 <Task_HW+0x57c>)
 80030c2:	f002 fa99 	bl	80055f8 <HAL_GPIO_WritePin>
				break;
 80030c6:	bf00      	nop
		for (t = 0; t < 8; t++){
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	3301      	adds	r3, #1
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	2b07      	cmp	r3, #7
 80030d2:	f77f af6c 	ble.w	8002fae <Task_HW+0x146>
			}
		}
	 		HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin, global_buzzer);
 80030d6:	4bc4      	ldr	r3, [pc, #784]	; (80033e8 <Task_HW+0x580>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	48c1      	ldr	r0, [pc, #772]	; (80033e4 <Task_HW+0x57c>)
 80030e0:	f002 fa8a 	bl	80055f8 <HAL_GPIO_WritePin>


			// LDR

			// configuracion del canal de entrada A/D
			sConfig.Channel = ADC_CHANNEL_0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80030e8:	2301      	movs	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80030ec:	2307      	movs	r3, #7
 80030ee:	613b      	str	r3, [r7, #16]

			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80030f0:	f107 0308 	add.w	r3, r7, #8
 80030f4:	4619      	mov	r1, r3
 80030f6:	48bd      	ldr	r0, [pc, #756]	; (80033ec <Task_HW+0x584>)
 80030f8:	f001 f9a8 	bl	800444c <HAL_ADC_ConfigChannel>
			// Disparo la conversion
			HAL_ADC_Start(&hadc1);
 80030fc:	48bb      	ldr	r0, [pc, #748]	; (80033ec <Task_HW+0x584>)
 80030fe:	f001 f859 	bl	80041b4 <HAL_ADC_Start>
			// Espero la finalización
			HAL_ADC_PollForConversion(&hadc1, 10000);
 8003102:	f242 7110 	movw	r1, #10000	; 0x2710
 8003106:	48b9      	ldr	r0, [pc, #740]	; (80033ec <Task_HW+0x584>)
 8003108:	f001 f908 	bl	800431c <HAL_ADC_PollForConversion>
			// Leo el valor de la conversión 4095 y 0
			valueAD = HAL_ADC_GetValue(&hadc1);
 800310c:	48b7      	ldr	r0, [pc, #732]	; (80033ec <Task_HW+0x584>)
 800310e:	f001 f990 	bl	8004432 <HAL_ADC_GetValue>
 8003112:	61f8      	str	r0, [r7, #28]

			aux=(3.1-valueAD * 3.3 / 4095.0)*100.0/3.1;
 8003114:	69f8      	ldr	r0, [r7, #28]
 8003116:	f7fd fa0d 	bl	8000534 <__aeabi_ui2d>
 800311a:	a39f      	add	r3, pc, #636	; (adr r3, 8003398 <Task_HW+0x530>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f7fd fa82 	bl	8000628 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	a39c      	add	r3, pc, #624	; (adr r3, 80033a0 <Task_HW+0x538>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f7fd fba3 	bl	800087c <__aeabi_ddiv>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	a19b      	add	r1, pc, #620	; (adr r1, 80033a8 <Task_HW+0x540>)
 800313c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003140:	f7fd f8ba 	bl	80002b8 <__aeabi_dsub>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	4ba7      	ldr	r3, [pc, #668]	; (80033f0 <Task_HW+0x588>)
 8003152:	f7fd fa69 	bl	8000628 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	a392      	add	r3, pc, #584	; (adr r3, 80033a8 <Task_HW+0x540>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f7fd fb8a 	bl	800087c <__aeabi_ddiv>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f7fd fd52 	bl	8000c18 <__aeabi_d2f>
 8003174:	4603      	mov	r3, r0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
					if (aux<0.0)
 8003178:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800317c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003184:	d502      	bpl.n	800318c <Task_HW+0x324>
						aux=0.0;
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (aux>100.0)
 800318c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003190:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80033f4 <Task_HW+0x58c>
 8003194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	dd01      	ble.n	80031a2 <Task_HW+0x33a>
						aux=100.0;
 800319e:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <Task_HW+0x590>)
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28

			global_sensor_level[1]=aux;   	   // nivel de sensor
 80031a2:	4a96      	ldr	r2, [pc, #600]	; (80033fc <Task_HW+0x594>)
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	6053      	str	r3, [r2, #4]

			// Temperatura

			sConfig.Channel = ADC_CHANNEL_1;
 80031a8:	2301      	movs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031b0:	2307      	movs	r3, #7
 80031b2:	613b      	str	r3, [r7, #16]

			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	4619      	mov	r1, r3
 80031ba:	488c      	ldr	r0, [pc, #560]	; (80033ec <Task_HW+0x584>)
 80031bc:	f001 f946 	bl	800444c <HAL_ADC_ConfigChannel>
			// Disparo la conversion
			HAL_ADC_Start(&hadc1);
 80031c0:	488a      	ldr	r0, [pc, #552]	; (80033ec <Task_HW+0x584>)
 80031c2:	f000 fff7 	bl	80041b4 <HAL_ADC_Start>
			// Espero la finalización
			HAL_ADC_PollForConversion(&hadc1, 10000);
 80031c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80031ca:	4888      	ldr	r0, [pc, #544]	; (80033ec <Task_HW+0x584>)
 80031cc:	f001 f8a6 	bl	800431c <HAL_ADC_PollForConversion>
			// Leo el valor de la conversión 4095 y 0
			valueAD = HAL_ADC_GetValue(&hadc1);
 80031d0:	4886      	ldr	r0, [pc, #536]	; (80033ec <Task_HW+0x584>)
 80031d2:	f001 f92e 	bl	8004432 <HAL_ADC_GetValue>
 80031d6:	61f8      	str	r0, [r7, #28]

			aux = BETA
					/ (log(
							(-10000.0 * 3.3 / (valueAD * 3.3 / 4095.9 - 3.3)
 80031d8:	69f8      	ldr	r0, [r7, #28]
 80031da:	f7fd f9ab 	bl	8000534 <__aeabi_ui2d>
 80031de:	a36e      	add	r3, pc, #440	; (adr r3, 8003398 <Task_HW+0x530>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fa20 	bl	8000628 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	a36f      	add	r3, pc, #444	; (adr r3, 80033b0 <Task_HW+0x548>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f7fd fb41 	bl	800087c <__aeabi_ddiv>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	a365      	add	r3, pc, #404	; (adr r3, 8003398 <Task_HW+0x530>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fd f856 	bl	80002b8 <__aeabi_dsub>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	a169      	add	r1, pc, #420	; (adr r1, 80033b8 <Task_HW+0x550>)
 8003212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003216:	f7fd fb31 	bl	800087c <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
									- 10000.0) / R25) + BETA / T25) - 273.18;
 8003222:	a367      	add	r3, pc, #412	; (adr r3, 80033c0 <Task_HW+0x558>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd f846 	bl	80002b8 <__aeabi_dsub>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
					/ (log(
 8003234:	a362      	add	r3, pc, #392	; (adr r3, 80033c0 <Task_HW+0x558>)
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	f7fd fb1f 	bl	800087c <__aeabi_ddiv>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	ec43 2b17 	vmov	d7, r2, r3
 8003246:	eeb0 0a47 	vmov.f32	s0, s14
 800324a:	eef0 0a67 	vmov.f32	s1, s15
 800324e:	f00c fe9b 	bl	800ff88 <log>
 8003252:	ec51 0b10 	vmov	r0, r1, d0
									- 10000.0) / R25) + BETA / T25) - 273.18;
 8003256:	a35c      	add	r3, pc, #368	; (adr r3, 80033c8 <Task_HW+0x560>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fd f82e 	bl	80002bc <__adddf3>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
					/ (log(
 8003264:	a15a      	add	r1, pc, #360	; (adr r1, 80033d0 <Task_HW+0x568>)
 8003266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800326a:	f7fd fb07 	bl	800087c <__aeabi_ddiv>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
									- 10000.0) / R25) + BETA / T25) - 273.18;
 8003276:	a358      	add	r3, pc, #352	; (adr r3, 80033d8 <Task_HW+0x570>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd f81c 	bl	80002b8 <__aeabi_dsub>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
			aux = BETA
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f7fd fcc6 	bl	8000c18 <__aeabi_d2f>
 800328c:	4603      	mov	r3, r0
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
			global_sensor_level[0]=aux;   	   // nivel de sensor
 8003290:	4a5a      	ldr	r2, [pc, #360]	; (80033fc <Task_HW+0x594>)
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	6013      	str	r3, [r2, #0]


			// POT

			// configuracion del canal de entrada A/D
			sConfig.Channel = ADC_CHANNEL_4;
 8003296:	2304      	movs	r3, #4
 8003298:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800329e:	2307      	movs	r3, #7
 80032a0:	613b      	str	r3, [r7, #16]

			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	4619      	mov	r1, r3
 80032a8:	4850      	ldr	r0, [pc, #320]	; (80033ec <Task_HW+0x584>)
 80032aa:	f001 f8cf 	bl	800444c <HAL_ADC_ConfigChannel>
			// Disparo la conversion
			HAL_ADC_Start(&hadc1);
 80032ae:	484f      	ldr	r0, [pc, #316]	; (80033ec <Task_HW+0x584>)
 80032b0:	f000 ff80 	bl	80041b4 <HAL_ADC_Start>
			// Espero la finalización
			HAL_ADC_PollForConversion(&hadc1, 10000);
 80032b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80032b8:	484c      	ldr	r0, [pc, #304]	; (80033ec <Task_HW+0x584>)
 80032ba:	f001 f82f 	bl	800431c <HAL_ADC_PollForConversion>
			// Leo el valor de la conversión 4095 y 0
			valueAD = HAL_ADC_GetValue(&hadc1);
 80032be:	484b      	ldr	r0, [pc, #300]	; (80033ec <Task_HW+0x584>)
 80032c0:	f001 f8b7 	bl	8004432 <HAL_ADC_GetValue>
 80032c4:	61f8      	str	r0, [r7, #28]
			if (fabs(global_pot-valueAD)>109.0){
 80032c6:	4b4e      	ldr	r3, [pc, #312]	; (8003400 <Task_HW+0x598>)
 80032c8:	ed93 7a00 	vldr	s14, [r3]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032da:	eef0 7ae7 	vabs.f32	s15, s15
 80032de:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8003404 <Task_HW+0x59c>
 80032e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	f340 8097 	ble.w	800341c <Task_HW+0x5b4>

				HZ_parpadeo=40;
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <Task_HW+0x5a0>)
 80032f0:	2228      	movs	r2, #40	; 0x28
 80032f2:	601a      	str	r2, [r3, #0]
				last_time_alarm_change=xTaskGetTickCount();
 80032f4:	f005 f820 	bl	8008338 <xTaskGetTickCount>
 80032f8:	6278      	str	r0, [r7, #36]	; 0x24
				global_sensor_level_alarm[global_sensor]=global_sensor_level_min[global_sensor]+valueAD / 4095.0*(global_sensor_level_max[global_sensor]-global_sensor_level_min[global_sensor]);
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <Task_HW+0x5a4>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4a44      	ldr	r2, [pc, #272]	; (8003410 <Task_HW+0x5a8>)
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f936 	bl	8000578 <__aeabi_f2d>
 800330c:	4604      	mov	r4, r0
 800330e:	460d      	mov	r5, r1
 8003310:	69f8      	ldr	r0, [r7, #28]
 8003312:	f7fd f90f 	bl	8000534 <__aeabi_ui2d>
 8003316:	a322      	add	r3, pc, #136	; (adr r3, 80033a0 <Task_HW+0x538>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fd faae 	bl	800087c <__aeabi_ddiv>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4690      	mov	r8, r2
 8003326:	4699      	mov	r9, r3
 8003328:	4b38      	ldr	r3, [pc, #224]	; (800340c <Task_HW+0x5a4>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4a39      	ldr	r2, [pc, #228]	; (8003414 <Task_HW+0x5ac>)
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	ed93 7a00 	vldr	s14, [r3]
 8003336:	4b35      	ldr	r3, [pc, #212]	; (800340c <Task_HW+0x5a4>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4a35      	ldr	r2, [pc, #212]	; (8003410 <Task_HW+0x5a8>)
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	ee17 0a90 	vmov	r0, s15
 800334c:	f7fd f914 	bl	8000578 <__aeabi_f2d>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4640      	mov	r0, r8
 8003356:	4649      	mov	r1, r9
 8003358:	f7fd f966 	bl	8000628 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4620      	mov	r0, r4
 8003362:	4629      	mov	r1, r5
 8003364:	f7fc ffaa 	bl	80002bc <__adddf3>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4927      	ldr	r1, [pc, #156]	; (800340c <Task_HW+0x5a4>)
 800336e:	7809      	ldrb	r1, [r1, #0]
 8003370:	460c      	mov	r4, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fc4f 	bl	8000c18 <__aeabi_d2f>
 800337a:	4602      	mov	r2, r0
 800337c:	4926      	ldr	r1, [pc, #152]	; (8003418 <Task_HW+0x5b0>)
 800337e:	00a3      	lsls	r3, r4, #2
 8003380:	440b      	add	r3, r1
 8003382:	601a      	str	r2, [r3, #0]
				global_pot=valueAD;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <Task_HW+0x598>)
 8003390:	edc3 7a00 	vstr	s15, [r3]
 8003394:	e042      	b.n	800341c <Task_HW+0x5b4>
 8003396:	bf00      	nop
 8003398:	66666666 	.word	0x66666666
 800339c:	400a6666 	.word	0x400a6666
 80033a0:	00000000 	.word	0x00000000
 80033a4:	40affe00 	.word	0x40affe00
 80033a8:	cccccccd 	.word	0xcccccccd
 80033ac:	4008cccc 	.word	0x4008cccc
 80033b0:	cccccccd 	.word	0xcccccccd
 80033b4:	40afffcc 	.word	0x40afffcc
 80033b8:	00000000 	.word	0x00000000
 80033bc:	c0e01d00 	.word	0xc0e01d00
 80033c0:	00000000 	.word	0x00000000
 80033c4:	40c38800 	.word	0x40c38800
 80033c8:	cde627c2 	.word	0xcde627c2
 80033cc:	402a294c 	.word	0x402a294c
 80033d0:	00000000 	.word	0x00000000
 80033d4:	40ae7800 	.word	0x40ae7800
 80033d8:	47ae147b 	.word	0x47ae147b
 80033dc:	407112e1 	.word	0x407112e1
 80033e0:	20001c34 	.word	0x20001c34
 80033e4:	40020000 	.word	0x40020000
 80033e8:	20001c3c 	.word	0x20001c3c
 80033ec:	200009f4 	.word	0x200009f4
 80033f0:	40590000 	.word	0x40590000
 80033f4:	42c80000 	.word	0x42c80000
 80033f8:	42c80000 	.word	0x42c80000
 80033fc:	20001c28 	.word	0x20001c28
 8003400:	20001c30 	.word	0x20001c30
 8003404:	42da0000 	.word	0x42da0000
 8003408:	20001c48 	.word	0x20001c48
 800340c:	20001c0c 	.word	0x20001c0c
 8003410:	20001c18 	.word	0x20001c18
 8003414:	20001c10 	.word	0x20001c10
 8003418:	20001c20 	.word	0x20001c20
			}


			{
			int value=xTaskGetTickCount();
 800341c:	f004 ff8c 	bl	8008338 <xTaskGetTickCount>
 8003420:	4603      	mov	r3, r0
 8003422:	61bb      	str	r3, [r7, #24]
			value=((value-last_time_alarm_change)/portTICK_RATE_MS);
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	61bb      	str	r3, [r7, #24]
			if (value>1500)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003432:	4293      	cmp	r3, r2
 8003434:	dd02      	ble.n	800343c <Task_HW+0x5d4>
				HZ_parpadeo=5;
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <Task_HW+0x65c>)
 8003438:	2205      	movs	r2, #5
 800343a:	601a      	str	r2, [r3, #0]
			}

			if (((xTaskGetTickCount()-global_alarm_trigger_time)/portTICK_RATE_MS)>10000){
 800343c:	f004 ff7c 	bl	8008338 <xTaskGetTickCount>
 8003440:	4602      	mov	r2, r0
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <Task_HW+0x660>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f242 7210 	movw	r2, #10000	; 0x2710
 800344c:	4293      	cmp	r3, r2
 800344e:	d918      	bls.n	8003482 <Task_HW+0x61a>
			if (
					(global_sensor_level[0]>global_sensor_level_alarm[0]) ||
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <Task_HW+0x664>)
 8003452:	ed93 7a00 	vldr	s14, [r3]
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <Task_HW+0x668>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
			if (
 800345c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003464:	dc0a      	bgt.n	800347c <Task_HW+0x614>
					(global_sensor_level[1]>global_sensor_level_alarm[1])
 8003466:	4b19      	ldr	r3, [pc, #100]	; (80034cc <Task_HW+0x664>)
 8003468:	ed93 7a01 	vldr	s14, [r3, #4]
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <Task_HW+0x668>)
 800346e:	edd3 7a01 	vldr	s15, [r3, #4]
					(global_sensor_level[0]>global_sensor_level_alarm[0]) ||
 8003472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	dd02      	ble.n	8003482 <Task_HW+0x61a>
			   )
			global_buzzer=1;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <Task_HW+0x66c>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]

		}

	// gestión de alarmas

		if (global_buzzer==1){
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <Task_HW+0x66c>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10f      	bne.n	80034aa <Task_HW+0x642>
			if ((switch_2_ant == GPIO_PIN_SET) && (switch_2 == GPIO_PIN_RESET)) {
 800348a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10b      	bne.n	80034aa <Task_HW+0x642>
 8003492:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <Task_HW+0x642>
				/*al pulsar boton derecha se apaga y se toma el tiempo, no se puede encender si han pasado menos de 10 segundos*/
				global_alarm_trigger_time=xTaskGetTickCount();
 800349a:	f004 ff4d 	bl	8008338 <xTaskGetTickCount>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <Task_HW+0x660>)
 80034a2:	6013      	str	r3, [r2, #0]
				global_buzzer=0;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <Task_HW+0x66c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]




		//detección de flancos
			switch_2_ant = switch_2;
 80034aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			switch_1_ant = switch_1;
 80034b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    vTaskDelay(10/portTICK_RATE_MS );
 80034ba:	200a      	movs	r0, #10
 80034bc:	f004 fdec 	bl	8008098 <vTaskDelay>
		global_hw_it++;
 80034c0:	e50f      	b.n	8002ee2 <Task_HW+0x7a>
 80034c2:	bf00      	nop
 80034c4:	20001c48 	.word	0x20001c48
 80034c8:	20001c40 	.word	0x20001c40
 80034cc:	20001c28 	.word	0x20001c28
 80034d0:	20001c20 	.word	0x20001c20
 80034d4:	20001c3c 	.word	0x20001c3c

080034d8 <pon_Nivel>:
}



////////////////////////////////////////////////////////////////////////7 LED
void pon_Nivel(uint8_t sensor_sel, uint32_t Hz){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]

	static int last_value_led=0;
	static int last_pos_led=0;


    global_LEDS[last_pos_led]=0;
 80034e4:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <pon_Nivel+0x1d8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a72      	ldr	r2, [pc, #456]	; (80036b4 <pon_Nivel+0x1dc>)
 80034ea:	2100      	movs	r1, #0
 80034ec:	54d1      	strb	r1, [r2, r3]
	for (ct=0;ct<8;ct++) global_LEDS[ct]=0; // borra el led alarma
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e007      	b.n	8003504 <pon_Nivel+0x2c>
 80034f4:	4a6f      	ldr	r2, [pc, #444]	; (80036b4 <pon_Nivel+0x1dc>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4413      	add	r3, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3301      	adds	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b07      	cmp	r3, #7
 8003508:	ddf4      	ble.n	80034f4 <pon_Nivel+0x1c>

	// pon nivel de señal
	nleds=trunc((global_sensor_level[sensor_sel]-global_sensor_level_min[sensor_sel])/(global_sensor_level_max[sensor_sel]-global_sensor_level_min[sensor_sel])*7.4);
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	4a6a      	ldr	r2, [pc, #424]	; (80036b8 <pon_Nivel+0x1e0>)
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	ed93 7a00 	vldr	s14, [r3]
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	4a68      	ldr	r2, [pc, #416]	; (80036bc <pon_Nivel+0x1e4>)
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4a65      	ldr	r2, [pc, #404]	; (80036c0 <pon_Nivel+0x1e8>)
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	edd3 6a00 	vldr	s13, [r3]
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4a61      	ldr	r2, [pc, #388]	; (80036bc <pon_Nivel+0x1e4>)
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003542:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003546:	ee16 0a90 	vmov	r0, s13
 800354a:	f7fd f815 	bl	8000578 <__aeabi_f2d>
 800354e:	a356      	add	r3, pc, #344	; (adr r3, 80036a8 <pon_Nivel+0x1d0>)
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f7fd f868 	bl	8000628 <__aeabi_dmul>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	ec43 2b17 	vmov	d7, r2, r3
 8003560:	eeb0 0a47 	vmov.f32	s0, s14
 8003564:	eef0 0a67 	vmov.f32	s1, s15
 8003568:	f00c fcdc 	bl	800ff24 <trunc>
 800356c:	ec53 2b10 	vmov	r2, r3, d0
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	f7fd fb08 	bl	8000b88 <__aeabi_d2iz>
 8003578:	4603      	mov	r3, r0
 800357a:	613b      	str	r3, [r7, #16]
	for (ct=0;ct<8;ct++)
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e011      	b.n	80035a6 <pon_Nivel+0xce>
	if (ct<nleds)
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	429a      	cmp	r2, r3
 8003588:	da05      	bge.n	8003596 <pon_Nivel+0xbe>
			global_LEDS[ct]=1;
 800358a:	4a4a      	ldr	r2, [pc, #296]	; (80036b4 <pon_Nivel+0x1dc>)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	4413      	add	r3, r2
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e004      	b.n	80035a0 <pon_Nivel+0xc8>
	else
			global_LEDS[ct]=0;
 8003596:	4a47      	ldr	r2, [pc, #284]	; (80036b4 <pon_Nivel+0x1dc>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4413      	add	r3, r2
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
	for (ct=0;ct<8;ct++)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b07      	cmp	r3, #7
 80035aa:	ddea      	ble.n	8003582 <pon_Nivel+0xaa>

	// este nivel tiene prioridad sobre el valor act, por eso va al final

	global_LEDS[last_pos_led]=last_value_led;
 80035ac:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <pon_Nivel+0x1ec>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <pon_Nivel+0x1d8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2d1      	uxtb	r1, r2
 80035b6:	4a3f      	ldr	r2, [pc, #252]	; (80036b4 <pon_Nivel+0x1dc>)
 80035b8:	54d1      	strb	r1, [r2, r3]

 	if (((float)(xTaskGetTickCount()-last_time)/portTICK_RATE_MS)>(float)1000.0/(float)Hz){
 80035ba:	f004 febd 	bl	8008338 <xTaskGetTickCount>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <pon_Nivel+0x1f0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d8:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 80036cc <pon_Nivel+0x1f4>
 80035dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80035e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	dc00      	bgt.n	80035ec <pon_Nivel+0x114>
		if (last_value_led==1)
			global_LEDS[nled]=0;
		else
			global_LEDS[nled]=1;
	}
}
 80035ea:	e059      	b.n	80036a0 <pon_Nivel+0x1c8>
		last_value_led=!last_value_led;
 80035ec:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <pon_Nivel+0x1ec>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <pon_Nivel+0x1ec>)
 80035fe:	601a      	str	r2, [r3, #0]
		last_time= xTaskGetTickCount();
 8003600:	f004 fe9a 	bl	8008338 <xTaskGetTickCount>
 8003604:	4603      	mov	r3, r0
 8003606:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <pon_Nivel+0x1f0>)
 8003608:	6013      	str	r3, [r2, #0]
		nled=trunc((global_sensor_level_alarm[sensor_sel]-global_sensor_level_min[sensor_sel])/(global_sensor_level_max[sensor_sel]-global_sensor_level_min[sensor_sel])*7.4);
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <pon_Nivel+0x1f8>)
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	ed93 7a00 	vldr	s14, [r3]
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <pon_Nivel+0x1e4>)
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <pon_Nivel+0x1e8>)
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	edd3 6a00 	vldr	s13, [r3]
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	4a21      	ldr	r2, [pc, #132]	; (80036bc <pon_Nivel+0x1e4>)
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003642:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003646:	ee16 0a90 	vmov	r0, s13
 800364a:	f7fc ff95 	bl	8000578 <__aeabi_f2d>
 800364e:	a316      	add	r3, pc, #88	; (adr r3, 80036a8 <pon_Nivel+0x1d0>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc ffe8 	bl	8000628 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	ec43 2b17 	vmov	d7, r2, r3
 8003660:	eeb0 0a47 	vmov.f32	s0, s14
 8003664:	eef0 0a67 	vmov.f32	s1, s15
 8003668:	f00c fc5c 	bl	800ff24 <trunc>
 800366c:	ec53 2b10 	vmov	r2, r3, d0
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	f7fd fa88 	bl	8000b88 <__aeabi_d2iz>
 8003678:	4603      	mov	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]
		last_pos_led=nled;
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <pon_Nivel+0x1d8>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6013      	str	r3, [r2, #0]
		if (last_value_led==1)
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <pon_Nivel+0x1ec>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <pon_Nivel+0x1be>
			global_LEDS[nled]=0;
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <pon_Nivel+0x1dc>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
}
 8003694:	e004      	b.n	80036a0 <pon_Nivel+0x1c8>
			global_LEDS[nled]=1;
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <pon_Nivel+0x1dc>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	9999999a 	.word	0x9999999a
 80036ac:	401d9999 	.word	0x401d9999
 80036b0:	20001c4c 	.word	0x20001c4c
 80036b4:	20001c34 	.word	0x20001c34
 80036b8:	20001c28 	.word	0x20001c28
 80036bc:	20001c18 	.word	0x20001c18
 80036c0:	20001c10 	.word	0x20001c10
 80036c4:	20001c50 	.word	0x20001c50
 80036c8:	20001c54 	.word	0x20001c54
 80036cc:	447a0000 	.word	0x447a0000
 80036d0:	20001c20 	.word	0x20001c20

080036d4 <Task_TIME_init>:
#include "cJSON.h"


uint32_t global_time_it;

void Task_TIME_init(void){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af02      	add	r7, sp, #8

	BaseType_t res_task;
	global_time_it=0;
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <Task_TIME_init+0x48>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
	global_wifi_ready=0;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <Task_TIME_init+0x4c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
	res_task=xTaskCreate( Task_TIME,"TIME",2048,NULL,	NORMAL_PRIORITY,NULL);
 80036e6:	2300      	movs	r3, #0
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	231b      	movs	r3, #27
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f4:	490b      	ldr	r1, [pc, #44]	; (8003724 <Task_TIME_init+0x50>)
 80036f6:	480c      	ldr	r0, [pc, #48]	; (8003728 <Task_TIME_init+0x54>)
 80036f8:	f004 fb49 	bl	8007d8e <xTaskCreate>
 80036fc:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d006      	beq.n	8003712 <Task_TIME_init+0x3e>
		bprintf("PANIC: Error al crear Tarea TIME\r\n");
 8003704:	4809      	ldr	r0, [pc, #36]	; (800372c <Task_TIME_init+0x58>)
 8003706:	f7ff fb8b 	bl	8002e20 <bprintf>
		fflush(NULL);
 800370a:	2000      	movs	r0, #0
 800370c:	f006 fb72 	bl	8009df4 <fflush>
		while(1);
 8003710:	e7fe      	b.n	8003710 <Task_TIME_init+0x3c>
	}

}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20001c58 	.word	0x20001c58
 8003720:	20001c60 	.word	0x20001c60
 8003724:	08010510 	.word	0x08010510
 8003728:	08003731 	.word	0x08003731
 800372c:	08010518 	.word	0x08010518

08003730 <Task_TIME>:


void Task_TIME( void *pvParameters ){
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

	int signal;
	CJSON_PUBLIC(cJSON *) jsons1;

 	cJSON *name = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]


	while (1) {

		signal=1;
 800373c:	2301      	movs	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
		do {
			if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <Task_TIME+0x140>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003748:	4618      	mov	r0, r3
 800374a:	f004 f82f 	bl	80077ac <xQueueSemaphoreTake>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d004      	beq.n	800375e <Task_TIME+0x2e>
				bprintf("\r\n\n\nHARAKIRI!!\n\n\n");
 8003754:	4847      	ldr	r0, [pc, #284]	; (8003874 <Task_TIME+0x144>)
 8003756:	f7ff fb63 	bl	8002e20 <bprintf>
		   		HAL_NVIC_SystemReset();
 800375a:	f001 f9c0 	bl	8004ade <HAL_NVIC_SystemReset>
			}

			// aquí tengo la exclusión mutua asegurada.
			if (COMM_request.command==0){ //nada quiere nada
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <Task_TIME+0x148>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <Task_TIME+0x46>
				COMM_request.command=1;
 8003766:	4b44      	ldr	r3, [pc, #272]	; (8003878 <Task_TIME+0x148>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
				COMM_request.result=0;
 800376c:	4b42      	ldr	r3, [pc, #264]	; (8003878 <Task_TIME+0x148>)
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
				signal=0;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
			}
		    xSemaphoreGive(COMM_xSem); // i’m going out critical section
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <Task_TIME+0x140>)
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	2300      	movs	r3, #0
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	f003 fd9a 	bl	80072b8 <xQueueGenericSend>
		}while(signal);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1da      	bne.n	8003740 <Task_TIME+0x10>

		// now structure access is secure, nobody can rewrite it if flag command is 1

		COMM_request.dst_port=80;
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <Task_TIME+0x148>)
 800378c:	2250      	movs	r2, #80	; 0x50
 800378e:	609a      	str	r2, [r3, #8]
		COMM_request.dst_address=(uint8_t *)"worldtimeapi.org";
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <Task_TIME+0x148>)
 8003792:	4a3a      	ldr	r2, [pc, #232]	; (800387c <Task_TIME+0x14c>)
 8003794:	60da      	str	r2, [r3, #12]
		COMM_request.HTTP_request=(uint8_t *)"GET /api/timezone/Europe/Madrid HTTP/1.1\r\n\r\n";
 8003796:	4b38      	ldr	r3, [pc, #224]	; (8003878 <Task_TIME+0x148>)
 8003798:	4a39      	ldr	r2, [pc, #228]	; (8003880 <Task_TIME+0x150>)
 800379a:	611a      	str	r2, [r3, #16]


  		// Here you must parse json response in COMM_request.response item
		do
		{
			if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <Task_TIME+0x140>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f644 6120 	movw	r1, #20000	; 0x4e20
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 f801 	bl	80077ac <xQueueSemaphoreTake>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d01e      	beq.n	80037ee <Task_TIME+0xbe>
			bprintf("\r\n\n\nHARAKIRI!!\n\n\n");
 80037b0:	4830      	ldr	r0, [pc, #192]	; (8003874 <Task_TIME+0x144>)
 80037b2:	f7ff fb35 	bl	8002e20 <bprintf>
			HAL_NVIC_SystemReset();
 80037b6:	f001 f992 	bl	8004ade <HAL_NVIC_SystemReset>
			}

			while (COMM_request.result==0){
 80037ba:	e018      	b.n	80037ee <Task_TIME+0xbe>
				xSemaphoreGive(COMM_xSem); // i’m going out critical section
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <Task_TIME+0x140>)
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	2300      	movs	r3, #0
 80037c2:	2200      	movs	r2, #0
 80037c4:	2100      	movs	r1, #0
 80037c6:	f003 fd77 	bl	80072b8 <xQueueGenericSend>
				vTaskDelay(100/portTICK_RATE_MS );
 80037ca:	2064      	movs	r0, #100	; 0x64
 80037cc:	f004 fc64 	bl	8008098 <vTaskDelay>
				if (xSemaphoreTake(COMM_xSem, 20000/portTICK_RATE_MS  ) != pdTRUE ){// si en 20 segundos no he continuado entrado en orion mmm mal rollito harakiri
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <Task_TIME+0x140>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f644 6120 	movw	r1, #20000	; 0x4e20
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 ffe7 	bl	80077ac <xQueueSemaphoreTake>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d004      	beq.n	80037ee <Task_TIME+0xbe>
					bprintf("\r\n\n\nHARAKIRI!!\n\n\n");
 80037e4:	4823      	ldr	r0, [pc, #140]	; (8003874 <Task_TIME+0x144>)
 80037e6:	f7ff fb1b 	bl	8002e20 <bprintf>
					HAL_NVIC_SystemReset();
 80037ea:	f001 f978 	bl	8004ade <HAL_NVIC_SystemReset>
			while (COMM_request.result==0){
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <Task_TIME+0x148>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0e2      	beq.n	80037bc <Task_TIME+0x8c>
				}
			}
		}
		while(COMM_request.result==0);
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <Task_TIME+0x148>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ce      	beq.n	800379c <Task_TIME+0x6c>
		xSemaphoreGive(COMM_xSem); // i’m going out critical section
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <Task_TIME+0x140>)
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2200      	movs	r2, #0
 8003806:	2100      	movs	r1, #0
 8003808:	f003 fd56 	bl	80072b8 <xQueueGenericSend>

////
	jsons1 = cJSON_Parse((const char *)COMM_request.HTTP_response);
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <Task_TIME+0x148>)
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe f985 	bl	8001b20 <cJSON_Parse>
 8003816:	60f8      	str	r0, [r7, #12]
	if (jsons1) {
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <Task_TIME+0x10c>
				name = cJSON_GetObjectItem(jsons1, "utc_datetime");
 800381e:	4919      	ldr	r1, [pc, #100]	; (8003884 <Task_TIME+0x154>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7fe fc82 	bl	800212a <cJSON_GetObjectItem>
 8003826:	6138      	str	r0, [r7, #16]
				bprintf("%s \r\n",name->valuestring);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	4619      	mov	r1, r3
 800382e:	4816      	ldr	r0, [pc, #88]	; (8003888 <Task_TIME+0x158>)
 8003830:	f7ff faf6 	bl	8002e20 <bprintf>
				cJSON_Delete(jsons1);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7fd fc79 	bl	800112c <cJSON_Delete>
 800383a:	e002      	b.n	8003842 <Task_TIME+0x112>
	}
	else
		bprintf("Response error \r\n");
 800383c:	4813      	ldr	r0, [pc, #76]	; (800388c <Task_TIME+0x15c>)
 800383e:	f7ff faef 	bl	8002e20 <bprintf>

////

		COMM_request.command=0;
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <Task_TIME+0x148>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
		COMM_request.result=0;
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <Task_TIME+0x148>)
 800384a:	2200      	movs	r2, #0
 800384c:	605a      	str	r2, [r3, #4]

		xSemaphoreGive(COMM_xSem); // i’m going out critical section
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <Task_TIME+0x140>)
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	2200      	movs	r2, #0
 8003856:	2100      	movs	r1, #0
 8003858:	f003 fd2e 	bl	80072b8 <xQueueGenericSend>

  		vTaskDelay(10/portTICK_RATE_MS );
 800385c:	200a      	movs	r0, #10
 800385e:	f004 fc1b 	bl	8008098 <vTaskDelay>
		global_time_it++;
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <Task_TIME+0x160>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <Task_TIME+0x160>)
 800386a:	6013      	str	r3, [r2, #0]
		signal=1;
 800386c:	e766      	b.n	800373c <Task_TIME+0xc>
 800386e:	bf00      	nop
 8003870:	20001400 	.word	0x20001400
 8003874:	0801053c 	.word	0x0801053c
 8003878:	200013e8 	.word	0x200013e8
 800387c:	08010550 	.word	0x08010550
 8003880:	08010564 	.word	0x08010564
 8003884:	08010594 	.word	0x08010594
 8003888:	080105a4 	.word	0x080105a4
 800388c:	080105ac 	.word	0x080105ac
 8003890:	20001c58 	.word	0x20001c58

08003894 <Task_WIFI_init>:
uint32_t global_wifi_ready;

 uint8_t aux_buff_WIFI[2048];
 uint8_t buff_WIFI_response[2048];

void Task_WIFI_init(void){
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af02      	add	r7, sp, #8
	BaseType_t res_task;
	global_wifi_ready=0;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <Task_WIFI_init+0x40>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
	res_task=xTaskCreate( Task_WIFI,"Tarea_WIFI",2048,NULL,	NORMAL_PRIORITY,NULL);
 80038a0:	2300      	movs	r3, #0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	231b      	movs	r3, #27
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <Task_WIFI_init+0x44>)
 80038b0:	480a      	ldr	r0, [pc, #40]	; (80038dc <Task_WIFI_init+0x48>)
 80038b2:	f004 fa6c 	bl	8007d8e <xTaskCreate>
 80038b6:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d006      	beq.n	80038cc <Task_WIFI_init+0x38>
		printf("PANIC: Error al crear Tarea WIFI\r\n");
 80038be:	4808      	ldr	r0, [pc, #32]	; (80038e0 <Task_WIFI_init+0x4c>)
 80038c0:	f006 ff28 	bl	800a714 <puts>
		fflush(NULL);
 80038c4:	2000      	movs	r0, #0
 80038c6:	f006 fa95 	bl	8009df4 <fflush>
		while(1);
 80038ca:	e7fe      	b.n	80038ca <Task_WIFI_init+0x36>
}
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20001c60 	.word	0x20001c60
 80038d8:	080105c0 	.word	0x080105c0
 80038dc:	080038e5 	.word	0x080038e5
 80038e0:	080105cc 	.word	0x080105cc

080038e4 <Task_WIFI>:
void Task_WIFI( void *pvParameters ){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

	global_wifi_it=0;
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <Task_WIFI+0x2c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
	WIFI_Boot();
 80038f2:	f000 f897 	bl	8003a24 <WIFI_Boot>
	global_wifi_ready=1;
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <Task_WIFI+0x30>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

	while (1) {
		global_wifi_it++;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <Task_WIFI+0x2c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a03      	ldr	r2, [pc, #12]	; (8003910 <Task_WIFI+0x2c>)
 8003904:	6013      	str	r3, [r2, #0]
	    vTaskDelay(10/portTICK_RATE_MS );
 8003906:	200a      	movs	r0, #10
 8003908:	f004 fbc6 	bl	8008098 <vTaskDelay>
		global_wifi_it++;
 800390c:	e7f6      	b.n	80038fc <Task_WIFI+0x18>
 800390e:	bf00      	nop
 8003910:	20001c5c 	.word	0x20001c5c
 8003914:	20001c60 	.word	0x20001c60

08003918 <WIFI_RESET>:
	}
}

void WIFI_RESET(void){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
	// RESET
	unsigned int ct;
	 HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 800391e:	2200      	movs	r2, #0
 8003920:	2102      	movs	r1, #2
 8003922:	4838      	ldr	r0, [pc, #224]	; (8003a04 <WIFI_RESET+0xec>)
 8003924:	f001 fe68 	bl	80055f8 <HAL_GPIO_WritePin>
	 for (ct=0;ct<1000000;ct++);
 8003928:	2300      	movs	r3, #0
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e002      	b.n	8003934 <WIFI_RESET+0x1c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3301      	adds	r3, #1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <WIFI_RESET+0xf0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d9f8      	bls.n	800392e <WIFI_RESET+0x16>
	 HAL_UART_Init(&huart1);
 800393c:	4833      	ldr	r0, [pc, #204]	; (8003a0c <WIFI_RESET+0xf4>)
 800393e:	f002 fb0d 	bl	8005f5c <HAL_UART_Init>
	 for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	e007      	b.n	8003958 <WIFI_RESET+0x40>
 8003948:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <WIFI_RESET+0xf8>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3301      	adds	r3, #1
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	d3f3      	bcc.n	8003948 <WIFI_RESET+0x30>
	 HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003964:	492a      	ldr	r1, [pc, #168]	; (8003a10 <WIFI_RESET+0xf8>)
 8003966:	4829      	ldr	r0, [pc, #164]	; (8003a0c <WIFI_RESET+0xf4>)
 8003968:	f002 fbd7 	bl	800611a <HAL_UART_Receive_DMA>

	 HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 800396c:	2200      	movs	r2, #0
 800396e:	2110      	movs	r1, #16
 8003970:	4828      	ldr	r0, [pc, #160]	; (8003a14 <WIFI_RESET+0xfc>)
 8003972:	f001 fe41 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8003976:	2200      	movs	r2, #0
 8003978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800397c:	4825      	ldr	r0, [pc, #148]	; (8003a14 <WIFI_RESET+0xfc>)
 800397e:	f001 fe3b 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003988:	4823      	ldr	r0, [pc, #140]	; (8003a18 <WIFI_RESET+0x100>)
 800398a:	f001 fe35 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2120      	movs	r1, #32
 8003992:	4820      	ldr	r0, [pc, #128]	; (8003a14 <WIFI_RESET+0xfc>)
 8003994:	f001 fe30 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8003998:	2200      	movs	r2, #0
 800399a:	2108      	movs	r1, #8
 800399c:	481d      	ldr	r0, [pc, #116]	; (8003a14 <WIFI_RESET+0xfc>)
 800399e:	f001 fe2b 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2140      	movs	r1, #64	; 0x40
 80039a6:	481c      	ldr	r0, [pc, #112]	; (8003a18 <WIFI_RESET+0x100>)
 80039a8:	f001 fe26 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2101      	movs	r1, #1
 80039b0:	4818      	ldr	r0, [pc, #96]	; (8003a14 <WIFI_RESET+0xfc>)
 80039b2:	f001 fe21 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2120      	movs	r1, #32
 80039ba:	4817      	ldr	r0, [pc, #92]	; (8003a18 <WIFI_RESET+0x100>)
 80039bc:	f001 fe1c 	bl	80055f8 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80039c0:	2201      	movs	r2, #1
 80039c2:	2101      	movs	r1, #1
 80039c4:	4813      	ldr	r0, [pc, #76]	; (8003a14 <WIFI_RESET+0xfc>)
 80039c6:	f001 fe17 	bl	80055f8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_SET);
 80039ca:	2201      	movs	r2, #1
 80039cc:	2102      	movs	r1, #2
 80039ce:	480d      	ldr	r0, [pc, #52]	; (8003a04 <WIFI_RESET+0xec>)
 80039d0:	f001 fe12 	bl	80055f8 <HAL_GPIO_WritePin>

	 vTaskDelay(1000/portTICK_RATE_MS );
 80039d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039d8:	f004 fb5e 	bl	8008098 <vTaskDelay>
	 HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 80039dc:	2201      	movs	r2, #1
 80039de:	2120      	movs	r1, #32
 80039e0:	480d      	ldr	r0, [pc, #52]	; (8003a18 <WIFI_RESET+0x100>)
 80039e2:	f001 fe09 	bl	80055f8 <HAL_GPIO_WritePin>
   	 HAL_UART_DMAStop(&huart1);
 80039e6:	4809      	ldr	r0, [pc, #36]	; (8003a0c <WIFI_RESET+0xf4>)
 80039e8:	f002 fbc7 	bl	800617a <HAL_UART_DMAStop>
	 bprintf("XXXXX %s",buff_recv);
 80039ec:	4908      	ldr	r1, [pc, #32]	; (8003a10 <WIFI_RESET+0xf8>)
 80039ee:	480b      	ldr	r0, [pc, #44]	; (8003a1c <WIFI_RESET+0x104>)
 80039f0:	f7ff fa16 	bl	8002e20 <bprintf>
	 bprintf("XXXXX\r\n\n\n\n");
 80039f4:	480a      	ldr	r0, [pc, #40]	; (8003a20 <WIFI_RESET+0x108>)
 80039f6:	f7ff fa13 	bl	8002e20 <bprintf>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40020800 	.word	0x40020800
 8003a08:	000f423f 	.word	0x000f423f
 8003a0c:	20000a3c 	.word	0x20000a3c
 8003a10:	20000be8 	.word	0x20000be8
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	080105f0 	.word	0x080105f0
 8003a20:	080105fc 	.word	0x080105fc

08003a24 <WIFI_Boot>:


void WIFI_Boot(void)

{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
	unsigned int ct;

 	bprintf("Reseting...\r\n");
 8003a2a:	484a      	ldr	r0, [pc, #296]	; (8003b54 <WIFI_Boot+0x130>)
 8003a2c:	f7ff f9f8 	bl	8002e20 <bprintf>

 	WIFI_RESET();
 8003a30:	f7ff ff72 	bl	8003918 <WIFI_RESET>
 	bprintf("Init...\r\n");
 8003a34:	4848      	ldr	r0, [pc, #288]	; (8003b58 <WIFI_Boot+0x134>)
 8003a36:	f7ff f9f3 	bl	8002e20 <bprintf>

 	HAL_UART_Init(&huart1);
 8003a3a:	4848      	ldr	r0, [pc, #288]	; (8003b5c <WIFI_Boot+0x138>)
 8003a3c:	f002 fa8e 	bl	8005f5c <HAL_UART_Init>

 	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8003a40:	2200      	movs	r2, #0
 8003a42:	2101      	movs	r1, #1
 8003a44:	4846      	ldr	r0, [pc, #280]	; (8003b60 <WIFI_Boot+0x13c>)
 8003a46:	f001 fdd7 	bl	80055f8 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	4845      	ldr	r0, [pc, #276]	; (8003b64 <WIFI_Boot+0x140>)
 8003a50:	f001 fdd2 	bl	80055f8 <HAL_GPIO_WritePin>

 	// version
 	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e007      	b.n	8003a6a <WIFI_Boot+0x46>
 8003a5a:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <WIFI_Boot+0x144>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3301      	adds	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a70:	d3f3      	bcc.n	8003a5a <WIFI_Boot+0x36>
 	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a76:	493c      	ldr	r1, [pc, #240]	; (8003b68 <WIFI_Boot+0x144>)
 8003a78:	4838      	ldr	r0, [pc, #224]	; (8003b5c <WIFI_Boot+0x138>)
 8003a7a:	f002 fb4e 	bl	800611a <HAL_UART_Receive_DMA>
 	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT\r\n",strlen("AT\r\n"),10000);
 8003a7e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a82:	2204      	movs	r2, #4
 8003a84:	4939      	ldr	r1, [pc, #228]	; (8003b6c <WIFI_Boot+0x148>)
 8003a86:	4835      	ldr	r0, [pc, #212]	; (8003b5c <WIFI_Boot+0x138>)
 8003a88:	f002 fab5 	bl	8005ff6 <HAL_UART_Transmit>
 	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2101      	movs	r1, #1
 8003a90:	4833      	ldr	r0, [pc, #204]	; (8003b60 <WIFI_Boot+0x13c>)
 8003a92:	f001 fdb1 	bl	80055f8 <HAL_GPIO_WritePin>
	 vTaskDelay(100/portTICK_RATE_MS );
 8003a96:	2064      	movs	r0, #100	; 0x64
 8003a98:	f004 fafe 	bl	8008098 <vTaskDelay>
 	HAL_UART_DMAStop(&huart1);
 8003a9c:	482f      	ldr	r0, [pc, #188]	; (8003b5c <WIFI_Boot+0x138>)
 8003a9e:	f002 fb6c 	bl	800617a <HAL_UART_DMAStop>
 	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	482f      	ldr	r0, [pc, #188]	; (8003b64 <WIFI_Boot+0x140>)
 8003aa8:	f001 fda6 	bl	80055f8 <HAL_GPIO_WritePin>
	bprintf("1: %s",buff_recv);
 8003aac:	492e      	ldr	r1, [pc, #184]	; (8003b68 <WIFI_Boot+0x144>)
 8003aae:	4830      	ldr	r0, [pc, #192]	; (8003b70 <WIFI_Boot+0x14c>)
 8003ab0:	f7ff f9b6 	bl	8002e20 <bprintf>

	bprintf("2: %s",buff_recv);
*/

	// Pon en modo station=1,  station+access_point=3
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	e007      	b.n	8003aca <WIFI_Boot+0xa6>
 8003aba:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <WIFI_Boot+0x144>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad0:	d3f3      	bcc.n	8003aba <WIFI_Boot+0x96>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ad6:	4924      	ldr	r1, [pc, #144]	; (8003b68 <WIFI_Boot+0x144>)
 8003ad8:	4820      	ldr	r0, [pc, #128]	; (8003b5c <WIFI_Boot+0x138>)
 8003ada:	f002 fb1e 	bl	800611a <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 8003ade:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <WIFI_Boot+0x150>)
 8003ae0:	220d      	movs	r2, #13
 8003ae2:	4925      	ldr	r1, [pc, #148]	; (8003b78 <WIFI_Boot+0x154>)
 8003ae4:	481d      	ldr	r0, [pc, #116]	; (8003b5c <WIFI_Boot+0x138>)
 8003ae6:	f002 fa86 	bl	8005ff6 <HAL_UART_Transmit>
	 vTaskDelay(100/portTICK_RATE_MS );
 8003aea:	2064      	movs	r0, #100	; 0x64
 8003aec:	f004 fad4 	bl	8008098 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8003af0:	481a      	ldr	r0, [pc, #104]	; (8003b5c <WIFI_Boot+0x138>)
 8003af2:	f002 fb42 	bl	800617a <HAL_UART_DMAStop>
	bprintf("3: %s",buff_recv);
 8003af6:	491c      	ldr	r1, [pc, #112]	; (8003b68 <WIFI_Boot+0x144>)
 8003af8:	4820      	ldr	r0, [pc, #128]	; (8003b7c <WIFI_Boot+0x158>)
 8003afa:	f7ff f991 	bl	8002e20 <bprintf>

	// Programa la contraseña del access-point
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	e007      	b.n	8003b14 <WIFI_Boot+0xf0>
 8003b04:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <WIFI_Boot+0x144>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3301      	adds	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	d3f3      	bcc.n	8003b04 <WIFI_Boot+0xe0>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b20:	4911      	ldr	r1, [pc, #68]	; (8003b68 <WIFI_Boot+0x144>)
 8003b22:	480e      	ldr	r0, [pc, #56]	; (8003b5c <WIFI_Boot+0x138>)
 8003b24:	f002 faf9 	bl	800611a <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1,( unsigned char *) "AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n",strlen("AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n"),10000);
 8003b28:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	4914      	ldr	r1, [pc, #80]	; (8003b80 <WIFI_Boot+0x15c>)
 8003b30:	480a      	ldr	r0, [pc, #40]	; (8003b5c <WIFI_Boot+0x138>)
 8003b32:	f002 fa60 	bl	8005ff6 <HAL_UART_Transmit>
	vTaskDelay(5000/portTICK_RATE_MS );
 8003b36:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b3a:	f004 faad 	bl	8008098 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8003b3e:	4807      	ldr	r0, [pc, #28]	; (8003b5c <WIFI_Boot+0x138>)
 8003b40:	f002 fb1b 	bl	800617a <HAL_UART_DMAStop>
	bprintf("4: %s",buff_recv);
 8003b44:	4908      	ldr	r1, [pc, #32]	; (8003b68 <WIFI_Boot+0x144>)
 8003b46:	480f      	ldr	r0, [pc, #60]	; (8003b84 <WIFI_Boot+0x160>)
 8003b48:	f7ff f96a 	bl	8002e20 <bprintf>
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
	vTaskDelay(5000/portTICK_RATE_MS );
	HAL_UART_DMAStop(&huart1);
	bprintf("5: %s",buff_recv);*/

}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	08010608 	.word	0x08010608
 8003b58:	08010618 	.word	0x08010618
 8003b5c:	20000a3c 	.word	0x20000a3c
 8003b60:	40020400 	.word	0x40020400
 8003b64:	40020000 	.word	0x40020000
 8003b68:	20000be8 	.word	0x20000be8
 8003b6c:	08010624 	.word	0x08010624
 8003b70:	0801062c 	.word	0x0801062c
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	08010634 	.word	0x08010634
 8003b7c:	08010644 	.word	0x08010644
 8003b80:	0801064c 	.word	0x0801064c
 8003b84:	08010670 	.word	0x08010670

08003b88 <ESP_Send_Request>:

uint8_t * ESP_Send_Request(uint8_t * dst_address, uint32_t dst_port, uint8_t * request){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
    int ct;
	// abrir conexión con
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e007      	b.n	8003baa <ESP_Send_Request+0x22>
 8003b9a:	4a53      	ldr	r2, [pc, #332]	; (8003ce8 <ESP_Send_Request+0x160>)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb0:	dbf3      	blt.n	8003b9a <ESP_Send_Request+0x12>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb6:	494c      	ldr	r1, [pc, #304]	; (8003ce8 <ESP_Send_Request+0x160>)
 8003bb8:	484c      	ldr	r0, [pc, #304]	; (8003cec <ESP_Send_Request+0x164>)
 8003bba:	f002 faae 	bl	800611a <HAL_UART_Receive_DMA>
	sprintf(( char *)aux_buff_WIFI,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",dst_address,(int)dst_port);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	494b      	ldr	r1, [pc, #300]	; (8003cf0 <ESP_Send_Request+0x168>)
 8003bc4:	484b      	ldr	r0, [pc, #300]	; (8003cf4 <ESP_Send_Request+0x16c>)
 8003bc6:	f006 ffbb 	bl	800ab40 <sprintf>
	HAL_UART_Transmit(&huart1, ( unsigned char *) aux_buff_WIFI,strlen((const char *)aux_buff_WIFI),10000);
 8003bca:	484a      	ldr	r0, [pc, #296]	; (8003cf4 <ESP_Send_Request+0x16c>)
 8003bcc:	f7fc fb12 	bl	80001f4 <strlen>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003bd8:	4946      	ldr	r1, [pc, #280]	; (8003cf4 <ESP_Send_Request+0x16c>)
 8003bda:	4844      	ldr	r0, [pc, #272]	; (8003cec <ESP_Send_Request+0x164>)
 8003bdc:	f002 fa0b 	bl	8005ff6 <HAL_UART_Transmit>
	vTaskDelay(200/portTICK_RATE_MS );
 8003be0:	20c8      	movs	r0, #200	; 0xc8
 8003be2:	f004 fa59 	bl	8008098 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8003be6:	4841      	ldr	r0, [pc, #260]	; (8003cec <ESP_Send_Request+0x164>)
 8003be8:	f002 fac7 	bl	800617a <HAL_UART_DMAStop>
	//bprintf("6e: %s",buff_recv);

	// enviar una peticion HTTP

	int lc=strlen((const char *)request);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fc fb01 	bl	80001f4 <strlen>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	613b      	str	r3, [r7, #16]
	sprintf((char *)aux_buff_WIFI,"AT+CIPSEND=%d\r\n",lc);
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	493f      	ldr	r1, [pc, #252]	; (8003cf8 <ESP_Send_Request+0x170>)
 8003bfa:	483e      	ldr	r0, [pc, #248]	; (8003cf4 <ESP_Send_Request+0x16c>)
 8003bfc:	f006 ffa0 	bl	800ab40 <sprintf>
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e007      	b.n	8003c16 <ESP_Send_Request+0x8e>
 8003c06:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <ESP_Send_Request+0x160>)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c1c:	dbf3      	blt.n	8003c06 <ESP_Send_Request+0x7e>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c22:	4931      	ldr	r1, [pc, #196]	; (8003ce8 <ESP_Send_Request+0x160>)
 8003c24:	4831      	ldr	r0, [pc, #196]	; (8003cec <ESP_Send_Request+0x164>)
 8003c26:	f002 fa78 	bl	800611a <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1,( const uint8_t *)aux_buff_WIFI,strlen((const char *)aux_buff_WIFI),10000);
 8003c2a:	4832      	ldr	r0, [pc, #200]	; (8003cf4 <ESP_Send_Request+0x16c>)
 8003c2c:	f7fc fae2 	bl	80001f4 <strlen>
 8003c30:	4603      	mov	r3, r0
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c38:	492e      	ldr	r1, [pc, #184]	; (8003cf4 <ESP_Send_Request+0x16c>)
 8003c3a:	482c      	ldr	r0, [pc, #176]	; (8003cec <ESP_Send_Request+0x164>)
 8003c3c:	f002 f9db 	bl	8005ff6 <HAL_UART_Transmit>
	vTaskDelay(200/portTICK_RATE_MS );
 8003c40:	20c8      	movs	r0, #200	; 0xc8
 8003c42:	f004 fa29 	bl	8008098 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8003c46:	4829      	ldr	r0, [pc, #164]	; (8003cec <ESP_Send_Request+0x164>)
 8003c48:	f002 fa97 	bl	800617a <HAL_UART_DMAStop>
	//printf("7: %s",buff_recv);

	// ahora HTTP

	for (ct=0;ct<2048;ct++) buff_WIFI_response[ct]=0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e007      	b.n	8003c62 <ESP_Send_Request+0xda>
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <ESP_Send_Request+0x174>)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	dbf3      	blt.n	8003c52 <ESP_Send_Request+0xca>
	HAL_UART_Receive_DMA(&huart1, buff_WIFI_response,2048);
 8003c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c6e:	4923      	ldr	r1, [pc, #140]	; (8003cfc <ESP_Send_Request+0x174>)
 8003c70:	481e      	ldr	r0, [pc, #120]	; (8003cec <ESP_Send_Request+0x164>)
 8003c72:	f002 fa52 	bl	800611a <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, request,strlen( (const char *)request),10000);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc fabc 	bl	80001f4 <strlen>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4819      	ldr	r0, [pc, #100]	; (8003cec <ESP_Send_Request+0x164>)
 8003c88:	f002 f9b5 	bl	8005ff6 <HAL_UART_Transmit>
	vTaskDelay(2000/portTICK_RATE_MS );
 8003c8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c90:	f004 fa02 	bl	8008098 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8003c94:	4815      	ldr	r0, [pc, #84]	; (8003cec <ESP_Send_Request+0x164>)
 8003c96:	f002 fa70 	bl	800617a <HAL_UART_DMAStop>
	//printf("8: %s",buff_WIFI_response);


	// cerrar conexión

	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e007      	b.n	8003cb0 <ESP_Send_Request+0x128>
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <ESP_Send_Request+0x160>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb6:	dbf3      	blt.n	8003ca0 <ESP_Send_Request+0x118>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8003cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cbc:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <ESP_Send_Request+0x160>)
 8003cbe:	480b      	ldr	r0, [pc, #44]	; (8003cec <ESP_Send_Request+0x164>)
 8003cc0:	f002 fa2b 	bl	800611a <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CIPCLOSE\r\n",strlen("AT+CIPCLOSE\r\n"),10000);
 8003cc4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cc8:	220d      	movs	r2, #13
 8003cca:	490d      	ldr	r1, [pc, #52]	; (8003d00 <ESP_Send_Request+0x178>)
 8003ccc:	4807      	ldr	r0, [pc, #28]	; (8003cec <ESP_Send_Request+0x164>)
 8003cce:	f002 f992 	bl	8005ff6 <HAL_UART_Transmit>
	vTaskDelay(200/portTICK_RATE_MS );
 8003cd2:	20c8      	movs	r0, #200	; 0xc8
 8003cd4:	f004 f9e0 	bl	8008098 <vTaskDelay>
	HAL_UART_DMAStop(&huart1);
 8003cd8:	4804      	ldr	r0, [pc, #16]	; (8003cec <ESP_Send_Request+0x164>)
 8003cda:	f002 fa4e 	bl	800617a <HAL_UART_DMAStop>
	//bprintf("6: %s",buff_recv);


	return buff_WIFI_response;
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <ESP_Send_Request+0x174>)
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000be8 	.word	0x20000be8
 8003cec:	20000a3c 	.word	0x20000a3c
 8003cf0:	08010678 	.word	0x08010678
 8003cf4:	20001c64 	.word	0x20001c64
 8003cf8:	08010694 	.word	0x08010694
 8003cfc:	20002464 	.word	0x20002464
 8003d00:	080106a4 	.word	0x080106a4

08003d04 <BUFF_is_empty>:
#include <stdlib.h>


/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d119      	bne.n	8003d9a <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a12      	ldr	r2, [r2, #32]
 8003d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d82:	fb01 f202 	mul.w	r2, r1, r2
 8003d86:	1a9a      	subs	r2, r3, r2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <BUFF_inserta+0x50>
	} else return 0;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11a      	bne.n	8003df2 <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6a12      	ldr	r2, [r2, #32]
 8003dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dda:	fb01 f202 	mul.w	r2, r1, r2
 8003dde:	1a9a      	subs	r2, r3, r2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	1e5a      	subs	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <BUFF_extrae+0x50>
	} else return 0;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003e0a:	bf00      	nop
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fcc9 	bl	80077ac <xQueueSemaphoreTake>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d1f5      	bne.n	8003e0c <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 8003e20:	e017      	b.n	8003e52 <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6958      	ldr	r0, [r3, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f003 fa44 	bl	80072b8 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003e30:	2064      	movs	r0, #100	; 0x64
 8003e32:	f004 f931 	bl	8008098 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003e36:	bf00      	nop
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fcb3 	bl	80077ac <xQueueSemaphoreTake>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d1f5      	bne.n	8003e38 <BUFF_extrae_prot+0x3c>
	 		 it++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ffa5 	bl	8003da4 <BUFF_extrae>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0e0      	beq.n	8003e22 <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6958      	ldr	r0, [r3, #20]
 8003e64:	2300      	movs	r3, #0
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	f003 fa25 	bl	80072b8 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003e6e:	2301      	movs	r3, #1
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003e88:	bf00      	nop
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 fc8a 	bl	80077ac <xQueueSemaphoreTake>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d1f5      	bne.n	8003e8a <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 8003e9e:	e017      	b.n	8003ed0 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6958      	ldr	r0, [r3, #20]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f003 fa05 	bl	80072b8 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003eae:	2064      	movs	r0, #100	; 0x64
 8003eb0:	f004 f8f2 	bl	8008098 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003eb4:	bf00      	nop
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f003 fc74 	bl	80077ac <xQueueSemaphoreTake>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d1f5      	bne.n	8003eb6 <BUFF_inserta_prot+0x3e>
	 		 it++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff39 	bl	8003d4c <BUFF_inserta>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0df      	beq.n	8003ea0 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6958      	ldr	r0, [r3, #20]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	f003 f9e5 	bl	80072b8 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003eee:	2301      	movs	r3, #1
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e010      	b.n	8003f2c <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff ffaf 	bl	8003e78 <BUFF_inserta_prot>
 8003f1a:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <BUFF_inserta_cad+0x2e>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e007      	b.n	8003f36 <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d8ea      	bhi.n	8003f0a <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 8003f34:	2301      	movs	r3, #1
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 8003f48:	202c      	movs	r0, #44	; 0x2c
 8003f4a:	f006 f92f 	bl	800a1ac <malloc>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03d      	beq.n	8003fd4 <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f006 f926 	bl	800a1ac <malloc>
 8003f60:	4603      	mov	r3, r0
 8003f62:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d031      	beq.n	8003fce <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	f003 f98b 	bl	8007286 <xQueueCreateMutex>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <bufferCreat+0x4e>
				free(bff);
 8003f7e:	68b8      	ldr	r0, [r7, #8]
 8003f80:	f006 f91c 	bl	800a1bc <free>
				free(tmp);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f006 f919 	bl	800a1bc <free>
				return NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e023      	b.n	8003fd6 <bufferCreat+0x96>
			};
            tmp->buff=bff;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <bufferCreat+0xa0>)
 8003fb0:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <bufferCreat+0xa4>)
 8003fb6:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <bufferCreat+0xa8>)
 8003fbc:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <bufferCreat+0xac>)
 8003fc2:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <bufferCreat+0xb0>)
 8003fc8:	609a      	str	r2, [r3, #8]
			return tmp;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	e003      	b.n	8003fd6 <bufferCreat+0x96>
		}
		else
			free(tmp);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f006 f8f4 	bl	800a1bc <free>
	}
	return NULL;
 8003fd4:	2300      	movs	r3, #0

}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	08003dfd 	.word	0x08003dfd
 8003fe4:	08003e79 	.word	0x08003e79
 8003fe8:	08003ef9 	.word	0x08003ef9
 8003fec:	08003d27 	.word	0x08003d27
 8003ff0:	08003d05 	.word	0x08003d05

08003ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800402c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ff8:	480d      	ldr	r0, [pc, #52]	; (8004030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ffa:	490e      	ldr	r1, [pc, #56]	; (8004034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ffc:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004000:	e002      	b.n	8004008 <LoopCopyDataInit>

08004002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004006:	3304      	adds	r3, #4

08004008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800400a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800400c:	d3f9      	bcc.n	8004002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400e:	4a0b      	ldr	r2, [pc, #44]	; (800403c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004010:	4c0b      	ldr	r4, [pc, #44]	; (8004040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004014:	e001      	b.n	800401a <LoopFillZerobss>

08004016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004018:	3204      	adds	r2, #4

0800401a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800401a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800401c:	d3fb      	bcc.n	8004016 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800401e:	f7fe fd51 	bl	8002ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004022:	f006 f89b 	bl	800a15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004026:	f7fe f88f 	bl	8002148 <main>
  bx  lr    
 800402a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800402c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004034:	200009cc 	.word	0x200009cc
  ldr r2, =_sidata
 8004038:	08010b5c 	.word	0x08010b5c
  ldr r2, =_sbss
 800403c:	200009d0 	.word	0x200009d0
  ldr r4, =_ebss
 8004040:	20017ad0 	.word	0x20017ad0

08004044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004044:	e7fe      	b.n	8004044 <ADC_IRQHandler>
	...

08004048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <HAL_Init+0x40>)
 8004052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_Init+0x40>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <HAL_Init+0x40>)
 800405e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_Init+0x40>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_Init+0x40>)
 800406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004070:	2003      	movs	r0, #3
 8004072:	f000 fcff 	bl	8004a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004076:	200f      	movs	r0, #15
 8004078:	f000 f808 	bl	800408c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800407c:	f7fe fa96 	bl	80025ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023c00 	.word	0x40023c00

0800408c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_InitTick+0x54>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_InitTick+0x58>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd1b 	bl	8004ae6 <HAL_SYSTICK_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e00e      	b.n	80040d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d80a      	bhi.n	80040d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c0:	2200      	movs	r2, #0
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	f000 fcdf 	bl	8004a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040cc:	4a06      	ldr	r2, [pc, #24]	; (80040e8 <HAL_InitTick+0x5c>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2000000c 	.word	0x2000000c
 80040e4:	20000014 	.word	0x20000014
 80040e8:	20000010 	.word	0x20000010

080040ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_IncTick+0x20>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_IncTick+0x24>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4413      	add	r3, r2
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_IncTick+0x24>)
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000014 	.word	0x20000014
 8004110:	20002c64 	.word	0x20002c64

08004114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return uwTick;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_GetTick+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20002c64 	.word	0x20002c64

0800412c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e033      	b.n	80041aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fe fa5a 	bl	8002604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004172:	f023 0302 	bic.w	r3, r3, #2
 8004176:	f043 0202 	orr.w	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa96 	bl	80046b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
 800419a:	e001      	b.n	80041a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_Start+0x1a>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e097      	b.n	80042fe <HAL_ADC_Start+0x14a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d018      	beq.n	8004216 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <HAL_ADC_Start+0x158>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a45      	ldr	r2, [pc, #276]	; (8004310 <HAL_ADC_Start+0x15c>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0c9a      	lsrs	r2, r3, #18
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004208:	e002      	b.n	8004210 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3b01      	subs	r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f9      	bne.n	800420a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d15f      	bne.n	80042e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800424e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	d106      	bne.n	8004272 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	f023 0206 	bic.w	r2, r3, #6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
 8004270:	e002      	b.n	8004278 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_ADC_Start+0x160>)
 8004282:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800428c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d129      	bne.n	80042fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	e020      	b.n	80042fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_ADC_Start+0x164>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d11b      	bne.n	80042fc <HAL_ADC_Start+0x148>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d114      	bne.n	80042fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	e00b      	b.n	80042fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0210 	orr.w	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c
 8004310:	431bde83 	.word	0x431bde83
 8004314:	40012300 	.word	0x40012300
 8004318:	40012000 	.word	0x40012000

0800431c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d113      	bne.n	8004362 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d10b      	bne.n	8004362 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e063      	b.n	800442a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004362:	f7ff fed7 	bl	8004114 <HAL_GetTick>
 8004366:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004368:	e021      	b.n	80043ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d01d      	beq.n	80043ae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_ADC_PollForConversion+0x6c>
 8004378:	f7ff fecc 	bl	8004114 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d212      	bcs.n	80043ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d00b      	beq.n	80043ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e03d      	b.n	800442a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d1d6      	bne.n	800436a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0212 	mvn.w	r2, #18
 80043c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d123      	bne.n	8004428 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11f      	bne.n	8004428 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0201 	orr.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x1c>
 8004464:	2302      	movs	r3, #2
 8004466:	e113      	b.n	8004690 <HAL_ADC_ConfigChannel+0x244>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b09      	cmp	r3, #9
 8004476:	d925      	bls.n	80044c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68d9      	ldr	r1, [r3, #12]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	3b1e      	subs	r3, #30
 800448e:	2207      	movs	r2, #7
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43da      	mvns	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	400a      	ands	r2, r1
 800449c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68d9      	ldr	r1, [r3, #12]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	4618      	mov	r0, r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4403      	add	r3, r0
 80044b6:	3b1e      	subs	r3, #30
 80044b8:	409a      	lsls	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e022      	b.n	800450a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	2207      	movs	r2, #7
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	400a      	ands	r2, r1
 80044e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4403      	add	r3, r0
 8004500:	409a      	lsls	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b06      	cmp	r3, #6
 8004510:	d824      	bhi.n	800455c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	3b05      	subs	r3, #5
 8004524:	221f      	movs	r2, #31
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43da      	mvns	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	400a      	ands	r2, r1
 8004532:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	4618      	mov	r0, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	3b05      	subs	r3, #5
 800454e:	fa00 f203 	lsl.w	r2, r0, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	635a      	str	r2, [r3, #52]	; 0x34
 800455a:	e04c      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d824      	bhi.n	80045ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	3b23      	subs	r3, #35	; 0x23
 8004576:	221f      	movs	r2, #31
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43da      	mvns	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	400a      	ands	r2, r1
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	4618      	mov	r0, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	3b23      	subs	r3, #35	; 0x23
 80045a0:	fa00 f203 	lsl.w	r2, r0, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
 80045ac:	e023      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	3b41      	subs	r3, #65	; 0x41
 80045c0:	221f      	movs	r2, #31
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	400a      	ands	r2, r1
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4618      	mov	r0, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	3b41      	subs	r3, #65	; 0x41
 80045ea:	fa00 f203 	lsl.w	r2, r0, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_ADC_ConfigChannel+0x250>)
 80045f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <HAL_ADC_ConfigChannel+0x254>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d10f      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x1d8>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b12      	cmp	r3, #18
 800460a:	d10b      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_ADC_ConfigChannel+0x254>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d12b      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x23a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_ADC_ConfigChannel+0x258>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <HAL_ADC_ConfigChannel+0x1f4>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b11      	cmp	r3, #17
 800463e:	d122      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <HAL_ADC_ConfigChannel+0x258>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d111      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_ADC_ConfigChannel+0x25c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <HAL_ADC_ConfigChannel+0x260>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	0c9a      	lsrs	r2, r3, #18
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004678:	e002      	b.n	8004680 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3b01      	subs	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f9      	bne.n	800467a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40012300 	.word	0x40012300
 80046a0:	40012000 	.word	0x40012000
 80046a4:	10000012 	.word	0x10000012
 80046a8:	2000000c 	.word	0x2000000c
 80046ac:	431bde83 	.word	0x431bde83

080046b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046b8:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <ADC_Init+0x1f0>)
 80046ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	4a58      	ldr	r2, [pc, #352]	; (80048a4 <ADC_Init+0x1f4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6899      	ldr	r1, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	e00f      	b.n	80047ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800479c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0202 	bic.w	r2, r2, #2
 80047bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6899      	ldr	r1, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	7e1b      	ldrb	r3, [r3, #24]
 80047c8:	005a      	lsls	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	3b01      	subs	r3, #1
 8004808:	035a      	lsls	r2, r3, #13
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	e007      	b.n	8004824 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004822:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	3b01      	subs	r3, #1
 8004840:	051a      	lsls	r2, r3, #20
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004866:	025a      	lsls	r2, r3, #9
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6899      	ldr	r1, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	029a      	lsls	r2, r3, #10
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40012300 	.word	0x40012300
 80048a4:	0f000001 	.word	0x0f000001

080048a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048da:	4a04      	ldr	r2, [pc, #16]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	60d3      	str	r3, [r2, #12]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <__NVIC_GetPriorityGrouping+0x18>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0a1b      	lsrs	r3, r3, #8
 80048fa:	f003 0307 	and.w	r3, r3, #7
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db0b      	blt.n	8004936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <__NVIC_EnableIRQ+0x38>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2001      	movs	r0, #1
 800492e:	fa00 f202 	lsl.w	r2, r0, r2
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000e100 	.word	0xe000e100

08004948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004958:	2b00      	cmp	r3, #0
 800495a:	db0a      	blt.n	8004972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	490c      	ldr	r1, [pc, #48]	; (8004994 <__NVIC_SetPriority+0x4c>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	440b      	add	r3, r1
 800496c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004970:	e00a      	b.n	8004988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <__NVIC_SetPriority+0x50>)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	3b04      	subs	r3, #4
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	440b      	add	r3, r1
 8004986:	761a      	strb	r2, [r3, #24]
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000e100 	.word	0xe000e100
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f1c3 0307 	rsb	r3, r3, #7
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	bf28      	it	cs
 80049ba:	2304      	movcs	r3, #4
 80049bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d902      	bls.n	80049cc <NVIC_EncodePriority+0x30>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3b03      	subs	r3, #3
 80049ca:	e000      	b.n	80049ce <NVIC_EncodePriority+0x32>
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	401a      	ands	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	43d9      	mvns	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	4313      	orrs	r3, r2
         );
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a08:	f3bf 8f4f 	dsb	sy
}
 8004a0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <__NVIC_SystemReset+0x24>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a16:	4904      	ldr	r1, [pc, #16]	; (8004a28 <__NVIC_SystemReset+0x24>)
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <__NVIC_SystemReset+0x28>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a1e:	f3bf 8f4f 	dsb	sy
}
 8004a22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <__NVIC_SystemReset+0x20>
 8004a28:	e000ed00 	.word	0xe000ed00
 8004a2c:	05fa0004 	.word	0x05fa0004

08004a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a40:	d301      	bcc.n	8004a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00f      	b.n	8004a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <SysTick_Config+0x40>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4e:	210f      	movs	r1, #15
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	f7ff ff78 	bl	8004948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <SysTick_Config+0x40>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <SysTick_Config+0x40>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010

08004a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff13 	bl	80048a8 <__NVIC_SetPriorityGrouping>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9c:	f7ff ff28 	bl	80048f0 <__NVIC_GetPriorityGrouping>
 8004aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff78 	bl	800499c <NVIC_EncodePriority>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff47 	bl	8004948 <__NVIC_SetPriority>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff1b 	bl	800490c <__NVIC_EnableIRQ>
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004ae2:	f7ff ff8f 	bl	8004a04 <__NVIC_SystemReset>

08004ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff ff9e 	bl	8004a30 <SysTick_Config>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b0c:	f7ff fb02 	bl	8004114 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e099      	b.n	8004c50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b3c:	e00f      	b.n	8004b5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b3e:	f7ff fae9 	bl	8004114 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	d908      	bls.n	8004b5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2203      	movs	r2, #3
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e078      	b.n	8004c50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e8      	bne.n	8004b3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <HAL_DMA_Init+0x158>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d107      	bne.n	8004bc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d117      	bne.n	8004c22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fadf 	bl	80051c8 <DMA_CheckFifoParam>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2240      	movs	r2, #64	; 0x40
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e016      	b.n	8004c50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa96 	bl	800515c <DMA_CalcBaseAndBitshift>
 8004c30:	4603      	mov	r3, r0
 8004c32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	223f      	movs	r2, #63	; 0x3f
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	f010803f 	.word	0xf010803f

08004c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_DMA_Start_IT+0x26>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e040      	b.n	8004d04 <HAL_DMA_Start_IT+0xa8>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d12f      	bne.n	8004cf6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fa28 	bl	8005100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	223f      	movs	r2, #63	; 0x3f
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0216 	orr.w	r2, r2, #22
 8004cca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0208 	orr.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e005      	b.n	8004d02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d1a:	f7ff f9fb 	bl	8004114 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d008      	beq.n	8004d3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e052      	b.n	8004de4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0216 	bic.w	r2, r2, #22
 8004d4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_DMA_Abort+0x62>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0208 	bic.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8e:	e013      	b.n	8004db8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d90:	f7ff f9c0 	bl	8004114 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d90c      	bls.n	8004db8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2203      	movs	r2, #3
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e015      	b.n	8004de4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e4      	bne.n	8004d90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dca:	223f      	movs	r2, #63	; 0x3f
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004df8:	4b8e      	ldr	r3, [pc, #568]	; (8005034 <HAL_DMA_IRQHandler+0x248>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a8e      	ldr	r2, [pc, #568]	; (8005038 <HAL_DMA_IRQHandler+0x24c>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	2208      	movs	r2, #8
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01a      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	2208      	movs	r2, #8
 8004e46:	409a      	lsls	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	2204      	movs	r2, #4
 8004e94:	409a      	lsls	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2210      	movs	r2, #16
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d043      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03c      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d018      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d024      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	e01f      	b.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01b      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
 8004f2c:	e016      	b.n	8004f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0208 	bic.w	r2, r2, #8
 8004f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	2220      	movs	r2, #32
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 808f 	beq.w	800508c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8087 	beq.w	800508c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	2220      	movs	r2, #32
 8004f84:	409a      	lsls	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d136      	bne.n	8005004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0216 	bic.w	r2, r2, #22
 8004fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x1da>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0208 	bic.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	223f      	movs	r2, #63	; 0x3f
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d07e      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
        }
        return;
 8005002:	e079      	b.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01d      	beq.n	800504e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	2b00      	cmp	r3, #0
 8005026:	d031      	beq.n	800508c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
 8005030:	e02c      	b.n	800508c <HAL_DMA_IRQHandler+0x2a0>
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
 8005038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d023      	beq.n	800508c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
 800504c:	e01e      	b.n	800508c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0210 	bic.w	r2, r2, #16
 800506a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005090:	2b00      	cmp	r3, #0
 8005092:	d032      	beq.n	80050fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2205      	movs	r2, #5
 80050a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d307      	bcc.n	80050d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f2      	bne.n	80050b8 <HAL_DMA_IRQHandler+0x2cc>
 80050d2:	e000      	b.n	80050d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
 80050f6:	e000      	b.n	80050fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80050f8:	bf00      	nop
    }
  }
}
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800511c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d108      	bne.n	8005140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800513e:	e007      	b.n	8005150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	3b10      	subs	r3, #16
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <DMA_CalcBaseAndBitshift+0x64>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005176:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <DMA_CalcBaseAndBitshift+0x68>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b03      	cmp	r3, #3
 8005188:	d909      	bls.n	800519e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	659a      	str	r2, [r3, #88]	; 0x58
 800519c:	e007      	b.n	80051ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	aaaaaaab 	.word	0xaaaaaaab
 80051c4:	080106e4 	.word	0x080106e4

080051c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11f      	bne.n	8005222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d856      	bhi.n	8005296 <DMA_CheckFifoParam+0xce>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <DMA_CheckFifoParam+0x28>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005201 	.word	0x08005201
 80051f4:	08005213 	.word	0x08005213
 80051f8:	08005201 	.word	0x08005201
 80051fc:	08005297 	.word	0x08005297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d046      	beq.n	800529a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005210:	e043      	b.n	800529a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800521a:	d140      	bne.n	800529e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005220:	e03d      	b.n	800529e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522a:	d121      	bne.n	8005270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d837      	bhi.n	80052a2 <DMA_CheckFifoParam+0xda>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <DMA_CheckFifoParam+0x70>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	08005249 	.word	0x08005249
 800523c:	0800524f 	.word	0x0800524f
 8005240:	08005249 	.word	0x08005249
 8005244:	08005261 	.word	0x08005261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
      break;
 800524c:	e030      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d025      	beq.n	80052a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525e:	e022      	b.n	80052a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005268:	d11f      	bne.n	80052aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800526e:	e01c      	b.n	80052aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d903      	bls.n	800527e <DMA_CheckFifoParam+0xb6>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d003      	beq.n	8005284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800527c:	e018      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
      break;
 8005282:	e015      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e00b      	b.n	80052ae <DMA_CheckFifoParam+0xe6>
      break;
 8005296:	bf00      	nop
 8005298:	e00a      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      break;
 800529a:	bf00      	nop
 800529c:	e008      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      break;
 800529e:	bf00      	nop
 80052a0:	e006      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      break;
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      break;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
      break;
 80052ae:	bf00      	nop
    }
  } 
  
  return status; 
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop

080052c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e159      	b.n	8005590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052dc:	2201      	movs	r2, #1
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	f040 8148 	bne.w	800558a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d005      	beq.n	8005312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800530e:	2b02      	cmp	r3, #2
 8005310:	d130      	bne.n	8005374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2203      	movs	r2, #3
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005348:	2201      	movs	r2, #1
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 0201 	and.w	r2, r3, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d017      	beq.n	80053b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	2203      	movs	r2, #3
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d123      	bne.n	8005404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	08da      	lsrs	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3208      	adds	r2, #8
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	220f      	movs	r2, #15
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	08da      	lsrs	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3208      	adds	r2, #8
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	2203      	movs	r2, #3
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0203 	and.w	r2, r3, #3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80a2 	beq.w	800558a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	4b57      	ldr	r3, [pc, #348]	; (80055a8 <HAL_GPIO_Init+0x2e8>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	4a56      	ldr	r2, [pc, #344]	; (80055a8 <HAL_GPIO_Init+0x2e8>)
 8005450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005454:	6453      	str	r3, [r2, #68]	; 0x44
 8005456:	4b54      	ldr	r3, [pc, #336]	; (80055a8 <HAL_GPIO_Init+0x2e8>)
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005462:	4a52      	ldr	r2, [pc, #328]	; (80055ac <HAL_GPIO_Init+0x2ec>)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	3302      	adds	r3, #2
 800546a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	220f      	movs	r2, #15
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a49      	ldr	r2, [pc, #292]	; (80055b0 <HAL_GPIO_Init+0x2f0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d019      	beq.n	80054c2 <HAL_GPIO_Init+0x202>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a48      	ldr	r2, [pc, #288]	; (80055b4 <HAL_GPIO_Init+0x2f4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_GPIO_Init+0x1fe>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a47      	ldr	r2, [pc, #284]	; (80055b8 <HAL_GPIO_Init+0x2f8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00d      	beq.n	80054ba <HAL_GPIO_Init+0x1fa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a46      	ldr	r2, [pc, #280]	; (80055bc <HAL_GPIO_Init+0x2fc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <HAL_GPIO_Init+0x1f6>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a45      	ldr	r2, [pc, #276]	; (80055c0 <HAL_GPIO_Init+0x300>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <HAL_GPIO_Init+0x1f2>
 80054ae:	2304      	movs	r3, #4
 80054b0:	e008      	b.n	80054c4 <HAL_GPIO_Init+0x204>
 80054b2:	2307      	movs	r3, #7
 80054b4:	e006      	b.n	80054c4 <HAL_GPIO_Init+0x204>
 80054b6:	2303      	movs	r3, #3
 80054b8:	e004      	b.n	80054c4 <HAL_GPIO_Init+0x204>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e002      	b.n	80054c4 <HAL_GPIO_Init+0x204>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_GPIO_Init+0x204>
 80054c2:	2300      	movs	r3, #0
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	f002 0203 	and.w	r2, r2, #3
 80054ca:	0092      	lsls	r2, r2, #2
 80054cc:	4093      	lsls	r3, r2
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054d4:	4935      	ldr	r1, [pc, #212]	; (80055ac <HAL_GPIO_Init+0x2ec>)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	3302      	adds	r3, #2
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054e2:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <HAL_GPIO_Init+0x304>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4013      	ands	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005506:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <HAL_GPIO_Init+0x304>)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <HAL_GPIO_Init+0x304>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005530:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <HAL_GPIO_Init+0x304>)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005536:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <HAL_GPIO_Init+0x304>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800555a:	4a1a      	ldr	r2, [pc, #104]	; (80055c4 <HAL_GPIO_Init+0x304>)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005560:	4b18      	ldr	r3, [pc, #96]	; (80055c4 <HAL_GPIO_Init+0x304>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005584:	4a0f      	ldr	r2, [pc, #60]	; (80055c4 <HAL_GPIO_Init+0x304>)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	f67f aea2 	bls.w	80052dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3724      	adds	r7, #36	; 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40013800 	.word	0x40013800
 80055b0:	40020000 	.word	0x40020000
 80055b4:	40020400 	.word	0x40020400
 80055b8:	40020800 	.word	0x40020800
 80055bc:	40020c00 	.word	0x40020c00
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40013c00 	.word	0x40013c00

080055c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	887b      	ldrh	r3, [r7, #2]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e001      	b.n	80055ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
 8005604:	4613      	mov	r3, r2
 8005606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005608:	787b      	ldrb	r3, [r7, #1]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005614:	e003      	b.n	800561e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005616:	887b      	ldrh	r3, [r7, #2]
 8005618:	041a      	lsls	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e267      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d075      	beq.n	8005736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800564a:	4b88      	ldr	r3, [pc, #544]	; (800586c <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b04      	cmp	r3, #4
 8005654:	d00c      	beq.n	8005670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005656:	4b85      	ldr	r3, [pc, #532]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800565e:	2b08      	cmp	r3, #8
 8005660:	d112      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005662:	4b82      	ldr	r3, [pc, #520]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566e:	d10b      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	4b7e      	ldr	r3, [pc, #504]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d05b      	beq.n	8005734 <HAL_RCC_OscConfig+0x108>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d157      	bne.n	8005734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e242      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d106      	bne.n	80056a0 <HAL_RCC_OscConfig+0x74>
 8005692:	4b76      	ldr	r3, [pc, #472]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e01d      	b.n	80056dc <HAL_RCC_OscConfig+0xb0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x98>
 80056aa:	4b70      	ldr	r3, [pc, #448]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6f      	ldr	r2, [pc, #444]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b6d      	ldr	r3, [pc, #436]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a6c      	ldr	r2, [pc, #432]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e00b      	b.n	80056dc <HAL_RCC_OscConfig+0xb0>
 80056c4:	4b69      	ldr	r3, [pc, #420]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a68      	ldr	r2, [pc, #416]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b66      	ldr	r3, [pc, #408]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a65      	ldr	r2, [pc, #404]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80056d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fe fd16 	bl	8004114 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ec:	f7fe fd12 	bl	8004114 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	; 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e207      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	4b5b      	ldr	r3, [pc, #364]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0xc0>
 800570a:	e014      	b.n	8005736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fe fd02 	bl	8004114 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005714:	f7fe fcfe 	bl	8004114 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	; 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e1f3      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	4b51      	ldr	r3, [pc, #324]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0xe8>
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d063      	beq.n	800580a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005742:	4b4a      	ldr	r3, [pc, #296]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005756:	2b08      	cmp	r3, #8
 8005758:	d11c      	bne.n	8005794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575a:	4b44      	ldr	r3, [pc, #272]	; (800586c <HAL_RCC_OscConfig+0x240>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005766:	4b41      	ldr	r3, [pc, #260]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCC_OscConfig+0x152>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e1c7      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b3b      	ldr	r3, [pc, #236]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4937      	ldr	r1, [pc, #220]	; (800586c <HAL_RCC_OscConfig+0x240>)
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005792:	e03a      	b.n	800580a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800579c:	4b34      	ldr	r3, [pc, #208]	; (8005870 <HAL_RCC_OscConfig+0x244>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fe fcb7 	bl	8004114 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057aa:	f7fe fcb3 	bl	8004114 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1a8      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	4b2b      	ldr	r3, [pc, #172]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c8:	4b28      	ldr	r3, [pc, #160]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4925      	ldr	r1, [pc, #148]	; (800586c <HAL_RCC_OscConfig+0x240>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	e015      	b.n	800580a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057de:	4b24      	ldr	r3, [pc, #144]	; (8005870 <HAL_RCC_OscConfig+0x244>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fe fc96 	bl	8004114 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fe fc92 	bl	8004114 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e187      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	4b1b      	ldr	r3, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d036      	beq.n	8005884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581e:	4b15      	ldr	r3, [pc, #84]	; (8005874 <HAL_RCC_OscConfig+0x248>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fe fc76 	bl	8004114 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800582c:	f7fe fc72 	bl	8004114 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e167      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <HAL_RCC_OscConfig+0x240>)
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x200>
 800584a:	e01b      	b.n	8005884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800584c:	4b09      	ldr	r3, [pc, #36]	; (8005874 <HAL_RCC_OscConfig+0x248>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005852:	f7fe fc5f 	bl	8004114 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005858:	e00e      	b.n	8005878 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585a:	f7fe fc5b 	bl	8004114 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d907      	bls.n	8005878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e150      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 800586c:	40023800 	.word	0x40023800
 8005870:	42470000 	.word	0x42470000
 8005874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005878:	4b88      	ldr	r3, [pc, #544]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800587a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ea      	bne.n	800585a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8097 	beq.w	80059c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005896:	4b81      	ldr	r3, [pc, #516]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10f      	bne.n	80058c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	4b7d      	ldr	r3, [pc, #500]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4a7c      	ldr	r2, [pc, #496]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	; 0x40
 80058b2:	4b7a      	ldr	r3, [pc, #488]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c2:	4b77      	ldr	r3, [pc, #476]	; (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d118      	bne.n	8005900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ce:	4b74      	ldr	r3, [pc, #464]	; (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a73      	ldr	r2, [pc, #460]	; (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058da:	f7fe fc1b 	bl	8004114 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e2:	f7fe fc17 	bl	8004114 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e10c      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	4b6a      	ldr	r3, [pc, #424]	; (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HAL_RCC_OscConfig+0x2ea>
 8005908:	4b64      	ldr	r3, [pc, #400]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a63      	ldr	r2, [pc, #396]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e01c      	b.n	8005950 <HAL_RCC_OscConfig+0x324>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b05      	cmp	r3, #5
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x30c>
 800591e:	4b5f      	ldr	r3, [pc, #380]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a5e      	ldr	r2, [pc, #376]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	4b5c      	ldr	r3, [pc, #368]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	4a5b      	ldr	r2, [pc, #364]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
 8005936:	e00b      	b.n	8005950 <HAL_RCC_OscConfig+0x324>
 8005938:	4b58      	ldr	r3, [pc, #352]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	4a57      	ldr	r2, [pc, #348]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6713      	str	r3, [r2, #112]	; 0x70
 8005944:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	4a54      	ldr	r2, [pc, #336]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 800594a:	f023 0304 	bic.w	r3, r3, #4
 800594e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d015      	beq.n	8005984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005958:	f7fe fbdc 	bl	8004114 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595e:	e00a      	b.n	8005976 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fe fbd8 	bl	8004114 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	; 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0cb      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005976:	4b49      	ldr	r3, [pc, #292]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ee      	beq.n	8005960 <HAL_RCC_OscConfig+0x334>
 8005982:	e014      	b.n	80059ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005984:	f7fe fbc6 	bl	8004114 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fe fbc2 	bl	8004114 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0b5      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a2:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ee      	bne.n	800598c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d105      	bne.n	80059c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b4:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a1 	beq.w	8005b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ca:	4b34      	ldr	r3, [pc, #208]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d05c      	beq.n	8005a90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d141      	bne.n	8005a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <HAL_RCC_OscConfig+0x478>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fe fb96 	bl	8004114 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fe fb92 	bl	8004114 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e087      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fe:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	019b      	lsls	r3, r3, #6
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	3b01      	subs	r3, #1
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	491b      	ldr	r1, [pc, #108]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <HAL_RCC_OscConfig+0x478>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fe fb6b 	bl	8004114 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fe fb67 	bl	8004114 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e05c      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0x416>
 8005a60:	e054      	b.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <HAL_RCC_OscConfig+0x478>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fb54 	bl	8004114 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a70:	f7fe fb50 	bl	8004114 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e045      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x444>
 8005a8e:	e03d      	b.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e038      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <HAL_RCC_OscConfig+0x4ec>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d028      	beq.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d121      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d11a      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d111      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	3b01      	subs	r3, #1
 8005af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800

08005b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0cc      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b68      	ldr	r3, [pc, #416]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d90c      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b65      	ldr	r3, [pc, #404]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b63      	ldr	r3, [pc, #396]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0b8      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d020      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b70:	4b59      	ldr	r3, [pc, #356]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a58      	ldr	r2, [pc, #352]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b88:	4b53      	ldr	r3, [pc, #332]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4a52      	ldr	r2, [pc, #328]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b94:	4b50      	ldr	r3, [pc, #320]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	494d      	ldr	r1, [pc, #308]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d044      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d107      	bne.n	8005bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	4b47      	ldr	r3, [pc, #284]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d119      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d003      	beq.n	8005bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	4b3f      	ldr	r3, [pc, #252]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e06f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bea:	4b3b      	ldr	r3, [pc, #236]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e067      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfa:	4b37      	ldr	r3, [pc, #220]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4934      	ldr	r1, [pc, #208]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fe fa82 	bl	8004114 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fe fa7e 	bl	8004114 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e04f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d20c      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c52:	4b20      	ldr	r3, [pc, #128]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e032      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4916      	ldr	r1, [pc, #88]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	490e      	ldr	r1, [pc, #56]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ca2:	f000 f821 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	490a      	ldr	r1, [pc, #40]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005cb4:	5ccb      	ldrb	r3, [r1, r3]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe f9e2 	bl	800408c <HAL_InitTick>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023c00 	.word	0x40023c00
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	080106cc 	.word	0x080106cc
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	20000010 	.word	0x20000010

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b094      	sub	sp, #80	; 0x50
 8005cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d00:	4b79      	ldr	r3, [pc, #484]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d00d      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x40>
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	f200 80e1 	bhi.w	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x34>
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1a:	e0db      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b73      	ldr	r3, [pc, #460]	; (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005d1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d20:	e0db      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d22:	4b73      	ldr	r3, [pc, #460]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d26:	e0d8      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d28:	4b6f      	ldr	r3, [pc, #444]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d32:	4b6d      	ldr	r3, [pc, #436]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d063      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	099b      	lsrs	r3, r3, #6
 8005d44:	2200      	movs	r2, #0
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	633b      	str	r3, [r7, #48]	; 0x30
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f04f 0000 	mov.w	r0, #0
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6c:	0150      	lsls	r0, r2, #5
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	1a51      	subs	r1, r2, r1
 8005d76:	6139      	str	r1, [r7, #16]
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	018b      	lsls	r3, r1, #6
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d96:	4651      	mov	r1, sl
 8005d98:	018a      	lsls	r2, r1, #6
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005da0:	4659      	mov	r1, fp
 8005da2:	eb63 0901 	sbc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	eb49 0303 	adc.w	r3, r9, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	024b      	lsls	r3, r1, #9
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005de4:	4621      	mov	r1, r4
 8005de6:	024a      	lsls	r2, r1, #9
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	2200      	movs	r2, #0
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005df8:	f7fa ff5e 	bl	8000cb8 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e04:	e058      	b.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e06:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4611      	mov	r1, r2
 8005e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	0159      	lsls	r1, r3, #5
 8005e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e32:	0150      	lsls	r0, r2, #5
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e3e:	4649      	mov	r1, r9
 8005e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e58:	ebb2 040a 	subs.w	r4, r2, sl
 8005e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	eb45 0303 	adc.w	r3, r5, r3
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	028b      	lsls	r3, r1, #10
 8005e92:	4621      	mov	r1, r4
 8005e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e98:	4621      	mov	r1, r4
 8005e9a:	028a      	lsls	r2, r1, #10
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	61fa      	str	r2, [r7, #28]
 8005ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eac:	f7fa ff04 	bl	8000cb8 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed2:	e002      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3750      	adds	r7, #80	; 0x50
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	00f42400 	.word	0x00f42400
 8005ef0:	007a1200 	.word	0x007a1200

08005ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	2000000c 	.word	0x2000000c

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f10:	f7ff fff0 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f14:	4602      	mov	r2, r0
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	0a9b      	lsrs	r3, r3, #10
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4903      	ldr	r1, [pc, #12]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f22:	5ccb      	ldrb	r3, [r1, r3]
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	080106dc 	.word	0x080106dc

08005f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f38:	f7ff ffdc 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0b5b      	lsrs	r3, r3, #13
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4903      	ldr	r1, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4a:	5ccb      	ldrb	r3, [r1, r3]
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40023800 	.word	0x40023800
 8005f58:	080106dc 	.word	0x080106dc

08005f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e03f      	b.n	8005fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fc fb82 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2224      	movs	r2, #36	; 0x24
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fc23 	bl	80067ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695a      	ldr	r2, [r3, #20]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b08a      	sub	sp, #40	; 0x28
 8005ffa:	af02      	add	r7, sp, #8
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b20      	cmp	r3, #32
 8006014:	d17c      	bne.n	8006110 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_UART_Transmit+0x2c>
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e075      	b.n	8006112 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_UART_Transmit+0x3e>
 8006030:	2302      	movs	r3, #2
 8006032:	e06e      	b.n	8006112 <HAL_UART_Transmit+0x11c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2221      	movs	r2, #33	; 0x21
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800604a:	f7fe f863 	bl	8004114 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006064:	d108      	bne.n	8006078 <HAL_UART_Transmit+0x82>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	e003      	b.n	8006080 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800607c:	2300      	movs	r3, #0
 800607e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006088:	e02a      	b.n	80060e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2200      	movs	r2, #0
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fa11 	bl	80064bc <UART_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e036      	b.n	8006112 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	3302      	adds	r3, #2
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e007      	b.n	80060d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	3301      	adds	r3, #1
 80060d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1cf      	bne.n	800608a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2140      	movs	r1, #64	; 0x40
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f9e1 	bl	80064bc <UART_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	4613      	mov	r3, r2
 8006126:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b20      	cmp	r3, #32
 8006132:	d11d      	bne.n	8006170 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_UART_Receive_DMA+0x26>
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e016      	b.n	8006172 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_UART_Receive_DMA+0x38>
 800614e:	2302      	movs	r3, #2
 8006150:	e00f      	b.n	8006172 <HAL_UART_Receive_DMA+0x58>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	461a      	mov	r2, r3
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa16 	bl	8006598 <UART_Start_Receive_DMA>
 800616c:	4603      	mov	r3, r0
 800616e:	e000      	b.n	8006172 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006170:	2302      	movs	r3, #2
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b090      	sub	sp, #64	; 0x40
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006182:	2300      	movs	r3, #0
 8006184:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b80      	cmp	r3, #128	; 0x80
 8006192:	bf0c      	ite	eq
 8006194:	2301      	moveq	r3, #1
 8006196:	2300      	movne	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b21      	cmp	r3, #33	; 0x21
 80061a6:	d128      	bne.n	80061fa <HAL_UART_DMAStop+0x80>
 80061a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d025      	beq.n	80061fa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	623b      	str	r3, [r7, #32]
   return(result);
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3314      	adds	r3, #20
 80061cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ce:	633a      	str	r2, [r7, #48]	; 0x30
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fd8c 	bl	8004d0c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa6d 	bl	80066d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b22      	cmp	r3, #34	; 0x22
 800621a:	d128      	bne.n	800626e <HAL_UART_DMAStop+0xf4>
 800621c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d025      	beq.n	800626e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3314      	adds	r3, #20
 8006228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	60fb      	str	r3, [r7, #12]
   return(result);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	69b9      	ldr	r1, [r7, #24]
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	617b      	str	r3, [r7, #20]
   return(result);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e5      	bne.n	8006222 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fd52 	bl	8004d0c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa5b 	bl	8006724 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3740      	adds	r7, #64	; 0x40
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b09c      	sub	sp, #112	; 0x70
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d172      	bne.n	80063ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80062e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ea:	2200      	movs	r2, #0
 80062ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006304:	66bb      	str	r3, [r7, #104]	; 0x68
 8006306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	330c      	adds	r3, #12
 800630c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800630e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006310:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800631c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	667b      	str	r3, [r7, #100]	; 0x64
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3314      	adds	r3, #20
 8006340:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006342:	647a      	str	r2, [r7, #68]	; 0x44
 8006344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e5      	bne.n	8006322 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	623b      	str	r3, [r7, #32]
   return(result);
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636c:	663b      	str	r3, [r7, #96]	; 0x60
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3314      	adds	r3, #20
 8006374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006376:	633a      	str	r2, [r7, #48]	; 0x30
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	2b01      	cmp	r3, #1
 8006398:	d119      	bne.n	80063ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f023 0310 	bic.w	r3, r3, #16
 80063b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ba:	61fa      	str	r2, [r7, #28]
 80063bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	617b      	str	r3, [r7, #20]
   return(result);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d106      	bne.n	80063e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063da:	4619      	mov	r1, r3
 80063dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063de:	f7ff ff69 	bl	80062b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063e2:	e002      	b.n	80063ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80063e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063e6:	f7ff ff47 	bl	8006278 <HAL_UART_RxCpltCallback>
}
 80063ea:	bf00      	nop
 80063ec:	3770      	adds	r7, #112	; 0x70
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	2b01      	cmp	r3, #1
 8006406:	d108      	bne.n	800641a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800640c:	085b      	lsrs	r3, r3, #1
 800640e:	b29b      	uxth	r3, r3
 8006410:	4619      	mov	r1, r3
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff ff4e 	bl	80062b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006418:	e002      	b.n	8006420 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff ff36 	bl	800628c <HAL_UART_RxHalfCpltCallback>
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	2b80      	cmp	r3, #128	; 0x80
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b21      	cmp	r3, #33	; 0x21
 800645a:	d108      	bne.n	800646e <UART_DMAError+0x46>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006468:	68b8      	ldr	r0, [r7, #8]
 800646a:	f000 f933 	bl	80066d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b22      	cmp	r3, #34	; 0x22
 800648e:	d108      	bne.n	80064a2 <UART_DMAError+0x7a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800649c:	68b8      	ldr	r0, [r7, #8]
 800649e:	f000 f941 	bl	8006724 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f043 0210 	orr.w	r2, r3, #16
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ae:	68b8      	ldr	r0, [r7, #8]
 80064b0:	f7ff fef6 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b090      	sub	sp, #64	; 0x40
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064cc:	e050      	b.n	8006570 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d04c      	beq.n	8006570 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <UART_WaitOnFlagUntilTimeout+0x30>
 80064dc:	f7fd fe1a 	bl	8004114 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d241      	bcs.n	8006570 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800650c:	637a      	str	r2, [r7, #52]	; 0x34
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e5      	bne.n	80064ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3314      	adds	r3, #20
 8006526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	613b      	str	r3, [r7, #16]
   return(result);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3314      	adds	r3, #20
 800653e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006540:	623a      	str	r2, [r7, #32]
 8006542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	61bb      	str	r3, [r7, #24]
   return(result);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e5      	bne.n	8006520 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e00f      	b.n	8006590 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4013      	ands	r3, r2
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	429a      	cmp	r2, r3
 800658c:	d09f      	beq.n	80064ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3740      	adds	r7, #64	; 0x40
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b098      	sub	sp, #96	; 0x60
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2222      	movs	r2, #34	; 0x22
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <UART_Start_Receive_DMA+0x130>)
 80065c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	4a3f      	ldr	r2, [pc, #252]	; (80066cc <UART_Start_Receive_DMA+0x134>)
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	4a3e      	ldr	r2, [pc, #248]	; (80066d0 <UART_Start_Receive_DMA+0x138>)
 80065d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	2200      	movs	r2, #0
 80065de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065e0:	f107 0308 	add.w	r3, r7, #8
 80065e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	f7fe fb30 	bl	8004c5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d019      	beq.n	8006656 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006638:	65bb      	str	r3, [r7, #88]	; 0x58
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006642:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006644:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	657b      	str	r3, [r7, #84]	; 0x54
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3314      	adds	r3, #20
 8006674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006676:	63ba      	str	r2, [r7, #56]	; 0x38
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800667c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e5      	bne.n	8006656 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3314      	adds	r3, #20
 8006690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	617b      	str	r3, [r7, #20]
   return(result);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a0:	653b      	str	r3, [r7, #80]	; 0x50
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066aa:	627a      	str	r2, [r7, #36]	; 0x24
 80066ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6a39      	ldr	r1, [r7, #32]
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3760      	adds	r7, #96	; 0x60
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	080062cd 	.word	0x080062cd
 80066cc:	080063f3 	.word	0x080063f3
 80066d0:	08006429 	.word	0x08006429

080066d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	61ba      	str	r2, [r7, #24]
 80066fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6979      	ldr	r1, [r7, #20]
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	613b      	str	r3, [r7, #16]
   return(result);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006718:	bf00      	nop
 800671a:	3724      	adds	r7, #36	; 0x24
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006724:	b480      	push	{r7}
 8006726:	b095      	sub	sp, #84	; 0x54
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800674c:	643a      	str	r2, [r7, #64]	; 0x40
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e5      	bne.n	800672c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	64bb      	str	r3, [r7, #72]	; 0x48
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e5      	bne.n	8006760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	2b01      	cmp	r3, #1
 800679a:	d119      	bne.n	80067d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f023 0310 	bic.w	r3, r3, #16
 80067b2:	647b      	str	r3, [r7, #68]	; 0x44
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067bc:	61ba      	str	r2, [r7, #24]
 80067be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067de:	bf00      	nop
 80067e0:	3754      	adds	r7, #84	; 0x54
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f0:	b0c0      	sub	sp, #256	; 0x100
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	68d9      	ldr	r1, [r3, #12]
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	ea40 0301 	orr.w	r3, r0, r1
 8006814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	431a      	orrs	r2, r3
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	431a      	orrs	r2, r3
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006844:	f021 010c 	bic.w	r1, r1, #12
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006852:	430b      	orrs	r3, r1
 8006854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006866:	6999      	ldr	r1, [r3, #24]
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	ea40 0301 	orr.w	r3, r0, r1
 8006872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b8f      	ldr	r3, [pc, #572]	; (8006ab8 <UART_SetConfig+0x2cc>)
 800687c:	429a      	cmp	r2, r3
 800687e:	d005      	beq.n	800688c <UART_SetConfig+0xa0>
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b8d      	ldr	r3, [pc, #564]	; (8006abc <UART_SetConfig+0x2d0>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d104      	bne.n	8006896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7ff fb52 	bl	8005f34 <HAL_RCC_GetPCLK2Freq>
 8006890:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006894:	e003      	b.n	800689e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006896:	f7ff fb39 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 800689a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a8:	f040 810c 	bne.w	8006ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068be:	4622      	mov	r2, r4
 80068c0:	462b      	mov	r3, r5
 80068c2:	1891      	adds	r1, r2, r2
 80068c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80068c6:	415b      	adcs	r3, r3
 80068c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ce:	4621      	mov	r1, r4
 80068d0:	eb12 0801 	adds.w	r8, r2, r1
 80068d4:	4629      	mov	r1, r5
 80068d6:	eb43 0901 	adc.w	r9, r3, r1
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ee:	4690      	mov	r8, r2
 80068f0:	4699      	mov	r9, r3
 80068f2:	4623      	mov	r3, r4
 80068f4:	eb18 0303 	adds.w	r3, r8, r3
 80068f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068fc:	462b      	mov	r3, r5
 80068fe:	eb49 0303 	adc.w	r3, r9, r3
 8006902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006912:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800691a:	460b      	mov	r3, r1
 800691c:	18db      	adds	r3, r3, r3
 800691e:	653b      	str	r3, [r7, #80]	; 0x50
 8006920:	4613      	mov	r3, r2
 8006922:	eb42 0303 	adc.w	r3, r2, r3
 8006926:	657b      	str	r3, [r7, #84]	; 0x54
 8006928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800692c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006930:	f7fa f9c2 	bl	8000cb8 <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4b61      	ldr	r3, [pc, #388]	; (8006ac0 <UART_SetConfig+0x2d4>)
 800693a:	fba3 2302 	umull	r2, r3, r3, r2
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	011c      	lsls	r4, r3, #4
 8006942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006946:	2200      	movs	r2, #0
 8006948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800694c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006954:	4642      	mov	r2, r8
 8006956:	464b      	mov	r3, r9
 8006958:	1891      	adds	r1, r2, r2
 800695a:	64b9      	str	r1, [r7, #72]	; 0x48
 800695c:	415b      	adcs	r3, r3
 800695e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006964:	4641      	mov	r1, r8
 8006966:	eb12 0a01 	adds.w	sl, r2, r1
 800696a:	4649      	mov	r1, r9
 800696c:	eb43 0b01 	adc.w	fp, r3, r1
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800697c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006984:	4692      	mov	sl, r2
 8006986:	469b      	mov	fp, r3
 8006988:	4643      	mov	r3, r8
 800698a:	eb1a 0303 	adds.w	r3, sl, r3
 800698e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006992:	464b      	mov	r3, r9
 8006994:	eb4b 0303 	adc.w	r3, fp, r3
 8006998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069b0:	460b      	mov	r3, r1
 80069b2:	18db      	adds	r3, r3, r3
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40
 80069b6:	4613      	mov	r3, r2
 80069b8:	eb42 0303 	adc.w	r3, r2, r3
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
 80069be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069c6:	f7fa f977 	bl	8000cb8 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4611      	mov	r1, r2
 80069d0:	4b3b      	ldr	r3, [pc, #236]	; (8006ac0 <UART_SetConfig+0x2d4>)
 80069d2:	fba3 2301 	umull	r2, r3, r3, r1
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	2264      	movs	r2, #100	; 0x64
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	1acb      	subs	r3, r1, r3
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069e6:	4b36      	ldr	r3, [pc, #216]	; (8006ac0 <UART_SetConfig+0x2d4>)
 80069e8:	fba3 2302 	umull	r2, r3, r3, r2
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069f4:	441c      	add	r4, r3
 80069f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	1891      	adds	r1, r2, r2
 8006a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a10:	415b      	adcs	r3, r3
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a18:	4641      	mov	r1, r8
 8006a1a:	1851      	adds	r1, r2, r1
 8006a1c:	6339      	str	r1, [r7, #48]	; 0x30
 8006a1e:	4649      	mov	r1, r9
 8006a20:	414b      	adcs	r3, r1
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a30:	4659      	mov	r1, fp
 8006a32:	00cb      	lsls	r3, r1, #3
 8006a34:	4651      	mov	r1, sl
 8006a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	00ca      	lsls	r2, r1, #3
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4619      	mov	r1, r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	4642      	mov	r2, r8
 8006a46:	189b      	adds	r3, r3, r2
 8006a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	460a      	mov	r2, r1
 8006a50:	eb42 0303 	adc.w	r3, r2, r3
 8006a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	18db      	adds	r3, r3, r3
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a72:	4613      	mov	r3, r2
 8006a74:	eb42 0303 	adc.w	r3, r2, r3
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a82:	f7fa f919 	bl	8000cb8 <__aeabi_uldivmod>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <UART_SetConfig+0x2d4>)
 8006a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	2164      	movs	r1, #100	; 0x64
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	3332      	adds	r3, #50	; 0x32
 8006a9e:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <UART_SetConfig+0x2d4>)
 8006aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f003 0207 	and.w	r2, r3, #7
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4422      	add	r2, r4
 8006ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ab4:	e105      	b.n	8006cc2 <UART_SetConfig+0x4d6>
 8006ab6:	bf00      	nop
 8006ab8:	40011000 	.word	0x40011000
 8006abc:	40011400 	.word	0x40011400
 8006ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ace:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	464b      	mov	r3, r9
 8006ada:	1891      	adds	r1, r2, r2
 8006adc:	6239      	str	r1, [r7, #32]
 8006ade:	415b      	adcs	r3, r3
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	1854      	adds	r4, r2, r1
 8006aea:	4649      	mov	r1, r9
 8006aec:	eb43 0501 	adc.w	r5, r3, r1
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	00eb      	lsls	r3, r5, #3
 8006afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006afe:	00e2      	lsls	r2, r4, #3
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	4643      	mov	r3, r8
 8006b06:	18e3      	adds	r3, r4, r3
 8006b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	eb45 0303 	adc.w	r3, r5, r3
 8006b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b32:	4629      	mov	r1, r5
 8006b34:	008b      	lsls	r3, r1, #2
 8006b36:	4621      	mov	r1, r4
 8006b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	008a      	lsls	r2, r1, #2
 8006b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b44:	f7fa f8b8 	bl	8000cb8 <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4b60      	ldr	r3, [pc, #384]	; (8006cd0 <UART_SetConfig+0x4e4>)
 8006b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	011c      	lsls	r4, r3, #4
 8006b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	1891      	adds	r1, r2, r2
 8006b6e:	61b9      	str	r1, [r7, #24]
 8006b70:	415b      	adcs	r3, r3
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b78:	4641      	mov	r1, r8
 8006b7a:	1851      	adds	r1, r2, r1
 8006b7c:	6139      	str	r1, [r7, #16]
 8006b7e:	4649      	mov	r1, r9
 8006b80:	414b      	adcs	r3, r1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b90:	4659      	mov	r1, fp
 8006b92:	00cb      	lsls	r3, r1, #3
 8006b94:	4651      	mov	r1, sl
 8006b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b9a:	4651      	mov	r1, sl
 8006b9c:	00ca      	lsls	r2, r1, #3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bac:	464b      	mov	r3, r9
 8006bae:	460a      	mov	r2, r1
 8006bb0:	eb42 0303 	adc.w	r3, r2, r3
 8006bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	008b      	lsls	r3, r1, #2
 8006bd4:	4641      	mov	r1, r8
 8006bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bda:	4641      	mov	r1, r8
 8006bdc:	008a      	lsls	r2, r1, #2
 8006bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006be2:	f7fa f869 	bl	8000cb8 <__aeabi_uldivmod>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <UART_SetConfig+0x4e4>)
 8006bec:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	2164      	movs	r1, #100	; 0x64
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	3332      	adds	r3, #50	; 0x32
 8006bfe:	4a34      	ldr	r2, [pc, #208]	; (8006cd0 <UART_SetConfig+0x4e4>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	095b      	lsrs	r3, r3, #5
 8006c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c0a:	441c      	add	r4, r3
 8006c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c10:	2200      	movs	r2, #0
 8006c12:	673b      	str	r3, [r7, #112]	; 0x70
 8006c14:	677a      	str	r2, [r7, #116]	; 0x74
 8006c16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c1a:	4642      	mov	r2, r8
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	1891      	adds	r1, r2, r2
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	415b      	adcs	r3, r3
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	1851      	adds	r1, r2, r1
 8006c2e:	6039      	str	r1, [r7, #0]
 8006c30:	4649      	mov	r1, r9
 8006c32:	414b      	adcs	r3, r1
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c42:	4659      	mov	r1, fp
 8006c44:	00cb      	lsls	r3, r1, #3
 8006c46:	4651      	mov	r1, sl
 8006c48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c4c:	4651      	mov	r1, sl
 8006c4e:	00ca      	lsls	r2, r1, #3
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	4603      	mov	r3, r0
 8006c56:	4642      	mov	r2, r8
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	460a      	mov	r2, r1
 8006c60:	eb42 0303 	adc.w	r3, r2, r3
 8006c64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c70:	667a      	str	r2, [r7, #100]	; 0x64
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c7e:	4649      	mov	r1, r9
 8006c80:	008b      	lsls	r3, r1, #2
 8006c82:	4641      	mov	r1, r8
 8006c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c88:	4641      	mov	r1, r8
 8006c8a:	008a      	lsls	r2, r1, #2
 8006c8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c90:	f7fa f812 	bl	8000cb8 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <UART_SetConfig+0x4e4>)
 8006c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	2164      	movs	r1, #100	; 0x64
 8006ca2:	fb01 f303 	mul.w	r3, r1, r3
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	3332      	adds	r3, #50	; 0x32
 8006cac:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <UART_SetConfig+0x4e4>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4422      	add	r2, r4
 8006cc0:	609a      	str	r2, [r3, #8]
}
 8006cc2:	bf00      	nop
 8006cc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cce:	bf00      	nop
 8006cd0:	51eb851f 	.word	0x51eb851f

08006cd4 <__NVIC_SetPriority>:
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	db0a      	blt.n	8006cfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	490c      	ldr	r1, [pc, #48]	; (8006d20 <__NVIC_SetPriority+0x4c>)
 8006cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf2:	0112      	lsls	r2, r2, #4
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cfc:	e00a      	b.n	8006d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4908      	ldr	r1, [pc, #32]	; (8006d24 <__NVIC_SetPriority+0x50>)
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	3b04      	subs	r3, #4
 8006d0c:	0112      	lsls	r2, r2, #4
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	440b      	add	r3, r1
 8006d12:	761a      	strb	r2, [r3, #24]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	e000e100 	.word	0xe000e100
 8006d24:	e000ed00 	.word	0xe000ed00

08006d28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f06f 0004 	mvn.w	r0, #4
 8006d32:	f7ff ffcf 	bl	8006cd4 <__NVIC_SetPriority>
#endif
}
 8006d36:	bf00      	nop
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d42:	f3ef 8305 	mrs	r3, IPSR
 8006d46:	603b      	str	r3, [r7, #0]
  return(result);
 8006d48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d4e:	f06f 0305 	mvn.w	r3, #5
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	e00c      	b.n	8006d70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <osKernelInitialize+0x44>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d105      	bne.n	8006d6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <osKernelInitialize+0x44>)
 8006d60:	2201      	movs	r2, #1
 8006d62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e002      	b.n	8006d70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d70:	687b      	ldr	r3, [r7, #4]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20002c68 	.word	0x20002c68

08006d84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d8a:	f3ef 8305 	mrs	r3, IPSR
 8006d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d96:	f06f 0305 	mvn.w	r3, #5
 8006d9a:	607b      	str	r3, [r7, #4]
 8006d9c:	e010      	b.n	8006dc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <osKernelStart+0x48>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d109      	bne.n	8006dba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006da6:	f7ff ffbf 	bl	8006d28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006daa:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <osKernelStart+0x48>)
 8006dac:	2202      	movs	r2, #2
 8006dae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006db0:	f001 f9a6 	bl	8008100 <vTaskStartScheduler>
      stat = osOK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e002      	b.n	8006dc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006dba:	f04f 33ff 	mov.w	r3, #4294967295
 8006dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dc0:	687b      	ldr	r3, [r7, #4]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20002c68 	.word	0x20002c68

08006dd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd8:	f3ef 8305 	mrs	r3, IPSR
 8006ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <osDelay+0x1c>
    stat = osErrorISR;
 8006de4:	f06f 0305 	mvn.w	r3, #5
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e007      	b.n	8006dfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f94e 	bl	8008098 <vTaskDelay>
    }
  }

  return (stat);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a06      	ldr	r2, [pc, #24]	; (8006e38 <vApplicationGetIdleTaskMemory+0x30>)
 8006e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2280      	movs	r2, #128	; 0x80
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20002c70 	.word	0x20002c70
 8006e38:	200030f8 	.word	0x200030f8

08006e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a07      	ldr	r2, [pc, #28]	; (8006e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4a06      	ldr	r2, [pc, #24]	; (8006e6c <vApplicationGetTimerTaskMemory+0x30>)
 8006e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e5a:	601a      	str	r2, [r3, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	200032f8 	.word	0x200032f8
 8006e6c:	20003780 	.word	0x20003780

08006e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f103 0208 	add.w	r2, r3, #8
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f04f 32ff 	mov.w	r2, #4294967295
 8006e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f103 0208 	add.w	r2, r3, #8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f103 0208 	add.w	r2, r3, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d103      	bne.n	8006f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e00c      	b.n	8006f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3308      	adds	r3, #8
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <vListInsert+0x2e>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d2f6      	bcs.n	8006f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
}
 8006f78:	bf00      	nop
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6892      	ldr	r2, [r2, #8]
 8006f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6852      	ldr	r2, [r2, #4]
 8006fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d103      	bne.n	8006fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	1e5a      	subs	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007002:	f002 fb2f 	bl	8009664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	441a      	add	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	3b01      	subs	r3, #1
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22ff      	movs	r2, #255	; 0xff
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d114      	bne.n	8007082 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01a      	beq.n	8007096 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3310      	adds	r3, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fae5 	bl	8008634 <xTaskRemoveFromEventList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <xQueueGenericReset+0xcc>)
 8007072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	e009      	b.n	8007096 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3310      	adds	r3, #16
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fef2 	bl	8006e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff feed 	bl	8006e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f002 fb15 	bl	80096c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800709a:	2301      	movs	r3, #1
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08e      	sub	sp, #56	; 0x38
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <xQueueGenericCreateStatic+0x52>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <xQueueGenericCreateStatic+0x56>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <xQueueGenericCreateStatic+0x58>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <xQueueGenericCreateStatic+0x7e>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <xQueueGenericCreateStatic+0x82>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericCreateStatic+0x84>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61fb      	str	r3, [r7, #28]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007146:	2350      	movs	r3, #80	; 0x50
 8007148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b50      	cmp	r3, #80	; 0x50
 800714e:	d00a      	beq.n	8007166 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	61bb      	str	r3, [r7, #24]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800717a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	4613      	mov	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f83f 	bl	800720c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007190:	4618      	mov	r0, r3
 8007192:	3730      	adds	r7, #48	; 0x30
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	613b      	str	r3, [r7, #16]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	fb02 f303 	mul.w	r3, r2, r3
 80071ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3350      	adds	r3, #80	; 0x50
 80071d0:	4618      	mov	r0, r3
 80071d2:	f002 fb69 	bl	80098a8 <pvPortMalloc>
 80071d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d011      	beq.n	8007202 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3350      	adds	r3, #80	; 0x50
 80071e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071f0:	79fa      	ldrb	r2, [r7, #7]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	4613      	mov	r3, r2
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f805 	bl	800720c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007202:	69bb      	ldr	r3, [r7, #24]
	}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	e002      	b.n	800722e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800723a:	2101      	movs	r1, #1
 800723c:	69b8      	ldr	r0, [r7, #24]
 800723e:	f7ff fecb 	bl	8006fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007272:	2300      	movs	r3, #0
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f81d 	bl	80072b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	4603      	mov	r3, r0
 800728e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	461a      	mov	r2, r3
 800729c:	6939      	ldr	r1, [r7, #16]
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	f7ff ff7a 	bl	8007198 <xQueueGenericCreate>
 80072a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7ff ffd3 	bl	8007252 <prvInitialiseMutex>

		return xNewQueue;
 80072ac:	68fb      	ldr	r3, [r7, #12]
	}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xQueueGenericSend+0x32>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d103      	bne.n	80072f8 <xQueueGenericSend+0x40>
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <xQueueGenericSend+0x44>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <xQueueGenericSend+0x46>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <xQueueGenericSend+0x60>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d103      	bne.n	8007326 <xQueueGenericSend+0x6e>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <xQueueGenericSend+0x72>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <xQueueGenericSend+0x74>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xQueueGenericSend+0x8e>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	623b      	str	r3, [r7, #32]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007346:	f001 fb37 	bl	80089b8 <xTaskGetSchedulerState>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <xQueueGenericSend+0x9e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <xQueueGenericSend+0xa2>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueGenericSend+0xa4>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueGenericSend+0xbe>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61fb      	str	r3, [r7, #28]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007376:	f002 f975 	bl	8009664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	429a      	cmp	r2, r3
 8007384:	d302      	bcc.n	800738c <xQueueGenericSend+0xd4>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d129      	bne.n	80073e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007392:	f000 fb2f 	bl	80079f4 <prvCopyDataToQueue>
 8007396:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	3324      	adds	r3, #36	; 0x24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f945 	bl	8008634 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d013      	beq.n	80073d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073b0:	4b3f      	ldr	r3, [pc, #252]	; (80074b0 <xQueueGenericSend+0x1f8>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	e00a      	b.n	80073d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073c8:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <xQueueGenericSend+0x1f8>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073d8:	f002 f974 	bl	80096c4 <vPortExitCritical>
				return pdPASS;
 80073dc:	2301      	movs	r3, #1
 80073de:	e063      	b.n	80074a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073e6:	f002 f96d 	bl	80096c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e05c      	b.n	80074a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d106      	bne.n	8007402 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 f97f 	bl	80086fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073fe:	2301      	movs	r3, #1
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007402:	f002 f95f 	bl	80096c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007406:	f000 feeb 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800740a:	f002 f92b 	bl	8009664 <vPortEnterCritical>
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007414:	b25b      	sxtb	r3, r3
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d103      	bne.n	8007424 <xQueueGenericSend+0x16c>
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800742a:	b25b      	sxtb	r3, r3
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d103      	bne.n	800743a <xQueueGenericSend+0x182>
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800743a:	f002 f943 	bl	80096c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800743e:	1d3a      	adds	r2, r7, #4
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f001 f96e 	bl	8008728 <xTaskCheckForTimeOut>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d124      	bne.n	800749c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007454:	f000 fbc6 	bl	8007be4 <prvIsQueueFull>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d018      	beq.n	8007490 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	3310      	adds	r3, #16
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f001 f894 	bl	8008594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800746c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800746e:	f000 fb51 	bl	8007b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007472:	f000 fec3 	bl	80081fc <xTaskResumeAll>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	f47f af7c 	bne.w	8007376 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800747e:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <xQueueGenericSend+0x1f8>)
 8007480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	e772      	b.n	8007376 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007492:	f000 fb3f 	bl	8007b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007496:	f000 feb1 	bl	80081fc <xTaskResumeAll>
 800749a:	e76c      	b.n	8007376 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800749c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749e:	f000 fb39 	bl	8007b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074a2:	f000 feab 	bl	80081fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3738      	adds	r7, #56	; 0x38
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b090      	sub	sp, #64	; 0x40
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <xQueueGenericSendFromISR+0x3c>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <xQueueGenericSendFromISR+0x40>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <xQueueGenericSendFromISR+0x42>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d103      	bne.n	800751e <xQueueGenericSendFromISR+0x6a>
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <xQueueGenericSendFromISR+0x6e>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueGenericSendFromISR+0x70>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	623b      	str	r3, [r7, #32]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800753e:	f002 f973 	bl	8009828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007542:	f3ef 8211 	mrs	r2, BASEPRI
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	61fa      	str	r2, [r7, #28]
 8007558:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800755a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	429a      	cmp	r2, r3
 8007568:	d302      	bcc.n	8007570 <xQueueGenericSendFromISR+0xbc>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d12f      	bne.n	80075d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007586:	f000 fa35 	bl	80079f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800758a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d112      	bne.n	80075ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d016      	beq.n	80075ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 f847 	bl	8008634 <xTaskRemoveFromEventList>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00e      	beq.n	80075ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	e007      	b.n	80075ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075be:	3301      	adds	r3, #1
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	b25a      	sxtb	r2, r3
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075ca:	2301      	movs	r3, #1
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80075ce:	e001      	b.n	80075d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3740      	adds	r7, #64	; 0x40
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08c      	sub	sp, #48	; 0x30
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <xQueueReceive+0x30>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	623b      	str	r3, [r7, #32]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <xQueueReceive+0x3e>
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <xQueueReceive+0x42>
 800762a:	2301      	movs	r3, #1
 800762c:	e000      	b.n	8007630 <xQueueReceive+0x44>
 800762e:	2300      	movs	r3, #0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <xQueueReceive+0x5e>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	61fb      	str	r3, [r7, #28]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800764a:	f001 f9b5 	bl	80089b8 <xTaskGetSchedulerState>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <xQueueReceive+0x6e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <xQueueReceive+0x72>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <xQueueReceive+0x74>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <xQueueReceive+0x8e>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	61bb      	str	r3, [r7, #24]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800767a:	f001 fff3 	bl	8009664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01f      	beq.n	80076ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768e:	f000 fa1b 	bl	8007ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	1e5a      	subs	r2, r3, #1
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00f      	beq.n	80076c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	3310      	adds	r3, #16
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 ffc4 	bl	8008634 <xTaskRemoveFromEventList>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076b2:	4b3d      	ldr	r3, [pc, #244]	; (80077a8 <xQueueReceive+0x1bc>)
 80076b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076c2:	f001 ffff 	bl	80096c4 <vPortExitCritical>
				return pdPASS;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e069      	b.n	800779e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076d0:	f001 fff8 	bl	80096c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e062      	b.n	800779e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076de:	f107 0310 	add.w	r3, r7, #16
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 f80a 	bl	80086fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ec:	f001 ffea 	bl	80096c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076f0:	f000 fd76 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076f4:	f001 ffb6 	bl	8009664 <vPortEnterCritical>
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d103      	bne.n	800770e <xQueueReceive+0x122>
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007714:	b25b      	sxtb	r3, r3
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d103      	bne.n	8007724 <xQueueReceive+0x138>
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007724:	f001 ffce 	bl	80096c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007728:	1d3a      	adds	r2, r7, #4
 800772a:	f107 0310 	add.w	r3, r7, #16
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fff9 	bl	8008728 <xTaskCheckForTimeOut>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d123      	bne.n	8007784 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800773c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773e:	f000 fa3b 	bl	8007bb8 <prvIsQueueEmpty>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d017      	beq.n	8007778 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	3324      	adds	r3, #36	; 0x24
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f000 ff1f 	bl	8008594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007758:	f000 f9dc 	bl	8007b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800775c:	f000 fd4e 	bl	80081fc <xTaskResumeAll>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d189      	bne.n	800767a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007766:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <xQueueReceive+0x1bc>)
 8007768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	e780      	b.n	800767a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800777a:	f000 f9cb 	bl	8007b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800777e:	f000 fd3d 	bl	80081fc <xTaskResumeAll>
 8007782:	e77a      	b.n	800767a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007786:	f000 f9c5 	bl	8007b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800778a:	f000 fd37 	bl	80081fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800778e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007790:	f000 fa12 	bl	8007bb8 <prvIsQueueEmpty>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	f43f af6f 	beq.w	800767a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800779c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3730      	adds	r7, #48	; 0x30
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	; 0x38
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	623b      	str	r3, [r7, #32]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	61fb      	str	r3, [r7, #28]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077fc:	f001 f8dc 	bl	80089b8 <xTaskGetSchedulerState>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <xQueueSemaphoreTake+0x60>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <xQueueSemaphoreTake+0x64>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <xQueueSemaphoreTake+0x66>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	61bb      	str	r3, [r7, #24]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800782c:	f001 ff1a 	bl	8009664 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d024      	beq.n	8007886 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	1e5a      	subs	r2, r3, #1
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800784c:	f001 fa2a 	bl	8008ca4 <pvTaskIncrementMutexHeldCount>
 8007850:	4602      	mov	r2, r0
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00f      	beq.n	800787e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	3310      	adds	r3, #16
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fee6 	bl	8008634 <xTaskRemoveFromEventList>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800786e:	4b54      	ldr	r3, [pc, #336]	; (80079c0 <xQueueSemaphoreTake+0x214>)
 8007870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800787e:	f001 ff21 	bl	80096c4 <vPortExitCritical>
				return pdPASS;
 8007882:	2301      	movs	r3, #1
 8007884:	e097      	b.n	80079b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d111      	bne.n	80078b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	617b      	str	r3, [r7, #20]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078a8:	f001 ff0c 	bl	80096c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e082      	b.n	80079b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078b6:	f107 030c 	add.w	r3, r7, #12
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 ff1e 	bl	80086fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078c4:	f001 fefe 	bl	80096c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078c8:	f000 fc8a 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078cc:	f001 feca 	bl	8009664 <vPortEnterCritical>
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d103      	bne.n	80078e6 <xQueueSemaphoreTake+0x13a>
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ec:	b25b      	sxtb	r3, r3
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d103      	bne.n	80078fc <xQueueSemaphoreTake+0x150>
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078fc:	f001 fee2 	bl	80096c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007900:	463a      	mov	r2, r7
 8007902:	f107 030c 	add.w	r3, r7, #12
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 ff0d 	bl	8008728 <xTaskCheckForTimeOut>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d132      	bne.n	800797a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007916:	f000 f94f 	bl	8007bb8 <prvIsQueueEmpty>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d026      	beq.n	800796e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007928:	f001 fe9c 	bl	8009664 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	4618      	mov	r0, r3
 8007932:	f001 f85f 	bl	80089f4 <xTaskPriorityInherit>
 8007936:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007938:	f001 fec4 	bl	80096c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	3324      	adds	r3, #36	; 0x24
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fe25 	bl	8008594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800794a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800794c:	f000 f8e2 	bl	8007b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007950:	f000 fc54 	bl	80081fc <xTaskResumeAll>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	f47f af68 	bne.w	800782c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800795c:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <xQueueSemaphoreTake+0x214>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	e75e      	b.n	800782c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800796e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007970:	f000 f8d0 	bl	8007b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007974:	f000 fc42 	bl	80081fc <xTaskResumeAll>
 8007978:	e758      	b.n	800782c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800797a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800797c:	f000 f8ca 	bl	8007b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007980:	f000 fc3c 	bl	80081fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007986:	f000 f917 	bl	8007bb8 <prvIsQueueEmpty>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	f43f af4d 	beq.w	800782c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007998:	f001 fe64 	bl	8009664 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800799c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800799e:	f000 f811 	bl	80079c4 <prvGetDisinheritPriorityAfterTimeout>
 80079a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f8f8 	bl	8008ba0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079b0:	f001 fe88 	bl	80096c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3738      	adds	r7, #56	; 0x38
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e001      	b.n	80079e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80079e6:	68fb      	ldr	r3, [r7, #12]
	}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10d      	bne.n	8007a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d14d      	bne.n	8007ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 f850 	bl	8008ac4 <xTaskPriorityDisinherit>
 8007a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	609a      	str	r2, [r3, #8]
 8007a2c:	e043      	b.n	8007ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d119      	bne.n	8007a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6858      	ldr	r0, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	f002 fe00 	bl	800a644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	441a      	add	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d32b      	bcc.n	8007ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	e026      	b.n	8007ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68d8      	ldr	r0, [r3, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	461a      	mov	r2, r3
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	f002 fde6 	bl	800a644 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	425b      	negs	r3, r3
 8007a82:	441a      	add	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d207      	bcs.n	8007aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	425b      	negs	r3, r3
 8007a9e:	441a      	add	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d105      	bne.n	8007ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007abe:	697b      	ldr	r3, [r7, #20]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d018      	beq.n	8007b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	441a      	add	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d303      	bcc.n	8007afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68d9      	ldr	r1, [r3, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	461a      	mov	r2, r3
 8007b06:	6838      	ldr	r0, [r7, #0]
 8007b08:	f002 fd9c 	bl	800a644 <memcpy>
	}
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b1c:	f001 fda2 	bl	8009664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b28:	e011      	b.n	8007b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d012      	beq.n	8007b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3324      	adds	r3, #36	; 0x24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fd7c 	bl	8008634 <xTaskRemoveFromEventList>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b42:	f000 fe53 	bl	80087ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dce9      	bgt.n	8007b2a <prvUnlockQueue+0x16>
 8007b56:	e000      	b.n	8007b5a <prvUnlockQueue+0x46>
					break;
 8007b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	22ff      	movs	r2, #255	; 0xff
 8007b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b62:	f001 fdaf 	bl	80096c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b66:	f001 fd7d 	bl	8009664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b72:	e011      	b.n	8007b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d012      	beq.n	8007ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3310      	adds	r3, #16
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fd57 	bl	8008634 <xTaskRemoveFromEventList>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b8c:	f000 fe2e 	bl	80087ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dce9      	bgt.n	8007b74 <prvUnlockQueue+0x60>
 8007ba0:	e000      	b.n	8007ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	22ff      	movs	r2, #255	; 0xff
 8007ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007bac:	f001 fd8a 	bl	80096c4 <vPortExitCritical>
}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bc0:	f001 fd50 	bl	8009664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	e001      	b.n	8007bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bd6:	f001 fd75 	bl	80096c4 <vPortExitCritical>

	return xReturn;
 8007bda:	68fb      	ldr	r3, [r7, #12]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bec:	f001 fd3a 	bl	8009664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d102      	bne.n	8007c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e001      	b.n	8007c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c06:	f001 fd5d 	bl	80096c4 <vPortExitCritical>

	return xReturn;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	e014      	b.n	8007c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c24:	4a0f      	ldr	r2, [pc, #60]	; (8007c64 <vQueueAddToRegistry+0x50>)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c30:	490c      	ldr	r1, [pc, #48]	; (8007c64 <vQueueAddToRegistry+0x50>)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	; (8007c64 <vQueueAddToRegistry+0x50>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	4413      	add	r3, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c46:	e006      	b.n	8007c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b07      	cmp	r3, #7
 8007c52:	d9e7      	bls.n	8007c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20003b80 	.word	0x20003b80

08007c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c78:	f001 fcf4 	bl	8009664 <vPortEnterCritical>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d103      	bne.n	8007c92 <vQueueWaitForMessageRestricted+0x2a>
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d103      	bne.n	8007ca8 <vQueueWaitForMessageRestricted+0x40>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca8:	f001 fd0c 	bl	80096c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	3324      	adds	r3, #36	; 0x24
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fc8d 	bl	80085dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007cc2:	6978      	ldr	r0, [r7, #20]
 8007cc4:	f7ff ff26 	bl	8007b14 <prvUnlockQueue>
	}
 8007cc8:	bf00      	nop
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08e      	sub	sp, #56	; 0x38
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	623b      	str	r3, [r7, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	61fb      	str	r3, [r7, #28]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d16:	f44f 6391 	mov.w	r3, #1160	; 0x488
 8007d1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f5b3 6f91 	cmp.w	r3, #1160	; 0x488
 8007d22:	d00a      	beq.n	8007d3a <xTaskCreateStatic+0x6a>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	61bb      	str	r3, [r7, #24]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d01e      	beq.n	8007d80 <xTaskCreateStatic+0xb0>
 8007d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01b      	beq.n	8007d80 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	9302      	str	r3, [sp, #8]
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f851 	bl	8007e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d7a:	f000 f91d 	bl	8007fb8 <prvAddNewTaskToReadyList>
 8007d7e:	e001      	b.n	8007d84 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d84:	697b      	ldr	r3, [r7, #20]
	}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3728      	adds	r7, #40	; 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b08c      	sub	sp, #48	; 0x30
 8007d92:	af04      	add	r7, sp, #16
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	603b      	str	r3, [r7, #0]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fd80 	bl	80098a8 <pvPortMalloc>
 8007da8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00f      	beq.n	8007dd0 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007db0:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8007db4:	f001 fd78 	bl	80098a8 <pvPortMalloc>
 8007db8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8007dc6:	e005      	b.n	8007dd4 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dc8:	6978      	ldr	r0, [r7, #20]
 8007dca:	f001 fe39 	bl	8009a40 <vPortFree>
 8007dce:	e001      	b.n	8007dd4 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d017      	beq.n	8007e0a <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007de2:	88fa      	ldrh	r2, [r7, #6]
 8007de4:	2300      	movs	r3, #0
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	9302      	str	r3, [sp, #8]
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f80e 	bl	8007e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dfe:	69f8      	ldr	r0, [r7, #28]
 8007e00:	f000 f8da 	bl	8007fb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e04:	2301      	movs	r3, #1
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	e002      	b.n	8007e10 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e10:	69bb      	ldr	r3, [r7, #24]
	}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b088      	sub	sp, #32
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	461a      	mov	r2, r3
 8007e32:	21a5      	movs	r1, #165	; 0xa5
 8007e34:	f002 fc14 	bl	800a660 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e42:	3b01      	subs	r3, #1
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	617b      	str	r3, [r7, #20]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01f      	beq.n	8007eb8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	e012      	b.n	8007ea4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	7819      	ldrb	r1, [r3, #0]
 8007e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3334      	adds	r3, #52	; 0x34
 8007e8e:	460a      	mov	r2, r1
 8007e90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d006      	beq.n	8007eac <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d9e9      	bls.n	8007e7e <prvInitialiseNewTask+0x64>
 8007eaa:	e000      	b.n	8007eae <prvInitialiseNewTask+0x94>
			{
				break;
 8007eac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eb6:	e003      	b.n	8007ec0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	2b37      	cmp	r3, #55	; 0x37
 8007ec4:	d901      	bls.n	8007eca <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ec6:	2337      	movs	r3, #55	; 0x37
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ece:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2200      	movs	r2, #0
 8007eda:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe ffe5 	bl	8006eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	3318      	adds	r3, #24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe ffe0 	bl	8006eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	3358      	adds	r3, #88	; 0x58
 8007f1a:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 fb9d 	bl	800a660 <memset>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f503 7251 	add.w	r2, r3, #836	; 0x344
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	f503 726b 	add.w	r2, r3, #940	; 0x3ac
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f203 4214 	addw	r2, r3, #1044	; 0x414
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	665a      	str	r2, [r3, #100]	; 0x64
 8007f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f46:	f04f 0201 	mov.w	r2, #1
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	f243 320e 	movw	r2, #13070	; 0x330e
 8007f58:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8007f62:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	f241 2234 	movw	r2, #4660	; 0x1234
 8007f6c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	f24e 626d 	movw	r2, #58989	; 0xe66d
 8007f76:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 8007f80:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	2205      	movs	r2, #5
 8007f88:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	220b      	movs	r2, #11
 8007f90:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	69b8      	ldr	r0, [r7, #24]
 8007f9a:	f001 fa39 	bl	8009410 <pxPortInitialiseStack>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <prvInitialiseNewTask+0x196>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fc0:	f001 fb50 	bl	8009664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fc4:	4b2d      	ldr	r3, [pc, #180]	; (800807c <prvAddNewTaskToReadyList+0xc4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	4a2c      	ldr	r2, [pc, #176]	; (800807c <prvAddNewTaskToReadyList+0xc4>)
 8007fcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fce:	4b2c      	ldr	r3, [pc, #176]	; (8008080 <prvAddNewTaskToReadyList+0xc8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fd6:	4a2a      	ldr	r2, [pc, #168]	; (8008080 <prvAddNewTaskToReadyList+0xc8>)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fdc:	4b27      	ldr	r3, [pc, #156]	; (800807c <prvAddNewTaskToReadyList+0xc4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d110      	bne.n	8008006 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fe4:	f000 fc26 	bl	8008834 <prvInitialiseTaskLists>
 8007fe8:	e00d      	b.n	8008006 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fea:	4b26      	ldr	r3, [pc, #152]	; (8008084 <prvAddNewTaskToReadyList+0xcc>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ff2:	4b23      	ldr	r3, [pc, #140]	; (8008080 <prvAddNewTaskToReadyList+0xc8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d802      	bhi.n	8008006 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008000:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <prvAddNewTaskToReadyList+0xc8>)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008006:	4b20      	ldr	r3, [pc, #128]	; (8008088 <prvAddNewTaskToReadyList+0xd0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <prvAddNewTaskToReadyList+0xd0>)
 800800e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008010:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <prvAddNewTaskToReadyList+0xd0>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	4b1b      	ldr	r3, [pc, #108]	; (800808c <prvAddNewTaskToReadyList+0xd4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d903      	bls.n	800802c <prvAddNewTaskToReadyList+0x74>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4a18      	ldr	r2, [pc, #96]	; (800808c <prvAddNewTaskToReadyList+0xd4>)
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4a15      	ldr	r2, [pc, #84]	; (8008090 <prvAddNewTaskToReadyList+0xd8>)
 800803a:	441a      	add	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f7fe ff41 	bl	8006eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008048:	f001 fb3c 	bl	80096c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <prvAddNewTaskToReadyList+0xcc>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00e      	beq.n	8008072 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvAddNewTaskToReadyList+0xc8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	429a      	cmp	r2, r3
 8008060:	d207      	bcs.n	8008072 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <prvAddNewTaskToReadyList+0xdc>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20004094 	.word	0x20004094
 8008080:	20003bc0 	.word	0x20003bc0
 8008084:	200040a0 	.word	0x200040a0
 8008088:	200040b0 	.word	0x200040b0
 800808c:	2000409c 	.word	0x2000409c
 8008090:	20003bc4 	.word	0x20003bc4
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d017      	beq.n	80080da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <vTaskDelay+0x60>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <vTaskDelay+0x30>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60bb      	str	r3, [r7, #8]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080c8:	f000 f88a 	bl	80081e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fdfc 	bl	8008ccc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080d4:	f000 f892 	bl	80081fc <xTaskResumeAll>
 80080d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <vTaskDelay+0x64>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	200040bc 	.word	0x200040bc
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	; 0x28
 8008104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800810e:	463a      	mov	r2, r7
 8008110:	1d39      	adds	r1, r7, #4
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fe76 	bl	8006e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	9202      	str	r2, [sp, #8]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	2300      	movs	r3, #0
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	460a      	mov	r2, r1
 800812e:	4924      	ldr	r1, [pc, #144]	; (80081c0 <vTaskStartScheduler+0xc0>)
 8008130:	4824      	ldr	r0, [pc, #144]	; (80081c4 <vTaskStartScheduler+0xc4>)
 8008132:	f7ff fdcd 	bl	8007cd0 <xTaskCreateStatic>
 8008136:	4603      	mov	r3, r0
 8008138:	4a23      	ldr	r2, [pc, #140]	; (80081c8 <vTaskStartScheduler+0xc8>)
 800813a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800813c:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <vTaskStartScheduler+0xc8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e001      	b.n	800814e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d102      	bne.n	800815a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008154:	f000 fe0e 	bl	8008d74 <xTimerCreateTimerTask>
 8008158:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d11b      	bne.n	8008198 <vTaskStartScheduler+0x98>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <vTaskStartScheduler+0xcc>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3358      	adds	r3, #88	; 0x58
 800817a:	4a15      	ldr	r2, [pc, #84]	; (80081d0 <vTaskStartScheduler+0xd0>)
 800817c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <vTaskStartScheduler+0xd4>)
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <vTaskStartScheduler+0xd8>)
 8008188:	2201      	movs	r2, #1
 800818a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800818c:	4b13      	ldr	r3, [pc, #76]	; (80081dc <vTaskStartScheduler+0xdc>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008192:	f001 f9c5 	bl	8009520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008196:	e00e      	b.n	80081b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d10a      	bne.n	80081b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <vTaskStartScheduler+0xb4>
}
 80081b6:	bf00      	nop
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	080106b4 	.word	0x080106b4
 80081c4:	08008805 	.word	0x08008805
 80081c8:	200040b8 	.word	0x200040b8
 80081cc:	20003bc0 	.word	0x20003bc0
 80081d0:	2000001c 	.word	0x2000001c
 80081d4:	200040b4 	.word	0x200040b4
 80081d8:	200040a0 	.word	0x200040a0
 80081dc:	20004098 	.word	0x20004098

080081e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <vTaskSuspendAll+0x18>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	4a03      	ldr	r2, [pc, #12]	; (80081f8 <vTaskSuspendAll+0x18>)
 80081ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	200040bc 	.word	0x200040bc

080081fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800820a:	4b42      	ldr	r3, [pc, #264]	; (8008314 <xTaskResumeAll+0x118>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xTaskResumeAll+0x2c>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	603b      	str	r3, [r7, #0]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008228:	f001 fa1c 	bl	8009664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800822c:	4b39      	ldr	r3, [pc, #228]	; (8008314 <xTaskResumeAll+0x118>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	4a38      	ldr	r2, [pc, #224]	; (8008314 <xTaskResumeAll+0x118>)
 8008234:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008236:	4b37      	ldr	r3, [pc, #220]	; (8008314 <xTaskResumeAll+0x118>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d162      	bne.n	8008304 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800823e:	4b36      	ldr	r3, [pc, #216]	; (8008318 <xTaskResumeAll+0x11c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d05e      	beq.n	8008304 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008246:	e02f      	b.n	80082a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008248:	4b34      	ldr	r3, [pc, #208]	; (800831c <xTaskResumeAll+0x120>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3318      	adds	r3, #24
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fe95 	bl	8006f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fe90 	bl	8006f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008268:	4b2d      	ldr	r3, [pc, #180]	; (8008320 <xTaskResumeAll+0x124>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d903      	bls.n	8008278 <xTaskResumeAll+0x7c>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	4a2a      	ldr	r2, [pc, #168]	; (8008320 <xTaskResumeAll+0x124>)
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4a27      	ldr	r2, [pc, #156]	; (8008324 <xTaskResumeAll+0x128>)
 8008286:	441a      	add	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3304      	adds	r3, #4
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f7fe fe1b 	bl	8006eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	4b23      	ldr	r3, [pc, #140]	; (8008328 <xTaskResumeAll+0x12c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	429a      	cmp	r2, r3
 80082a0:	d302      	bcc.n	80082a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082a2:	4b22      	ldr	r3, [pc, #136]	; (800832c <xTaskResumeAll+0x130>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a8:	4b1c      	ldr	r3, [pc, #112]	; (800831c <xTaskResumeAll+0x120>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1cb      	bne.n	8008248 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082b6:	f000 fb5f 	bl	8008978 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <xTaskResumeAll+0x134>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d010      	beq.n	80082e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082c6:	f000 f847 	bl	8008358 <xTaskIncrementTick>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80082d0:	4b16      	ldr	r3, [pc, #88]	; (800832c <xTaskResumeAll+0x130>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3b01      	subs	r3, #1
 80082da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f1      	bne.n	80082c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <xTaskResumeAll+0x134>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <xTaskResumeAll+0x130>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082f4:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <xTaskResumeAll+0x138>)
 80082f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008304:	f001 f9de 	bl	80096c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008308:	68bb      	ldr	r3, [r7, #8]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	200040bc 	.word	0x200040bc
 8008318:	20004094 	.word	0x20004094
 800831c:	20004054 	.word	0x20004054
 8008320:	2000409c 	.word	0x2000409c
 8008324:	20003bc4 	.word	0x20003bc4
 8008328:	20003bc0 	.word	0x20003bc0
 800832c:	200040a8 	.word	0x200040a8
 8008330:	200040a4 	.word	0x200040a4
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <xTaskGetTickCount+0x1c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008344:	687b      	ldr	r3, [r7, #4]
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20004098 	.word	0x20004098

08008358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008362:	4b4f      	ldr	r3, [pc, #316]	; (80084a0 <xTaskIncrementTick+0x148>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 808f 	bne.w	800848a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800836c:	4b4d      	ldr	r3, [pc, #308]	; (80084a4 <xTaskIncrementTick+0x14c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008374:	4a4b      	ldr	r2, [pc, #300]	; (80084a4 <xTaskIncrementTick+0x14c>)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d120      	bne.n	80083c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008380:	4b49      	ldr	r3, [pc, #292]	; (80084a8 <xTaskIncrementTick+0x150>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	603b      	str	r3, [r7, #0]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <xTaskIncrementTick+0x46>
 80083a0:	4b41      	ldr	r3, [pc, #260]	; (80084a8 <xTaskIncrementTick+0x150>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	4b41      	ldr	r3, [pc, #260]	; (80084ac <xTaskIncrementTick+0x154>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a3f      	ldr	r2, [pc, #252]	; (80084a8 <xTaskIncrementTick+0x150>)
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4a3f      	ldr	r2, [pc, #252]	; (80084ac <xTaskIncrementTick+0x154>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	4b3e      	ldr	r3, [pc, #248]	; (80084b0 <xTaskIncrementTick+0x158>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3301      	adds	r3, #1
 80083ba:	4a3d      	ldr	r2, [pc, #244]	; (80084b0 <xTaskIncrementTick+0x158>)
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	f000 fadb 	bl	8008978 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083c2:	4b3c      	ldr	r3, [pc, #240]	; (80084b4 <xTaskIncrementTick+0x15c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d349      	bcc.n	8008460 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083cc:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <xTaskIncrementTick+0x150>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d6:	4b37      	ldr	r3, [pc, #220]	; (80084b4 <xTaskIncrementTick+0x15c>)
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	601a      	str	r2, [r3, #0]
					break;
 80083de:	e03f      	b.n	8008460 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e0:	4b31      	ldr	r3, [pc, #196]	; (80084a8 <xTaskIncrementTick+0x150>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d203      	bcs.n	8008400 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083f8:	4a2e      	ldr	r2, [pc, #184]	; (80084b4 <xTaskIncrementTick+0x15c>)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083fe:	e02f      	b.n	8008460 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3304      	adds	r3, #4
 8008404:	4618      	mov	r0, r3
 8008406:	f7fe fdbd 	bl	8006f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d004      	beq.n	800841c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	3318      	adds	r3, #24
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fdb4 	bl	8006f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <xTaskIncrementTick+0x160>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d903      	bls.n	8008430 <xTaskIncrementTick+0xd8>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <xTaskIncrementTick+0x160>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4a1f      	ldr	r2, [pc, #124]	; (80084bc <xTaskIncrementTick+0x164>)
 800843e:	441a      	add	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fe fd3f 	bl	8006eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008450:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <xTaskIncrementTick+0x168>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	429a      	cmp	r2, r3
 8008458:	d3b8      	bcc.n	80083cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845e:	e7b5      	b.n	80083cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008460:	4b17      	ldr	r3, [pc, #92]	; (80084c0 <xTaskIncrementTick+0x168>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	4915      	ldr	r1, [pc, #84]	; (80084bc <xTaskIncrementTick+0x164>)
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	440b      	add	r3, r1
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d901      	bls.n	800847c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <xTaskIncrementTick+0x16c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e004      	b.n	8008494 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xTaskIncrementTick+0x170>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	4a0d      	ldr	r2, [pc, #52]	; (80084c8 <xTaskIncrementTick+0x170>)
 8008492:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008494:	697b      	ldr	r3, [r7, #20]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200040bc 	.word	0x200040bc
 80084a4:	20004098 	.word	0x20004098
 80084a8:	2000404c 	.word	0x2000404c
 80084ac:	20004050 	.word	0x20004050
 80084b0:	200040ac 	.word	0x200040ac
 80084b4:	200040b4 	.word	0x200040b4
 80084b8:	2000409c 	.word	0x2000409c
 80084bc:	20003bc4 	.word	0x20003bc4
 80084c0:	20003bc0 	.word	0x20003bc0
 80084c4:	200040a8 	.word	0x200040a8
 80084c8:	200040a4 	.word	0x200040a4

080084cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d2:	4b2a      	ldr	r3, [pc, #168]	; (800857c <vTaskSwitchContext+0xb0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084da:	4b29      	ldr	r3, [pc, #164]	; (8008580 <vTaskSwitchContext+0xb4>)
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e0:	e046      	b.n	8008570 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80084e2:	4b27      	ldr	r3, [pc, #156]	; (8008580 <vTaskSwitchContext+0xb4>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e8:	4b26      	ldr	r3, [pc, #152]	; (8008584 <vTaskSwitchContext+0xb8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e010      	b.n	8008512 <vTaskSwitchContext+0x46>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <vTaskSwitchContext+0x40>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	607b      	str	r3, [r7, #4]
}
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <vTaskSwitchContext+0x3e>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b01      	subs	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	491d      	ldr	r1, [pc, #116]	; (8008588 <vTaskSwitchContext+0xbc>)
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0e4      	beq.n	80084f0 <vTaskSwitchContext+0x24>
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4a15      	ldr	r2, [pc, #84]	; (8008588 <vTaskSwitchContext+0xbc>)
 8008532:	4413      	add	r3, r2
 8008534:	60bb      	str	r3, [r7, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	3308      	adds	r3, #8
 8008548:	429a      	cmp	r2, r3
 800854a:	d104      	bne.n	8008556 <vTaskSwitchContext+0x8a>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	4a0b      	ldr	r2, [pc, #44]	; (800858c <vTaskSwitchContext+0xc0>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	4a08      	ldr	r2, [pc, #32]	; (8008584 <vTaskSwitchContext+0xb8>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <vTaskSwitchContext+0xc0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3358      	adds	r3, #88	; 0x58
 800856c:	4a08      	ldr	r2, [pc, #32]	; (8008590 <vTaskSwitchContext+0xc4>)
 800856e:	6013      	str	r3, [r2, #0]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	200040bc 	.word	0x200040bc
 8008580:	200040a8 	.word	0x200040a8
 8008584:	2000409c 	.word	0x2000409c
 8008588:	20003bc4 	.word	0x20003bc4
 800858c:	20003bc0 	.word	0x20003bc0
 8008590:	2000001c 	.word	0x2000001c

08008594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	60fb      	str	r3, [r7, #12]
}
 80085b6:	bf00      	nop
 80085b8:	e7fe      	b.n	80085b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085ba:	4b07      	ldr	r3, [pc, #28]	; (80085d8 <vTaskPlaceOnEventList+0x44>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3318      	adds	r3, #24
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7fe fca5 	bl	8006f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085c8:	2101      	movs	r1, #1
 80085ca:	6838      	ldr	r0, [r7, #0]
 80085cc:	f000 fb7e 	bl	8008ccc <prvAddCurrentTaskToDelayedList>
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20003bc0 	.word	0x20003bc0

080085dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	617b      	str	r3, [r7, #20]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <vTaskPlaceOnEventListRestricted+0x54>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3318      	adds	r3, #24
 800860a:	4619      	mov	r1, r3
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7fe fc5c 	bl	8006eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008618:	f04f 33ff 	mov.w	r3, #4294967295
 800861c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	68b8      	ldr	r0, [r7, #8]
 8008622:	f000 fb53 	bl	8008ccc <prvAddCurrentTaskToDelayedList>
	}
 8008626:	bf00      	nop
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20003bc0 	.word	0x20003bc0

08008634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	60fb      	str	r3, [r7, #12]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	3318      	adds	r3, #24
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fc8d 	bl	8006f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800866a:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <xTaskRemoveFromEventList+0xb0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d11d      	bne.n	80086ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fc84 	bl	8006f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <xTaskRemoveFromEventList+0xb4>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d903      	bls.n	8008690 <xTaskRemoveFromEventList+0x5c>
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <xTaskRemoveFromEventList+0xb4>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4a13      	ldr	r2, [pc, #76]	; (80086ec <xTaskRemoveFromEventList+0xb8>)
 800869e:	441a      	add	r2, r3
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fe fc0f 	bl	8006eca <vListInsertEnd>
 80086ac:	e005      	b.n	80086ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	3318      	adds	r3, #24
 80086b2:	4619      	mov	r1, r3
 80086b4:	480e      	ldr	r0, [pc, #56]	; (80086f0 <xTaskRemoveFromEventList+0xbc>)
 80086b6:	f7fe fc08 	bl	8006eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086be:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <xTaskRemoveFromEventList+0xc0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d905      	bls.n	80086d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086c8:	2301      	movs	r3, #1
 80086ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086cc:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <xTaskRemoveFromEventList+0xc4>)
 80086ce:	2201      	movs	r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	e001      	b.n	80086d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086d8:	697b      	ldr	r3, [r7, #20]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	200040bc 	.word	0x200040bc
 80086e8:	2000409c 	.word	0x2000409c
 80086ec:	20003bc4 	.word	0x20003bc4
 80086f0:	20004054 	.word	0x20004054
 80086f4:	20003bc0 	.word	0x20003bc0
 80086f8:	200040a8 	.word	0x200040a8

080086fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <vTaskInternalSetTimeOutState+0x24>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <vTaskInternalSetTimeOutState+0x28>)
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	200040ac 	.word	0x200040ac
 8008724:	20004098 	.word	0x20004098

08008728 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	613b      	str	r3, [r7, #16]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60fb      	str	r3, [r7, #12]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800876a:	f000 ff7b 	bl	8009664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800876e:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <xTaskCheckForTimeOut+0xbc>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008786:	d102      	bne.n	800878e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	e023      	b.n	80087d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <xTaskCheckForTimeOut+0xc0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d007      	beq.n	80087aa <xTaskCheckForTimeOut+0x82>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d302      	bcc.n	80087aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	e015      	b.n	80087d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d20b      	bcs.n	80087cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	1ad2      	subs	r2, r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ff9b 	bl	80086fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	e004      	b.n	80087d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087d2:	2301      	movs	r3, #1
 80087d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087d6:	f000 ff75 	bl	80096c4 <vPortExitCritical>

	return xReturn;
 80087da:	69fb      	ldr	r3, [r7, #28]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20004098 	.word	0x20004098
 80087e8:	200040ac 	.word	0x200040ac

080087ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087f0:	4b03      	ldr	r3, [pc, #12]	; (8008800 <vTaskMissedYield+0x14>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
}
 80087f6:	bf00      	nop
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	200040a8 	.word	0x200040a8

08008804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800880c:	f000 f852 	bl	80088b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <prvIdleTask+0x28>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d9f9      	bls.n	800880c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <prvIdleTask+0x2c>)
 800881a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008828:	e7f0      	b.n	800880c <prvIdleTask+0x8>
 800882a:	bf00      	nop
 800882c:	20003bc4 	.word	0x20003bc4
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
 800883e:	e00c      	b.n	800885a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4a12      	ldr	r2, [pc, #72]	; (8008894 <prvInitialiseTaskLists+0x60>)
 800884c:	4413      	add	r3, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fb0e 	bl	8006e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3301      	adds	r3, #1
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b37      	cmp	r3, #55	; 0x37
 800885e:	d9ef      	bls.n	8008840 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008860:	480d      	ldr	r0, [pc, #52]	; (8008898 <prvInitialiseTaskLists+0x64>)
 8008862:	f7fe fb05 	bl	8006e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008866:	480d      	ldr	r0, [pc, #52]	; (800889c <prvInitialiseTaskLists+0x68>)
 8008868:	f7fe fb02 	bl	8006e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800886c:	480c      	ldr	r0, [pc, #48]	; (80088a0 <prvInitialiseTaskLists+0x6c>)
 800886e:	f7fe faff 	bl	8006e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008872:	480c      	ldr	r0, [pc, #48]	; (80088a4 <prvInitialiseTaskLists+0x70>)
 8008874:	f7fe fafc 	bl	8006e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008878:	480b      	ldr	r0, [pc, #44]	; (80088a8 <prvInitialiseTaskLists+0x74>)
 800887a:	f7fe faf9 	bl	8006e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800887e:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <prvInitialiseTaskLists+0x78>)
 8008880:	4a05      	ldr	r2, [pc, #20]	; (8008898 <prvInitialiseTaskLists+0x64>)
 8008882:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <prvInitialiseTaskLists+0x7c>)
 8008886:	4a05      	ldr	r2, [pc, #20]	; (800889c <prvInitialiseTaskLists+0x68>)
 8008888:	601a      	str	r2, [r3, #0]
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20003bc4 	.word	0x20003bc4
 8008898:	20004024 	.word	0x20004024
 800889c:	20004038 	.word	0x20004038
 80088a0:	20004054 	.word	0x20004054
 80088a4:	20004068 	.word	0x20004068
 80088a8:	20004080 	.word	0x20004080
 80088ac:	2000404c 	.word	0x2000404c
 80088b0:	20004050 	.word	0x20004050

080088b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088ba:	e019      	b.n	80088f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088bc:	f000 fed2 	bl	8009664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c0:	4b10      	ldr	r3, [pc, #64]	; (8008904 <prvCheckTasksWaitingTermination+0x50>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fb59 	bl	8006f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088d2:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <prvCheckTasksWaitingTermination+0x54>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	4a0b      	ldr	r2, [pc, #44]	; (8008908 <prvCheckTasksWaitingTermination+0x54>)
 80088da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <prvCheckTasksWaitingTermination+0x58>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	4a0a      	ldr	r2, [pc, #40]	; (800890c <prvCheckTasksWaitingTermination+0x58>)
 80088e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088e6:	f000 feed 	bl	80096c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f810 	bl	8008910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088f0:	4b06      	ldr	r3, [pc, #24]	; (800890c <prvCheckTasksWaitingTermination+0x58>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e1      	bne.n	80088bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20004068 	.word	0x20004068
 8008908:	20004094 	.word	0x20004094
 800890c:	2000407c 	.word	0x2000407c

08008910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3358      	adds	r3, #88	; 0x58
 800891c:	4618      	mov	r0, r3
 800891e:	f002 f8bb 	bl	800aa98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f885 	bl	8009a40 <vPortFree>
				vPortFree( pxTCB );
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 f882 	bl	8009a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800893c:	e018      	b.n	8008970 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8008944:	2b01      	cmp	r3, #1
 8008946:	d103      	bne.n	8008950 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f879 	bl	8009a40 <vPortFree>
	}
 800894e:	e00f      	b.n	8008970 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8008956:	2b02      	cmp	r3, #2
 8008958:	d00a      	beq.n	8008970 <prvDeleteTCB+0x60>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	60fb      	str	r3, [r7, #12]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <prvDeleteTCB+0x5e>
	}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800897e:	4b0c      	ldr	r3, [pc, #48]	; (80089b0 <prvResetNextTaskUnblockTime+0x38>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <prvResetNextTaskUnblockTime+0x3c>)
 800898a:	f04f 32ff 	mov.w	r2, #4294967295
 800898e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008990:	e008      	b.n	80089a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <prvResetNextTaskUnblockTime+0x38>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a04      	ldr	r2, [pc, #16]	; (80089b4 <prvResetNextTaskUnblockTime+0x3c>)
 80089a2:	6013      	str	r3, [r2, #0]
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	2000404c 	.word	0x2000404c
 80089b4:	200040b4 	.word	0x200040b4

080089b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089be:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <xTaskGetSchedulerState+0x34>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d102      	bne.n	80089cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089c6:	2301      	movs	r3, #1
 80089c8:	607b      	str	r3, [r7, #4]
 80089ca:	e008      	b.n	80089de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089cc:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <xTaskGetSchedulerState+0x38>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089d4:	2302      	movs	r3, #2
 80089d6:	607b      	str	r3, [r7, #4]
 80089d8:	e001      	b.n	80089de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089de:	687b      	ldr	r3, [r7, #4]
	}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	200040a0 	.word	0x200040a0
 80089f0:	200040bc 	.word	0x200040bc

080089f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d051      	beq.n	8008aae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0e:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <xTaskPriorityInherit+0xc4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d241      	bcs.n	8008a9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	db06      	blt.n	8008a2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a20:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <xTaskPriorityInherit+0xc4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	6959      	ldr	r1, [r3, #20]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4a1f      	ldr	r2, [pc, #124]	; (8008abc <xTaskPriorityInherit+0xc8>)
 8008a40:	4413      	add	r3, r2
 8008a42:	4299      	cmp	r1, r3
 8008a44:	d122      	bne.n	8008a8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fa9a 	bl	8006f84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a50:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <xTaskPriorityInherit+0xc4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b18      	ldr	r3, [pc, #96]	; (8008ac0 <xTaskPriorityInherit+0xcc>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d903      	bls.n	8008a6e <xTaskPriorityInherit+0x7a>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <xTaskPriorityInherit+0xcc>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4a10      	ldr	r2, [pc, #64]	; (8008abc <xTaskPriorityInherit+0xc8>)
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7fe fa20 	bl	8006eca <vListInsertEnd>
 8008a8a:	e004      	b.n	8008a96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <xTaskPriorityInherit+0xc4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a96:	2301      	movs	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	e008      	b.n	8008aae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aa0:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <xTaskPriorityInherit+0xc4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d201      	bcs.n	8008aae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008aae:	68fb      	ldr	r3, [r7, #12]
	}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20003bc0 	.word	0x20003bc0
 8008abc:	20003bc4 	.word	0x20003bc4
 8008ac0:	2000409c 	.word	0x2000409c

08008ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d056      	beq.n	8008b88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ada:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <xTaskPriorityDisinherit+0xd0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d00a      	beq.n	8008afa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	60fb      	str	r3, [r7, #12]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1c:	1e5a      	subs	r2, r3, #1
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d02c      	beq.n	8008b88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d128      	bne.n	8008b88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fa22 	bl	8006f84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <xTaskPriorityDisinherit+0xd4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d903      	bls.n	8008b68 <xTaskPriorityDisinherit+0xa4>
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	4a0c      	ldr	r2, [pc, #48]	; (8008b98 <xTaskPriorityDisinherit+0xd4>)
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <xTaskPriorityDisinherit+0xd8>)
 8008b76:	441a      	add	r2, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7fe f9a3 	bl	8006eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b84:	2301      	movs	r3, #1
 8008b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b88:	697b      	ldr	r3, [r7, #20]
	}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20003bc0 	.word	0x20003bc0
 8008b98:	2000409c 	.word	0x2000409c
 8008b9c:	20003bc4 	.word	0x20003bc4

08008ba0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d06a      	beq.n	8008c8e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d902      	bls.n	8008be6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	e002      	b.n	8008bec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d04b      	beq.n	8008c8e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d146      	bne.n	8008c8e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d10a      	bne.n	8008c20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	60bb      	str	r3, [r7, #8]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	db04      	blt.n	8008c3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	6959      	ldr	r1, [r3, #20]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4a13      	ldr	r2, [pc, #76]	; (8008c9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	4299      	cmp	r1, r3
 8008c52:	d11c      	bne.n	8008c8e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	3304      	adds	r3, #4
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe f993 	bl	8006f84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c62:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d903      	bls.n	8008c72 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	4a0c      	ldr	r2, [pc, #48]	; (8008ca0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4a07      	ldr	r2, [pc, #28]	; (8008c9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c80:	441a      	add	r2, r3
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7fe f91e 	bl	8006eca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c8e:	bf00      	nop
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20003bc0 	.word	0x20003bc0
 8008c9c:	20003bc4 	.word	0x20003bc4
 8008ca0:	2000409c 	.word	0x2000409c

08008ca4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cb6:	3201      	adds	r2, #1
 8008cb8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008cba:	4b03      	ldr	r3, [pc, #12]	; (8008cc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
	}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	20003bc0 	.word	0x20003bc0

08008ccc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cd6:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <prvAddCurrentTaskToDelayedList+0x90>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cdc:	4b20      	ldr	r3, [pc, #128]	; (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe f94e 	bl	8006f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d10a      	bne.n	8008d06 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf6:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4819      	ldr	r0, [pc, #100]	; (8008d64 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d00:	f7fe f8e3 	bl	8006eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d04:	e026      	b.n	8008d54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d0e:	4b14      	ldr	r3, [pc, #80]	; (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d209      	bcs.n	8008d32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1e:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7fe f8f1 	bl	8006f12 <vListInsert>
}
 8008d30:	e010      	b.n	8008d54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d32:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe f8e7 	bl	8006f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d202      	bcs.n	8008d54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d4e:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6013      	str	r3, [r2, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20004098 	.word	0x20004098
 8008d60:	20003bc0 	.word	0x20003bc0
 8008d64:	20004080 	.word	0x20004080
 8008d68:	20004050 	.word	0x20004050
 8008d6c:	2000404c 	.word	0x2000404c
 8008d70:	200040b4 	.word	0x200040b4

08008d74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d7e:	f000 fb07 	bl	8009390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <xTimerCreateTimerTask+0x80>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d021      	beq.n	8008dce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d92:	1d3a      	adds	r2, r7, #4
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe f84d 	bl	8006e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	2302      	movs	r3, #2
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	460a      	mov	r2, r1
 8008db4:	4910      	ldr	r1, [pc, #64]	; (8008df8 <xTimerCreateTimerTask+0x84>)
 8008db6:	4811      	ldr	r0, [pc, #68]	; (8008dfc <xTimerCreateTimerTask+0x88>)
 8008db8:	f7fe ff8a 	bl	8007cd0 <xTaskCreateStatic>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4a10      	ldr	r2, [pc, #64]	; (8008e00 <xTimerCreateTimerTask+0x8c>)
 8008dc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dc2:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <xTimerCreateTimerTask+0x8c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dea:	697b      	ldr	r3, [r7, #20]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200040f0 	.word	0x200040f0
 8008df8:	080106bc 	.word	0x080106bc
 8008dfc:	08008f39 	.word	0x08008f39
 8008e00:	200040f4 	.word	0x200040f4

08008e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	623b      	str	r3, [r7, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e32:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <xTimerGenericCommand+0x98>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d02a      	beq.n	8008e90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2b05      	cmp	r3, #5
 8008e4a:	dc18      	bgt.n	8008e7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e4c:	f7ff fdb4 	bl	80089b8 <xTaskGetSchedulerState>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d109      	bne.n	8008e6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e56:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <xTimerGenericCommand+0x98>)
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f107 0110 	add.w	r1, r7, #16
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e62:	f7fe fa29 	bl	80072b8 <xQueueGenericSend>
 8008e66:	6278      	str	r0, [r7, #36]	; 0x24
 8008e68:	e012      	b.n	8008e90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <xTimerGenericCommand+0x98>)
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	f107 0110 	add.w	r1, r7, #16
 8008e72:	2300      	movs	r3, #0
 8008e74:	2200      	movs	r2, #0
 8008e76:	f7fe fa1f 	bl	80072b8 <xQueueGenericSend>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e7c:	e008      	b.n	8008e90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <xTimerGenericCommand+0x98>)
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	f107 0110 	add.w	r1, r7, #16
 8008e86:	2300      	movs	r3, #0
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	f7fe fb13 	bl	80074b4 <xQueueGenericSendFromISR>
 8008e8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3728      	adds	r7, #40	; 0x28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200040f0 	.word	0x200040f0

08008ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eaa:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <prvProcessExpiredTimer+0x94>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe f863 	bl	8006f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d022      	beq.n	8008f12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	18d1      	adds	r1, r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	6978      	ldr	r0, [r7, #20]
 8008eda:	f000 f8d1 	bl	8009080 <prvInsertTimerInActiveList>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01f      	beq.n	8008f24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	2100      	movs	r1, #0
 8008eee:	6978      	ldr	r0, [r7, #20]
 8008ef0:	f7ff ff88 	bl	8008e04 <xTimerGenericCommand>
 8008ef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d113      	bne.n	8008f24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60fb      	str	r3, [r7, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	6978      	ldr	r0, [r7, #20]
 8008f2a:	4798      	blx	r3
}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200040e8 	.word	0x200040e8

08008f38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f857 	bl	8008ff8 <prvGetNextExpireTime>
 8008f4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f803 	bl	8008f5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f56:	f000 f8d5 	bl	8009104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f5a:	e7f1      	b.n	8008f40 <prvTimerTask+0x8>

08008f5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f66:	f7ff f93b 	bl	80081e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f866 	bl	8009040 <prvSampleTimeNow>
 8008f74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d130      	bne.n	8008fde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <prvProcessTimerOrBlockTask+0x3c>
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d806      	bhi.n	8008f98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f8a:	f7ff f937 	bl	80081fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ff85 	bl	8008ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f96:	e024      	b.n	8008fe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <prvProcessTimerOrBlockTask+0x90>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <prvProcessTimerOrBlockTask+0x50>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e000      	b.n	8008fae <prvProcessTimerOrBlockTask+0x52>
 8008fac:	2300      	movs	r3, #0
 8008fae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <prvProcessTimerOrBlockTask+0x94>)
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f7fe fe53 	bl	8007c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fc2:	f7ff f91b 	bl	80081fc <xTaskResumeAll>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <prvProcessTimerOrBlockTask+0x98>)
 8008fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	f3bf 8f6f 	isb	sy
}
 8008fdc:	e001      	b.n	8008fe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fde:	f7ff f90d 	bl	80081fc <xTaskResumeAll>
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	200040ec 	.word	0x200040ec
 8008ff0:	200040f0 	.word	0x200040f0
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <prvGetNextExpireTime+0x44>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <prvGetNextExpireTime+0x16>
 800900a:	2201      	movs	r2, #1
 800900c:	e000      	b.n	8009010 <prvGetNextExpireTime+0x18>
 800900e:	2200      	movs	r2, #0
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800901c:	4b07      	ldr	r3, [pc, #28]	; (800903c <prvGetNextExpireTime+0x44>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e001      	b.n	800902c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800902c:	68fb      	ldr	r3, [r7, #12]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	200040e8 	.word	0x200040e8

08009040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009048:	f7ff f976 	bl	8008338 <xTaskGetTickCount>
 800904c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800904e:	4b0b      	ldr	r3, [pc, #44]	; (800907c <prvSampleTimeNow+0x3c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	429a      	cmp	r2, r3
 8009056:	d205      	bcs.n	8009064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009058:	f000 f936 	bl	80092c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	e002      	b.n	800906a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800906a:	4a04      	ldr	r2, [pc, #16]	; (800907c <prvSampleTimeNow+0x3c>)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	200040f8 	.word	0x200040f8

08009080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d812      	bhi.n	80090cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	1ad2      	subs	r2, r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d302      	bcc.n	80090ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e01b      	b.n	80090f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <prvInsertTimerInActiveList+0x7c>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fd ff24 	bl	8006f12 <vListInsert>
 80090ca:	e012      	b.n	80090f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d206      	bcs.n	80090e2 <prvInsertTimerInActiveList+0x62>
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d302      	bcc.n	80090e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090dc:	2301      	movs	r3, #1
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e007      	b.n	80090f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <prvInsertTimerInActiveList+0x80>)
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4619      	mov	r1, r3
 80090ec:	4610      	mov	r0, r2
 80090ee:	f7fd ff10 	bl	8006f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090f2:	697b      	ldr	r3, [r7, #20]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	200040ec 	.word	0x200040ec
 8009100:	200040e8 	.word	0x200040e8

08009104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08e      	sub	sp, #56	; 0x38
 8009108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800910a:	e0ca      	b.n	80092a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	da18      	bge.n	8009144 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009112:	1d3b      	adds	r3, r7, #4
 8009114:	3304      	adds	r3, #4
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	61fb      	str	r3, [r7, #28]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913a:	6850      	ldr	r0, [r2, #4]
 800913c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913e:	6892      	ldr	r2, [r2, #8]
 8009140:	4611      	mov	r1, r2
 8009142:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f2c0 80aa 	blt.w	80092a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d004      	beq.n	8009162 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	3304      	adds	r3, #4
 800915c:	4618      	mov	r0, r3
 800915e:	f7fd ff11 	bl	8006f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009162:	463b      	mov	r3, r7
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff ff6b 	bl	8009040 <prvSampleTimeNow>
 800916a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b09      	cmp	r3, #9
 8009170:	f200 8097 	bhi.w	80092a2 <prvProcessReceivedCommands+0x19e>
 8009174:	a201      	add	r2, pc, #4	; (adr r2, 800917c <prvProcessReceivedCommands+0x78>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	080091a5 	.word	0x080091a5
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091a5 	.word	0x080091a5
 8009188:	08009219 	.word	0x08009219
 800918c:	0800922d 	.word	0x0800922d
 8009190:	08009277 	.word	0x08009277
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091a5 	.word	0x080091a5
 800919c:	08009219 	.word	0x08009219
 80091a0:	0800922d 	.word	0x0800922d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	18d1      	adds	r1, r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c4:	f7ff ff5c 	bl	8009080 <prvInsertTimerInActiveList>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d069      	beq.n	80092a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d05e      	beq.n	80092a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	441a      	add	r2, r3
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	2300      	movs	r3, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f6:	f7ff fe05 	bl	8008e04 <xTimerGenericCommand>
 80091fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d14f      	bne.n	80092a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	61bb      	str	r3, [r7, #24]
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921e:	f023 0301 	bic.w	r3, r3, #1
 8009222:	b2da      	uxtb	r2, r3
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800922a:	e03a      	b.n	80092a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	b2da      	uxtb	r2, r3
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	617b      	str	r3, [r7, #20]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	18d1      	adds	r1, r2, r3
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009270:	f7ff ff06 	bl	8009080 <prvInsertTimerInActiveList>
					break;
 8009274:	e015      	b.n	80092a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009286:	f000 fbdb 	bl	8009a40 <vPortFree>
 800928a:	e00a      	b.n	80092a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	b2da      	uxtb	r2, r3
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800929e:	e000      	b.n	80092a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80092a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <prvProcessReceivedCommands+0x1c0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	1d39      	adds	r1, r7, #4
 80092a8:	2200      	movs	r2, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe f99e 	bl	80075ec <xQueueReceive>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f47f af2a 	bne.w	800910c <prvProcessReceivedCommands+0x8>
	}
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	3730      	adds	r7, #48	; 0x30
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200040f0 	.word	0x200040f0

080092c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092ce:	e048      	b.n	8009362 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092d0:	4b2d      	ldr	r3, [pc, #180]	; (8009388 <prvSwitchTimerLists+0xc0>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092da:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <prvSwitchTimerLists+0xc0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fd fe4b 	bl	8006f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	d02e      	beq.n	8009362 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4413      	add	r3, r2
 800930c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	429a      	cmp	r2, r3
 8009314:	d90e      	bls.n	8009334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009322:	4b19      	ldr	r3, [pc, #100]	; (8009388 <prvSwitchTimerLists+0xc0>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3304      	adds	r3, #4
 800932a:	4619      	mov	r1, r3
 800932c:	4610      	mov	r0, r2
 800932e:	f7fd fdf0 	bl	8006f12 <vListInsert>
 8009332:	e016      	b.n	8009362 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009334:	2300      	movs	r3, #0
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	2300      	movs	r3, #0
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	2100      	movs	r1, #0
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fd60 	bl	8008e04 <xTimerGenericCommand>
 8009344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	603b      	str	r3, [r7, #0]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <prvSwitchTimerLists+0xc0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1b1      	bne.n	80092d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <prvSwitchTimerLists+0xc0>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009372:	4b06      	ldr	r3, [pc, #24]	; (800938c <prvSwitchTimerLists+0xc4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a04      	ldr	r2, [pc, #16]	; (8009388 <prvSwitchTimerLists+0xc0>)
 8009378:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800937a:	4a04      	ldr	r2, [pc, #16]	; (800938c <prvSwitchTimerLists+0xc4>)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	6013      	str	r3, [r2, #0]
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200040e8 	.word	0x200040e8
 800938c:	200040ec 	.word	0x200040ec

08009390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009396:	f000 f965 	bl	8009664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800939a:	4b15      	ldr	r3, [pc, #84]	; (80093f0 <prvCheckForValidListAndQueue+0x60>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d120      	bne.n	80093e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093a2:	4814      	ldr	r0, [pc, #80]	; (80093f4 <prvCheckForValidListAndQueue+0x64>)
 80093a4:	f7fd fd64 	bl	8006e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093a8:	4813      	ldr	r0, [pc, #76]	; (80093f8 <prvCheckForValidListAndQueue+0x68>)
 80093aa:	f7fd fd61 	bl	8006e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093ae:	4b13      	ldr	r3, [pc, #76]	; (80093fc <prvCheckForValidListAndQueue+0x6c>)
 80093b0:	4a10      	ldr	r2, [pc, #64]	; (80093f4 <prvCheckForValidListAndQueue+0x64>)
 80093b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093b4:	4b12      	ldr	r3, [pc, #72]	; (8009400 <prvCheckForValidListAndQueue+0x70>)
 80093b6:	4a10      	ldr	r2, [pc, #64]	; (80093f8 <prvCheckForValidListAndQueue+0x68>)
 80093b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093ba:	2300      	movs	r3, #0
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4b11      	ldr	r3, [pc, #68]	; (8009404 <prvCheckForValidListAndQueue+0x74>)
 80093c0:	4a11      	ldr	r2, [pc, #68]	; (8009408 <prvCheckForValidListAndQueue+0x78>)
 80093c2:	2110      	movs	r1, #16
 80093c4:	200a      	movs	r0, #10
 80093c6:	f7fd fe6f 	bl	80070a8 <xQueueGenericCreateStatic>
 80093ca:	4603      	mov	r3, r0
 80093cc:	4a08      	ldr	r2, [pc, #32]	; (80093f0 <prvCheckForValidListAndQueue+0x60>)
 80093ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <prvCheckForValidListAndQueue+0x60>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <prvCheckForValidListAndQueue+0x60>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	490b      	ldr	r1, [pc, #44]	; (800940c <prvCheckForValidListAndQueue+0x7c>)
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fc18 	bl	8007c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093e4:	f000 f96e 	bl	80096c4 <vPortExitCritical>
}
 80093e8:	bf00      	nop
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	200040f0 	.word	0x200040f0
 80093f4:	200040c0 	.word	0x200040c0
 80093f8:	200040d4 	.word	0x200040d4
 80093fc:	200040e8 	.word	0x200040e8
 8009400:	200040ec 	.word	0x200040ec
 8009404:	2000419c 	.word	0x2000419c
 8009408:	200040fc 	.word	0x200040fc
 800940c:	080106c4 	.word	0x080106c4

08009410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3b04      	subs	r3, #4
 8009420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3b04      	subs	r3, #4
 800942e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f023 0201 	bic.w	r2, r3, #1
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3b04      	subs	r3, #4
 800943e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009440:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <pxPortInitialiseStack+0x64>)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3b14      	subs	r3, #20
 800944a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3b04      	subs	r3, #4
 8009456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f06f 0202 	mvn.w	r2, #2
 800945e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3b20      	subs	r3, #32
 8009464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009466:	68fb      	ldr	r3, [r7, #12]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	08009479 	.word	0x08009479

08009478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <prvTaskExitError+0x54>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d00a      	beq.n	80094a2 <prvTaskExitError+0x2a>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60fb      	str	r3, [r7, #12]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <prvTaskExitError+0x28>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	60bb      	str	r3, [r7, #8]
}
 80094b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094b6:	bf00      	nop
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0fc      	beq.n	80094b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20000018 	.word	0x20000018

080094d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <pxCurrentTCBConst2>)
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	6808      	ldr	r0, [r1, #0]
 80094d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f380 8809 	msr	PSP, r0
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8811 	msr	BASEPRI, r0
 80094ea:	4770      	bx	lr
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst2>:
 80094f0:	20003bc0 	.word	0x20003bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094f8:	4808      	ldr	r0, [pc, #32]	; (800951c <prvPortStartFirstTask+0x24>)
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f380 8808 	msr	MSP, r0
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8814 	msr	CONTROL, r0
 800950a:	b662      	cpsie	i
 800950c:	b661      	cpsie	f
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	df00      	svc	0
 8009518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800951a:	bf00      	nop
 800951c:	e000ed08 	.word	0xe000ed08

08009520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009526:	4b46      	ldr	r3, [pc, #280]	; (8009640 <xPortStartScheduler+0x120>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a46      	ldr	r2, [pc, #280]	; (8009644 <xPortStartScheduler+0x124>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d10a      	bne.n	8009546 <xPortStartScheduler+0x26>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	613b      	str	r3, [r7, #16]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009546:	4b3e      	ldr	r3, [pc, #248]	; (8009640 <xPortStartScheduler+0x120>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a3f      	ldr	r2, [pc, #252]	; (8009648 <xPortStartScheduler+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10a      	bne.n	8009566 <xPortStartScheduler+0x46>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009566:	4b39      	ldr	r3, [pc, #228]	; (800964c <xPortStartScheduler+0x12c>)
 8009568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	22ff      	movs	r2, #255	; 0xff
 8009576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009588:	b2da      	uxtb	r2, r3
 800958a:	4b31      	ldr	r3, [pc, #196]	; (8009650 <xPortStartScheduler+0x130>)
 800958c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800958e:	4b31      	ldr	r3, [pc, #196]	; (8009654 <xPortStartScheduler+0x134>)
 8009590:	2207      	movs	r2, #7
 8009592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009594:	e009      	b.n	80095aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009596:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <xPortStartScheduler+0x134>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3b01      	subs	r3, #1
 800959c:	4a2d      	ldr	r2, [pc, #180]	; (8009654 <xPortStartScheduler+0x134>)
 800959e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b2:	2b80      	cmp	r3, #128	; 0x80
 80095b4:	d0ef      	beq.n	8009596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095b6:	4b27      	ldr	r3, [pc, #156]	; (8009654 <xPortStartScheduler+0x134>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1c3 0307 	rsb	r3, r3, #7
 80095be:	2b04      	cmp	r3, #4
 80095c0:	d00a      	beq.n	80095d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	60bb      	str	r3, [r7, #8]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095d8:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <xPortStartScheduler+0x134>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <xPortStartScheduler+0x134>)
 80095e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095e2:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <xPortStartScheduler+0x134>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ea:	4a1a      	ldr	r2, [pc, #104]	; (8009654 <xPortStartScheduler+0x134>)
 80095ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095f6:	4b18      	ldr	r3, [pc, #96]	; (8009658 <xPortStartScheduler+0x138>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a17      	ldr	r2, [pc, #92]	; (8009658 <xPortStartScheduler+0x138>)
 80095fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <xPortStartScheduler+0x138>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a14      	ldr	r2, [pc, #80]	; (8009658 <xPortStartScheduler+0x138>)
 8009608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800960c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800960e:	f000 f8dd 	bl	80097cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009612:	4b12      	ldr	r3, [pc, #72]	; (800965c <xPortStartScheduler+0x13c>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009618:	f000 f8fc 	bl	8009814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800961c:	4b10      	ldr	r3, [pc, #64]	; (8009660 <xPortStartScheduler+0x140>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a0f      	ldr	r2, [pc, #60]	; (8009660 <xPortStartScheduler+0x140>)
 8009622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009628:	f7ff ff66 	bl	80094f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800962c:	f7fe ff4e 	bl	80084cc <vTaskSwitchContext>
	prvTaskExitError();
 8009630:	f7ff ff22 	bl	8009478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	e000ed00 	.word	0xe000ed00
 8009644:	410fc271 	.word	0x410fc271
 8009648:	410fc270 	.word	0x410fc270
 800964c:	e000e400 	.word	0xe000e400
 8009650:	200041ec 	.word	0x200041ec
 8009654:	200041f0 	.word	0x200041f0
 8009658:	e000ed20 	.word	0xe000ed20
 800965c:	20000018 	.word	0x20000018
 8009660:	e000ef34 	.word	0xe000ef34

08009664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	607b      	str	r3, [r7, #4]
}
 800967c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <vPortEnterCritical+0x58>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	4a0d      	ldr	r2, [pc, #52]	; (80096bc <vPortEnterCritical+0x58>)
 8009686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <vPortEnterCritical+0x58>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d10f      	bne.n	80096b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009690:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <vPortEnterCritical+0x5c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	603b      	str	r3, [r7, #0]
}
 80096ac:	bf00      	nop
 80096ae:	e7fe      	b.n	80096ae <vPortEnterCritical+0x4a>
	}
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20000018 	.word	0x20000018
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <vPortExitCritical+0x50>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <vPortExitCritical+0x24>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	607b      	str	r3, [r7, #4]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <vPortExitCritical+0x50>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	4a09      	ldr	r2, [pc, #36]	; (8009714 <vPortExitCritical+0x50>)
 80096f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096f2:	4b08      	ldr	r3, [pc, #32]	; (8009714 <vPortExitCritical+0x50>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d105      	bne.n	8009706 <vPortExitCritical+0x42>
 80096fa:	2300      	movs	r3, #0
 80096fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f383 8811 	msr	BASEPRI, r3
}
 8009704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009706:	bf00      	nop
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	20000018 	.word	0x20000018
	...

08009720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009720:	f3ef 8009 	mrs	r0, PSP
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	4b15      	ldr	r3, [pc, #84]	; (8009780 <pxCurrentTCBConst>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	f01e 0f10 	tst.w	lr, #16
 8009730:	bf08      	it	eq
 8009732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973a:	6010      	str	r0, [r2, #0]
 800973c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009744:	f380 8811 	msr	BASEPRI, r0
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f7fe febc 	bl	80084cc <vTaskSwitchContext>
 8009754:	f04f 0000 	mov.w	r0, #0
 8009758:	f380 8811 	msr	BASEPRI, r0
 800975c:	bc09      	pop	{r0, r3}
 800975e:	6819      	ldr	r1, [r3, #0]
 8009760:	6808      	ldr	r0, [r1, #0]
 8009762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009766:	f01e 0f10 	tst.w	lr, #16
 800976a:	bf08      	it	eq
 800976c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009770:	f380 8809 	msr	PSP, r0
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst>:
 8009780:	20003bc0 	.word	0x20003bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	607b      	str	r3, [r7, #4]
}
 80097a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097a2:	f7fe fdd9 	bl	8008358 <xTaskIncrementTick>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <xPortSysTickHandler+0x40>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	2300      	movs	r3, #0
 80097b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f383 8811 	msr	BASEPRI, r3
}
 80097be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <vPortSetupTimerInterrupt+0x34>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097d6:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <vPortSetupTimerInterrupt+0x38>)
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <vPortSetupTimerInterrupt+0x3c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a0a      	ldr	r2, [pc, #40]	; (800980c <vPortSetupTimerInterrupt+0x40>)
 80097e2:	fba2 2303 	umull	r2, r3, r2, r3
 80097e6:	099b      	lsrs	r3, r3, #6
 80097e8:	4a09      	ldr	r2, [pc, #36]	; (8009810 <vPortSetupTimerInterrupt+0x44>)
 80097ea:	3b01      	subs	r3, #1
 80097ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097ee:	4b04      	ldr	r3, [pc, #16]	; (8009800 <vPortSetupTimerInterrupt+0x34>)
 80097f0:	2207      	movs	r2, #7
 80097f2:	601a      	str	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	e000e010 	.word	0xe000e010
 8009804:	e000e018 	.word	0xe000e018
 8009808:	2000000c 	.word	0x2000000c
 800980c:	10624dd3 	.word	0x10624dd3
 8009810:	e000e014 	.word	0xe000e014

08009814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009824 <vPortEnableVFP+0x10>
 8009818:	6801      	ldr	r1, [r0, #0]
 800981a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800981e:	6001      	str	r1, [r0, #0]
 8009820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009822:	bf00      	nop
 8009824:	e000ed88 	.word	0xe000ed88

08009828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800982e:	f3ef 8305 	mrs	r3, IPSR
 8009832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b0f      	cmp	r3, #15
 8009838:	d914      	bls.n	8009864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800983a:	4a17      	ldr	r2, [pc, #92]	; (8009898 <vPortValidateInterruptPriority+0x70>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009844:	4b15      	ldr	r3, [pc, #84]	; (800989c <vPortValidateInterruptPriority+0x74>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	7afa      	ldrb	r2, [r7, #11]
 800984a:	429a      	cmp	r2, r3
 800984c:	d20a      	bcs.n	8009864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	607b      	str	r3, [r7, #4]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009864:	4b0e      	ldr	r3, [pc, #56]	; (80098a0 <vPortValidateInterruptPriority+0x78>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800986c:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <vPortValidateInterruptPriority+0x7c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d90a      	bls.n	800988a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	603b      	str	r3, [r7, #0]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <vPortValidateInterruptPriority+0x60>
	}
 800988a:	bf00      	nop
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	e000e3f0 	.word	0xe000e3f0
 800989c:	200041ec 	.word	0x200041ec
 80098a0:	e000ed0c 	.word	0xe000ed0c
 80098a4:	200041f0 	.word	0x200041f0

080098a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098b4:	f7fe fc94 	bl	80081e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098b8:	4b5b      	ldr	r3, [pc, #364]	; (8009a28 <pvPortMalloc+0x180>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098c0:	f000 f920 	bl	8009b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098c4:	4b59      	ldr	r3, [pc, #356]	; (8009a2c <pvPortMalloc+0x184>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f040 8093 	bne.w	80099f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01d      	beq.n	8009914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098d8:	2208      	movs	r2, #8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d014      	beq.n	8009914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	3308      	adds	r3, #8
 80098f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <pvPortMalloc+0x6c>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	617b      	str	r3, [r7, #20]
}
 8009910:	bf00      	nop
 8009912:	e7fe      	b.n	8009912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d06e      	beq.n	80099f8 <pvPortMalloc+0x150>
 800991a:	4b45      	ldr	r3, [pc, #276]	; (8009a30 <pvPortMalloc+0x188>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	429a      	cmp	r2, r3
 8009922:	d869      	bhi.n	80099f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009924:	4b43      	ldr	r3, [pc, #268]	; (8009a34 <pvPortMalloc+0x18c>)
 8009926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009928:	4b42      	ldr	r3, [pc, #264]	; (8009a34 <pvPortMalloc+0x18c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800992e:	e004      	b.n	800993a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	429a      	cmp	r2, r3
 8009942:	d903      	bls.n	800994c <pvPortMalloc+0xa4>
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f1      	bne.n	8009930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800994c:	4b36      	ldr	r3, [pc, #216]	; (8009a28 <pvPortMalloc+0x180>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	429a      	cmp	r2, r3
 8009954:	d050      	beq.n	80099f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2208      	movs	r2, #8
 800995c:	4413      	add	r3, r2
 800995e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	1ad2      	subs	r2, r2, r3
 8009970:	2308      	movs	r3, #8
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	429a      	cmp	r2, r3
 8009976:	d91f      	bls.n	80099b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <pvPortMalloc+0xf8>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	613b      	str	r3, [r7, #16]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099b2:	69b8      	ldr	r0, [r7, #24]
 80099b4:	f000 f90a 	bl	8009bcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099b8:	4b1d      	ldr	r3, [pc, #116]	; (8009a30 <pvPortMalloc+0x188>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	4a1b      	ldr	r2, [pc, #108]	; (8009a30 <pvPortMalloc+0x188>)
 80099c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099c6:	4b1a      	ldr	r3, [pc, #104]	; (8009a30 <pvPortMalloc+0x188>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	4b1b      	ldr	r3, [pc, #108]	; (8009a38 <pvPortMalloc+0x190>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d203      	bcs.n	80099da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099d2:	4b17      	ldr	r3, [pc, #92]	; (8009a30 <pvPortMalloc+0x188>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a18      	ldr	r2, [pc, #96]	; (8009a38 <pvPortMalloc+0x190>)
 80099d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	4b13      	ldr	r3, [pc, #76]	; (8009a2c <pvPortMalloc+0x184>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <pvPortMalloc+0x194>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	4a11      	ldr	r2, [pc, #68]	; (8009a3c <pvPortMalloc+0x194>)
 80099f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099f8:	f7fe fc00 	bl	80081fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00a      	beq.n	8009a1c <pvPortMalloc+0x174>
	__asm volatile
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	60fb      	str	r3, [r7, #12]
}
 8009a18:	bf00      	nop
 8009a1a:	e7fe      	b.n	8009a1a <pvPortMalloc+0x172>
	return pvReturn;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3728      	adds	r7, #40	; 0x28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20017a7c 	.word	0x20017a7c
 8009a2c:	20017a90 	.word	0x20017a90
 8009a30:	20017a80 	.word	0x20017a80
 8009a34:	20017a74 	.word	0x20017a74
 8009a38:	20017a84 	.word	0x20017a84
 8009a3c:	20017a88 	.word	0x20017a88

08009a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d04d      	beq.n	8009aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a52:	2308      	movs	r3, #8
 8009a54:	425b      	negs	r3, r3
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	4413      	add	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <vPortFree+0xb8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4013      	ands	r3, r2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <vPortFree+0x44>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	60fb      	str	r3, [r7, #12]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <vPortFree+0x62>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60bb      	str	r3, [r7, #8]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <vPortFree+0xb8>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01e      	beq.n	8009aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d11a      	bne.n	8009aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <vPortFree+0xb8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	43db      	mvns	r3, r3
 8009ac2:	401a      	ands	r2, r3
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ac8:	f7fe fb8a 	bl	80081e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <vPortFree+0xbc>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	4a09      	ldr	r2, [pc, #36]	; (8009afc <vPortFree+0xbc>)
 8009ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f000 f876 	bl	8009bcc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <vPortFree+0xc0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <vPortFree+0xc0>)
 8009ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009aea:	f7fe fb87 	bl	80081fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20017a90 	.word	0x20017a90
 8009afc:	20017a80 	.word	0x20017a80
 8009b00:	20017a8c 	.word	0x20017a8c

08009b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b0a:	4b29      	ldr	r3, [pc, #164]	; (8009bb0 <prvHeapInit+0xac>)
 8009b0c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b0e:	4b29      	ldr	r3, [pc, #164]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b10:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0307 	and.w	r3, r3, #7
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00c      	beq.n	8009b36 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3307      	adds	r3, #7
 8009b20:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f023 0307 	bic.w	r3, r3, #7
 8009b28:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	4a20      	ldr	r2, [pc, #128]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b32:	4413      	add	r3, r2
 8009b34:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b3a:	4a1f      	ldr	r2, [pc, #124]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b40:	4b1d      	ldr	r3, [pc, #116]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b4e:	2208      	movs	r2, #8
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f023 0307 	bic.w	r3, r3, #7
 8009b5c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4a16      	ldr	r2, [pc, #88]	; (8009bbc <prvHeapInit+0xb8>)
 8009b62:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b64:	4b15      	ldr	r3, [pc, #84]	; (8009bbc <prvHeapInit+0xb8>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b6c:	4b13      	ldr	r3, [pc, #76]	; (8009bbc <prvHeapInit+0xb8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	1ad2      	subs	r2, r2, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b82:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <prvHeapInit+0xb8>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4a0c      	ldr	r2, [pc, #48]	; (8009bc0 <prvHeapInit+0xbc>)
 8009b90:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	4a0b      	ldr	r2, [pc, #44]	; (8009bc4 <prvHeapInit+0xc0>)
 8009b98:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <prvHeapInit+0xc4>)
 8009b9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ba0:	601a      	str	r2, [r3, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	00013880 	.word	0x00013880
 8009bb4:	200041f4 	.word	0x200041f4
 8009bb8:	20017a74 	.word	0x20017a74
 8009bbc:	20017a7c 	.word	0x20017a7c
 8009bc0:	20017a84 	.word	0x20017a84
 8009bc4:	20017a80 	.word	0x20017a80
 8009bc8:	20017a90 	.word	0x20017a90

08009bcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bd4:	4b28      	ldr	r3, [pc, #160]	; (8009c78 <prvInsertBlockIntoFreeList+0xac>)
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	e002      	b.n	8009be0 <prvInsertBlockIntoFreeList+0x14>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d8f7      	bhi.n	8009bda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d108      	bne.n	8009c0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	441a      	add	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	441a      	add	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d118      	bne.n	8009c54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <prvInsertBlockIntoFreeList+0xb0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d00d      	beq.n	8009c4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	441a      	add	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e008      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <prvInsertBlockIntoFreeList+0xb0>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	e003      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d002      	beq.n	8009c6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c6a:	bf00      	nop
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20017a74 	.word	0x20017a74
 8009c7c:	20017a7c 	.word	0x20017a7c

08009c80 <__errno>:
 8009c80:	4b01      	ldr	r3, [pc, #4]	; (8009c88 <__errno+0x8>)
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	2000001c 	.word	0x2000001c

08009c8c <__sflush_r>:
 8009c8c:	898b      	ldrh	r3, [r1, #12]
 8009c8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c96:	4605      	mov	r5, r0
 8009c98:	0718      	lsls	r0, r3, #28
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	d45f      	bmi.n	8009d5e <__sflush_r+0xd2>
 8009c9e:	684b      	ldr	r3, [r1, #4]
 8009ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	818a      	strh	r2, [r1, #12]
 8009ca8:	dc05      	bgt.n	8009cb6 <__sflush_r+0x2a>
 8009caa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dc02      	bgt.n	8009cb6 <__sflush_r+0x2a>
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cb8:	2e00      	cmp	r6, #0
 8009cba:	d0f9      	beq.n	8009cb0 <__sflush_r+0x24>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cc2:	682f      	ldr	r7, [r5, #0]
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	d036      	beq.n	8009d36 <__sflush_r+0xaa>
 8009cc8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	075a      	lsls	r2, r3, #29
 8009cce:	d505      	bpl.n	8009cdc <__sflush_r+0x50>
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	1ac0      	subs	r0, r0, r3
 8009cd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009cd6:	b10b      	cbz	r3, 8009cdc <__sflush_r+0x50>
 8009cd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cda:	1ac0      	subs	r0, r0, r3
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4602      	mov	r2, r0
 8009ce0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ce2:	69e1      	ldr	r1, [r4, #28]
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b0      	blx	r6
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	d106      	bne.n	8009cfc <__sflush_r+0x70>
 8009cee:	6829      	ldr	r1, [r5, #0]
 8009cf0:	291d      	cmp	r1, #29
 8009cf2:	d830      	bhi.n	8009d56 <__sflush_r+0xca>
 8009cf4:	4a2b      	ldr	r2, [pc, #172]	; (8009da4 <__sflush_r+0x118>)
 8009cf6:	40ca      	lsrs	r2, r1
 8009cf8:	07d6      	lsls	r6, r2, #31
 8009cfa:	d52c      	bpl.n	8009d56 <__sflush_r+0xca>
 8009cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d00:	b21b      	sxth	r3, r3
 8009d02:	2200      	movs	r2, #0
 8009d04:	6062      	str	r2, [r4, #4]
 8009d06:	04d9      	lsls	r1, r3, #19
 8009d08:	6922      	ldr	r2, [r4, #16]
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	6022      	str	r2, [r4, #0]
 8009d0e:	d504      	bpl.n	8009d1a <__sflush_r+0x8e>
 8009d10:	1c42      	adds	r2, r0, #1
 8009d12:	d101      	bne.n	8009d18 <__sflush_r+0x8c>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b903      	cbnz	r3, 8009d1a <__sflush_r+0x8e>
 8009d18:	6520      	str	r0, [r4, #80]	; 0x50
 8009d1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d1c:	602f      	str	r7, [r5, #0]
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	d0c6      	beq.n	8009cb0 <__sflush_r+0x24>
 8009d22:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009d26:	4299      	cmp	r1, r3
 8009d28:	d002      	beq.n	8009d30 <__sflush_r+0xa4>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 f936 	bl	8009f9c <_free_r>
 8009d30:	2000      	movs	r0, #0
 8009d32:	6320      	str	r0, [r4, #48]	; 0x30
 8009d34:	e7bd      	b.n	8009cb2 <__sflush_r+0x26>
 8009d36:	69e1      	ldr	r1, [r4, #28]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b0      	blx	r6
 8009d3e:	1c41      	adds	r1, r0, #1
 8009d40:	d1c3      	bne.n	8009cca <__sflush_r+0x3e>
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0c0      	beq.n	8009cca <__sflush_r+0x3e>
 8009d48:	2b1d      	cmp	r3, #29
 8009d4a:	d001      	beq.n	8009d50 <__sflush_r+0xc4>
 8009d4c:	2b16      	cmp	r3, #22
 8009d4e:	d101      	bne.n	8009d54 <__sflush_r+0xc8>
 8009d50:	602f      	str	r7, [r5, #0]
 8009d52:	e7ad      	b.n	8009cb0 <__sflush_r+0x24>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	e7a9      	b.n	8009cb2 <__sflush_r+0x26>
 8009d5e:	690f      	ldr	r7, [r1, #16]
 8009d60:	2f00      	cmp	r7, #0
 8009d62:	d0a5      	beq.n	8009cb0 <__sflush_r+0x24>
 8009d64:	079b      	lsls	r3, r3, #30
 8009d66:	680e      	ldr	r6, [r1, #0]
 8009d68:	bf08      	it	eq
 8009d6a:	694b      	ldreq	r3, [r1, #20]
 8009d6c:	600f      	str	r7, [r1, #0]
 8009d6e:	bf18      	it	ne
 8009d70:	2300      	movne	r3, #0
 8009d72:	eba6 0807 	sub.w	r8, r6, r7
 8009d76:	608b      	str	r3, [r1, #8]
 8009d78:	f1b8 0f00 	cmp.w	r8, #0
 8009d7c:	dd98      	ble.n	8009cb0 <__sflush_r+0x24>
 8009d7e:	69e1      	ldr	r1, [r4, #28]
 8009d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d82:	4643      	mov	r3, r8
 8009d84:	463a      	mov	r2, r7
 8009d86:	4628      	mov	r0, r5
 8009d88:	47b0      	blx	r6
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	dc06      	bgt.n	8009d9c <__sflush_r+0x110>
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	e78a      	b.n	8009cb2 <__sflush_r+0x26>
 8009d9c:	4407      	add	r7, r0
 8009d9e:	eba8 0800 	sub.w	r8, r8, r0
 8009da2:	e7e9      	b.n	8009d78 <__sflush_r+0xec>
 8009da4:	20400001 	.word	0x20400001

08009da8 <_fflush_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	460c      	mov	r4, r1
 8009dac:	4605      	mov	r5, r0
 8009dae:	b118      	cbz	r0, 8009db8 <_fflush_r+0x10>
 8009db0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009db2:	b90b      	cbnz	r3, 8009db8 <_fflush_r+0x10>
 8009db4:	f000 f876 	bl	8009ea4 <__sinit>
 8009db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbc:	b1bb      	cbz	r3, 8009dee <_fflush_r+0x46>
 8009dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dc0:	07d0      	lsls	r0, r2, #31
 8009dc2:	d404      	bmi.n	8009dce <_fflush_r+0x26>
 8009dc4:	0599      	lsls	r1, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_fflush_r+0x26>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dca:	f000 f9ed 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f7ff ff5b 	bl	8009c8c <__sflush_r>
 8009dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd8:	07da      	lsls	r2, r3, #31
 8009dda:	4605      	mov	r5, r0
 8009ddc:	d405      	bmi.n	8009dea <_fflush_r+0x42>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	059b      	lsls	r3, r3, #22
 8009de2:	d402      	bmi.n	8009dea <_fflush_r+0x42>
 8009de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de6:	f000 f9e0 	bl	800a1aa <__retarget_lock_release_recursive>
 8009dea:	4628      	mov	r0, r5
 8009dec:	bd38      	pop	{r3, r4, r5, pc}
 8009dee:	461d      	mov	r5, r3
 8009df0:	e7fb      	b.n	8009dea <_fflush_r+0x42>
	...

08009df4 <fflush>:
 8009df4:	4601      	mov	r1, r0
 8009df6:	b920      	cbnz	r0, 8009e02 <fflush+0xe>
 8009df8:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <fflush+0x18>)
 8009dfa:	4905      	ldr	r1, [pc, #20]	; (8009e10 <fflush+0x1c>)
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f000 b98d 	b.w	800a11c <_fwalk_reent>
 8009e02:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <fflush+0x20>)
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	f7ff bfcf 	b.w	8009da8 <_fflush_r>
 8009e0a:	bf00      	nop
 8009e0c:	080107f0 	.word	0x080107f0
 8009e10:	08009da9 	.word	0x08009da9
 8009e14:	2000001c 	.word	0x2000001c

08009e18 <std>:
 8009e18:	2300      	movs	r3, #0
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e26:	6083      	str	r3, [r0, #8]
 8009e28:	8181      	strh	r1, [r0, #12]
 8009e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e2c:	81c2      	strh	r2, [r0, #14]
 8009e2e:	6183      	str	r3, [r0, #24]
 8009e30:	4619      	mov	r1, r3
 8009e32:	2208      	movs	r2, #8
 8009e34:	305c      	adds	r0, #92	; 0x5c
 8009e36:	f000 fc13 	bl	800a660 <memset>
 8009e3a:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <std+0x40>)
 8009e3c:	6223      	str	r3, [r4, #32]
 8009e3e:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <std+0x44>)
 8009e40:	6263      	str	r3, [r4, #36]	; 0x24
 8009e42:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <std+0x48>)
 8009e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e46:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <std+0x4c>)
 8009e48:	61e4      	str	r4, [r4, #28]
 8009e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e54:	f000 b9a6 	b.w	800a1a4 <__retarget_lock_init_recursive>
 8009e58:	0800ab81 	.word	0x0800ab81
 8009e5c:	0800aba3 	.word	0x0800aba3
 8009e60:	0800abdb 	.word	0x0800abdb
 8009e64:	0800abff 	.word	0x0800abff

08009e68 <_cleanup_r>:
 8009e68:	4901      	ldr	r1, [pc, #4]	; (8009e70 <_cleanup_r+0x8>)
 8009e6a:	f000 b957 	b.w	800a11c <_fwalk_reent>
 8009e6e:	bf00      	nop
 8009e70:	0800da25 	.word	0x0800da25

08009e74 <__sfp_lock_acquire>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__sfp_lock_acquire+0x8>)
 8009e76:	f000 b997 	b.w	800a1a8 <__retarget_lock_acquire_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	20017a96 	.word	0x20017a96

08009e80 <__sfp_lock_release>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__sfp_lock_release+0x8>)
 8009e82:	f000 b992 	b.w	800a1aa <__retarget_lock_release_recursive>
 8009e86:	bf00      	nop
 8009e88:	20017a96 	.word	0x20017a96

08009e8c <__sinit_lock_acquire>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	; (8009e94 <__sinit_lock_acquire+0x8>)
 8009e8e:	f000 b98b 	b.w	800a1a8 <__retarget_lock_acquire_recursive>
 8009e92:	bf00      	nop
 8009e94:	20017a97 	.word	0x20017a97

08009e98 <__sinit_lock_release>:
 8009e98:	4801      	ldr	r0, [pc, #4]	; (8009ea0 <__sinit_lock_release+0x8>)
 8009e9a:	f000 b986 	b.w	800a1aa <__retarget_lock_release_recursive>
 8009e9e:	bf00      	nop
 8009ea0:	20017a97 	.word	0x20017a97

08009ea4 <__sinit>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	f7ff fff0 	bl	8009e8c <__sinit_lock_acquire>
 8009eac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009eae:	b11a      	cbz	r2, 8009eb8 <__sinit+0x14>
 8009eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb4:	f7ff bff0 	b.w	8009e98 <__sinit_lock_release>
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <__sinit+0x4c>)
 8009eba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8009ec2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8009ec6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8009eca:	6860      	ldr	r0, [r4, #4]
 8009ecc:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8009ed0:	2104      	movs	r1, #4
 8009ed2:	f7ff ffa1 	bl	8009e18 <std>
 8009ed6:	68a0      	ldr	r0, [r4, #8]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	2109      	movs	r1, #9
 8009edc:	f7ff ff9c 	bl	8009e18 <std>
 8009ee0:	68e0      	ldr	r0, [r4, #12]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	2112      	movs	r1, #18
 8009ee6:	f7ff ff97 	bl	8009e18 <std>
 8009eea:	2301      	movs	r3, #1
 8009eec:	63a3      	str	r3, [r4, #56]	; 0x38
 8009eee:	e7df      	b.n	8009eb0 <__sinit+0xc>
 8009ef0:	08009e69 	.word	0x08009e69

08009ef4 <_malloc_trim_r>:
 8009ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef8:	4606      	mov	r6, r0
 8009efa:	2008      	movs	r0, #8
 8009efc:	460c      	mov	r4, r1
 8009efe:	f002 fecf 	bl	800cca0 <sysconf>
 8009f02:	4f23      	ldr	r7, [pc, #140]	; (8009f90 <_malloc_trim_r+0x9c>)
 8009f04:	4680      	mov	r8, r0
 8009f06:	4630      	mov	r0, r6
 8009f08:	f000 fbb2 	bl	800a670 <__malloc_lock>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	685d      	ldr	r5, [r3, #4]
 8009f10:	f025 0503 	bic.w	r5, r5, #3
 8009f14:	1b2c      	subs	r4, r5, r4
 8009f16:	3c11      	subs	r4, #17
 8009f18:	4444      	add	r4, r8
 8009f1a:	fbb4 f4f8 	udiv	r4, r4, r8
 8009f1e:	3c01      	subs	r4, #1
 8009f20:	fb08 f404 	mul.w	r4, r8, r4
 8009f24:	45a0      	cmp	r8, r4
 8009f26:	dd05      	ble.n	8009f34 <_malloc_trim_r+0x40>
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 fba7 	bl	800a67c <__malloc_unlock>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f34:	2100      	movs	r1, #0
 8009f36:	4630      	mov	r0, r6
 8009f38:	f000 fdf2 	bl	800ab20 <_sbrk_r>
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	442b      	add	r3, r5
 8009f40:	4298      	cmp	r0, r3
 8009f42:	d1f1      	bne.n	8009f28 <_malloc_trim_r+0x34>
 8009f44:	4261      	negs	r1, r4
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 fdea 	bl	800ab20 <_sbrk_r>
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d110      	bne.n	8009f72 <_malloc_trim_r+0x7e>
 8009f50:	2100      	movs	r1, #0
 8009f52:	4630      	mov	r0, r6
 8009f54:	f000 fde4 	bl	800ab20 <_sbrk_r>
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	1a83      	subs	r3, r0, r2
 8009f5c:	2b0f      	cmp	r3, #15
 8009f5e:	dde3      	ble.n	8009f28 <_malloc_trim_r+0x34>
 8009f60:	490c      	ldr	r1, [pc, #48]	; (8009f94 <_malloc_trim_r+0xa0>)
 8009f62:	6809      	ldr	r1, [r1, #0]
 8009f64:	1a40      	subs	r0, r0, r1
 8009f66:	490c      	ldr	r1, [pc, #48]	; (8009f98 <_malloc_trim_r+0xa4>)
 8009f68:	f043 0301 	orr.w	r3, r3, #1
 8009f6c:	6008      	str	r0, [r1, #0]
 8009f6e:	6053      	str	r3, [r2, #4]
 8009f70:	e7da      	b.n	8009f28 <_malloc_trim_r+0x34>
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4a08      	ldr	r2, [pc, #32]	; (8009f98 <_malloc_trim_r+0xa4>)
 8009f76:	1b2d      	subs	r5, r5, r4
 8009f78:	f045 0501 	orr.w	r5, r5, #1
 8009f7c:	605d      	str	r5, [r3, #4]
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	4630      	mov	r0, r6
 8009f82:	1b1b      	subs	r3, r3, r4
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	f000 fb79 	bl	800a67c <__malloc_unlock>
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	e7d0      	b.n	8009f30 <_malloc_trim_r+0x3c>
 8009f8e:	bf00      	nop
 8009f90:	20000448 	.word	0x20000448
 8009f94:	20000850 	.word	0x20000850
 8009f98:	20017a98 	.word	0x20017a98

08009f9c <_free_r>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	f000 80b1 	beq.w	800a10a <_free_r+0x16e>
 8009fa8:	f000 fb62 	bl	800a670 <__malloc_lock>
 8009fac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009fb0:	4856      	ldr	r0, [pc, #344]	; (800a10c <_free_r+0x170>)
 8009fb2:	f022 0401 	bic.w	r4, r2, #1
 8009fb6:	f1a7 0308 	sub.w	r3, r7, #8
 8009fba:	eb03 0c04 	add.w	ip, r3, r4
 8009fbe:	6881      	ldr	r1, [r0, #8]
 8009fc0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009fc4:	4561      	cmp	r1, ip
 8009fc6:	f026 0603 	bic.w	r6, r6, #3
 8009fca:	f002 0201 	and.w	r2, r2, #1
 8009fce:	d11b      	bne.n	800a008 <_free_r+0x6c>
 8009fd0:	4434      	add	r4, r6
 8009fd2:	b93a      	cbnz	r2, 8009fe4 <_free_r+0x48>
 8009fd4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	4414      	add	r4, r2
 8009fdc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8009fe0:	60ca      	str	r2, [r1, #12]
 8009fe2:	6091      	str	r1, [r2, #8]
 8009fe4:	f044 0201 	orr.w	r2, r4, #1
 8009fe8:	605a      	str	r2, [r3, #4]
 8009fea:	6083      	str	r3, [r0, #8]
 8009fec:	4b48      	ldr	r3, [pc, #288]	; (800a110 <_free_r+0x174>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d804      	bhi.n	8009ffe <_free_r+0x62>
 8009ff4:	4b47      	ldr	r3, [pc, #284]	; (800a114 <_free_r+0x178>)
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	f7ff ff7b 	bl	8009ef4 <_malloc_trim_r>
 8009ffe:	4628      	mov	r0, r5
 800a000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a004:	f000 bb3a 	b.w	800a67c <__malloc_unlock>
 800a008:	f8cc 6004 	str.w	r6, [ip, #4]
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	d138      	bne.n	800a082 <_free_r+0xe6>
 800a010:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a014:	1a5b      	subs	r3, r3, r1
 800a016:	440c      	add	r4, r1
 800a018:	6899      	ldr	r1, [r3, #8]
 800a01a:	f100 0708 	add.w	r7, r0, #8
 800a01e:	42b9      	cmp	r1, r7
 800a020:	d031      	beq.n	800a086 <_free_r+0xea>
 800a022:	68df      	ldr	r7, [r3, #12]
 800a024:	60cf      	str	r7, [r1, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	eb0c 0106 	add.w	r1, ip, r6
 800a02c:	6849      	ldr	r1, [r1, #4]
 800a02e:	07c9      	lsls	r1, r1, #31
 800a030:	d40b      	bmi.n	800a04a <_free_r+0xae>
 800a032:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a036:	4434      	add	r4, r6
 800a038:	bb3a      	cbnz	r2, 800a08a <_free_r+0xee>
 800a03a:	4e37      	ldr	r6, [pc, #220]	; (800a118 <_free_r+0x17c>)
 800a03c:	42b1      	cmp	r1, r6
 800a03e:	d124      	bne.n	800a08a <_free_r+0xee>
 800a040:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a044:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a048:	2201      	movs	r2, #1
 800a04a:	f044 0101 	orr.w	r1, r4, #1
 800a04e:	6059      	str	r1, [r3, #4]
 800a050:	511c      	str	r4, [r3, r4]
 800a052:	2a00      	cmp	r2, #0
 800a054:	d1d3      	bne.n	8009ffe <_free_r+0x62>
 800a056:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a05a:	d21b      	bcs.n	800a094 <_free_r+0xf8>
 800a05c:	0961      	lsrs	r1, r4, #5
 800a05e:	08e2      	lsrs	r2, r4, #3
 800a060:	2401      	movs	r4, #1
 800a062:	408c      	lsls	r4, r1
 800a064:	6841      	ldr	r1, [r0, #4]
 800a066:	3201      	adds	r2, #1
 800a068:	430c      	orrs	r4, r1
 800a06a:	6044      	str	r4, [r0, #4]
 800a06c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a070:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a074:	3908      	subs	r1, #8
 800a076:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a07a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a07e:	60e3      	str	r3, [r4, #12]
 800a080:	e7bd      	b.n	8009ffe <_free_r+0x62>
 800a082:	2200      	movs	r2, #0
 800a084:	e7d0      	b.n	800a028 <_free_r+0x8c>
 800a086:	2201      	movs	r2, #1
 800a088:	e7ce      	b.n	800a028 <_free_r+0x8c>
 800a08a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a08e:	60ce      	str	r6, [r1, #12]
 800a090:	60b1      	str	r1, [r6, #8]
 800a092:	e7da      	b.n	800a04a <_free_r+0xae>
 800a094:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a098:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a09c:	d214      	bcs.n	800a0c8 <_free_r+0x12c>
 800a09e:	09a2      	lsrs	r2, r4, #6
 800a0a0:	3238      	adds	r2, #56	; 0x38
 800a0a2:	1c51      	adds	r1, r2, #1
 800a0a4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a0a8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a0ac:	428e      	cmp	r6, r1
 800a0ae:	d125      	bne.n	800a0fc <_free_r+0x160>
 800a0b0:	2401      	movs	r4, #1
 800a0b2:	1092      	asrs	r2, r2, #2
 800a0b4:	fa04 f202 	lsl.w	r2, r4, r2
 800a0b8:	6844      	ldr	r4, [r0, #4]
 800a0ba:	4322      	orrs	r2, r4
 800a0bc:	6042      	str	r2, [r0, #4]
 800a0be:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a0c2:	60b3      	str	r3, [r6, #8]
 800a0c4:	60cb      	str	r3, [r1, #12]
 800a0c6:	e79a      	b.n	8009ffe <_free_r+0x62>
 800a0c8:	2a14      	cmp	r2, #20
 800a0ca:	d801      	bhi.n	800a0d0 <_free_r+0x134>
 800a0cc:	325b      	adds	r2, #91	; 0x5b
 800a0ce:	e7e8      	b.n	800a0a2 <_free_r+0x106>
 800a0d0:	2a54      	cmp	r2, #84	; 0x54
 800a0d2:	d802      	bhi.n	800a0da <_free_r+0x13e>
 800a0d4:	0b22      	lsrs	r2, r4, #12
 800a0d6:	326e      	adds	r2, #110	; 0x6e
 800a0d8:	e7e3      	b.n	800a0a2 <_free_r+0x106>
 800a0da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a0de:	d802      	bhi.n	800a0e6 <_free_r+0x14a>
 800a0e0:	0be2      	lsrs	r2, r4, #15
 800a0e2:	3277      	adds	r2, #119	; 0x77
 800a0e4:	e7dd      	b.n	800a0a2 <_free_r+0x106>
 800a0e6:	f240 5154 	movw	r1, #1364	; 0x554
 800a0ea:	428a      	cmp	r2, r1
 800a0ec:	bf9a      	itte	ls
 800a0ee:	0ca2      	lsrls	r2, r4, #18
 800a0f0:	327c      	addls	r2, #124	; 0x7c
 800a0f2:	227e      	movhi	r2, #126	; 0x7e
 800a0f4:	e7d5      	b.n	800a0a2 <_free_r+0x106>
 800a0f6:	6889      	ldr	r1, [r1, #8]
 800a0f8:	428e      	cmp	r6, r1
 800a0fa:	d004      	beq.n	800a106 <_free_r+0x16a>
 800a0fc:	684a      	ldr	r2, [r1, #4]
 800a0fe:	f022 0203 	bic.w	r2, r2, #3
 800a102:	42a2      	cmp	r2, r4
 800a104:	d8f7      	bhi.n	800a0f6 <_free_r+0x15a>
 800a106:	68ce      	ldr	r6, [r1, #12]
 800a108:	e7d9      	b.n	800a0be <_free_r+0x122>
 800a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10c:	20000448 	.word	0x20000448
 800a110:	20000854 	.word	0x20000854
 800a114:	20017ac8 	.word	0x20017ac8
 800a118:	20000450 	.word	0x20000450

0800a11c <_fwalk_reent>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	4606      	mov	r6, r0
 800a122:	4688      	mov	r8, r1
 800a124:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a128:	2700      	movs	r7, #0
 800a12a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a12e:	f1b9 0901 	subs.w	r9, r9, #1
 800a132:	d505      	bpl.n	800a140 <_fwalk_reent+0x24>
 800a134:	6824      	ldr	r4, [r4, #0]
 800a136:	2c00      	cmp	r4, #0
 800a138:	d1f7      	bne.n	800a12a <_fwalk_reent+0xe>
 800a13a:	4638      	mov	r0, r7
 800a13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a140:	89ab      	ldrh	r3, [r5, #12]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d907      	bls.n	800a156 <_fwalk_reent+0x3a>
 800a146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a14a:	3301      	adds	r3, #1
 800a14c:	d003      	beq.n	800a156 <_fwalk_reent+0x3a>
 800a14e:	4629      	mov	r1, r5
 800a150:	4630      	mov	r0, r6
 800a152:	47c0      	blx	r8
 800a154:	4307      	orrs	r7, r0
 800a156:	3568      	adds	r5, #104	; 0x68
 800a158:	e7e9      	b.n	800a12e <_fwalk_reent+0x12>
	...

0800a15c <__libc_init_array>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	4d0d      	ldr	r5, [pc, #52]	; (800a194 <__libc_init_array+0x38>)
 800a160:	4c0d      	ldr	r4, [pc, #52]	; (800a198 <__libc_init_array+0x3c>)
 800a162:	1b64      	subs	r4, r4, r5
 800a164:	10a4      	asrs	r4, r4, #2
 800a166:	2600      	movs	r6, #0
 800a168:	42a6      	cmp	r6, r4
 800a16a:	d109      	bne.n	800a180 <__libc_init_array+0x24>
 800a16c:	4d0b      	ldr	r5, [pc, #44]	; (800a19c <__libc_init_array+0x40>)
 800a16e:	4c0c      	ldr	r4, [pc, #48]	; (800a1a0 <__libc_init_array+0x44>)
 800a170:	f006 f904 	bl	801037c <_init>
 800a174:	1b64      	subs	r4, r4, r5
 800a176:	10a4      	asrs	r4, r4, #2
 800a178:	2600      	movs	r6, #0
 800a17a:	42a6      	cmp	r6, r4
 800a17c:	d105      	bne.n	800a18a <__libc_init_array+0x2e>
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	f855 3b04 	ldr.w	r3, [r5], #4
 800a184:	4798      	blx	r3
 800a186:	3601      	adds	r6, #1
 800a188:	e7ee      	b.n	800a168 <__libc_init_array+0xc>
 800a18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18e:	4798      	blx	r3
 800a190:	3601      	adds	r6, #1
 800a192:	e7f2      	b.n	800a17a <__libc_init_array+0x1e>
 800a194:	08010b50 	.word	0x08010b50
 800a198:	08010b50 	.word	0x08010b50
 800a19c:	08010b50 	.word	0x08010b50
 800a1a0:	08010b58 	.word	0x08010b58

0800a1a4 <__retarget_lock_init_recursive>:
 800a1a4:	4770      	bx	lr

0800a1a6 <__retarget_lock_close_recursive>:
 800a1a6:	4770      	bx	lr

0800a1a8 <__retarget_lock_acquire_recursive>:
 800a1a8:	4770      	bx	lr

0800a1aa <__retarget_lock_release_recursive>:
 800a1aa:	4770      	bx	lr

0800a1ac <malloc>:
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <malloc+0xc>)
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	f000 b80b 	b.w	800a1cc <_malloc_r>
 800a1b6:	bf00      	nop
 800a1b8:	2000001c 	.word	0x2000001c

0800a1bc <free>:
 800a1bc:	4b02      	ldr	r3, [pc, #8]	; (800a1c8 <free+0xc>)
 800a1be:	4601      	mov	r1, r0
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	f7ff beeb 	b.w	8009f9c <_free_r>
 800a1c6:	bf00      	nop
 800a1c8:	2000001c 	.word	0x2000001c

0800a1cc <_malloc_r>:
 800a1cc:	f101 030b 	add.w	r3, r1, #11
 800a1d0:	2b16      	cmp	r3, #22
 800a1d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	d906      	bls.n	800a1e8 <_malloc_r+0x1c>
 800a1da:	f033 0707 	bics.w	r7, r3, #7
 800a1de:	d504      	bpl.n	800a1ea <_malloc_r+0x1e>
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	2400      	movs	r4, #0
 800a1e6:	e1a5      	b.n	800a534 <_malloc_r+0x368>
 800a1e8:	2710      	movs	r7, #16
 800a1ea:	42b9      	cmp	r1, r7
 800a1ec:	d8f8      	bhi.n	800a1e0 <_malloc_r+0x14>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 fa3e 	bl	800a670 <__malloc_lock>
 800a1f4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800a1f8:	4eb0      	ldr	r6, [pc, #704]	; (800a4bc <_malloc_r+0x2f0>)
 800a1fa:	d237      	bcs.n	800a26c <_malloc_r+0xa0>
 800a1fc:	f107 0208 	add.w	r2, r7, #8
 800a200:	4432      	add	r2, r6
 800a202:	f1a2 0108 	sub.w	r1, r2, #8
 800a206:	6854      	ldr	r4, [r2, #4]
 800a208:	428c      	cmp	r4, r1
 800a20a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a20e:	d102      	bne.n	800a216 <_malloc_r+0x4a>
 800a210:	68d4      	ldr	r4, [r2, #12]
 800a212:	42a2      	cmp	r2, r4
 800a214:	d010      	beq.n	800a238 <_malloc_r+0x6c>
 800a216:	6863      	ldr	r3, [r4, #4]
 800a218:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	60ca      	str	r2, [r1, #12]
 800a222:	4423      	add	r3, r4
 800a224:	6091      	str	r1, [r2, #8]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	f042 0201 	orr.w	r2, r2, #1
 800a22c:	605a      	str	r2, [r3, #4]
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 fa24 	bl	800a67c <__malloc_unlock>
 800a234:	3408      	adds	r4, #8
 800a236:	e17d      	b.n	800a534 <_malloc_r+0x368>
 800a238:	3302      	adds	r3, #2
 800a23a:	6934      	ldr	r4, [r6, #16]
 800a23c:	49a0      	ldr	r1, [pc, #640]	; (800a4c0 <_malloc_r+0x2f4>)
 800a23e:	428c      	cmp	r4, r1
 800a240:	d077      	beq.n	800a332 <_malloc_r+0x166>
 800a242:	6862      	ldr	r2, [r4, #4]
 800a244:	f022 0c03 	bic.w	ip, r2, #3
 800a248:	ebac 0007 	sub.w	r0, ip, r7
 800a24c:	280f      	cmp	r0, #15
 800a24e:	dd48      	ble.n	800a2e2 <_malloc_r+0x116>
 800a250:	19e2      	adds	r2, r4, r7
 800a252:	f040 0301 	orr.w	r3, r0, #1
 800a256:	f047 0701 	orr.w	r7, r7, #1
 800a25a:	6067      	str	r7, [r4, #4]
 800a25c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a260:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a264:	6053      	str	r3, [r2, #4]
 800a266:	f844 000c 	str.w	r0, [r4, ip]
 800a26a:	e7e0      	b.n	800a22e <_malloc_r+0x62>
 800a26c:	0a7b      	lsrs	r3, r7, #9
 800a26e:	d02a      	beq.n	800a2c6 <_malloc_r+0xfa>
 800a270:	2b04      	cmp	r3, #4
 800a272:	d812      	bhi.n	800a29a <_malloc_r+0xce>
 800a274:	09bb      	lsrs	r3, r7, #6
 800a276:	3338      	adds	r3, #56	; 0x38
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a27e:	f1a2 0c08 	sub.w	ip, r2, #8
 800a282:	6854      	ldr	r4, [r2, #4]
 800a284:	4564      	cmp	r4, ip
 800a286:	d006      	beq.n	800a296 <_malloc_r+0xca>
 800a288:	6862      	ldr	r2, [r4, #4]
 800a28a:	f022 0203 	bic.w	r2, r2, #3
 800a28e:	1bd0      	subs	r0, r2, r7
 800a290:	280f      	cmp	r0, #15
 800a292:	dd1c      	ble.n	800a2ce <_malloc_r+0x102>
 800a294:	3b01      	subs	r3, #1
 800a296:	3301      	adds	r3, #1
 800a298:	e7cf      	b.n	800a23a <_malloc_r+0x6e>
 800a29a:	2b14      	cmp	r3, #20
 800a29c:	d801      	bhi.n	800a2a2 <_malloc_r+0xd6>
 800a29e:	335b      	adds	r3, #91	; 0x5b
 800a2a0:	e7ea      	b.n	800a278 <_malloc_r+0xac>
 800a2a2:	2b54      	cmp	r3, #84	; 0x54
 800a2a4:	d802      	bhi.n	800a2ac <_malloc_r+0xe0>
 800a2a6:	0b3b      	lsrs	r3, r7, #12
 800a2a8:	336e      	adds	r3, #110	; 0x6e
 800a2aa:	e7e5      	b.n	800a278 <_malloc_r+0xac>
 800a2ac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a2b0:	d802      	bhi.n	800a2b8 <_malloc_r+0xec>
 800a2b2:	0bfb      	lsrs	r3, r7, #15
 800a2b4:	3377      	adds	r3, #119	; 0x77
 800a2b6:	e7df      	b.n	800a278 <_malloc_r+0xac>
 800a2b8:	f240 5254 	movw	r2, #1364	; 0x554
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d804      	bhi.n	800a2ca <_malloc_r+0xfe>
 800a2c0:	0cbb      	lsrs	r3, r7, #18
 800a2c2:	337c      	adds	r3, #124	; 0x7c
 800a2c4:	e7d8      	b.n	800a278 <_malloc_r+0xac>
 800a2c6:	233f      	movs	r3, #63	; 0x3f
 800a2c8:	e7d6      	b.n	800a278 <_malloc_r+0xac>
 800a2ca:	237e      	movs	r3, #126	; 0x7e
 800a2cc:	e7d4      	b.n	800a278 <_malloc_r+0xac>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	68e1      	ldr	r1, [r4, #12]
 800a2d2:	db04      	blt.n	800a2de <_malloc_r+0x112>
 800a2d4:	68a3      	ldr	r3, [r4, #8]
 800a2d6:	60d9      	str	r1, [r3, #12]
 800a2d8:	608b      	str	r3, [r1, #8]
 800a2da:	18a3      	adds	r3, r4, r2
 800a2dc:	e7a3      	b.n	800a226 <_malloc_r+0x5a>
 800a2de:	460c      	mov	r4, r1
 800a2e0:	e7d0      	b.n	800a284 <_malloc_r+0xb8>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a2e8:	db07      	blt.n	800a2fa <_malloc_r+0x12e>
 800a2ea:	44a4      	add	ip, r4
 800a2ec:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a2f0:	f043 0301 	orr.w	r3, r3, #1
 800a2f4:	f8cc 3004 	str.w	r3, [ip, #4]
 800a2f8:	e799      	b.n	800a22e <_malloc_r+0x62>
 800a2fa:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a2fe:	6870      	ldr	r0, [r6, #4]
 800a300:	f080 8096 	bcs.w	800a430 <_malloc_r+0x264>
 800a304:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a308:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a30c:	f04f 0c01 	mov.w	ip, #1
 800a310:	3201      	adds	r2, #1
 800a312:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a316:	ea4c 0000 	orr.w	r0, ip, r0
 800a31a:	6070      	str	r0, [r6, #4]
 800a31c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a320:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a324:	3808      	subs	r0, #8
 800a326:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a32a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800a32e:	f8cc 400c 	str.w	r4, [ip, #12]
 800a332:	2001      	movs	r0, #1
 800a334:	109a      	asrs	r2, r3, #2
 800a336:	fa00 f202 	lsl.w	r2, r0, r2
 800a33a:	6870      	ldr	r0, [r6, #4]
 800a33c:	4290      	cmp	r0, r2
 800a33e:	d326      	bcc.n	800a38e <_malloc_r+0x1c2>
 800a340:	4210      	tst	r0, r2
 800a342:	d106      	bne.n	800a352 <_malloc_r+0x186>
 800a344:	f023 0303 	bic.w	r3, r3, #3
 800a348:	0052      	lsls	r2, r2, #1
 800a34a:	4210      	tst	r0, r2
 800a34c:	f103 0304 	add.w	r3, r3, #4
 800a350:	d0fa      	beq.n	800a348 <_malloc_r+0x17c>
 800a352:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800a356:	46c1      	mov	r9, r8
 800a358:	469e      	mov	lr, r3
 800a35a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a35e:	454c      	cmp	r4, r9
 800a360:	f040 80ba 	bne.w	800a4d8 <_malloc_r+0x30c>
 800a364:	f10e 0e01 	add.w	lr, lr, #1
 800a368:	f01e 0f03 	tst.w	lr, #3
 800a36c:	f109 0908 	add.w	r9, r9, #8
 800a370:	d1f3      	bne.n	800a35a <_malloc_r+0x18e>
 800a372:	0798      	lsls	r0, r3, #30
 800a374:	f040 80e4 	bne.w	800a540 <_malloc_r+0x374>
 800a378:	6873      	ldr	r3, [r6, #4]
 800a37a:	ea23 0302 	bic.w	r3, r3, r2
 800a37e:	6073      	str	r3, [r6, #4]
 800a380:	6870      	ldr	r0, [r6, #4]
 800a382:	0052      	lsls	r2, r2, #1
 800a384:	4290      	cmp	r0, r2
 800a386:	d302      	bcc.n	800a38e <_malloc_r+0x1c2>
 800a388:	2a00      	cmp	r2, #0
 800a38a:	f040 80e6 	bne.w	800a55a <_malloc_r+0x38e>
 800a38e:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800a392:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a396:	f023 0903 	bic.w	r9, r3, #3
 800a39a:	45b9      	cmp	r9, r7
 800a39c:	d304      	bcc.n	800a3a8 <_malloc_r+0x1dc>
 800a39e:	eba9 0207 	sub.w	r2, r9, r7
 800a3a2:	2a0f      	cmp	r2, #15
 800a3a4:	f300 8142 	bgt.w	800a62c <_malloc_r+0x460>
 800a3a8:	4b46      	ldr	r3, [pc, #280]	; (800a4c4 <_malloc_r+0x2f8>)
 800a3aa:	6819      	ldr	r1, [r3, #0]
 800a3ac:	3110      	adds	r1, #16
 800a3ae:	4439      	add	r1, r7
 800a3b0:	2008      	movs	r0, #8
 800a3b2:	9101      	str	r1, [sp, #4]
 800a3b4:	f002 fc74 	bl	800cca0 <sysconf>
 800a3b8:	4a43      	ldr	r2, [pc, #268]	; (800a4c8 <_malloc_r+0x2fc>)
 800a3ba:	9901      	ldr	r1, [sp, #4]
 800a3bc:	6813      	ldr	r3, [r2, #0]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	bf1f      	itttt	ne
 800a3c2:	f101 31ff 	addne.w	r1, r1, #4294967295
 800a3c6:	1809      	addne	r1, r1, r0
 800a3c8:	4243      	negne	r3, r0
 800a3ca:	4019      	andne	r1, r3
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	9101      	str	r1, [sp, #4]
 800a3d2:	f000 fba5 	bl	800ab20 <_sbrk_r>
 800a3d6:	1c42      	adds	r2, r0, #1
 800a3d8:	eb0a 0b09 	add.w	fp, sl, r9
 800a3dc:	4604      	mov	r4, r0
 800a3de:	f000 80f8 	beq.w	800a5d2 <_malloc_r+0x406>
 800a3e2:	4583      	cmp	fp, r0
 800a3e4:	9901      	ldr	r1, [sp, #4]
 800a3e6:	4a38      	ldr	r2, [pc, #224]	; (800a4c8 <_malloc_r+0x2fc>)
 800a3e8:	d902      	bls.n	800a3f0 <_malloc_r+0x224>
 800a3ea:	45b2      	cmp	sl, r6
 800a3ec:	f040 80f1 	bne.w	800a5d2 <_malloc_r+0x406>
 800a3f0:	4b36      	ldr	r3, [pc, #216]	; (800a4cc <_malloc_r+0x300>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	45a3      	cmp	fp, r4
 800a3f6:	eb00 0e01 	add.w	lr, r0, r1
 800a3fa:	f8c3 e000 	str.w	lr, [r3]
 800a3fe:	f108 3cff 	add.w	ip, r8, #4294967295
 800a402:	f040 80ac 	bne.w	800a55e <_malloc_r+0x392>
 800a406:	ea1b 0f0c 	tst.w	fp, ip
 800a40a:	f040 80a8 	bne.w	800a55e <_malloc_r+0x392>
 800a40e:	68b2      	ldr	r2, [r6, #8]
 800a410:	4449      	add	r1, r9
 800a412:	f041 0101 	orr.w	r1, r1, #1
 800a416:	6051      	str	r1, [r2, #4]
 800a418:	4a2d      	ldr	r2, [pc, #180]	; (800a4d0 <_malloc_r+0x304>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6811      	ldr	r1, [r2, #0]
 800a41e:	428b      	cmp	r3, r1
 800a420:	bf88      	it	hi
 800a422:	6013      	strhi	r3, [r2, #0]
 800a424:	4a2b      	ldr	r2, [pc, #172]	; (800a4d4 <_malloc_r+0x308>)
 800a426:	6811      	ldr	r1, [r2, #0]
 800a428:	428b      	cmp	r3, r1
 800a42a:	bf88      	it	hi
 800a42c:	6013      	strhi	r3, [r2, #0]
 800a42e:	e0d0      	b.n	800a5d2 <_malloc_r+0x406>
 800a430:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800a434:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a438:	d218      	bcs.n	800a46c <_malloc_r+0x2a0>
 800a43a:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a43e:	3238      	adds	r2, #56	; 0x38
 800a440:	f102 0e01 	add.w	lr, r2, #1
 800a444:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800a448:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800a44c:	45f0      	cmp	r8, lr
 800a44e:	d12b      	bne.n	800a4a8 <_malloc_r+0x2dc>
 800a450:	1092      	asrs	r2, r2, #2
 800a452:	f04f 0c01 	mov.w	ip, #1
 800a456:	fa0c f202 	lsl.w	r2, ip, r2
 800a45a:	4310      	orrs	r0, r2
 800a45c:	6070      	str	r0, [r6, #4]
 800a45e:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a462:	f8c8 4008 	str.w	r4, [r8, #8]
 800a466:	f8ce 400c 	str.w	r4, [lr, #12]
 800a46a:	e762      	b.n	800a332 <_malloc_r+0x166>
 800a46c:	2a14      	cmp	r2, #20
 800a46e:	d801      	bhi.n	800a474 <_malloc_r+0x2a8>
 800a470:	325b      	adds	r2, #91	; 0x5b
 800a472:	e7e5      	b.n	800a440 <_malloc_r+0x274>
 800a474:	2a54      	cmp	r2, #84	; 0x54
 800a476:	d803      	bhi.n	800a480 <_malloc_r+0x2b4>
 800a478:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a47c:	326e      	adds	r2, #110	; 0x6e
 800a47e:	e7df      	b.n	800a440 <_malloc_r+0x274>
 800a480:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a484:	d803      	bhi.n	800a48e <_malloc_r+0x2c2>
 800a486:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a48a:	3277      	adds	r2, #119	; 0x77
 800a48c:	e7d8      	b.n	800a440 <_malloc_r+0x274>
 800a48e:	f240 5e54 	movw	lr, #1364	; 0x554
 800a492:	4572      	cmp	r2, lr
 800a494:	bf9a      	itte	ls
 800a496:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a49a:	327c      	addls	r2, #124	; 0x7c
 800a49c:	227e      	movhi	r2, #126	; 0x7e
 800a49e:	e7cf      	b.n	800a440 <_malloc_r+0x274>
 800a4a0:	f8de e008 	ldr.w	lr, [lr, #8]
 800a4a4:	45f0      	cmp	r8, lr
 800a4a6:	d005      	beq.n	800a4b4 <_malloc_r+0x2e8>
 800a4a8:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a4ac:	f022 0203 	bic.w	r2, r2, #3
 800a4b0:	4562      	cmp	r2, ip
 800a4b2:	d8f5      	bhi.n	800a4a0 <_malloc_r+0x2d4>
 800a4b4:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a4b8:	e7d1      	b.n	800a45e <_malloc_r+0x292>
 800a4ba:	bf00      	nop
 800a4bc:	20000448 	.word	0x20000448
 800a4c0:	20000450 	.word	0x20000450
 800a4c4:	20017ac8 	.word	0x20017ac8
 800a4c8:	20000850 	.word	0x20000850
 800a4cc:	20017a98 	.word	0x20017a98
 800a4d0:	20017ac0 	.word	0x20017ac0
 800a4d4:	20017ac4 	.word	0x20017ac4
 800a4d8:	6860      	ldr	r0, [r4, #4]
 800a4da:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a4de:	f020 0003 	bic.w	r0, r0, #3
 800a4e2:	eba0 0a07 	sub.w	sl, r0, r7
 800a4e6:	f1ba 0f0f 	cmp.w	sl, #15
 800a4ea:	dd12      	ble.n	800a512 <_malloc_r+0x346>
 800a4ec:	68a3      	ldr	r3, [r4, #8]
 800a4ee:	19e2      	adds	r2, r4, r7
 800a4f0:	f047 0701 	orr.w	r7, r7, #1
 800a4f4:	6067      	str	r7, [r4, #4]
 800a4f6:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a4fa:	f8cc 3008 	str.w	r3, [ip, #8]
 800a4fe:	f04a 0301 	orr.w	r3, sl, #1
 800a502:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a506:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a50a:	6053      	str	r3, [r2, #4]
 800a50c:	f844 a000 	str.w	sl, [r4, r0]
 800a510:	e68d      	b.n	800a22e <_malloc_r+0x62>
 800a512:	f1ba 0f00 	cmp.w	sl, #0
 800a516:	db11      	blt.n	800a53c <_malloc_r+0x370>
 800a518:	4420      	add	r0, r4
 800a51a:	6843      	ldr	r3, [r0, #4]
 800a51c:	f043 0301 	orr.w	r3, r3, #1
 800a520:	6043      	str	r3, [r0, #4]
 800a522:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a526:	4628      	mov	r0, r5
 800a528:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a52c:	f8cc 3008 	str.w	r3, [ip, #8]
 800a530:	f000 f8a4 	bl	800a67c <__malloc_unlock>
 800a534:	4620      	mov	r0, r4
 800a536:	b003      	add	sp, #12
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	4664      	mov	r4, ip
 800a53e:	e70e      	b.n	800a35e <_malloc_r+0x192>
 800a540:	f858 0908 	ldr.w	r0, [r8], #-8
 800a544:	4540      	cmp	r0, r8
 800a546:	f103 33ff 	add.w	r3, r3, #4294967295
 800a54a:	f43f af12 	beq.w	800a372 <_malloc_r+0x1a6>
 800a54e:	e717      	b.n	800a380 <_malloc_r+0x1b4>
 800a550:	3304      	adds	r3, #4
 800a552:	0052      	lsls	r2, r2, #1
 800a554:	4210      	tst	r0, r2
 800a556:	d0fb      	beq.n	800a550 <_malloc_r+0x384>
 800a558:	e6fb      	b.n	800a352 <_malloc_r+0x186>
 800a55a:	4673      	mov	r3, lr
 800a55c:	e7fa      	b.n	800a554 <_malloc_r+0x388>
 800a55e:	6810      	ldr	r0, [r2, #0]
 800a560:	3001      	adds	r0, #1
 800a562:	bf1b      	ittet	ne
 800a564:	eba4 0b0b 	subne.w	fp, r4, fp
 800a568:	eb0b 020e 	addne.w	r2, fp, lr
 800a56c:	6014      	streq	r4, [r2, #0]
 800a56e:	601a      	strne	r2, [r3, #0]
 800a570:	f014 0b07 	ands.w	fp, r4, #7
 800a574:	bf1a      	itte	ne
 800a576:	f1cb 0008 	rsbne	r0, fp, #8
 800a57a:	1824      	addne	r4, r4, r0
 800a57c:	4658      	moveq	r0, fp
 800a57e:	1862      	adds	r2, r4, r1
 800a580:	ea02 010c 	and.w	r1, r2, ip
 800a584:	4480      	add	r8, r0
 800a586:	eba8 0801 	sub.w	r8, r8, r1
 800a58a:	ea08 080c 	and.w	r8, r8, ip
 800a58e:	4641      	mov	r1, r8
 800a590:	4628      	mov	r0, r5
 800a592:	9201      	str	r2, [sp, #4]
 800a594:	f000 fac4 	bl	800ab20 <_sbrk_r>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	9a01      	ldr	r2, [sp, #4]
 800a59c:	4b28      	ldr	r3, [pc, #160]	; (800a640 <_malloc_r+0x474>)
 800a59e:	d107      	bne.n	800a5b0 <_malloc_r+0x3e4>
 800a5a0:	f1bb 0f00 	cmp.w	fp, #0
 800a5a4:	d023      	beq.n	800a5ee <_malloc_r+0x422>
 800a5a6:	f1ab 0008 	sub.w	r0, fp, #8
 800a5aa:	4410      	add	r0, r2
 800a5ac:	f04f 0800 	mov.w	r8, #0
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	60b4      	str	r4, [r6, #8]
 800a5b4:	1b00      	subs	r0, r0, r4
 800a5b6:	4440      	add	r0, r8
 800a5b8:	4442      	add	r2, r8
 800a5ba:	f040 0001 	orr.w	r0, r0, #1
 800a5be:	45b2      	cmp	sl, r6
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	6060      	str	r0, [r4, #4]
 800a5c4:	f43f af28 	beq.w	800a418 <_malloc_r+0x24c>
 800a5c8:	f1b9 0f0f 	cmp.w	r9, #15
 800a5cc:	d812      	bhi.n	800a5f4 <_malloc_r+0x428>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	6063      	str	r3, [r4, #4]
 800a5d2:	68b3      	ldr	r3, [r6, #8]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f023 0303 	bic.w	r3, r3, #3
 800a5da:	42bb      	cmp	r3, r7
 800a5dc:	eba3 0207 	sub.w	r2, r3, r7
 800a5e0:	d301      	bcc.n	800a5e6 <_malloc_r+0x41a>
 800a5e2:	2a0f      	cmp	r2, #15
 800a5e4:	dc22      	bgt.n	800a62c <_malloc_r+0x460>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 f848 	bl	800a67c <__malloc_unlock>
 800a5ec:	e5fa      	b.n	800a1e4 <_malloc_r+0x18>
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	46d8      	mov	r8, fp
 800a5f2:	e7dd      	b.n	800a5b0 <_malloc_r+0x3e4>
 800a5f4:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a5f8:	f1a9 090c 	sub.w	r9, r9, #12
 800a5fc:	f029 0907 	bic.w	r9, r9, #7
 800a600:	f002 0201 	and.w	r2, r2, #1
 800a604:	ea42 0209 	orr.w	r2, r2, r9
 800a608:	f8ca 2004 	str.w	r2, [sl, #4]
 800a60c:	2105      	movs	r1, #5
 800a60e:	eb0a 0209 	add.w	r2, sl, r9
 800a612:	f1b9 0f0f 	cmp.w	r9, #15
 800a616:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800a61a:	f67f aefd 	bls.w	800a418 <_malloc_r+0x24c>
 800a61e:	f10a 0108 	add.w	r1, sl, #8
 800a622:	4628      	mov	r0, r5
 800a624:	f7ff fcba 	bl	8009f9c <_free_r>
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <_malloc_r+0x474>)
 800a62a:	e6f5      	b.n	800a418 <_malloc_r+0x24c>
 800a62c:	68b4      	ldr	r4, [r6, #8]
 800a62e:	f047 0301 	orr.w	r3, r7, #1
 800a632:	4427      	add	r7, r4
 800a634:	f042 0201 	orr.w	r2, r2, #1
 800a638:	6063      	str	r3, [r4, #4]
 800a63a:	60b7      	str	r7, [r6, #8]
 800a63c:	607a      	str	r2, [r7, #4]
 800a63e:	e5f6      	b.n	800a22e <_malloc_r+0x62>
 800a640:	20017a98 	.word	0x20017a98

0800a644 <memcpy>:
 800a644:	440a      	add	r2, r1
 800a646:	4291      	cmp	r1, r2
 800a648:	f100 33ff 	add.w	r3, r0, #4294967295
 800a64c:	d100      	bne.n	800a650 <memcpy+0xc>
 800a64e:	4770      	bx	lr
 800a650:	b510      	push	{r4, lr}
 800a652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a65a:	4291      	cmp	r1, r2
 800a65c:	d1f9      	bne.n	800a652 <memcpy+0xe>
 800a65e:	bd10      	pop	{r4, pc}

0800a660 <memset>:
 800a660:	4402      	add	r2, r0
 800a662:	4603      	mov	r3, r0
 800a664:	4293      	cmp	r3, r2
 800a666:	d100      	bne.n	800a66a <memset+0xa>
 800a668:	4770      	bx	lr
 800a66a:	f803 1b01 	strb.w	r1, [r3], #1
 800a66e:	e7f9      	b.n	800a664 <memset+0x4>

0800a670 <__malloc_lock>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__malloc_lock+0x8>)
 800a672:	f7ff bd99 	b.w	800a1a8 <__retarget_lock_acquire_recursive>
 800a676:	bf00      	nop
 800a678:	20017a95 	.word	0x20017a95

0800a67c <__malloc_unlock>:
 800a67c:	4801      	ldr	r0, [pc, #4]	; (800a684 <__malloc_unlock+0x8>)
 800a67e:	f7ff bd94 	b.w	800a1aa <__retarget_lock_release_recursive>
 800a682:	bf00      	nop
 800a684:	20017a95 	.word	0x20017a95

0800a688 <_puts_r>:
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	4605      	mov	r5, r0
 800a68c:	b089      	sub	sp, #36	; 0x24
 800a68e:	4608      	mov	r0, r1
 800a690:	460c      	mov	r4, r1
 800a692:	f7f5 fdaf 	bl	80001f4 <strlen>
 800a696:	4b1e      	ldr	r3, [pc, #120]	; (800a710 <_puts_r+0x88>)
 800a698:	9306      	str	r3, [sp, #24]
 800a69a:	2301      	movs	r3, #1
 800a69c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800a6a0:	9307      	str	r3, [sp, #28]
 800a6a2:	4418      	add	r0, r3
 800a6a4:	ab04      	add	r3, sp, #16
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	9302      	str	r3, [sp, #8]
 800a6ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a6ae:	68ac      	ldr	r4, [r5, #8]
 800a6b0:	9003      	str	r0, [sp, #12]
 800a6b2:	b913      	cbnz	r3, 800a6ba <_puts_r+0x32>
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f7ff fbf5 	bl	8009ea4 <__sinit>
 800a6ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6bc:	07db      	lsls	r3, r3, #31
 800a6be:	d405      	bmi.n	800a6cc <_puts_r+0x44>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	0598      	lsls	r0, r3, #22
 800a6c4:	d402      	bmi.n	800a6cc <_puts_r+0x44>
 800a6c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6c8:	f7ff fd6e 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800a6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d0:	0499      	lsls	r1, r3, #18
 800a6d2:	d406      	bmi.n	800a6e2 <_puts_r+0x5a>
 800a6d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6e0:	6663      	str	r3, [r4, #100]	; 0x64
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	aa01      	add	r2, sp, #4
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	f003 fa08 	bl	800dafc <__sfvwrite_r>
 800a6ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	bf14      	ite	ne
 800a6f2:	f04f 35ff 	movne.w	r5, #4294967295
 800a6f6:	250a      	moveq	r5, #10
 800a6f8:	07da      	lsls	r2, r3, #31
 800a6fa:	d405      	bmi.n	800a708 <_puts_r+0x80>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	059b      	lsls	r3, r3, #22
 800a700:	d402      	bmi.n	800a708 <_puts_r+0x80>
 800a702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a704:	f7ff fd51 	bl	800a1aa <__retarget_lock_release_recursive>
 800a708:	4628      	mov	r0, r5
 800a70a:	b009      	add	sp, #36	; 0x24
 800a70c:	bd30      	pop	{r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	08010b26 	.word	0x08010b26

0800a714 <puts>:
 800a714:	4b02      	ldr	r3, [pc, #8]	; (800a720 <puts+0xc>)
 800a716:	4601      	mov	r1, r0
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	f7ff bfb5 	b.w	800a688 <_puts_r>
 800a71e:	bf00      	nop
 800a720:	2000001c 	.word	0x2000001c

0800a724 <realloc>:
 800a724:	4b02      	ldr	r3, [pc, #8]	; (800a730 <realloc+0xc>)
 800a726:	460a      	mov	r2, r1
 800a728:	4601      	mov	r1, r0
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	f000 b802 	b.w	800a734 <_realloc_r>
 800a730:	2000001c 	.word	0x2000001c

0800a734 <_realloc_r>:
 800a734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	4681      	mov	r9, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	b929      	cbnz	r1, 800a74a <_realloc_r+0x16>
 800a73e:	4611      	mov	r1, r2
 800a740:	b003      	add	sp, #12
 800a742:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a746:	f7ff bd41 	b.w	800a1cc <_malloc_r>
 800a74a:	9201      	str	r2, [sp, #4]
 800a74c:	f7ff ff90 	bl	800a670 <__malloc_lock>
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	f102 080b 	add.w	r8, r2, #11
 800a756:	f1b8 0f16 	cmp.w	r8, #22
 800a75a:	d90b      	bls.n	800a774 <_realloc_r+0x40>
 800a75c:	f038 0807 	bics.w	r8, r8, #7
 800a760:	d50a      	bpl.n	800a778 <_realloc_r+0x44>
 800a762:	230c      	movs	r3, #12
 800a764:	f8c9 3000 	str.w	r3, [r9]
 800a768:	f04f 0b00 	mov.w	fp, #0
 800a76c:	4658      	mov	r0, fp
 800a76e:	b003      	add	sp, #12
 800a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a774:	f04f 0810 	mov.w	r8, #16
 800a778:	4590      	cmp	r8, r2
 800a77a:	d3f2      	bcc.n	800a762 <_realloc_r+0x2e>
 800a77c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a780:	f025 0603 	bic.w	r6, r5, #3
 800a784:	45b0      	cmp	r8, r6
 800a786:	f1a4 0a08 	sub.w	sl, r4, #8
 800a78a:	f340 816e 	ble.w	800aa6a <_realloc_r+0x336>
 800a78e:	499b      	ldr	r1, [pc, #620]	; (800a9fc <_realloc_r+0x2c8>)
 800a790:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a794:	eb0a 0306 	add.w	r3, sl, r6
 800a798:	459c      	cmp	ip, r3
 800a79a:	6859      	ldr	r1, [r3, #4]
 800a79c:	d005      	beq.n	800a7aa <_realloc_r+0x76>
 800a79e:	f021 0001 	bic.w	r0, r1, #1
 800a7a2:	4418      	add	r0, r3
 800a7a4:	6840      	ldr	r0, [r0, #4]
 800a7a6:	07c7      	lsls	r7, r0, #31
 800a7a8:	d427      	bmi.n	800a7fa <_realloc_r+0xc6>
 800a7aa:	f021 0103 	bic.w	r1, r1, #3
 800a7ae:	459c      	cmp	ip, r3
 800a7b0:	eb06 0701 	add.w	r7, r6, r1
 800a7b4:	d119      	bne.n	800a7ea <_realloc_r+0xb6>
 800a7b6:	f108 0010 	add.w	r0, r8, #16
 800a7ba:	42b8      	cmp	r0, r7
 800a7bc:	dc1f      	bgt.n	800a7fe <_realloc_r+0xca>
 800a7be:	eb0a 0308 	add.w	r3, sl, r8
 800a7c2:	4a8e      	ldr	r2, [pc, #568]	; (800a9fc <_realloc_r+0x2c8>)
 800a7c4:	eba7 0708 	sub.w	r7, r7, r8
 800a7c8:	f047 0701 	orr.w	r7, r7, #1
 800a7cc:	6093      	str	r3, [r2, #8]
 800a7ce:	605f      	str	r7, [r3, #4]
 800a7d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	ea43 0308 	orr.w	r3, r3, r8
 800a7dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	f7ff ff4b 	bl	800a67c <__malloc_unlock>
 800a7e6:	46a3      	mov	fp, r4
 800a7e8:	e7c0      	b.n	800a76c <_realloc_r+0x38>
 800a7ea:	45b8      	cmp	r8, r7
 800a7ec:	dc07      	bgt.n	800a7fe <_realloc_r+0xca>
 800a7ee:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a7f2:	60da      	str	r2, [r3, #12]
 800a7f4:	6093      	str	r3, [r2, #8]
 800a7f6:	4655      	mov	r5, sl
 800a7f8:	e07f      	b.n	800a8fa <_realloc_r+0x1c6>
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	07e8      	lsls	r0, r5, #31
 800a800:	f100 80e5 	bmi.w	800a9ce <_realloc_r+0x29a>
 800a804:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a808:	ebaa 0505 	sub.w	r5, sl, r5
 800a80c:	6868      	ldr	r0, [r5, #4]
 800a80e:	f020 0003 	bic.w	r0, r0, #3
 800a812:	eb00 0b06 	add.w	fp, r0, r6
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 80a5 	beq.w	800a966 <_realloc_r+0x232>
 800a81c:	459c      	cmp	ip, r3
 800a81e:	eb01 070b 	add.w	r7, r1, fp
 800a822:	d14a      	bne.n	800a8ba <_realloc_r+0x186>
 800a824:	f108 0310 	add.w	r3, r8, #16
 800a828:	42bb      	cmp	r3, r7
 800a82a:	f300 809c 	bgt.w	800a966 <_realloc_r+0x232>
 800a82e:	46ab      	mov	fp, r5
 800a830:	68eb      	ldr	r3, [r5, #12]
 800a832:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a836:	60d3      	str	r3, [r2, #12]
 800a838:	609a      	str	r2, [r3, #8]
 800a83a:	1f32      	subs	r2, r6, #4
 800a83c:	2a24      	cmp	r2, #36	; 0x24
 800a83e:	d837      	bhi.n	800a8b0 <_realloc_r+0x17c>
 800a840:	2a13      	cmp	r2, #19
 800a842:	d933      	bls.n	800a8ac <_realloc_r+0x178>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	60ab      	str	r3, [r5, #8]
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	60eb      	str	r3, [r5, #12]
 800a84c:	2a1b      	cmp	r2, #27
 800a84e:	d81b      	bhi.n	800a888 <_realloc_r+0x154>
 800a850:	3408      	adds	r4, #8
 800a852:	f105 0310 	add.w	r3, r5, #16
 800a856:	6822      	ldr	r2, [r4, #0]
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	6862      	ldr	r2, [r4, #4]
 800a85c:	605a      	str	r2, [r3, #4]
 800a85e:	68a2      	ldr	r2, [r4, #8]
 800a860:	609a      	str	r2, [r3, #8]
 800a862:	eb05 0308 	add.w	r3, r5, r8
 800a866:	4a65      	ldr	r2, [pc, #404]	; (800a9fc <_realloc_r+0x2c8>)
 800a868:	eba7 0708 	sub.w	r7, r7, r8
 800a86c:	f047 0701 	orr.w	r7, r7, #1
 800a870:	6093      	str	r3, [r2, #8]
 800a872:	605f      	str	r7, [r3, #4]
 800a874:	686b      	ldr	r3, [r5, #4]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	ea43 0308 	orr.w	r3, r3, r8
 800a87e:	606b      	str	r3, [r5, #4]
 800a880:	4648      	mov	r0, r9
 800a882:	f7ff fefb 	bl	800a67c <__malloc_unlock>
 800a886:	e771      	b.n	800a76c <_realloc_r+0x38>
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	612b      	str	r3, [r5, #16]
 800a88c:	68e3      	ldr	r3, [r4, #12]
 800a88e:	616b      	str	r3, [r5, #20]
 800a890:	2a24      	cmp	r2, #36	; 0x24
 800a892:	bf01      	itttt	eq
 800a894:	6923      	ldreq	r3, [r4, #16]
 800a896:	61ab      	streq	r3, [r5, #24]
 800a898:	6962      	ldreq	r2, [r4, #20]
 800a89a:	61ea      	streq	r2, [r5, #28]
 800a89c:	bf19      	ittee	ne
 800a89e:	3410      	addne	r4, #16
 800a8a0:	f105 0318 	addne.w	r3, r5, #24
 800a8a4:	f105 0320 	addeq.w	r3, r5, #32
 800a8a8:	3418      	addeq	r4, #24
 800a8aa:	e7d4      	b.n	800a856 <_realloc_r+0x122>
 800a8ac:	465b      	mov	r3, fp
 800a8ae:	e7d2      	b.n	800a856 <_realloc_r+0x122>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f003 fe0a 	bl	800e4cc <memmove>
 800a8b8:	e7d3      	b.n	800a862 <_realloc_r+0x12e>
 800a8ba:	45b8      	cmp	r8, r7
 800a8bc:	dc53      	bgt.n	800a966 <_realloc_r+0x232>
 800a8be:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	60da      	str	r2, [r3, #12]
 800a8c6:	6093      	str	r3, [r2, #8]
 800a8c8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a8cc:	68eb      	ldr	r3, [r5, #12]
 800a8ce:	60d3      	str	r3, [r2, #12]
 800a8d0:	609a      	str	r2, [r3, #8]
 800a8d2:	1f32      	subs	r2, r6, #4
 800a8d4:	2a24      	cmp	r2, #36	; 0x24
 800a8d6:	d842      	bhi.n	800a95e <_realloc_r+0x22a>
 800a8d8:	2a13      	cmp	r2, #19
 800a8da:	d908      	bls.n	800a8ee <_realloc_r+0x1ba>
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	60ab      	str	r3, [r5, #8]
 800a8e0:	6863      	ldr	r3, [r4, #4]
 800a8e2:	60eb      	str	r3, [r5, #12]
 800a8e4:	2a1b      	cmp	r2, #27
 800a8e6:	d828      	bhi.n	800a93a <_realloc_r+0x206>
 800a8e8:	3408      	adds	r4, #8
 800a8ea:	f105 0010 	add.w	r0, r5, #16
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	6003      	str	r3, [r0, #0]
 800a8f2:	6863      	ldr	r3, [r4, #4]
 800a8f4:	6043      	str	r3, [r0, #4]
 800a8f6:	68a3      	ldr	r3, [r4, #8]
 800a8f8:	6083      	str	r3, [r0, #8]
 800a8fa:	686b      	ldr	r3, [r5, #4]
 800a8fc:	eba7 0008 	sub.w	r0, r7, r8
 800a900:	280f      	cmp	r0, #15
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	eb05 0207 	add.w	r2, r5, r7
 800a90a:	f240 80b0 	bls.w	800aa6e <_realloc_r+0x33a>
 800a90e:	eb05 0108 	add.w	r1, r5, r8
 800a912:	ea48 0303 	orr.w	r3, r8, r3
 800a916:	f040 0001 	orr.w	r0, r0, #1
 800a91a:	606b      	str	r3, [r5, #4]
 800a91c:	6048      	str	r0, [r1, #4]
 800a91e:	6853      	ldr	r3, [r2, #4]
 800a920:	f043 0301 	orr.w	r3, r3, #1
 800a924:	6053      	str	r3, [r2, #4]
 800a926:	3108      	adds	r1, #8
 800a928:	4648      	mov	r0, r9
 800a92a:	f7ff fb37 	bl	8009f9c <_free_r>
 800a92e:	4648      	mov	r0, r9
 800a930:	f7ff fea4 	bl	800a67c <__malloc_unlock>
 800a934:	f105 0b08 	add.w	fp, r5, #8
 800a938:	e718      	b.n	800a76c <_realloc_r+0x38>
 800a93a:	68a3      	ldr	r3, [r4, #8]
 800a93c:	612b      	str	r3, [r5, #16]
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	616b      	str	r3, [r5, #20]
 800a942:	2a24      	cmp	r2, #36	; 0x24
 800a944:	bf01      	itttt	eq
 800a946:	6923      	ldreq	r3, [r4, #16]
 800a948:	61ab      	streq	r3, [r5, #24]
 800a94a:	6963      	ldreq	r3, [r4, #20]
 800a94c:	61eb      	streq	r3, [r5, #28]
 800a94e:	bf19      	ittee	ne
 800a950:	3410      	addne	r4, #16
 800a952:	f105 0018 	addne.w	r0, r5, #24
 800a956:	f105 0020 	addeq.w	r0, r5, #32
 800a95a:	3418      	addeq	r4, #24
 800a95c:	e7c7      	b.n	800a8ee <_realloc_r+0x1ba>
 800a95e:	4621      	mov	r1, r4
 800a960:	f003 fdb4 	bl	800e4cc <memmove>
 800a964:	e7c9      	b.n	800a8fa <_realloc_r+0x1c6>
 800a966:	45d8      	cmp	r8, fp
 800a968:	dc31      	bgt.n	800a9ce <_realloc_r+0x29a>
 800a96a:	4628      	mov	r0, r5
 800a96c:	68eb      	ldr	r3, [r5, #12]
 800a96e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a972:	60d3      	str	r3, [r2, #12]
 800a974:	609a      	str	r2, [r3, #8]
 800a976:	1f32      	subs	r2, r6, #4
 800a978:	2a24      	cmp	r2, #36	; 0x24
 800a97a:	d824      	bhi.n	800a9c6 <_realloc_r+0x292>
 800a97c:	2a13      	cmp	r2, #19
 800a97e:	d908      	bls.n	800a992 <_realloc_r+0x25e>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	60ab      	str	r3, [r5, #8]
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	60eb      	str	r3, [r5, #12]
 800a988:	2a1b      	cmp	r2, #27
 800a98a:	d80a      	bhi.n	800a9a2 <_realloc_r+0x26e>
 800a98c:	3408      	adds	r4, #8
 800a98e:	f105 0010 	add.w	r0, r5, #16
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	6863      	ldr	r3, [r4, #4]
 800a998:	6043      	str	r3, [r0, #4]
 800a99a:	68a3      	ldr	r3, [r4, #8]
 800a99c:	6083      	str	r3, [r0, #8]
 800a99e:	465f      	mov	r7, fp
 800a9a0:	e7ab      	b.n	800a8fa <_realloc_r+0x1c6>
 800a9a2:	68a3      	ldr	r3, [r4, #8]
 800a9a4:	612b      	str	r3, [r5, #16]
 800a9a6:	68e3      	ldr	r3, [r4, #12]
 800a9a8:	616b      	str	r3, [r5, #20]
 800a9aa:	2a24      	cmp	r2, #36	; 0x24
 800a9ac:	bf01      	itttt	eq
 800a9ae:	6923      	ldreq	r3, [r4, #16]
 800a9b0:	61ab      	streq	r3, [r5, #24]
 800a9b2:	6963      	ldreq	r3, [r4, #20]
 800a9b4:	61eb      	streq	r3, [r5, #28]
 800a9b6:	bf19      	ittee	ne
 800a9b8:	3410      	addne	r4, #16
 800a9ba:	f105 0018 	addne.w	r0, r5, #24
 800a9be:	f105 0020 	addeq.w	r0, r5, #32
 800a9c2:	3418      	addeq	r4, #24
 800a9c4:	e7e5      	b.n	800a992 <_realloc_r+0x25e>
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	f003 fd80 	bl	800e4cc <memmove>
 800a9cc:	e7e7      	b.n	800a99e <_realloc_r+0x26a>
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	4648      	mov	r0, r9
 800a9d2:	f7ff fbfb 	bl	800a1cc <_malloc_r>
 800a9d6:	4683      	mov	fp, r0
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f43f af51 	beq.w	800a880 <_realloc_r+0x14c>
 800a9de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a9e2:	f023 0301 	bic.w	r3, r3, #1
 800a9e6:	4453      	add	r3, sl
 800a9e8:	f1a0 0208 	sub.w	r2, r0, #8
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d107      	bne.n	800aa00 <_realloc_r+0x2cc>
 800a9f0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a9f4:	f027 0703 	bic.w	r7, r7, #3
 800a9f8:	4437      	add	r7, r6
 800a9fa:	e6fc      	b.n	800a7f6 <_realloc_r+0xc2>
 800a9fc:	20000448 	.word	0x20000448
 800aa00:	1f32      	subs	r2, r6, #4
 800aa02:	2a24      	cmp	r2, #36	; 0x24
 800aa04:	d82d      	bhi.n	800aa62 <_realloc_r+0x32e>
 800aa06:	2a13      	cmp	r2, #19
 800aa08:	d928      	bls.n	800aa5c <_realloc_r+0x328>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	6043      	str	r3, [r0, #4]
 800aa12:	2a1b      	cmp	r2, #27
 800aa14:	d80e      	bhi.n	800aa34 <_realloc_r+0x300>
 800aa16:	f104 0208 	add.w	r2, r4, #8
 800aa1a:	f100 0308 	add.w	r3, r0, #8
 800aa1e:	6811      	ldr	r1, [r2, #0]
 800aa20:	6019      	str	r1, [r3, #0]
 800aa22:	6851      	ldr	r1, [r2, #4]
 800aa24:	6059      	str	r1, [r3, #4]
 800aa26:	6892      	ldr	r2, [r2, #8]
 800aa28:	609a      	str	r2, [r3, #8]
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4648      	mov	r0, r9
 800aa2e:	f7ff fab5 	bl	8009f9c <_free_r>
 800aa32:	e725      	b.n	800a880 <_realloc_r+0x14c>
 800aa34:	68a3      	ldr	r3, [r4, #8]
 800aa36:	6083      	str	r3, [r0, #8]
 800aa38:	68e3      	ldr	r3, [r4, #12]
 800aa3a:	60c3      	str	r3, [r0, #12]
 800aa3c:	2a24      	cmp	r2, #36	; 0x24
 800aa3e:	bf01      	itttt	eq
 800aa40:	6923      	ldreq	r3, [r4, #16]
 800aa42:	6103      	streq	r3, [r0, #16]
 800aa44:	6961      	ldreq	r1, [r4, #20]
 800aa46:	6141      	streq	r1, [r0, #20]
 800aa48:	bf19      	ittee	ne
 800aa4a:	f104 0210 	addne.w	r2, r4, #16
 800aa4e:	f100 0310 	addne.w	r3, r0, #16
 800aa52:	f104 0218 	addeq.w	r2, r4, #24
 800aa56:	f100 0318 	addeq.w	r3, r0, #24
 800aa5a:	e7e0      	b.n	800aa1e <_realloc_r+0x2ea>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	4622      	mov	r2, r4
 800aa60:	e7dd      	b.n	800aa1e <_realloc_r+0x2ea>
 800aa62:	4621      	mov	r1, r4
 800aa64:	f003 fd32 	bl	800e4cc <memmove>
 800aa68:	e7df      	b.n	800aa2a <_realloc_r+0x2f6>
 800aa6a:	4637      	mov	r7, r6
 800aa6c:	e6c3      	b.n	800a7f6 <_realloc_r+0xc2>
 800aa6e:	431f      	orrs	r7, r3
 800aa70:	606f      	str	r7, [r5, #4]
 800aa72:	6853      	ldr	r3, [r2, #4]
 800aa74:	f043 0301 	orr.w	r3, r3, #1
 800aa78:	6053      	str	r3, [r2, #4]
 800aa7a:	e758      	b.n	800a92e <_realloc_r+0x1fa>

0800aa7c <cleanup_glue>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	460c      	mov	r4, r1
 800aa80:	6809      	ldr	r1, [r1, #0]
 800aa82:	4605      	mov	r5, r0
 800aa84:	b109      	cbz	r1, 800aa8a <cleanup_glue+0xe>
 800aa86:	f7ff fff9 	bl	800aa7c <cleanup_glue>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa92:	f7ff ba83 	b.w	8009f9c <_free_r>
	...

0800aa98 <_reclaim_reent>:
 800aa98:	4b20      	ldr	r3, [pc, #128]	; (800ab1c <_reclaim_reent+0x84>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4283      	cmp	r3, r0
 800aa9e:	b570      	push	{r4, r5, r6, lr}
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	d039      	beq.n	800ab18 <_reclaim_reent+0x80>
 800aaa4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800aaa6:	bb33      	cbnz	r3, 800aaf6 <_reclaim_reent+0x5e>
 800aaa8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aaaa:	b111      	cbz	r1, 800aab2 <_reclaim_reent+0x1a>
 800aaac:	4620      	mov	r0, r4
 800aaae:	f7ff fa75 	bl	8009f9c <_free_r>
 800aab2:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
 800aab6:	bb05      	cbnz	r5, 800aafa <_reclaim_reent+0x62>
 800aab8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aaba:	bb49      	cbnz	r1, 800ab10 <_reclaim_reent+0x78>
 800aabc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aabe:	b35b      	cbz	r3, 800ab18 <_reclaim_reent+0x80>
 800aac0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aac2:	4620      	mov	r0, r4
 800aac4:	4798      	blx	r3
 800aac6:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 800aaca:	b329      	cbz	r1, 800ab18 <_reclaim_reent+0x80>
 800aacc:	4620      	mov	r0, r4
 800aace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aad2:	f7ff bfd3 	b.w	800aa7c <cleanup_glue>
 800aad6:	5949      	ldr	r1, [r1, r5]
 800aad8:	b939      	cbnz	r1, 800aaea <_reclaim_reent+0x52>
 800aada:	3504      	adds	r5, #4
 800aadc:	2d80      	cmp	r5, #128	; 0x80
 800aade:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aae0:	d1f9      	bne.n	800aad6 <_reclaim_reent+0x3e>
 800aae2:	4620      	mov	r0, r4
 800aae4:	f7ff fa5a 	bl	8009f9c <_free_r>
 800aae8:	e7de      	b.n	800aaa8 <_reclaim_reent+0x10>
 800aaea:	680e      	ldr	r6, [r1, #0]
 800aaec:	4620      	mov	r0, r4
 800aaee:	f7ff fa55 	bl	8009f9c <_free_r>
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	e7f0      	b.n	800aad8 <_reclaim_reent+0x40>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	e7f0      	b.n	800aadc <_reclaim_reent+0x44>
 800aafa:	f504 76a6 	add.w	r6, r4, #332	; 0x14c
 800aafe:	42b5      	cmp	r5, r6
 800ab00:	d0da      	beq.n	800aab8 <_reclaim_reent+0x20>
 800ab02:	4629      	mov	r1, r5
 800ab04:	682d      	ldr	r5, [r5, #0]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff fa48 	bl	8009f9c <_free_r>
 800ab0c:	42ae      	cmp	r6, r5
 800ab0e:	e7f7      	b.n	800ab00 <_reclaim_reent+0x68>
 800ab10:	4620      	mov	r0, r4
 800ab12:	f7ff fa43 	bl	8009f9c <_free_r>
 800ab16:	e7d1      	b.n	800aabc <_reclaim_reent+0x24>
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
 800ab1a:	bf00      	nop
 800ab1c:	2000001c 	.word	0x2000001c

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_sbrk_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f7 ff94 	bl	8002a58 <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20017acc 	.word	0x20017acc

0800ab40 <sprintf>:
 800ab40:	b40e      	push	{r1, r2, r3}
 800ab42:	b500      	push	{lr}
 800ab44:	b09c      	sub	sp, #112	; 0x70
 800ab46:	ab1d      	add	r3, sp, #116	; 0x74
 800ab48:	9002      	str	r0, [sp, #8]
 800ab4a:	9006      	str	r0, [sp, #24]
 800ab4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab50:	4809      	ldr	r0, [pc, #36]	; (800ab78 <sprintf+0x38>)
 800ab52:	9107      	str	r1, [sp, #28]
 800ab54:	9104      	str	r1, [sp, #16]
 800ab56:	4909      	ldr	r1, [pc, #36]	; (800ab7c <sprintf+0x3c>)
 800ab58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab5c:	9105      	str	r1, [sp, #20]
 800ab5e:	6800      	ldr	r0, [r0, #0]
 800ab60:	9301      	str	r3, [sp, #4]
 800ab62:	a902      	add	r1, sp, #8
 800ab64:	f000 feb8 	bl	800b8d8 <_svfprintf_r>
 800ab68:	9b02      	ldr	r3, [sp, #8]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	701a      	strb	r2, [r3, #0]
 800ab6e:	b01c      	add	sp, #112	; 0x70
 800ab70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab74:	b003      	add	sp, #12
 800ab76:	4770      	bx	lr
 800ab78:	2000001c 	.word	0x2000001c
 800ab7c:	ffff0208 	.word	0xffff0208

0800ab80 <__sread>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	460c      	mov	r4, r1
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	f004 f92e 	bl	800ede8 <_read_r>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	bfab      	itete	ge
 800ab90:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800ab92:	89a3      	ldrhlt	r3, [r4, #12]
 800ab94:	181b      	addge	r3, r3, r0
 800ab96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab9a:	bfac      	ite	ge
 800ab9c:	6523      	strge	r3, [r4, #80]	; 0x50
 800ab9e:	81a3      	strhlt	r3, [r4, #12]
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <__swrite>:
 800aba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	461f      	mov	r7, r3
 800aba8:	898b      	ldrh	r3, [r1, #12]
 800abaa:	05db      	lsls	r3, r3, #23
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	4616      	mov	r6, r2
 800abb2:	d505      	bpl.n	800abc0 <__swrite+0x1e>
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2302      	movs	r3, #2
 800abba:	2200      	movs	r2, #0
 800abbc:	f003 fc62 	bl	800e484 <_lseek_r>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	f002 b891 	b.w	800ccfc <_write_r>

0800abda <__sseek>:
 800abda:	b510      	push	{r4, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe2:	f003 fc4f 	bl	800e484 <_lseek_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	bf15      	itete	ne
 800abec:	6520      	strne	r0, [r4, #80]	; 0x50
 800abee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abf6:	81a3      	strheq	r3, [r4, #12]
 800abf8:	bf18      	it	ne
 800abfa:	81a3      	strhne	r3, [r4, #12]
 800abfc:	bd10      	pop	{r4, pc}

0800abfe <__sclose>:
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f002 b89d 	b.w	800cd40 <_close_r>

0800ac06 <strchr>:
 800ac06:	b2c9      	uxtb	r1, r1
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac0e:	b11a      	cbz	r2, 800ac18 <strchr+0x12>
 800ac10:	428a      	cmp	r2, r1
 800ac12:	d1f9      	bne.n	800ac08 <strchr+0x2>
 800ac14:	4618      	mov	r0, r3
 800ac16:	4770      	bx	lr
 800ac18:	2900      	cmp	r1, #0
 800ac1a:	bf18      	it	ne
 800ac1c:	2300      	movne	r3, #0
 800ac1e:	e7f9      	b.n	800ac14 <strchr+0xe>

0800ac20 <strncmp>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	b17a      	cbz	r2, 800ac44 <strncmp+0x24>
 800ac24:	4603      	mov	r3, r0
 800ac26:	3901      	subs	r1, #1
 800ac28:	1884      	adds	r4, r0, r2
 800ac2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac32:	4290      	cmp	r0, r2
 800ac34:	d101      	bne.n	800ac3a <strncmp+0x1a>
 800ac36:	42a3      	cmp	r3, r4
 800ac38:	d101      	bne.n	800ac3e <strncmp+0x1e>
 800ac3a:	1a80      	subs	r0, r0, r2
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d1f3      	bne.n	800ac2a <strncmp+0xa>
 800ac42:	e7fa      	b.n	800ac3a <strncmp+0x1a>
 800ac44:	4610      	mov	r0, r2
 800ac46:	e7f9      	b.n	800ac3c <strncmp+0x1c>

0800ac48 <strstr>:
 800ac48:	780a      	ldrb	r2, [r1, #0]
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	b96a      	cbnz	r2, 800ac6a <strstr+0x22>
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d109      	bne.n	800ac68 <strstr+0x20>
 800ac54:	460c      	mov	r4, r1
 800ac56:	4605      	mov	r5, r0
 800ac58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0f6      	beq.n	800ac4e <strstr+0x6>
 800ac60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ac64:	429e      	cmp	r6, r3
 800ac66:	d0f7      	beq.n	800ac58 <strstr+0x10>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	7803      	ldrb	r3, [r0, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1ef      	bne.n	800ac50 <strstr+0x8>
 800ac70:	4618      	mov	r0, r3
 800ac72:	e7ec      	b.n	800ac4e <strstr+0x6>

0800ac74 <sulp>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	4604      	mov	r4, r0
 800ac78:	460d      	mov	r5, r1
 800ac7a:	ec45 4b10 	vmov	d0, r4, r5
 800ac7e:	4616      	mov	r6, r2
 800ac80:	f003 ff62 	bl	800eb48 <__ulp>
 800ac84:	ec51 0b10 	vmov	r0, r1, d0
 800ac88:	b17e      	cbz	r6, 800acaa <sulp+0x36>
 800ac8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dd09      	ble.n	800acaa <sulp+0x36>
 800ac96:	051b      	lsls	r3, r3, #20
 800ac98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac9c:	2400      	movs	r4, #0
 800ac9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aca2:	4622      	mov	r2, r4
 800aca4:	462b      	mov	r3, r5
 800aca6:	f7f5 fcbf 	bl	8000628 <__aeabi_dmul>
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	0000      	movs	r0, r0
	...

0800acb0 <_strtod_l>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	ed2d 8b02 	vpush	{d8}
 800acb8:	b09d      	sub	sp, #116	; 0x74
 800acba:	461f      	mov	r7, r3
 800acbc:	2300      	movs	r3, #0
 800acbe:	9318      	str	r3, [sp, #96]	; 0x60
 800acc0:	4ba2      	ldr	r3, [pc, #648]	; (800af4c <_strtod_l+0x29c>)
 800acc2:	9213      	str	r2, [sp, #76]	; 0x4c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	9305      	str	r3, [sp, #20]
 800acc8:	4604      	mov	r4, r0
 800acca:	4618      	mov	r0, r3
 800accc:	4688      	mov	r8, r1
 800acce:	f7f5 fa91 	bl	80001f4 <strlen>
 800acd2:	f04f 0a00 	mov.w	sl, #0
 800acd6:	4605      	mov	r5, r0
 800acd8:	f04f 0b00 	mov.w	fp, #0
 800acdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ace0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ace2:	781a      	ldrb	r2, [r3, #0]
 800ace4:	2a2b      	cmp	r2, #43	; 0x2b
 800ace6:	d04e      	beq.n	800ad86 <_strtod_l+0xd6>
 800ace8:	d83b      	bhi.n	800ad62 <_strtod_l+0xb2>
 800acea:	2a0d      	cmp	r2, #13
 800acec:	d834      	bhi.n	800ad58 <_strtod_l+0xa8>
 800acee:	2a08      	cmp	r2, #8
 800acf0:	d834      	bhi.n	800ad5c <_strtod_l+0xac>
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d03e      	beq.n	800ad74 <_strtod_l+0xc4>
 800acf6:	2300      	movs	r3, #0
 800acf8:	930a      	str	r3, [sp, #40]	; 0x28
 800acfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800acfc:	7833      	ldrb	r3, [r6, #0]
 800acfe:	2b30      	cmp	r3, #48	; 0x30
 800ad00:	f040 80b0 	bne.w	800ae64 <_strtod_l+0x1b4>
 800ad04:	7873      	ldrb	r3, [r6, #1]
 800ad06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad0a:	2b58      	cmp	r3, #88	; 0x58
 800ad0c:	d168      	bne.n	800ade0 <_strtod_l+0x130>
 800ad0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	ab18      	add	r3, sp, #96	; 0x60
 800ad14:	9702      	str	r7, [sp, #8]
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	4a8d      	ldr	r2, [pc, #564]	; (800af50 <_strtod_l+0x2a0>)
 800ad1a:	ab19      	add	r3, sp, #100	; 0x64
 800ad1c:	a917      	add	r1, sp, #92	; 0x5c
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f003 f89e 	bl	800de60 <__gethex>
 800ad24:	f010 0707 	ands.w	r7, r0, #7
 800ad28:	4605      	mov	r5, r0
 800ad2a:	d005      	beq.n	800ad38 <_strtod_l+0x88>
 800ad2c:	2f06      	cmp	r7, #6
 800ad2e:	d12c      	bne.n	800ad8a <_strtod_l+0xda>
 800ad30:	3601      	adds	r6, #1
 800ad32:	2300      	movs	r3, #0
 800ad34:	9617      	str	r6, [sp, #92]	; 0x5c
 800ad36:	930a      	str	r3, [sp, #40]	; 0x28
 800ad38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f040 8590 	bne.w	800b860 <_strtod_l+0xbb0>
 800ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad42:	b1eb      	cbz	r3, 800ad80 <_strtod_l+0xd0>
 800ad44:	4652      	mov	r2, sl
 800ad46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad4a:	ec43 2b10 	vmov	d0, r2, r3
 800ad4e:	b01d      	add	sp, #116	; 0x74
 800ad50:	ecbd 8b02 	vpop	{d8}
 800ad54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad58:	2a20      	cmp	r2, #32
 800ad5a:	d1cc      	bne.n	800acf6 <_strtod_l+0x46>
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad60:	e7be      	b.n	800ace0 <_strtod_l+0x30>
 800ad62:	2a2d      	cmp	r2, #45	; 0x2d
 800ad64:	d1c7      	bne.n	800acf6 <_strtod_l+0x46>
 800ad66:	2201      	movs	r2, #1
 800ad68:	920a      	str	r2, [sp, #40]	; 0x28
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad6e:	785b      	ldrb	r3, [r3, #1]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1c2      	bne.n	800acfa <_strtod_l+0x4a>
 800ad74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f040 856e 	bne.w	800b85c <_strtod_l+0xbac>
 800ad80:	4652      	mov	r2, sl
 800ad82:	465b      	mov	r3, fp
 800ad84:	e7e1      	b.n	800ad4a <_strtod_l+0x9a>
 800ad86:	2200      	movs	r2, #0
 800ad88:	e7ee      	b.n	800ad68 <_strtod_l+0xb8>
 800ad8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad8c:	b13a      	cbz	r2, 800ad9e <_strtod_l+0xee>
 800ad8e:	2135      	movs	r1, #53	; 0x35
 800ad90:	a81a      	add	r0, sp, #104	; 0x68
 800ad92:	f003 ffe4 	bl	800ed5e <__copybits>
 800ad96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f003 fbd6 	bl	800e54a <_Bfree>
 800ad9e:	3f01      	subs	r7, #1
 800ada0:	2f04      	cmp	r7, #4
 800ada2:	d806      	bhi.n	800adb2 <_strtod_l+0x102>
 800ada4:	e8df f007 	tbb	[pc, r7]
 800ada8:	1714030a 	.word	0x1714030a
 800adac:	0a          	.byte	0x0a
 800adad:	00          	.byte	0x00
 800adae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800adb2:	0728      	lsls	r0, r5, #28
 800adb4:	d5c0      	bpl.n	800ad38 <_strtod_l+0x88>
 800adb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800adba:	e7bd      	b.n	800ad38 <_strtod_l+0x88>
 800adbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800adc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800adc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adce:	e7f0      	b.n	800adb2 <_strtod_l+0x102>
 800add0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800af54 <_strtod_l+0x2a4>
 800add4:	e7ed      	b.n	800adb2 <_strtod_l+0x102>
 800add6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800adda:	f04f 3aff 	mov.w	sl, #4294967295
 800adde:	e7e8      	b.n	800adb2 <_strtod_l+0x102>
 800ade0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ade6:	785b      	ldrb	r3, [r3, #1]
 800ade8:	2b30      	cmp	r3, #48	; 0x30
 800adea:	d0f9      	beq.n	800ade0 <_strtod_l+0x130>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0a3      	beq.n	800ad38 <_strtod_l+0x88>
 800adf0:	2301      	movs	r3, #1
 800adf2:	f04f 0900 	mov.w	r9, #0
 800adf6:	9304      	str	r3, [sp, #16]
 800adf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adfa:	9308      	str	r3, [sp, #32]
 800adfc:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae00:	464f      	mov	r7, r9
 800ae02:	220a      	movs	r2, #10
 800ae04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ae06:	7806      	ldrb	r6, [r0, #0]
 800ae08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae0c:	b2d9      	uxtb	r1, r3
 800ae0e:	2909      	cmp	r1, #9
 800ae10:	d92a      	bls.n	800ae68 <_strtod_l+0x1b8>
 800ae12:	9905      	ldr	r1, [sp, #20]
 800ae14:	462a      	mov	r2, r5
 800ae16:	f7ff ff03 	bl	800ac20 <strncmp>
 800ae1a:	b398      	cbz	r0, 800ae84 <_strtod_l+0x1d4>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	4632      	mov	r2, r6
 800ae20:	463d      	mov	r5, r7
 800ae22:	9005      	str	r0, [sp, #20]
 800ae24:	4603      	mov	r3, r0
 800ae26:	2a65      	cmp	r2, #101	; 0x65
 800ae28:	d001      	beq.n	800ae2e <_strtod_l+0x17e>
 800ae2a:	2a45      	cmp	r2, #69	; 0x45
 800ae2c:	d118      	bne.n	800ae60 <_strtod_l+0x1b0>
 800ae2e:	b91d      	cbnz	r5, 800ae38 <_strtod_l+0x188>
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	4302      	orrs	r2, r0
 800ae34:	d09e      	beq.n	800ad74 <_strtod_l+0xc4>
 800ae36:	2500      	movs	r5, #0
 800ae38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ae3c:	f108 0201 	add.w	r2, r8, #1
 800ae40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae42:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ae46:	2a2b      	cmp	r2, #43	; 0x2b
 800ae48:	d075      	beq.n	800af36 <_strtod_l+0x286>
 800ae4a:	2a2d      	cmp	r2, #45	; 0x2d
 800ae4c:	d07b      	beq.n	800af46 <_strtod_l+0x296>
 800ae4e:	f04f 0c00 	mov.w	ip, #0
 800ae52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae56:	2909      	cmp	r1, #9
 800ae58:	f240 8082 	bls.w	800af60 <_strtod_l+0x2b0>
 800ae5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae60:	2600      	movs	r6, #0
 800ae62:	e09d      	b.n	800afa0 <_strtod_l+0x2f0>
 800ae64:	2300      	movs	r3, #0
 800ae66:	e7c4      	b.n	800adf2 <_strtod_l+0x142>
 800ae68:	2f08      	cmp	r7, #8
 800ae6a:	bfd8      	it	le
 800ae6c:	9907      	ldrle	r1, [sp, #28]
 800ae6e:	f100 0001 	add.w	r0, r0, #1
 800ae72:	bfda      	itte	le
 800ae74:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae78:	9307      	strle	r3, [sp, #28]
 800ae7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ae7e:	3701      	adds	r7, #1
 800ae80:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae82:	e7bf      	b.n	800ae04 <_strtod_l+0x154>
 800ae84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae86:	195a      	adds	r2, r3, r5
 800ae88:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae8a:	5d5a      	ldrb	r2, [r3, r5]
 800ae8c:	2f00      	cmp	r7, #0
 800ae8e:	d037      	beq.n	800af00 <_strtod_l+0x250>
 800ae90:	9005      	str	r0, [sp, #20]
 800ae92:	463d      	mov	r5, r7
 800ae94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae98:	2b09      	cmp	r3, #9
 800ae9a:	d912      	bls.n	800aec2 <_strtod_l+0x212>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e7c2      	b.n	800ae26 <_strtod_l+0x176>
 800aea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aea6:	785a      	ldrb	r2, [r3, #1]
 800aea8:	3001      	adds	r0, #1
 800aeaa:	2a30      	cmp	r2, #48	; 0x30
 800aeac:	d0f8      	beq.n	800aea0 <_strtod_l+0x1f0>
 800aeae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	f200 84d9 	bhi.w	800b86a <_strtod_l+0xbba>
 800aeb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aeba:	9005      	str	r0, [sp, #20]
 800aebc:	2000      	movs	r0, #0
 800aebe:	9308      	str	r3, [sp, #32]
 800aec0:	4605      	mov	r5, r0
 800aec2:	3a30      	subs	r2, #48	; 0x30
 800aec4:	f100 0301 	add.w	r3, r0, #1
 800aec8:	d014      	beq.n	800aef4 <_strtod_l+0x244>
 800aeca:	9905      	ldr	r1, [sp, #20]
 800aecc:	4419      	add	r1, r3
 800aece:	9105      	str	r1, [sp, #20]
 800aed0:	462b      	mov	r3, r5
 800aed2:	eb00 0e05 	add.w	lr, r0, r5
 800aed6:	210a      	movs	r1, #10
 800aed8:	4573      	cmp	r3, lr
 800aeda:	d113      	bne.n	800af04 <_strtod_l+0x254>
 800aedc:	182b      	adds	r3, r5, r0
 800aede:	2b08      	cmp	r3, #8
 800aee0:	f105 0501 	add.w	r5, r5, #1
 800aee4:	4405      	add	r5, r0
 800aee6:	dc1c      	bgt.n	800af22 <_strtod_l+0x272>
 800aee8:	9907      	ldr	r1, [sp, #28]
 800aeea:	230a      	movs	r3, #10
 800aeec:	fb03 2301 	mla	r3, r3, r1, r2
 800aef0:	9307      	str	r3, [sp, #28]
 800aef2:	2300      	movs	r3, #0
 800aef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aef6:	1c51      	adds	r1, r2, #1
 800aef8:	9117      	str	r1, [sp, #92]	; 0x5c
 800aefa:	7852      	ldrb	r2, [r2, #1]
 800aefc:	4618      	mov	r0, r3
 800aefe:	e7c9      	b.n	800ae94 <_strtod_l+0x1e4>
 800af00:	4638      	mov	r0, r7
 800af02:	e7d2      	b.n	800aeaa <_strtod_l+0x1fa>
 800af04:	2b08      	cmp	r3, #8
 800af06:	dc04      	bgt.n	800af12 <_strtod_l+0x262>
 800af08:	9e07      	ldr	r6, [sp, #28]
 800af0a:	434e      	muls	r6, r1
 800af0c:	9607      	str	r6, [sp, #28]
 800af0e:	3301      	adds	r3, #1
 800af10:	e7e2      	b.n	800aed8 <_strtod_l+0x228>
 800af12:	f103 0c01 	add.w	ip, r3, #1
 800af16:	f1bc 0f10 	cmp.w	ip, #16
 800af1a:	bfd8      	it	le
 800af1c:	fb01 f909 	mulle.w	r9, r1, r9
 800af20:	e7f5      	b.n	800af0e <_strtod_l+0x25e>
 800af22:	2d10      	cmp	r5, #16
 800af24:	bfdc      	itt	le
 800af26:	230a      	movle	r3, #10
 800af28:	fb03 2909 	mlale	r9, r3, r9, r2
 800af2c:	e7e1      	b.n	800aef2 <_strtod_l+0x242>
 800af2e:	2300      	movs	r3, #0
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	2301      	movs	r3, #1
 800af34:	e77c      	b.n	800ae30 <_strtod_l+0x180>
 800af36:	f04f 0c00 	mov.w	ip, #0
 800af3a:	f108 0202 	add.w	r2, r8, #2
 800af3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800af40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800af44:	e785      	b.n	800ae52 <_strtod_l+0x1a2>
 800af46:	f04f 0c01 	mov.w	ip, #1
 800af4a:	e7f6      	b.n	800af3a <_strtod_l+0x28a>
 800af4c:	0801097c 	.word	0x0801097c
 800af50:	080107f4 	.word	0x080107f4
 800af54:	7ff00000 	.word	0x7ff00000
 800af58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af5a:	1c51      	adds	r1, r2, #1
 800af5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800af5e:	7852      	ldrb	r2, [r2, #1]
 800af60:	2a30      	cmp	r2, #48	; 0x30
 800af62:	d0f9      	beq.n	800af58 <_strtod_l+0x2a8>
 800af64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af68:	2908      	cmp	r1, #8
 800af6a:	f63f af79 	bhi.w	800ae60 <_strtod_l+0x1b0>
 800af6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af74:	9206      	str	r2, [sp, #24]
 800af76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af78:	1c51      	adds	r1, r2, #1
 800af7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800af7c:	7852      	ldrb	r2, [r2, #1]
 800af7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800af82:	2e09      	cmp	r6, #9
 800af84:	d937      	bls.n	800aff6 <_strtod_l+0x346>
 800af86:	9e06      	ldr	r6, [sp, #24]
 800af88:	1b89      	subs	r1, r1, r6
 800af8a:	2908      	cmp	r1, #8
 800af8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800af90:	dc02      	bgt.n	800af98 <_strtod_l+0x2e8>
 800af92:	4576      	cmp	r6, lr
 800af94:	bfa8      	it	ge
 800af96:	4676      	movge	r6, lr
 800af98:	f1bc 0f00 	cmp.w	ip, #0
 800af9c:	d000      	beq.n	800afa0 <_strtod_l+0x2f0>
 800af9e:	4276      	negs	r6, r6
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d14d      	bne.n	800b040 <_strtod_l+0x390>
 800afa4:	9904      	ldr	r1, [sp, #16]
 800afa6:	4301      	orrs	r1, r0
 800afa8:	f47f aec6 	bne.w	800ad38 <_strtod_l+0x88>
 800afac:	2b00      	cmp	r3, #0
 800afae:	f47f aee1 	bne.w	800ad74 <_strtod_l+0xc4>
 800afb2:	2a69      	cmp	r2, #105	; 0x69
 800afb4:	d027      	beq.n	800b006 <_strtod_l+0x356>
 800afb6:	dc24      	bgt.n	800b002 <_strtod_l+0x352>
 800afb8:	2a49      	cmp	r2, #73	; 0x49
 800afba:	d024      	beq.n	800b006 <_strtod_l+0x356>
 800afbc:	2a4e      	cmp	r2, #78	; 0x4e
 800afbe:	f47f aed9 	bne.w	800ad74 <_strtod_l+0xc4>
 800afc2:	499f      	ldr	r1, [pc, #636]	; (800b240 <_strtod_l+0x590>)
 800afc4:	a817      	add	r0, sp, #92	; 0x5c
 800afc6:	f003 f9a3 	bl	800e310 <__match>
 800afca:	2800      	cmp	r0, #0
 800afcc:	f43f aed2 	beq.w	800ad74 <_strtod_l+0xc4>
 800afd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b28      	cmp	r3, #40	; 0x28
 800afd6:	d12d      	bne.n	800b034 <_strtod_l+0x384>
 800afd8:	499a      	ldr	r1, [pc, #616]	; (800b244 <_strtod_l+0x594>)
 800afda:	aa1a      	add	r2, sp, #104	; 0x68
 800afdc:	a817      	add	r0, sp, #92	; 0x5c
 800afde:	f003 f9ab 	bl	800e338 <__hexnan>
 800afe2:	2805      	cmp	r0, #5
 800afe4:	d126      	bne.n	800b034 <_strtod_l+0x384>
 800afe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afe8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800afec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aff0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aff4:	e6a0      	b.n	800ad38 <_strtod_l+0x88>
 800aff6:	210a      	movs	r1, #10
 800aff8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800affc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b000:	e7b9      	b.n	800af76 <_strtod_l+0x2c6>
 800b002:	2a6e      	cmp	r2, #110	; 0x6e
 800b004:	e7db      	b.n	800afbe <_strtod_l+0x30e>
 800b006:	4990      	ldr	r1, [pc, #576]	; (800b248 <_strtod_l+0x598>)
 800b008:	a817      	add	r0, sp, #92	; 0x5c
 800b00a:	f003 f981 	bl	800e310 <__match>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f43f aeb0 	beq.w	800ad74 <_strtod_l+0xc4>
 800b014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b016:	498d      	ldr	r1, [pc, #564]	; (800b24c <_strtod_l+0x59c>)
 800b018:	3b01      	subs	r3, #1
 800b01a:	a817      	add	r0, sp, #92	; 0x5c
 800b01c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b01e:	f003 f977 	bl	800e310 <__match>
 800b022:	b910      	cbnz	r0, 800b02a <_strtod_l+0x37a>
 800b024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b026:	3301      	adds	r3, #1
 800b028:	9317      	str	r3, [sp, #92]	; 0x5c
 800b02a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b25c <_strtod_l+0x5ac>
 800b02e:	f04f 0a00 	mov.w	sl, #0
 800b032:	e681      	b.n	800ad38 <_strtod_l+0x88>
 800b034:	4886      	ldr	r0, [pc, #536]	; (800b250 <_strtod_l+0x5a0>)
 800b036:	f003 ff23 	bl	800ee80 <nan>
 800b03a:	ec5b ab10 	vmov	sl, fp, d0
 800b03e:	e67b      	b.n	800ad38 <_strtod_l+0x88>
 800b040:	9b05      	ldr	r3, [sp, #20]
 800b042:	9807      	ldr	r0, [sp, #28]
 800b044:	1af3      	subs	r3, r6, r3
 800b046:	2f00      	cmp	r7, #0
 800b048:	bf08      	it	eq
 800b04a:	462f      	moveq	r7, r5
 800b04c:	2d10      	cmp	r5, #16
 800b04e:	9306      	str	r3, [sp, #24]
 800b050:	46a8      	mov	r8, r5
 800b052:	bfa8      	it	ge
 800b054:	f04f 0810 	movge.w	r8, #16
 800b058:	f7f5 fa6c 	bl	8000534 <__aeabi_ui2d>
 800b05c:	2d09      	cmp	r5, #9
 800b05e:	4682      	mov	sl, r0
 800b060:	468b      	mov	fp, r1
 800b062:	dd13      	ble.n	800b08c <_strtod_l+0x3dc>
 800b064:	4b7b      	ldr	r3, [pc, #492]	; (800b254 <_strtod_l+0x5a4>)
 800b066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b06a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b06e:	f7f5 fadb 	bl	8000628 <__aeabi_dmul>
 800b072:	4682      	mov	sl, r0
 800b074:	4648      	mov	r0, r9
 800b076:	468b      	mov	fp, r1
 800b078:	f7f5 fa5c 	bl	8000534 <__aeabi_ui2d>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	4650      	mov	r0, sl
 800b082:	4659      	mov	r1, fp
 800b084:	f7f5 f91a 	bl	80002bc <__adddf3>
 800b088:	4682      	mov	sl, r0
 800b08a:	468b      	mov	fp, r1
 800b08c:	2d0f      	cmp	r5, #15
 800b08e:	dc38      	bgt.n	800b102 <_strtod_l+0x452>
 800b090:	9b06      	ldr	r3, [sp, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	f43f ae50 	beq.w	800ad38 <_strtod_l+0x88>
 800b098:	dd24      	ble.n	800b0e4 <_strtod_l+0x434>
 800b09a:	2b16      	cmp	r3, #22
 800b09c:	dc0b      	bgt.n	800b0b6 <_strtod_l+0x406>
 800b09e:	496d      	ldr	r1, [pc, #436]	; (800b254 <_strtod_l+0x5a4>)
 800b0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a8:	4652      	mov	r2, sl
 800b0aa:	465b      	mov	r3, fp
 800b0ac:	f7f5 fabc 	bl	8000628 <__aeabi_dmul>
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	468b      	mov	fp, r1
 800b0b4:	e640      	b.n	800ad38 <_strtod_l+0x88>
 800b0b6:	9a06      	ldr	r2, [sp, #24]
 800b0b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	db20      	blt.n	800b102 <_strtod_l+0x452>
 800b0c0:	4c64      	ldr	r4, [pc, #400]	; (800b254 <_strtod_l+0x5a4>)
 800b0c2:	f1c5 050f 	rsb	r5, r5, #15
 800b0c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	465b      	mov	r3, fp
 800b0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d2:	f7f5 faa9 	bl	8000628 <__aeabi_dmul>
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	1b5d      	subs	r5, r3, r5
 800b0da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b0de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0e2:	e7e3      	b.n	800b0ac <_strtod_l+0x3fc>
 800b0e4:	9b06      	ldr	r3, [sp, #24]
 800b0e6:	3316      	adds	r3, #22
 800b0e8:	db0b      	blt.n	800b102 <_strtod_l+0x452>
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	1b9e      	subs	r6, r3, r6
 800b0ee:	4b59      	ldr	r3, [pc, #356]	; (800b254 <_strtod_l+0x5a4>)
 800b0f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b0f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0f8:	4650      	mov	r0, sl
 800b0fa:	4659      	mov	r1, fp
 800b0fc:	f7f5 fbbe 	bl	800087c <__aeabi_ddiv>
 800b100:	e7d6      	b.n	800b0b0 <_strtod_l+0x400>
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	eba5 0808 	sub.w	r8, r5, r8
 800b108:	4498      	add	r8, r3
 800b10a:	f1b8 0f00 	cmp.w	r8, #0
 800b10e:	dd74      	ble.n	800b1fa <_strtod_l+0x54a>
 800b110:	f018 030f 	ands.w	r3, r8, #15
 800b114:	d00a      	beq.n	800b12c <_strtod_l+0x47c>
 800b116:	494f      	ldr	r1, [pc, #316]	; (800b254 <_strtod_l+0x5a4>)
 800b118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b11c:	4652      	mov	r2, sl
 800b11e:	465b      	mov	r3, fp
 800b120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b124:	f7f5 fa80 	bl	8000628 <__aeabi_dmul>
 800b128:	4682      	mov	sl, r0
 800b12a:	468b      	mov	fp, r1
 800b12c:	f038 080f 	bics.w	r8, r8, #15
 800b130:	d04f      	beq.n	800b1d2 <_strtod_l+0x522>
 800b132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b136:	dd22      	ble.n	800b17e <_strtod_l+0x4ce>
 800b138:	2500      	movs	r5, #0
 800b13a:	462e      	mov	r6, r5
 800b13c:	9507      	str	r5, [sp, #28]
 800b13e:	9505      	str	r5, [sp, #20]
 800b140:	2322      	movs	r3, #34	; 0x22
 800b142:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b25c <_strtod_l+0x5ac>
 800b146:	6023      	str	r3, [r4, #0]
 800b148:	f04f 0a00 	mov.w	sl, #0
 800b14c:	9b07      	ldr	r3, [sp, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f43f adf2 	beq.w	800ad38 <_strtod_l+0x88>
 800b154:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b156:	4620      	mov	r0, r4
 800b158:	f003 f9f7 	bl	800e54a <_Bfree>
 800b15c:	9905      	ldr	r1, [sp, #20]
 800b15e:	4620      	mov	r0, r4
 800b160:	f003 f9f3 	bl	800e54a <_Bfree>
 800b164:	4631      	mov	r1, r6
 800b166:	4620      	mov	r0, r4
 800b168:	f003 f9ef 	bl	800e54a <_Bfree>
 800b16c:	9907      	ldr	r1, [sp, #28]
 800b16e:	4620      	mov	r0, r4
 800b170:	f003 f9eb 	bl	800e54a <_Bfree>
 800b174:	4629      	mov	r1, r5
 800b176:	4620      	mov	r0, r4
 800b178:	f003 f9e7 	bl	800e54a <_Bfree>
 800b17c:	e5dc      	b.n	800ad38 <_strtod_l+0x88>
 800b17e:	4b36      	ldr	r3, [pc, #216]	; (800b258 <_strtod_l+0x5a8>)
 800b180:	9304      	str	r3, [sp, #16]
 800b182:	2300      	movs	r3, #0
 800b184:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b188:	4650      	mov	r0, sl
 800b18a:	4659      	mov	r1, fp
 800b18c:	4699      	mov	r9, r3
 800b18e:	f1b8 0f01 	cmp.w	r8, #1
 800b192:	dc21      	bgt.n	800b1d8 <_strtod_l+0x528>
 800b194:	b10b      	cbz	r3, 800b19a <_strtod_l+0x4ea>
 800b196:	4682      	mov	sl, r0
 800b198:	468b      	mov	fp, r1
 800b19a:	4b2f      	ldr	r3, [pc, #188]	; (800b258 <_strtod_l+0x5a8>)
 800b19c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	465b      	mov	r3, fp
 800b1a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b1ac:	f7f5 fa3c 	bl	8000628 <__aeabi_dmul>
 800b1b0:	4b2a      	ldr	r3, [pc, #168]	; (800b25c <_strtod_l+0x5ac>)
 800b1b2:	460a      	mov	r2, r1
 800b1b4:	400b      	ands	r3, r1
 800b1b6:	492a      	ldr	r1, [pc, #168]	; (800b260 <_strtod_l+0x5b0>)
 800b1b8:	428b      	cmp	r3, r1
 800b1ba:	4682      	mov	sl, r0
 800b1bc:	d8bc      	bhi.n	800b138 <_strtod_l+0x488>
 800b1be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b1c2:	428b      	cmp	r3, r1
 800b1c4:	bf86      	itte	hi
 800b1c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b264 <_strtod_l+0x5b4>
 800b1ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	e084      	b.n	800b2e2 <_strtod_l+0x632>
 800b1d8:	f018 0f01 	tst.w	r8, #1
 800b1dc:	d005      	beq.n	800b1ea <_strtod_l+0x53a>
 800b1de:	9b04      	ldr	r3, [sp, #16]
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 fa20 	bl	8000628 <__aeabi_dmul>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	9a04      	ldr	r2, [sp, #16]
 800b1ec:	3208      	adds	r2, #8
 800b1ee:	f109 0901 	add.w	r9, r9, #1
 800b1f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b1f6:	9204      	str	r2, [sp, #16]
 800b1f8:	e7c9      	b.n	800b18e <_strtod_l+0x4de>
 800b1fa:	d0ea      	beq.n	800b1d2 <_strtod_l+0x522>
 800b1fc:	f1c8 0800 	rsb	r8, r8, #0
 800b200:	f018 020f 	ands.w	r2, r8, #15
 800b204:	d00a      	beq.n	800b21c <_strtod_l+0x56c>
 800b206:	4b13      	ldr	r3, [pc, #76]	; (800b254 <_strtod_l+0x5a4>)
 800b208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b20c:	4650      	mov	r0, sl
 800b20e:	4659      	mov	r1, fp
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	f7f5 fb32 	bl	800087c <__aeabi_ddiv>
 800b218:	4682      	mov	sl, r0
 800b21a:	468b      	mov	fp, r1
 800b21c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b220:	d0d7      	beq.n	800b1d2 <_strtod_l+0x522>
 800b222:	f1b8 0f1f 	cmp.w	r8, #31
 800b226:	dd1f      	ble.n	800b268 <_strtod_l+0x5b8>
 800b228:	2500      	movs	r5, #0
 800b22a:	462e      	mov	r6, r5
 800b22c:	9507      	str	r5, [sp, #28]
 800b22e:	9505      	str	r5, [sp, #20]
 800b230:	2322      	movs	r3, #34	; 0x22
 800b232:	f04f 0a00 	mov.w	sl, #0
 800b236:	f04f 0b00 	mov.w	fp, #0
 800b23a:	6023      	str	r3, [r4, #0]
 800b23c:	e786      	b.n	800b14c <_strtod_l+0x49c>
 800b23e:	bf00      	nop
 800b240:	08010855 	.word	0x08010855
 800b244:	08010808 	.word	0x08010808
 800b248:	0801084d 	.word	0x0801084d
 800b24c:	080108a3 	.word	0x080108a3
 800b250:	08010b27 	.word	0x08010b27
 800b254:	08010a18 	.word	0x08010a18
 800b258:	080109f0 	.word	0x080109f0
 800b25c:	7ff00000 	.word	0x7ff00000
 800b260:	7ca00000 	.word	0x7ca00000
 800b264:	7fefffff 	.word	0x7fefffff
 800b268:	f018 0310 	ands.w	r3, r8, #16
 800b26c:	bf18      	it	ne
 800b26e:	236a      	movne	r3, #106	; 0x6a
 800b270:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b620 <_strtod_l+0x970>
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	4650      	mov	r0, sl
 800b278:	4659      	mov	r1, fp
 800b27a:	2300      	movs	r3, #0
 800b27c:	f018 0f01 	tst.w	r8, #1
 800b280:	d004      	beq.n	800b28c <_strtod_l+0x5dc>
 800b282:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b286:	f7f5 f9cf 	bl	8000628 <__aeabi_dmul>
 800b28a:	2301      	movs	r3, #1
 800b28c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b290:	f109 0908 	add.w	r9, r9, #8
 800b294:	d1f2      	bne.n	800b27c <_strtod_l+0x5cc>
 800b296:	b10b      	cbz	r3, 800b29c <_strtod_l+0x5ec>
 800b298:	4682      	mov	sl, r0
 800b29a:	468b      	mov	fp, r1
 800b29c:	9b04      	ldr	r3, [sp, #16]
 800b29e:	b1c3      	cbz	r3, 800b2d2 <_strtod_l+0x622>
 800b2a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	4659      	mov	r1, fp
 800b2ac:	dd11      	ble.n	800b2d2 <_strtod_l+0x622>
 800b2ae:	2b1f      	cmp	r3, #31
 800b2b0:	f340 8124 	ble.w	800b4fc <_strtod_l+0x84c>
 800b2b4:	2b34      	cmp	r3, #52	; 0x34
 800b2b6:	bfde      	ittt	le
 800b2b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b2bc:	f04f 33ff 	movle.w	r3, #4294967295
 800b2c0:	fa03 f202 	lslle.w	r2, r3, r2
 800b2c4:	f04f 0a00 	mov.w	sl, #0
 800b2c8:	bfcc      	ite	gt
 800b2ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b2ce:	ea02 0b01 	andle.w	fp, r2, r1
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4650      	mov	r0, sl
 800b2d8:	4659      	mov	r1, fp
 800b2da:	f7f5 fc0d 	bl	8000af8 <__aeabi_dcmpeq>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d1a2      	bne.n	800b228 <_strtod_l+0x578>
 800b2e2:	9b07      	ldr	r3, [sp, #28]
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	9908      	ldr	r1, [sp, #32]
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	463a      	mov	r2, r7
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f003 f97b 	bl	800e5e8 <__s2b>
 800b2f2:	9007      	str	r0, [sp, #28]
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f43f af1f 	beq.w	800b138 <_strtod_l+0x488>
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	1b9e      	subs	r6, r3, r6
 800b2fe:	9b06      	ldr	r3, [sp, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	bfb4      	ite	lt
 800b304:	4633      	movlt	r3, r6
 800b306:	2300      	movge	r3, #0
 800b308:	930c      	str	r3, [sp, #48]	; 0x30
 800b30a:	9b06      	ldr	r3, [sp, #24]
 800b30c:	2500      	movs	r5, #0
 800b30e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b312:	9312      	str	r3, [sp, #72]	; 0x48
 800b314:	462e      	mov	r6, r5
 800b316:	9b07      	ldr	r3, [sp, #28]
 800b318:	4620      	mov	r0, r4
 800b31a:	6859      	ldr	r1, [r3, #4]
 800b31c:	f003 f8f0 	bl	800e500 <_Balloc>
 800b320:	9005      	str	r0, [sp, #20]
 800b322:	2800      	cmp	r0, #0
 800b324:	f43f af0c 	beq.w	800b140 <_strtod_l+0x490>
 800b328:	9b07      	ldr	r3, [sp, #28]
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	3202      	adds	r2, #2
 800b32e:	f103 010c 	add.w	r1, r3, #12
 800b332:	0092      	lsls	r2, r2, #2
 800b334:	300c      	adds	r0, #12
 800b336:	f7ff f985 	bl	800a644 <memcpy>
 800b33a:	ec4b ab10 	vmov	d0, sl, fp
 800b33e:	aa1a      	add	r2, sp, #104	; 0x68
 800b340:	a919      	add	r1, sp, #100	; 0x64
 800b342:	4620      	mov	r0, r4
 800b344:	f003 fc7c 	bl	800ec40 <__d2b>
 800b348:	ec4b ab18 	vmov	d8, sl, fp
 800b34c:	9018      	str	r0, [sp, #96]	; 0x60
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f aef6 	beq.w	800b140 <_strtod_l+0x490>
 800b354:	2101      	movs	r1, #1
 800b356:	4620      	mov	r0, r4
 800b358:	f003 f9e0 	bl	800e71c <__i2b>
 800b35c:	4606      	mov	r6, r0
 800b35e:	2800      	cmp	r0, #0
 800b360:	f43f aeee 	beq.w	800b140 <_strtod_l+0x490>
 800b364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b366:	9904      	ldr	r1, [sp, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bfab      	itete	ge
 800b36c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b36e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b370:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b372:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b376:	bfac      	ite	ge
 800b378:	eb03 0902 	addge.w	r9, r3, r2
 800b37c:	1ad7      	sublt	r7, r2, r3
 800b37e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b380:	eba3 0801 	sub.w	r8, r3, r1
 800b384:	4490      	add	r8, r2
 800b386:	4ba1      	ldr	r3, [pc, #644]	; (800b60c <_strtod_l+0x95c>)
 800b388:	f108 38ff 	add.w	r8, r8, #4294967295
 800b38c:	4598      	cmp	r8, r3
 800b38e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b392:	f280 80c7 	bge.w	800b524 <_strtod_l+0x874>
 800b396:	eba3 0308 	sub.w	r3, r3, r8
 800b39a:	2b1f      	cmp	r3, #31
 800b39c:	eba2 0203 	sub.w	r2, r2, r3
 800b3a0:	f04f 0101 	mov.w	r1, #1
 800b3a4:	f300 80b1 	bgt.w	800b50a <_strtod_l+0x85a>
 800b3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9308      	str	r3, [sp, #32]
 800b3b2:	eb09 0802 	add.w	r8, r9, r2
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	45c1      	cmp	r9, r8
 800b3ba:	4417      	add	r7, r2
 800b3bc:	441f      	add	r7, r3
 800b3be:	464b      	mov	r3, r9
 800b3c0:	bfa8      	it	ge
 800b3c2:	4643      	movge	r3, r8
 800b3c4:	42bb      	cmp	r3, r7
 800b3c6:	bfa8      	it	ge
 800b3c8:	463b      	movge	r3, r7
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bfc2      	ittt	gt
 800b3ce:	eba8 0803 	subgt.w	r8, r8, r3
 800b3d2:	1aff      	subgt	r7, r7, r3
 800b3d4:	eba9 0903 	subgt.w	r9, r9, r3
 800b3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	dd17      	ble.n	800b40e <_strtod_l+0x75e>
 800b3de:	4631      	mov	r1, r6
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f003 fa5a 	bl	800e89c <__pow5mult>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f43f aea8 	beq.w	800b140 <_strtod_l+0x490>
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f003 f9a7 	bl	800e748 <__multiply>
 800b3fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f43f ae9f 	beq.w	800b140 <_strtod_l+0x490>
 800b402:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b404:	4620      	mov	r0, r4
 800b406:	f003 f8a0 	bl	800e54a <_Bfree>
 800b40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b40c:	9318      	str	r3, [sp, #96]	; 0x60
 800b40e:	f1b8 0f00 	cmp.w	r8, #0
 800b412:	f300 808c 	bgt.w	800b52e <_strtod_l+0x87e>
 800b416:	9b06      	ldr	r3, [sp, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dd08      	ble.n	800b42e <_strtod_l+0x77e>
 800b41c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b41e:	9905      	ldr	r1, [sp, #20]
 800b420:	4620      	mov	r0, r4
 800b422:	f003 fa3b 	bl	800e89c <__pow5mult>
 800b426:	9005      	str	r0, [sp, #20]
 800b428:	2800      	cmp	r0, #0
 800b42a:	f43f ae89 	beq.w	800b140 <_strtod_l+0x490>
 800b42e:	2f00      	cmp	r7, #0
 800b430:	dd08      	ble.n	800b444 <_strtod_l+0x794>
 800b432:	9905      	ldr	r1, [sp, #20]
 800b434:	463a      	mov	r2, r7
 800b436:	4620      	mov	r0, r4
 800b438:	f003 fa70 	bl	800e91c <__lshift>
 800b43c:	9005      	str	r0, [sp, #20]
 800b43e:	2800      	cmp	r0, #0
 800b440:	f43f ae7e 	beq.w	800b140 <_strtod_l+0x490>
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	dd08      	ble.n	800b45c <_strtod_l+0x7ac>
 800b44a:	4631      	mov	r1, r6
 800b44c:	464a      	mov	r2, r9
 800b44e:	4620      	mov	r0, r4
 800b450:	f003 fa64 	bl	800e91c <__lshift>
 800b454:	4606      	mov	r6, r0
 800b456:	2800      	cmp	r0, #0
 800b458:	f43f ae72 	beq.w	800b140 <_strtod_l+0x490>
 800b45c:	9a05      	ldr	r2, [sp, #20]
 800b45e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b460:	4620      	mov	r0, r4
 800b462:	f003 fae7 	bl	800ea34 <__mdiff>
 800b466:	4605      	mov	r5, r0
 800b468:	2800      	cmp	r0, #0
 800b46a:	f43f ae69 	beq.w	800b140 <_strtod_l+0x490>
 800b46e:	68c3      	ldr	r3, [r0, #12]
 800b470:	930b      	str	r3, [sp, #44]	; 0x2c
 800b472:	2300      	movs	r3, #0
 800b474:	60c3      	str	r3, [r0, #12]
 800b476:	4631      	mov	r1, r6
 800b478:	f003 fac0 	bl	800e9fc <__mcmp>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	da60      	bge.n	800b542 <_strtod_l+0x892>
 800b480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b482:	ea53 030a 	orrs.w	r3, r3, sl
 800b486:	f040 8082 	bne.w	800b58e <_strtod_l+0x8de>
 800b48a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d17d      	bne.n	800b58e <_strtod_l+0x8de>
 800b492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b496:	0d1b      	lsrs	r3, r3, #20
 800b498:	051b      	lsls	r3, r3, #20
 800b49a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b49e:	d976      	bls.n	800b58e <_strtod_l+0x8de>
 800b4a0:	696b      	ldr	r3, [r5, #20]
 800b4a2:	b913      	cbnz	r3, 800b4aa <_strtod_l+0x7fa>
 800b4a4:	692b      	ldr	r3, [r5, #16]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	dd71      	ble.n	800b58e <_strtod_l+0x8de>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f003 fa34 	bl	800e91c <__lshift>
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	f003 faa0 	bl	800e9fc <__mcmp>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	dd66      	ble.n	800b58e <_strtod_l+0x8de>
 800b4c0:	9904      	ldr	r1, [sp, #16]
 800b4c2:	4a53      	ldr	r2, [pc, #332]	; (800b610 <_strtod_l+0x960>)
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	f000 8081 	beq.w	800b5ce <_strtod_l+0x91e>
 800b4cc:	ea02 010b 	and.w	r1, r2, fp
 800b4d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b4d4:	dc7b      	bgt.n	800b5ce <_strtod_l+0x91e>
 800b4d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b4da:	f77f aea9 	ble.w	800b230 <_strtod_l+0x580>
 800b4de:	4b4d      	ldr	r3, [pc, #308]	; (800b614 <_strtod_l+0x964>)
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f7f5 f89f 	bl	8000628 <__aeabi_dmul>
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4303      	orrs	r3, r0
 800b4ee:	bf08      	it	eq
 800b4f0:	2322      	moveq	r3, #34	; 0x22
 800b4f2:	4682      	mov	sl, r0
 800b4f4:	468b      	mov	fp, r1
 800b4f6:	bf08      	it	eq
 800b4f8:	6023      	streq	r3, [r4, #0]
 800b4fa:	e62b      	b.n	800b154 <_strtod_l+0x4a4>
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	fa02 f303 	lsl.w	r3, r2, r3
 800b504:	ea03 0a0a 	and.w	sl, r3, sl
 800b508:	e6e3      	b.n	800b2d2 <_strtod_l+0x622>
 800b50a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b50e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b51a:	fa01 f308 	lsl.w	r3, r1, r8
 800b51e:	9308      	str	r3, [sp, #32]
 800b520:	910d      	str	r1, [sp, #52]	; 0x34
 800b522:	e746      	b.n	800b3b2 <_strtod_l+0x702>
 800b524:	2300      	movs	r3, #0
 800b526:	9308      	str	r3, [sp, #32]
 800b528:	2301      	movs	r3, #1
 800b52a:	930d      	str	r3, [sp, #52]	; 0x34
 800b52c:	e741      	b.n	800b3b2 <_strtod_l+0x702>
 800b52e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b530:	4642      	mov	r2, r8
 800b532:	4620      	mov	r0, r4
 800b534:	f003 f9f2 	bl	800e91c <__lshift>
 800b538:	9018      	str	r0, [sp, #96]	; 0x60
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f47f af6b 	bne.w	800b416 <_strtod_l+0x766>
 800b540:	e5fe      	b.n	800b140 <_strtod_l+0x490>
 800b542:	465f      	mov	r7, fp
 800b544:	d16e      	bne.n	800b624 <_strtod_l+0x974>
 800b546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b54c:	b342      	cbz	r2, 800b5a0 <_strtod_l+0x8f0>
 800b54e:	4a32      	ldr	r2, [pc, #200]	; (800b618 <_strtod_l+0x968>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d128      	bne.n	800b5a6 <_strtod_l+0x8f6>
 800b554:	9b04      	ldr	r3, [sp, #16]
 800b556:	4651      	mov	r1, sl
 800b558:	b1eb      	cbz	r3, 800b596 <_strtod_l+0x8e6>
 800b55a:	4b2d      	ldr	r3, [pc, #180]	; (800b610 <_strtod_l+0x960>)
 800b55c:	403b      	ands	r3, r7
 800b55e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b562:	f04f 32ff 	mov.w	r2, #4294967295
 800b566:	d819      	bhi.n	800b59c <_strtod_l+0x8ec>
 800b568:	0d1b      	lsrs	r3, r3, #20
 800b56a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b56e:	fa02 f303 	lsl.w	r3, r2, r3
 800b572:	4299      	cmp	r1, r3
 800b574:	d117      	bne.n	800b5a6 <_strtod_l+0x8f6>
 800b576:	4b29      	ldr	r3, [pc, #164]	; (800b61c <_strtod_l+0x96c>)
 800b578:	429f      	cmp	r7, r3
 800b57a:	d102      	bne.n	800b582 <_strtod_l+0x8d2>
 800b57c:	3101      	adds	r1, #1
 800b57e:	f43f addf 	beq.w	800b140 <_strtod_l+0x490>
 800b582:	4b23      	ldr	r3, [pc, #140]	; (800b610 <_strtod_l+0x960>)
 800b584:	403b      	ands	r3, r7
 800b586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b58a:	f04f 0a00 	mov.w	sl, #0
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1a4      	bne.n	800b4de <_strtod_l+0x82e>
 800b594:	e5de      	b.n	800b154 <_strtod_l+0x4a4>
 800b596:	f04f 33ff 	mov.w	r3, #4294967295
 800b59a:	e7ea      	b.n	800b572 <_strtod_l+0x8c2>
 800b59c:	4613      	mov	r3, r2
 800b59e:	e7e8      	b.n	800b572 <_strtod_l+0x8c2>
 800b5a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b5a4:	d08c      	beq.n	800b4c0 <_strtod_l+0x810>
 800b5a6:	9b08      	ldr	r3, [sp, #32]
 800b5a8:	b1db      	cbz	r3, 800b5e2 <_strtod_l+0x932>
 800b5aa:	423b      	tst	r3, r7
 800b5ac:	d0ef      	beq.n	800b58e <_strtod_l+0x8de>
 800b5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b0:	9a04      	ldr	r2, [sp, #16]
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	b1c3      	cbz	r3, 800b5ea <_strtod_l+0x93a>
 800b5b8:	f7ff fb5c 	bl	800ac74 <sulp>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	ec51 0b18 	vmov	r0, r1, d8
 800b5c4:	f7f4 fe7a 	bl	80002bc <__adddf3>
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	468b      	mov	fp, r1
 800b5cc:	e7df      	b.n	800b58e <_strtod_l+0x8de>
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5dc:	f04f 3aff 	mov.w	sl, #4294967295
 800b5e0:	e7d5      	b.n	800b58e <_strtod_l+0x8de>
 800b5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e4:	ea13 0f0a 	tst.w	r3, sl
 800b5e8:	e7e0      	b.n	800b5ac <_strtod_l+0x8fc>
 800b5ea:	f7ff fb43 	bl	800ac74 <sulp>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	ec51 0b18 	vmov	r0, r1, d8
 800b5f6:	f7f4 fe5f 	bl	80002b8 <__aeabi_dsub>
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	4682      	mov	sl, r0
 800b600:	468b      	mov	fp, r1
 800b602:	f7f5 fa79 	bl	8000af8 <__aeabi_dcmpeq>
 800b606:	2800      	cmp	r0, #0
 800b608:	d0c1      	beq.n	800b58e <_strtod_l+0x8de>
 800b60a:	e611      	b.n	800b230 <_strtod_l+0x580>
 800b60c:	fffffc02 	.word	0xfffffc02
 800b610:	7ff00000 	.word	0x7ff00000
 800b614:	39500000 	.word	0x39500000
 800b618:	000fffff 	.word	0x000fffff
 800b61c:	7fefffff 	.word	0x7fefffff
 800b620:	08010820 	.word	0x08010820
 800b624:	4631      	mov	r1, r6
 800b626:	4628      	mov	r0, r5
 800b628:	f003 fb66 	bl	800ecf8 <__ratio>
 800b62c:	ec59 8b10 	vmov	r8, r9, d0
 800b630:	ee10 0a10 	vmov	r0, s0
 800b634:	2200      	movs	r2, #0
 800b636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b63a:	4649      	mov	r1, r9
 800b63c:	f7f5 fa70 	bl	8000b20 <__aeabi_dcmple>
 800b640:	2800      	cmp	r0, #0
 800b642:	d07a      	beq.n	800b73a <_strtod_l+0xa8a>
 800b644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b646:	2b00      	cmp	r3, #0
 800b648:	d04a      	beq.n	800b6e0 <_strtod_l+0xa30>
 800b64a:	4b95      	ldr	r3, [pc, #596]	; (800b8a0 <_strtod_l+0xbf0>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b8a0 <_strtod_l+0xbf0>
 800b656:	f04f 0800 	mov.w	r8, #0
 800b65a:	4b92      	ldr	r3, [pc, #584]	; (800b8a4 <_strtod_l+0xbf4>)
 800b65c:	403b      	ands	r3, r7
 800b65e:	930d      	str	r3, [sp, #52]	; 0x34
 800b660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b662:	4b91      	ldr	r3, [pc, #580]	; (800b8a8 <_strtod_l+0xbf8>)
 800b664:	429a      	cmp	r2, r3
 800b666:	f040 80b0 	bne.w	800b7ca <_strtod_l+0xb1a>
 800b66a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b66e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b672:	ec4b ab10 	vmov	d0, sl, fp
 800b676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b67a:	f003 fa65 	bl	800eb48 <__ulp>
 800b67e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b682:	ec53 2b10 	vmov	r2, r3, d0
 800b686:	f7f4 ffcf 	bl	8000628 <__aeabi_dmul>
 800b68a:	4652      	mov	r2, sl
 800b68c:	465b      	mov	r3, fp
 800b68e:	f7f4 fe15 	bl	80002bc <__adddf3>
 800b692:	460b      	mov	r3, r1
 800b694:	4983      	ldr	r1, [pc, #524]	; (800b8a4 <_strtod_l+0xbf4>)
 800b696:	4a85      	ldr	r2, [pc, #532]	; (800b8ac <_strtod_l+0xbfc>)
 800b698:	4019      	ands	r1, r3
 800b69a:	4291      	cmp	r1, r2
 800b69c:	4682      	mov	sl, r0
 800b69e:	d960      	bls.n	800b762 <_strtod_l+0xab2>
 800b6a0:	ee18 3a90 	vmov	r3, s17
 800b6a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d104      	bne.n	800b6b6 <_strtod_l+0xa06>
 800b6ac:	ee18 3a10 	vmov	r3, s16
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	f43f ad45 	beq.w	800b140 <_strtod_l+0x490>
 800b6b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b8b8 <_strtod_l+0xc08>
 800b6ba:	f04f 3aff 	mov.w	sl, #4294967295
 800b6be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f002 ff42 	bl	800e54a <_Bfree>
 800b6c6:	9905      	ldr	r1, [sp, #20]
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f002 ff3e 	bl	800e54a <_Bfree>
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f002 ff3a 	bl	800e54a <_Bfree>
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f002 ff36 	bl	800e54a <_Bfree>
 800b6de:	e61a      	b.n	800b316 <_strtod_l+0x666>
 800b6e0:	f1ba 0f00 	cmp.w	sl, #0
 800b6e4:	d11b      	bne.n	800b71e <_strtod_l+0xa6e>
 800b6e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ea:	b9f3      	cbnz	r3, 800b72a <_strtod_l+0xa7a>
 800b6ec:	4b6c      	ldr	r3, [pc, #432]	; (800b8a0 <_strtod_l+0xbf0>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f5 fa0a 	bl	8000b0c <__aeabi_dcmplt>
 800b6f8:	b9d0      	cbnz	r0, 800b730 <_strtod_l+0xa80>
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	4b6c      	ldr	r3, [pc, #432]	; (800b8b0 <_strtod_l+0xc00>)
 800b700:	2200      	movs	r2, #0
 800b702:	f7f4 ff91 	bl	8000628 <__aeabi_dmul>
 800b706:	4680      	mov	r8, r0
 800b708:	4689      	mov	r9, r1
 800b70a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b70e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b712:	9315      	str	r3, [sp, #84]	; 0x54
 800b714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b71c:	e79d      	b.n	800b65a <_strtod_l+0x9aa>
 800b71e:	f1ba 0f01 	cmp.w	sl, #1
 800b722:	d102      	bne.n	800b72a <_strtod_l+0xa7a>
 800b724:	2f00      	cmp	r7, #0
 800b726:	f43f ad83 	beq.w	800b230 <_strtod_l+0x580>
 800b72a:	4b62      	ldr	r3, [pc, #392]	; (800b8b4 <_strtod_l+0xc04>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	e78e      	b.n	800b64e <_strtod_l+0x99e>
 800b730:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b8b0 <_strtod_l+0xc00>
 800b734:	f04f 0800 	mov.w	r8, #0
 800b738:	e7e7      	b.n	800b70a <_strtod_l+0xa5a>
 800b73a:	4b5d      	ldr	r3, [pc, #372]	; (800b8b0 <_strtod_l+0xc00>)
 800b73c:	4640      	mov	r0, r8
 800b73e:	4649      	mov	r1, r9
 800b740:	2200      	movs	r2, #0
 800b742:	f7f4 ff71 	bl	8000628 <__aeabi_dmul>
 800b746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b748:	4680      	mov	r8, r0
 800b74a:	4689      	mov	r9, r1
 800b74c:	b933      	cbnz	r3, 800b75c <_strtod_l+0xaac>
 800b74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b752:	900e      	str	r0, [sp, #56]	; 0x38
 800b754:	930f      	str	r3, [sp, #60]	; 0x3c
 800b756:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b75a:	e7dd      	b.n	800b718 <_strtod_l+0xa68>
 800b75c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b760:	e7f9      	b.n	800b756 <_strtod_l+0xaa6>
 800b762:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1a8      	bne.n	800b6be <_strtod_l+0xa0e>
 800b76c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b772:	0d1b      	lsrs	r3, r3, #20
 800b774:	051b      	lsls	r3, r3, #20
 800b776:	429a      	cmp	r2, r3
 800b778:	d1a1      	bne.n	800b6be <_strtod_l+0xa0e>
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f5 fab3 	bl	8000ce8 <__aeabi_d2lz>
 800b782:	f7f4 ff23 	bl	80005cc <__aeabi_l2d>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4640      	mov	r0, r8
 800b78c:	4649      	mov	r1, r9
 800b78e:	f7f4 fd93 	bl	80002b8 <__aeabi_dsub>
 800b792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b798:	ea43 030a 	orr.w	r3, r3, sl
 800b79c:	4313      	orrs	r3, r2
 800b79e:	4680      	mov	r8, r0
 800b7a0:	4689      	mov	r9, r1
 800b7a2:	d055      	beq.n	800b850 <_strtod_l+0xba0>
 800b7a4:	a336      	add	r3, pc, #216	; (adr r3, 800b880 <_strtod_l+0xbd0>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f5 f9af 	bl	8000b0c <__aeabi_dcmplt>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f47f acd0 	bne.w	800b154 <_strtod_l+0x4a4>
 800b7b4:	a334      	add	r3, pc, #208	; (adr r3, 800b888 <_strtod_l+0xbd8>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	4649      	mov	r1, r9
 800b7be:	f7f5 f9c3 	bl	8000b48 <__aeabi_dcmpgt>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	f43f af7b 	beq.w	800b6be <_strtod_l+0xa0e>
 800b7c8:	e4c4      	b.n	800b154 <_strtod_l+0x4a4>
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	b333      	cbz	r3, 800b81c <_strtod_l+0xb6c>
 800b7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7d4:	d822      	bhi.n	800b81c <_strtod_l+0xb6c>
 800b7d6:	a32e      	add	r3, pc, #184	; (adr r3, 800b890 <_strtod_l+0xbe0>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4649      	mov	r1, r9
 800b7e0:	f7f5 f99e 	bl	8000b20 <__aeabi_dcmple>
 800b7e4:	b1a0      	cbz	r0, 800b810 <_strtod_l+0xb60>
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f7f5 f9f5 	bl	8000bd8 <__aeabi_d2uiz>
 800b7ee:	2801      	cmp	r0, #1
 800b7f0:	bf38      	it	cc
 800b7f2:	2001      	movcc	r0, #1
 800b7f4:	f7f4 fe9e 	bl	8000534 <__aeabi_ui2d>
 800b7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	4689      	mov	r9, r1
 800b7fe:	bb23      	cbnz	r3, 800b84a <_strtod_l+0xb9a>
 800b800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b804:	9010      	str	r0, [sp, #64]	; 0x40
 800b806:	9311      	str	r3, [sp, #68]	; 0x44
 800b808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b80c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b814:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b818:	1a9b      	subs	r3, r3, r2
 800b81a:	9309      	str	r3, [sp, #36]	; 0x24
 800b81c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b820:	eeb0 0a48 	vmov.f32	s0, s16
 800b824:	eef0 0a68 	vmov.f32	s1, s17
 800b828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b82c:	f003 f98c 	bl	800eb48 <__ulp>
 800b830:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b834:	ec53 2b10 	vmov	r2, r3, d0
 800b838:	f7f4 fef6 	bl	8000628 <__aeabi_dmul>
 800b83c:	ec53 2b18 	vmov	r2, r3, d8
 800b840:	f7f4 fd3c 	bl	80002bc <__adddf3>
 800b844:	4682      	mov	sl, r0
 800b846:	468b      	mov	fp, r1
 800b848:	e78d      	b.n	800b766 <_strtod_l+0xab6>
 800b84a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b84e:	e7db      	b.n	800b808 <_strtod_l+0xb58>
 800b850:	a311      	add	r3, pc, #68	; (adr r3, 800b898 <_strtod_l+0xbe8>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f5 f959 	bl	8000b0c <__aeabi_dcmplt>
 800b85a:	e7b2      	b.n	800b7c2 <_strtod_l+0xb12>
 800b85c:	2300      	movs	r3, #0
 800b85e:	930a      	str	r3, [sp, #40]	; 0x28
 800b860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	f7ff ba6b 	b.w	800ad40 <_strtod_l+0x90>
 800b86a:	2a65      	cmp	r2, #101	; 0x65
 800b86c:	f43f ab5f 	beq.w	800af2e <_strtod_l+0x27e>
 800b870:	2a45      	cmp	r2, #69	; 0x45
 800b872:	f43f ab5c 	beq.w	800af2e <_strtod_l+0x27e>
 800b876:	2301      	movs	r3, #1
 800b878:	f7ff bb94 	b.w	800afa4 <_strtod_l+0x2f4>
 800b87c:	f3af 8000 	nop.w
 800b880:	94a03595 	.word	0x94a03595
 800b884:	3fdfffff 	.word	0x3fdfffff
 800b888:	35afe535 	.word	0x35afe535
 800b88c:	3fe00000 	.word	0x3fe00000
 800b890:	ffc00000 	.word	0xffc00000
 800b894:	41dfffff 	.word	0x41dfffff
 800b898:	94a03595 	.word	0x94a03595
 800b89c:	3fcfffff 	.word	0x3fcfffff
 800b8a0:	3ff00000 	.word	0x3ff00000
 800b8a4:	7ff00000 	.word	0x7ff00000
 800b8a8:	7fe00000 	.word	0x7fe00000
 800b8ac:	7c9fffff 	.word	0x7c9fffff
 800b8b0:	3fe00000 	.word	0x3fe00000
 800b8b4:	bff00000 	.word	0xbff00000
 800b8b8:	7fefffff 	.word	0x7fefffff

0800b8bc <strtod>:
 800b8bc:	460a      	mov	r2, r1
 800b8be:	4601      	mov	r1, r0
 800b8c0:	4802      	ldr	r0, [pc, #8]	; (800b8cc <strtod+0x10>)
 800b8c2:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <strtod+0x14>)
 800b8c4:	6800      	ldr	r0, [r0, #0]
 800b8c6:	f7ff b9f3 	b.w	800acb0 <_strtod_l>
 800b8ca:	bf00      	nop
 800b8cc:	2000001c 	.word	0x2000001c
 800b8d0:	20000860 	.word	0x20000860
 800b8d4:	00000000 	.word	0x00000000

0800b8d8 <_svfprintf_r>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	ed2d 8b04 	vpush	{d8-d9}
 800b8e0:	b0cf      	sub	sp, #316	; 0x13c
 800b8e2:	4688      	mov	r8, r1
 800b8e4:	4691      	mov	r9, r2
 800b8e6:	461e      	mov	r6, r3
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	f002 fdc7 	bl	800e47c <_localeconv_r>
 800b8ee:	6803      	ldr	r3, [r0, #0]
 800b8f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f4 fc7e 	bl	80001f4 <strlen>
 800b8f8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b8fc:	900d      	str	r0, [sp, #52]	; 0x34
 800b8fe:	0618      	lsls	r0, r3, #24
 800b900:	d51a      	bpl.n	800b938 <_svfprintf_r+0x60>
 800b902:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b906:	b9bb      	cbnz	r3, 800b938 <_svfprintf_r+0x60>
 800b908:	2140      	movs	r1, #64	; 0x40
 800b90a:	4650      	mov	r0, sl
 800b90c:	f7fe fc5e 	bl	800a1cc <_malloc_r>
 800b910:	f8c8 0000 	str.w	r0, [r8]
 800b914:	f8c8 0010 	str.w	r0, [r8, #16]
 800b918:	b958      	cbnz	r0, 800b932 <_svfprintf_r+0x5a>
 800b91a:	230c      	movs	r3, #12
 800b91c:	f8ca 3000 	str.w	r3, [sl]
 800b920:	f04f 33ff 	mov.w	r3, #4294967295
 800b924:	930c      	str	r3, [sp, #48]	; 0x30
 800b926:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b928:	b04f      	add	sp, #316	; 0x13c
 800b92a:	ecbd 8b04 	vpop	{d8-d9}
 800b92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b932:	2340      	movs	r3, #64	; 0x40
 800b934:	f8c8 3014 	str.w	r3, [r8, #20]
 800b938:	ed9f 7b93 	vldr	d7, [pc, #588]	; 800bb88 <_svfprintf_r+0x2b0>
 800b93c:	2500      	movs	r5, #0
 800b93e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800b942:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b946:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800b94a:	ac25      	add	r4, sp, #148	; 0x94
 800b94c:	9422      	str	r4, [sp, #136]	; 0x88
 800b94e:	9505      	str	r5, [sp, #20]
 800b950:	950a      	str	r5, [sp, #40]	; 0x28
 800b952:	9512      	str	r5, [sp, #72]	; 0x48
 800b954:	9514      	str	r5, [sp, #80]	; 0x50
 800b956:	950c      	str	r5, [sp, #48]	; 0x30
 800b958:	464b      	mov	r3, r9
 800b95a:	461d      	mov	r5, r3
 800b95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b960:	b10a      	cbz	r2, 800b966 <_svfprintf_r+0x8e>
 800b962:	2a25      	cmp	r2, #37	; 0x25
 800b964:	d1f9      	bne.n	800b95a <_svfprintf_r+0x82>
 800b966:	ebb5 0709 	subs.w	r7, r5, r9
 800b96a:	d00d      	beq.n	800b988 <_svfprintf_r+0xb0>
 800b96c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b96e:	443b      	add	r3, r7
 800b970:	9324      	str	r3, [sp, #144]	; 0x90
 800b972:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b974:	3301      	adds	r3, #1
 800b976:	2b07      	cmp	r3, #7
 800b978:	e9c4 9700 	strd	r9, r7, [r4]
 800b97c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b97e:	dc79      	bgt.n	800ba74 <_svfprintf_r+0x19c>
 800b980:	3408      	adds	r4, #8
 800b982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b984:	443b      	add	r3, r7
 800b986:	930c      	str	r3, [sp, #48]	; 0x30
 800b988:	782b      	ldrb	r3, [r5, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f001 8148 	beq.w	800cc20 <_svfprintf_r+0x1348>
 800b990:	2300      	movs	r3, #0
 800b992:	f04f 32ff 	mov.w	r2, #4294967295
 800b996:	9204      	str	r2, [sp, #16]
 800b998:	3501      	adds	r5, #1
 800b99a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b99e:	9310      	str	r3, [sp, #64]	; 0x40
 800b9a0:	469b      	mov	fp, r3
 800b9a2:	270a      	movs	r7, #10
 800b9a4:	222b      	movs	r2, #43	; 0x2b
 800b9a6:	462b      	mov	r3, r5
 800b9a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b9ac:	9106      	str	r1, [sp, #24]
 800b9ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b0:	9b06      	ldr	r3, [sp, #24]
 800b9b2:	3b20      	subs	r3, #32
 800b9b4:	2b5a      	cmp	r3, #90	; 0x5a
 800b9b6:	f200 85bf 	bhi.w	800c538 <_svfprintf_r+0xc60>
 800b9ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b9be:	007e      	.short	0x007e
 800b9c0:	05bd05bd 	.word	0x05bd05bd
 800b9c4:	05bd0086 	.word	0x05bd0086
 800b9c8:	05bd05bd 	.word	0x05bd05bd
 800b9cc:	05bd0065 	.word	0x05bd0065
 800b9d0:	008905bd 	.word	0x008905bd
 800b9d4:	05bd0093 	.word	0x05bd0093
 800b9d8:	00960090 	.word	0x00960090
 800b9dc:	00b305bd 	.word	0x00b305bd
 800b9e0:	00b600b6 	.word	0x00b600b6
 800b9e4:	00b600b6 	.word	0x00b600b6
 800b9e8:	00b600b6 	.word	0x00b600b6
 800b9ec:	00b600b6 	.word	0x00b600b6
 800b9f0:	05bd00b6 	.word	0x05bd00b6
 800b9f4:	05bd05bd 	.word	0x05bd05bd
 800b9f8:	05bd05bd 	.word	0x05bd05bd
 800b9fc:	05bd05bd 	.word	0x05bd05bd
 800ba00:	05bd012c 	.word	0x05bd012c
 800ba04:	00fc00e9 	.word	0x00fc00e9
 800ba08:	012c012c 	.word	0x012c012c
 800ba0c:	05bd012c 	.word	0x05bd012c
 800ba10:	05bd05bd 	.word	0x05bd05bd
 800ba14:	00c605bd 	.word	0x00c605bd
 800ba18:	05bd05bd 	.word	0x05bd05bd
 800ba1c:	05bd0498 	.word	0x05bd0498
 800ba20:	05bd05bd 	.word	0x05bd05bd
 800ba24:	05bd04e2 	.word	0x05bd04e2
 800ba28:	05bd0503 	.word	0x05bd0503
 800ba2c:	052505bd 	.word	0x052505bd
 800ba30:	05bd05bd 	.word	0x05bd05bd
 800ba34:	05bd05bd 	.word	0x05bd05bd
 800ba38:	05bd05bd 	.word	0x05bd05bd
 800ba3c:	05bd05bd 	.word	0x05bd05bd
 800ba40:	05bd012c 	.word	0x05bd012c
 800ba44:	00fe00e9 	.word	0x00fe00e9
 800ba48:	012c012c 	.word	0x012c012c
 800ba4c:	00c9012c 	.word	0x00c9012c
 800ba50:	00dd00fe 	.word	0x00dd00fe
 800ba54:	00d605bd 	.word	0x00d605bd
 800ba58:	047305bd 	.word	0x047305bd
 800ba5c:	04d0049a 	.word	0x04d0049a
 800ba60:	05bd00dd 	.word	0x05bd00dd
 800ba64:	007c04e2 	.word	0x007c04e2
 800ba68:	05bd0505 	.word	0x05bd0505
 800ba6c:	054405bd 	.word	0x054405bd
 800ba70:	007c05bd 	.word	0x007c05bd
 800ba74:	aa22      	add	r2, sp, #136	; 0x88
 800ba76:	4641      	mov	r1, r8
 800ba78:	4650      	mov	r0, sl
 800ba7a:	f003 fa1c 	bl	800eeb6 <__ssprint_r>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f040 8137 	bne.w	800bcf2 <_svfprintf_r+0x41a>
 800ba84:	ac25      	add	r4, sp, #148	; 0x94
 800ba86:	e77c      	b.n	800b982 <_svfprintf_r+0xaa>
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f002 fcf7 	bl	800e47c <_localeconv_r>
 800ba8e:	6843      	ldr	r3, [r0, #4]
 800ba90:	9314      	str	r3, [sp, #80]	; 0x50
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f4 fbae 	bl	80001f4 <strlen>
 800ba98:	9012      	str	r0, [sp, #72]	; 0x48
 800ba9a:	4650      	mov	r0, sl
 800ba9c:	f002 fcee 	bl	800e47c <_localeconv_r>
 800baa0:	6883      	ldr	r3, [r0, #8]
 800baa2:	930a      	str	r3, [sp, #40]	; 0x28
 800baa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800baa6:	222b      	movs	r2, #43	; 0x2b
 800baa8:	b12b      	cbz	r3, 800bab6 <_svfprintf_r+0x1de>
 800baaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baac:	b11b      	cbz	r3, 800bab6 <_svfprintf_r+0x1de>
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	b10b      	cbz	r3, 800bab6 <_svfprintf_r+0x1de>
 800bab2:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800bab6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bab8:	e775      	b.n	800b9a6 <_svfprintf_r+0xce>
 800baba:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f9      	bne.n	800bab6 <_svfprintf_r+0x1de>
 800bac2:	2320      	movs	r3, #32
 800bac4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bac8:	e7f5      	b.n	800bab6 <_svfprintf_r+0x1de>
 800baca:	f04b 0b01 	orr.w	fp, fp, #1
 800bace:	e7f2      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bad0:	f856 3b04 	ldr.w	r3, [r6], #4
 800bad4:	9310      	str	r3, [sp, #64]	; 0x40
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	daed      	bge.n	800bab6 <_svfprintf_r+0x1de>
 800bada:	425b      	negs	r3, r3
 800badc:	9310      	str	r3, [sp, #64]	; 0x40
 800bade:	f04b 0b04 	orr.w	fp, fp, #4
 800bae2:	e7e8      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bae4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800bae8:	e7e5      	b.n	800bab6 <_svfprintf_r+0x1de>
 800baea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800baec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800baf0:	9306      	str	r3, [sp, #24]
 800baf2:	2b2a      	cmp	r3, #42	; 0x2a
 800baf4:	d113      	bne.n	800bb1e <_svfprintf_r+0x246>
 800baf6:	f856 0b04 	ldr.w	r0, [r6], #4
 800bafa:	950b      	str	r5, [sp, #44]	; 0x2c
 800bafc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800bb00:	9304      	str	r3, [sp, #16]
 800bb02:	e7d8      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bb04:	9904      	ldr	r1, [sp, #16]
 800bb06:	fb07 3301 	mla	r3, r7, r1, r3
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb10:	9306      	str	r3, [sp, #24]
 800bb12:	9b06      	ldr	r3, [sp, #24]
 800bb14:	3b30      	subs	r3, #48	; 0x30
 800bb16:	2b09      	cmp	r3, #9
 800bb18:	d9f4      	bls.n	800bb04 <_svfprintf_r+0x22c>
 800bb1a:	950b      	str	r5, [sp, #44]	; 0x2c
 800bb1c:	e748      	b.n	800b9b0 <_svfprintf_r+0xd8>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	e7f6      	b.n	800bb12 <_svfprintf_r+0x23a>
 800bb24:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800bb28:	e7c5      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bb2e:	9310      	str	r3, [sp, #64]	; 0x40
 800bb30:	9b06      	ldr	r3, [sp, #24]
 800bb32:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bb34:	3b30      	subs	r3, #48	; 0x30
 800bb36:	fb07 3301 	mla	r3, r7, r1, r3
 800bb3a:	9310      	str	r3, [sp, #64]	; 0x40
 800bb3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb40:	9306      	str	r3, [sp, #24]
 800bb42:	3b30      	subs	r3, #48	; 0x30
 800bb44:	2b09      	cmp	r3, #9
 800bb46:	d9f3      	bls.n	800bb30 <_svfprintf_r+0x258>
 800bb48:	e7e7      	b.n	800bb1a <_svfprintf_r+0x242>
 800bb4a:	f04b 0b08 	orr.w	fp, fp, #8
 800bb4e:	e7b2      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b68      	cmp	r3, #104	; 0x68
 800bb56:	bf01      	itttt	eq
 800bb58:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800bb5a:	3301      	addeq	r3, #1
 800bb5c:	930b      	streq	r3, [sp, #44]	; 0x2c
 800bb5e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800bb62:	bf18      	it	ne
 800bb64:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800bb68:	e7a5      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b6c      	cmp	r3, #108	; 0x6c
 800bb70:	d105      	bne.n	800bb7e <_svfprintf_r+0x2a6>
 800bb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb74:	3301      	adds	r3, #1
 800bb76:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb78:	f04b 0b20 	orr.w	fp, fp, #32
 800bb7c:	e79b      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bb7e:	f04b 0b10 	orr.w	fp, fp, #16
 800bb82:	e798      	b.n	800bab6 <_svfprintf_r+0x1de>
 800bb84:	f3af 8000 	nop.w
	...
 800bb90:	4632      	mov	r2, r6
 800bb92:	2000      	movs	r0, #0
 800bb94:	f852 3b04 	ldr.w	r3, [r2], #4
 800bb98:	9207      	str	r2, [sp, #28]
 800bb9a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800bb9e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800bba2:	2301      	movs	r3, #1
 800bba4:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800bba8:	9003      	str	r0, [sp, #12]
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	4606      	mov	r6, r0
 800bbae:	4605      	mov	r5, r0
 800bbb0:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800bbb4:	e1bc      	b.n	800bf30 <_svfprintf_r+0x658>
 800bbb6:	f04b 0b10 	orr.w	fp, fp, #16
 800bbba:	f01b 0f20 	tst.w	fp, #32
 800bbbe:	d012      	beq.n	800bbe6 <_svfprintf_r+0x30e>
 800bbc0:	1df3      	adds	r3, r6, #7
 800bbc2:	f023 0307 	bic.w	r3, r3, #7
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	685d      	ldr	r5, [r3, #4]
 800bbca:	f852 6b08 	ldr.w	r6, [r2], #8
 800bbce:	9207      	str	r2, [sp, #28]
 800bbd0:	2d00      	cmp	r5, #0
 800bbd2:	da06      	bge.n	800bbe2 <_svfprintf_r+0x30a>
 800bbd4:	4276      	negs	r6, r6
 800bbd6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800bbda:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800bbde:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e396      	b.n	800c314 <_svfprintf_r+0xa3c>
 800bbe6:	4633      	mov	r3, r6
 800bbe8:	f01b 0f10 	tst.w	fp, #16
 800bbec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbf0:	9307      	str	r3, [sp, #28]
 800bbf2:	d002      	beq.n	800bbfa <_svfprintf_r+0x322>
 800bbf4:	462e      	mov	r6, r5
 800bbf6:	17ed      	asrs	r5, r5, #31
 800bbf8:	e7ea      	b.n	800bbd0 <_svfprintf_r+0x2f8>
 800bbfa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800bbfe:	d003      	beq.n	800bc08 <_svfprintf_r+0x330>
 800bc00:	b22e      	sxth	r6, r5
 800bc02:	f345 35c0 	sbfx	r5, r5, #15, #1
 800bc06:	e7e3      	b.n	800bbd0 <_svfprintf_r+0x2f8>
 800bc08:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800bc0c:	d0f2      	beq.n	800bbf4 <_svfprintf_r+0x31c>
 800bc0e:	b26e      	sxtb	r6, r5
 800bc10:	f345 15c0 	sbfx	r5, r5, #7, #1
 800bc14:	e7dc      	b.n	800bbd0 <_svfprintf_r+0x2f8>
 800bc16:	3607      	adds	r6, #7
 800bc18:	f026 0307 	bic.w	r3, r6, #7
 800bc1c:	ecb3 7b02 	vldmia	r3!, {d7}
 800bc20:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800bc24:	9307      	str	r3, [sp, #28]
 800bc26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc28:	ee09 3a10 	vmov	s18, r3
 800bc2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc32:	ee09 3a90 	vmov	s19, r3
 800bc36:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3a:	4b3a      	ldr	r3, [pc, #232]	; (800bd24 <_svfprintf_r+0x44c>)
 800bc3c:	ec51 0b19 	vmov	r0, r1, d9
 800bc40:	f7f4 ff8c 	bl	8000b5c <__aeabi_dcmpun>
 800bc44:	bb10      	cbnz	r0, 800bc8c <_svfprintf_r+0x3b4>
 800bc46:	4b37      	ldr	r3, [pc, #220]	; (800bd24 <_svfprintf_r+0x44c>)
 800bc48:	ec51 0b19 	vmov	r0, r1, d9
 800bc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc50:	f7f4 ff66 	bl	8000b20 <__aeabi_dcmple>
 800bc54:	b9d0      	cbnz	r0, 800bc8c <_svfprintf_r+0x3b4>
 800bc56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f7f4 ff55 	bl	8000b0c <__aeabi_dcmplt>
 800bc62:	b110      	cbz	r0, 800bc6a <_svfprintf_r+0x392>
 800bc64:	232d      	movs	r3, #45	; 0x2d
 800bc66:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bc6a:	4a2f      	ldr	r2, [pc, #188]	; (800bd28 <_svfprintf_r+0x450>)
 800bc6c:	482f      	ldr	r0, [pc, #188]	; (800bd2c <_svfprintf_r+0x454>)
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	2100      	movs	r1, #0
 800bc72:	2b47      	cmp	r3, #71	; 0x47
 800bc74:	bfd4      	ite	le
 800bc76:	4691      	movle	r9, r2
 800bc78:	4681      	movgt	r9, r0
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800bc80:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800bc84:	2600      	movs	r6, #0
 800bc86:	4633      	mov	r3, r6
 800bc88:	f001 b800 	b.w	800cc8c <_svfprintf_r+0x13b4>
 800bc8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bc90:	4610      	mov	r0, r2
 800bc92:	4619      	mov	r1, r3
 800bc94:	f7f4 ff62 	bl	8000b5c <__aeabi_dcmpun>
 800bc98:	b140      	cbz	r0, 800bcac <_svfprintf_r+0x3d4>
 800bc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc9c:	4a24      	ldr	r2, [pc, #144]	; (800bd30 <_svfprintf_r+0x458>)
 800bc9e:	4825      	ldr	r0, [pc, #148]	; (800bd34 <_svfprintf_r+0x45c>)
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfbc      	itt	lt
 800bca4:	232d      	movlt	r3, #45	; 0x2d
 800bca6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800bcaa:	e7e0      	b.n	800bc6e <_svfprintf_r+0x396>
 800bcac:	9b06      	ldr	r3, [sp, #24]
 800bcae:	f023 0320 	bic.w	r3, r3, #32
 800bcb2:	2b41      	cmp	r3, #65	; 0x41
 800bcb4:	9308      	str	r3, [sp, #32]
 800bcb6:	d125      	bne.n	800bd04 <_svfprintf_r+0x42c>
 800bcb8:	2330      	movs	r3, #48	; 0x30
 800bcba:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800bcbe:	9b06      	ldr	r3, [sp, #24]
 800bcc0:	2b61      	cmp	r3, #97	; 0x61
 800bcc2:	bf0c      	ite	eq
 800bcc4:	2378      	moveq	r3, #120	; 0x78
 800bcc6:	2358      	movne	r3, #88	; 0x58
 800bcc8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	2b63      	cmp	r3, #99	; 0x63
 800bcd0:	f04b 0b02 	orr.w	fp, fp, #2
 800bcd4:	dd30      	ble.n	800bd38 <_svfprintf_r+0x460>
 800bcd6:	1c59      	adds	r1, r3, #1
 800bcd8:	4650      	mov	r0, sl
 800bcda:	f7fe fa77 	bl	800a1cc <_malloc_r>
 800bcde:	4681      	mov	r9, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f040 81fd 	bne.w	800c0e0 <_svfprintf_r+0x808>
 800bce6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800bcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcee:	f8a8 300c 	strh.w	r3, [r8, #12]
 800bcf2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800bcf6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bcfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcfc:	bf18      	it	ne
 800bcfe:	f04f 33ff 	movne.w	r3, #4294967295
 800bd02:	e60f      	b.n	800b924 <_svfprintf_r+0x4c>
 800bd04:	9b04      	ldr	r3, [sp, #16]
 800bd06:	3301      	adds	r3, #1
 800bd08:	f000 81ec 	beq.w	800c0e4 <_svfprintf_r+0x80c>
 800bd0c:	9b08      	ldr	r3, [sp, #32]
 800bd0e:	2b47      	cmp	r3, #71	; 0x47
 800bd10:	f040 81eb 	bne.w	800c0ea <_svfprintf_r+0x812>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 81e7 	bne.w	800c0ea <_svfprintf_r+0x812>
 800bd1c:	9303      	str	r3, [sp, #12]
 800bd1e:	2301      	movs	r3, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	e00c      	b.n	800bd3e <_svfprintf_r+0x466>
 800bd24:	7fefffff 	.word	0x7fefffff
 800bd28:	08010848 	.word	0x08010848
 800bd2c:	0801084c 	.word	0x0801084c
 800bd30:	08010850 	.word	0x08010850
 800bd34:	08010854 	.word	0x08010854
 800bd38:	9003      	str	r0, [sp, #12]
 800bd3a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800bd3e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800bd42:	9311      	str	r3, [sp, #68]	; 0x44
 800bd44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f280 81d1 	bge.w	800c0ee <_svfprintf_r+0x816>
 800bd4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd4e:	ee08 3a10 	vmov	s16, r3
 800bd52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd58:	ee08 3a90 	vmov	s17, r3
 800bd5c:	232d      	movs	r3, #45	; 0x2d
 800bd5e:	9318      	str	r3, [sp, #96]	; 0x60
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	2b41      	cmp	r3, #65	; 0x41
 800bd64:	f040 81e1 	bne.w	800c12a <_svfprintf_r+0x852>
 800bd68:	eeb0 0a48 	vmov.f32	s0, s16
 800bd6c:	eef0 0a68 	vmov.f32	s1, s17
 800bd70:	a81c      	add	r0, sp, #112	; 0x70
 800bd72:	f003 f84b 	bl	800ee0c <frexp>
 800bd76:	2200      	movs	r2, #0
 800bd78:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bd7c:	ec51 0b10 	vmov	r0, r1, d0
 800bd80:	f7f4 fc52 	bl	8000628 <__aeabi_dmul>
 800bd84:	2200      	movs	r2, #0
 800bd86:	2300      	movs	r3, #0
 800bd88:	4606      	mov	r6, r0
 800bd8a:	460f      	mov	r7, r1
 800bd8c:	f7f4 feb4 	bl	8000af8 <__aeabi_dcmpeq>
 800bd90:	b108      	cbz	r0, 800bd96 <_svfprintf_r+0x4be>
 800bd92:	2301      	movs	r3, #1
 800bd94:	931c      	str	r3, [sp, #112]	; 0x70
 800bd96:	4ba7      	ldr	r3, [pc, #668]	; (800c034 <_svfprintf_r+0x75c>)
 800bd98:	4aa7      	ldr	r2, [pc, #668]	; (800c038 <_svfprintf_r+0x760>)
 800bd9a:	9906      	ldr	r1, [sp, #24]
 800bd9c:	2961      	cmp	r1, #97	; 0x61
 800bd9e:	bf18      	it	ne
 800bda0:	461a      	movne	r2, r3
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bda6:	3b01      	subs	r3, #1
 800bda8:	9305      	str	r3, [sp, #20]
 800bdaa:	464d      	mov	r5, r9
 800bdac:	4ba3      	ldr	r3, [pc, #652]	; (800c03c <_svfprintf_r+0x764>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f4 fc38 	bl	8000628 <__aeabi_dmul>
 800bdb8:	460f      	mov	r7, r1
 800bdba:	4606      	mov	r6, r0
 800bdbc:	f7f4 fee4 	bl	8000b88 <__aeabi_d2iz>
 800bdc0:	9019      	str	r0, [sp, #100]	; 0x64
 800bdc2:	f7f4 fbc7 	bl	8000554 <__aeabi_i2d>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4630      	mov	r0, r6
 800bdcc:	4639      	mov	r1, r7
 800bdce:	f7f4 fa73 	bl	80002b8 <__aeabi_dsub>
 800bdd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bdd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdd6:	5c9b      	ldrb	r3, [r3, r2]
 800bdd8:	f805 3b01 	strb.w	r3, [r5], #1
 800bddc:	9b05      	ldr	r3, [sp, #20]
 800bdde:	9309      	str	r3, [sp, #36]	; 0x24
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	d007      	beq.n	800bdf8 <_svfprintf_r+0x520>
 800bde8:	3b01      	subs	r3, #1
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	2200      	movs	r2, #0
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f7f4 fe82 	bl	8000af8 <__aeabi_dcmpeq>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d0d9      	beq.n	800bdac <_svfprintf_r+0x4d4>
 800bdf8:	4b91      	ldr	r3, [pc, #580]	; (800c040 <_svfprintf_r+0x768>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fea2 	bl	8000b48 <__aeabi_dcmpgt>
 800be04:	b960      	cbnz	r0, 800be20 <_svfprintf_r+0x548>
 800be06:	4b8e      	ldr	r3, [pc, #568]	; (800c040 <_svfprintf_r+0x768>)
 800be08:	2200      	movs	r2, #0
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 fe73 	bl	8000af8 <__aeabi_dcmpeq>
 800be12:	2800      	cmp	r0, #0
 800be14:	f000 8184 	beq.w	800c120 <_svfprintf_r+0x848>
 800be18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be1a:	07db      	lsls	r3, r3, #31
 800be1c:	f140 8180 	bpl.w	800c120 <_svfprintf_r+0x848>
 800be20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be22:	9520      	str	r5, [sp, #128]	; 0x80
 800be24:	7bd9      	ldrb	r1, [r3, #15]
 800be26:	2030      	movs	r0, #48	; 0x30
 800be28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be2a:	1e53      	subs	r3, r2, #1
 800be2c:	9320      	str	r3, [sp, #128]	; 0x80
 800be2e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800be32:	428b      	cmp	r3, r1
 800be34:	f000 8163 	beq.w	800c0fe <_svfprintf_r+0x826>
 800be38:	2b39      	cmp	r3, #57	; 0x39
 800be3a:	bf0b      	itete	eq
 800be3c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800be3e:	3301      	addne	r3, #1
 800be40:	7a9b      	ldrbeq	r3, [r3, #10]
 800be42:	b2db      	uxtbne	r3, r3
 800be44:	f802 3c01 	strb.w	r3, [r2, #-1]
 800be48:	eba5 0309 	sub.w	r3, r5, r9
 800be4c:	9305      	str	r3, [sp, #20]
 800be4e:	9b08      	ldr	r3, [sp, #32]
 800be50:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800be52:	2b47      	cmp	r3, #71	; 0x47
 800be54:	f040 81b1 	bne.w	800c1ba <_svfprintf_r+0x8e2>
 800be58:	1cef      	adds	r7, r5, #3
 800be5a:	db03      	blt.n	800be64 <_svfprintf_r+0x58c>
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	42ab      	cmp	r3, r5
 800be60:	f280 81d6 	bge.w	800c210 <_svfprintf_r+0x938>
 800be64:	9b06      	ldr	r3, [sp, #24]
 800be66:	3b02      	subs	r3, #2
 800be68:	9306      	str	r3, [sp, #24]
 800be6a:	9906      	ldr	r1, [sp, #24]
 800be6c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800be70:	f021 0120 	bic.w	r1, r1, #32
 800be74:	2941      	cmp	r1, #65	; 0x41
 800be76:	bf08      	it	eq
 800be78:	320f      	addeq	r2, #15
 800be7a:	f105 33ff 	add.w	r3, r5, #4294967295
 800be7e:	bf06      	itte	eq
 800be80:	b2d2      	uxtbeq	r2, r2
 800be82:	2101      	moveq	r1, #1
 800be84:	2100      	movne	r1, #0
 800be86:	2b00      	cmp	r3, #0
 800be88:	931c      	str	r3, [sp, #112]	; 0x70
 800be8a:	bfb8      	it	lt
 800be8c:	f1c5 0301 	rsblt	r3, r5, #1
 800be90:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800be94:	bfb4      	ite	lt
 800be96:	222d      	movlt	r2, #45	; 0x2d
 800be98:	222b      	movge	r2, #43	; 0x2b
 800be9a:	2b09      	cmp	r3, #9
 800be9c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800bea0:	f340 81a4 	ble.w	800c1ec <_svfprintf_r+0x914>
 800bea4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800bea8:	260a      	movs	r6, #10
 800beaa:	4611      	mov	r1, r2
 800beac:	fb93 f5f6 	sdiv	r5, r3, r6
 800beb0:	fb06 3015 	mls	r0, r6, r5, r3
 800beb4:	3030      	adds	r0, #48	; 0x30
 800beb6:	f801 0c01 	strb.w	r0, [r1, #-1]
 800beba:	4618      	mov	r0, r3
 800bebc:	2863      	cmp	r0, #99	; 0x63
 800bebe:	f102 32ff 	add.w	r2, r2, #4294967295
 800bec2:	462b      	mov	r3, r5
 800bec4:	dcf1      	bgt.n	800beaa <_svfprintf_r+0x5d2>
 800bec6:	3330      	adds	r3, #48	; 0x30
 800bec8:	1e88      	subs	r0, r1, #2
 800beca:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bece:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800bed2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800bed6:	4603      	mov	r3, r0
 800bed8:	42ab      	cmp	r3, r5
 800beda:	f0c0 8182 	bcc.w	800c1e2 <_svfprintf_r+0x90a>
 800bede:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800bee2:	1a52      	subs	r2, r2, r1
 800bee4:	42a8      	cmp	r0, r5
 800bee6:	bf88      	it	hi
 800bee8:	2200      	movhi	r2, #0
 800beea:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800beee:	441a      	add	r2, r3
 800bef0:	ab1e      	add	r3, sp, #120	; 0x78
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	9a05      	ldr	r2, [sp, #20]
 800bef6:	9315      	str	r3, [sp, #84]	; 0x54
 800bef8:	2a01      	cmp	r2, #1
 800befa:	4413      	add	r3, r2
 800befc:	9304      	str	r3, [sp, #16]
 800befe:	dc02      	bgt.n	800bf06 <_svfprintf_r+0x62e>
 800bf00:	f01b 0f01 	tst.w	fp, #1
 800bf04:	d003      	beq.n	800bf0e <_svfprintf_r+0x636>
 800bf06:	9b04      	ldr	r3, [sp, #16]
 800bf08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf0a:	4413      	add	r3, r2
 800bf0c:	9304      	str	r3, [sp, #16]
 800bf0e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800bf12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf16:	9311      	str	r3, [sp, #68]	; 0x44
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bf1e:	461d      	mov	r5, r3
 800bf20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bf22:	b113      	cbz	r3, 800bf2a <_svfprintf_r+0x652>
 800bf24:	232d      	movs	r3, #45	; 0x2d
 800bf26:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bf2a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bf2e:	2600      	movs	r6, #0
 800bf30:	9b04      	ldr	r3, [sp, #16]
 800bf32:	42b3      	cmp	r3, r6
 800bf34:	bfb8      	it	lt
 800bf36:	4633      	movlt	r3, r6
 800bf38:	9311      	str	r3, [sp, #68]	; 0x44
 800bf3a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bf3e:	b113      	cbz	r3, 800bf46 <_svfprintf_r+0x66e>
 800bf40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf42:	3301      	adds	r3, #1
 800bf44:	9311      	str	r3, [sp, #68]	; 0x44
 800bf46:	f01b 0302 	ands.w	r3, fp, #2
 800bf4a:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf4c:	bf1e      	ittt	ne
 800bf4e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800bf50:	3302      	addne	r3, #2
 800bf52:	9311      	strne	r3, [sp, #68]	; 0x44
 800bf54:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800bf58:	9318      	str	r3, [sp, #96]	; 0x60
 800bf5a:	d11f      	bne.n	800bf9c <_svfprintf_r+0x6c4>
 800bf5c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bf60:	1a9f      	subs	r7, r3, r2
 800bf62:	2f00      	cmp	r7, #0
 800bf64:	dd1a      	ble.n	800bf9c <_svfprintf_r+0x6c4>
 800bf66:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bf6a:	4836      	ldr	r0, [pc, #216]	; (800c044 <_svfprintf_r+0x76c>)
 800bf6c:	6020      	str	r0, [r4, #0]
 800bf6e:	2f10      	cmp	r7, #16
 800bf70:	f103 0301 	add.w	r3, r3, #1
 800bf74:	f104 0108 	add.w	r1, r4, #8
 800bf78:	f300 82ed 	bgt.w	800c556 <_svfprintf_r+0xc7e>
 800bf7c:	6067      	str	r7, [r4, #4]
 800bf7e:	2b07      	cmp	r3, #7
 800bf80:	4417      	add	r7, r2
 800bf82:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bf86:	f340 82f9 	ble.w	800c57c <_svfprintf_r+0xca4>
 800bf8a:	aa22      	add	r2, sp, #136	; 0x88
 800bf8c:	4641      	mov	r1, r8
 800bf8e:	4650      	mov	r0, sl
 800bf90:	f002 ff91 	bl	800eeb6 <__ssprint_r>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	f040 8621 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800bf9a:	ac25      	add	r4, sp, #148	; 0x94
 800bf9c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bfa0:	b173      	cbz	r3, 800bfc0 <_svfprintf_r+0x6e8>
 800bfa2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9324      	str	r3, [sp, #144]	; 0x90
 800bfb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	2b07      	cmp	r3, #7
 800bfb8:	9323      	str	r3, [sp, #140]	; 0x8c
 800bfba:	f300 82e1 	bgt.w	800c580 <_svfprintf_r+0xca8>
 800bfbe:	3408      	adds	r4, #8
 800bfc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfc2:	b16b      	cbz	r3, 800bfe0 <_svfprintf_r+0x708>
 800bfc4:	ab1b      	add	r3, sp, #108	; 0x6c
 800bfc6:	6023      	str	r3, [r4, #0]
 800bfc8:	2302      	movs	r3, #2
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bfce:	3302      	adds	r3, #2
 800bfd0:	9324      	str	r3, [sp, #144]	; 0x90
 800bfd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	2b07      	cmp	r3, #7
 800bfd8:	9323      	str	r3, [sp, #140]	; 0x8c
 800bfda:	f300 82db 	bgt.w	800c594 <_svfprintf_r+0xcbc>
 800bfde:	3408      	adds	r4, #8
 800bfe0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bfe2:	2b80      	cmp	r3, #128	; 0x80
 800bfe4:	d11f      	bne.n	800c026 <_svfprintf_r+0x74e>
 800bfe6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bfea:	1a9f      	subs	r7, r3, r2
 800bfec:	2f00      	cmp	r7, #0
 800bfee:	dd1a      	ble.n	800c026 <_svfprintf_r+0x74e>
 800bff0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bff4:	4814      	ldr	r0, [pc, #80]	; (800c048 <_svfprintf_r+0x770>)
 800bff6:	6020      	str	r0, [r4, #0]
 800bff8:	2f10      	cmp	r7, #16
 800bffa:	f103 0301 	add.w	r3, r3, #1
 800bffe:	f104 0108 	add.w	r1, r4, #8
 800c002:	f300 82d1 	bgt.w	800c5a8 <_svfprintf_r+0xcd0>
 800c006:	6067      	str	r7, [r4, #4]
 800c008:	2b07      	cmp	r3, #7
 800c00a:	4417      	add	r7, r2
 800c00c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800c010:	f340 82dd 	ble.w	800c5ce <_svfprintf_r+0xcf6>
 800c014:	aa22      	add	r2, sp, #136	; 0x88
 800c016:	4641      	mov	r1, r8
 800c018:	4650      	mov	r0, sl
 800c01a:	f002 ff4c 	bl	800eeb6 <__ssprint_r>
 800c01e:	2800      	cmp	r0, #0
 800c020:	f040 85dc 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c024:	ac25      	add	r4, sp, #148	; 0x94
 800c026:	9b04      	ldr	r3, [sp, #16]
 800c028:	1af6      	subs	r6, r6, r3
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	dd28      	ble.n	800c080 <_svfprintf_r+0x7a8>
 800c02e:	4f06      	ldr	r7, [pc, #24]	; (800c048 <_svfprintf_r+0x770>)
 800c030:	e00c      	b.n	800c04c <_svfprintf_r+0x774>
 800c032:	bf00      	nop
 800c034:	08010869 	.word	0x08010869
 800c038:	08010858 	.word	0x08010858
 800c03c:	40300000 	.word	0x40300000
 800c040:	3fe00000 	.word	0x3fe00000
 800c044:	0801087c 	.word	0x0801087c
 800c048:	0801088c 	.word	0x0801088c
 800c04c:	6027      	str	r7, [r4, #0]
 800c04e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c052:	2e10      	cmp	r6, #16
 800c054:	f103 0301 	add.w	r3, r3, #1
 800c058:	f104 0108 	add.w	r1, r4, #8
 800c05c:	f300 82b9 	bgt.w	800c5d2 <_svfprintf_r+0xcfa>
 800c060:	6066      	str	r6, [r4, #4]
 800c062:	2b07      	cmp	r3, #7
 800c064:	4416      	add	r6, r2
 800c066:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c06a:	f340 82c5 	ble.w	800c5f8 <_svfprintf_r+0xd20>
 800c06e:	aa22      	add	r2, sp, #136	; 0x88
 800c070:	4641      	mov	r1, r8
 800c072:	4650      	mov	r0, sl
 800c074:	f002 ff1f 	bl	800eeb6 <__ssprint_r>
 800c078:	2800      	cmp	r0, #0
 800c07a:	f040 85af 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c07e:	ac25      	add	r4, sp, #148	; 0x94
 800c080:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c084:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800c086:	f040 82bd 	bne.w	800c604 <_svfprintf_r+0xd2c>
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	f8c4 9000 	str.w	r9, [r4]
 800c090:	441e      	add	r6, r3
 800c092:	6063      	str	r3, [r4, #4]
 800c094:	9624      	str	r6, [sp, #144]	; 0x90
 800c096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c098:	3301      	adds	r3, #1
 800c09a:	2b07      	cmp	r3, #7
 800c09c:	9323      	str	r3, [sp, #140]	; 0x8c
 800c09e:	f300 82f6 	bgt.w	800c68e <_svfprintf_r+0xdb6>
 800c0a2:	3408      	adds	r4, #8
 800c0a4:	f01b 0f04 	tst.w	fp, #4
 800c0a8:	f040 857a 	bne.w	800cba0 <_svfprintf_r+0x12c8>
 800c0ac:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 800c0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0b2:	428a      	cmp	r2, r1
 800c0b4:	bfac      	ite	ge
 800c0b6:	189b      	addge	r3, r3, r2
 800c0b8:	185b      	addlt	r3, r3, r1
 800c0ba:	930c      	str	r3, [sp, #48]	; 0x30
 800c0bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c0be:	b13b      	cbz	r3, 800c0d0 <_svfprintf_r+0x7f8>
 800c0c0:	aa22      	add	r2, sp, #136	; 0x88
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	4650      	mov	r0, sl
 800c0c6:	f002 fef6 	bl	800eeb6 <__ssprint_r>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	f040 8586 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	9323      	str	r3, [sp, #140]	; 0x8c
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f040 859c 	bne.w	800cc14 <_svfprintf_r+0x133c>
 800c0dc:	ac25      	add	r4, sp, #148	; 0x94
 800c0de:	e0ec      	b.n	800c2ba <_svfprintf_r+0x9e2>
 800c0e0:	9003      	str	r0, [sp, #12]
 800c0e2:	e62c      	b.n	800bd3e <_svfprintf_r+0x466>
 800c0e4:	9003      	str	r0, [sp, #12]
 800c0e6:	2306      	movs	r3, #6
 800c0e8:	e61a      	b.n	800bd20 <_svfprintf_r+0x448>
 800c0ea:	9003      	str	r0, [sp, #12]
 800c0ec:	e627      	b.n	800bd3e <_svfprintf_r+0x466>
 800c0ee:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	eeb0 8a47 	vmov.f32	s16, s14
 800c0f8:	eef0 8a67 	vmov.f32	s17, s15
 800c0fc:	e62f      	b.n	800bd5e <_svfprintf_r+0x486>
 800c0fe:	f802 0c01 	strb.w	r0, [r2, #-1]
 800c102:	e691      	b.n	800be28 <_svfprintf_r+0x550>
 800c104:	f803 0b01 	strb.w	r0, [r3], #1
 800c108:	1aca      	subs	r2, r1, r3
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	dafa      	bge.n	800c104 <_svfprintf_r+0x82c>
 800c10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c112:	3201      	adds	r2, #1
 800c114:	f103 0301 	add.w	r3, r3, #1
 800c118:	bfb8      	it	lt
 800c11a:	2300      	movlt	r3, #0
 800c11c:	441d      	add	r5, r3
 800c11e:	e693      	b.n	800be48 <_svfprintf_r+0x570>
 800c120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c122:	462b      	mov	r3, r5
 800c124:	18a9      	adds	r1, r5, r2
 800c126:	2030      	movs	r0, #48	; 0x30
 800c128:	e7ee      	b.n	800c108 <_svfprintf_r+0x830>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	2b46      	cmp	r3, #70	; 0x46
 800c12e:	d005      	beq.n	800c13c <_svfprintf_r+0x864>
 800c130:	2b45      	cmp	r3, #69	; 0x45
 800c132:	d11b      	bne.n	800c16c <_svfprintf_r+0x894>
 800c134:	9b04      	ldr	r3, [sp, #16]
 800c136:	1c5d      	adds	r5, r3, #1
 800c138:	2102      	movs	r1, #2
 800c13a:	e001      	b.n	800c140 <_svfprintf_r+0x868>
 800c13c:	9d04      	ldr	r5, [sp, #16]
 800c13e:	2103      	movs	r1, #3
 800c140:	ab20      	add	r3, sp, #128	; 0x80
 800c142:	9301      	str	r3, [sp, #4]
 800c144:	ab1d      	add	r3, sp, #116	; 0x74
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	462a      	mov	r2, r5
 800c14a:	ab1c      	add	r3, sp, #112	; 0x70
 800c14c:	4650      	mov	r0, sl
 800c14e:	eeb0 0a48 	vmov.f32	s0, s16
 800c152:	eef0 0a68 	vmov.f32	s1, s17
 800c156:	f000 fe8f 	bl	800ce78 <_dtoa_r>
 800c15a:	9b08      	ldr	r3, [sp, #32]
 800c15c:	2b47      	cmp	r3, #71	; 0x47
 800c15e:	4681      	mov	r9, r0
 800c160:	d106      	bne.n	800c170 <_svfprintf_r+0x898>
 800c162:	f01b 0f01 	tst.w	fp, #1
 800c166:	d103      	bne.n	800c170 <_svfprintf_r+0x898>
 800c168:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c16a:	e66d      	b.n	800be48 <_svfprintf_r+0x570>
 800c16c:	9d04      	ldr	r5, [sp, #16]
 800c16e:	e7e3      	b.n	800c138 <_svfprintf_r+0x860>
 800c170:	9b08      	ldr	r3, [sp, #32]
 800c172:	2b46      	cmp	r3, #70	; 0x46
 800c174:	eb09 0605 	add.w	r6, r9, r5
 800c178:	d10f      	bne.n	800c19a <_svfprintf_r+0x8c2>
 800c17a:	f899 3000 	ldrb.w	r3, [r9]
 800c17e:	2b30      	cmp	r3, #48	; 0x30
 800c180:	d109      	bne.n	800c196 <_svfprintf_r+0x8be>
 800c182:	ec51 0b18 	vmov	r0, r1, d8
 800c186:	2200      	movs	r2, #0
 800c188:	2300      	movs	r3, #0
 800c18a:	f7f4 fcb5 	bl	8000af8 <__aeabi_dcmpeq>
 800c18e:	b910      	cbnz	r0, 800c196 <_svfprintf_r+0x8be>
 800c190:	f1c5 0501 	rsb	r5, r5, #1
 800c194:	951c      	str	r5, [sp, #112]	; 0x70
 800c196:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c198:	441e      	add	r6, r3
 800c19a:	ec51 0b18 	vmov	r0, r1, d8
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f7f4 fca9 	bl	8000af8 <__aeabi_dcmpeq>
 800c1a6:	b100      	cbz	r0, 800c1aa <_svfprintf_r+0x8d2>
 800c1a8:	9620      	str	r6, [sp, #128]	; 0x80
 800c1aa:	2230      	movs	r2, #48	; 0x30
 800c1ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c1ae:	429e      	cmp	r6, r3
 800c1b0:	d9da      	bls.n	800c168 <_svfprintf_r+0x890>
 800c1b2:	1c59      	adds	r1, r3, #1
 800c1b4:	9120      	str	r1, [sp, #128]	; 0x80
 800c1b6:	701a      	strb	r2, [r3, #0]
 800c1b8:	e7f8      	b.n	800c1ac <_svfprintf_r+0x8d4>
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	2b46      	cmp	r3, #70	; 0x46
 800c1be:	f47f ae54 	bne.w	800be6a <_svfprintf_r+0x592>
 800c1c2:	9a04      	ldr	r2, [sp, #16]
 800c1c4:	f00b 0301 	and.w	r3, fp, #1
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	ea43 0302 	orr.w	r3, r3, r2
 800c1ce:	dd1a      	ble.n	800c206 <_svfprintf_r+0x92e>
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d034      	beq.n	800c23e <_svfprintf_r+0x966>
 800c1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1d6:	18eb      	adds	r3, r5, r3
 800c1d8:	441a      	add	r2, r3
 800c1da:	9204      	str	r2, [sp, #16]
 800c1dc:	2366      	movs	r3, #102	; 0x66
 800c1de:	9306      	str	r3, [sp, #24]
 800c1e0:	e033      	b.n	800c24a <_svfprintf_r+0x972>
 800c1e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1e6:	f802 6b01 	strb.w	r6, [r2], #1
 800c1ea:	e675      	b.n	800bed8 <_svfprintf_r+0x600>
 800c1ec:	b941      	cbnz	r1, 800c200 <_svfprintf_r+0x928>
 800c1ee:	2230      	movs	r2, #48	; 0x30
 800c1f0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800c1f4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800c1f8:	3330      	adds	r3, #48	; 0x30
 800c1fa:	f802 3b01 	strb.w	r3, [r2], #1
 800c1fe:	e677      	b.n	800bef0 <_svfprintf_r+0x618>
 800c200:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800c204:	e7f8      	b.n	800c1f8 <_svfprintf_r+0x920>
 800c206:	b1e3      	cbz	r3, 800c242 <_svfprintf_r+0x96a>
 800c208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c20a:	9a04      	ldr	r2, [sp, #16]
 800c20c:	3301      	adds	r3, #1
 800c20e:	e7e3      	b.n	800c1d8 <_svfprintf_r+0x900>
 800c210:	9b05      	ldr	r3, [sp, #20]
 800c212:	429d      	cmp	r5, r3
 800c214:	db07      	blt.n	800c226 <_svfprintf_r+0x94e>
 800c216:	f01b 0f01 	tst.w	fp, #1
 800c21a:	d02d      	beq.n	800c278 <_svfprintf_r+0x9a0>
 800c21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c21e:	18eb      	adds	r3, r5, r3
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	2367      	movs	r3, #103	; 0x67
 800c224:	e7db      	b.n	800c1de <_svfprintf_r+0x906>
 800c226:	9b05      	ldr	r3, [sp, #20]
 800c228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c22a:	2d00      	cmp	r5, #0
 800c22c:	4413      	add	r3, r2
 800c22e:	9304      	str	r3, [sp, #16]
 800c230:	dcf7      	bgt.n	800c222 <_svfprintf_r+0x94a>
 800c232:	9a04      	ldr	r2, [sp, #16]
 800c234:	f1c5 0301 	rsb	r3, r5, #1
 800c238:	441a      	add	r2, r3
 800c23a:	9204      	str	r2, [sp, #16]
 800c23c:	e7f1      	b.n	800c222 <_svfprintf_r+0x94a>
 800c23e:	9504      	str	r5, [sp, #16]
 800c240:	e7cc      	b.n	800c1dc <_svfprintf_r+0x904>
 800c242:	2366      	movs	r3, #102	; 0x66
 800c244:	9306      	str	r3, [sp, #24]
 800c246:	2301      	movs	r3, #1
 800c248:	9304      	str	r3, [sp, #16]
 800c24a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800c24e:	9309      	str	r3, [sp, #36]	; 0x24
 800c250:	d025      	beq.n	800c29e <_svfprintf_r+0x9c6>
 800c252:	2300      	movs	r3, #0
 800c254:	2d00      	cmp	r5, #0
 800c256:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800c25a:	f77f ae61 	ble.w	800bf20 <_svfprintf_r+0x648>
 800c25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2bff      	cmp	r3, #255	; 0xff
 800c264:	d10a      	bne.n	800c27c <_svfprintf_r+0x9a4>
 800c266:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c26a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c26c:	4413      	add	r3, r2
 800c26e:	9a04      	ldr	r2, [sp, #16]
 800c270:	fb01 2303 	mla	r3, r1, r3, r2
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	e653      	b.n	800bf20 <_svfprintf_r+0x648>
 800c278:	9504      	str	r5, [sp, #16]
 800c27a:	e7d2      	b.n	800c222 <_svfprintf_r+0x94a>
 800c27c:	42ab      	cmp	r3, r5
 800c27e:	daf2      	bge.n	800c266 <_svfprintf_r+0x98e>
 800c280:	1aed      	subs	r5, r5, r3
 800c282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	b133      	cbz	r3, 800c296 <_svfprintf_r+0x9be>
 800c288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28a:	3301      	adds	r3, #1
 800c28c:	9309      	str	r3, [sp, #36]	; 0x24
 800c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c290:	3301      	adds	r3, #1
 800c292:	930a      	str	r3, [sp, #40]	; 0x28
 800c294:	e7e3      	b.n	800c25e <_svfprintf_r+0x986>
 800c296:	9b08      	ldr	r3, [sp, #32]
 800c298:	3301      	adds	r3, #1
 800c29a:	9308      	str	r3, [sp, #32]
 800c29c:	e7df      	b.n	800c25e <_svfprintf_r+0x986>
 800c29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a0:	9308      	str	r3, [sp, #32]
 800c2a2:	e63d      	b.n	800bf20 <_svfprintf_r+0x648>
 800c2a4:	1d33      	adds	r3, r6, #4
 800c2a6:	f01b 0f20 	tst.w	fp, #32
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	d00a      	beq.n	800c2c4 <_svfprintf_r+0x9ec>
 800c2ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2b0:	6833      	ldr	r3, [r6, #0]
 800c2b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c2b4:	17d2      	asrs	r2, r2, #31
 800c2b6:	e9c3 1200 	strd	r1, r2, [r3]
 800c2ba:	9e07      	ldr	r6, [sp, #28]
 800c2bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c2c0:	f7ff bb4a 	b.w	800b958 <_svfprintf_r+0x80>
 800c2c4:	f01b 0f10 	tst.w	fp, #16
 800c2c8:	d003      	beq.n	800c2d2 <_svfprintf_r+0x9fa>
 800c2ca:	6833      	ldr	r3, [r6, #0]
 800c2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	e7f3      	b.n	800c2ba <_svfprintf_r+0x9e2>
 800c2d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800c2d6:	d003      	beq.n	800c2e0 <_svfprintf_r+0xa08>
 800c2d8:	6833      	ldr	r3, [r6, #0]
 800c2da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2dc:	801a      	strh	r2, [r3, #0]
 800c2de:	e7ec      	b.n	800c2ba <_svfprintf_r+0x9e2>
 800c2e0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800c2e4:	d0f1      	beq.n	800c2ca <_svfprintf_r+0x9f2>
 800c2e6:	6833      	ldr	r3, [r6, #0]
 800c2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	e7e5      	b.n	800c2ba <_svfprintf_r+0x9e2>
 800c2ee:	f04b 0b10 	orr.w	fp, fp, #16
 800c2f2:	f01b 0320 	ands.w	r3, fp, #32
 800c2f6:	d01f      	beq.n	800c338 <_svfprintf_r+0xa60>
 800c2f8:	1df3      	adds	r3, r6, #7
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	461a      	mov	r2, r3
 800c300:	685d      	ldr	r5, [r3, #4]
 800c302:	f852 6b08 	ldr.w	r6, [r2], #8
 800c306:	9207      	str	r2, [sp, #28]
 800c308:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800c30c:	2300      	movs	r3, #0
 800c30e:	2200      	movs	r2, #0
 800c310:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800c314:	9a04      	ldr	r2, [sp, #16]
 800c316:	3201      	adds	r2, #1
 800c318:	f000 848d 	beq.w	800cc36 <_svfprintf_r+0x135e>
 800c31c:	ea56 0205 	orrs.w	r2, r6, r5
 800c320:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 800c324:	f040 848c 	bne.w	800cc40 <_svfprintf_r+0x1368>
 800c328:	9a04      	ldr	r2, [sp, #16]
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	f000 80f9 	beq.w	800c522 <_svfprintf_r+0xc4a>
 800c330:	2b01      	cmp	r3, #1
 800c332:	f040 8488 	bne.w	800cc46 <_svfprintf_r+0x136e>
 800c336:	e09f      	b.n	800c478 <_svfprintf_r+0xba0>
 800c338:	4632      	mov	r2, r6
 800c33a:	f01b 0510 	ands.w	r5, fp, #16
 800c33e:	f852 6b04 	ldr.w	r6, [r2], #4
 800c342:	9207      	str	r2, [sp, #28]
 800c344:	d001      	beq.n	800c34a <_svfprintf_r+0xa72>
 800c346:	461d      	mov	r5, r3
 800c348:	e7de      	b.n	800c308 <_svfprintf_r+0xa30>
 800c34a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c34e:	d001      	beq.n	800c354 <_svfprintf_r+0xa7c>
 800c350:	b2b6      	uxth	r6, r6
 800c352:	e7d9      	b.n	800c308 <_svfprintf_r+0xa30>
 800c354:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c358:	d0d6      	beq.n	800c308 <_svfprintf_r+0xa30>
 800c35a:	b2f6      	uxtb	r6, r6
 800c35c:	e7f3      	b.n	800c346 <_svfprintf_r+0xa6e>
 800c35e:	4633      	mov	r3, r6
 800c360:	2278      	movs	r2, #120	; 0x78
 800c362:	f853 6b04 	ldr.w	r6, [r3], #4
 800c366:	9307      	str	r3, [sp, #28]
 800c368:	2330      	movs	r3, #48	; 0x30
 800c36a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800c36e:	4ba3      	ldr	r3, [pc, #652]	; (800c5fc <_svfprintf_r+0xd24>)
 800c370:	9316      	str	r3, [sp, #88]	; 0x58
 800c372:	2500      	movs	r5, #0
 800c374:	f04b 0b02 	orr.w	fp, fp, #2
 800c378:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800c37c:	2302      	movs	r3, #2
 800c37e:	9206      	str	r2, [sp, #24]
 800c380:	e7c5      	b.n	800c30e <_svfprintf_r+0xa36>
 800c382:	4633      	mov	r3, r6
 800c384:	2500      	movs	r5, #0
 800c386:	f853 9b04 	ldr.w	r9, [r3], #4
 800c38a:	9307      	str	r3, [sp, #28]
 800c38c:	9b04      	ldr	r3, [sp, #16]
 800c38e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800c392:	1c58      	adds	r0, r3, #1
 800c394:	d010      	beq.n	800c3b8 <_svfprintf_r+0xae0>
 800c396:	461a      	mov	r2, r3
 800c398:	4629      	mov	r1, r5
 800c39a:	4648      	mov	r0, r9
 800c39c:	f7f3 ff38 	bl	8000210 <memchr>
 800c3a0:	9003      	str	r0, [sp, #12]
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	f000 80d4 	beq.w	800c550 <_svfprintf_r+0xc78>
 800c3a8:	eba0 0309 	sub.w	r3, r0, r9
 800c3ac:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800c3b0:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800c3b4:	462e      	mov	r6, r5
 800c3b6:	e5bb      	b.n	800bf30 <_svfprintf_r+0x658>
 800c3b8:	4648      	mov	r0, r9
 800c3ba:	f7f3 ff1b 	bl	80001f4 <strlen>
 800c3be:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800c3c2:	e45f      	b.n	800bc84 <_svfprintf_r+0x3ac>
 800c3c4:	f04b 0b10 	orr.w	fp, fp, #16
 800c3c8:	f01b 0320 	ands.w	r3, fp, #32
 800c3cc:	d009      	beq.n	800c3e2 <_svfprintf_r+0xb0a>
 800c3ce:	1df3      	adds	r3, r6, #7
 800c3d0:	f023 0307 	bic.w	r3, r3, #7
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	685d      	ldr	r5, [r3, #4]
 800c3d8:	f852 6b08 	ldr.w	r6, [r2], #8
 800c3dc:	9207      	str	r2, [sp, #28]
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e795      	b.n	800c30e <_svfprintf_r+0xa36>
 800c3e2:	4632      	mov	r2, r6
 800c3e4:	f01b 0510 	ands.w	r5, fp, #16
 800c3e8:	f852 6b04 	ldr.w	r6, [r2], #4
 800c3ec:	9207      	str	r2, [sp, #28]
 800c3ee:	d001      	beq.n	800c3f4 <_svfprintf_r+0xb1c>
 800c3f0:	461d      	mov	r5, r3
 800c3f2:	e7f4      	b.n	800c3de <_svfprintf_r+0xb06>
 800c3f4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c3f8:	d001      	beq.n	800c3fe <_svfprintf_r+0xb26>
 800c3fa:	b2b6      	uxth	r6, r6
 800c3fc:	e7ef      	b.n	800c3de <_svfprintf_r+0xb06>
 800c3fe:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c402:	d0ec      	beq.n	800c3de <_svfprintf_r+0xb06>
 800c404:	b2f6      	uxtb	r6, r6
 800c406:	e7f3      	b.n	800c3f0 <_svfprintf_r+0xb18>
 800c408:	4b7d      	ldr	r3, [pc, #500]	; (800c600 <_svfprintf_r+0xd28>)
 800c40a:	9316      	str	r3, [sp, #88]	; 0x58
 800c40c:	f01b 0320 	ands.w	r3, fp, #32
 800c410:	d01b      	beq.n	800c44a <_svfprintf_r+0xb72>
 800c412:	1df3      	adds	r3, r6, #7
 800c414:	f023 0307 	bic.w	r3, r3, #7
 800c418:	461a      	mov	r2, r3
 800c41a:	685d      	ldr	r5, [r3, #4]
 800c41c:	f852 6b08 	ldr.w	r6, [r2], #8
 800c420:	9207      	str	r2, [sp, #28]
 800c422:	f01b 0f01 	tst.w	fp, #1
 800c426:	d00a      	beq.n	800c43e <_svfprintf_r+0xb66>
 800c428:	ea56 0305 	orrs.w	r3, r6, r5
 800c42c:	d007      	beq.n	800c43e <_svfprintf_r+0xb66>
 800c42e:	2330      	movs	r3, #48	; 0x30
 800c430:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800c434:	9b06      	ldr	r3, [sp, #24]
 800c436:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800c43a:	f04b 0b02 	orr.w	fp, fp, #2
 800c43e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800c442:	2302      	movs	r3, #2
 800c444:	e763      	b.n	800c30e <_svfprintf_r+0xa36>
 800c446:	4b6d      	ldr	r3, [pc, #436]	; (800c5fc <_svfprintf_r+0xd24>)
 800c448:	e7df      	b.n	800c40a <_svfprintf_r+0xb32>
 800c44a:	4632      	mov	r2, r6
 800c44c:	f01b 0510 	ands.w	r5, fp, #16
 800c450:	f852 6b04 	ldr.w	r6, [r2], #4
 800c454:	9207      	str	r2, [sp, #28]
 800c456:	d001      	beq.n	800c45c <_svfprintf_r+0xb84>
 800c458:	461d      	mov	r5, r3
 800c45a:	e7e2      	b.n	800c422 <_svfprintf_r+0xb4a>
 800c45c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c460:	d001      	beq.n	800c466 <_svfprintf_r+0xb8e>
 800c462:	b2b6      	uxth	r6, r6
 800c464:	e7dd      	b.n	800c422 <_svfprintf_r+0xb4a>
 800c466:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c46a:	d0da      	beq.n	800c422 <_svfprintf_r+0xb4a>
 800c46c:	b2f6      	uxtb	r6, r6
 800c46e:	e7f3      	b.n	800c458 <_svfprintf_r+0xb80>
 800c470:	2e0a      	cmp	r6, #10
 800c472:	f175 0300 	sbcs.w	r3, r5, #0
 800c476:	d205      	bcs.n	800c484 <_svfprintf_r+0xbac>
 800c478:	3630      	adds	r6, #48	; 0x30
 800c47a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800c47e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 800c482:	e3fb      	b.n	800cc7c <_svfprintf_r+0x13a4>
 800c484:	2300      	movs	r3, #0
 800c486:	9305      	str	r3, [sp, #20]
 800c488:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800c48c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800c490:	9303      	str	r3, [sp, #12]
 800c492:	220a      	movs	r2, #10
 800c494:	2300      	movs	r3, #0
 800c496:	4630      	mov	r0, r6
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f4 fc0d 	bl	8000cb8 <__aeabi_uldivmod>
 800c49e:	9b05      	ldr	r3, [sp, #20]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	9305      	str	r3, [sp, #20]
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	3230      	adds	r2, #48	; 0x30
 800c4a8:	f10b 39ff 	add.w	r9, fp, #4294967295
 800c4ac:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800c4b0:	b1d3      	cbz	r3, 800c4e8 <_svfprintf_r+0xc10>
 800c4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b4:	9a05      	ldr	r2, [sp, #20]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d115      	bne.n	800c4e8 <_svfprintf_r+0xc10>
 800c4bc:	2aff      	cmp	r2, #255	; 0xff
 800c4be:	d013      	beq.n	800c4e8 <_svfprintf_r+0xc10>
 800c4c0:	2e0a      	cmp	r6, #10
 800c4c2:	f175 0300 	sbcs.w	r3, r5, #0
 800c4c6:	d30f      	bcc.n	800c4e8 <_svfprintf_r+0xc10>
 800c4c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4ca:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c4cc:	eba9 0903 	sub.w	r9, r9, r3
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4648      	mov	r0, r9
 800c4d4:	f002 fcdc 	bl	800ee90 <strncpy>
 800c4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4da:	785b      	ldrb	r3, [r3, #1]
 800c4dc:	b11b      	cbz	r3, 800c4e6 <_svfprintf_r+0xc0e>
 800c4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9305      	str	r3, [sp, #20]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	220a      	movs	r2, #10
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f4 fbe2 	bl	8000cb8 <__aeabi_uldivmod>
 800c4f4:	2e0a      	cmp	r6, #10
 800c4f6:	f175 0300 	sbcs.w	r3, r5, #0
 800c4fa:	f0c0 83bf 	bcc.w	800cc7c <_svfprintf_r+0x13a4>
 800c4fe:	4606      	mov	r6, r0
 800c500:	460d      	mov	r5, r1
 800c502:	46cb      	mov	fp, r9
 800c504:	e7c5      	b.n	800c492 <_svfprintf_r+0xbba>
 800c506:	f006 030f 	and.w	r3, r6, #15
 800c50a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c50c:	0936      	lsrs	r6, r6, #4
 800c50e:	5cd3      	ldrb	r3, [r2, r3]
 800c510:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c514:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 800c518:	092d      	lsrs	r5, r5, #4
 800c51a:	ea56 0305 	orrs.w	r3, r6, r5
 800c51e:	d1f2      	bne.n	800c506 <_svfprintf_r+0xc2e>
 800c520:	e3ac      	b.n	800cc7c <_svfprintf_r+0x13a4>
 800c522:	b933      	cbnz	r3, 800c532 <_svfprintf_r+0xc5a>
 800c524:	f01b 0f01 	tst.w	fp, #1
 800c528:	d003      	beq.n	800c532 <_svfprintf_r+0xc5a>
 800c52a:	2330      	movs	r3, #48	; 0x30
 800c52c:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800c530:	e7a5      	b.n	800c47e <_svfprintf_r+0xba6>
 800c532:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800c536:	e3a1      	b.n	800cc7c <_svfprintf_r+0x13a4>
 800c538:	9b06      	ldr	r3, [sp, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8370 	beq.w	800cc20 <_svfprintf_r+0x1348>
 800c540:	2000      	movs	r0, #0
 800c542:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800c546:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800c54a:	9607      	str	r6, [sp, #28]
 800c54c:	f7ff bb29 	b.w	800bba2 <_svfprintf_r+0x2ca>
 800c550:	9e03      	ldr	r6, [sp, #12]
 800c552:	f7ff bb98 	b.w	800bc86 <_svfprintf_r+0x3ae>
 800c556:	2010      	movs	r0, #16
 800c558:	4402      	add	r2, r0
 800c55a:	2b07      	cmp	r3, #7
 800c55c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c560:	6060      	str	r0, [r4, #4]
 800c562:	dd08      	ble.n	800c576 <_svfprintf_r+0xc9e>
 800c564:	aa22      	add	r2, sp, #136	; 0x88
 800c566:	4641      	mov	r1, r8
 800c568:	4650      	mov	r0, sl
 800c56a:	f002 fca4 	bl	800eeb6 <__ssprint_r>
 800c56e:	2800      	cmp	r0, #0
 800c570:	f040 8334 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c574:	a925      	add	r1, sp, #148	; 0x94
 800c576:	3f10      	subs	r7, #16
 800c578:	460c      	mov	r4, r1
 800c57a:	e4f4      	b.n	800bf66 <_svfprintf_r+0x68e>
 800c57c:	460c      	mov	r4, r1
 800c57e:	e50d      	b.n	800bf9c <_svfprintf_r+0x6c4>
 800c580:	aa22      	add	r2, sp, #136	; 0x88
 800c582:	4641      	mov	r1, r8
 800c584:	4650      	mov	r0, sl
 800c586:	f002 fc96 	bl	800eeb6 <__ssprint_r>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f040 8326 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c590:	ac25      	add	r4, sp, #148	; 0x94
 800c592:	e515      	b.n	800bfc0 <_svfprintf_r+0x6e8>
 800c594:	aa22      	add	r2, sp, #136	; 0x88
 800c596:	4641      	mov	r1, r8
 800c598:	4650      	mov	r0, sl
 800c59a:	f002 fc8c 	bl	800eeb6 <__ssprint_r>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f040 831c 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c5a4:	ac25      	add	r4, sp, #148	; 0x94
 800c5a6:	e51b      	b.n	800bfe0 <_svfprintf_r+0x708>
 800c5a8:	2010      	movs	r0, #16
 800c5aa:	4402      	add	r2, r0
 800c5ac:	2b07      	cmp	r3, #7
 800c5ae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c5b2:	6060      	str	r0, [r4, #4]
 800c5b4:	dd08      	ble.n	800c5c8 <_svfprintf_r+0xcf0>
 800c5b6:	aa22      	add	r2, sp, #136	; 0x88
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	f002 fc7b 	bl	800eeb6 <__ssprint_r>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	f040 830b 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c5c6:	a925      	add	r1, sp, #148	; 0x94
 800c5c8:	3f10      	subs	r7, #16
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	e510      	b.n	800bff0 <_svfprintf_r+0x718>
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	e529      	b.n	800c026 <_svfprintf_r+0x74e>
 800c5d2:	2010      	movs	r0, #16
 800c5d4:	4402      	add	r2, r0
 800c5d6:	2b07      	cmp	r3, #7
 800c5d8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c5dc:	6060      	str	r0, [r4, #4]
 800c5de:	dd08      	ble.n	800c5f2 <_svfprintf_r+0xd1a>
 800c5e0:	aa22      	add	r2, sp, #136	; 0x88
 800c5e2:	4641      	mov	r1, r8
 800c5e4:	4650      	mov	r0, sl
 800c5e6:	f002 fc66 	bl	800eeb6 <__ssprint_r>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	f040 82f6 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c5f0:	a925      	add	r1, sp, #148	; 0x94
 800c5f2:	3e10      	subs	r6, #16
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	e529      	b.n	800c04c <_svfprintf_r+0x774>
 800c5f8:	460c      	mov	r4, r1
 800c5fa:	e541      	b.n	800c080 <_svfprintf_r+0x7a8>
 800c5fc:	08010858 	.word	0x08010858
 800c600:	08010869 	.word	0x08010869
 800c604:	9b06      	ldr	r3, [sp, #24]
 800c606:	2b65      	cmp	r3, #101	; 0x65
 800c608:	f340 8230 	ble.w	800ca6c <_svfprintf_r+0x1194>
 800c60c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c610:	2200      	movs	r2, #0
 800c612:	2300      	movs	r3, #0
 800c614:	f7f4 fa70 	bl	8000af8 <__aeabi_dcmpeq>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d068      	beq.n	800c6ee <_svfprintf_r+0xe16>
 800c61c:	4b6d      	ldr	r3, [pc, #436]	; (800c7d4 <_svfprintf_r+0xefc>)
 800c61e:	6023      	str	r3, [r4, #0]
 800c620:	2301      	movs	r3, #1
 800c622:	441e      	add	r6, r3
 800c624:	6063      	str	r3, [r4, #4]
 800c626:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c628:	9624      	str	r6, [sp, #144]	; 0x90
 800c62a:	3301      	adds	r3, #1
 800c62c:	2b07      	cmp	r3, #7
 800c62e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c630:	dc37      	bgt.n	800c6a2 <_svfprintf_r+0xdca>
 800c632:	3408      	adds	r4, #8
 800c634:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c636:	9a05      	ldr	r2, [sp, #20]
 800c638:	4293      	cmp	r3, r2
 800c63a:	db03      	blt.n	800c644 <_svfprintf_r+0xd6c>
 800c63c:	f01b 0f01 	tst.w	fp, #1
 800c640:	f43f ad30 	beq.w	800c0a4 <_svfprintf_r+0x7cc>
 800c644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c646:	6023      	str	r3, [r4, #0]
 800c648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c64a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c64c:	6063      	str	r3, [r4, #4]
 800c64e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c650:	4413      	add	r3, r2
 800c652:	9324      	str	r3, [sp, #144]	; 0x90
 800c654:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c656:	3301      	adds	r3, #1
 800c658:	2b07      	cmp	r3, #7
 800c65a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c65c:	dc2b      	bgt.n	800c6b6 <_svfprintf_r+0xdde>
 800c65e:	3408      	adds	r4, #8
 800c660:	9b05      	ldr	r3, [sp, #20]
 800c662:	1e5d      	subs	r5, r3, #1
 800c664:	2d00      	cmp	r5, #0
 800c666:	f77f ad1d 	ble.w	800c0a4 <_svfprintf_r+0x7cc>
 800c66a:	4e5b      	ldr	r6, [pc, #364]	; (800c7d8 <_svfprintf_r+0xf00>)
 800c66c:	2710      	movs	r7, #16
 800c66e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c672:	2d10      	cmp	r5, #16
 800c674:	f103 0301 	add.w	r3, r3, #1
 800c678:	f104 0108 	add.w	r1, r4, #8
 800c67c:	6026      	str	r6, [r4, #0]
 800c67e:	dc24      	bgt.n	800c6ca <_svfprintf_r+0xdf2>
 800c680:	6065      	str	r5, [r4, #4]
 800c682:	2b07      	cmp	r3, #7
 800c684:	4415      	add	r5, r2
 800c686:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c68a:	f340 8286 	ble.w	800cb9a <_svfprintf_r+0x12c2>
 800c68e:	aa22      	add	r2, sp, #136	; 0x88
 800c690:	4641      	mov	r1, r8
 800c692:	4650      	mov	r0, sl
 800c694:	f002 fc0f 	bl	800eeb6 <__ssprint_r>
 800c698:	2800      	cmp	r0, #0
 800c69a:	f040 829f 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c69e:	ac25      	add	r4, sp, #148	; 0x94
 800c6a0:	e500      	b.n	800c0a4 <_svfprintf_r+0x7cc>
 800c6a2:	aa22      	add	r2, sp, #136	; 0x88
 800c6a4:	4641      	mov	r1, r8
 800c6a6:	4650      	mov	r0, sl
 800c6a8:	f002 fc05 	bl	800eeb6 <__ssprint_r>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f040 8295 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c6b2:	ac25      	add	r4, sp, #148	; 0x94
 800c6b4:	e7be      	b.n	800c634 <_svfprintf_r+0xd5c>
 800c6b6:	aa22      	add	r2, sp, #136	; 0x88
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	f002 fbfb 	bl	800eeb6 <__ssprint_r>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	f040 828b 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c6c6:	ac25      	add	r4, sp, #148	; 0x94
 800c6c8:	e7ca      	b.n	800c660 <_svfprintf_r+0xd88>
 800c6ca:	3210      	adds	r2, #16
 800c6cc:	2b07      	cmp	r3, #7
 800c6ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c6d2:	6067      	str	r7, [r4, #4]
 800c6d4:	dd08      	ble.n	800c6e8 <_svfprintf_r+0xe10>
 800c6d6:	aa22      	add	r2, sp, #136	; 0x88
 800c6d8:	4641      	mov	r1, r8
 800c6da:	4650      	mov	r0, sl
 800c6dc:	f002 fbeb 	bl	800eeb6 <__ssprint_r>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	f040 827b 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c6e6:	a925      	add	r1, sp, #148	; 0x94
 800c6e8:	3d10      	subs	r5, #16
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	e7bf      	b.n	800c66e <_svfprintf_r+0xd96>
 800c6ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dc73      	bgt.n	800c7dc <_svfprintf_r+0xf04>
 800c6f4:	4b37      	ldr	r3, [pc, #220]	; (800c7d4 <_svfprintf_r+0xefc>)
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	441e      	add	r6, r3
 800c6fc:	6063      	str	r3, [r4, #4]
 800c6fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c700:	9624      	str	r6, [sp, #144]	; 0x90
 800c702:	3301      	adds	r3, #1
 800c704:	2b07      	cmp	r3, #7
 800c706:	9323      	str	r3, [sp, #140]	; 0x8c
 800c708:	dc3d      	bgt.n	800c786 <_svfprintf_r+0xeae>
 800c70a:	3408      	adds	r4, #8
 800c70c:	9905      	ldr	r1, [sp, #20]
 800c70e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c710:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c712:	430a      	orrs	r2, r1
 800c714:	f00b 0101 	and.w	r1, fp, #1
 800c718:	430a      	orrs	r2, r1
 800c71a:	f43f acc3 	beq.w	800c0a4 <_svfprintf_r+0x7cc>
 800c71e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c720:	6022      	str	r2, [r4, #0]
 800c722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c724:	6062      	str	r2, [r4, #4]
 800c726:	4413      	add	r3, r2
 800c728:	9324      	str	r3, [sp, #144]	; 0x90
 800c72a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c72c:	3301      	adds	r3, #1
 800c72e:	2b07      	cmp	r3, #7
 800c730:	9323      	str	r3, [sp, #140]	; 0x8c
 800c732:	dc32      	bgt.n	800c79a <_svfprintf_r+0xec2>
 800c734:	3408      	adds	r4, #8
 800c736:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c738:	2d00      	cmp	r5, #0
 800c73a:	da1b      	bge.n	800c774 <_svfprintf_r+0xe9c>
 800c73c:	4e26      	ldr	r6, [pc, #152]	; (800c7d8 <_svfprintf_r+0xf00>)
 800c73e:	426d      	negs	r5, r5
 800c740:	4623      	mov	r3, r4
 800c742:	2710      	movs	r7, #16
 800c744:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800c748:	2d10      	cmp	r5, #16
 800c74a:	f102 0201 	add.w	r2, r2, #1
 800c74e:	f104 0408 	add.w	r4, r4, #8
 800c752:	601e      	str	r6, [r3, #0]
 800c754:	dc2b      	bgt.n	800c7ae <_svfprintf_r+0xed6>
 800c756:	605d      	str	r5, [r3, #4]
 800c758:	2a07      	cmp	r2, #7
 800c75a:	440d      	add	r5, r1
 800c75c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800c760:	dd08      	ble.n	800c774 <_svfprintf_r+0xe9c>
 800c762:	aa22      	add	r2, sp, #136	; 0x88
 800c764:	4641      	mov	r1, r8
 800c766:	4650      	mov	r0, sl
 800c768:	f002 fba5 	bl	800eeb6 <__ssprint_r>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	f040 8235 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c772:	ac25      	add	r4, sp, #148	; 0x94
 800c774:	9b05      	ldr	r3, [sp, #20]
 800c776:	9a05      	ldr	r2, [sp, #20]
 800c778:	6063      	str	r3, [r4, #4]
 800c77a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c77c:	f8c4 9000 	str.w	r9, [r4]
 800c780:	4413      	add	r3, r2
 800c782:	9324      	str	r3, [sp, #144]	; 0x90
 800c784:	e487      	b.n	800c096 <_svfprintf_r+0x7be>
 800c786:	aa22      	add	r2, sp, #136	; 0x88
 800c788:	4641      	mov	r1, r8
 800c78a:	4650      	mov	r0, sl
 800c78c:	f002 fb93 	bl	800eeb6 <__ssprint_r>
 800c790:	2800      	cmp	r0, #0
 800c792:	f040 8223 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c796:	ac25      	add	r4, sp, #148	; 0x94
 800c798:	e7b8      	b.n	800c70c <_svfprintf_r+0xe34>
 800c79a:	aa22      	add	r2, sp, #136	; 0x88
 800c79c:	4641      	mov	r1, r8
 800c79e:	4650      	mov	r0, sl
 800c7a0:	f002 fb89 	bl	800eeb6 <__ssprint_r>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	f040 8219 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c7aa:	ac25      	add	r4, sp, #148	; 0x94
 800c7ac:	e7c3      	b.n	800c736 <_svfprintf_r+0xe5e>
 800c7ae:	3110      	adds	r1, #16
 800c7b0:	2a07      	cmp	r2, #7
 800c7b2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800c7b6:	605f      	str	r7, [r3, #4]
 800c7b8:	dd08      	ble.n	800c7cc <_svfprintf_r+0xef4>
 800c7ba:	aa22      	add	r2, sp, #136	; 0x88
 800c7bc:	4641      	mov	r1, r8
 800c7be:	4650      	mov	r0, sl
 800c7c0:	f002 fb79 	bl	800eeb6 <__ssprint_r>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f040 8209 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c7ca:	ac25      	add	r4, sp, #148	; 0x94
 800c7cc:	3d10      	subs	r5, #16
 800c7ce:	4623      	mov	r3, r4
 800c7d0:	e7b8      	b.n	800c744 <_svfprintf_r+0xe6c>
 800c7d2:	bf00      	nop
 800c7d4:	0801087a 	.word	0x0801087a
 800c7d8:	0801088c 	.word	0x0801088c
 800c7dc:	9f05      	ldr	r7, [sp, #20]
 800c7de:	42af      	cmp	r7, r5
 800c7e0:	bfa8      	it	ge
 800c7e2:	462f      	movge	r7, r5
 800c7e4:	2f00      	cmp	r7, #0
 800c7e6:	dd0a      	ble.n	800c7fe <_svfprintf_r+0xf26>
 800c7e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	443e      	add	r6, r7
 800c7ee:	2b07      	cmp	r3, #7
 800c7f0:	e9c4 9700 	strd	r9, r7, [r4]
 800c7f4:	9624      	str	r6, [sp, #144]	; 0x90
 800c7f6:	9323      	str	r3, [sp, #140]	; 0x8c
 800c7f8:	f300 8085 	bgt.w	800c906 <_svfprintf_r+0x102e>
 800c7fc:	3408      	adds	r4, #8
 800c7fe:	2f00      	cmp	r7, #0
 800c800:	bfac      	ite	ge
 800c802:	1bee      	subge	r6, r5, r7
 800c804:	462e      	movlt	r6, r5
 800c806:	2e00      	cmp	r6, #0
 800c808:	dd19      	ble.n	800c83e <_svfprintf_r+0xf66>
 800c80a:	4f97      	ldr	r7, [pc, #604]	; (800ca68 <_svfprintf_r+0x1190>)
 800c80c:	6027      	str	r7, [r4, #0]
 800c80e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c812:	2e10      	cmp	r6, #16
 800c814:	f103 0301 	add.w	r3, r3, #1
 800c818:	f104 0108 	add.w	r1, r4, #8
 800c81c:	dc7d      	bgt.n	800c91a <_svfprintf_r+0x1042>
 800c81e:	6066      	str	r6, [r4, #4]
 800c820:	2b07      	cmp	r3, #7
 800c822:	4416      	add	r6, r2
 800c824:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c828:	f340 808a 	ble.w	800c940 <_svfprintf_r+0x1068>
 800c82c:	aa22      	add	r2, sp, #136	; 0x88
 800c82e:	4641      	mov	r1, r8
 800c830:	4650      	mov	r0, sl
 800c832:	f002 fb40 	bl	800eeb6 <__ssprint_r>
 800c836:	2800      	cmp	r0, #0
 800c838:	f040 81d0 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c83c:	ac25      	add	r4, sp, #148	; 0x94
 800c83e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800c842:	444d      	add	r5, r9
 800c844:	d00a      	beq.n	800c85c <_svfprintf_r+0xf84>
 800c846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d17b      	bne.n	800c944 <_svfprintf_r+0x106c>
 800c84c:	9b08      	ldr	r3, [sp, #32]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d17b      	bne.n	800c94a <_svfprintf_r+0x1072>
 800c852:	9b05      	ldr	r3, [sp, #20]
 800c854:	444b      	add	r3, r9
 800c856:	429d      	cmp	r5, r3
 800c858:	bf28      	it	cs
 800c85a:	461d      	movcs	r5, r3
 800c85c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c85e:	9a05      	ldr	r2, [sp, #20]
 800c860:	4293      	cmp	r3, r2
 800c862:	db02      	blt.n	800c86a <_svfprintf_r+0xf92>
 800c864:	f01b 0f01 	tst.w	fp, #1
 800c868:	d00e      	beq.n	800c888 <_svfprintf_r+0xfb0>
 800c86a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c872:	6063      	str	r3, [r4, #4]
 800c874:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c876:	4413      	add	r3, r2
 800c878:	9324      	str	r3, [sp, #144]	; 0x90
 800c87a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c87c:	3301      	adds	r3, #1
 800c87e:	2b07      	cmp	r3, #7
 800c880:	9323      	str	r3, [sp, #140]	; 0x8c
 800c882:	f300 80dd 	bgt.w	800ca40 <_svfprintf_r+0x1168>
 800c886:	3408      	adds	r4, #8
 800c888:	9b05      	ldr	r3, [sp, #20]
 800c88a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c88c:	eb09 0203 	add.w	r2, r9, r3
 800c890:	1b9e      	subs	r6, r3, r6
 800c892:	1b52      	subs	r2, r2, r5
 800c894:	4296      	cmp	r6, r2
 800c896:	bfa8      	it	ge
 800c898:	4616      	movge	r6, r2
 800c89a:	2e00      	cmp	r6, #0
 800c89c:	dd0b      	ble.n	800c8b6 <_svfprintf_r+0xfde>
 800c89e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c8a0:	4433      	add	r3, r6
 800c8a2:	9324      	str	r3, [sp, #144]	; 0x90
 800c8a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	2b07      	cmp	r3, #7
 800c8aa:	e9c4 5600 	strd	r5, r6, [r4]
 800c8ae:	9323      	str	r3, [sp, #140]	; 0x8c
 800c8b0:	f300 80d0 	bgt.w	800ca54 <_svfprintf_r+0x117c>
 800c8b4:	3408      	adds	r4, #8
 800c8b6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c8b8:	9b05      	ldr	r3, [sp, #20]
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	eba3 0505 	sub.w	r5, r3, r5
 800c8c0:	bfa8      	it	ge
 800c8c2:	1bad      	subge	r5, r5, r6
 800c8c4:	2d00      	cmp	r5, #0
 800c8c6:	f77f abed 	ble.w	800c0a4 <_svfprintf_r+0x7cc>
 800c8ca:	4e67      	ldr	r6, [pc, #412]	; (800ca68 <_svfprintf_r+0x1190>)
 800c8cc:	2710      	movs	r7, #16
 800c8ce:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c8d2:	2d10      	cmp	r5, #16
 800c8d4:	f103 0301 	add.w	r3, r3, #1
 800c8d8:	f104 0108 	add.w	r1, r4, #8
 800c8dc:	6026      	str	r6, [r4, #0]
 800c8de:	f77f aecf 	ble.w	800c680 <_svfprintf_r+0xda8>
 800c8e2:	3210      	adds	r2, #16
 800c8e4:	2b07      	cmp	r3, #7
 800c8e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c8ea:	6067      	str	r7, [r4, #4]
 800c8ec:	dd08      	ble.n	800c900 <_svfprintf_r+0x1028>
 800c8ee:	aa22      	add	r2, sp, #136	; 0x88
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4650      	mov	r0, sl
 800c8f4:	f002 fadf 	bl	800eeb6 <__ssprint_r>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	f040 816f 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c8fe:	a925      	add	r1, sp, #148	; 0x94
 800c900:	3d10      	subs	r5, #16
 800c902:	460c      	mov	r4, r1
 800c904:	e7e3      	b.n	800c8ce <_svfprintf_r+0xff6>
 800c906:	aa22      	add	r2, sp, #136	; 0x88
 800c908:	4641      	mov	r1, r8
 800c90a:	4650      	mov	r0, sl
 800c90c:	f002 fad3 	bl	800eeb6 <__ssprint_r>
 800c910:	2800      	cmp	r0, #0
 800c912:	f040 8163 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c916:	ac25      	add	r4, sp, #148	; 0x94
 800c918:	e771      	b.n	800c7fe <_svfprintf_r+0xf26>
 800c91a:	2010      	movs	r0, #16
 800c91c:	4402      	add	r2, r0
 800c91e:	2b07      	cmp	r3, #7
 800c920:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c924:	6060      	str	r0, [r4, #4]
 800c926:	dd08      	ble.n	800c93a <_svfprintf_r+0x1062>
 800c928:	aa22      	add	r2, sp, #136	; 0x88
 800c92a:	4641      	mov	r1, r8
 800c92c:	4650      	mov	r0, sl
 800c92e:	f002 fac2 	bl	800eeb6 <__ssprint_r>
 800c932:	2800      	cmp	r0, #0
 800c934:	f040 8152 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c938:	a925      	add	r1, sp, #148	; 0x94
 800c93a:	3e10      	subs	r6, #16
 800c93c:	460c      	mov	r4, r1
 800c93e:	e765      	b.n	800c80c <_svfprintf_r+0xf34>
 800c940:	460c      	mov	r4, r1
 800c942:	e77c      	b.n	800c83e <_svfprintf_r+0xf66>
 800c944:	9b08      	ldr	r3, [sp, #32]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d04a      	beq.n	800c9e0 <_svfprintf_r+0x1108>
 800c94a:	9b08      	ldr	r3, [sp, #32]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	9308      	str	r3, [sp, #32]
 800c950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c958:	6063      	str	r3, [r4, #4]
 800c95a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c95c:	4413      	add	r3, r2
 800c95e:	9324      	str	r3, [sp, #144]	; 0x90
 800c960:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c962:	3301      	adds	r3, #1
 800c964:	2b07      	cmp	r3, #7
 800c966:	9323      	str	r3, [sp, #140]	; 0x8c
 800c968:	dc41      	bgt.n	800c9ee <_svfprintf_r+0x1116>
 800c96a:	3408      	adds	r4, #8
 800c96c:	9b05      	ldr	r3, [sp, #20]
 800c96e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c970:	eb09 0703 	add.w	r7, r9, r3
 800c974:	1b7b      	subs	r3, r7, r5
 800c976:	7817      	ldrb	r7, [r2, #0]
 800c978:	429f      	cmp	r7, r3
 800c97a:	bfa8      	it	ge
 800c97c:	461f      	movge	r7, r3
 800c97e:	2f00      	cmp	r7, #0
 800c980:	dd0a      	ble.n	800c998 <_svfprintf_r+0x10c0>
 800c982:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c984:	443b      	add	r3, r7
 800c986:	9324      	str	r3, [sp, #144]	; 0x90
 800c988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c98a:	3301      	adds	r3, #1
 800c98c:	2b07      	cmp	r3, #7
 800c98e:	e9c4 5700 	strd	r5, r7, [r4]
 800c992:	9323      	str	r3, [sp, #140]	; 0x8c
 800c994:	dc35      	bgt.n	800ca02 <_svfprintf_r+0x112a>
 800c996:	3408      	adds	r4, #8
 800c998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c99a:	781e      	ldrb	r6, [r3, #0]
 800c99c:	2f00      	cmp	r7, #0
 800c99e:	bfa8      	it	ge
 800c9a0:	1bf6      	subge	r6, r6, r7
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	dd18      	ble.n	800c9d8 <_svfprintf_r+0x1100>
 800c9a6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c9aa:	482f      	ldr	r0, [pc, #188]	; (800ca68 <_svfprintf_r+0x1190>)
 800c9ac:	6020      	str	r0, [r4, #0]
 800c9ae:	2e10      	cmp	r6, #16
 800c9b0:	f103 0301 	add.w	r3, r3, #1
 800c9b4:	f104 0108 	add.w	r1, r4, #8
 800c9b8:	dc2d      	bgt.n	800ca16 <_svfprintf_r+0x113e>
 800c9ba:	4432      	add	r2, r6
 800c9bc:	2b07      	cmp	r3, #7
 800c9be:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c9c2:	6066      	str	r6, [r4, #4]
 800c9c4:	dd3a      	ble.n	800ca3c <_svfprintf_r+0x1164>
 800c9c6:	aa22      	add	r2, sp, #136	; 0x88
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	4650      	mov	r0, sl
 800c9cc:	f002 fa73 	bl	800eeb6 <__ssprint_r>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	f040 8103 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c9d6:	ac25      	add	r4, sp, #148	; 0x94
 800c9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	441d      	add	r5, r3
 800c9de:	e732      	b.n	800c846 <_svfprintf_r+0xf6e>
 800c9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ec:	e7b0      	b.n	800c950 <_svfprintf_r+0x1078>
 800c9ee:	aa22      	add	r2, sp, #136	; 0x88
 800c9f0:	4641      	mov	r1, r8
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	f002 fa5f 	bl	800eeb6 <__ssprint_r>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	f040 80ef 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800c9fe:	ac25      	add	r4, sp, #148	; 0x94
 800ca00:	e7b4      	b.n	800c96c <_svfprintf_r+0x1094>
 800ca02:	aa22      	add	r2, sp, #136	; 0x88
 800ca04:	4641      	mov	r1, r8
 800ca06:	4650      	mov	r0, sl
 800ca08:	f002 fa55 	bl	800eeb6 <__ssprint_r>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	f040 80e5 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800ca12:	ac25      	add	r4, sp, #148	; 0x94
 800ca14:	e7c0      	b.n	800c998 <_svfprintf_r+0x10c0>
 800ca16:	2010      	movs	r0, #16
 800ca18:	4402      	add	r2, r0
 800ca1a:	2b07      	cmp	r3, #7
 800ca1c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ca20:	6060      	str	r0, [r4, #4]
 800ca22:	dd08      	ble.n	800ca36 <_svfprintf_r+0x115e>
 800ca24:	aa22      	add	r2, sp, #136	; 0x88
 800ca26:	4641      	mov	r1, r8
 800ca28:	4650      	mov	r0, sl
 800ca2a:	f002 fa44 	bl	800eeb6 <__ssprint_r>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	f040 80d4 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800ca34:	a925      	add	r1, sp, #148	; 0x94
 800ca36:	3e10      	subs	r6, #16
 800ca38:	460c      	mov	r4, r1
 800ca3a:	e7b4      	b.n	800c9a6 <_svfprintf_r+0x10ce>
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	e7cb      	b.n	800c9d8 <_svfprintf_r+0x1100>
 800ca40:	aa22      	add	r2, sp, #136	; 0x88
 800ca42:	4641      	mov	r1, r8
 800ca44:	4650      	mov	r0, sl
 800ca46:	f002 fa36 	bl	800eeb6 <__ssprint_r>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f040 80c6 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800ca50:	ac25      	add	r4, sp, #148	; 0x94
 800ca52:	e719      	b.n	800c888 <_svfprintf_r+0xfb0>
 800ca54:	aa22      	add	r2, sp, #136	; 0x88
 800ca56:	4641      	mov	r1, r8
 800ca58:	4650      	mov	r0, sl
 800ca5a:	f002 fa2c 	bl	800eeb6 <__ssprint_r>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f040 80bc 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800ca64:	ac25      	add	r4, sp, #148	; 0x94
 800ca66:	e726      	b.n	800c8b6 <_svfprintf_r+0xfde>
 800ca68:	0801088c 	.word	0x0801088c
 800ca6c:	9a05      	ldr	r2, [sp, #20]
 800ca6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca70:	2a01      	cmp	r2, #1
 800ca72:	f106 0601 	add.w	r6, r6, #1
 800ca76:	f103 0301 	add.w	r3, r3, #1
 800ca7a:	f104 0508 	add.w	r5, r4, #8
 800ca7e:	dc02      	bgt.n	800ca86 <_svfprintf_r+0x11ae>
 800ca80:	f01b 0f01 	tst.w	fp, #1
 800ca84:	d07e      	beq.n	800cb84 <_svfprintf_r+0x12ac>
 800ca86:	2201      	movs	r2, #1
 800ca88:	2b07      	cmp	r3, #7
 800ca8a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ca8e:	f8c4 9000 	str.w	r9, [r4]
 800ca92:	6062      	str	r2, [r4, #4]
 800ca94:	dd08      	ble.n	800caa8 <_svfprintf_r+0x11d0>
 800ca96:	aa22      	add	r2, sp, #136	; 0x88
 800ca98:	4641      	mov	r1, r8
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	f002 fa0b 	bl	800eeb6 <__ssprint_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	f040 809b 	bne.w	800cbdc <_svfprintf_r+0x1304>
 800caa6:	ad25      	add	r5, sp, #148	; 0x94
 800caa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caaa:	602b      	str	r3, [r5, #0]
 800caac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cab0:	606b      	str	r3, [r5, #4]
 800cab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cab4:	4413      	add	r3, r2
 800cab6:	9324      	str	r3, [sp, #144]	; 0x90
 800cab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800caba:	3301      	adds	r3, #1
 800cabc:	2b07      	cmp	r3, #7
 800cabe:	9323      	str	r3, [sp, #140]	; 0x8c
 800cac0:	dc32      	bgt.n	800cb28 <_svfprintf_r+0x1250>
 800cac2:	3508      	adds	r5, #8
 800cac4:	9b05      	ldr	r3, [sp, #20]
 800cac6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800caca:	1e5c      	subs	r4, r3, #1
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	f7f4 f812 	bl	8000af8 <__aeabi_dcmpeq>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d130      	bne.n	800cb3a <_svfprintf_r+0x1262>
 800cad8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800cada:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cadc:	9a05      	ldr	r2, [sp, #20]
 800cade:	3101      	adds	r1, #1
 800cae0:	3b01      	subs	r3, #1
 800cae2:	f109 0001 	add.w	r0, r9, #1
 800cae6:	4413      	add	r3, r2
 800cae8:	2907      	cmp	r1, #7
 800caea:	e9c5 0400 	strd	r0, r4, [r5]
 800caee:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800caf2:	dd50      	ble.n	800cb96 <_svfprintf_r+0x12be>
 800caf4:	aa22      	add	r2, sp, #136	; 0x88
 800caf6:	4641      	mov	r1, r8
 800caf8:	4650      	mov	r0, sl
 800cafa:	f002 f9dc 	bl	800eeb6 <__ssprint_r>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d16c      	bne.n	800cbdc <_svfprintf_r+0x1304>
 800cb02:	ad25      	add	r5, sp, #148	; 0x94
 800cb04:	ab1e      	add	r3, sp, #120	; 0x78
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cb0c:	606b      	str	r3, [r5, #4]
 800cb0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cb10:	4413      	add	r3, r2
 800cb12:	9324      	str	r3, [sp, #144]	; 0x90
 800cb14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb16:	3301      	adds	r3, #1
 800cb18:	2b07      	cmp	r3, #7
 800cb1a:	9323      	str	r3, [sp, #140]	; 0x8c
 800cb1c:	f73f adb7 	bgt.w	800c68e <_svfprintf_r+0xdb6>
 800cb20:	f105 0408 	add.w	r4, r5, #8
 800cb24:	f7ff babe 	b.w	800c0a4 <_svfprintf_r+0x7cc>
 800cb28:	aa22      	add	r2, sp, #136	; 0x88
 800cb2a:	4641      	mov	r1, r8
 800cb2c:	4650      	mov	r0, sl
 800cb2e:	f002 f9c2 	bl	800eeb6 <__ssprint_r>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d152      	bne.n	800cbdc <_svfprintf_r+0x1304>
 800cb36:	ad25      	add	r5, sp, #148	; 0x94
 800cb38:	e7c4      	b.n	800cac4 <_svfprintf_r+0x11ec>
 800cb3a:	2c00      	cmp	r4, #0
 800cb3c:	dde2      	ble.n	800cb04 <_svfprintf_r+0x122c>
 800cb3e:	4e56      	ldr	r6, [pc, #344]	; (800cc98 <_svfprintf_r+0x13c0>)
 800cb40:	2710      	movs	r7, #16
 800cb42:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800cb46:	2c10      	cmp	r4, #16
 800cb48:	f103 0301 	add.w	r3, r3, #1
 800cb4c:	f105 0108 	add.w	r1, r5, #8
 800cb50:	602e      	str	r6, [r5, #0]
 800cb52:	dc07      	bgt.n	800cb64 <_svfprintf_r+0x128c>
 800cb54:	606c      	str	r4, [r5, #4]
 800cb56:	2b07      	cmp	r3, #7
 800cb58:	4414      	add	r4, r2
 800cb5a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800cb5e:	dcc9      	bgt.n	800caf4 <_svfprintf_r+0x121c>
 800cb60:	460d      	mov	r5, r1
 800cb62:	e7cf      	b.n	800cb04 <_svfprintf_r+0x122c>
 800cb64:	3210      	adds	r2, #16
 800cb66:	2b07      	cmp	r3, #7
 800cb68:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800cb6c:	606f      	str	r7, [r5, #4]
 800cb6e:	dd06      	ble.n	800cb7e <_svfprintf_r+0x12a6>
 800cb70:	aa22      	add	r2, sp, #136	; 0x88
 800cb72:	4641      	mov	r1, r8
 800cb74:	4650      	mov	r0, sl
 800cb76:	f002 f99e 	bl	800eeb6 <__ssprint_r>
 800cb7a:	bb78      	cbnz	r0, 800cbdc <_svfprintf_r+0x1304>
 800cb7c:	a925      	add	r1, sp, #148	; 0x94
 800cb7e:	3c10      	subs	r4, #16
 800cb80:	460d      	mov	r5, r1
 800cb82:	e7de      	b.n	800cb42 <_svfprintf_r+0x126a>
 800cb84:	2201      	movs	r2, #1
 800cb86:	2b07      	cmp	r3, #7
 800cb88:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800cb8c:	f8c4 9000 	str.w	r9, [r4]
 800cb90:	6062      	str	r2, [r4, #4]
 800cb92:	ddb7      	ble.n	800cb04 <_svfprintf_r+0x122c>
 800cb94:	e7ae      	b.n	800caf4 <_svfprintf_r+0x121c>
 800cb96:	3508      	adds	r5, #8
 800cb98:	e7b4      	b.n	800cb04 <_svfprintf_r+0x122c>
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	f7ff ba82 	b.w	800c0a4 <_svfprintf_r+0x7cc>
 800cba0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800cba4:	1a9d      	subs	r5, r3, r2
 800cba6:	2d00      	cmp	r5, #0
 800cba8:	f77f aa80 	ble.w	800c0ac <_svfprintf_r+0x7d4>
 800cbac:	4e3b      	ldr	r6, [pc, #236]	; (800cc9c <_svfprintf_r+0x13c4>)
 800cbae:	2710      	movs	r7, #16
 800cbb0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800cbb4:	2d10      	cmp	r5, #16
 800cbb6:	f103 0301 	add.w	r3, r3, #1
 800cbba:	6026      	str	r6, [r4, #0]
 800cbbc:	dc18      	bgt.n	800cbf0 <_svfprintf_r+0x1318>
 800cbbe:	6065      	str	r5, [r4, #4]
 800cbc0:	2b07      	cmp	r3, #7
 800cbc2:	4415      	add	r5, r2
 800cbc4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800cbc8:	f77f aa70 	ble.w	800c0ac <_svfprintf_r+0x7d4>
 800cbcc:	aa22      	add	r2, sp, #136	; 0x88
 800cbce:	4641      	mov	r1, r8
 800cbd0:	4650      	mov	r0, sl
 800cbd2:	f002 f970 	bl	800eeb6 <__ssprint_r>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f43f aa68 	beq.w	800c0ac <_svfprintf_r+0x7d4>
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f43f a887 	beq.w	800bcf2 <_svfprintf_r+0x41a>
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	f7fd f9d8 	bl	8009f9c <_free_r>
 800cbec:	f7ff b881 	b.w	800bcf2 <_svfprintf_r+0x41a>
 800cbf0:	3210      	adds	r2, #16
 800cbf2:	2b07      	cmp	r3, #7
 800cbf4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800cbf8:	6067      	str	r7, [r4, #4]
 800cbfa:	dc02      	bgt.n	800cc02 <_svfprintf_r+0x132a>
 800cbfc:	3408      	adds	r4, #8
 800cbfe:	3d10      	subs	r5, #16
 800cc00:	e7d6      	b.n	800cbb0 <_svfprintf_r+0x12d8>
 800cc02:	aa22      	add	r2, sp, #136	; 0x88
 800cc04:	4641      	mov	r1, r8
 800cc06:	4650      	mov	r0, sl
 800cc08:	f002 f955 	bl	800eeb6 <__ssprint_r>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d1e5      	bne.n	800cbdc <_svfprintf_r+0x1304>
 800cc10:	ac25      	add	r4, sp, #148	; 0x94
 800cc12:	e7f4      	b.n	800cbfe <_svfprintf_r+0x1326>
 800cc14:	9903      	ldr	r1, [sp, #12]
 800cc16:	4650      	mov	r0, sl
 800cc18:	f7fd f9c0 	bl	8009f9c <_free_r>
 800cc1c:	f7ff ba5e 	b.w	800c0dc <_svfprintf_r+0x804>
 800cc20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f43f a865 	beq.w	800bcf2 <_svfprintf_r+0x41a>
 800cc28:	aa22      	add	r2, sp, #136	; 0x88
 800cc2a:	4641      	mov	r1, r8
 800cc2c:	4650      	mov	r0, sl
 800cc2e:	f002 f942 	bl	800eeb6 <__ssprint_r>
 800cc32:	f7ff b85e 	b.w	800bcf2 <_svfprintf_r+0x41a>
 800cc36:	ea56 0205 	orrs.w	r2, r6, r5
 800cc3a:	465f      	mov	r7, fp
 800cc3c:	f43f ab78 	beq.w	800c330 <_svfprintf_r+0xa58>
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	f43f ac15 	beq.w	800c470 <_svfprintf_r+0xb98>
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800cc4c:	f43f ac5b 	beq.w	800c506 <_svfprintf_r+0xc2e>
 800cc50:	f006 0307 	and.w	r3, r6, #7
 800cc54:	08f6      	lsrs	r6, r6, #3
 800cc56:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 800cc5a:	08ed      	lsrs	r5, r5, #3
 800cc5c:	3330      	adds	r3, #48	; 0x30
 800cc5e:	ea56 0105 	orrs.w	r1, r6, r5
 800cc62:	464a      	mov	r2, r9
 800cc64:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800cc68:	d1f2      	bne.n	800cc50 <_svfprintf_r+0x1378>
 800cc6a:	07f9      	lsls	r1, r7, #31
 800cc6c:	d506      	bpl.n	800cc7c <_svfprintf_r+0x13a4>
 800cc6e:	2b30      	cmp	r3, #48	; 0x30
 800cc70:	d004      	beq.n	800cc7c <_svfprintf_r+0x13a4>
 800cc72:	2330      	movs	r3, #48	; 0x30
 800cc74:	f809 3c01 	strb.w	r3, [r9, #-1]
 800cc78:	f1a2 0902 	sub.w	r9, r2, #2
 800cc7c:	ab4e      	add	r3, sp, #312	; 0x138
 800cc7e:	eba3 0309 	sub.w	r3, r3, r9
 800cc82:	9e04      	ldr	r6, [sp, #16]
 800cc84:	9304      	str	r3, [sp, #16]
 800cc86:	2300      	movs	r3, #0
 800cc88:	46bb      	mov	fp, r7
 800cc8a:	9303      	str	r3, [sp, #12]
 800cc8c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800cc90:	461d      	mov	r5, r3
 800cc92:	f7ff b94d 	b.w	800bf30 <_svfprintf_r+0x658>
 800cc96:	bf00      	nop
 800cc98:	0801088c 	.word	0x0801088c
 800cc9c:	0801087c 	.word	0x0801087c

0800cca0 <sysconf>:
 800cca0:	2808      	cmp	r0, #8
 800cca2:	b508      	push	{r3, lr}
 800cca4:	d006      	beq.n	800ccb4 <sysconf+0x14>
 800cca6:	f7fc ffeb 	bl	8009c80 <__errno>
 800ccaa:	2316      	movs	r3, #22
 800ccac:	6003      	str	r3, [r0, #0]
 800ccae:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb2:	bd08      	pop	{r3, pc}
 800ccb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ccb8:	e7fb      	b.n	800ccb2 <sysconf+0x12>
	...

0800ccbc <_vsprintf_r>:
 800ccbc:	b500      	push	{lr}
 800ccbe:	b09b      	sub	sp, #108	; 0x6c
 800ccc0:	9100      	str	r1, [sp, #0]
 800ccc2:	9104      	str	r1, [sp, #16]
 800ccc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccc8:	9105      	str	r1, [sp, #20]
 800ccca:	9102      	str	r1, [sp, #8]
 800cccc:	4905      	ldr	r1, [pc, #20]	; (800cce4 <_vsprintf_r+0x28>)
 800ccce:	9103      	str	r1, [sp, #12]
 800ccd0:	4669      	mov	r1, sp
 800ccd2:	f7fe fe01 	bl	800b8d8 <_svfprintf_r>
 800ccd6:	9b00      	ldr	r3, [sp, #0]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	b01b      	add	sp, #108	; 0x6c
 800ccde:	f85d fb04 	ldr.w	pc, [sp], #4
 800cce2:	bf00      	nop
 800cce4:	ffff0208 	.word	0xffff0208

0800cce8 <vsprintf>:
 800cce8:	4613      	mov	r3, r2
 800ccea:	460a      	mov	r2, r1
 800ccec:	4601      	mov	r1, r0
 800ccee:	4802      	ldr	r0, [pc, #8]	; (800ccf8 <vsprintf+0x10>)
 800ccf0:	6800      	ldr	r0, [r0, #0]
 800ccf2:	f7ff bfe3 	b.w	800ccbc <_vsprintf_r>
 800ccf6:	bf00      	nop
 800ccf8:	2000001c 	.word	0x2000001c

0800ccfc <_write_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4d07      	ldr	r5, [pc, #28]	; (800cd1c <_write_r+0x20>)
 800cd00:	4604      	mov	r4, r0
 800cd02:	4608      	mov	r0, r1
 800cd04:	4611      	mov	r1, r2
 800cd06:	2200      	movs	r2, #0
 800cd08:	602a      	str	r2, [r5, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	f7f5 fe53 	bl	80029b6 <_write>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_write_r+0x1e>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_write_r+0x1e>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	20017acc 	.word	0x20017acc

0800cd20 <register_fini>:
 800cd20:	4b02      	ldr	r3, [pc, #8]	; (800cd2c <register_fini+0xc>)
 800cd22:	b113      	cbz	r3, 800cd2a <register_fini+0xa>
 800cd24:	4802      	ldr	r0, [pc, #8]	; (800cd30 <register_fini+0x10>)
 800cd26:	f000 b805 	b.w	800cd34 <atexit>
 800cd2a:	4770      	bx	lr
 800cd2c:	00000000 	.word	0x00000000
 800cd30:	0800dad5 	.word	0x0800dad5

0800cd34 <atexit>:
 800cd34:	2300      	movs	r3, #0
 800cd36:	4601      	mov	r1, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f002 b99c 	b.w	800f078 <__register_exitproc>

0800cd40 <_close_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d06      	ldr	r5, [pc, #24]	; (800cd5c <_close_r+0x1c>)
 800cd44:	2300      	movs	r3, #0
 800cd46:	4604      	mov	r4, r0
 800cd48:	4608      	mov	r0, r1
 800cd4a:	602b      	str	r3, [r5, #0]
 800cd4c:	f7f5 fe4f 	bl	80029ee <_close>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_close_r+0x1a>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_close_r+0x1a>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	20017acc 	.word	0x20017acc

0800cd60 <quorem>:
 800cd60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	6903      	ldr	r3, [r0, #16]
 800cd66:	690c      	ldr	r4, [r1, #16]
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	4607      	mov	r7, r0
 800cd6c:	f2c0 8081 	blt.w	800ce72 <quorem+0x112>
 800cd70:	3c01      	subs	r4, #1
 800cd72:	f101 0814 	add.w	r8, r1, #20
 800cd76:	f100 0514 	add.w	r5, r0, #20
 800cd7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd94:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd98:	d331      	bcc.n	800cdfe <quorem+0x9e>
 800cd9a:	f04f 0e00 	mov.w	lr, #0
 800cd9e:	4640      	mov	r0, r8
 800cda0:	46ac      	mov	ip, r5
 800cda2:	46f2      	mov	sl, lr
 800cda4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cda8:	b293      	uxth	r3, r2
 800cdaa:	fb06 e303 	mla	r3, r6, r3, lr
 800cdae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	ebaa 0303 	sub.w	r3, sl, r3
 800cdb8:	f8dc a000 	ldr.w	sl, [ip]
 800cdbc:	0c12      	lsrs	r2, r2, #16
 800cdbe:	fa13 f38a 	uxtah	r3, r3, sl
 800cdc2:	fb06 e202 	mla	r2, r6, r2, lr
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	9b00      	ldr	r3, [sp, #0]
 800cdca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdce:	b292      	uxth	r2, r2
 800cdd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cdd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800cddc:	4581      	cmp	r9, r0
 800cdde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cde2:	f84c 3b04 	str.w	r3, [ip], #4
 800cde6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cdea:	d2db      	bcs.n	800cda4 <quorem+0x44>
 800cdec:	f855 300b 	ldr.w	r3, [r5, fp]
 800cdf0:	b92b      	cbnz	r3, 800cdfe <quorem+0x9e>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	3b04      	subs	r3, #4
 800cdf6:	429d      	cmp	r5, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	d32e      	bcc.n	800ce5a <quorem+0xfa>
 800cdfc:	613c      	str	r4, [r7, #16]
 800cdfe:	4638      	mov	r0, r7
 800ce00:	f001 fdfc 	bl	800e9fc <__mcmp>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	db24      	blt.n	800ce52 <quorem+0xf2>
 800ce08:	3601      	adds	r6, #1
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f04f 0c00 	mov.w	ip, #0
 800ce10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce14:	f8d0 e000 	ldr.w	lr, [r0]
 800ce18:	b293      	uxth	r3, r2
 800ce1a:	ebac 0303 	sub.w	r3, ip, r3
 800ce1e:	0c12      	lsrs	r2, r2, #16
 800ce20:	fa13 f38e 	uxtah	r3, r3, lr
 800ce24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ce28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce32:	45c1      	cmp	r9, r8
 800ce34:	f840 3b04 	str.w	r3, [r0], #4
 800ce38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce3c:	d2e8      	bcs.n	800ce10 <quorem+0xb0>
 800ce3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce46:	b922      	cbnz	r2, 800ce52 <quorem+0xf2>
 800ce48:	3b04      	subs	r3, #4
 800ce4a:	429d      	cmp	r5, r3
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	d30a      	bcc.n	800ce66 <quorem+0x106>
 800ce50:	613c      	str	r4, [r7, #16]
 800ce52:	4630      	mov	r0, r6
 800ce54:	b003      	add	sp, #12
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5a:	6812      	ldr	r2, [r2, #0]
 800ce5c:	3b04      	subs	r3, #4
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	d1cc      	bne.n	800cdfc <quorem+0x9c>
 800ce62:	3c01      	subs	r4, #1
 800ce64:	e7c7      	b.n	800cdf6 <quorem+0x96>
 800ce66:	6812      	ldr	r2, [r2, #0]
 800ce68:	3b04      	subs	r3, #4
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	d1f0      	bne.n	800ce50 <quorem+0xf0>
 800ce6e:	3c01      	subs	r4, #1
 800ce70:	e7eb      	b.n	800ce4a <quorem+0xea>
 800ce72:	2000      	movs	r0, #0
 800ce74:	e7ee      	b.n	800ce54 <quorem+0xf4>
	...

0800ce78 <_dtoa_r>:
 800ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	ed2d 8b04 	vpush	{d8-d9}
 800ce80:	b093      	sub	sp, #76	; 0x4c
 800ce82:	ec57 6b10 	vmov	r6, r7, d0
 800ce86:	9106      	str	r1, [sp, #24]
 800ce88:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ce8a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ce8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce8e:	ee10 aa10 	vmov	sl, s0
 800ce92:	4604      	mov	r4, r0
 800ce94:	930c      	str	r3, [sp, #48]	; 0x30
 800ce96:	46bb      	mov	fp, r7
 800ce98:	b141      	cbz	r1, 800ceac <_dtoa_r+0x34>
 800ce9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce9c:	604a      	str	r2, [r1, #4]
 800ce9e:	2301      	movs	r3, #1
 800cea0:	4093      	lsls	r3, r2
 800cea2:	608b      	str	r3, [r1, #8]
 800cea4:	f001 fb51 	bl	800e54a <_Bfree>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	6423      	str	r3, [r4, #64]	; 0x40
 800ceac:	1e3b      	subs	r3, r7, #0
 800ceae:	bfaa      	itet	ge
 800ceb0:	2300      	movge	r3, #0
 800ceb2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ceb6:	602b      	strge	r3, [r5, #0]
 800ceb8:	4ba3      	ldr	r3, [pc, #652]	; (800d148 <_dtoa_r+0x2d0>)
 800ceba:	bfbc      	itt	lt
 800cebc:	2201      	movlt	r2, #1
 800cebe:	602a      	strlt	r2, [r5, #0]
 800cec0:	ea33 030b 	bics.w	r3, r3, fp
 800cec4:	d11b      	bne.n	800cefe <_dtoa_r+0x86>
 800cec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cec8:	f242 730f 	movw	r3, #9999	; 0x270f
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ced2:	4333      	orrs	r3, r6
 800ced4:	f000 8590 	beq.w	800d9f8 <_dtoa_r+0xb80>
 800ced8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceda:	b90b      	cbnz	r3, 800cee0 <_dtoa_r+0x68>
 800cedc:	4b9b      	ldr	r3, [pc, #620]	; (800d14c <_dtoa_r+0x2d4>)
 800cede:	e022      	b.n	800cf26 <_dtoa_r+0xae>
 800cee0:	4b9a      	ldr	r3, [pc, #616]	; (800d14c <_dtoa_r+0x2d4>)
 800cee2:	9301      	str	r3, [sp, #4]
 800cee4:	3303      	adds	r3, #3
 800cee6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	9801      	ldr	r0, [sp, #4]
 800ceec:	b013      	add	sp, #76	; 0x4c
 800ceee:	ecbd 8b04 	vpop	{d8-d9}
 800cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef6:	4b96      	ldr	r3, [pc, #600]	; (800d150 <_dtoa_r+0x2d8>)
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	3308      	adds	r3, #8
 800cefc:	e7f3      	b.n	800cee6 <_dtoa_r+0x6e>
 800cefe:	2200      	movs	r2, #0
 800cf00:	2300      	movs	r3, #0
 800cf02:	4650      	mov	r0, sl
 800cf04:	4659      	mov	r1, fp
 800cf06:	f7f3 fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 800cf0a:	ec4b ab19 	vmov	d9, sl, fp
 800cf0e:	4680      	mov	r8, r0
 800cf10:	b158      	cbz	r0, 800cf2a <_dtoa_r+0xb2>
 800cf12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf14:	2301      	movs	r3, #1
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 8569 	beq.w	800d9f2 <_dtoa_r+0xb7a>
 800cf20:	488c      	ldr	r0, [pc, #560]	; (800d154 <_dtoa_r+0x2dc>)
 800cf22:	6018      	str	r0, [r3, #0]
 800cf24:	1e43      	subs	r3, r0, #1
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	e7df      	b.n	800ceea <_dtoa_r+0x72>
 800cf2a:	ec4b ab10 	vmov	d0, sl, fp
 800cf2e:	aa10      	add	r2, sp, #64	; 0x40
 800cf30:	a911      	add	r1, sp, #68	; 0x44
 800cf32:	4620      	mov	r0, r4
 800cf34:	f001 fe84 	bl	800ec40 <__d2b>
 800cf38:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cf3c:	ee08 0a10 	vmov	s16, r0
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	f000 8082 	beq.w	800d04a <_dtoa_r+0x1d2>
 800cf46:	ee19 3a90 	vmov	r3, s19
 800cf4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cf52:	4656      	mov	r6, sl
 800cf54:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cf58:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf5c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cf60:	4b7d      	ldr	r3, [pc, #500]	; (800d158 <_dtoa_r+0x2e0>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	4630      	mov	r0, r6
 800cf66:	4639      	mov	r1, r7
 800cf68:	f7f3 f9a6 	bl	80002b8 <__aeabi_dsub>
 800cf6c:	a370      	add	r3, pc, #448	; (adr r3, 800d130 <_dtoa_r+0x2b8>)
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	f7f3 fb59 	bl	8000628 <__aeabi_dmul>
 800cf76:	a370      	add	r3, pc, #448	; (adr r3, 800d138 <_dtoa_r+0x2c0>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	f7f3 f99e 	bl	80002bc <__adddf3>
 800cf80:	4606      	mov	r6, r0
 800cf82:	4628      	mov	r0, r5
 800cf84:	460f      	mov	r7, r1
 800cf86:	f7f3 fae5 	bl	8000554 <__aeabi_i2d>
 800cf8a:	a36d      	add	r3, pc, #436	; (adr r3, 800d140 <_dtoa_r+0x2c8>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	f7f3 fb4a 	bl	8000628 <__aeabi_dmul>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	4630      	mov	r0, r6
 800cf9a:	4639      	mov	r1, r7
 800cf9c:	f7f3 f98e 	bl	80002bc <__adddf3>
 800cfa0:	4606      	mov	r6, r0
 800cfa2:	460f      	mov	r7, r1
 800cfa4:	f7f3 fdf0 	bl	8000b88 <__aeabi_d2iz>
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	9000      	str	r0, [sp, #0]
 800cfac:	2300      	movs	r3, #0
 800cfae:	4630      	mov	r0, r6
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	f7f3 fdab 	bl	8000b0c <__aeabi_dcmplt>
 800cfb6:	b150      	cbz	r0, 800cfce <_dtoa_r+0x156>
 800cfb8:	9800      	ldr	r0, [sp, #0]
 800cfba:	f7f3 facb 	bl	8000554 <__aeabi_i2d>
 800cfbe:	4632      	mov	r2, r6
 800cfc0:	463b      	mov	r3, r7
 800cfc2:	f7f3 fd99 	bl	8000af8 <__aeabi_dcmpeq>
 800cfc6:	b910      	cbnz	r0, 800cfce <_dtoa_r+0x156>
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	9b00      	ldr	r3, [sp, #0]
 800cfd0:	2b16      	cmp	r3, #22
 800cfd2:	d858      	bhi.n	800d086 <_dtoa_r+0x20e>
 800cfd4:	9a00      	ldr	r2, [sp, #0]
 800cfd6:	4b61      	ldr	r3, [pc, #388]	; (800d15c <_dtoa_r+0x2e4>)
 800cfd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	ec51 0b19 	vmov	r0, r1, d9
 800cfe4:	f7f3 fd92 	bl	8000b0c <__aeabi_dcmplt>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d04e      	beq.n	800d08a <_dtoa_r+0x212>
 800cfec:	9b00      	ldr	r3, [sp, #0]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	2300      	movs	r3, #0
 800cff4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cff8:	1b5d      	subs	r5, r3, r5
 800cffa:	1e6b      	subs	r3, r5, #1
 800cffc:	9305      	str	r3, [sp, #20]
 800cffe:	bf45      	ittet	mi
 800d000:	f1c5 0301 	rsbmi	r3, r5, #1
 800d004:	9304      	strmi	r3, [sp, #16]
 800d006:	2300      	movpl	r3, #0
 800d008:	2300      	movmi	r3, #0
 800d00a:	bf4c      	ite	mi
 800d00c:	9305      	strmi	r3, [sp, #20]
 800d00e:	9304      	strpl	r3, [sp, #16]
 800d010:	9b00      	ldr	r3, [sp, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	db3b      	blt.n	800d08e <_dtoa_r+0x216>
 800d016:	9b05      	ldr	r3, [sp, #20]
 800d018:	9a00      	ldr	r2, [sp, #0]
 800d01a:	920a      	str	r2, [sp, #40]	; 0x28
 800d01c:	4413      	add	r3, r2
 800d01e:	9305      	str	r3, [sp, #20]
 800d020:	2300      	movs	r3, #0
 800d022:	9307      	str	r3, [sp, #28]
 800d024:	9b06      	ldr	r3, [sp, #24]
 800d026:	2b09      	cmp	r3, #9
 800d028:	d869      	bhi.n	800d0fe <_dtoa_r+0x286>
 800d02a:	2b05      	cmp	r3, #5
 800d02c:	bfc4      	itt	gt
 800d02e:	3b04      	subgt	r3, #4
 800d030:	9306      	strgt	r3, [sp, #24]
 800d032:	9b06      	ldr	r3, [sp, #24]
 800d034:	f1a3 0302 	sub.w	r3, r3, #2
 800d038:	bfcc      	ite	gt
 800d03a:	2500      	movgt	r5, #0
 800d03c:	2501      	movle	r5, #1
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d868      	bhi.n	800d114 <_dtoa_r+0x29c>
 800d042:	e8df f003 	tbb	[pc, r3]
 800d046:	3a2d      	.short	0x3a2d
 800d048:	5a38      	.short	0x5a38
 800d04a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d04e:	441d      	add	r5, r3
 800d050:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d054:	2b20      	cmp	r3, #32
 800d056:	bfc1      	itttt	gt
 800d058:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d05c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d060:	fa0b f303 	lslgt.w	r3, fp, r3
 800d064:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d068:	bfda      	itte	le
 800d06a:	f1c3 0320 	rsble	r3, r3, #32
 800d06e:	fa06 f003 	lslle.w	r0, r6, r3
 800d072:	4318      	orrgt	r0, r3
 800d074:	f7f3 fa5e 	bl	8000534 <__aeabi_ui2d>
 800d078:	2301      	movs	r3, #1
 800d07a:	4606      	mov	r6, r0
 800d07c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d080:	3d01      	subs	r5, #1
 800d082:	930e      	str	r3, [sp, #56]	; 0x38
 800d084:	e76c      	b.n	800cf60 <_dtoa_r+0xe8>
 800d086:	2301      	movs	r3, #1
 800d088:	e7b4      	b.n	800cff4 <_dtoa_r+0x17c>
 800d08a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d08c:	e7b3      	b.n	800cff6 <_dtoa_r+0x17e>
 800d08e:	9b04      	ldr	r3, [sp, #16]
 800d090:	9a00      	ldr	r2, [sp, #0]
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	9304      	str	r3, [sp, #16]
 800d096:	4253      	negs	r3, r2
 800d098:	9307      	str	r3, [sp, #28]
 800d09a:	2300      	movs	r3, #0
 800d09c:	930a      	str	r3, [sp, #40]	; 0x28
 800d09e:	e7c1      	b.n	800d024 <_dtoa_r+0x1ac>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9308      	str	r3, [sp, #32]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	dc37      	bgt.n	800d11a <_dtoa_r+0x2a2>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d0b4:	e00c      	b.n	800d0d0 <_dtoa_r+0x258>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e7f3      	b.n	800d0a2 <_dtoa_r+0x22a>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0be:	9308      	str	r3, [sp, #32]
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	9302      	str	r3, [sp, #8]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	9303      	str	r3, [sp, #12]
 800d0cc:	bfb8      	it	lt
 800d0ce:	2301      	movlt	r3, #1
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	6462      	str	r2, [r4, #68]	; 0x44
 800d0d4:	2204      	movs	r2, #4
 800d0d6:	f102 0014 	add.w	r0, r2, #20
 800d0da:	4298      	cmp	r0, r3
 800d0dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d0de:	d920      	bls.n	800d122 <_dtoa_r+0x2aa>
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f001 fa0d 	bl	800e500 <_Balloc>
 800d0e6:	9001      	str	r0, [sp, #4]
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d13d      	bne.n	800d168 <_dtoa_r+0x2f0>
 800d0ec:	4b1c      	ldr	r3, [pc, #112]	; (800d160 <_dtoa_r+0x2e8>)
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d0f4:	481b      	ldr	r0, [pc, #108]	; (800d164 <_dtoa_r+0x2ec>)
 800d0f6:	f002 f801 	bl	800f0fc <__assert_func>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e7de      	b.n	800d0bc <_dtoa_r+0x244>
 800d0fe:	2501      	movs	r5, #1
 800d100:	2300      	movs	r3, #0
 800d102:	9306      	str	r3, [sp, #24]
 800d104:	9508      	str	r5, [sp, #32]
 800d106:	f04f 33ff 	mov.w	r3, #4294967295
 800d10a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d10e:	2200      	movs	r2, #0
 800d110:	2312      	movs	r3, #18
 800d112:	e7ce      	b.n	800d0b2 <_dtoa_r+0x23a>
 800d114:	2301      	movs	r3, #1
 800d116:	9308      	str	r3, [sp, #32]
 800d118:	e7f5      	b.n	800d106 <_dtoa_r+0x28e>
 800d11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d120:	e7d6      	b.n	800d0d0 <_dtoa_r+0x258>
 800d122:	3101      	adds	r1, #1
 800d124:	6461      	str	r1, [r4, #68]	; 0x44
 800d126:	0052      	lsls	r2, r2, #1
 800d128:	e7d5      	b.n	800d0d6 <_dtoa_r+0x25e>
 800d12a:	bf00      	nop
 800d12c:	f3af 8000 	nop.w
 800d130:	636f4361 	.word	0x636f4361
 800d134:	3fd287a7 	.word	0x3fd287a7
 800d138:	8b60c8b3 	.word	0x8b60c8b3
 800d13c:	3fc68a28 	.word	0x3fc68a28
 800d140:	509f79fb 	.word	0x509f79fb
 800d144:	3fd34413 	.word	0x3fd34413
 800d148:	7ff00000 	.word	0x7ff00000
 800d14c:	0801089c 	.word	0x0801089c
 800d150:	080108a0 	.word	0x080108a0
 800d154:	0801087b 	.word	0x0801087b
 800d158:	3ff80000 	.word	0x3ff80000
 800d15c:	08010a18 	.word	0x08010a18
 800d160:	080108a9 	.word	0x080108a9
 800d164:	080108ba 	.word	0x080108ba
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	6423      	str	r3, [r4, #64]	; 0x40
 800d16c:	9b03      	ldr	r3, [sp, #12]
 800d16e:	2b0e      	cmp	r3, #14
 800d170:	f200 809d 	bhi.w	800d2ae <_dtoa_r+0x436>
 800d174:	2d00      	cmp	r5, #0
 800d176:	f000 809a 	beq.w	800d2ae <_dtoa_r+0x436>
 800d17a:	9b00      	ldr	r3, [sp, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dd32      	ble.n	800d1e6 <_dtoa_r+0x36e>
 800d180:	4ab7      	ldr	r2, [pc, #732]	; (800d460 <_dtoa_r+0x5e8>)
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d18a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d18e:	9b00      	ldr	r3, [sp, #0]
 800d190:	05d8      	lsls	r0, r3, #23
 800d192:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d196:	d516      	bpl.n	800d1c6 <_dtoa_r+0x34e>
 800d198:	4bb2      	ldr	r3, [pc, #712]	; (800d464 <_dtoa_r+0x5ec>)
 800d19a:	ec51 0b19 	vmov	r0, r1, d9
 800d19e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1a2:	f7f3 fb6b 	bl	800087c <__aeabi_ddiv>
 800d1a6:	f007 070f 	and.w	r7, r7, #15
 800d1aa:	4682      	mov	sl, r0
 800d1ac:	468b      	mov	fp, r1
 800d1ae:	2503      	movs	r5, #3
 800d1b0:	4eac      	ldr	r6, [pc, #688]	; (800d464 <_dtoa_r+0x5ec>)
 800d1b2:	b957      	cbnz	r7, 800d1ca <_dtoa_r+0x352>
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	4659      	mov	r1, fp
 800d1bc:	f7f3 fb5e 	bl	800087c <__aeabi_ddiv>
 800d1c0:	4682      	mov	sl, r0
 800d1c2:	468b      	mov	fp, r1
 800d1c4:	e028      	b.n	800d218 <_dtoa_r+0x3a0>
 800d1c6:	2502      	movs	r5, #2
 800d1c8:	e7f2      	b.n	800d1b0 <_dtoa_r+0x338>
 800d1ca:	07f9      	lsls	r1, r7, #31
 800d1cc:	d508      	bpl.n	800d1e0 <_dtoa_r+0x368>
 800d1ce:	4640      	mov	r0, r8
 800d1d0:	4649      	mov	r1, r9
 800d1d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1d6:	f7f3 fa27 	bl	8000628 <__aeabi_dmul>
 800d1da:	3501      	adds	r5, #1
 800d1dc:	4680      	mov	r8, r0
 800d1de:	4689      	mov	r9, r1
 800d1e0:	107f      	asrs	r7, r7, #1
 800d1e2:	3608      	adds	r6, #8
 800d1e4:	e7e5      	b.n	800d1b2 <_dtoa_r+0x33a>
 800d1e6:	f000 809b 	beq.w	800d320 <_dtoa_r+0x4a8>
 800d1ea:	9b00      	ldr	r3, [sp, #0]
 800d1ec:	4f9d      	ldr	r7, [pc, #628]	; (800d464 <_dtoa_r+0x5ec>)
 800d1ee:	425e      	negs	r6, r3
 800d1f0:	4b9b      	ldr	r3, [pc, #620]	; (800d460 <_dtoa_r+0x5e8>)
 800d1f2:	f006 020f 	and.w	r2, r6, #15
 800d1f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	ec51 0b19 	vmov	r0, r1, d9
 800d202:	f7f3 fa11 	bl	8000628 <__aeabi_dmul>
 800d206:	1136      	asrs	r6, r6, #4
 800d208:	4682      	mov	sl, r0
 800d20a:	468b      	mov	fp, r1
 800d20c:	2300      	movs	r3, #0
 800d20e:	2502      	movs	r5, #2
 800d210:	2e00      	cmp	r6, #0
 800d212:	d17a      	bne.n	800d30a <_dtoa_r+0x492>
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1d3      	bne.n	800d1c0 <_dtoa_r+0x348>
 800d218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 8082 	beq.w	800d324 <_dtoa_r+0x4ac>
 800d220:	4b91      	ldr	r3, [pc, #580]	; (800d468 <_dtoa_r+0x5f0>)
 800d222:	2200      	movs	r2, #0
 800d224:	4650      	mov	r0, sl
 800d226:	4659      	mov	r1, fp
 800d228:	f7f3 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d079      	beq.n	800d324 <_dtoa_r+0x4ac>
 800d230:	9b03      	ldr	r3, [sp, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d076      	beq.n	800d324 <_dtoa_r+0x4ac>
 800d236:	9b02      	ldr	r3, [sp, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	dd36      	ble.n	800d2aa <_dtoa_r+0x432>
 800d23c:	9b00      	ldr	r3, [sp, #0]
 800d23e:	4650      	mov	r0, sl
 800d240:	4659      	mov	r1, fp
 800d242:	1e5f      	subs	r7, r3, #1
 800d244:	2200      	movs	r2, #0
 800d246:	4b89      	ldr	r3, [pc, #548]	; (800d46c <_dtoa_r+0x5f4>)
 800d248:	f7f3 f9ee 	bl	8000628 <__aeabi_dmul>
 800d24c:	9e02      	ldr	r6, [sp, #8]
 800d24e:	4682      	mov	sl, r0
 800d250:	468b      	mov	fp, r1
 800d252:	3501      	adds	r5, #1
 800d254:	4628      	mov	r0, r5
 800d256:	f7f3 f97d 	bl	8000554 <__aeabi_i2d>
 800d25a:	4652      	mov	r2, sl
 800d25c:	465b      	mov	r3, fp
 800d25e:	f7f3 f9e3 	bl	8000628 <__aeabi_dmul>
 800d262:	4b83      	ldr	r3, [pc, #524]	; (800d470 <_dtoa_r+0x5f8>)
 800d264:	2200      	movs	r2, #0
 800d266:	f7f3 f829 	bl	80002bc <__adddf3>
 800d26a:	46d0      	mov	r8, sl
 800d26c:	46d9      	mov	r9, fp
 800d26e:	4682      	mov	sl, r0
 800d270:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d274:	2e00      	cmp	r6, #0
 800d276:	d158      	bne.n	800d32a <_dtoa_r+0x4b2>
 800d278:	4b7e      	ldr	r3, [pc, #504]	; (800d474 <_dtoa_r+0x5fc>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	4640      	mov	r0, r8
 800d27e:	4649      	mov	r1, r9
 800d280:	f7f3 f81a 	bl	80002b8 <__aeabi_dsub>
 800d284:	4652      	mov	r2, sl
 800d286:	465b      	mov	r3, fp
 800d288:	4680      	mov	r8, r0
 800d28a:	4689      	mov	r9, r1
 800d28c:	f7f3 fc5c 	bl	8000b48 <__aeabi_dcmpgt>
 800d290:	2800      	cmp	r0, #0
 800d292:	f040 8296 	bne.w	800d7c2 <_dtoa_r+0x94a>
 800d296:	4652      	mov	r2, sl
 800d298:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d29c:	4640      	mov	r0, r8
 800d29e:	4649      	mov	r1, r9
 800d2a0:	f7f3 fc34 	bl	8000b0c <__aeabi_dcmplt>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	f040 828a 	bne.w	800d7be <_dtoa_r+0x946>
 800d2aa:	ec5b ab19 	vmov	sl, fp, d9
 800d2ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f2c0 8149 	blt.w	800d548 <_dtoa_r+0x6d0>
 800d2b6:	9a00      	ldr	r2, [sp, #0]
 800d2b8:	2a0e      	cmp	r2, #14
 800d2ba:	f300 8145 	bgt.w	800d548 <_dtoa_r+0x6d0>
 800d2be:	4b68      	ldr	r3, [pc, #416]	; (800d460 <_dtoa_r+0x5e8>)
 800d2c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f280 80d6 	bge.w	800d47c <_dtoa_r+0x604>
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f300 80d2 	bgt.w	800d47c <_dtoa_r+0x604>
 800d2d8:	f040 8270 	bne.w	800d7bc <_dtoa_r+0x944>
 800d2dc:	4b65      	ldr	r3, [pc, #404]	; (800d474 <_dtoa_r+0x5fc>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	f7f3 f9a0 	bl	8000628 <__aeabi_dmul>
 800d2e8:	4652      	mov	r2, sl
 800d2ea:	465b      	mov	r3, fp
 800d2ec:	f7f3 fc22 	bl	8000b34 <__aeabi_dcmpge>
 800d2f0:	9e03      	ldr	r6, [sp, #12]
 800d2f2:	4637      	mov	r7, r6
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f040 8246 	bne.w	800d786 <_dtoa_r+0x90e>
 800d2fa:	9d01      	ldr	r5, [sp, #4]
 800d2fc:	2331      	movs	r3, #49	; 0x31
 800d2fe:	f805 3b01 	strb.w	r3, [r5], #1
 800d302:	9b00      	ldr	r3, [sp, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	e241      	b.n	800d78e <_dtoa_r+0x916>
 800d30a:	07f2      	lsls	r2, r6, #31
 800d30c:	d505      	bpl.n	800d31a <_dtoa_r+0x4a2>
 800d30e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d312:	f7f3 f989 	bl	8000628 <__aeabi_dmul>
 800d316:	3501      	adds	r5, #1
 800d318:	2301      	movs	r3, #1
 800d31a:	1076      	asrs	r6, r6, #1
 800d31c:	3708      	adds	r7, #8
 800d31e:	e777      	b.n	800d210 <_dtoa_r+0x398>
 800d320:	2502      	movs	r5, #2
 800d322:	e779      	b.n	800d218 <_dtoa_r+0x3a0>
 800d324:	9f00      	ldr	r7, [sp, #0]
 800d326:	9e03      	ldr	r6, [sp, #12]
 800d328:	e794      	b.n	800d254 <_dtoa_r+0x3dc>
 800d32a:	9901      	ldr	r1, [sp, #4]
 800d32c:	4b4c      	ldr	r3, [pc, #304]	; (800d460 <_dtoa_r+0x5e8>)
 800d32e:	4431      	add	r1, r6
 800d330:	910d      	str	r1, [sp, #52]	; 0x34
 800d332:	9908      	ldr	r1, [sp, #32]
 800d334:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d33c:	2900      	cmp	r1, #0
 800d33e:	d043      	beq.n	800d3c8 <_dtoa_r+0x550>
 800d340:	494d      	ldr	r1, [pc, #308]	; (800d478 <_dtoa_r+0x600>)
 800d342:	2000      	movs	r0, #0
 800d344:	f7f3 fa9a 	bl	800087c <__aeabi_ddiv>
 800d348:	4652      	mov	r2, sl
 800d34a:	465b      	mov	r3, fp
 800d34c:	f7f2 ffb4 	bl	80002b8 <__aeabi_dsub>
 800d350:	9d01      	ldr	r5, [sp, #4]
 800d352:	4682      	mov	sl, r0
 800d354:	468b      	mov	fp, r1
 800d356:	4649      	mov	r1, r9
 800d358:	4640      	mov	r0, r8
 800d35a:	f7f3 fc15 	bl	8000b88 <__aeabi_d2iz>
 800d35e:	4606      	mov	r6, r0
 800d360:	f7f3 f8f8 	bl	8000554 <__aeabi_i2d>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4640      	mov	r0, r8
 800d36a:	4649      	mov	r1, r9
 800d36c:	f7f2 ffa4 	bl	80002b8 <__aeabi_dsub>
 800d370:	3630      	adds	r6, #48	; 0x30
 800d372:	f805 6b01 	strb.w	r6, [r5], #1
 800d376:	4652      	mov	r2, sl
 800d378:	465b      	mov	r3, fp
 800d37a:	4680      	mov	r8, r0
 800d37c:	4689      	mov	r9, r1
 800d37e:	f7f3 fbc5 	bl	8000b0c <__aeabi_dcmplt>
 800d382:	2800      	cmp	r0, #0
 800d384:	d163      	bne.n	800d44e <_dtoa_r+0x5d6>
 800d386:	4642      	mov	r2, r8
 800d388:	464b      	mov	r3, r9
 800d38a:	4937      	ldr	r1, [pc, #220]	; (800d468 <_dtoa_r+0x5f0>)
 800d38c:	2000      	movs	r0, #0
 800d38e:	f7f2 ff93 	bl	80002b8 <__aeabi_dsub>
 800d392:	4652      	mov	r2, sl
 800d394:	465b      	mov	r3, fp
 800d396:	f7f3 fbb9 	bl	8000b0c <__aeabi_dcmplt>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	f040 80b6 	bne.w	800d50c <_dtoa_r+0x694>
 800d3a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3a2:	429d      	cmp	r5, r3
 800d3a4:	d081      	beq.n	800d2aa <_dtoa_r+0x432>
 800d3a6:	4b31      	ldr	r3, [pc, #196]	; (800d46c <_dtoa_r+0x5f4>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	4650      	mov	r0, sl
 800d3ac:	4659      	mov	r1, fp
 800d3ae:	f7f3 f93b 	bl	8000628 <__aeabi_dmul>
 800d3b2:	4b2e      	ldr	r3, [pc, #184]	; (800d46c <_dtoa_r+0x5f4>)
 800d3b4:	4682      	mov	sl, r0
 800d3b6:	468b      	mov	fp, r1
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f7f3 f933 	bl	8000628 <__aeabi_dmul>
 800d3c2:	4680      	mov	r8, r0
 800d3c4:	4689      	mov	r9, r1
 800d3c6:	e7c6      	b.n	800d356 <_dtoa_r+0x4de>
 800d3c8:	4650      	mov	r0, sl
 800d3ca:	4659      	mov	r1, fp
 800d3cc:	f7f3 f92c 	bl	8000628 <__aeabi_dmul>
 800d3d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3d2:	9d01      	ldr	r5, [sp, #4]
 800d3d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3d6:	4682      	mov	sl, r0
 800d3d8:	468b      	mov	fp, r1
 800d3da:	4649      	mov	r1, r9
 800d3dc:	4640      	mov	r0, r8
 800d3de:	f7f3 fbd3 	bl	8000b88 <__aeabi_d2iz>
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	f7f3 f8b6 	bl	8000554 <__aeabi_i2d>
 800d3e8:	3630      	adds	r6, #48	; 0x30
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	4649      	mov	r1, r9
 800d3f2:	f7f2 ff61 	bl	80002b8 <__aeabi_dsub>
 800d3f6:	f805 6b01 	strb.w	r6, [r5], #1
 800d3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3fc:	429d      	cmp	r5, r3
 800d3fe:	4680      	mov	r8, r0
 800d400:	4689      	mov	r9, r1
 800d402:	f04f 0200 	mov.w	r2, #0
 800d406:	d124      	bne.n	800d452 <_dtoa_r+0x5da>
 800d408:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <_dtoa_r+0x600>)
 800d40a:	4650      	mov	r0, sl
 800d40c:	4659      	mov	r1, fp
 800d40e:	f7f2 ff55 	bl	80002bc <__adddf3>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	4640      	mov	r0, r8
 800d418:	4649      	mov	r1, r9
 800d41a:	f7f3 fb95 	bl	8000b48 <__aeabi_dcmpgt>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d174      	bne.n	800d50c <_dtoa_r+0x694>
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	4914      	ldr	r1, [pc, #80]	; (800d478 <_dtoa_r+0x600>)
 800d428:	2000      	movs	r0, #0
 800d42a:	f7f2 ff45 	bl	80002b8 <__aeabi_dsub>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	4640      	mov	r0, r8
 800d434:	4649      	mov	r1, r9
 800d436:	f7f3 fb69 	bl	8000b0c <__aeabi_dcmplt>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	f43f af35 	beq.w	800d2aa <_dtoa_r+0x432>
 800d440:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d442:	1e6b      	subs	r3, r5, #1
 800d444:	930f      	str	r3, [sp, #60]	; 0x3c
 800d446:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d44a:	2b30      	cmp	r3, #48	; 0x30
 800d44c:	d0f8      	beq.n	800d440 <_dtoa_r+0x5c8>
 800d44e:	9700      	str	r7, [sp, #0]
 800d450:	e04a      	b.n	800d4e8 <_dtoa_r+0x670>
 800d452:	4b06      	ldr	r3, [pc, #24]	; (800d46c <_dtoa_r+0x5f4>)
 800d454:	f7f3 f8e8 	bl	8000628 <__aeabi_dmul>
 800d458:	4680      	mov	r8, r0
 800d45a:	4689      	mov	r9, r1
 800d45c:	e7bd      	b.n	800d3da <_dtoa_r+0x562>
 800d45e:	bf00      	nop
 800d460:	08010a18 	.word	0x08010a18
 800d464:	080109f0 	.word	0x080109f0
 800d468:	3ff00000 	.word	0x3ff00000
 800d46c:	40240000 	.word	0x40240000
 800d470:	401c0000 	.word	0x401c0000
 800d474:	40140000 	.word	0x40140000
 800d478:	3fe00000 	.word	0x3fe00000
 800d47c:	9d01      	ldr	r5, [sp, #4]
 800d47e:	4656      	mov	r6, sl
 800d480:	465f      	mov	r7, fp
 800d482:	4642      	mov	r2, r8
 800d484:	464b      	mov	r3, r9
 800d486:	4630      	mov	r0, r6
 800d488:	4639      	mov	r1, r7
 800d48a:	f7f3 f9f7 	bl	800087c <__aeabi_ddiv>
 800d48e:	f7f3 fb7b 	bl	8000b88 <__aeabi_d2iz>
 800d492:	4682      	mov	sl, r0
 800d494:	f7f3 f85e 	bl	8000554 <__aeabi_i2d>
 800d498:	4642      	mov	r2, r8
 800d49a:	464b      	mov	r3, r9
 800d49c:	f7f3 f8c4 	bl	8000628 <__aeabi_dmul>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d4ac:	f7f2 ff04 	bl	80002b8 <__aeabi_dsub>
 800d4b0:	f805 6b01 	strb.w	r6, [r5], #1
 800d4b4:	9e01      	ldr	r6, [sp, #4]
 800d4b6:	9f03      	ldr	r7, [sp, #12]
 800d4b8:	1bae      	subs	r6, r5, r6
 800d4ba:	42b7      	cmp	r7, r6
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	d135      	bne.n	800d52e <_dtoa_r+0x6b6>
 800d4c2:	f7f2 fefb 	bl	80002bc <__adddf3>
 800d4c6:	4642      	mov	r2, r8
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	460f      	mov	r7, r1
 800d4ce:	f7f3 fb3b 	bl	8000b48 <__aeabi_dcmpgt>
 800d4d2:	b9d0      	cbnz	r0, 800d50a <_dtoa_r+0x692>
 800d4d4:	4642      	mov	r2, r8
 800d4d6:	464b      	mov	r3, r9
 800d4d8:	4630      	mov	r0, r6
 800d4da:	4639      	mov	r1, r7
 800d4dc:	f7f3 fb0c 	bl	8000af8 <__aeabi_dcmpeq>
 800d4e0:	b110      	cbz	r0, 800d4e8 <_dtoa_r+0x670>
 800d4e2:	f01a 0f01 	tst.w	sl, #1
 800d4e6:	d110      	bne.n	800d50a <_dtoa_r+0x692>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	ee18 1a10 	vmov	r1, s16
 800d4ee:	f001 f82c 	bl	800e54a <_Bfree>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9800      	ldr	r0, [sp, #0]
 800d4f6:	702b      	strb	r3, [r5, #0]
 800d4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	6018      	str	r0, [r3, #0]
 800d4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d500:	2b00      	cmp	r3, #0
 800d502:	f43f acf2 	beq.w	800ceea <_dtoa_r+0x72>
 800d506:	601d      	str	r5, [r3, #0]
 800d508:	e4ef      	b.n	800ceea <_dtoa_r+0x72>
 800d50a:	9f00      	ldr	r7, [sp, #0]
 800d50c:	462b      	mov	r3, r5
 800d50e:	461d      	mov	r5, r3
 800d510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d514:	2a39      	cmp	r2, #57	; 0x39
 800d516:	d106      	bne.n	800d526 <_dtoa_r+0x6ae>
 800d518:	9a01      	ldr	r2, [sp, #4]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d1f7      	bne.n	800d50e <_dtoa_r+0x696>
 800d51e:	9901      	ldr	r1, [sp, #4]
 800d520:	2230      	movs	r2, #48	; 0x30
 800d522:	3701      	adds	r7, #1
 800d524:	700a      	strb	r2, [r1, #0]
 800d526:	781a      	ldrb	r2, [r3, #0]
 800d528:	3201      	adds	r2, #1
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	e78f      	b.n	800d44e <_dtoa_r+0x5d6>
 800d52e:	4ba6      	ldr	r3, [pc, #664]	; (800d7c8 <_dtoa_r+0x950>)
 800d530:	2200      	movs	r2, #0
 800d532:	f7f3 f879 	bl	8000628 <__aeabi_dmul>
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	f7f3 fadb 	bl	8000af8 <__aeabi_dcmpeq>
 800d542:	2800      	cmp	r0, #0
 800d544:	d09d      	beq.n	800d482 <_dtoa_r+0x60a>
 800d546:	e7cf      	b.n	800d4e8 <_dtoa_r+0x670>
 800d548:	9a08      	ldr	r2, [sp, #32]
 800d54a:	2a00      	cmp	r2, #0
 800d54c:	f000 80d7 	beq.w	800d6fe <_dtoa_r+0x886>
 800d550:	9a06      	ldr	r2, [sp, #24]
 800d552:	2a01      	cmp	r2, #1
 800d554:	f300 80ba 	bgt.w	800d6cc <_dtoa_r+0x854>
 800d558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	f000 80b2 	beq.w	800d6c4 <_dtoa_r+0x84c>
 800d560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d564:	9e07      	ldr	r6, [sp, #28]
 800d566:	9d04      	ldr	r5, [sp, #16]
 800d568:	9a04      	ldr	r2, [sp, #16]
 800d56a:	441a      	add	r2, r3
 800d56c:	9204      	str	r2, [sp, #16]
 800d56e:	9a05      	ldr	r2, [sp, #20]
 800d570:	2101      	movs	r1, #1
 800d572:	441a      	add	r2, r3
 800d574:	4620      	mov	r0, r4
 800d576:	9205      	str	r2, [sp, #20]
 800d578:	f001 f8d0 	bl	800e71c <__i2b>
 800d57c:	4607      	mov	r7, r0
 800d57e:	2d00      	cmp	r5, #0
 800d580:	dd0c      	ble.n	800d59c <_dtoa_r+0x724>
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	2b00      	cmp	r3, #0
 800d586:	dd09      	ble.n	800d59c <_dtoa_r+0x724>
 800d588:	42ab      	cmp	r3, r5
 800d58a:	9a04      	ldr	r2, [sp, #16]
 800d58c:	bfa8      	it	ge
 800d58e:	462b      	movge	r3, r5
 800d590:	1ad2      	subs	r2, r2, r3
 800d592:	9204      	str	r2, [sp, #16]
 800d594:	9a05      	ldr	r2, [sp, #20]
 800d596:	1aed      	subs	r5, r5, r3
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	9305      	str	r3, [sp, #20]
 800d59c:	9b07      	ldr	r3, [sp, #28]
 800d59e:	b31b      	cbz	r3, 800d5e8 <_dtoa_r+0x770>
 800d5a0:	9b08      	ldr	r3, [sp, #32]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f000 80af 	beq.w	800d706 <_dtoa_r+0x88e>
 800d5a8:	2e00      	cmp	r6, #0
 800d5aa:	dd13      	ble.n	800d5d4 <_dtoa_r+0x75c>
 800d5ac:	4639      	mov	r1, r7
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f001 f973 	bl	800e89c <__pow5mult>
 800d5b6:	ee18 2a10 	vmov	r2, s16
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	4607      	mov	r7, r0
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f001 f8c2 	bl	800e748 <__multiply>
 800d5c4:	ee18 1a10 	vmov	r1, s16
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 ffbd 	bl	800e54a <_Bfree>
 800d5d0:	ee08 8a10 	vmov	s16, r8
 800d5d4:	9b07      	ldr	r3, [sp, #28]
 800d5d6:	1b9a      	subs	r2, r3, r6
 800d5d8:	d006      	beq.n	800d5e8 <_dtoa_r+0x770>
 800d5da:	ee18 1a10 	vmov	r1, s16
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f001 f95c 	bl	800e89c <__pow5mult>
 800d5e4:	ee08 0a10 	vmov	s16, r0
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f001 f896 	bl	800e71c <__i2b>
 800d5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	f340 8088 	ble.w	800d70a <_dtoa_r+0x892>
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	4620      	mov	r0, r4
 800d600:	f001 f94c 	bl	800e89c <__pow5mult>
 800d604:	9b06      	ldr	r3, [sp, #24]
 800d606:	2b01      	cmp	r3, #1
 800d608:	4606      	mov	r6, r0
 800d60a:	f340 8081 	ble.w	800d710 <_dtoa_r+0x898>
 800d60e:	f04f 0800 	mov.w	r8, #0
 800d612:	6933      	ldr	r3, [r6, #16]
 800d614:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d618:	6918      	ldr	r0, [r3, #16]
 800d61a:	f001 f82f 	bl	800e67c <__hi0bits>
 800d61e:	f1c0 0020 	rsb	r0, r0, #32
 800d622:	9b05      	ldr	r3, [sp, #20]
 800d624:	4418      	add	r0, r3
 800d626:	f010 001f 	ands.w	r0, r0, #31
 800d62a:	f000 8092 	beq.w	800d752 <_dtoa_r+0x8da>
 800d62e:	f1c0 0320 	rsb	r3, r0, #32
 800d632:	2b04      	cmp	r3, #4
 800d634:	f340 808a 	ble.w	800d74c <_dtoa_r+0x8d4>
 800d638:	f1c0 001c 	rsb	r0, r0, #28
 800d63c:	9b04      	ldr	r3, [sp, #16]
 800d63e:	4403      	add	r3, r0
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	9b05      	ldr	r3, [sp, #20]
 800d644:	4403      	add	r3, r0
 800d646:	4405      	add	r5, r0
 800d648:	9305      	str	r3, [sp, #20]
 800d64a:	9b04      	ldr	r3, [sp, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	dd07      	ble.n	800d660 <_dtoa_r+0x7e8>
 800d650:	ee18 1a10 	vmov	r1, s16
 800d654:	461a      	mov	r2, r3
 800d656:	4620      	mov	r0, r4
 800d658:	f001 f960 	bl	800e91c <__lshift>
 800d65c:	ee08 0a10 	vmov	s16, r0
 800d660:	9b05      	ldr	r3, [sp, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	dd05      	ble.n	800d672 <_dtoa_r+0x7fa>
 800d666:	4631      	mov	r1, r6
 800d668:	461a      	mov	r2, r3
 800d66a:	4620      	mov	r0, r4
 800d66c:	f001 f956 	bl	800e91c <__lshift>
 800d670:	4606      	mov	r6, r0
 800d672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d674:	2b00      	cmp	r3, #0
 800d676:	d06e      	beq.n	800d756 <_dtoa_r+0x8de>
 800d678:	ee18 0a10 	vmov	r0, s16
 800d67c:	4631      	mov	r1, r6
 800d67e:	f001 f9bd 	bl	800e9fc <__mcmp>
 800d682:	2800      	cmp	r0, #0
 800d684:	da67      	bge.n	800d756 <_dtoa_r+0x8de>
 800d686:	9b00      	ldr	r3, [sp, #0]
 800d688:	3b01      	subs	r3, #1
 800d68a:	ee18 1a10 	vmov	r1, s16
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	220a      	movs	r2, #10
 800d692:	2300      	movs	r3, #0
 800d694:	4620      	mov	r0, r4
 800d696:	f000 ff61 	bl	800e55c <__multadd>
 800d69a:	9b08      	ldr	r3, [sp, #32]
 800d69c:	ee08 0a10 	vmov	s16, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 81b0 	beq.w	800da06 <_dtoa_r+0xb8e>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	4639      	mov	r1, r7
 800d6aa:	220a      	movs	r2, #10
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f000 ff55 	bl	800e55c <__multadd>
 800d6b2:	9b02      	ldr	r3, [sp, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	f300 808e 	bgt.w	800d7d8 <_dtoa_r+0x960>
 800d6bc:	9b06      	ldr	r3, [sp, #24]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	dc51      	bgt.n	800d766 <_dtoa_r+0x8ee>
 800d6c2:	e089      	b.n	800d7d8 <_dtoa_r+0x960>
 800d6c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d6ca:	e74b      	b.n	800d564 <_dtoa_r+0x6ec>
 800d6cc:	9b03      	ldr	r3, [sp, #12]
 800d6ce:	1e5e      	subs	r6, r3, #1
 800d6d0:	9b07      	ldr	r3, [sp, #28]
 800d6d2:	42b3      	cmp	r3, r6
 800d6d4:	bfbf      	itttt	lt
 800d6d6:	9b07      	ldrlt	r3, [sp, #28]
 800d6d8:	9607      	strlt	r6, [sp, #28]
 800d6da:	1af2      	sublt	r2, r6, r3
 800d6dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d6de:	bfb6      	itet	lt
 800d6e0:	189b      	addlt	r3, r3, r2
 800d6e2:	1b9e      	subge	r6, r3, r6
 800d6e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d6e6:	9b03      	ldr	r3, [sp, #12]
 800d6e8:	bfb8      	it	lt
 800d6ea:	2600      	movlt	r6, #0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bfb7      	itett	lt
 800d6f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d6f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d6f8:	1a9d      	sublt	r5, r3, r2
 800d6fa:	2300      	movlt	r3, #0
 800d6fc:	e734      	b.n	800d568 <_dtoa_r+0x6f0>
 800d6fe:	9e07      	ldr	r6, [sp, #28]
 800d700:	9d04      	ldr	r5, [sp, #16]
 800d702:	9f08      	ldr	r7, [sp, #32]
 800d704:	e73b      	b.n	800d57e <_dtoa_r+0x706>
 800d706:	9a07      	ldr	r2, [sp, #28]
 800d708:	e767      	b.n	800d5da <_dtoa_r+0x762>
 800d70a:	9b06      	ldr	r3, [sp, #24]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	dc18      	bgt.n	800d742 <_dtoa_r+0x8ca>
 800d710:	f1ba 0f00 	cmp.w	sl, #0
 800d714:	d115      	bne.n	800d742 <_dtoa_r+0x8ca>
 800d716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d71a:	b993      	cbnz	r3, 800d742 <_dtoa_r+0x8ca>
 800d71c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d720:	0d1b      	lsrs	r3, r3, #20
 800d722:	051b      	lsls	r3, r3, #20
 800d724:	b183      	cbz	r3, 800d748 <_dtoa_r+0x8d0>
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	3301      	adds	r3, #1
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	9b05      	ldr	r3, [sp, #20]
 800d72e:	3301      	adds	r3, #1
 800d730:	9305      	str	r3, [sp, #20]
 800d732:	f04f 0801 	mov.w	r8, #1
 800d736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f47f af6a 	bne.w	800d612 <_dtoa_r+0x79a>
 800d73e:	2001      	movs	r0, #1
 800d740:	e76f      	b.n	800d622 <_dtoa_r+0x7aa>
 800d742:	f04f 0800 	mov.w	r8, #0
 800d746:	e7f6      	b.n	800d736 <_dtoa_r+0x8be>
 800d748:	4698      	mov	r8, r3
 800d74a:	e7f4      	b.n	800d736 <_dtoa_r+0x8be>
 800d74c:	f43f af7d 	beq.w	800d64a <_dtoa_r+0x7d2>
 800d750:	4618      	mov	r0, r3
 800d752:	301c      	adds	r0, #28
 800d754:	e772      	b.n	800d63c <_dtoa_r+0x7c4>
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	dc37      	bgt.n	800d7cc <_dtoa_r+0x954>
 800d75c:	9b06      	ldr	r3, [sp, #24]
 800d75e:	2b02      	cmp	r3, #2
 800d760:	dd34      	ble.n	800d7cc <_dtoa_r+0x954>
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	9302      	str	r3, [sp, #8]
 800d766:	9b02      	ldr	r3, [sp, #8]
 800d768:	b96b      	cbnz	r3, 800d786 <_dtoa_r+0x90e>
 800d76a:	4631      	mov	r1, r6
 800d76c:	2205      	movs	r2, #5
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 fef4 	bl	800e55c <__multadd>
 800d774:	4601      	mov	r1, r0
 800d776:	4606      	mov	r6, r0
 800d778:	ee18 0a10 	vmov	r0, s16
 800d77c:	f001 f93e 	bl	800e9fc <__mcmp>
 800d780:	2800      	cmp	r0, #0
 800d782:	f73f adba 	bgt.w	800d2fa <_dtoa_r+0x482>
 800d786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d788:	9d01      	ldr	r5, [sp, #4]
 800d78a:	43db      	mvns	r3, r3
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	f04f 0800 	mov.w	r8, #0
 800d792:	4631      	mov	r1, r6
 800d794:	4620      	mov	r0, r4
 800d796:	f000 fed8 	bl	800e54a <_Bfree>
 800d79a:	2f00      	cmp	r7, #0
 800d79c:	f43f aea4 	beq.w	800d4e8 <_dtoa_r+0x670>
 800d7a0:	f1b8 0f00 	cmp.w	r8, #0
 800d7a4:	d005      	beq.n	800d7b2 <_dtoa_r+0x93a>
 800d7a6:	45b8      	cmp	r8, r7
 800d7a8:	d003      	beq.n	800d7b2 <_dtoa_r+0x93a>
 800d7aa:	4641      	mov	r1, r8
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 fecc 	bl	800e54a <_Bfree>
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f000 fec8 	bl	800e54a <_Bfree>
 800d7ba:	e695      	b.n	800d4e8 <_dtoa_r+0x670>
 800d7bc:	2600      	movs	r6, #0
 800d7be:	4637      	mov	r7, r6
 800d7c0:	e7e1      	b.n	800d786 <_dtoa_r+0x90e>
 800d7c2:	9700      	str	r7, [sp, #0]
 800d7c4:	4637      	mov	r7, r6
 800d7c6:	e598      	b.n	800d2fa <_dtoa_r+0x482>
 800d7c8:	40240000 	.word	0x40240000
 800d7cc:	9b08      	ldr	r3, [sp, #32]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f000 80c9 	beq.w	800d966 <_dtoa_r+0xaee>
 800d7d4:	9b03      	ldr	r3, [sp, #12]
 800d7d6:	9302      	str	r3, [sp, #8]
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	dd05      	ble.n	800d7e8 <_dtoa_r+0x970>
 800d7dc:	4639      	mov	r1, r7
 800d7de:	462a      	mov	r2, r5
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f001 f89b 	bl	800e91c <__lshift>
 800d7e6:	4607      	mov	r7, r0
 800d7e8:	f1b8 0f00 	cmp.w	r8, #0
 800d7ec:	d05a      	beq.n	800d8a4 <_dtoa_r+0xa2c>
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f000 fe85 	bl	800e500 <_Balloc>
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	b920      	cbnz	r0, 800d804 <_dtoa_r+0x98c>
 800d7fa:	4b87      	ldr	r3, [pc, #540]	; (800da18 <_dtoa_r+0xba0>)
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d802:	e477      	b.n	800d0f4 <_dtoa_r+0x27c>
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	3202      	adds	r2, #2
 800d808:	0092      	lsls	r2, r2, #2
 800d80a:	f107 010c 	add.w	r1, r7, #12
 800d80e:	300c      	adds	r0, #12
 800d810:	f7fc ff18 	bl	800a644 <memcpy>
 800d814:	2201      	movs	r2, #1
 800d816:	4629      	mov	r1, r5
 800d818:	4620      	mov	r0, r4
 800d81a:	f001 f87f 	bl	800e91c <__lshift>
 800d81e:	9b01      	ldr	r3, [sp, #4]
 800d820:	f103 0901 	add.w	r9, r3, #1
 800d824:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d828:	4413      	add	r3, r2
 800d82a:	9305      	str	r3, [sp, #20]
 800d82c:	f00a 0301 	and.w	r3, sl, #1
 800d830:	46b8      	mov	r8, r7
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	4607      	mov	r7, r0
 800d836:	4631      	mov	r1, r6
 800d838:	ee18 0a10 	vmov	r0, s16
 800d83c:	f7ff fa90 	bl	800cd60 <quorem>
 800d840:	4641      	mov	r1, r8
 800d842:	9002      	str	r0, [sp, #8]
 800d844:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d848:	ee18 0a10 	vmov	r0, s16
 800d84c:	f001 f8d6 	bl	800e9fc <__mcmp>
 800d850:	463a      	mov	r2, r7
 800d852:	9003      	str	r0, [sp, #12]
 800d854:	4631      	mov	r1, r6
 800d856:	4620      	mov	r0, r4
 800d858:	f001 f8ec 	bl	800ea34 <__mdiff>
 800d85c:	68c2      	ldr	r2, [r0, #12]
 800d85e:	f109 3bff 	add.w	fp, r9, #4294967295
 800d862:	4605      	mov	r5, r0
 800d864:	bb02      	cbnz	r2, 800d8a8 <_dtoa_r+0xa30>
 800d866:	4601      	mov	r1, r0
 800d868:	ee18 0a10 	vmov	r0, s16
 800d86c:	f001 f8c6 	bl	800e9fc <__mcmp>
 800d870:	4602      	mov	r2, r0
 800d872:	4629      	mov	r1, r5
 800d874:	4620      	mov	r0, r4
 800d876:	9207      	str	r2, [sp, #28]
 800d878:	f000 fe67 	bl	800e54a <_Bfree>
 800d87c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d880:	ea43 0102 	orr.w	r1, r3, r2
 800d884:	9b04      	ldr	r3, [sp, #16]
 800d886:	430b      	orrs	r3, r1
 800d888:	464d      	mov	r5, r9
 800d88a:	d10f      	bne.n	800d8ac <_dtoa_r+0xa34>
 800d88c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d890:	d02a      	beq.n	800d8e8 <_dtoa_r+0xa70>
 800d892:	9b03      	ldr	r3, [sp, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	dd02      	ble.n	800d89e <_dtoa_r+0xa26>
 800d898:	9b02      	ldr	r3, [sp, #8]
 800d89a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d89e:	f88b a000 	strb.w	sl, [fp]
 800d8a2:	e776      	b.n	800d792 <_dtoa_r+0x91a>
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	e7ba      	b.n	800d81e <_dtoa_r+0x9a6>
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	e7e2      	b.n	800d872 <_dtoa_r+0x9fa>
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	db04      	blt.n	800d8bc <_dtoa_r+0xa44>
 800d8b2:	9906      	ldr	r1, [sp, #24]
 800d8b4:	430b      	orrs	r3, r1
 800d8b6:	9904      	ldr	r1, [sp, #16]
 800d8b8:	430b      	orrs	r3, r1
 800d8ba:	d122      	bne.n	800d902 <_dtoa_r+0xa8a>
 800d8bc:	2a00      	cmp	r2, #0
 800d8be:	ddee      	ble.n	800d89e <_dtoa_r+0xa26>
 800d8c0:	ee18 1a10 	vmov	r1, s16
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f001 f828 	bl	800e91c <__lshift>
 800d8cc:	4631      	mov	r1, r6
 800d8ce:	ee08 0a10 	vmov	s16, r0
 800d8d2:	f001 f893 	bl	800e9fc <__mcmp>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	dc03      	bgt.n	800d8e2 <_dtoa_r+0xa6a>
 800d8da:	d1e0      	bne.n	800d89e <_dtoa_r+0xa26>
 800d8dc:	f01a 0f01 	tst.w	sl, #1
 800d8e0:	d0dd      	beq.n	800d89e <_dtoa_r+0xa26>
 800d8e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d8e6:	d1d7      	bne.n	800d898 <_dtoa_r+0xa20>
 800d8e8:	2339      	movs	r3, #57	; 0x39
 800d8ea:	f88b 3000 	strb.w	r3, [fp]
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	461d      	mov	r5, r3
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d8f8:	2a39      	cmp	r2, #57	; 0x39
 800d8fa:	d071      	beq.n	800d9e0 <_dtoa_r+0xb68>
 800d8fc:	3201      	adds	r2, #1
 800d8fe:	701a      	strb	r2, [r3, #0]
 800d900:	e747      	b.n	800d792 <_dtoa_r+0x91a>
 800d902:	2a00      	cmp	r2, #0
 800d904:	dd07      	ble.n	800d916 <_dtoa_r+0xa9e>
 800d906:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d90a:	d0ed      	beq.n	800d8e8 <_dtoa_r+0xa70>
 800d90c:	f10a 0301 	add.w	r3, sl, #1
 800d910:	f88b 3000 	strb.w	r3, [fp]
 800d914:	e73d      	b.n	800d792 <_dtoa_r+0x91a>
 800d916:	9b05      	ldr	r3, [sp, #20]
 800d918:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d91c:	4599      	cmp	r9, r3
 800d91e:	d047      	beq.n	800d9b0 <_dtoa_r+0xb38>
 800d920:	ee18 1a10 	vmov	r1, s16
 800d924:	2300      	movs	r3, #0
 800d926:	220a      	movs	r2, #10
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 fe17 	bl	800e55c <__multadd>
 800d92e:	45b8      	cmp	r8, r7
 800d930:	ee08 0a10 	vmov	s16, r0
 800d934:	f04f 0300 	mov.w	r3, #0
 800d938:	f04f 020a 	mov.w	r2, #10
 800d93c:	4641      	mov	r1, r8
 800d93e:	4620      	mov	r0, r4
 800d940:	d106      	bne.n	800d950 <_dtoa_r+0xad8>
 800d942:	f000 fe0b 	bl	800e55c <__multadd>
 800d946:	4680      	mov	r8, r0
 800d948:	4607      	mov	r7, r0
 800d94a:	f109 0901 	add.w	r9, r9, #1
 800d94e:	e772      	b.n	800d836 <_dtoa_r+0x9be>
 800d950:	f000 fe04 	bl	800e55c <__multadd>
 800d954:	4639      	mov	r1, r7
 800d956:	4680      	mov	r8, r0
 800d958:	2300      	movs	r3, #0
 800d95a:	220a      	movs	r2, #10
 800d95c:	4620      	mov	r0, r4
 800d95e:	f000 fdfd 	bl	800e55c <__multadd>
 800d962:	4607      	mov	r7, r0
 800d964:	e7f1      	b.n	800d94a <_dtoa_r+0xad2>
 800d966:	9b03      	ldr	r3, [sp, #12]
 800d968:	9302      	str	r3, [sp, #8]
 800d96a:	9d01      	ldr	r5, [sp, #4]
 800d96c:	ee18 0a10 	vmov	r0, s16
 800d970:	4631      	mov	r1, r6
 800d972:	f7ff f9f5 	bl	800cd60 <quorem>
 800d976:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d97a:	9b01      	ldr	r3, [sp, #4]
 800d97c:	f805 ab01 	strb.w	sl, [r5], #1
 800d980:	1aea      	subs	r2, r5, r3
 800d982:	9b02      	ldr	r3, [sp, #8]
 800d984:	4293      	cmp	r3, r2
 800d986:	dd09      	ble.n	800d99c <_dtoa_r+0xb24>
 800d988:	ee18 1a10 	vmov	r1, s16
 800d98c:	2300      	movs	r3, #0
 800d98e:	220a      	movs	r2, #10
 800d990:	4620      	mov	r0, r4
 800d992:	f000 fde3 	bl	800e55c <__multadd>
 800d996:	ee08 0a10 	vmov	s16, r0
 800d99a:	e7e7      	b.n	800d96c <_dtoa_r+0xaf4>
 800d99c:	9b02      	ldr	r3, [sp, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	bfc8      	it	gt
 800d9a2:	461d      	movgt	r5, r3
 800d9a4:	9b01      	ldr	r3, [sp, #4]
 800d9a6:	bfd8      	it	le
 800d9a8:	2501      	movle	r5, #1
 800d9aa:	441d      	add	r5, r3
 800d9ac:	f04f 0800 	mov.w	r8, #0
 800d9b0:	ee18 1a10 	vmov	r1, s16
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f000 ffb0 	bl	800e91c <__lshift>
 800d9bc:	4631      	mov	r1, r6
 800d9be:	ee08 0a10 	vmov	s16, r0
 800d9c2:	f001 f81b 	bl	800e9fc <__mcmp>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	dc91      	bgt.n	800d8ee <_dtoa_r+0xa76>
 800d9ca:	d102      	bne.n	800d9d2 <_dtoa_r+0xb5a>
 800d9cc:	f01a 0f01 	tst.w	sl, #1
 800d9d0:	d18d      	bne.n	800d8ee <_dtoa_r+0xa76>
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	461d      	mov	r5, r3
 800d9d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9da:	2a30      	cmp	r2, #48	; 0x30
 800d9dc:	d0fa      	beq.n	800d9d4 <_dtoa_r+0xb5c>
 800d9de:	e6d8      	b.n	800d792 <_dtoa_r+0x91a>
 800d9e0:	9a01      	ldr	r2, [sp, #4]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d184      	bne.n	800d8f0 <_dtoa_r+0xa78>
 800d9e6:	9b00      	ldr	r3, [sp, #0]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	2331      	movs	r3, #49	; 0x31
 800d9ee:	7013      	strb	r3, [r2, #0]
 800d9f0:	e6cf      	b.n	800d792 <_dtoa_r+0x91a>
 800d9f2:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <_dtoa_r+0xba4>)
 800d9f4:	f7ff ba97 	b.w	800cf26 <_dtoa_r+0xae>
 800d9f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f47f aa7b 	bne.w	800cef6 <_dtoa_r+0x7e>
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <_dtoa_r+0xba8>)
 800da02:	f7ff ba90 	b.w	800cf26 <_dtoa_r+0xae>
 800da06:	9b02      	ldr	r3, [sp, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	dcae      	bgt.n	800d96a <_dtoa_r+0xaf2>
 800da0c:	9b06      	ldr	r3, [sp, #24]
 800da0e:	2b02      	cmp	r3, #2
 800da10:	f73f aea9 	bgt.w	800d766 <_dtoa_r+0x8ee>
 800da14:	e7a9      	b.n	800d96a <_dtoa_r+0xaf2>
 800da16:	bf00      	nop
 800da18:	080108a9 	.word	0x080108a9
 800da1c:	0801087a 	.word	0x0801087a
 800da20:	080108a0 	.word	0x080108a0

0800da24 <_fclose_r>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	4606      	mov	r6, r0
 800da28:	460c      	mov	r4, r1
 800da2a:	b911      	cbnz	r1, 800da32 <_fclose_r+0xe>
 800da2c:	2500      	movs	r5, #0
 800da2e:	4628      	mov	r0, r5
 800da30:	bd70      	pop	{r4, r5, r6, pc}
 800da32:	b118      	cbz	r0, 800da3c <_fclose_r+0x18>
 800da34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800da36:	b90b      	cbnz	r3, 800da3c <_fclose_r+0x18>
 800da38:	f7fc fa34 	bl	8009ea4 <__sinit>
 800da3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da3e:	07d8      	lsls	r0, r3, #31
 800da40:	d405      	bmi.n	800da4e <_fclose_r+0x2a>
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	0599      	lsls	r1, r3, #22
 800da46:	d402      	bmi.n	800da4e <_fclose_r+0x2a>
 800da48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da4a:	f7fc fbad 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800da4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da52:	b93b      	cbnz	r3, 800da64 <_fclose_r+0x40>
 800da54:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800da56:	f015 0501 	ands.w	r5, r5, #1
 800da5a:	d1e7      	bne.n	800da2c <_fclose_r+0x8>
 800da5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5e:	f7fc fba4 	bl	800a1aa <__retarget_lock_release_recursive>
 800da62:	e7e4      	b.n	800da2e <_fclose_r+0xa>
 800da64:	4621      	mov	r1, r4
 800da66:	4630      	mov	r0, r6
 800da68:	f7fc f910 	bl	8009c8c <__sflush_r>
 800da6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800da6e:	4605      	mov	r5, r0
 800da70:	b133      	cbz	r3, 800da80 <_fclose_r+0x5c>
 800da72:	69e1      	ldr	r1, [r4, #28]
 800da74:	4630      	mov	r0, r6
 800da76:	4798      	blx	r3
 800da78:	2800      	cmp	r0, #0
 800da7a:	bfb8      	it	lt
 800da7c:	f04f 35ff 	movlt.w	r5, #4294967295
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	061a      	lsls	r2, r3, #24
 800da84:	d503      	bpl.n	800da8e <_fclose_r+0x6a>
 800da86:	6921      	ldr	r1, [r4, #16]
 800da88:	4630      	mov	r0, r6
 800da8a:	f7fc fa87 	bl	8009f9c <_free_r>
 800da8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da90:	b141      	cbz	r1, 800daa4 <_fclose_r+0x80>
 800da92:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800da96:	4299      	cmp	r1, r3
 800da98:	d002      	beq.n	800daa0 <_fclose_r+0x7c>
 800da9a:	4630      	mov	r0, r6
 800da9c:	f7fc fa7e 	bl	8009f9c <_free_r>
 800daa0:	2300      	movs	r3, #0
 800daa2:	6323      	str	r3, [r4, #48]	; 0x30
 800daa4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800daa6:	b121      	cbz	r1, 800dab2 <_fclose_r+0x8e>
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7fc fa77 	bl	8009f9c <_free_r>
 800daae:	2300      	movs	r3, #0
 800dab0:	6463      	str	r3, [r4, #68]	; 0x44
 800dab2:	f7fc f9df 	bl	8009e74 <__sfp_lock_acquire>
 800dab6:	2300      	movs	r3, #0
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dabc:	07db      	lsls	r3, r3, #31
 800dabe:	d402      	bmi.n	800dac6 <_fclose_r+0xa2>
 800dac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dac2:	f7fc fb72 	bl	800a1aa <__retarget_lock_release_recursive>
 800dac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dac8:	f7fc fb6d 	bl	800a1a6 <__retarget_lock_close_recursive>
 800dacc:	f7fc f9d8 	bl	8009e80 <__sfp_lock_release>
 800dad0:	e7ad      	b.n	800da2e <_fclose_r+0xa>
	...

0800dad4 <__libc_fini_array>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d07      	ldr	r5, [pc, #28]	; (800daf4 <__libc_fini_array+0x20>)
 800dad8:	4c07      	ldr	r4, [pc, #28]	; (800daf8 <__libc_fini_array+0x24>)
 800dada:	1b64      	subs	r4, r4, r5
 800dadc:	10a4      	asrs	r4, r4, #2
 800dade:	b91c      	cbnz	r4, 800dae8 <__libc_fini_array+0x14>
 800dae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae4:	f002 bc50 	b.w	8010388 <_fini>
 800dae8:	3c01      	subs	r4, #1
 800daea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800daee:	4798      	blx	r3
 800daf0:	e7f5      	b.n	800dade <__libc_fini_array+0xa>
 800daf2:	bf00      	nop
 800daf4:	08010b58 	.word	0x08010b58
 800daf8:	08010b5c 	.word	0x08010b5c

0800dafc <__sfvwrite_r>:
 800dafc:	6893      	ldr	r3, [r2, #8]
 800dafe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db02:	4606      	mov	r6, r0
 800db04:	460c      	mov	r4, r1
 800db06:	4690      	mov	r8, r2
 800db08:	b91b      	cbnz	r3, 800db12 <__sfvwrite_r+0x16>
 800db0a:	2000      	movs	r0, #0
 800db0c:	b003      	add	sp, #12
 800db0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db12:	898b      	ldrh	r3, [r1, #12]
 800db14:	0718      	lsls	r0, r3, #28
 800db16:	d550      	bpl.n	800dbba <__sfvwrite_r+0xbe>
 800db18:	690b      	ldr	r3, [r1, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d04d      	beq.n	800dbba <__sfvwrite_r+0xbe>
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	f8d8 7000 	ldr.w	r7, [r8]
 800db24:	f013 0902 	ands.w	r9, r3, #2
 800db28:	d16c      	bne.n	800dc04 <__sfvwrite_r+0x108>
 800db2a:	f013 0301 	ands.w	r3, r3, #1
 800db2e:	f000 809c 	beq.w	800dc6a <__sfvwrite_r+0x16e>
 800db32:	4648      	mov	r0, r9
 800db34:	46ca      	mov	sl, r9
 800db36:	46cb      	mov	fp, r9
 800db38:	f1bb 0f00 	cmp.w	fp, #0
 800db3c:	f000 8103 	beq.w	800dd46 <__sfvwrite_r+0x24a>
 800db40:	b950      	cbnz	r0, 800db58 <__sfvwrite_r+0x5c>
 800db42:	465a      	mov	r2, fp
 800db44:	210a      	movs	r1, #10
 800db46:	4650      	mov	r0, sl
 800db48:	f7f2 fb62 	bl	8000210 <memchr>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f000 80ff 	beq.w	800dd50 <__sfvwrite_r+0x254>
 800db52:	3001      	adds	r0, #1
 800db54:	eba0 090a 	sub.w	r9, r0, sl
 800db58:	6820      	ldr	r0, [r4, #0]
 800db5a:	6921      	ldr	r1, [r4, #16]
 800db5c:	6963      	ldr	r3, [r4, #20]
 800db5e:	45d9      	cmp	r9, fp
 800db60:	464a      	mov	r2, r9
 800db62:	bf28      	it	cs
 800db64:	465a      	movcs	r2, fp
 800db66:	4288      	cmp	r0, r1
 800db68:	f240 80f5 	bls.w	800dd56 <__sfvwrite_r+0x25a>
 800db6c:	68a5      	ldr	r5, [r4, #8]
 800db6e:	441d      	add	r5, r3
 800db70:	42aa      	cmp	r2, r5
 800db72:	f340 80f0 	ble.w	800dd56 <__sfvwrite_r+0x25a>
 800db76:	4651      	mov	r1, sl
 800db78:	462a      	mov	r2, r5
 800db7a:	f000 fca7 	bl	800e4cc <memmove>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	442b      	add	r3, r5
 800db82:	6023      	str	r3, [r4, #0]
 800db84:	4621      	mov	r1, r4
 800db86:	4630      	mov	r0, r6
 800db88:	f7fc f90e 	bl	8009da8 <_fflush_r>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d167      	bne.n	800dc60 <__sfvwrite_r+0x164>
 800db90:	ebb9 0905 	subs.w	r9, r9, r5
 800db94:	f040 80f7 	bne.w	800dd86 <__sfvwrite_r+0x28a>
 800db98:	4621      	mov	r1, r4
 800db9a:	4630      	mov	r0, r6
 800db9c:	f7fc f904 	bl	8009da8 <_fflush_r>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d15d      	bne.n	800dc60 <__sfvwrite_r+0x164>
 800dba4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800dba8:	44aa      	add	sl, r5
 800dbaa:	ebab 0b05 	sub.w	fp, fp, r5
 800dbae:	1b55      	subs	r5, r2, r5
 800dbb0:	f8c8 5008 	str.w	r5, [r8, #8]
 800dbb4:	2d00      	cmp	r5, #0
 800dbb6:	d1bf      	bne.n	800db38 <__sfvwrite_r+0x3c>
 800dbb8:	e7a7      	b.n	800db0a <__sfvwrite_r+0xe>
 800dbba:	4621      	mov	r1, r4
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	f001 fa03 	bl	800efc8 <__swsetup_r>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d0ab      	beq.n	800db1e <__sfvwrite_r+0x22>
 800dbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbca:	e79f      	b.n	800db0c <__sfvwrite_r+0x10>
 800dbcc:	e9d7 b900 	ldrd	fp, r9, [r7]
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	f1b9 0f00 	cmp.w	r9, #0
 800dbd6:	d0f9      	beq.n	800dbcc <__sfvwrite_r+0xd0>
 800dbd8:	45d1      	cmp	r9, sl
 800dbda:	464b      	mov	r3, r9
 800dbdc:	69e1      	ldr	r1, [r4, #28]
 800dbde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dbe0:	bf28      	it	cs
 800dbe2:	4653      	movcs	r3, sl
 800dbe4:	465a      	mov	r2, fp
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	47a8      	blx	r5
 800dbea:	2800      	cmp	r0, #0
 800dbec:	dd38      	ble.n	800dc60 <__sfvwrite_r+0x164>
 800dbee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbf2:	4483      	add	fp, r0
 800dbf4:	eba9 0900 	sub.w	r9, r9, r0
 800dbf8:	1a18      	subs	r0, r3, r0
 800dbfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d1e7      	bne.n	800dbd2 <__sfvwrite_r+0xd6>
 800dc02:	e782      	b.n	800db0a <__sfvwrite_r+0xe>
 800dc04:	f04f 0b00 	mov.w	fp, #0
 800dc08:	f8df a180 	ldr.w	sl, [pc, #384]	; 800dd8c <__sfvwrite_r+0x290>
 800dc0c:	46d9      	mov	r9, fp
 800dc0e:	e7e0      	b.n	800dbd2 <__sfvwrite_r+0xd6>
 800dc10:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800dc14:	3708      	adds	r7, #8
 800dc16:	f1ba 0f00 	cmp.w	sl, #0
 800dc1a:	d0f9      	beq.n	800dc10 <__sfvwrite_r+0x114>
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	6820      	ldr	r0, [r4, #0]
 800dc20:	68a2      	ldr	r2, [r4, #8]
 800dc22:	0599      	lsls	r1, r3, #22
 800dc24:	d563      	bpl.n	800dcee <__sfvwrite_r+0x1f2>
 800dc26:	4552      	cmp	r2, sl
 800dc28:	d836      	bhi.n	800dc98 <__sfvwrite_r+0x19c>
 800dc2a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800dc2e:	d033      	beq.n	800dc98 <__sfvwrite_r+0x19c>
 800dc30:	6921      	ldr	r1, [r4, #16]
 800dc32:	6965      	ldr	r5, [r4, #20]
 800dc34:	eba0 0b01 	sub.w	fp, r0, r1
 800dc38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc40:	f10b 0201 	add.w	r2, fp, #1
 800dc44:	106d      	asrs	r5, r5, #1
 800dc46:	4452      	add	r2, sl
 800dc48:	4295      	cmp	r5, r2
 800dc4a:	bf38      	it	cc
 800dc4c:	4615      	movcc	r5, r2
 800dc4e:	055b      	lsls	r3, r3, #21
 800dc50:	d53d      	bpl.n	800dcce <__sfvwrite_r+0x1d2>
 800dc52:	4629      	mov	r1, r5
 800dc54:	4630      	mov	r0, r6
 800dc56:	f7fc fab9 	bl	800a1cc <_malloc_r>
 800dc5a:	b948      	cbnz	r0, 800dc70 <__sfvwrite_r+0x174>
 800dc5c:	230c      	movs	r3, #12
 800dc5e:	6033      	str	r3, [r6, #0]
 800dc60:	89a3      	ldrh	r3, [r4, #12]
 800dc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc66:	81a3      	strh	r3, [r4, #12]
 800dc68:	e7ad      	b.n	800dbc6 <__sfvwrite_r+0xca>
 800dc6a:	4699      	mov	r9, r3
 800dc6c:	469a      	mov	sl, r3
 800dc6e:	e7d2      	b.n	800dc16 <__sfvwrite_r+0x11a>
 800dc70:	465a      	mov	r2, fp
 800dc72:	6921      	ldr	r1, [r4, #16]
 800dc74:	9001      	str	r0, [sp, #4]
 800dc76:	f7fc fce5 	bl	800a644 <memcpy>
 800dc7a:	89a2      	ldrh	r2, [r4, #12]
 800dc7c:	9b01      	ldr	r3, [sp, #4]
 800dc7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800dc82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc86:	81a2      	strh	r2, [r4, #12]
 800dc88:	6123      	str	r3, [r4, #16]
 800dc8a:	6165      	str	r5, [r4, #20]
 800dc8c:	445b      	add	r3, fp
 800dc8e:	eba5 050b 	sub.w	r5, r5, fp
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	4652      	mov	r2, sl
 800dc96:	60a5      	str	r5, [r4, #8]
 800dc98:	4552      	cmp	r2, sl
 800dc9a:	bf28      	it	cs
 800dc9c:	4652      	movcs	r2, sl
 800dc9e:	6820      	ldr	r0, [r4, #0]
 800dca0:	9201      	str	r2, [sp, #4]
 800dca2:	4649      	mov	r1, r9
 800dca4:	f000 fc12 	bl	800e4cc <memmove>
 800dca8:	68a3      	ldr	r3, [r4, #8]
 800dcaa:	9a01      	ldr	r2, [sp, #4]
 800dcac:	1a9b      	subs	r3, r3, r2
 800dcae:	60a3      	str	r3, [r4, #8]
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	441a      	add	r2, r3
 800dcb4:	4655      	mov	r5, sl
 800dcb6:	6022      	str	r2, [r4, #0]
 800dcb8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800dcbc:	44a9      	add	r9, r5
 800dcbe:	ebaa 0a05 	sub.w	sl, sl, r5
 800dcc2:	1b45      	subs	r5, r0, r5
 800dcc4:	f8c8 5008 	str.w	r5, [r8, #8]
 800dcc8:	2d00      	cmp	r5, #0
 800dcca:	d1a4      	bne.n	800dc16 <__sfvwrite_r+0x11a>
 800dccc:	e71d      	b.n	800db0a <__sfvwrite_r+0xe>
 800dcce:	462a      	mov	r2, r5
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f7fc fd2f 	bl	800a734 <_realloc_r>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d1d5      	bne.n	800dc88 <__sfvwrite_r+0x18c>
 800dcdc:	6921      	ldr	r1, [r4, #16]
 800dcde:	4630      	mov	r0, r6
 800dce0:	f7fc f95c 	bl	8009f9c <_free_r>
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcea:	81a3      	strh	r3, [r4, #12]
 800dcec:	e7b6      	b.n	800dc5c <__sfvwrite_r+0x160>
 800dcee:	6923      	ldr	r3, [r4, #16]
 800dcf0:	4283      	cmp	r3, r0
 800dcf2:	d302      	bcc.n	800dcfa <__sfvwrite_r+0x1fe>
 800dcf4:	6961      	ldr	r1, [r4, #20]
 800dcf6:	4551      	cmp	r1, sl
 800dcf8:	d915      	bls.n	800dd26 <__sfvwrite_r+0x22a>
 800dcfa:	4552      	cmp	r2, sl
 800dcfc:	bf28      	it	cs
 800dcfe:	4652      	movcs	r2, sl
 800dd00:	4649      	mov	r1, r9
 800dd02:	4615      	mov	r5, r2
 800dd04:	f000 fbe2 	bl	800e4cc <memmove>
 800dd08:	68a3      	ldr	r3, [r4, #8]
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	1b5b      	subs	r3, r3, r5
 800dd0e:	442a      	add	r2, r5
 800dd10:	60a3      	str	r3, [r4, #8]
 800dd12:	6022      	str	r2, [r4, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1cf      	bne.n	800dcb8 <__sfvwrite_r+0x1bc>
 800dd18:	4621      	mov	r1, r4
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	f7fc f844 	bl	8009da8 <_fflush_r>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d0c9      	beq.n	800dcb8 <__sfvwrite_r+0x1bc>
 800dd24:	e79c      	b.n	800dc60 <__sfvwrite_r+0x164>
 800dd26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd2a:	459a      	cmp	sl, r3
 800dd2c:	bf38      	it	cc
 800dd2e:	4653      	movcc	r3, sl
 800dd30:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd32:	fb93 f3f1 	sdiv	r3, r3, r1
 800dd36:	464a      	mov	r2, r9
 800dd38:	434b      	muls	r3, r1
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	69e1      	ldr	r1, [r4, #28]
 800dd3e:	47a8      	blx	r5
 800dd40:	1e05      	subs	r5, r0, #0
 800dd42:	dcb9      	bgt.n	800dcb8 <__sfvwrite_r+0x1bc>
 800dd44:	e78c      	b.n	800dc60 <__sfvwrite_r+0x164>
 800dd46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dd4a:	2000      	movs	r0, #0
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	e6f3      	b.n	800db38 <__sfvwrite_r+0x3c>
 800dd50:	f10b 0901 	add.w	r9, fp, #1
 800dd54:	e700      	b.n	800db58 <__sfvwrite_r+0x5c>
 800dd56:	4293      	cmp	r3, r2
 800dd58:	dc08      	bgt.n	800dd6c <__sfvwrite_r+0x270>
 800dd5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd5c:	69e1      	ldr	r1, [r4, #28]
 800dd5e:	4652      	mov	r2, sl
 800dd60:	4630      	mov	r0, r6
 800dd62:	47a8      	blx	r5
 800dd64:	1e05      	subs	r5, r0, #0
 800dd66:	f73f af13 	bgt.w	800db90 <__sfvwrite_r+0x94>
 800dd6a:	e779      	b.n	800dc60 <__sfvwrite_r+0x164>
 800dd6c:	4651      	mov	r1, sl
 800dd6e:	9201      	str	r2, [sp, #4]
 800dd70:	f000 fbac 	bl	800e4cc <memmove>
 800dd74:	9a01      	ldr	r2, [sp, #4]
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	1a9b      	subs	r3, r3, r2
 800dd7a:	60a3      	str	r3, [r4, #8]
 800dd7c:	6823      	ldr	r3, [r4, #0]
 800dd7e:	4413      	add	r3, r2
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	4615      	mov	r5, r2
 800dd84:	e704      	b.n	800db90 <__sfvwrite_r+0x94>
 800dd86:	2001      	movs	r0, #1
 800dd88:	e70c      	b.n	800dba4 <__sfvwrite_r+0xa8>
 800dd8a:	bf00      	nop
 800dd8c:	7ffffc00 	.word	0x7ffffc00

0800dd90 <rshift>:
 800dd90:	6903      	ldr	r3, [r0, #16]
 800dd92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd9e:	f100 0414 	add.w	r4, r0, #20
 800dda2:	dd45      	ble.n	800de30 <rshift+0xa0>
 800dda4:	f011 011f 	ands.w	r1, r1, #31
 800dda8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ddac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ddb0:	d10c      	bne.n	800ddcc <rshift+0x3c>
 800ddb2:	f100 0710 	add.w	r7, r0, #16
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	42b1      	cmp	r1, r6
 800ddba:	d334      	bcc.n	800de26 <rshift+0x96>
 800ddbc:	1a9b      	subs	r3, r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	1eea      	subs	r2, r5, #3
 800ddc2:	4296      	cmp	r6, r2
 800ddc4:	bf38      	it	cc
 800ddc6:	2300      	movcc	r3, #0
 800ddc8:	4423      	add	r3, r4
 800ddca:	e015      	b.n	800ddf8 <rshift+0x68>
 800ddcc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ddd0:	f1c1 0820 	rsb	r8, r1, #32
 800ddd4:	40cf      	lsrs	r7, r1
 800ddd6:	f105 0e04 	add.w	lr, r5, #4
 800ddda:	46a1      	mov	r9, r4
 800dddc:	4576      	cmp	r6, lr
 800ddde:	46f4      	mov	ip, lr
 800dde0:	d815      	bhi.n	800de0e <rshift+0x7e>
 800dde2:	1a9a      	subs	r2, r3, r2
 800dde4:	0092      	lsls	r2, r2, #2
 800dde6:	3a04      	subs	r2, #4
 800dde8:	3501      	adds	r5, #1
 800ddea:	42ae      	cmp	r6, r5
 800ddec:	bf38      	it	cc
 800ddee:	2200      	movcc	r2, #0
 800ddf0:	18a3      	adds	r3, r4, r2
 800ddf2:	50a7      	str	r7, [r4, r2]
 800ddf4:	b107      	cbz	r7, 800ddf8 <rshift+0x68>
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	1b1a      	subs	r2, r3, r4
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de00:	bf08      	it	eq
 800de02:	2300      	moveq	r3, #0
 800de04:	6102      	str	r2, [r0, #16]
 800de06:	bf08      	it	eq
 800de08:	6143      	streq	r3, [r0, #20]
 800de0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de0e:	f8dc c000 	ldr.w	ip, [ip]
 800de12:	fa0c fc08 	lsl.w	ip, ip, r8
 800de16:	ea4c 0707 	orr.w	r7, ip, r7
 800de1a:	f849 7b04 	str.w	r7, [r9], #4
 800de1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de22:	40cf      	lsrs	r7, r1
 800de24:	e7da      	b.n	800dddc <rshift+0x4c>
 800de26:	f851 cb04 	ldr.w	ip, [r1], #4
 800de2a:	f847 cf04 	str.w	ip, [r7, #4]!
 800de2e:	e7c3      	b.n	800ddb8 <rshift+0x28>
 800de30:	4623      	mov	r3, r4
 800de32:	e7e1      	b.n	800ddf8 <rshift+0x68>

0800de34 <__hexdig_fun>:
 800de34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de38:	2b09      	cmp	r3, #9
 800de3a:	d802      	bhi.n	800de42 <__hexdig_fun+0xe>
 800de3c:	3820      	subs	r0, #32
 800de3e:	b2c0      	uxtb	r0, r0
 800de40:	4770      	bx	lr
 800de42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de46:	2b05      	cmp	r3, #5
 800de48:	d801      	bhi.n	800de4e <__hexdig_fun+0x1a>
 800de4a:	3847      	subs	r0, #71	; 0x47
 800de4c:	e7f7      	b.n	800de3e <__hexdig_fun+0xa>
 800de4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de52:	2b05      	cmp	r3, #5
 800de54:	d801      	bhi.n	800de5a <__hexdig_fun+0x26>
 800de56:	3827      	subs	r0, #39	; 0x27
 800de58:	e7f1      	b.n	800de3e <__hexdig_fun+0xa>
 800de5a:	2000      	movs	r0, #0
 800de5c:	4770      	bx	lr
	...

0800de60 <__gethex>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	ed2d 8b02 	vpush	{d8}
 800de68:	b089      	sub	sp, #36	; 0x24
 800de6a:	ee08 0a10 	vmov	s16, r0
 800de6e:	9304      	str	r3, [sp, #16]
 800de70:	4bb4      	ldr	r3, [pc, #720]	; (800e144 <__gethex+0x2e4>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	9301      	str	r3, [sp, #4]
 800de76:	4618      	mov	r0, r3
 800de78:	468b      	mov	fp, r1
 800de7a:	4690      	mov	r8, r2
 800de7c:	f7f2 f9ba 	bl	80001f4 <strlen>
 800de80:	9b01      	ldr	r3, [sp, #4]
 800de82:	f8db 2000 	ldr.w	r2, [fp]
 800de86:	4403      	add	r3, r0
 800de88:	4682      	mov	sl, r0
 800de8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	1c93      	adds	r3, r2, #2
 800de92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de9a:	32fe      	adds	r2, #254	; 0xfe
 800de9c:	18d1      	adds	r1, r2, r3
 800de9e:	461f      	mov	r7, r3
 800dea0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dea4:	9100      	str	r1, [sp, #0]
 800dea6:	2830      	cmp	r0, #48	; 0x30
 800dea8:	d0f8      	beq.n	800de9c <__gethex+0x3c>
 800deaa:	f7ff ffc3 	bl	800de34 <__hexdig_fun>
 800deae:	4604      	mov	r4, r0
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d13a      	bne.n	800df2a <__gethex+0xca>
 800deb4:	9901      	ldr	r1, [sp, #4]
 800deb6:	4652      	mov	r2, sl
 800deb8:	4638      	mov	r0, r7
 800deba:	f7fc feb1 	bl	800ac20 <strncmp>
 800debe:	4605      	mov	r5, r0
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d168      	bne.n	800df96 <__gethex+0x136>
 800dec4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dec8:	eb07 060a 	add.w	r6, r7, sl
 800decc:	f7ff ffb2 	bl	800de34 <__hexdig_fun>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d062      	beq.n	800df9a <__gethex+0x13a>
 800ded4:	4633      	mov	r3, r6
 800ded6:	7818      	ldrb	r0, [r3, #0]
 800ded8:	2830      	cmp	r0, #48	; 0x30
 800deda:	461f      	mov	r7, r3
 800dedc:	f103 0301 	add.w	r3, r3, #1
 800dee0:	d0f9      	beq.n	800ded6 <__gethex+0x76>
 800dee2:	f7ff ffa7 	bl	800de34 <__hexdig_fun>
 800dee6:	2301      	movs	r3, #1
 800dee8:	fab0 f480 	clz	r4, r0
 800deec:	0964      	lsrs	r4, r4, #5
 800deee:	4635      	mov	r5, r6
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	463a      	mov	r2, r7
 800def4:	4616      	mov	r6, r2
 800def6:	3201      	adds	r2, #1
 800def8:	7830      	ldrb	r0, [r6, #0]
 800defa:	f7ff ff9b 	bl	800de34 <__hexdig_fun>
 800defe:	2800      	cmp	r0, #0
 800df00:	d1f8      	bne.n	800def4 <__gethex+0x94>
 800df02:	9901      	ldr	r1, [sp, #4]
 800df04:	4652      	mov	r2, sl
 800df06:	4630      	mov	r0, r6
 800df08:	f7fc fe8a 	bl	800ac20 <strncmp>
 800df0c:	b980      	cbnz	r0, 800df30 <__gethex+0xd0>
 800df0e:	b94d      	cbnz	r5, 800df24 <__gethex+0xc4>
 800df10:	eb06 050a 	add.w	r5, r6, sl
 800df14:	462a      	mov	r2, r5
 800df16:	4616      	mov	r6, r2
 800df18:	3201      	adds	r2, #1
 800df1a:	7830      	ldrb	r0, [r6, #0]
 800df1c:	f7ff ff8a 	bl	800de34 <__hexdig_fun>
 800df20:	2800      	cmp	r0, #0
 800df22:	d1f8      	bne.n	800df16 <__gethex+0xb6>
 800df24:	1bad      	subs	r5, r5, r6
 800df26:	00ad      	lsls	r5, r5, #2
 800df28:	e004      	b.n	800df34 <__gethex+0xd4>
 800df2a:	2400      	movs	r4, #0
 800df2c:	4625      	mov	r5, r4
 800df2e:	e7e0      	b.n	800def2 <__gethex+0x92>
 800df30:	2d00      	cmp	r5, #0
 800df32:	d1f7      	bne.n	800df24 <__gethex+0xc4>
 800df34:	7833      	ldrb	r3, [r6, #0]
 800df36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df3a:	2b50      	cmp	r3, #80	; 0x50
 800df3c:	d13b      	bne.n	800dfb6 <__gethex+0x156>
 800df3e:	7873      	ldrb	r3, [r6, #1]
 800df40:	2b2b      	cmp	r3, #43	; 0x2b
 800df42:	d02c      	beq.n	800df9e <__gethex+0x13e>
 800df44:	2b2d      	cmp	r3, #45	; 0x2d
 800df46:	d02e      	beq.n	800dfa6 <__gethex+0x146>
 800df48:	1c71      	adds	r1, r6, #1
 800df4a:	f04f 0900 	mov.w	r9, #0
 800df4e:	7808      	ldrb	r0, [r1, #0]
 800df50:	f7ff ff70 	bl	800de34 <__hexdig_fun>
 800df54:	1e43      	subs	r3, r0, #1
 800df56:	b2db      	uxtb	r3, r3
 800df58:	2b18      	cmp	r3, #24
 800df5a:	d82c      	bhi.n	800dfb6 <__gethex+0x156>
 800df5c:	f1a0 0210 	sub.w	r2, r0, #16
 800df60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df64:	f7ff ff66 	bl	800de34 <__hexdig_fun>
 800df68:	1e43      	subs	r3, r0, #1
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	2b18      	cmp	r3, #24
 800df6e:	d91d      	bls.n	800dfac <__gethex+0x14c>
 800df70:	f1b9 0f00 	cmp.w	r9, #0
 800df74:	d000      	beq.n	800df78 <__gethex+0x118>
 800df76:	4252      	negs	r2, r2
 800df78:	4415      	add	r5, r2
 800df7a:	f8cb 1000 	str.w	r1, [fp]
 800df7e:	b1e4      	cbz	r4, 800dfba <__gethex+0x15a>
 800df80:	9b00      	ldr	r3, [sp, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	bf14      	ite	ne
 800df86:	2700      	movne	r7, #0
 800df88:	2706      	moveq	r7, #6
 800df8a:	4638      	mov	r0, r7
 800df8c:	b009      	add	sp, #36	; 0x24
 800df8e:	ecbd 8b02 	vpop	{d8}
 800df92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df96:	463e      	mov	r6, r7
 800df98:	4625      	mov	r5, r4
 800df9a:	2401      	movs	r4, #1
 800df9c:	e7ca      	b.n	800df34 <__gethex+0xd4>
 800df9e:	f04f 0900 	mov.w	r9, #0
 800dfa2:	1cb1      	adds	r1, r6, #2
 800dfa4:	e7d3      	b.n	800df4e <__gethex+0xee>
 800dfa6:	f04f 0901 	mov.w	r9, #1
 800dfaa:	e7fa      	b.n	800dfa2 <__gethex+0x142>
 800dfac:	230a      	movs	r3, #10
 800dfae:	fb03 0202 	mla	r2, r3, r2, r0
 800dfb2:	3a10      	subs	r2, #16
 800dfb4:	e7d4      	b.n	800df60 <__gethex+0x100>
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	e7df      	b.n	800df7a <__gethex+0x11a>
 800dfba:	1bf3      	subs	r3, r6, r7
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	2b07      	cmp	r3, #7
 800dfc2:	dc0b      	bgt.n	800dfdc <__gethex+0x17c>
 800dfc4:	ee18 0a10 	vmov	r0, s16
 800dfc8:	f000 fa9a 	bl	800e500 <_Balloc>
 800dfcc:	4604      	mov	r4, r0
 800dfce:	b940      	cbnz	r0, 800dfe2 <__gethex+0x182>
 800dfd0:	4b5d      	ldr	r3, [pc, #372]	; (800e148 <__gethex+0x2e8>)
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	21de      	movs	r1, #222	; 0xde
 800dfd6:	485d      	ldr	r0, [pc, #372]	; (800e14c <__gethex+0x2ec>)
 800dfd8:	f001 f890 	bl	800f0fc <__assert_func>
 800dfdc:	3101      	adds	r1, #1
 800dfde:	105b      	asrs	r3, r3, #1
 800dfe0:	e7ee      	b.n	800dfc0 <__gethex+0x160>
 800dfe2:	f100 0914 	add.w	r9, r0, #20
 800dfe6:	f04f 0b00 	mov.w	fp, #0
 800dfea:	f1ca 0301 	rsb	r3, sl, #1
 800dfee:	f8cd 9008 	str.w	r9, [sp, #8]
 800dff2:	f8cd b000 	str.w	fp, [sp]
 800dff6:	9306      	str	r3, [sp, #24]
 800dff8:	42b7      	cmp	r7, r6
 800dffa:	d340      	bcc.n	800e07e <__gethex+0x21e>
 800dffc:	9802      	ldr	r0, [sp, #8]
 800dffe:	9b00      	ldr	r3, [sp, #0]
 800e000:	f840 3b04 	str.w	r3, [r0], #4
 800e004:	eba0 0009 	sub.w	r0, r0, r9
 800e008:	1080      	asrs	r0, r0, #2
 800e00a:	0146      	lsls	r6, r0, #5
 800e00c:	6120      	str	r0, [r4, #16]
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 fb34 	bl	800e67c <__hi0bits>
 800e014:	1a30      	subs	r0, r6, r0
 800e016:	f8d8 6000 	ldr.w	r6, [r8]
 800e01a:	42b0      	cmp	r0, r6
 800e01c:	dd63      	ble.n	800e0e6 <__gethex+0x286>
 800e01e:	1b87      	subs	r7, r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	4620      	mov	r0, r4
 800e024:	f000 febe 	bl	800eda4 <__any_on>
 800e028:	4682      	mov	sl, r0
 800e02a:	b1a8      	cbz	r0, 800e058 <__gethex+0x1f8>
 800e02c:	1e7b      	subs	r3, r7, #1
 800e02e:	1159      	asrs	r1, r3, #5
 800e030:	f003 021f 	and.w	r2, r3, #31
 800e034:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e038:	f04f 0a01 	mov.w	sl, #1
 800e03c:	fa0a f202 	lsl.w	r2, sl, r2
 800e040:	420a      	tst	r2, r1
 800e042:	d009      	beq.n	800e058 <__gethex+0x1f8>
 800e044:	4553      	cmp	r3, sl
 800e046:	dd05      	ble.n	800e054 <__gethex+0x1f4>
 800e048:	1eb9      	subs	r1, r7, #2
 800e04a:	4620      	mov	r0, r4
 800e04c:	f000 feaa 	bl	800eda4 <__any_on>
 800e050:	2800      	cmp	r0, #0
 800e052:	d145      	bne.n	800e0e0 <__gethex+0x280>
 800e054:	f04f 0a02 	mov.w	sl, #2
 800e058:	4639      	mov	r1, r7
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7ff fe98 	bl	800dd90 <rshift>
 800e060:	443d      	add	r5, r7
 800e062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e066:	42ab      	cmp	r3, r5
 800e068:	da4c      	bge.n	800e104 <__gethex+0x2a4>
 800e06a:	ee18 0a10 	vmov	r0, s16
 800e06e:	4621      	mov	r1, r4
 800e070:	f000 fa6b 	bl	800e54a <_Bfree>
 800e074:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e076:	2300      	movs	r3, #0
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	27a3      	movs	r7, #163	; 0xa3
 800e07c:	e785      	b.n	800df8a <__gethex+0x12a>
 800e07e:	1e73      	subs	r3, r6, #1
 800e080:	9a05      	ldr	r2, [sp, #20]
 800e082:	9303      	str	r3, [sp, #12]
 800e084:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e088:	4293      	cmp	r3, r2
 800e08a:	d019      	beq.n	800e0c0 <__gethex+0x260>
 800e08c:	f1bb 0f20 	cmp.w	fp, #32
 800e090:	d107      	bne.n	800e0a2 <__gethex+0x242>
 800e092:	9b02      	ldr	r3, [sp, #8]
 800e094:	9a00      	ldr	r2, [sp, #0]
 800e096:	f843 2b04 	str.w	r2, [r3], #4
 800e09a:	9302      	str	r3, [sp, #8]
 800e09c:	2300      	movs	r3, #0
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	469b      	mov	fp, r3
 800e0a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e0a6:	f7ff fec5 	bl	800de34 <__hexdig_fun>
 800e0aa:	9b00      	ldr	r3, [sp, #0]
 800e0ac:	f000 000f 	and.w	r0, r0, #15
 800e0b0:	fa00 f00b 	lsl.w	r0, r0, fp
 800e0b4:	4303      	orrs	r3, r0
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	f10b 0b04 	add.w	fp, fp, #4
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	e00d      	b.n	800e0dc <__gethex+0x27c>
 800e0c0:	9b03      	ldr	r3, [sp, #12]
 800e0c2:	9a06      	ldr	r2, [sp, #24]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	42bb      	cmp	r3, r7
 800e0c8:	d3e0      	bcc.n	800e08c <__gethex+0x22c>
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	9901      	ldr	r1, [sp, #4]
 800e0ce:	9307      	str	r3, [sp, #28]
 800e0d0:	4652      	mov	r2, sl
 800e0d2:	f7fc fda5 	bl	800ac20 <strncmp>
 800e0d6:	9b07      	ldr	r3, [sp, #28]
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d1d7      	bne.n	800e08c <__gethex+0x22c>
 800e0dc:	461e      	mov	r6, r3
 800e0de:	e78b      	b.n	800dff8 <__gethex+0x198>
 800e0e0:	f04f 0a03 	mov.w	sl, #3
 800e0e4:	e7b8      	b.n	800e058 <__gethex+0x1f8>
 800e0e6:	da0a      	bge.n	800e0fe <__gethex+0x29e>
 800e0e8:	1a37      	subs	r7, r6, r0
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	ee18 0a10 	vmov	r0, s16
 800e0f0:	463a      	mov	r2, r7
 800e0f2:	f000 fc13 	bl	800e91c <__lshift>
 800e0f6:	1bed      	subs	r5, r5, r7
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	f100 0914 	add.w	r9, r0, #20
 800e0fe:	f04f 0a00 	mov.w	sl, #0
 800e102:	e7ae      	b.n	800e062 <__gethex+0x202>
 800e104:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e108:	42a8      	cmp	r0, r5
 800e10a:	dd72      	ble.n	800e1f2 <__gethex+0x392>
 800e10c:	1b45      	subs	r5, r0, r5
 800e10e:	42ae      	cmp	r6, r5
 800e110:	dc36      	bgt.n	800e180 <__gethex+0x320>
 800e112:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e116:	2b02      	cmp	r3, #2
 800e118:	d02a      	beq.n	800e170 <__gethex+0x310>
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	d02c      	beq.n	800e178 <__gethex+0x318>
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d11c      	bne.n	800e15c <__gethex+0x2fc>
 800e122:	42ae      	cmp	r6, r5
 800e124:	d11a      	bne.n	800e15c <__gethex+0x2fc>
 800e126:	2e01      	cmp	r6, #1
 800e128:	d112      	bne.n	800e150 <__gethex+0x2f0>
 800e12a:	9a04      	ldr	r2, [sp, #16]
 800e12c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e130:	6013      	str	r3, [r2, #0]
 800e132:	2301      	movs	r3, #1
 800e134:	6123      	str	r3, [r4, #16]
 800e136:	f8c9 3000 	str.w	r3, [r9]
 800e13a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e13c:	2762      	movs	r7, #98	; 0x62
 800e13e:	601c      	str	r4, [r3, #0]
 800e140:	e723      	b.n	800df8a <__gethex+0x12a>
 800e142:	bf00      	nop
 800e144:	0801097c 	.word	0x0801097c
 800e148:	080108a9 	.word	0x080108a9
 800e14c:	08010915 	.word	0x08010915
 800e150:	1e71      	subs	r1, r6, #1
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fe26 	bl	800eda4 <__any_on>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1e6      	bne.n	800e12a <__gethex+0x2ca>
 800e15c:	ee18 0a10 	vmov	r0, s16
 800e160:	4621      	mov	r1, r4
 800e162:	f000 f9f2 	bl	800e54a <_Bfree>
 800e166:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e168:	2300      	movs	r3, #0
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	2750      	movs	r7, #80	; 0x50
 800e16e:	e70c      	b.n	800df8a <__gethex+0x12a>
 800e170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1f2      	bne.n	800e15c <__gethex+0x2fc>
 800e176:	e7d8      	b.n	800e12a <__gethex+0x2ca>
 800e178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1d5      	bne.n	800e12a <__gethex+0x2ca>
 800e17e:	e7ed      	b.n	800e15c <__gethex+0x2fc>
 800e180:	1e6f      	subs	r7, r5, #1
 800e182:	f1ba 0f00 	cmp.w	sl, #0
 800e186:	d131      	bne.n	800e1ec <__gethex+0x38c>
 800e188:	b127      	cbz	r7, 800e194 <__gethex+0x334>
 800e18a:	4639      	mov	r1, r7
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 fe09 	bl	800eda4 <__any_on>
 800e192:	4682      	mov	sl, r0
 800e194:	117b      	asrs	r3, r7, #5
 800e196:	2101      	movs	r1, #1
 800e198:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e19c:	f007 071f 	and.w	r7, r7, #31
 800e1a0:	fa01 f707 	lsl.w	r7, r1, r7
 800e1a4:	421f      	tst	r7, r3
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	bf18      	it	ne
 800e1ac:	f04a 0a02 	orrne.w	sl, sl, #2
 800e1b0:	1b76      	subs	r6, r6, r5
 800e1b2:	f7ff fded 	bl	800dd90 <rshift>
 800e1b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e1ba:	2702      	movs	r7, #2
 800e1bc:	f1ba 0f00 	cmp.w	sl, #0
 800e1c0:	d048      	beq.n	800e254 <__gethex+0x3f4>
 800e1c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	d015      	beq.n	800e1f6 <__gethex+0x396>
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d017      	beq.n	800e1fe <__gethex+0x39e>
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d109      	bne.n	800e1e6 <__gethex+0x386>
 800e1d2:	f01a 0f02 	tst.w	sl, #2
 800e1d6:	d006      	beq.n	800e1e6 <__gethex+0x386>
 800e1d8:	f8d9 0000 	ldr.w	r0, [r9]
 800e1dc:	ea4a 0a00 	orr.w	sl, sl, r0
 800e1e0:	f01a 0f01 	tst.w	sl, #1
 800e1e4:	d10e      	bne.n	800e204 <__gethex+0x3a4>
 800e1e6:	f047 0710 	orr.w	r7, r7, #16
 800e1ea:	e033      	b.n	800e254 <__gethex+0x3f4>
 800e1ec:	f04f 0a01 	mov.w	sl, #1
 800e1f0:	e7d0      	b.n	800e194 <__gethex+0x334>
 800e1f2:	2701      	movs	r7, #1
 800e1f4:	e7e2      	b.n	800e1bc <__gethex+0x35c>
 800e1f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1f8:	f1c3 0301 	rsb	r3, r3, #1
 800e1fc:	9315      	str	r3, [sp, #84]	; 0x54
 800e1fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e200:	2b00      	cmp	r3, #0
 800e202:	d0f0      	beq.n	800e1e6 <__gethex+0x386>
 800e204:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e208:	f104 0314 	add.w	r3, r4, #20
 800e20c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e210:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e214:	f04f 0c00 	mov.w	ip, #0
 800e218:	4618      	mov	r0, r3
 800e21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e21e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e222:	d01c      	beq.n	800e25e <__gethex+0x3fe>
 800e224:	3201      	adds	r2, #1
 800e226:	6002      	str	r2, [r0, #0]
 800e228:	2f02      	cmp	r7, #2
 800e22a:	f104 0314 	add.w	r3, r4, #20
 800e22e:	d13f      	bne.n	800e2b0 <__gethex+0x450>
 800e230:	f8d8 2000 	ldr.w	r2, [r8]
 800e234:	3a01      	subs	r2, #1
 800e236:	42b2      	cmp	r2, r6
 800e238:	d10a      	bne.n	800e250 <__gethex+0x3f0>
 800e23a:	1171      	asrs	r1, r6, #5
 800e23c:	2201      	movs	r2, #1
 800e23e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e242:	f006 061f 	and.w	r6, r6, #31
 800e246:	fa02 f606 	lsl.w	r6, r2, r6
 800e24a:	421e      	tst	r6, r3
 800e24c:	bf18      	it	ne
 800e24e:	4617      	movne	r7, r2
 800e250:	f047 0720 	orr.w	r7, r7, #32
 800e254:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e256:	601c      	str	r4, [r3, #0]
 800e258:	9b04      	ldr	r3, [sp, #16]
 800e25a:	601d      	str	r5, [r3, #0]
 800e25c:	e695      	b.n	800df8a <__gethex+0x12a>
 800e25e:	4299      	cmp	r1, r3
 800e260:	f843 cc04 	str.w	ip, [r3, #-4]
 800e264:	d8d8      	bhi.n	800e218 <__gethex+0x3b8>
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	459b      	cmp	fp, r3
 800e26a:	db19      	blt.n	800e2a0 <__gethex+0x440>
 800e26c:	6861      	ldr	r1, [r4, #4]
 800e26e:	ee18 0a10 	vmov	r0, s16
 800e272:	3101      	adds	r1, #1
 800e274:	f000 f944 	bl	800e500 <_Balloc>
 800e278:	4681      	mov	r9, r0
 800e27a:	b918      	cbnz	r0, 800e284 <__gethex+0x424>
 800e27c:	4b1a      	ldr	r3, [pc, #104]	; (800e2e8 <__gethex+0x488>)
 800e27e:	4602      	mov	r2, r0
 800e280:	2184      	movs	r1, #132	; 0x84
 800e282:	e6a8      	b.n	800dfd6 <__gethex+0x176>
 800e284:	6922      	ldr	r2, [r4, #16]
 800e286:	3202      	adds	r2, #2
 800e288:	f104 010c 	add.w	r1, r4, #12
 800e28c:	0092      	lsls	r2, r2, #2
 800e28e:	300c      	adds	r0, #12
 800e290:	f7fc f9d8 	bl	800a644 <memcpy>
 800e294:	4621      	mov	r1, r4
 800e296:	ee18 0a10 	vmov	r0, s16
 800e29a:	f000 f956 	bl	800e54a <_Bfree>
 800e29e:	464c      	mov	r4, r9
 800e2a0:	6923      	ldr	r3, [r4, #16]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e2a8:	6122      	str	r2, [r4, #16]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	615a      	str	r2, [r3, #20]
 800e2ae:	e7bb      	b.n	800e228 <__gethex+0x3c8>
 800e2b0:	6922      	ldr	r2, [r4, #16]
 800e2b2:	455a      	cmp	r2, fp
 800e2b4:	dd0b      	ble.n	800e2ce <__gethex+0x46e>
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7ff fd69 	bl	800dd90 <rshift>
 800e2be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2c2:	3501      	adds	r5, #1
 800e2c4:	42ab      	cmp	r3, r5
 800e2c6:	f6ff aed0 	blt.w	800e06a <__gethex+0x20a>
 800e2ca:	2701      	movs	r7, #1
 800e2cc:	e7c0      	b.n	800e250 <__gethex+0x3f0>
 800e2ce:	f016 061f 	ands.w	r6, r6, #31
 800e2d2:	d0fa      	beq.n	800e2ca <__gethex+0x46a>
 800e2d4:	4453      	add	r3, sl
 800e2d6:	f1c6 0620 	rsb	r6, r6, #32
 800e2da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e2de:	f000 f9cd 	bl	800e67c <__hi0bits>
 800e2e2:	42b0      	cmp	r0, r6
 800e2e4:	dbe7      	blt.n	800e2b6 <__gethex+0x456>
 800e2e6:	e7f0      	b.n	800e2ca <__gethex+0x46a>
 800e2e8:	080108a9 	.word	0x080108a9

0800e2ec <L_shift>:
 800e2ec:	f1c2 0208 	rsb	r2, r2, #8
 800e2f0:	0092      	lsls	r2, r2, #2
 800e2f2:	b570      	push	{r4, r5, r6, lr}
 800e2f4:	f1c2 0620 	rsb	r6, r2, #32
 800e2f8:	6843      	ldr	r3, [r0, #4]
 800e2fa:	6804      	ldr	r4, [r0, #0]
 800e2fc:	fa03 f506 	lsl.w	r5, r3, r6
 800e300:	432c      	orrs	r4, r5
 800e302:	40d3      	lsrs	r3, r2
 800e304:	6004      	str	r4, [r0, #0]
 800e306:	f840 3f04 	str.w	r3, [r0, #4]!
 800e30a:	4288      	cmp	r0, r1
 800e30c:	d3f4      	bcc.n	800e2f8 <L_shift+0xc>
 800e30e:	bd70      	pop	{r4, r5, r6, pc}

0800e310 <__match>:
 800e310:	b530      	push	{r4, r5, lr}
 800e312:	6803      	ldr	r3, [r0, #0]
 800e314:	3301      	adds	r3, #1
 800e316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e31a:	b914      	cbnz	r4, 800e322 <__match+0x12>
 800e31c:	6003      	str	r3, [r0, #0]
 800e31e:	2001      	movs	r0, #1
 800e320:	bd30      	pop	{r4, r5, pc}
 800e322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e326:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e32a:	2d19      	cmp	r5, #25
 800e32c:	bf98      	it	ls
 800e32e:	3220      	addls	r2, #32
 800e330:	42a2      	cmp	r2, r4
 800e332:	d0f0      	beq.n	800e316 <__match+0x6>
 800e334:	2000      	movs	r0, #0
 800e336:	e7f3      	b.n	800e320 <__match+0x10>

0800e338 <__hexnan>:
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	680b      	ldr	r3, [r1, #0]
 800e33e:	115e      	asrs	r6, r3, #5
 800e340:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e344:	f013 031f 	ands.w	r3, r3, #31
 800e348:	b087      	sub	sp, #28
 800e34a:	bf18      	it	ne
 800e34c:	3604      	addne	r6, #4
 800e34e:	2500      	movs	r5, #0
 800e350:	1f37      	subs	r7, r6, #4
 800e352:	4690      	mov	r8, r2
 800e354:	6802      	ldr	r2, [r0, #0]
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	4682      	mov	sl, r0
 800e35a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e35e:	46b9      	mov	r9, r7
 800e360:	463c      	mov	r4, r7
 800e362:	9502      	str	r5, [sp, #8]
 800e364:	46ab      	mov	fp, r5
 800e366:	7851      	ldrb	r1, [r2, #1]
 800e368:	1c53      	adds	r3, r2, #1
 800e36a:	9303      	str	r3, [sp, #12]
 800e36c:	b341      	cbz	r1, 800e3c0 <__hexnan+0x88>
 800e36e:	4608      	mov	r0, r1
 800e370:	9205      	str	r2, [sp, #20]
 800e372:	9104      	str	r1, [sp, #16]
 800e374:	f7ff fd5e 	bl	800de34 <__hexdig_fun>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d14f      	bne.n	800e41c <__hexnan+0xe4>
 800e37c:	9904      	ldr	r1, [sp, #16]
 800e37e:	9a05      	ldr	r2, [sp, #20]
 800e380:	2920      	cmp	r1, #32
 800e382:	d818      	bhi.n	800e3b6 <__hexnan+0x7e>
 800e384:	9b02      	ldr	r3, [sp, #8]
 800e386:	459b      	cmp	fp, r3
 800e388:	dd13      	ble.n	800e3b2 <__hexnan+0x7a>
 800e38a:	454c      	cmp	r4, r9
 800e38c:	d206      	bcs.n	800e39c <__hexnan+0x64>
 800e38e:	2d07      	cmp	r5, #7
 800e390:	dc04      	bgt.n	800e39c <__hexnan+0x64>
 800e392:	462a      	mov	r2, r5
 800e394:	4649      	mov	r1, r9
 800e396:	4620      	mov	r0, r4
 800e398:	f7ff ffa8 	bl	800e2ec <L_shift>
 800e39c:	4544      	cmp	r4, r8
 800e39e:	d950      	bls.n	800e442 <__hexnan+0x10a>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f1a4 0904 	sub.w	r9, r4, #4
 800e3a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3aa:	f8cd b008 	str.w	fp, [sp, #8]
 800e3ae:	464c      	mov	r4, r9
 800e3b0:	461d      	mov	r5, r3
 800e3b2:	9a03      	ldr	r2, [sp, #12]
 800e3b4:	e7d7      	b.n	800e366 <__hexnan+0x2e>
 800e3b6:	2929      	cmp	r1, #41	; 0x29
 800e3b8:	d156      	bne.n	800e468 <__hexnan+0x130>
 800e3ba:	3202      	adds	r2, #2
 800e3bc:	f8ca 2000 	str.w	r2, [sl]
 800e3c0:	f1bb 0f00 	cmp.w	fp, #0
 800e3c4:	d050      	beq.n	800e468 <__hexnan+0x130>
 800e3c6:	454c      	cmp	r4, r9
 800e3c8:	d206      	bcs.n	800e3d8 <__hexnan+0xa0>
 800e3ca:	2d07      	cmp	r5, #7
 800e3cc:	dc04      	bgt.n	800e3d8 <__hexnan+0xa0>
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	4649      	mov	r1, r9
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f7ff ff8a 	bl	800e2ec <L_shift>
 800e3d8:	4544      	cmp	r4, r8
 800e3da:	d934      	bls.n	800e446 <__hexnan+0x10e>
 800e3dc:	f1a8 0204 	sub.w	r2, r8, #4
 800e3e0:	4623      	mov	r3, r4
 800e3e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3ea:	429f      	cmp	r7, r3
 800e3ec:	d2f9      	bcs.n	800e3e2 <__hexnan+0xaa>
 800e3ee:	1b3b      	subs	r3, r7, r4
 800e3f0:	f023 0303 	bic.w	r3, r3, #3
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	3401      	adds	r4, #1
 800e3f8:	3e03      	subs	r6, #3
 800e3fa:	42b4      	cmp	r4, r6
 800e3fc:	bf88      	it	hi
 800e3fe:	2304      	movhi	r3, #4
 800e400:	4443      	add	r3, r8
 800e402:	2200      	movs	r2, #0
 800e404:	f843 2b04 	str.w	r2, [r3], #4
 800e408:	429f      	cmp	r7, r3
 800e40a:	d2fb      	bcs.n	800e404 <__hexnan+0xcc>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	b91b      	cbnz	r3, 800e418 <__hexnan+0xe0>
 800e410:	4547      	cmp	r7, r8
 800e412:	d127      	bne.n	800e464 <__hexnan+0x12c>
 800e414:	2301      	movs	r3, #1
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	2005      	movs	r0, #5
 800e41a:	e026      	b.n	800e46a <__hexnan+0x132>
 800e41c:	3501      	adds	r5, #1
 800e41e:	2d08      	cmp	r5, #8
 800e420:	f10b 0b01 	add.w	fp, fp, #1
 800e424:	dd06      	ble.n	800e434 <__hexnan+0xfc>
 800e426:	4544      	cmp	r4, r8
 800e428:	d9c3      	bls.n	800e3b2 <__hexnan+0x7a>
 800e42a:	2300      	movs	r3, #0
 800e42c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e430:	2501      	movs	r5, #1
 800e432:	3c04      	subs	r4, #4
 800e434:	6822      	ldr	r2, [r4, #0]
 800e436:	f000 000f 	and.w	r0, r0, #15
 800e43a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e43e:	6022      	str	r2, [r4, #0]
 800e440:	e7b7      	b.n	800e3b2 <__hexnan+0x7a>
 800e442:	2508      	movs	r5, #8
 800e444:	e7b5      	b.n	800e3b2 <__hexnan+0x7a>
 800e446:	9b01      	ldr	r3, [sp, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d0df      	beq.n	800e40c <__hexnan+0xd4>
 800e44c:	f04f 32ff 	mov.w	r2, #4294967295
 800e450:	f1c3 0320 	rsb	r3, r3, #32
 800e454:	fa22 f303 	lsr.w	r3, r2, r3
 800e458:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e45c:	401a      	ands	r2, r3
 800e45e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e462:	e7d3      	b.n	800e40c <__hexnan+0xd4>
 800e464:	3f04      	subs	r7, #4
 800e466:	e7d1      	b.n	800e40c <__hexnan+0xd4>
 800e468:	2004      	movs	r0, #4
 800e46a:	b007      	add	sp, #28
 800e46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e470 <__locale_mb_cur_max>:
 800e470:	4b01      	ldr	r3, [pc, #4]	; (800e478 <__locale_mb_cur_max+0x8>)
 800e472:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800e476:	4770      	bx	lr
 800e478:	20000860 	.word	0x20000860

0800e47c <_localeconv_r>:
 800e47c:	4800      	ldr	r0, [pc, #0]	; (800e480 <_localeconv_r+0x4>)
 800e47e:	4770      	bx	lr
 800e480:	20000950 	.word	0x20000950

0800e484 <_lseek_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4d07      	ldr	r5, [pc, #28]	; (800e4a4 <_lseek_r+0x20>)
 800e488:	4604      	mov	r4, r0
 800e48a:	4608      	mov	r0, r1
 800e48c:	4611      	mov	r1, r2
 800e48e:	2200      	movs	r2, #0
 800e490:	602a      	str	r2, [r5, #0]
 800e492:	461a      	mov	r2, r3
 800e494:	f7f4 fad2 	bl	8002a3c <_lseek>
 800e498:	1c43      	adds	r3, r0, #1
 800e49a:	d102      	bne.n	800e4a2 <_lseek_r+0x1e>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	b103      	cbz	r3, 800e4a2 <_lseek_r+0x1e>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}
 800e4a4:	20017acc 	.word	0x20017acc

0800e4a8 <__ascii_mbtowc>:
 800e4a8:	b082      	sub	sp, #8
 800e4aa:	b901      	cbnz	r1, 800e4ae <__ascii_mbtowc+0x6>
 800e4ac:	a901      	add	r1, sp, #4
 800e4ae:	b142      	cbz	r2, 800e4c2 <__ascii_mbtowc+0x1a>
 800e4b0:	b14b      	cbz	r3, 800e4c6 <__ascii_mbtowc+0x1e>
 800e4b2:	7813      	ldrb	r3, [r2, #0]
 800e4b4:	600b      	str	r3, [r1, #0]
 800e4b6:	7812      	ldrb	r2, [r2, #0]
 800e4b8:	1e10      	subs	r0, r2, #0
 800e4ba:	bf18      	it	ne
 800e4bc:	2001      	movne	r0, #1
 800e4be:	b002      	add	sp, #8
 800e4c0:	4770      	bx	lr
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	e7fb      	b.n	800e4be <__ascii_mbtowc+0x16>
 800e4c6:	f06f 0001 	mvn.w	r0, #1
 800e4ca:	e7f8      	b.n	800e4be <__ascii_mbtowc+0x16>

0800e4cc <memmove>:
 800e4cc:	4288      	cmp	r0, r1
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	eb01 0402 	add.w	r4, r1, r2
 800e4d4:	d902      	bls.n	800e4dc <memmove+0x10>
 800e4d6:	4284      	cmp	r4, r0
 800e4d8:	4623      	mov	r3, r4
 800e4da:	d807      	bhi.n	800e4ec <memmove+0x20>
 800e4dc:	1e43      	subs	r3, r0, #1
 800e4de:	42a1      	cmp	r1, r4
 800e4e0:	d008      	beq.n	800e4f4 <memmove+0x28>
 800e4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4ea:	e7f8      	b.n	800e4de <memmove+0x12>
 800e4ec:	4402      	add	r2, r0
 800e4ee:	4601      	mov	r1, r0
 800e4f0:	428a      	cmp	r2, r1
 800e4f2:	d100      	bne.n	800e4f6 <memmove+0x2a>
 800e4f4:	bd10      	pop	{r4, pc}
 800e4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4fe:	e7f7      	b.n	800e4f0 <memmove+0x24>

0800e500 <_Balloc>:
 800e500:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e502:	b570      	push	{r4, r5, r6, lr}
 800e504:	4605      	mov	r5, r0
 800e506:	460c      	mov	r4, r1
 800e508:	b17b      	cbz	r3, 800e52a <_Balloc+0x2a>
 800e50a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e50c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e510:	b9a0      	cbnz	r0, 800e53c <_Balloc+0x3c>
 800e512:	2101      	movs	r1, #1
 800e514:	fa01 f604 	lsl.w	r6, r1, r4
 800e518:	1d72      	adds	r2, r6, #5
 800e51a:	0092      	lsls	r2, r2, #2
 800e51c:	4628      	mov	r0, r5
 800e51e:	f000 fe0b 	bl	800f138 <_calloc_r>
 800e522:	b148      	cbz	r0, 800e538 <_Balloc+0x38>
 800e524:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800e528:	e00b      	b.n	800e542 <_Balloc+0x42>
 800e52a:	2221      	movs	r2, #33	; 0x21
 800e52c:	2104      	movs	r1, #4
 800e52e:	f000 fe03 	bl	800f138 <_calloc_r>
 800e532:	64e8      	str	r0, [r5, #76]	; 0x4c
 800e534:	2800      	cmp	r0, #0
 800e536:	d1e8      	bne.n	800e50a <_Balloc+0xa>
 800e538:	2000      	movs	r0, #0
 800e53a:	bd70      	pop	{r4, r5, r6, pc}
 800e53c:	6802      	ldr	r2, [r0, #0]
 800e53e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800e542:	2300      	movs	r3, #0
 800e544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e548:	e7f7      	b.n	800e53a <_Balloc+0x3a>

0800e54a <_Bfree>:
 800e54a:	b131      	cbz	r1, 800e55a <_Bfree+0x10>
 800e54c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e54e:	684a      	ldr	r2, [r1, #4]
 800e550:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e554:	6008      	str	r0, [r1, #0]
 800e556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e55a:	4770      	bx	lr

0800e55c <__multadd>:
 800e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e560:	690d      	ldr	r5, [r1, #16]
 800e562:	4607      	mov	r7, r0
 800e564:	460c      	mov	r4, r1
 800e566:	461e      	mov	r6, r3
 800e568:	f101 0c14 	add.w	ip, r1, #20
 800e56c:	2000      	movs	r0, #0
 800e56e:	f8dc 3000 	ldr.w	r3, [ip]
 800e572:	b299      	uxth	r1, r3
 800e574:	fb02 6101 	mla	r1, r2, r1, r6
 800e578:	0c1e      	lsrs	r6, r3, #16
 800e57a:	0c0b      	lsrs	r3, r1, #16
 800e57c:	fb02 3306 	mla	r3, r2, r6, r3
 800e580:	b289      	uxth	r1, r1
 800e582:	3001      	adds	r0, #1
 800e584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e588:	4285      	cmp	r5, r0
 800e58a:	f84c 1b04 	str.w	r1, [ip], #4
 800e58e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e592:	dcec      	bgt.n	800e56e <__multadd+0x12>
 800e594:	b30e      	cbz	r6, 800e5da <__multadd+0x7e>
 800e596:	68a3      	ldr	r3, [r4, #8]
 800e598:	42ab      	cmp	r3, r5
 800e59a:	dc19      	bgt.n	800e5d0 <__multadd+0x74>
 800e59c:	6861      	ldr	r1, [r4, #4]
 800e59e:	4638      	mov	r0, r7
 800e5a0:	3101      	adds	r1, #1
 800e5a2:	f7ff ffad 	bl	800e500 <_Balloc>
 800e5a6:	4680      	mov	r8, r0
 800e5a8:	b928      	cbnz	r0, 800e5b6 <__multadd+0x5a>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	4b0c      	ldr	r3, [pc, #48]	; (800e5e0 <__multadd+0x84>)
 800e5ae:	480d      	ldr	r0, [pc, #52]	; (800e5e4 <__multadd+0x88>)
 800e5b0:	21b5      	movs	r1, #181	; 0xb5
 800e5b2:	f000 fda3 	bl	800f0fc <__assert_func>
 800e5b6:	6922      	ldr	r2, [r4, #16]
 800e5b8:	3202      	adds	r2, #2
 800e5ba:	f104 010c 	add.w	r1, r4, #12
 800e5be:	0092      	lsls	r2, r2, #2
 800e5c0:	300c      	adds	r0, #12
 800e5c2:	f7fc f83f 	bl	800a644 <memcpy>
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	f7ff ffbe 	bl	800e54a <_Bfree>
 800e5ce:	4644      	mov	r4, r8
 800e5d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5d4:	3501      	adds	r5, #1
 800e5d6:	615e      	str	r6, [r3, #20]
 800e5d8:	6125      	str	r5, [r4, #16]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e0:	080108a9 	.word	0x080108a9
 800e5e4:	08010990 	.word	0x08010990

0800e5e8 <__s2b>:
 800e5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	460c      	mov	r4, r1
 800e5ee:	4615      	mov	r5, r2
 800e5f0:	461f      	mov	r7, r3
 800e5f2:	2209      	movs	r2, #9
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	2201      	movs	r2, #1
 800e600:	429a      	cmp	r2, r3
 800e602:	db09      	blt.n	800e618 <__s2b+0x30>
 800e604:	4630      	mov	r0, r6
 800e606:	f7ff ff7b 	bl	800e500 <_Balloc>
 800e60a:	b940      	cbnz	r0, 800e61e <__s2b+0x36>
 800e60c:	4602      	mov	r2, r0
 800e60e:	4b19      	ldr	r3, [pc, #100]	; (800e674 <__s2b+0x8c>)
 800e610:	4819      	ldr	r0, [pc, #100]	; (800e678 <__s2b+0x90>)
 800e612:	21ce      	movs	r1, #206	; 0xce
 800e614:	f000 fd72 	bl	800f0fc <__assert_func>
 800e618:	0052      	lsls	r2, r2, #1
 800e61a:	3101      	adds	r1, #1
 800e61c:	e7f0      	b.n	800e600 <__s2b+0x18>
 800e61e:	9b08      	ldr	r3, [sp, #32]
 800e620:	6143      	str	r3, [r0, #20]
 800e622:	2d09      	cmp	r5, #9
 800e624:	f04f 0301 	mov.w	r3, #1
 800e628:	6103      	str	r3, [r0, #16]
 800e62a:	dd16      	ble.n	800e65a <__s2b+0x72>
 800e62c:	f104 0909 	add.w	r9, r4, #9
 800e630:	46c8      	mov	r8, r9
 800e632:	442c      	add	r4, r5
 800e634:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e638:	4601      	mov	r1, r0
 800e63a:	3b30      	subs	r3, #48	; 0x30
 800e63c:	220a      	movs	r2, #10
 800e63e:	4630      	mov	r0, r6
 800e640:	f7ff ff8c 	bl	800e55c <__multadd>
 800e644:	45a0      	cmp	r8, r4
 800e646:	d1f5      	bne.n	800e634 <__s2b+0x4c>
 800e648:	f1a5 0408 	sub.w	r4, r5, #8
 800e64c:	444c      	add	r4, r9
 800e64e:	1b2d      	subs	r5, r5, r4
 800e650:	1963      	adds	r3, r4, r5
 800e652:	42bb      	cmp	r3, r7
 800e654:	db04      	blt.n	800e660 <__s2b+0x78>
 800e656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e65a:	340a      	adds	r4, #10
 800e65c:	2509      	movs	r5, #9
 800e65e:	e7f6      	b.n	800e64e <__s2b+0x66>
 800e660:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e664:	4601      	mov	r1, r0
 800e666:	3b30      	subs	r3, #48	; 0x30
 800e668:	220a      	movs	r2, #10
 800e66a:	4630      	mov	r0, r6
 800e66c:	f7ff ff76 	bl	800e55c <__multadd>
 800e670:	e7ee      	b.n	800e650 <__s2b+0x68>
 800e672:	bf00      	nop
 800e674:	080108a9 	.word	0x080108a9
 800e678:	08010990 	.word	0x08010990

0800e67c <__hi0bits>:
 800e67c:	0c03      	lsrs	r3, r0, #16
 800e67e:	041b      	lsls	r3, r3, #16
 800e680:	b9d3      	cbnz	r3, 800e6b8 <__hi0bits+0x3c>
 800e682:	0400      	lsls	r0, r0, #16
 800e684:	2310      	movs	r3, #16
 800e686:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e68a:	bf04      	itt	eq
 800e68c:	0200      	lsleq	r0, r0, #8
 800e68e:	3308      	addeq	r3, #8
 800e690:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e694:	bf04      	itt	eq
 800e696:	0100      	lsleq	r0, r0, #4
 800e698:	3304      	addeq	r3, #4
 800e69a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e69e:	bf04      	itt	eq
 800e6a0:	0080      	lsleq	r0, r0, #2
 800e6a2:	3302      	addeq	r3, #2
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	db05      	blt.n	800e6b4 <__hi0bits+0x38>
 800e6a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6ac:	f103 0301 	add.w	r3, r3, #1
 800e6b0:	bf08      	it	eq
 800e6b2:	2320      	moveq	r3, #32
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	4770      	bx	lr
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e7e4      	b.n	800e686 <__hi0bits+0xa>

0800e6bc <__lo0bits>:
 800e6bc:	6803      	ldr	r3, [r0, #0]
 800e6be:	f013 0207 	ands.w	r2, r3, #7
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	d00b      	beq.n	800e6de <__lo0bits+0x22>
 800e6c6:	07da      	lsls	r2, r3, #31
 800e6c8:	d423      	bmi.n	800e712 <__lo0bits+0x56>
 800e6ca:	0798      	lsls	r0, r3, #30
 800e6cc:	bf49      	itett	mi
 800e6ce:	085b      	lsrmi	r3, r3, #1
 800e6d0:	089b      	lsrpl	r3, r3, #2
 800e6d2:	2001      	movmi	r0, #1
 800e6d4:	600b      	strmi	r3, [r1, #0]
 800e6d6:	bf5c      	itt	pl
 800e6d8:	600b      	strpl	r3, [r1, #0]
 800e6da:	2002      	movpl	r0, #2
 800e6dc:	4770      	bx	lr
 800e6de:	b298      	uxth	r0, r3
 800e6e0:	b9a8      	cbnz	r0, 800e70e <__lo0bits+0x52>
 800e6e2:	0c1b      	lsrs	r3, r3, #16
 800e6e4:	2010      	movs	r0, #16
 800e6e6:	b2da      	uxtb	r2, r3
 800e6e8:	b90a      	cbnz	r2, 800e6ee <__lo0bits+0x32>
 800e6ea:	3008      	adds	r0, #8
 800e6ec:	0a1b      	lsrs	r3, r3, #8
 800e6ee:	071a      	lsls	r2, r3, #28
 800e6f0:	bf04      	itt	eq
 800e6f2:	091b      	lsreq	r3, r3, #4
 800e6f4:	3004      	addeq	r0, #4
 800e6f6:	079a      	lsls	r2, r3, #30
 800e6f8:	bf04      	itt	eq
 800e6fa:	089b      	lsreq	r3, r3, #2
 800e6fc:	3002      	addeq	r0, #2
 800e6fe:	07da      	lsls	r2, r3, #31
 800e700:	d403      	bmi.n	800e70a <__lo0bits+0x4e>
 800e702:	085b      	lsrs	r3, r3, #1
 800e704:	f100 0001 	add.w	r0, r0, #1
 800e708:	d005      	beq.n	800e716 <__lo0bits+0x5a>
 800e70a:	600b      	str	r3, [r1, #0]
 800e70c:	4770      	bx	lr
 800e70e:	4610      	mov	r0, r2
 800e710:	e7e9      	b.n	800e6e6 <__lo0bits+0x2a>
 800e712:	2000      	movs	r0, #0
 800e714:	4770      	bx	lr
 800e716:	2020      	movs	r0, #32
 800e718:	4770      	bx	lr
	...

0800e71c <__i2b>:
 800e71c:	b510      	push	{r4, lr}
 800e71e:	460c      	mov	r4, r1
 800e720:	2101      	movs	r1, #1
 800e722:	f7ff feed 	bl	800e500 <_Balloc>
 800e726:	4602      	mov	r2, r0
 800e728:	b928      	cbnz	r0, 800e736 <__i2b+0x1a>
 800e72a:	4b05      	ldr	r3, [pc, #20]	; (800e740 <__i2b+0x24>)
 800e72c:	4805      	ldr	r0, [pc, #20]	; (800e744 <__i2b+0x28>)
 800e72e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e732:	f000 fce3 	bl	800f0fc <__assert_func>
 800e736:	2301      	movs	r3, #1
 800e738:	6144      	str	r4, [r0, #20]
 800e73a:	6103      	str	r3, [r0, #16]
 800e73c:	bd10      	pop	{r4, pc}
 800e73e:	bf00      	nop
 800e740:	080108a9 	.word	0x080108a9
 800e744:	08010990 	.word	0x08010990

0800e748 <__multiply>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	4691      	mov	r9, r2
 800e74e:	690a      	ldr	r2, [r1, #16]
 800e750:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e754:	429a      	cmp	r2, r3
 800e756:	bfb8      	it	lt
 800e758:	460b      	movlt	r3, r1
 800e75a:	460c      	mov	r4, r1
 800e75c:	bfbc      	itt	lt
 800e75e:	464c      	movlt	r4, r9
 800e760:	4699      	movlt	r9, r3
 800e762:	6927      	ldr	r7, [r4, #16]
 800e764:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e768:	68a3      	ldr	r3, [r4, #8]
 800e76a:	6861      	ldr	r1, [r4, #4]
 800e76c:	eb07 060a 	add.w	r6, r7, sl
 800e770:	42b3      	cmp	r3, r6
 800e772:	b085      	sub	sp, #20
 800e774:	bfb8      	it	lt
 800e776:	3101      	addlt	r1, #1
 800e778:	f7ff fec2 	bl	800e500 <_Balloc>
 800e77c:	b930      	cbnz	r0, 800e78c <__multiply+0x44>
 800e77e:	4602      	mov	r2, r0
 800e780:	4b44      	ldr	r3, [pc, #272]	; (800e894 <__multiply+0x14c>)
 800e782:	4845      	ldr	r0, [pc, #276]	; (800e898 <__multiply+0x150>)
 800e784:	f240 115d 	movw	r1, #349	; 0x15d
 800e788:	f000 fcb8 	bl	800f0fc <__assert_func>
 800e78c:	f100 0514 	add.w	r5, r0, #20
 800e790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e794:	462b      	mov	r3, r5
 800e796:	2200      	movs	r2, #0
 800e798:	4543      	cmp	r3, r8
 800e79a:	d321      	bcc.n	800e7e0 <__multiply+0x98>
 800e79c:	f104 0314 	add.w	r3, r4, #20
 800e7a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e7a4:	f109 0314 	add.w	r3, r9, #20
 800e7a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e7ac:	9202      	str	r2, [sp, #8]
 800e7ae:	1b3a      	subs	r2, r7, r4
 800e7b0:	3a15      	subs	r2, #21
 800e7b2:	f022 0203 	bic.w	r2, r2, #3
 800e7b6:	3204      	adds	r2, #4
 800e7b8:	f104 0115 	add.w	r1, r4, #21
 800e7bc:	428f      	cmp	r7, r1
 800e7be:	bf38      	it	cc
 800e7c0:	2204      	movcc	r2, #4
 800e7c2:	9201      	str	r2, [sp, #4]
 800e7c4:	9a02      	ldr	r2, [sp, #8]
 800e7c6:	9303      	str	r3, [sp, #12]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d80c      	bhi.n	800e7e6 <__multiply+0x9e>
 800e7cc:	2e00      	cmp	r6, #0
 800e7ce:	dd03      	ble.n	800e7d8 <__multiply+0x90>
 800e7d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d05a      	beq.n	800e88e <__multiply+0x146>
 800e7d8:	6106      	str	r6, [r0, #16]
 800e7da:	b005      	add	sp, #20
 800e7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e0:	f843 2b04 	str.w	r2, [r3], #4
 800e7e4:	e7d8      	b.n	800e798 <__multiply+0x50>
 800e7e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7ea:	f1ba 0f00 	cmp.w	sl, #0
 800e7ee:	d024      	beq.n	800e83a <__multiply+0xf2>
 800e7f0:	f104 0e14 	add.w	lr, r4, #20
 800e7f4:	46a9      	mov	r9, r5
 800e7f6:	f04f 0c00 	mov.w	ip, #0
 800e7fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7fe:	f8d9 1000 	ldr.w	r1, [r9]
 800e802:	fa1f fb82 	uxth.w	fp, r2
 800e806:	b289      	uxth	r1, r1
 800e808:	fb0a 110b 	mla	r1, sl, fp, r1
 800e80c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e810:	f8d9 2000 	ldr.w	r2, [r9]
 800e814:	4461      	add	r1, ip
 800e816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e81a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e81e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e822:	b289      	uxth	r1, r1
 800e824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e828:	4577      	cmp	r7, lr
 800e82a:	f849 1b04 	str.w	r1, [r9], #4
 800e82e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e832:	d8e2      	bhi.n	800e7fa <__multiply+0xb2>
 800e834:	9a01      	ldr	r2, [sp, #4]
 800e836:	f845 c002 	str.w	ip, [r5, r2]
 800e83a:	9a03      	ldr	r2, [sp, #12]
 800e83c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e840:	3304      	adds	r3, #4
 800e842:	f1b9 0f00 	cmp.w	r9, #0
 800e846:	d020      	beq.n	800e88a <__multiply+0x142>
 800e848:	6829      	ldr	r1, [r5, #0]
 800e84a:	f104 0c14 	add.w	ip, r4, #20
 800e84e:	46ae      	mov	lr, r5
 800e850:	f04f 0a00 	mov.w	sl, #0
 800e854:	f8bc b000 	ldrh.w	fp, [ip]
 800e858:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e85c:	fb09 220b 	mla	r2, r9, fp, r2
 800e860:	4492      	add	sl, r2
 800e862:	b289      	uxth	r1, r1
 800e864:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e868:	f84e 1b04 	str.w	r1, [lr], #4
 800e86c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e870:	f8be 1000 	ldrh.w	r1, [lr]
 800e874:	0c12      	lsrs	r2, r2, #16
 800e876:	fb09 1102 	mla	r1, r9, r2, r1
 800e87a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e87e:	4567      	cmp	r7, ip
 800e880:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e884:	d8e6      	bhi.n	800e854 <__multiply+0x10c>
 800e886:	9a01      	ldr	r2, [sp, #4]
 800e888:	50a9      	str	r1, [r5, r2]
 800e88a:	3504      	adds	r5, #4
 800e88c:	e79a      	b.n	800e7c4 <__multiply+0x7c>
 800e88e:	3e01      	subs	r6, #1
 800e890:	e79c      	b.n	800e7cc <__multiply+0x84>
 800e892:	bf00      	nop
 800e894:	080108a9 	.word	0x080108a9
 800e898:	08010990 	.word	0x08010990

0800e89c <__pow5mult>:
 800e89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	4615      	mov	r5, r2
 800e8a2:	f012 0203 	ands.w	r2, r2, #3
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	460f      	mov	r7, r1
 800e8aa:	d007      	beq.n	800e8bc <__pow5mult+0x20>
 800e8ac:	4c1a      	ldr	r4, [pc, #104]	; (800e918 <__pow5mult+0x7c>)
 800e8ae:	3a01      	subs	r2, #1
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8b6:	f7ff fe51 	bl	800e55c <__multadd>
 800e8ba:	4607      	mov	r7, r0
 800e8bc:	10ad      	asrs	r5, r5, #2
 800e8be:	d027      	beq.n	800e910 <__pow5mult+0x74>
 800e8c0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800e8c2:	b944      	cbnz	r4, 800e8d6 <__pow5mult+0x3a>
 800e8c4:	f240 2171 	movw	r1, #625	; 0x271
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff ff27 	bl	800e71c <__i2b>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	64b0      	str	r0, [r6, #72]	; 0x48
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	6003      	str	r3, [r0, #0]
 800e8d6:	f04f 0900 	mov.w	r9, #0
 800e8da:	07eb      	lsls	r3, r5, #31
 800e8dc:	d50a      	bpl.n	800e8f4 <__pow5mult+0x58>
 800e8de:	4639      	mov	r1, r7
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f7ff ff30 	bl	800e748 <__multiply>
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	4680      	mov	r8, r0
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f7ff fe2c 	bl	800e54a <_Bfree>
 800e8f2:	4647      	mov	r7, r8
 800e8f4:	106d      	asrs	r5, r5, #1
 800e8f6:	d00b      	beq.n	800e910 <__pow5mult+0x74>
 800e8f8:	6820      	ldr	r0, [r4, #0]
 800e8fa:	b938      	cbnz	r0, 800e90c <__pow5mult+0x70>
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	4621      	mov	r1, r4
 800e900:	4630      	mov	r0, r6
 800e902:	f7ff ff21 	bl	800e748 <__multiply>
 800e906:	6020      	str	r0, [r4, #0]
 800e908:	f8c0 9000 	str.w	r9, [r0]
 800e90c:	4604      	mov	r4, r0
 800e90e:	e7e4      	b.n	800e8da <__pow5mult+0x3e>
 800e910:	4638      	mov	r0, r7
 800e912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e916:	bf00      	nop
 800e918:	08010ae0 	.word	0x08010ae0

0800e91c <__lshift>:
 800e91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e920:	460c      	mov	r4, r1
 800e922:	6849      	ldr	r1, [r1, #4]
 800e924:	6923      	ldr	r3, [r4, #16]
 800e926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	4607      	mov	r7, r0
 800e92e:	4691      	mov	r9, r2
 800e930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e934:	f108 0601 	add.w	r6, r8, #1
 800e938:	42b3      	cmp	r3, r6
 800e93a:	db0b      	blt.n	800e954 <__lshift+0x38>
 800e93c:	4638      	mov	r0, r7
 800e93e:	f7ff fddf 	bl	800e500 <_Balloc>
 800e942:	4605      	mov	r5, r0
 800e944:	b948      	cbnz	r0, 800e95a <__lshift+0x3e>
 800e946:	4602      	mov	r2, r0
 800e948:	4b2a      	ldr	r3, [pc, #168]	; (800e9f4 <__lshift+0xd8>)
 800e94a:	482b      	ldr	r0, [pc, #172]	; (800e9f8 <__lshift+0xdc>)
 800e94c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e950:	f000 fbd4 	bl	800f0fc <__assert_func>
 800e954:	3101      	adds	r1, #1
 800e956:	005b      	lsls	r3, r3, #1
 800e958:	e7ee      	b.n	800e938 <__lshift+0x1c>
 800e95a:	2300      	movs	r3, #0
 800e95c:	f100 0114 	add.w	r1, r0, #20
 800e960:	f100 0210 	add.w	r2, r0, #16
 800e964:	4618      	mov	r0, r3
 800e966:	4553      	cmp	r3, sl
 800e968:	db37      	blt.n	800e9da <__lshift+0xbe>
 800e96a:	6920      	ldr	r0, [r4, #16]
 800e96c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e970:	f104 0314 	add.w	r3, r4, #20
 800e974:	f019 091f 	ands.w	r9, r9, #31
 800e978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e97c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e980:	d02f      	beq.n	800e9e2 <__lshift+0xc6>
 800e982:	f1c9 0e20 	rsb	lr, r9, #32
 800e986:	468a      	mov	sl, r1
 800e988:	f04f 0c00 	mov.w	ip, #0
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	fa02 f209 	lsl.w	r2, r2, r9
 800e992:	ea42 020c 	orr.w	r2, r2, ip
 800e996:	f84a 2b04 	str.w	r2, [sl], #4
 800e99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e99e:	4298      	cmp	r0, r3
 800e9a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e9a4:	d8f2      	bhi.n	800e98c <__lshift+0x70>
 800e9a6:	1b03      	subs	r3, r0, r4
 800e9a8:	3b15      	subs	r3, #21
 800e9aa:	f023 0303 	bic.w	r3, r3, #3
 800e9ae:	3304      	adds	r3, #4
 800e9b0:	f104 0215 	add.w	r2, r4, #21
 800e9b4:	4290      	cmp	r0, r2
 800e9b6:	bf38      	it	cc
 800e9b8:	2304      	movcc	r3, #4
 800e9ba:	f841 c003 	str.w	ip, [r1, r3]
 800e9be:	f1bc 0f00 	cmp.w	ip, #0
 800e9c2:	d001      	beq.n	800e9c8 <__lshift+0xac>
 800e9c4:	f108 0602 	add.w	r6, r8, #2
 800e9c8:	3e01      	subs	r6, #1
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	612e      	str	r6, [r5, #16]
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	f7ff fdbb 	bl	800e54a <_Bfree>
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9da:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9de:	3301      	adds	r3, #1
 800e9e0:	e7c1      	b.n	800e966 <__lshift+0x4a>
 800e9e2:	3904      	subs	r1, #4
 800e9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9ec:	4298      	cmp	r0, r3
 800e9ee:	d8f9      	bhi.n	800e9e4 <__lshift+0xc8>
 800e9f0:	e7ea      	b.n	800e9c8 <__lshift+0xac>
 800e9f2:	bf00      	nop
 800e9f4:	080108a9 	.word	0x080108a9
 800e9f8:	08010990 	.word	0x08010990

0800e9fc <__mcmp>:
 800e9fc:	b530      	push	{r4, r5, lr}
 800e9fe:	6902      	ldr	r2, [r0, #16]
 800ea00:	690c      	ldr	r4, [r1, #16]
 800ea02:	1b12      	subs	r2, r2, r4
 800ea04:	d10e      	bne.n	800ea24 <__mcmp+0x28>
 800ea06:	f100 0314 	add.w	r3, r0, #20
 800ea0a:	3114      	adds	r1, #20
 800ea0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea1c:	42a5      	cmp	r5, r4
 800ea1e:	d003      	beq.n	800ea28 <__mcmp+0x2c>
 800ea20:	d305      	bcc.n	800ea2e <__mcmp+0x32>
 800ea22:	2201      	movs	r2, #1
 800ea24:	4610      	mov	r0, r2
 800ea26:	bd30      	pop	{r4, r5, pc}
 800ea28:	4283      	cmp	r3, r0
 800ea2a:	d3f3      	bcc.n	800ea14 <__mcmp+0x18>
 800ea2c:	e7fa      	b.n	800ea24 <__mcmp+0x28>
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea32:	e7f7      	b.n	800ea24 <__mcmp+0x28>

0800ea34 <__mdiff>:
 800ea34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	460c      	mov	r4, r1
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	4620      	mov	r0, r4
 800ea40:	4690      	mov	r8, r2
 800ea42:	f7ff ffdb 	bl	800e9fc <__mcmp>
 800ea46:	1e05      	subs	r5, r0, #0
 800ea48:	d110      	bne.n	800ea6c <__mdiff+0x38>
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f7ff fd57 	bl	800e500 <_Balloc>
 800ea52:	b930      	cbnz	r0, 800ea62 <__mdiff+0x2e>
 800ea54:	4b3a      	ldr	r3, [pc, #232]	; (800eb40 <__mdiff+0x10c>)
 800ea56:	4602      	mov	r2, r0
 800ea58:	f240 2132 	movw	r1, #562	; 0x232
 800ea5c:	4839      	ldr	r0, [pc, #228]	; (800eb44 <__mdiff+0x110>)
 800ea5e:	f000 fb4d 	bl	800f0fc <__assert_func>
 800ea62:	2301      	movs	r3, #1
 800ea64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6c:	bfa4      	itt	ge
 800ea6e:	4643      	movge	r3, r8
 800ea70:	46a0      	movge	r8, r4
 800ea72:	4630      	mov	r0, r6
 800ea74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea78:	bfa6      	itte	ge
 800ea7a:	461c      	movge	r4, r3
 800ea7c:	2500      	movge	r5, #0
 800ea7e:	2501      	movlt	r5, #1
 800ea80:	f7ff fd3e 	bl	800e500 <_Balloc>
 800ea84:	b920      	cbnz	r0, 800ea90 <__mdiff+0x5c>
 800ea86:	4b2e      	ldr	r3, [pc, #184]	; (800eb40 <__mdiff+0x10c>)
 800ea88:	4602      	mov	r2, r0
 800ea8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea8e:	e7e5      	b.n	800ea5c <__mdiff+0x28>
 800ea90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea94:	6926      	ldr	r6, [r4, #16]
 800ea96:	60c5      	str	r5, [r0, #12]
 800ea98:	f104 0914 	add.w	r9, r4, #20
 800ea9c:	f108 0514 	add.w	r5, r8, #20
 800eaa0:	f100 0e14 	add.w	lr, r0, #20
 800eaa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eaa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eaac:	f108 0210 	add.w	r2, r8, #16
 800eab0:	46f2      	mov	sl, lr
 800eab2:	2100      	movs	r1, #0
 800eab4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eabc:	fa1f f883 	uxth.w	r8, r3
 800eac0:	fa11 f18b 	uxtah	r1, r1, fp
 800eac4:	0c1b      	lsrs	r3, r3, #16
 800eac6:	eba1 0808 	sub.w	r8, r1, r8
 800eaca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ead2:	fa1f f888 	uxth.w	r8, r8
 800ead6:	1419      	asrs	r1, r3, #16
 800ead8:	454e      	cmp	r6, r9
 800eada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eade:	f84a 3b04 	str.w	r3, [sl], #4
 800eae2:	d8e7      	bhi.n	800eab4 <__mdiff+0x80>
 800eae4:	1b33      	subs	r3, r6, r4
 800eae6:	3b15      	subs	r3, #21
 800eae8:	f023 0303 	bic.w	r3, r3, #3
 800eaec:	3304      	adds	r3, #4
 800eaee:	3415      	adds	r4, #21
 800eaf0:	42a6      	cmp	r6, r4
 800eaf2:	bf38      	it	cc
 800eaf4:	2304      	movcc	r3, #4
 800eaf6:	441d      	add	r5, r3
 800eaf8:	4473      	add	r3, lr
 800eafa:	469e      	mov	lr, r3
 800eafc:	462e      	mov	r6, r5
 800eafe:	4566      	cmp	r6, ip
 800eb00:	d30e      	bcc.n	800eb20 <__mdiff+0xec>
 800eb02:	f10c 0203 	add.w	r2, ip, #3
 800eb06:	1b52      	subs	r2, r2, r5
 800eb08:	f022 0203 	bic.w	r2, r2, #3
 800eb0c:	3d03      	subs	r5, #3
 800eb0e:	45ac      	cmp	ip, r5
 800eb10:	bf38      	it	cc
 800eb12:	2200      	movcc	r2, #0
 800eb14:	441a      	add	r2, r3
 800eb16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb1a:	b17b      	cbz	r3, 800eb3c <__mdiff+0x108>
 800eb1c:	6107      	str	r7, [r0, #16]
 800eb1e:	e7a3      	b.n	800ea68 <__mdiff+0x34>
 800eb20:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb24:	fa11 f288 	uxtah	r2, r1, r8
 800eb28:	1414      	asrs	r4, r2, #16
 800eb2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb2e:	b292      	uxth	r2, r2
 800eb30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb34:	f84e 2b04 	str.w	r2, [lr], #4
 800eb38:	1421      	asrs	r1, r4, #16
 800eb3a:	e7e0      	b.n	800eafe <__mdiff+0xca>
 800eb3c:	3f01      	subs	r7, #1
 800eb3e:	e7ea      	b.n	800eb16 <__mdiff+0xe2>
 800eb40:	080108a9 	.word	0x080108a9
 800eb44:	08010990 	.word	0x08010990

0800eb48 <__ulp>:
 800eb48:	b082      	sub	sp, #8
 800eb4a:	ed8d 0b00 	vstr	d0, [sp]
 800eb4e:	9b01      	ldr	r3, [sp, #4]
 800eb50:	4912      	ldr	r1, [pc, #72]	; (800eb9c <__ulp+0x54>)
 800eb52:	4019      	ands	r1, r3
 800eb54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800eb58:	2900      	cmp	r1, #0
 800eb5a:	dd05      	ble.n	800eb68 <__ulp+0x20>
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	ec43 2b10 	vmov	d0, r2, r3
 800eb64:	b002      	add	sp, #8
 800eb66:	4770      	bx	lr
 800eb68:	4249      	negs	r1, r1
 800eb6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eb6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eb72:	f04f 0200 	mov.w	r2, #0
 800eb76:	f04f 0300 	mov.w	r3, #0
 800eb7a:	da04      	bge.n	800eb86 <__ulp+0x3e>
 800eb7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eb80:	fa41 f300 	asr.w	r3, r1, r0
 800eb84:	e7ec      	b.n	800eb60 <__ulp+0x18>
 800eb86:	f1a0 0114 	sub.w	r1, r0, #20
 800eb8a:	291e      	cmp	r1, #30
 800eb8c:	bfda      	itte	le
 800eb8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eb92:	fa20 f101 	lsrle.w	r1, r0, r1
 800eb96:	2101      	movgt	r1, #1
 800eb98:	460a      	mov	r2, r1
 800eb9a:	e7e1      	b.n	800eb60 <__ulp+0x18>
 800eb9c:	7ff00000 	.word	0x7ff00000

0800eba0 <__b2d>:
 800eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba2:	6905      	ldr	r5, [r0, #16]
 800eba4:	f100 0714 	add.w	r7, r0, #20
 800eba8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ebac:	1f2e      	subs	r6, r5, #4
 800ebae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f7ff fd62 	bl	800e67c <__hi0bits>
 800ebb8:	f1c0 0320 	rsb	r3, r0, #32
 800ebbc:	280a      	cmp	r0, #10
 800ebbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ec3c <__b2d+0x9c>
 800ebc2:	600b      	str	r3, [r1, #0]
 800ebc4:	dc14      	bgt.n	800ebf0 <__b2d+0x50>
 800ebc6:	f1c0 0e0b 	rsb	lr, r0, #11
 800ebca:	fa24 f10e 	lsr.w	r1, r4, lr
 800ebce:	42b7      	cmp	r7, r6
 800ebd0:	ea41 030c 	orr.w	r3, r1, ip
 800ebd4:	bf34      	ite	cc
 800ebd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebda:	2100      	movcs	r1, #0
 800ebdc:	3015      	adds	r0, #21
 800ebde:	fa04 f000 	lsl.w	r0, r4, r0
 800ebe2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ebe6:	ea40 0201 	orr.w	r2, r0, r1
 800ebea:	ec43 2b10 	vmov	d0, r2, r3
 800ebee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf0:	42b7      	cmp	r7, r6
 800ebf2:	bf3a      	itte	cc
 800ebf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebf8:	f1a5 0608 	subcc.w	r6, r5, #8
 800ebfc:	2100      	movcs	r1, #0
 800ebfe:	380b      	subs	r0, #11
 800ec00:	d017      	beq.n	800ec32 <__b2d+0x92>
 800ec02:	f1c0 0c20 	rsb	ip, r0, #32
 800ec06:	fa04 f500 	lsl.w	r5, r4, r0
 800ec0a:	42be      	cmp	r6, r7
 800ec0c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ec10:	ea45 0504 	orr.w	r5, r5, r4
 800ec14:	bf8c      	ite	hi
 800ec16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ec1a:	2400      	movls	r4, #0
 800ec1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ec20:	fa01 f000 	lsl.w	r0, r1, r0
 800ec24:	fa24 f40c 	lsr.w	r4, r4, ip
 800ec28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec2c:	ea40 0204 	orr.w	r2, r0, r4
 800ec30:	e7db      	b.n	800ebea <__b2d+0x4a>
 800ec32:	ea44 030c 	orr.w	r3, r4, ip
 800ec36:	460a      	mov	r2, r1
 800ec38:	e7d7      	b.n	800ebea <__b2d+0x4a>
 800ec3a:	bf00      	nop
 800ec3c:	3ff00000 	.word	0x3ff00000

0800ec40 <__d2b>:
 800ec40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4689      	mov	r9, r1
 800ec46:	2101      	movs	r1, #1
 800ec48:	ec57 6b10 	vmov	r6, r7, d0
 800ec4c:	4690      	mov	r8, r2
 800ec4e:	f7ff fc57 	bl	800e500 <_Balloc>
 800ec52:	4604      	mov	r4, r0
 800ec54:	b930      	cbnz	r0, 800ec64 <__d2b+0x24>
 800ec56:	4602      	mov	r2, r0
 800ec58:	4b25      	ldr	r3, [pc, #148]	; (800ecf0 <__d2b+0xb0>)
 800ec5a:	4826      	ldr	r0, [pc, #152]	; (800ecf4 <__d2b+0xb4>)
 800ec5c:	f240 310a 	movw	r1, #778	; 0x30a
 800ec60:	f000 fa4c 	bl	800f0fc <__assert_func>
 800ec64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec6c:	bb35      	cbnz	r5, 800ecbc <__d2b+0x7c>
 800ec6e:	2e00      	cmp	r6, #0
 800ec70:	9301      	str	r3, [sp, #4]
 800ec72:	d028      	beq.n	800ecc6 <__d2b+0x86>
 800ec74:	4668      	mov	r0, sp
 800ec76:	9600      	str	r6, [sp, #0]
 800ec78:	f7ff fd20 	bl	800e6bc <__lo0bits>
 800ec7c:	9900      	ldr	r1, [sp, #0]
 800ec7e:	b300      	cbz	r0, 800ecc2 <__d2b+0x82>
 800ec80:	9a01      	ldr	r2, [sp, #4]
 800ec82:	f1c0 0320 	rsb	r3, r0, #32
 800ec86:	fa02 f303 	lsl.w	r3, r2, r3
 800ec8a:	430b      	orrs	r3, r1
 800ec8c:	40c2      	lsrs	r2, r0
 800ec8e:	6163      	str	r3, [r4, #20]
 800ec90:	9201      	str	r2, [sp, #4]
 800ec92:	9b01      	ldr	r3, [sp, #4]
 800ec94:	61a3      	str	r3, [r4, #24]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bf14      	ite	ne
 800ec9a:	2202      	movne	r2, #2
 800ec9c:	2201      	moveq	r2, #1
 800ec9e:	6122      	str	r2, [r4, #16]
 800eca0:	b1d5      	cbz	r5, 800ecd8 <__d2b+0x98>
 800eca2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eca6:	4405      	add	r5, r0
 800eca8:	f8c9 5000 	str.w	r5, [r9]
 800ecac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecb0:	f8c8 0000 	str.w	r0, [r8]
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	b003      	add	sp, #12
 800ecb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecc0:	e7d5      	b.n	800ec6e <__d2b+0x2e>
 800ecc2:	6161      	str	r1, [r4, #20]
 800ecc4:	e7e5      	b.n	800ec92 <__d2b+0x52>
 800ecc6:	a801      	add	r0, sp, #4
 800ecc8:	f7ff fcf8 	bl	800e6bc <__lo0bits>
 800eccc:	9b01      	ldr	r3, [sp, #4]
 800ecce:	6163      	str	r3, [r4, #20]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	6122      	str	r2, [r4, #16]
 800ecd4:	3020      	adds	r0, #32
 800ecd6:	e7e3      	b.n	800eca0 <__d2b+0x60>
 800ecd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ecdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ece0:	f8c9 0000 	str.w	r0, [r9]
 800ece4:	6918      	ldr	r0, [r3, #16]
 800ece6:	f7ff fcc9 	bl	800e67c <__hi0bits>
 800ecea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecee:	e7df      	b.n	800ecb0 <__d2b+0x70>
 800ecf0:	080108a9 	.word	0x080108a9
 800ecf4:	08010990 	.word	0x08010990

0800ecf8 <__ratio>:
 800ecf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	4688      	mov	r8, r1
 800ecfe:	4669      	mov	r1, sp
 800ed00:	4681      	mov	r9, r0
 800ed02:	f7ff ff4d 	bl	800eba0 <__b2d>
 800ed06:	a901      	add	r1, sp, #4
 800ed08:	4640      	mov	r0, r8
 800ed0a:	ec55 4b10 	vmov	r4, r5, d0
 800ed0e:	f7ff ff47 	bl	800eba0 <__b2d>
 800ed12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed1a:	eba3 0c02 	sub.w	ip, r3, r2
 800ed1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed22:	1a9b      	subs	r3, r3, r2
 800ed24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed28:	ec51 0b10 	vmov	r0, r1, d0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	bfd6      	itet	le
 800ed30:	460a      	movle	r2, r1
 800ed32:	462a      	movgt	r2, r5
 800ed34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed38:	468b      	mov	fp, r1
 800ed3a:	462f      	mov	r7, r5
 800ed3c:	bfd4      	ite	le
 800ed3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed46:	4620      	mov	r0, r4
 800ed48:	ee10 2a10 	vmov	r2, s0
 800ed4c:	465b      	mov	r3, fp
 800ed4e:	4639      	mov	r1, r7
 800ed50:	f7f1 fd94 	bl	800087c <__aeabi_ddiv>
 800ed54:	ec41 0b10 	vmov	d0, r0, r1
 800ed58:	b003      	add	sp, #12
 800ed5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed5e <__copybits>:
 800ed5e:	3901      	subs	r1, #1
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	1149      	asrs	r1, r1, #5
 800ed64:	6914      	ldr	r4, [r2, #16]
 800ed66:	3101      	adds	r1, #1
 800ed68:	f102 0314 	add.w	r3, r2, #20
 800ed6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed74:	1f05      	subs	r5, r0, #4
 800ed76:	42a3      	cmp	r3, r4
 800ed78:	d30c      	bcc.n	800ed94 <__copybits+0x36>
 800ed7a:	1aa3      	subs	r3, r4, r2
 800ed7c:	3b11      	subs	r3, #17
 800ed7e:	f023 0303 	bic.w	r3, r3, #3
 800ed82:	3211      	adds	r2, #17
 800ed84:	42a2      	cmp	r2, r4
 800ed86:	bf88      	it	hi
 800ed88:	2300      	movhi	r3, #0
 800ed8a:	4418      	add	r0, r3
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4288      	cmp	r0, r1
 800ed90:	d305      	bcc.n	800ed9e <__copybits+0x40>
 800ed92:	bd70      	pop	{r4, r5, r6, pc}
 800ed94:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed98:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed9c:	e7eb      	b.n	800ed76 <__copybits+0x18>
 800ed9e:	f840 3b04 	str.w	r3, [r0], #4
 800eda2:	e7f4      	b.n	800ed8e <__copybits+0x30>

0800eda4 <__any_on>:
 800eda4:	f100 0214 	add.w	r2, r0, #20
 800eda8:	6900      	ldr	r0, [r0, #16]
 800edaa:	114b      	asrs	r3, r1, #5
 800edac:	4298      	cmp	r0, r3
 800edae:	b510      	push	{r4, lr}
 800edb0:	db11      	blt.n	800edd6 <__any_on+0x32>
 800edb2:	dd0a      	ble.n	800edca <__any_on+0x26>
 800edb4:	f011 011f 	ands.w	r1, r1, #31
 800edb8:	d007      	beq.n	800edca <__any_on+0x26>
 800edba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800edbe:	fa24 f001 	lsr.w	r0, r4, r1
 800edc2:	fa00 f101 	lsl.w	r1, r0, r1
 800edc6:	428c      	cmp	r4, r1
 800edc8:	d10b      	bne.n	800ede2 <__any_on+0x3e>
 800edca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edce:	4293      	cmp	r3, r2
 800edd0:	d803      	bhi.n	800edda <__any_on+0x36>
 800edd2:	2000      	movs	r0, #0
 800edd4:	bd10      	pop	{r4, pc}
 800edd6:	4603      	mov	r3, r0
 800edd8:	e7f7      	b.n	800edca <__any_on+0x26>
 800edda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800edde:	2900      	cmp	r1, #0
 800ede0:	d0f5      	beq.n	800edce <__any_on+0x2a>
 800ede2:	2001      	movs	r0, #1
 800ede4:	e7f6      	b.n	800edd4 <__any_on+0x30>
	...

0800ede8 <_read_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	4d07      	ldr	r5, [pc, #28]	; (800ee08 <_read_r+0x20>)
 800edec:	4604      	mov	r4, r0
 800edee:	4608      	mov	r0, r1
 800edf0:	4611      	mov	r1, r2
 800edf2:	2200      	movs	r2, #0
 800edf4:	602a      	str	r2, [r5, #0]
 800edf6:	461a      	mov	r2, r3
 800edf8:	f7f3 fdc0 	bl	800297c <_read>
 800edfc:	1c43      	adds	r3, r0, #1
 800edfe:	d102      	bne.n	800ee06 <_read_r+0x1e>
 800ee00:	682b      	ldr	r3, [r5, #0]
 800ee02:	b103      	cbz	r3, 800ee06 <_read_r+0x1e>
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	bd38      	pop	{r3, r4, r5, pc}
 800ee08:	20017acc 	.word	0x20017acc

0800ee0c <frexp>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	2100      	movs	r1, #0
 800ee10:	ec55 4b10 	vmov	r4, r5, d0
 800ee14:	6001      	str	r1, [r0, #0]
 800ee16:	4916      	ldr	r1, [pc, #88]	; (800ee70 <frexp+0x64>)
 800ee18:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800ee1c:	428a      	cmp	r2, r1
 800ee1e:	4606      	mov	r6, r0
 800ee20:	462b      	mov	r3, r5
 800ee22:	dc22      	bgt.n	800ee6a <frexp+0x5e>
 800ee24:	ee10 1a10 	vmov	r1, s0
 800ee28:	4311      	orrs	r1, r2
 800ee2a:	d01e      	beq.n	800ee6a <frexp+0x5e>
 800ee2c:	4911      	ldr	r1, [pc, #68]	; (800ee74 <frexp+0x68>)
 800ee2e:	4029      	ands	r1, r5
 800ee30:	b969      	cbnz	r1, 800ee4e <frexp+0x42>
 800ee32:	4b11      	ldr	r3, [pc, #68]	; (800ee78 <frexp+0x6c>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	ee10 0a10 	vmov	r0, s0
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	f7f1 fbf4 	bl	8000628 <__aeabi_dmul>
 800ee40:	460b      	mov	r3, r1
 800ee42:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ee46:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	6031      	str	r1, [r6, #0]
 800ee4e:	6831      	ldr	r1, [r6, #0]
 800ee50:	1512      	asrs	r2, r2, #20
 800ee52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee56:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800ee5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee5e:	440a      	add	r2, r1
 800ee60:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800ee64:	6032      	str	r2, [r6, #0]
 800ee66:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ee6a:	ec45 4b10 	vmov	d0, r4, r5
 800ee6e:	bd70      	pop	{r4, r5, r6, pc}
 800ee70:	7fefffff 	.word	0x7fefffff
 800ee74:	7ff00000 	.word	0x7ff00000
 800ee78:	43500000 	.word	0x43500000
 800ee7c:	00000000 	.word	0x00000000

0800ee80 <nan>:
 800ee80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee88 <nan+0x8>
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	00000000 	.word	0x00000000
 800ee8c:	7ff80000 	.word	0x7ff80000

0800ee90 <strncpy>:
 800ee90:	b510      	push	{r4, lr}
 800ee92:	3901      	subs	r1, #1
 800ee94:	4603      	mov	r3, r0
 800ee96:	b132      	cbz	r2, 800eea6 <strncpy+0x16>
 800ee98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee9c:	f803 4b01 	strb.w	r4, [r3], #1
 800eea0:	3a01      	subs	r2, #1
 800eea2:	2c00      	cmp	r4, #0
 800eea4:	d1f7      	bne.n	800ee96 <strncpy+0x6>
 800eea6:	441a      	add	r2, r3
 800eea8:	2100      	movs	r1, #0
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d100      	bne.n	800eeb0 <strncpy+0x20>
 800eeae:	bd10      	pop	{r4, pc}
 800eeb0:	f803 1b01 	strb.w	r1, [r3], #1
 800eeb4:	e7f9      	b.n	800eeaa <strncpy+0x1a>

0800eeb6 <__ssprint_r>:
 800eeb6:	6893      	ldr	r3, [r2, #8]
 800eeb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eebc:	4680      	mov	r8, r0
 800eebe:	460c      	mov	r4, r1
 800eec0:	4617      	mov	r7, r2
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d061      	beq.n	800ef8a <__ssprint_r+0xd4>
 800eec6:	2300      	movs	r3, #0
 800eec8:	f8d2 a000 	ldr.w	sl, [r2]
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	469b      	mov	fp, r3
 800eed0:	f1bb 0f00 	cmp.w	fp, #0
 800eed4:	d02b      	beq.n	800ef2e <__ssprint_r+0x78>
 800eed6:	68a6      	ldr	r6, [r4, #8]
 800eed8:	455e      	cmp	r6, fp
 800eeda:	d844      	bhi.n	800ef66 <__ssprint_r+0xb0>
 800eedc:	89a2      	ldrh	r2, [r4, #12]
 800eede:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eee2:	d03e      	beq.n	800ef62 <__ssprint_r+0xac>
 800eee4:	6820      	ldr	r0, [r4, #0]
 800eee6:	6921      	ldr	r1, [r4, #16]
 800eee8:	6965      	ldr	r5, [r4, #20]
 800eeea:	eba0 0901 	sub.w	r9, r0, r1
 800eeee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eef6:	f109 0001 	add.w	r0, r9, #1
 800eefa:	106d      	asrs	r5, r5, #1
 800eefc:	4458      	add	r0, fp
 800eefe:	4285      	cmp	r5, r0
 800ef00:	bf38      	it	cc
 800ef02:	4605      	movcc	r5, r0
 800ef04:	0553      	lsls	r3, r2, #21
 800ef06:	d545      	bpl.n	800ef94 <__ssprint_r+0xde>
 800ef08:	4629      	mov	r1, r5
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	f7fb f95e 	bl	800a1cc <_malloc_r>
 800ef10:	4606      	mov	r6, r0
 800ef12:	b9a0      	cbnz	r0, 800ef3e <__ssprint_r+0x88>
 800ef14:	230c      	movs	r3, #12
 800ef16:	f8c8 3000 	str.w	r3, [r8]
 800ef1a:	89a3      	ldrh	r3, [r4, #12]
 800ef1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	2300      	movs	r3, #0
 800ef24:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800ef28:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2c:	e02f      	b.n	800ef8e <__ssprint_r+0xd8>
 800ef2e:	f8da 3000 	ldr.w	r3, [sl]
 800ef32:	f8da b004 	ldr.w	fp, [sl, #4]
 800ef36:	9301      	str	r3, [sp, #4]
 800ef38:	f10a 0a08 	add.w	sl, sl, #8
 800ef3c:	e7c8      	b.n	800eed0 <__ssprint_r+0x1a>
 800ef3e:	464a      	mov	r2, r9
 800ef40:	6921      	ldr	r1, [r4, #16]
 800ef42:	f7fb fb7f 	bl	800a644 <memcpy>
 800ef46:	89a2      	ldrh	r2, [r4, #12]
 800ef48:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ef4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ef50:	81a2      	strh	r2, [r4, #12]
 800ef52:	6126      	str	r6, [r4, #16]
 800ef54:	6165      	str	r5, [r4, #20]
 800ef56:	444e      	add	r6, r9
 800ef58:	eba5 0509 	sub.w	r5, r5, r9
 800ef5c:	6026      	str	r6, [r4, #0]
 800ef5e:	60a5      	str	r5, [r4, #8]
 800ef60:	465e      	mov	r6, fp
 800ef62:	455e      	cmp	r6, fp
 800ef64:	d900      	bls.n	800ef68 <__ssprint_r+0xb2>
 800ef66:	465e      	mov	r6, fp
 800ef68:	4632      	mov	r2, r6
 800ef6a:	9901      	ldr	r1, [sp, #4]
 800ef6c:	6820      	ldr	r0, [r4, #0]
 800ef6e:	f7ff faad 	bl	800e4cc <memmove>
 800ef72:	68a2      	ldr	r2, [r4, #8]
 800ef74:	1b92      	subs	r2, r2, r6
 800ef76:	60a2      	str	r2, [r4, #8]
 800ef78:	6822      	ldr	r2, [r4, #0]
 800ef7a:	4432      	add	r2, r6
 800ef7c:	6022      	str	r2, [r4, #0]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	eba2 030b 	sub.w	r3, r2, fp
 800ef84:	60bb      	str	r3, [r7, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1d1      	bne.n	800ef2e <__ssprint_r+0x78>
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	b003      	add	sp, #12
 800ef90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef94:	462a      	mov	r2, r5
 800ef96:	4640      	mov	r0, r8
 800ef98:	f7fb fbcc 	bl	800a734 <_realloc_r>
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d1d7      	bne.n	800ef52 <__ssprint_r+0x9c>
 800efa2:	6921      	ldr	r1, [r4, #16]
 800efa4:	4640      	mov	r0, r8
 800efa6:	f7fa fff9 	bl	8009f9c <_free_r>
 800efaa:	e7b3      	b.n	800ef14 <__ssprint_r+0x5e>

0800efac <__ascii_wctomb>:
 800efac:	b149      	cbz	r1, 800efc2 <__ascii_wctomb+0x16>
 800efae:	2aff      	cmp	r2, #255	; 0xff
 800efb0:	bf85      	ittet	hi
 800efb2:	238a      	movhi	r3, #138	; 0x8a
 800efb4:	6003      	strhi	r3, [r0, #0]
 800efb6:	700a      	strbls	r2, [r1, #0]
 800efb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800efbc:	bf98      	it	ls
 800efbe:	2001      	movls	r0, #1
 800efc0:	4770      	bx	lr
 800efc2:	4608      	mov	r0, r1
 800efc4:	4770      	bx	lr
	...

0800efc8 <__swsetup_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4b2a      	ldr	r3, [pc, #168]	; (800f074 <__swsetup_r+0xac>)
 800efcc:	4605      	mov	r5, r0
 800efce:	6818      	ldr	r0, [r3, #0]
 800efd0:	460c      	mov	r4, r1
 800efd2:	b118      	cbz	r0, 800efdc <__swsetup_r+0x14>
 800efd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800efd6:	b90b      	cbnz	r3, 800efdc <__swsetup_r+0x14>
 800efd8:	f7fa ff64 	bl	8009ea4 <__sinit>
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efe2:	0718      	lsls	r0, r3, #28
 800efe4:	d422      	bmi.n	800f02c <__swsetup_r+0x64>
 800efe6:	06d9      	lsls	r1, r3, #27
 800efe8:	d407      	bmi.n	800effa <__swsetup_r+0x32>
 800efea:	2309      	movs	r3, #9
 800efec:	602b      	str	r3, [r5, #0]
 800efee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eff2:	81a3      	strh	r3, [r4, #12]
 800eff4:	f04f 30ff 	mov.w	r0, #4294967295
 800eff8:	e034      	b.n	800f064 <__swsetup_r+0x9c>
 800effa:	0758      	lsls	r0, r3, #29
 800effc:	d512      	bpl.n	800f024 <__swsetup_r+0x5c>
 800effe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f000:	b141      	cbz	r1, 800f014 <__swsetup_r+0x4c>
 800f002:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f006:	4299      	cmp	r1, r3
 800f008:	d002      	beq.n	800f010 <__swsetup_r+0x48>
 800f00a:	4628      	mov	r0, r5
 800f00c:	f7fa ffc6 	bl	8009f9c <_free_r>
 800f010:	2300      	movs	r3, #0
 800f012:	6323      	str	r3, [r4, #48]	; 0x30
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f01a:	81a3      	strh	r3, [r4, #12]
 800f01c:	2300      	movs	r3, #0
 800f01e:	6063      	str	r3, [r4, #4]
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	6023      	str	r3, [r4, #0]
 800f024:	89a3      	ldrh	r3, [r4, #12]
 800f026:	f043 0308 	orr.w	r3, r3, #8
 800f02a:	81a3      	strh	r3, [r4, #12]
 800f02c:	6923      	ldr	r3, [r4, #16]
 800f02e:	b94b      	cbnz	r3, 800f044 <__swsetup_r+0x7c>
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f03a:	d003      	beq.n	800f044 <__swsetup_r+0x7c>
 800f03c:	4621      	mov	r1, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	f000 f8ee 	bl	800f220 <__smakebuf_r>
 800f044:	89a0      	ldrh	r0, [r4, #12]
 800f046:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f04a:	f010 0301 	ands.w	r3, r0, #1
 800f04e:	d00a      	beq.n	800f066 <__swsetup_r+0x9e>
 800f050:	2300      	movs	r3, #0
 800f052:	60a3      	str	r3, [r4, #8]
 800f054:	6963      	ldr	r3, [r4, #20]
 800f056:	425b      	negs	r3, r3
 800f058:	61a3      	str	r3, [r4, #24]
 800f05a:	6923      	ldr	r3, [r4, #16]
 800f05c:	b943      	cbnz	r3, 800f070 <__swsetup_r+0xa8>
 800f05e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f062:	d1c4      	bne.n	800efee <__swsetup_r+0x26>
 800f064:	bd38      	pop	{r3, r4, r5, pc}
 800f066:	0781      	lsls	r1, r0, #30
 800f068:	bf58      	it	pl
 800f06a:	6963      	ldrpl	r3, [r4, #20]
 800f06c:	60a3      	str	r3, [r4, #8]
 800f06e:	e7f4      	b.n	800f05a <__swsetup_r+0x92>
 800f070:	2000      	movs	r0, #0
 800f072:	e7f7      	b.n	800f064 <__swsetup_r+0x9c>
 800f074:	2000001c 	.word	0x2000001c

0800f078 <__register_exitproc>:
 800f078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f07c:	f8df a078 	ldr.w	sl, [pc, #120]	; 800f0f8 <__register_exitproc+0x80>
 800f080:	4606      	mov	r6, r0
 800f082:	f8da 0000 	ldr.w	r0, [sl]
 800f086:	4698      	mov	r8, r3
 800f088:	460f      	mov	r7, r1
 800f08a:	4691      	mov	r9, r2
 800f08c:	f7fb f88c 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800f090:	4b18      	ldr	r3, [pc, #96]	; (800f0f4 <__register_exitproc+0x7c>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800f098:	b91c      	cbnz	r4, 800f0a2 <__register_exitproc+0x2a>
 800f09a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800f09e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800f0a2:	6865      	ldr	r5, [r4, #4]
 800f0a4:	f8da 0000 	ldr.w	r0, [sl]
 800f0a8:	2d1f      	cmp	r5, #31
 800f0aa:	dd05      	ble.n	800f0b8 <__register_exitproc+0x40>
 800f0ac:	f7fb f87d 	bl	800a1aa <__retarget_lock_release_recursive>
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	b19e      	cbz	r6, 800f0e2 <__register_exitproc+0x6a>
 800f0ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800f0c4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800f0c8:	40aa      	lsls	r2, r5
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800f0d0:	2e02      	cmp	r6, #2
 800f0d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800f0d6:	bf02      	ittt	eq
 800f0d8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800f0dc:	4313      	orreq	r3, r2
 800f0de:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800f0e2:	1c6b      	adds	r3, r5, #1
 800f0e4:	3502      	adds	r5, #2
 800f0e6:	6063      	str	r3, [r4, #4]
 800f0e8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800f0ec:	f7fb f85d 	bl	800a1aa <__retarget_lock_release_recursive>
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	e7df      	b.n	800f0b4 <__register_exitproc+0x3c>
 800f0f4:	080107f0 	.word	0x080107f0
 800f0f8:	20000858 	.word	0x20000858

0800f0fc <__assert_func>:
 800f0fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0fe:	4614      	mov	r4, r2
 800f100:	461a      	mov	r2, r3
 800f102:	4b09      	ldr	r3, [pc, #36]	; (800f128 <__assert_func+0x2c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4605      	mov	r5, r0
 800f108:	68d8      	ldr	r0, [r3, #12]
 800f10a:	b14c      	cbz	r4, 800f120 <__assert_func+0x24>
 800f10c:	4b07      	ldr	r3, [pc, #28]	; (800f12c <__assert_func+0x30>)
 800f10e:	9100      	str	r1, [sp, #0]
 800f110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f114:	4906      	ldr	r1, [pc, #24]	; (800f130 <__assert_func+0x34>)
 800f116:	462b      	mov	r3, r5
 800f118:	f000 f844 	bl	800f1a4 <fiprintf>
 800f11c:	f000 fdc8 	bl	800fcb0 <abort>
 800f120:	4b04      	ldr	r3, [pc, #16]	; (800f134 <__assert_func+0x38>)
 800f122:	461c      	mov	r4, r3
 800f124:	e7f3      	b.n	800f10e <__assert_func+0x12>
 800f126:	bf00      	nop
 800f128:	2000001c 	.word	0x2000001c
 800f12c:	08010aec 	.word	0x08010aec
 800f130:	08010af9 	.word	0x08010af9
 800f134:	08010b27 	.word	0x08010b27

0800f138 <_calloc_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	fba1 1502 	umull	r1, r5, r1, r2
 800f13e:	b92d      	cbnz	r5, 800f14c <_calloc_r+0x14>
 800f140:	f7fb f844 	bl	800a1cc <_malloc_r>
 800f144:	4604      	mov	r4, r0
 800f146:	b938      	cbnz	r0, 800f158 <_calloc_r+0x20>
 800f148:	4620      	mov	r0, r4
 800f14a:	bd38      	pop	{r3, r4, r5, pc}
 800f14c:	f7fa fd98 	bl	8009c80 <__errno>
 800f150:	230c      	movs	r3, #12
 800f152:	6003      	str	r3, [r0, #0]
 800f154:	2400      	movs	r4, #0
 800f156:	e7f7      	b.n	800f148 <_calloc_r+0x10>
 800f158:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f15c:	f022 0203 	bic.w	r2, r2, #3
 800f160:	3a04      	subs	r2, #4
 800f162:	2a24      	cmp	r2, #36	; 0x24
 800f164:	d819      	bhi.n	800f19a <_calloc_r+0x62>
 800f166:	2a13      	cmp	r2, #19
 800f168:	d915      	bls.n	800f196 <_calloc_r+0x5e>
 800f16a:	2a1b      	cmp	r2, #27
 800f16c:	e9c0 5500 	strd	r5, r5, [r0]
 800f170:	d806      	bhi.n	800f180 <_calloc_r+0x48>
 800f172:	f100 0308 	add.w	r3, r0, #8
 800f176:	2200      	movs	r2, #0
 800f178:	e9c3 2200 	strd	r2, r2, [r3]
 800f17c:	609a      	str	r2, [r3, #8]
 800f17e:	e7e3      	b.n	800f148 <_calloc_r+0x10>
 800f180:	2a24      	cmp	r2, #36	; 0x24
 800f182:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800f186:	bf11      	iteee	ne
 800f188:	f100 0310 	addne.w	r3, r0, #16
 800f18c:	6105      	streq	r5, [r0, #16]
 800f18e:	f100 0318 	addeq.w	r3, r0, #24
 800f192:	6145      	streq	r5, [r0, #20]
 800f194:	e7ef      	b.n	800f176 <_calloc_r+0x3e>
 800f196:	4603      	mov	r3, r0
 800f198:	e7ed      	b.n	800f176 <_calloc_r+0x3e>
 800f19a:	4629      	mov	r1, r5
 800f19c:	f7fb fa60 	bl	800a660 <memset>
 800f1a0:	e7d2      	b.n	800f148 <_calloc_r+0x10>
	...

0800f1a4 <fiprintf>:
 800f1a4:	b40e      	push	{r1, r2, r3}
 800f1a6:	b503      	push	{r0, r1, lr}
 800f1a8:	4601      	mov	r1, r0
 800f1aa:	ab03      	add	r3, sp, #12
 800f1ac:	4805      	ldr	r0, [pc, #20]	; (800f1c4 <fiprintf+0x20>)
 800f1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1b2:	6800      	ldr	r0, [r0, #0]
 800f1b4:	9301      	str	r3, [sp, #4]
 800f1b6:	f000 f8a5 	bl	800f304 <_vfiprintf_r>
 800f1ba:	b002      	add	sp, #8
 800f1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1c0:	b003      	add	sp, #12
 800f1c2:	4770      	bx	lr
 800f1c4:	2000001c 	.word	0x2000001c

0800f1c8 <__swhatbuf_r>:
 800f1c8:	b570      	push	{r4, r5, r6, lr}
 800f1ca:	460e      	mov	r6, r1
 800f1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d0:	2900      	cmp	r1, #0
 800f1d2:	b096      	sub	sp, #88	; 0x58
 800f1d4:	4614      	mov	r4, r2
 800f1d6:	461d      	mov	r5, r3
 800f1d8:	da0a      	bge.n	800f1f0 <__swhatbuf_r+0x28>
 800f1da:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800f1e4:	602b      	str	r3, [r5, #0]
 800f1e6:	d116      	bne.n	800f216 <__swhatbuf_r+0x4e>
 800f1e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	e015      	b.n	800f21c <__swhatbuf_r+0x54>
 800f1f0:	466a      	mov	r2, sp
 800f1f2:	f000 fdcf 	bl	800fd94 <_fstat_r>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	dbef      	blt.n	800f1da <__swhatbuf_r+0x12>
 800f1fa:	9a01      	ldr	r2, [sp, #4]
 800f1fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f204:	425a      	negs	r2, r3
 800f206:	415a      	adcs	r2, r3
 800f208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f20c:	602a      	str	r2, [r5, #0]
 800f20e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f212:	6023      	str	r3, [r4, #0]
 800f214:	e002      	b.n	800f21c <__swhatbuf_r+0x54>
 800f216:	2240      	movs	r2, #64	; 0x40
 800f218:	6022      	str	r2, [r4, #0]
 800f21a:	4618      	mov	r0, r3
 800f21c:	b016      	add	sp, #88	; 0x58
 800f21e:	bd70      	pop	{r4, r5, r6, pc}

0800f220 <__smakebuf_r>:
 800f220:	898b      	ldrh	r3, [r1, #12]
 800f222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f224:	079d      	lsls	r5, r3, #30
 800f226:	4606      	mov	r6, r0
 800f228:	460c      	mov	r4, r1
 800f22a:	d507      	bpl.n	800f23c <__smakebuf_r+0x1c>
 800f22c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	6123      	str	r3, [r4, #16]
 800f234:	2301      	movs	r3, #1
 800f236:	6163      	str	r3, [r4, #20]
 800f238:	b002      	add	sp, #8
 800f23a:	bd70      	pop	{r4, r5, r6, pc}
 800f23c:	ab01      	add	r3, sp, #4
 800f23e:	466a      	mov	r2, sp
 800f240:	f7ff ffc2 	bl	800f1c8 <__swhatbuf_r>
 800f244:	9900      	ldr	r1, [sp, #0]
 800f246:	4605      	mov	r5, r0
 800f248:	4630      	mov	r0, r6
 800f24a:	f7fa ffbf 	bl	800a1cc <_malloc_r>
 800f24e:	b948      	cbnz	r0, 800f264 <__smakebuf_r+0x44>
 800f250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f254:	059a      	lsls	r2, r3, #22
 800f256:	d4ef      	bmi.n	800f238 <__smakebuf_r+0x18>
 800f258:	f023 0303 	bic.w	r3, r3, #3
 800f25c:	f043 0302 	orr.w	r3, r3, #2
 800f260:	81a3      	strh	r3, [r4, #12]
 800f262:	e7e3      	b.n	800f22c <__smakebuf_r+0xc>
 800f264:	4b0d      	ldr	r3, [pc, #52]	; (800f29c <__smakebuf_r+0x7c>)
 800f266:	63f3      	str	r3, [r6, #60]	; 0x3c
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	6020      	str	r0, [r4, #0]
 800f26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	9b00      	ldr	r3, [sp, #0]
 800f274:	6163      	str	r3, [r4, #20]
 800f276:	9b01      	ldr	r3, [sp, #4]
 800f278:	6120      	str	r0, [r4, #16]
 800f27a:	b15b      	cbz	r3, 800f294 <__smakebuf_r+0x74>
 800f27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f280:	4630      	mov	r0, r6
 800f282:	f000 fd99 	bl	800fdb8 <_isatty_r>
 800f286:	b128      	cbz	r0, 800f294 <__smakebuf_r+0x74>
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	f023 0303 	bic.w	r3, r3, #3
 800f28e:	f043 0301 	orr.w	r3, r3, #1
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	89a0      	ldrh	r0, [r4, #12]
 800f296:	4305      	orrs	r5, r0
 800f298:	81a5      	strh	r5, [r4, #12]
 800f29a:	e7cd      	b.n	800f238 <__smakebuf_r+0x18>
 800f29c:	08009e69 	.word	0x08009e69

0800f2a0 <__sprint_r>:
 800f2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	6893      	ldr	r3, [r2, #8]
 800f2a6:	4680      	mov	r8, r0
 800f2a8:	460f      	mov	r7, r1
 800f2aa:	4614      	mov	r4, r2
 800f2ac:	b91b      	cbnz	r3, 800f2b6 <__sprint_r+0x16>
 800f2ae:	6053      	str	r3, [r2, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f2b8:	049d      	lsls	r5, r3, #18
 800f2ba:	d520      	bpl.n	800f2fe <__sprint_r+0x5e>
 800f2bc:	6815      	ldr	r5, [r2, #0]
 800f2be:	3508      	adds	r5, #8
 800f2c0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800f2c4:	f04f 0900 	mov.w	r9, #0
 800f2c8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800f2cc:	45ca      	cmp	sl, r9
 800f2ce:	dc0b      	bgt.n	800f2e8 <__sprint_r+0x48>
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	f026 0003 	bic.w	r0, r6, #3
 800f2d6:	1a18      	subs	r0, r3, r0
 800f2d8:	60a0      	str	r0, [r4, #8]
 800f2da:	3508      	adds	r5, #8
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d1ef      	bne.n	800f2c0 <__sprint_r+0x20>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f2e6:	e7e4      	b.n	800f2b2 <__sprint_r+0x12>
 800f2e8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f2ec:	463a      	mov	r2, r7
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	f000 fd26 	bl	800fd40 <_fputwc_r>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d0f3      	beq.n	800f2e0 <__sprint_r+0x40>
 800f2f8:	f109 0901 	add.w	r9, r9, #1
 800f2fc:	e7e6      	b.n	800f2cc <__sprint_r+0x2c>
 800f2fe:	f7fe fbfd 	bl	800dafc <__sfvwrite_r>
 800f302:	e7ed      	b.n	800f2e0 <__sprint_r+0x40>

0800f304 <_vfiprintf_r>:
 800f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	ed2d 8b02 	vpush	{d8}
 800f30c:	b0b9      	sub	sp, #228	; 0xe4
 800f30e:	460f      	mov	r7, r1
 800f310:	9201      	str	r2, [sp, #4]
 800f312:	461d      	mov	r5, r3
 800f314:	461c      	mov	r4, r3
 800f316:	4681      	mov	r9, r0
 800f318:	b118      	cbz	r0, 800f322 <_vfiprintf_r+0x1e>
 800f31a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f31c:	b90b      	cbnz	r3, 800f322 <_vfiprintf_r+0x1e>
 800f31e:	f7fa fdc1 	bl	8009ea4 <__sinit>
 800f322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f324:	07d8      	lsls	r0, r3, #31
 800f326:	d405      	bmi.n	800f334 <_vfiprintf_r+0x30>
 800f328:	89bb      	ldrh	r3, [r7, #12]
 800f32a:	0599      	lsls	r1, r3, #22
 800f32c:	d402      	bmi.n	800f334 <_vfiprintf_r+0x30>
 800f32e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f330:	f7fa ff3a 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800f334:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f338:	049a      	lsls	r2, r3, #18
 800f33a:	d406      	bmi.n	800f34a <_vfiprintf_r+0x46>
 800f33c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f340:	81bb      	strh	r3, [r7, #12]
 800f342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f348:	667b      	str	r3, [r7, #100]	; 0x64
 800f34a:	89bb      	ldrh	r3, [r7, #12]
 800f34c:	071e      	lsls	r6, r3, #28
 800f34e:	d501      	bpl.n	800f354 <_vfiprintf_r+0x50>
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	b9bb      	cbnz	r3, 800f384 <_vfiprintf_r+0x80>
 800f354:	4639      	mov	r1, r7
 800f356:	4648      	mov	r0, r9
 800f358:	f7ff fe36 	bl	800efc8 <__swsetup_r>
 800f35c:	b190      	cbz	r0, 800f384 <_vfiprintf_r+0x80>
 800f35e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f360:	07d8      	lsls	r0, r3, #31
 800f362:	d508      	bpl.n	800f376 <_vfiprintf_r+0x72>
 800f364:	f04f 33ff 	mov.w	r3, #4294967295
 800f368:	9302      	str	r3, [sp, #8]
 800f36a:	9802      	ldr	r0, [sp, #8]
 800f36c:	b039      	add	sp, #228	; 0xe4
 800f36e:	ecbd 8b02 	vpop	{d8}
 800f372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f376:	89bb      	ldrh	r3, [r7, #12]
 800f378:	0599      	lsls	r1, r3, #22
 800f37a:	d4f3      	bmi.n	800f364 <_vfiprintf_r+0x60>
 800f37c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f37e:	f7fa ff14 	bl	800a1aa <__retarget_lock_release_recursive>
 800f382:	e7ef      	b.n	800f364 <_vfiprintf_r+0x60>
 800f384:	89bb      	ldrh	r3, [r7, #12]
 800f386:	f003 021a 	and.w	r2, r3, #26
 800f38a:	2a0a      	cmp	r2, #10
 800f38c:	d116      	bne.n	800f3bc <_vfiprintf_r+0xb8>
 800f38e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f392:	2a00      	cmp	r2, #0
 800f394:	db12      	blt.n	800f3bc <_vfiprintf_r+0xb8>
 800f396:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f398:	07d2      	lsls	r2, r2, #31
 800f39a:	d404      	bmi.n	800f3a6 <_vfiprintf_r+0xa2>
 800f39c:	059e      	lsls	r6, r3, #22
 800f39e:	d402      	bmi.n	800f3a6 <_vfiprintf_r+0xa2>
 800f3a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f3a2:	f7fa ff02 	bl	800a1aa <__retarget_lock_release_recursive>
 800f3a6:	9a01      	ldr	r2, [sp, #4]
 800f3a8:	462b      	mov	r3, r5
 800f3aa:	4639      	mov	r1, r7
 800f3ac:	4648      	mov	r0, r9
 800f3ae:	b039      	add	sp, #228	; 0xe4
 800f3b0:	ecbd 8b02 	vpop	{d8}
 800f3b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b8:	f000 bc3a 	b.w	800fc30 <__sbprintf>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800f3c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f3c6:	ae0f      	add	r6, sp, #60	; 0x3c
 800f3c8:	ee08 3a10 	vmov	s16, r3
 800f3cc:	960c      	str	r6, [sp, #48]	; 0x30
 800f3ce:	9307      	str	r3, [sp, #28]
 800f3d0:	9302      	str	r3, [sp, #8]
 800f3d2:	9b01      	ldr	r3, [sp, #4]
 800f3d4:	461d      	mov	r5, r3
 800f3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3da:	b10a      	cbz	r2, 800f3e0 <_vfiprintf_r+0xdc>
 800f3dc:	2a25      	cmp	r2, #37	; 0x25
 800f3de:	d1f9      	bne.n	800f3d4 <_vfiprintf_r+0xd0>
 800f3e0:	9b01      	ldr	r3, [sp, #4]
 800f3e2:	ebb5 0803 	subs.w	r8, r5, r3
 800f3e6:	d00d      	beq.n	800f404 <_vfiprintf_r+0x100>
 800f3e8:	e9c6 3800 	strd	r3, r8, [r6]
 800f3ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ee:	4443      	add	r3, r8
 800f3f0:	930e      	str	r3, [sp, #56]	; 0x38
 800f3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	2b07      	cmp	r3, #7
 800f3f8:	930d      	str	r3, [sp, #52]	; 0x34
 800f3fa:	dc75      	bgt.n	800f4e8 <_vfiprintf_r+0x1e4>
 800f3fc:	3608      	adds	r6, #8
 800f3fe:	9b02      	ldr	r3, [sp, #8]
 800f400:	4443      	add	r3, r8
 800f402:	9302      	str	r3, [sp, #8]
 800f404:	782b      	ldrb	r3, [r5, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 83d6 	beq.w	800fbb8 <_vfiprintf_r+0x8b4>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f04f 31ff 	mov.w	r1, #4294967295
 800f412:	1c6a      	adds	r2, r5, #1
 800f414:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f418:	9100      	str	r1, [sp, #0]
 800f41a:	9303      	str	r3, [sp, #12]
 800f41c:	469a      	mov	sl, r3
 800f41e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f422:	9201      	str	r2, [sp, #4]
 800f424:	f1a3 0220 	sub.w	r2, r3, #32
 800f428:	2a5a      	cmp	r2, #90	; 0x5a
 800f42a:	f200 831f 	bhi.w	800fa6c <_vfiprintf_r+0x768>
 800f42e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f432:	009b      	.short	0x009b
 800f434:	031d031d 	.word	0x031d031d
 800f438:	031d00a3 	.word	0x031d00a3
 800f43c:	031d031d 	.word	0x031d031d
 800f440:	031d0082 	.word	0x031d0082
 800f444:	00a6031d 	.word	0x00a6031d
 800f448:	031d00b0 	.word	0x031d00b0
 800f44c:	00b200ad 	.word	0x00b200ad
 800f450:	00cd031d 	.word	0x00cd031d
 800f454:	00d000d0 	.word	0x00d000d0
 800f458:	00d000d0 	.word	0x00d000d0
 800f45c:	00d000d0 	.word	0x00d000d0
 800f460:	00d000d0 	.word	0x00d000d0
 800f464:	031d00d0 	.word	0x031d00d0
 800f468:	031d031d 	.word	0x031d031d
 800f46c:	031d031d 	.word	0x031d031d
 800f470:	031d031d 	.word	0x031d031d
 800f474:	031d031d 	.word	0x031d031d
 800f478:	010800fa 	.word	0x010800fa
 800f47c:	031d031d 	.word	0x031d031d
 800f480:	031d031d 	.word	0x031d031d
 800f484:	031d031d 	.word	0x031d031d
 800f488:	031d031d 	.word	0x031d031d
 800f48c:	031d031d 	.word	0x031d031d
 800f490:	031d0158 	.word	0x031d0158
 800f494:	031d031d 	.word	0x031d031d
 800f498:	031d01a1 	.word	0x031d01a1
 800f49c:	031d027e 	.word	0x031d027e
 800f4a0:	029e031d 	.word	0x029e031d
 800f4a4:	031d031d 	.word	0x031d031d
 800f4a8:	031d031d 	.word	0x031d031d
 800f4ac:	031d031d 	.word	0x031d031d
 800f4b0:	031d031d 	.word	0x031d031d
 800f4b4:	031d031d 	.word	0x031d031d
 800f4b8:	010a00fa 	.word	0x010a00fa
 800f4bc:	031d031d 	.word	0x031d031d
 800f4c0:	00e0031d 	.word	0x00e0031d
 800f4c4:	00f4010a 	.word	0x00f4010a
 800f4c8:	00ed031d 	.word	0x00ed031d
 800f4cc:	0136031d 	.word	0x0136031d
 800f4d0:	018f015a 	.word	0x018f015a
 800f4d4:	031d00f4 	.word	0x031d00f4
 800f4d8:	009901a1 	.word	0x009901a1
 800f4dc:	031d0280 	.word	0x031d0280
 800f4e0:	0065031d 	.word	0x0065031d
 800f4e4:	0099031d 	.word	0x0099031d
 800f4e8:	aa0c      	add	r2, sp, #48	; 0x30
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	4648      	mov	r0, r9
 800f4ee:	f7ff fed7 	bl	800f2a0 <__sprint_r>
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	f040 833f 	bne.w	800fb76 <_vfiprintf_r+0x872>
 800f4f8:	ae0f      	add	r6, sp, #60	; 0x3c
 800f4fa:	e780      	b.n	800f3fe <_vfiprintf_r+0xfa>
 800f4fc:	4a9c      	ldr	r2, [pc, #624]	; (800f770 <_vfiprintf_r+0x46c>)
 800f4fe:	9205      	str	r2, [sp, #20]
 800f500:	f01a 0220 	ands.w	r2, sl, #32
 800f504:	f000 8235 	beq.w	800f972 <_vfiprintf_r+0x66e>
 800f508:	3407      	adds	r4, #7
 800f50a:	f024 0207 	bic.w	r2, r4, #7
 800f50e:	4693      	mov	fp, r2
 800f510:	6855      	ldr	r5, [r2, #4]
 800f512:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f516:	f01a 0f01 	tst.w	sl, #1
 800f51a:	d009      	beq.n	800f530 <_vfiprintf_r+0x22c>
 800f51c:	ea54 0205 	orrs.w	r2, r4, r5
 800f520:	bf1f      	itttt	ne
 800f522:	2230      	movne	r2, #48	; 0x30
 800f524:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800f528:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800f52c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f530:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f534:	e11a      	b.n	800f76c <_vfiprintf_r+0x468>
 800f536:	4648      	mov	r0, r9
 800f538:	f7fe ffa0 	bl	800e47c <_localeconv_r>
 800f53c:	6843      	ldr	r3, [r0, #4]
 800f53e:	4618      	mov	r0, r3
 800f540:	ee08 3a10 	vmov	s16, r3
 800f544:	f7f0 fe56 	bl	80001f4 <strlen>
 800f548:	9007      	str	r0, [sp, #28]
 800f54a:	4648      	mov	r0, r9
 800f54c:	f7fe ff96 	bl	800e47c <_localeconv_r>
 800f550:	6883      	ldr	r3, [r0, #8]
 800f552:	9306      	str	r3, [sp, #24]
 800f554:	9b07      	ldr	r3, [sp, #28]
 800f556:	b12b      	cbz	r3, 800f564 <_vfiprintf_r+0x260>
 800f558:	9b06      	ldr	r3, [sp, #24]
 800f55a:	b11b      	cbz	r3, 800f564 <_vfiprintf_r+0x260>
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	b10b      	cbz	r3, 800f564 <_vfiprintf_r+0x260>
 800f560:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800f564:	9a01      	ldr	r2, [sp, #4]
 800f566:	e75a      	b.n	800f41e <_vfiprintf_r+0x11a>
 800f568:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1f9      	bne.n	800f564 <_vfiprintf_r+0x260>
 800f570:	2320      	movs	r3, #32
 800f572:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f576:	e7f5      	b.n	800f564 <_vfiprintf_r+0x260>
 800f578:	f04a 0a01 	orr.w	sl, sl, #1
 800f57c:	e7f2      	b.n	800f564 <_vfiprintf_r+0x260>
 800f57e:	f854 3b04 	ldr.w	r3, [r4], #4
 800f582:	9303      	str	r3, [sp, #12]
 800f584:	2b00      	cmp	r3, #0
 800f586:	daed      	bge.n	800f564 <_vfiprintf_r+0x260>
 800f588:	425b      	negs	r3, r3
 800f58a:	9303      	str	r3, [sp, #12]
 800f58c:	f04a 0a04 	orr.w	sl, sl, #4
 800f590:	e7e8      	b.n	800f564 <_vfiprintf_r+0x260>
 800f592:	232b      	movs	r3, #43	; 0x2b
 800f594:	e7ed      	b.n	800f572 <_vfiprintf_r+0x26e>
 800f596:	9a01      	ldr	r2, [sp, #4]
 800f598:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f59c:	2b2a      	cmp	r3, #42	; 0x2a
 800f59e:	d112      	bne.n	800f5c6 <_vfiprintf_r+0x2c2>
 800f5a0:	f854 0b04 	ldr.w	r0, [r4], #4
 800f5a4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800f5a8:	e9cd 3200 	strd	r3, r2, [sp]
 800f5ac:	e7da      	b.n	800f564 <_vfiprintf_r+0x260>
 800f5ae:	9b00      	ldr	r3, [sp, #0]
 800f5b0:	200a      	movs	r0, #10
 800f5b2:	fb00 1303 	mla	r3, r0, r3, r1
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f5bc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f5c0:	2909      	cmp	r1, #9
 800f5c2:	d9f4      	bls.n	800f5ae <_vfiprintf_r+0x2aa>
 800f5c4:	e72d      	b.n	800f422 <_vfiprintf_r+0x11e>
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	9100      	str	r1, [sp, #0]
 800f5ca:	e7f7      	b.n	800f5bc <_vfiprintf_r+0x2b8>
 800f5cc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800f5d0:	e7c8      	b.n	800f564 <_vfiprintf_r+0x260>
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	9a01      	ldr	r2, [sp, #4]
 800f5d6:	9103      	str	r1, [sp, #12]
 800f5d8:	9903      	ldr	r1, [sp, #12]
 800f5da:	3b30      	subs	r3, #48	; 0x30
 800f5dc:	200a      	movs	r0, #10
 800f5de:	fb00 3301 	mla	r3, r0, r1, r3
 800f5e2:	9303      	str	r3, [sp, #12]
 800f5e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f5e8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f5ec:	2909      	cmp	r1, #9
 800f5ee:	d9f3      	bls.n	800f5d8 <_vfiprintf_r+0x2d4>
 800f5f0:	e717      	b.n	800f422 <_vfiprintf_r+0x11e>
 800f5f2:	9b01      	ldr	r3, [sp, #4]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b68      	cmp	r3, #104	; 0x68
 800f5f8:	bf01      	itttt	eq
 800f5fa:	9b01      	ldreq	r3, [sp, #4]
 800f5fc:	3301      	addeq	r3, #1
 800f5fe:	9301      	streq	r3, [sp, #4]
 800f600:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800f604:	bf18      	it	ne
 800f606:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800f60a:	e7ab      	b.n	800f564 <_vfiprintf_r+0x260>
 800f60c:	9b01      	ldr	r3, [sp, #4]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b6c      	cmp	r3, #108	; 0x6c
 800f612:	d105      	bne.n	800f620 <_vfiprintf_r+0x31c>
 800f614:	9b01      	ldr	r3, [sp, #4]
 800f616:	3301      	adds	r3, #1
 800f618:	9301      	str	r3, [sp, #4]
 800f61a:	f04a 0a20 	orr.w	sl, sl, #32
 800f61e:	e7a1      	b.n	800f564 <_vfiprintf_r+0x260>
 800f620:	f04a 0a10 	orr.w	sl, sl, #16
 800f624:	e79e      	b.n	800f564 <_vfiprintf_r+0x260>
 800f626:	46a3      	mov	fp, r4
 800f628:	2100      	movs	r1, #0
 800f62a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800f62e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800f632:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f636:	2301      	movs	r3, #1
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	460d      	mov	r5, r1
 800f63c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800f640:	e0ad      	b.n	800f79e <_vfiprintf_r+0x49a>
 800f642:	f04a 0a10 	orr.w	sl, sl, #16
 800f646:	f01a 0f20 	tst.w	sl, #32
 800f64a:	d011      	beq.n	800f670 <_vfiprintf_r+0x36c>
 800f64c:	3407      	adds	r4, #7
 800f64e:	f024 0307 	bic.w	r3, r4, #7
 800f652:	469b      	mov	fp, r3
 800f654:	685d      	ldr	r5, [r3, #4]
 800f656:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f65a:	2d00      	cmp	r5, #0
 800f65c:	da06      	bge.n	800f66c <_vfiprintf_r+0x368>
 800f65e:	4264      	negs	r4, r4
 800f660:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800f664:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f668:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f66c:	2301      	movs	r3, #1
 800f66e:	e04a      	b.n	800f706 <_vfiprintf_r+0x402>
 800f670:	46a3      	mov	fp, r4
 800f672:	f01a 0f10 	tst.w	sl, #16
 800f676:	f85b 5b04 	ldr.w	r5, [fp], #4
 800f67a:	d002      	beq.n	800f682 <_vfiprintf_r+0x37e>
 800f67c:	462c      	mov	r4, r5
 800f67e:	17ed      	asrs	r5, r5, #31
 800f680:	e7eb      	b.n	800f65a <_vfiprintf_r+0x356>
 800f682:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f686:	d003      	beq.n	800f690 <_vfiprintf_r+0x38c>
 800f688:	b22c      	sxth	r4, r5
 800f68a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800f68e:	e7e4      	b.n	800f65a <_vfiprintf_r+0x356>
 800f690:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f694:	d0f2      	beq.n	800f67c <_vfiprintf_r+0x378>
 800f696:	b26c      	sxtb	r4, r5
 800f698:	f345 15c0 	sbfx	r5, r5, #7, #1
 800f69c:	e7dd      	b.n	800f65a <_vfiprintf_r+0x356>
 800f69e:	f01a 0f20 	tst.w	sl, #32
 800f6a2:	f104 0b04 	add.w	fp, r4, #4
 800f6a6:	d007      	beq.n	800f6b8 <_vfiprintf_r+0x3b4>
 800f6a8:	9a02      	ldr	r2, [sp, #8]
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	9902      	ldr	r1, [sp, #8]
 800f6ae:	17d2      	asrs	r2, r2, #31
 800f6b0:	e9c3 1200 	strd	r1, r2, [r3]
 800f6b4:	465c      	mov	r4, fp
 800f6b6:	e68c      	b.n	800f3d2 <_vfiprintf_r+0xce>
 800f6b8:	f01a 0f10 	tst.w	sl, #16
 800f6bc:	d003      	beq.n	800f6c6 <_vfiprintf_r+0x3c2>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	9a02      	ldr	r2, [sp, #8]
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	e7f6      	b.n	800f6b4 <_vfiprintf_r+0x3b0>
 800f6c6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f6ca:	d003      	beq.n	800f6d4 <_vfiprintf_r+0x3d0>
 800f6cc:	6823      	ldr	r3, [r4, #0]
 800f6ce:	9a02      	ldr	r2, [sp, #8]
 800f6d0:	801a      	strh	r2, [r3, #0]
 800f6d2:	e7ef      	b.n	800f6b4 <_vfiprintf_r+0x3b0>
 800f6d4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f6d8:	d0f1      	beq.n	800f6be <_vfiprintf_r+0x3ba>
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	9a02      	ldr	r2, [sp, #8]
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	e7e8      	b.n	800f6b4 <_vfiprintf_r+0x3b0>
 800f6e2:	f04a 0a10 	orr.w	sl, sl, #16
 800f6e6:	f01a 0320 	ands.w	r3, sl, #32
 800f6ea:	d01f      	beq.n	800f72c <_vfiprintf_r+0x428>
 800f6ec:	3407      	adds	r4, #7
 800f6ee:	f024 0307 	bic.w	r3, r4, #7
 800f6f2:	469b      	mov	fp, r3
 800f6f4:	685d      	ldr	r5, [r3, #4]
 800f6f6:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f6fa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f6fe:	2300      	movs	r3, #0
 800f700:	2200      	movs	r2, #0
 800f702:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800f706:	9a00      	ldr	r2, [sp, #0]
 800f708:	3201      	adds	r2, #1
 800f70a:	f000 8262 	beq.w	800fbd2 <_vfiprintf_r+0x8ce>
 800f70e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800f712:	9204      	str	r2, [sp, #16]
 800f714:	ea54 0205 	orrs.w	r2, r4, r5
 800f718:	f040 8261 	bne.w	800fbde <_vfiprintf_r+0x8da>
 800f71c:	9a00      	ldr	r2, [sp, #0]
 800f71e:	2a00      	cmp	r2, #0
 800f720:	f000 8199 	beq.w	800fa56 <_vfiprintf_r+0x752>
 800f724:	2b01      	cmp	r3, #1
 800f726:	f040 825d 	bne.w	800fbe4 <_vfiprintf_r+0x8e0>
 800f72a:	e139      	b.n	800f9a0 <_vfiprintf_r+0x69c>
 800f72c:	46a3      	mov	fp, r4
 800f72e:	f01a 0510 	ands.w	r5, sl, #16
 800f732:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f736:	d001      	beq.n	800f73c <_vfiprintf_r+0x438>
 800f738:	461d      	mov	r5, r3
 800f73a:	e7de      	b.n	800f6fa <_vfiprintf_r+0x3f6>
 800f73c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f740:	d001      	beq.n	800f746 <_vfiprintf_r+0x442>
 800f742:	b2a4      	uxth	r4, r4
 800f744:	e7d9      	b.n	800f6fa <_vfiprintf_r+0x3f6>
 800f746:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f74a:	d0d6      	beq.n	800f6fa <_vfiprintf_r+0x3f6>
 800f74c:	b2e4      	uxtb	r4, r4
 800f74e:	e7f3      	b.n	800f738 <_vfiprintf_r+0x434>
 800f750:	2330      	movs	r3, #48	; 0x30
 800f752:	46a3      	mov	fp, r4
 800f754:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800f758:	2378      	movs	r3, #120	; 0x78
 800f75a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800f75e:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f762:	4b03      	ldr	r3, [pc, #12]	; (800f770 <_vfiprintf_r+0x46c>)
 800f764:	9305      	str	r3, [sp, #20]
 800f766:	2500      	movs	r5, #0
 800f768:	f04a 0a02 	orr.w	sl, sl, #2
 800f76c:	2302      	movs	r3, #2
 800f76e:	e7c7      	b.n	800f700 <_vfiprintf_r+0x3fc>
 800f770:	08010858 	.word	0x08010858
 800f774:	9b00      	ldr	r3, [sp, #0]
 800f776:	46a3      	mov	fp, r4
 800f778:	2500      	movs	r5, #0
 800f77a:	1c5c      	adds	r4, r3, #1
 800f77c:	f85b 8b04 	ldr.w	r8, [fp], #4
 800f780:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800f784:	f000 80ce 	beq.w	800f924 <_vfiprintf_r+0x620>
 800f788:	461a      	mov	r2, r3
 800f78a:	4629      	mov	r1, r5
 800f78c:	4640      	mov	r0, r8
 800f78e:	f7f0 fd3f 	bl	8000210 <memchr>
 800f792:	2800      	cmp	r0, #0
 800f794:	f000 8174 	beq.w	800fa80 <_vfiprintf_r+0x77c>
 800f798:	eba0 0308 	sub.w	r3, r0, r8
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	9b00      	ldr	r3, [sp, #0]
 800f7a0:	42ab      	cmp	r3, r5
 800f7a2:	bfb8      	it	lt
 800f7a4:	462b      	movlt	r3, r5
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f7ac:	b113      	cbz	r3, 800f7b4 <_vfiprintf_r+0x4b0>
 800f7ae:	9b04      	ldr	r3, [sp, #16]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	9304      	str	r3, [sp, #16]
 800f7b4:	f01a 0302 	ands.w	r3, sl, #2
 800f7b8:	9308      	str	r3, [sp, #32]
 800f7ba:	bf1e      	ittt	ne
 800f7bc:	9b04      	ldrne	r3, [sp, #16]
 800f7be:	3302      	addne	r3, #2
 800f7c0:	9304      	strne	r3, [sp, #16]
 800f7c2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c8:	d11f      	bne.n	800f80a <_vfiprintf_r+0x506>
 800f7ca:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f7ce:	1a9c      	subs	r4, r3, r2
 800f7d0:	2c00      	cmp	r4, #0
 800f7d2:	dd1a      	ble.n	800f80a <_vfiprintf_r+0x506>
 800f7d4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f7d8:	48aa      	ldr	r0, [pc, #680]	; (800fa84 <_vfiprintf_r+0x780>)
 800f7da:	6030      	str	r0, [r6, #0]
 800f7dc:	2c10      	cmp	r4, #16
 800f7de:	f103 0301 	add.w	r3, r3, #1
 800f7e2:	f106 0108 	add.w	r1, r6, #8
 800f7e6:	f300 8153 	bgt.w	800fa90 <_vfiprintf_r+0x78c>
 800f7ea:	6074      	str	r4, [r6, #4]
 800f7ec:	2b07      	cmp	r3, #7
 800f7ee:	4414      	add	r4, r2
 800f7f0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f7f4:	f340 815e 	ble.w	800fab4 <_vfiprintf_r+0x7b0>
 800f7f8:	aa0c      	add	r2, sp, #48	; 0x30
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	4648      	mov	r0, r9
 800f7fe:	f7ff fd4f 	bl	800f2a0 <__sprint_r>
 800f802:	2800      	cmp	r0, #0
 800f804:	f040 81b7 	bne.w	800fb76 <_vfiprintf_r+0x872>
 800f808:	ae0f      	add	r6, sp, #60	; 0x3c
 800f80a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f80e:	b173      	cbz	r3, 800f82e <_vfiprintf_r+0x52a>
 800f810:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800f814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f816:	6032      	str	r2, [r6, #0]
 800f818:	2201      	movs	r2, #1
 800f81a:	6072      	str	r2, [r6, #4]
 800f81c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f81e:	3301      	adds	r3, #1
 800f820:	3201      	adds	r2, #1
 800f822:	2b07      	cmp	r3, #7
 800f824:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f828:	f300 8146 	bgt.w	800fab8 <_vfiprintf_r+0x7b4>
 800f82c:	3608      	adds	r6, #8
 800f82e:	9b08      	ldr	r3, [sp, #32]
 800f830:	b16b      	cbz	r3, 800f84e <_vfiprintf_r+0x54a>
 800f832:	aa0b      	add	r2, sp, #44	; 0x2c
 800f834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f836:	6032      	str	r2, [r6, #0]
 800f838:	2202      	movs	r2, #2
 800f83a:	6072      	str	r2, [r6, #4]
 800f83c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f83e:	3301      	adds	r3, #1
 800f840:	3202      	adds	r2, #2
 800f842:	2b07      	cmp	r3, #7
 800f844:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f848:	f300 813f 	bgt.w	800faca <_vfiprintf_r+0x7c6>
 800f84c:	3608      	adds	r6, #8
 800f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f850:	2b80      	cmp	r3, #128	; 0x80
 800f852:	d11f      	bne.n	800f894 <_vfiprintf_r+0x590>
 800f854:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f858:	1a9c      	subs	r4, r3, r2
 800f85a:	2c00      	cmp	r4, #0
 800f85c:	dd1a      	ble.n	800f894 <_vfiprintf_r+0x590>
 800f85e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f862:	4889      	ldr	r0, [pc, #548]	; (800fa88 <_vfiprintf_r+0x784>)
 800f864:	6030      	str	r0, [r6, #0]
 800f866:	2c10      	cmp	r4, #16
 800f868:	f103 0301 	add.w	r3, r3, #1
 800f86c:	f106 0108 	add.w	r1, r6, #8
 800f870:	f300 8134 	bgt.w	800fadc <_vfiprintf_r+0x7d8>
 800f874:	6074      	str	r4, [r6, #4]
 800f876:	2b07      	cmp	r3, #7
 800f878:	4414      	add	r4, r2
 800f87a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f87e:	f340 813f 	ble.w	800fb00 <_vfiprintf_r+0x7fc>
 800f882:	aa0c      	add	r2, sp, #48	; 0x30
 800f884:	4639      	mov	r1, r7
 800f886:	4648      	mov	r0, r9
 800f888:	f7ff fd0a 	bl	800f2a0 <__sprint_r>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	f040 8172 	bne.w	800fb76 <_vfiprintf_r+0x872>
 800f892:	ae0f      	add	r6, sp, #60	; 0x3c
 800f894:	9b00      	ldr	r3, [sp, #0]
 800f896:	1aec      	subs	r4, r5, r3
 800f898:	2c00      	cmp	r4, #0
 800f89a:	dd1a      	ble.n	800f8d2 <_vfiprintf_r+0x5ce>
 800f89c:	4d7a      	ldr	r5, [pc, #488]	; (800fa88 <_vfiprintf_r+0x784>)
 800f89e:	6035      	str	r5, [r6, #0]
 800f8a0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800f8a4:	2c10      	cmp	r4, #16
 800f8a6:	f103 0301 	add.w	r3, r3, #1
 800f8aa:	f106 0208 	add.w	r2, r6, #8
 800f8ae:	f300 8129 	bgt.w	800fb04 <_vfiprintf_r+0x800>
 800f8b2:	6074      	str	r4, [r6, #4]
 800f8b4:	2b07      	cmp	r3, #7
 800f8b6:	440c      	add	r4, r1
 800f8b8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f8bc:	f340 8133 	ble.w	800fb26 <_vfiprintf_r+0x822>
 800f8c0:	aa0c      	add	r2, sp, #48	; 0x30
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	4648      	mov	r0, r9
 800f8c6:	f7ff fceb 	bl	800f2a0 <__sprint_r>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f040 8153 	bne.w	800fb76 <_vfiprintf_r+0x872>
 800f8d0:	ae0f      	add	r6, sp, #60	; 0x3c
 800f8d2:	9b00      	ldr	r3, [sp, #0]
 800f8d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f8d6:	6073      	str	r3, [r6, #4]
 800f8d8:	4418      	add	r0, r3
 800f8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8dc:	f8c6 8000 	str.w	r8, [r6]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	2b07      	cmp	r3, #7
 800f8e4:	900e      	str	r0, [sp, #56]	; 0x38
 800f8e6:	930d      	str	r3, [sp, #52]	; 0x34
 800f8e8:	f300 811f 	bgt.w	800fb2a <_vfiprintf_r+0x826>
 800f8ec:	f106 0308 	add.w	r3, r6, #8
 800f8f0:	f01a 0f04 	tst.w	sl, #4
 800f8f4:	f040 8121 	bne.w	800fb3a <_vfiprintf_r+0x836>
 800f8f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f8fc:	9904      	ldr	r1, [sp, #16]
 800f8fe:	428a      	cmp	r2, r1
 800f900:	bfac      	ite	ge
 800f902:	189b      	addge	r3, r3, r2
 800f904:	185b      	addlt	r3, r3, r1
 800f906:	9302      	str	r3, [sp, #8]
 800f908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f90a:	b13b      	cbz	r3, 800f91c <_vfiprintf_r+0x618>
 800f90c:	aa0c      	add	r2, sp, #48	; 0x30
 800f90e:	4639      	mov	r1, r7
 800f910:	4648      	mov	r0, r9
 800f912:	f7ff fcc5 	bl	800f2a0 <__sprint_r>
 800f916:	2800      	cmp	r0, #0
 800f918:	f040 812d 	bne.w	800fb76 <_vfiprintf_r+0x872>
 800f91c:	2300      	movs	r3, #0
 800f91e:	930d      	str	r3, [sp, #52]	; 0x34
 800f920:	ae0f      	add	r6, sp, #60	; 0x3c
 800f922:	e6c7      	b.n	800f6b4 <_vfiprintf_r+0x3b0>
 800f924:	4640      	mov	r0, r8
 800f926:	f7f0 fc65 	bl	80001f4 <strlen>
 800f92a:	9000      	str	r0, [sp, #0]
 800f92c:	e737      	b.n	800f79e <_vfiprintf_r+0x49a>
 800f92e:	f04a 0a10 	orr.w	sl, sl, #16
 800f932:	f01a 0320 	ands.w	r3, sl, #32
 800f936:	d008      	beq.n	800f94a <_vfiprintf_r+0x646>
 800f938:	3407      	adds	r4, #7
 800f93a:	f024 0307 	bic.w	r3, r4, #7
 800f93e:	469b      	mov	fp, r3
 800f940:	685d      	ldr	r5, [r3, #4]
 800f942:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f946:	2301      	movs	r3, #1
 800f948:	e6da      	b.n	800f700 <_vfiprintf_r+0x3fc>
 800f94a:	46a3      	mov	fp, r4
 800f94c:	f01a 0510 	ands.w	r5, sl, #16
 800f950:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f954:	d001      	beq.n	800f95a <_vfiprintf_r+0x656>
 800f956:	461d      	mov	r5, r3
 800f958:	e7f5      	b.n	800f946 <_vfiprintf_r+0x642>
 800f95a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f95e:	d001      	beq.n	800f964 <_vfiprintf_r+0x660>
 800f960:	b2a4      	uxth	r4, r4
 800f962:	e7f0      	b.n	800f946 <_vfiprintf_r+0x642>
 800f964:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f968:	d0ed      	beq.n	800f946 <_vfiprintf_r+0x642>
 800f96a:	b2e4      	uxtb	r4, r4
 800f96c:	e7f3      	b.n	800f956 <_vfiprintf_r+0x652>
 800f96e:	4a47      	ldr	r2, [pc, #284]	; (800fa8c <_vfiprintf_r+0x788>)
 800f970:	e5c5      	b.n	800f4fe <_vfiprintf_r+0x1fa>
 800f972:	46a3      	mov	fp, r4
 800f974:	f01a 0510 	ands.w	r5, sl, #16
 800f978:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f97c:	d001      	beq.n	800f982 <_vfiprintf_r+0x67e>
 800f97e:	4615      	mov	r5, r2
 800f980:	e5c9      	b.n	800f516 <_vfiprintf_r+0x212>
 800f982:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f986:	d001      	beq.n	800f98c <_vfiprintf_r+0x688>
 800f988:	b2a4      	uxth	r4, r4
 800f98a:	e5c4      	b.n	800f516 <_vfiprintf_r+0x212>
 800f98c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f990:	f43f adc1 	beq.w	800f516 <_vfiprintf_r+0x212>
 800f994:	b2e4      	uxtb	r4, r4
 800f996:	e7f2      	b.n	800f97e <_vfiprintf_r+0x67a>
 800f998:	2c0a      	cmp	r4, #10
 800f99a:	f175 0300 	sbcs.w	r3, r5, #0
 800f99e:	d205      	bcs.n	800f9ac <_vfiprintf_r+0x6a8>
 800f9a0:	3430      	adds	r4, #48	; 0x30
 800f9a2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800f9a6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800f9aa:	e137      	b.n	800fc1c <_vfiprintf_r+0x918>
 800f9ac:	ab38      	add	r3, sp, #224	; 0xe0
 800f9ae:	9308      	str	r3, [sp, #32]
 800f9b0:	9b04      	ldr	r3, [sp, #16]
 800f9b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9b6:	f04f 0a00 	mov.w	sl, #0
 800f9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f9bc:	9b08      	ldr	r3, [sp, #32]
 800f9be:	220a      	movs	r2, #10
 800f9c0:	f103 38ff 	add.w	r8, r3, #4294967295
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	f7f1 f975 	bl	8000cb8 <__aeabi_uldivmod>
 800f9ce:	9b08      	ldr	r3, [sp, #32]
 800f9d0:	3230      	adds	r2, #48	; 0x30
 800f9d2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d8:	f10a 0a01 	add.w	sl, sl, #1
 800f9dc:	b1db      	cbz	r3, 800fa16 <_vfiprintf_r+0x712>
 800f9de:	9b06      	ldr	r3, [sp, #24]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	4553      	cmp	r3, sl
 800f9e4:	d117      	bne.n	800fa16 <_vfiprintf_r+0x712>
 800f9e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f9ea:	d014      	beq.n	800fa16 <_vfiprintf_r+0x712>
 800f9ec:	2c0a      	cmp	r4, #10
 800f9ee:	f175 0300 	sbcs.w	r3, r5, #0
 800f9f2:	d310      	bcc.n	800fa16 <_vfiprintf_r+0x712>
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	eba8 0803 	sub.w	r8, r8, r3
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	ee18 1a10 	vmov	r1, s16
 800fa00:	4640      	mov	r0, r8
 800fa02:	f7ff fa45 	bl	800ee90 <strncpy>
 800fa06:	9b06      	ldr	r3, [sp, #24]
 800fa08:	785b      	ldrb	r3, [r3, #1]
 800fa0a:	b1a3      	cbz	r3, 800fa36 <_vfiprintf_r+0x732>
 800fa0c:	9b06      	ldr	r3, [sp, #24]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	9306      	str	r3, [sp, #24]
 800fa12:	f04f 0a00 	mov.w	sl, #0
 800fa16:	2300      	movs	r3, #0
 800fa18:	220a      	movs	r2, #10
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	f7f1 f94b 	bl	8000cb8 <__aeabi_uldivmod>
 800fa22:	2c0a      	cmp	r4, #10
 800fa24:	f175 0300 	sbcs.w	r3, r5, #0
 800fa28:	f0c0 80f8 	bcc.w	800fc1c <_vfiprintf_r+0x918>
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	460d      	mov	r5, r1
 800fa30:	f8cd 8020 	str.w	r8, [sp, #32]
 800fa34:	e7c2      	b.n	800f9bc <_vfiprintf_r+0x6b8>
 800fa36:	469a      	mov	sl, r3
 800fa38:	e7ed      	b.n	800fa16 <_vfiprintf_r+0x712>
 800fa3a:	f004 030f 	and.w	r3, r4, #15
 800fa3e:	9a05      	ldr	r2, [sp, #20]
 800fa40:	0924      	lsrs	r4, r4, #4
 800fa42:	5cd3      	ldrb	r3, [r2, r3]
 800fa44:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800fa48:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800fa4c:	092d      	lsrs	r5, r5, #4
 800fa4e:	ea54 0305 	orrs.w	r3, r4, r5
 800fa52:	d1f2      	bne.n	800fa3a <_vfiprintf_r+0x736>
 800fa54:	e0e2      	b.n	800fc1c <_vfiprintf_r+0x918>
 800fa56:	b933      	cbnz	r3, 800fa66 <_vfiprintf_r+0x762>
 800fa58:	f01a 0f01 	tst.w	sl, #1
 800fa5c:	d003      	beq.n	800fa66 <_vfiprintf_r+0x762>
 800fa5e:	2330      	movs	r3, #48	; 0x30
 800fa60:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800fa64:	e79f      	b.n	800f9a6 <_vfiprintf_r+0x6a2>
 800fa66:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800fa6a:	e0d7      	b.n	800fc1c <_vfiprintf_r+0x918>
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 80a3 	beq.w	800fbb8 <_vfiprintf_r+0x8b4>
 800fa72:	2100      	movs	r1, #0
 800fa74:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800fa78:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800fa7c:	46a3      	mov	fp, r4
 800fa7e:	e5da      	b.n	800f636 <_vfiprintf_r+0x332>
 800fa80:	4605      	mov	r5, r0
 800fa82:	e68c      	b.n	800f79e <_vfiprintf_r+0x49a>
 800fa84:	08010b28 	.word	0x08010b28
 800fa88:	08010b38 	.word	0x08010b38
 800fa8c:	08010869 	.word	0x08010869
 800fa90:	2010      	movs	r0, #16
 800fa92:	4402      	add	r2, r0
 800fa94:	2b07      	cmp	r3, #7
 800fa96:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800fa9a:	6070      	str	r0, [r6, #4]
 800fa9c:	dd07      	ble.n	800faae <_vfiprintf_r+0x7aa>
 800fa9e:	aa0c      	add	r2, sp, #48	; 0x30
 800faa0:	4639      	mov	r1, r7
 800faa2:	4648      	mov	r0, r9
 800faa4:	f7ff fbfc 	bl	800f2a0 <__sprint_r>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d164      	bne.n	800fb76 <_vfiprintf_r+0x872>
 800faac:	a90f      	add	r1, sp, #60	; 0x3c
 800faae:	3c10      	subs	r4, #16
 800fab0:	460e      	mov	r6, r1
 800fab2:	e68f      	b.n	800f7d4 <_vfiprintf_r+0x4d0>
 800fab4:	460e      	mov	r6, r1
 800fab6:	e6a8      	b.n	800f80a <_vfiprintf_r+0x506>
 800fab8:	aa0c      	add	r2, sp, #48	; 0x30
 800faba:	4639      	mov	r1, r7
 800fabc:	4648      	mov	r0, r9
 800fabe:	f7ff fbef 	bl	800f2a0 <__sprint_r>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d157      	bne.n	800fb76 <_vfiprintf_r+0x872>
 800fac6:	ae0f      	add	r6, sp, #60	; 0x3c
 800fac8:	e6b1      	b.n	800f82e <_vfiprintf_r+0x52a>
 800faca:	aa0c      	add	r2, sp, #48	; 0x30
 800facc:	4639      	mov	r1, r7
 800face:	4648      	mov	r0, r9
 800fad0:	f7ff fbe6 	bl	800f2a0 <__sprint_r>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d14e      	bne.n	800fb76 <_vfiprintf_r+0x872>
 800fad8:	ae0f      	add	r6, sp, #60	; 0x3c
 800fada:	e6b8      	b.n	800f84e <_vfiprintf_r+0x54a>
 800fadc:	2010      	movs	r0, #16
 800fade:	4402      	add	r2, r0
 800fae0:	2b07      	cmp	r3, #7
 800fae2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800fae6:	6070      	str	r0, [r6, #4]
 800fae8:	dd07      	ble.n	800fafa <_vfiprintf_r+0x7f6>
 800faea:	aa0c      	add	r2, sp, #48	; 0x30
 800faec:	4639      	mov	r1, r7
 800faee:	4648      	mov	r0, r9
 800faf0:	f7ff fbd6 	bl	800f2a0 <__sprint_r>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d13e      	bne.n	800fb76 <_vfiprintf_r+0x872>
 800faf8:	a90f      	add	r1, sp, #60	; 0x3c
 800fafa:	3c10      	subs	r4, #16
 800fafc:	460e      	mov	r6, r1
 800fafe:	e6ae      	b.n	800f85e <_vfiprintf_r+0x55a>
 800fb00:	460e      	mov	r6, r1
 800fb02:	e6c7      	b.n	800f894 <_vfiprintf_r+0x590>
 800fb04:	2010      	movs	r0, #16
 800fb06:	4401      	add	r1, r0
 800fb08:	2b07      	cmp	r3, #7
 800fb0a:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800fb0e:	6070      	str	r0, [r6, #4]
 800fb10:	dd06      	ble.n	800fb20 <_vfiprintf_r+0x81c>
 800fb12:	aa0c      	add	r2, sp, #48	; 0x30
 800fb14:	4639      	mov	r1, r7
 800fb16:	4648      	mov	r0, r9
 800fb18:	f7ff fbc2 	bl	800f2a0 <__sprint_r>
 800fb1c:	bb58      	cbnz	r0, 800fb76 <_vfiprintf_r+0x872>
 800fb1e:	aa0f      	add	r2, sp, #60	; 0x3c
 800fb20:	3c10      	subs	r4, #16
 800fb22:	4616      	mov	r6, r2
 800fb24:	e6bb      	b.n	800f89e <_vfiprintf_r+0x59a>
 800fb26:	4616      	mov	r6, r2
 800fb28:	e6d3      	b.n	800f8d2 <_vfiprintf_r+0x5ce>
 800fb2a:	aa0c      	add	r2, sp, #48	; 0x30
 800fb2c:	4639      	mov	r1, r7
 800fb2e:	4648      	mov	r0, r9
 800fb30:	f7ff fbb6 	bl	800f2a0 <__sprint_r>
 800fb34:	b9f8      	cbnz	r0, 800fb76 <_vfiprintf_r+0x872>
 800fb36:	ab0f      	add	r3, sp, #60	; 0x3c
 800fb38:	e6da      	b.n	800f8f0 <_vfiprintf_r+0x5ec>
 800fb3a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fb3e:	1a54      	subs	r4, r2, r1
 800fb40:	2c00      	cmp	r4, #0
 800fb42:	f77f aed9 	ble.w	800f8f8 <_vfiprintf_r+0x5f4>
 800fb46:	4d39      	ldr	r5, [pc, #228]	; (800fc2c <_vfiprintf_r+0x928>)
 800fb48:	2610      	movs	r6, #16
 800fb4a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800fb4e:	2c10      	cmp	r4, #16
 800fb50:	f102 0201 	add.w	r2, r2, #1
 800fb54:	601d      	str	r5, [r3, #0]
 800fb56:	dc1d      	bgt.n	800fb94 <_vfiprintf_r+0x890>
 800fb58:	605c      	str	r4, [r3, #4]
 800fb5a:	2a07      	cmp	r2, #7
 800fb5c:	440c      	add	r4, r1
 800fb5e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800fb62:	f77f aec9 	ble.w	800f8f8 <_vfiprintf_r+0x5f4>
 800fb66:	aa0c      	add	r2, sp, #48	; 0x30
 800fb68:	4639      	mov	r1, r7
 800fb6a:	4648      	mov	r0, r9
 800fb6c:	f7ff fb98 	bl	800f2a0 <__sprint_r>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	f43f aec1 	beq.w	800f8f8 <_vfiprintf_r+0x5f4>
 800fb76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb78:	07d9      	lsls	r1, r3, #31
 800fb7a:	d405      	bmi.n	800fb88 <_vfiprintf_r+0x884>
 800fb7c:	89bb      	ldrh	r3, [r7, #12]
 800fb7e:	059a      	lsls	r2, r3, #22
 800fb80:	d402      	bmi.n	800fb88 <_vfiprintf_r+0x884>
 800fb82:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb84:	f7fa fb11 	bl	800a1aa <__retarget_lock_release_recursive>
 800fb88:	89bb      	ldrh	r3, [r7, #12]
 800fb8a:	065b      	lsls	r3, r3, #25
 800fb8c:	f57f abed 	bpl.w	800f36a <_vfiprintf_r+0x66>
 800fb90:	f7ff bbe8 	b.w	800f364 <_vfiprintf_r+0x60>
 800fb94:	3110      	adds	r1, #16
 800fb96:	2a07      	cmp	r2, #7
 800fb98:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800fb9c:	605e      	str	r6, [r3, #4]
 800fb9e:	dc02      	bgt.n	800fba6 <_vfiprintf_r+0x8a2>
 800fba0:	3308      	adds	r3, #8
 800fba2:	3c10      	subs	r4, #16
 800fba4:	e7d1      	b.n	800fb4a <_vfiprintf_r+0x846>
 800fba6:	aa0c      	add	r2, sp, #48	; 0x30
 800fba8:	4639      	mov	r1, r7
 800fbaa:	4648      	mov	r0, r9
 800fbac:	f7ff fb78 	bl	800f2a0 <__sprint_r>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d1e0      	bne.n	800fb76 <_vfiprintf_r+0x872>
 800fbb4:	ab0f      	add	r3, sp, #60	; 0x3c
 800fbb6:	e7f4      	b.n	800fba2 <_vfiprintf_r+0x89e>
 800fbb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbba:	b913      	cbnz	r3, 800fbc2 <_vfiprintf_r+0x8be>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	930d      	str	r3, [sp, #52]	; 0x34
 800fbc0:	e7d9      	b.n	800fb76 <_vfiprintf_r+0x872>
 800fbc2:	aa0c      	add	r2, sp, #48	; 0x30
 800fbc4:	4639      	mov	r1, r7
 800fbc6:	4648      	mov	r0, r9
 800fbc8:	f7ff fb6a 	bl	800f2a0 <__sprint_r>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0f5      	beq.n	800fbbc <_vfiprintf_r+0x8b8>
 800fbd0:	e7d1      	b.n	800fb76 <_vfiprintf_r+0x872>
 800fbd2:	ea54 0205 	orrs.w	r2, r4, r5
 800fbd6:	f8cd a010 	str.w	sl, [sp, #16]
 800fbda:	f43f ada3 	beq.w	800f724 <_vfiprintf_r+0x420>
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	f43f aeda 	beq.w	800f998 <_vfiprintf_r+0x694>
 800fbe4:	2b02      	cmp	r3, #2
 800fbe6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800fbea:	f43f af26 	beq.w	800fa3a <_vfiprintf_r+0x736>
 800fbee:	f004 0307 	and.w	r3, r4, #7
 800fbf2:	08e4      	lsrs	r4, r4, #3
 800fbf4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800fbf8:	08ed      	lsrs	r5, r5, #3
 800fbfa:	3330      	adds	r3, #48	; 0x30
 800fbfc:	ea54 0105 	orrs.w	r1, r4, r5
 800fc00:	4642      	mov	r2, r8
 800fc02:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800fc06:	d1f2      	bne.n	800fbee <_vfiprintf_r+0x8ea>
 800fc08:	9904      	ldr	r1, [sp, #16]
 800fc0a:	07c8      	lsls	r0, r1, #31
 800fc0c:	d506      	bpl.n	800fc1c <_vfiprintf_r+0x918>
 800fc0e:	2b30      	cmp	r3, #48	; 0x30
 800fc10:	d004      	beq.n	800fc1c <_vfiprintf_r+0x918>
 800fc12:	2330      	movs	r3, #48	; 0x30
 800fc14:	f808 3c01 	strb.w	r3, [r8, #-1]
 800fc18:	f1a2 0802 	sub.w	r8, r2, #2
 800fc1c:	ab38      	add	r3, sp, #224	; 0xe0
 800fc1e:	eba3 0308 	sub.w	r3, r3, r8
 800fc22:	9d00      	ldr	r5, [sp, #0]
 800fc24:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	e5b8      	b.n	800f79e <_vfiprintf_r+0x49a>
 800fc2c:	08010b28 	.word	0x08010b28

0800fc30 <__sbprintf>:
 800fc30:	b570      	push	{r4, r5, r6, lr}
 800fc32:	460c      	mov	r4, r1
 800fc34:	8989      	ldrh	r1, [r1, #12]
 800fc36:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800fc3a:	f021 0102 	bic.w	r1, r1, #2
 800fc3e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fc42:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fc44:	911b      	str	r1, [sp, #108]	; 0x6c
 800fc46:	89e1      	ldrh	r1, [r4, #14]
 800fc48:	f8ad 1016 	strh.w	r1, [sp, #22]
 800fc4c:	69e1      	ldr	r1, [r4, #28]
 800fc4e:	9109      	str	r1, [sp, #36]	; 0x24
 800fc50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fc52:	910b      	str	r1, [sp, #44]	; 0x2c
 800fc54:	a91c      	add	r1, sp, #112	; 0x70
 800fc56:	9102      	str	r1, [sp, #8]
 800fc58:	9106      	str	r1, [sp, #24]
 800fc5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc5e:	4606      	mov	r6, r0
 800fc60:	9104      	str	r1, [sp, #16]
 800fc62:	9107      	str	r1, [sp, #28]
 800fc64:	a818      	add	r0, sp, #96	; 0x60
 800fc66:	2100      	movs	r1, #0
 800fc68:	e9cd 3200 	strd	r3, r2, [sp]
 800fc6c:	9108      	str	r1, [sp, #32]
 800fc6e:	f7fa fa99 	bl	800a1a4 <__retarget_lock_init_recursive>
 800fc72:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc76:	a902      	add	r1, sp, #8
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f7ff fb43 	bl	800f304 <_vfiprintf_r>
 800fc7e:	1e05      	subs	r5, r0, #0
 800fc80:	db07      	blt.n	800fc92 <__sbprintf+0x62>
 800fc82:	a902      	add	r1, sp, #8
 800fc84:	4630      	mov	r0, r6
 800fc86:	f7fa f88f 	bl	8009da8 <_fflush_r>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	bf18      	it	ne
 800fc8e:	f04f 35ff 	movne.w	r5, #4294967295
 800fc92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fc96:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fc98:	065b      	lsls	r3, r3, #25
 800fc9a:	bf42      	ittt	mi
 800fc9c:	89a3      	ldrhmi	r3, [r4, #12]
 800fc9e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800fca2:	81a3      	strhmi	r3, [r4, #12]
 800fca4:	f7fa fa7f 	bl	800a1a6 <__retarget_lock_close_recursive>
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800fcae:	bd70      	pop	{r4, r5, r6, pc}

0800fcb0 <abort>:
 800fcb0:	b508      	push	{r3, lr}
 800fcb2:	2006      	movs	r0, #6
 800fcb4:	f000 f8ba 	bl	800fe2c <raise>
 800fcb8:	2001      	movs	r0, #1
 800fcba:	f7f2 fe55 	bl	8002968 <_exit>

0800fcbe <__fputwc>:
 800fcbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcc2:	4680      	mov	r8, r0
 800fcc4:	460e      	mov	r6, r1
 800fcc6:	4615      	mov	r5, r2
 800fcc8:	f7fe fbd2 	bl	800e470 <__locale_mb_cur_max>
 800fccc:	2801      	cmp	r0, #1
 800fcce:	d11c      	bne.n	800fd0a <__fputwc+0x4c>
 800fcd0:	1e73      	subs	r3, r6, #1
 800fcd2:	2bfe      	cmp	r3, #254	; 0xfe
 800fcd4:	d819      	bhi.n	800fd0a <__fputwc+0x4c>
 800fcd6:	f88d 6004 	strb.w	r6, [sp, #4]
 800fcda:	4604      	mov	r4, r0
 800fcdc:	2700      	movs	r7, #0
 800fcde:	f10d 0904 	add.w	r9, sp, #4
 800fce2:	42a7      	cmp	r7, r4
 800fce4:	d020      	beq.n	800fd28 <__fputwc+0x6a>
 800fce6:	68ab      	ldr	r3, [r5, #8]
 800fce8:	f817 1009 	ldrb.w	r1, [r7, r9]
 800fcec:	3b01      	subs	r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	60ab      	str	r3, [r5, #8]
 800fcf2:	da04      	bge.n	800fcfe <__fputwc+0x40>
 800fcf4:	69aa      	ldr	r2, [r5, #24]
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	db1a      	blt.n	800fd30 <__fputwc+0x72>
 800fcfa:	290a      	cmp	r1, #10
 800fcfc:	d018      	beq.n	800fd30 <__fputwc+0x72>
 800fcfe:	682b      	ldr	r3, [r5, #0]
 800fd00:	1c5a      	adds	r2, r3, #1
 800fd02:	602a      	str	r2, [r5, #0]
 800fd04:	7019      	strb	r1, [r3, #0]
 800fd06:	3701      	adds	r7, #1
 800fd08:	e7eb      	b.n	800fce2 <__fputwc+0x24>
 800fd0a:	a901      	add	r1, sp, #4
 800fd0c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800fd10:	4632      	mov	r2, r6
 800fd12:	4640      	mov	r0, r8
 800fd14:	f000 f8f0 	bl	800fef8 <_wcrtomb_r>
 800fd18:	1c41      	adds	r1, r0, #1
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	d1de      	bne.n	800fcdc <__fputwc+0x1e>
 800fd1e:	89ab      	ldrh	r3, [r5, #12]
 800fd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd24:	81ab      	strh	r3, [r5, #12]
 800fd26:	4606      	mov	r6, r0
 800fd28:	4630      	mov	r0, r6
 800fd2a:	b003      	add	sp, #12
 800fd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd30:	462a      	mov	r2, r5
 800fd32:	4640      	mov	r0, r8
 800fd34:	f000 f896 	bl	800fe64 <__swbuf_r>
 800fd38:	1c42      	adds	r2, r0, #1
 800fd3a:	d1e4      	bne.n	800fd06 <__fputwc+0x48>
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	e7f3      	b.n	800fd28 <__fputwc+0x6a>

0800fd40 <_fputwc_r>:
 800fd40:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800fd42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd44:	4614      	mov	r4, r2
 800fd46:	07da      	lsls	r2, r3, #31
 800fd48:	4605      	mov	r5, r0
 800fd4a:	d407      	bmi.n	800fd5c <_fputwc_r+0x1c>
 800fd4c:	89a3      	ldrh	r3, [r4, #12]
 800fd4e:	059b      	lsls	r3, r3, #22
 800fd50:	d404      	bmi.n	800fd5c <_fputwc_r+0x1c>
 800fd52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd54:	9101      	str	r1, [sp, #4]
 800fd56:	f7fa fa27 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800fd5a:	9901      	ldr	r1, [sp, #4]
 800fd5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd60:	0498      	lsls	r0, r3, #18
 800fd62:	d406      	bmi.n	800fd72 <_fputwc_r+0x32>
 800fd64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fd68:	81a3      	strh	r3, [r4, #12]
 800fd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fd70:	6663      	str	r3, [r4, #100]	; 0x64
 800fd72:	4622      	mov	r2, r4
 800fd74:	4628      	mov	r0, r5
 800fd76:	f7ff ffa2 	bl	800fcbe <__fputwc>
 800fd7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd7c:	07da      	lsls	r2, r3, #31
 800fd7e:	4605      	mov	r5, r0
 800fd80:	d405      	bmi.n	800fd8e <_fputwc_r+0x4e>
 800fd82:	89a3      	ldrh	r3, [r4, #12]
 800fd84:	059b      	lsls	r3, r3, #22
 800fd86:	d402      	bmi.n	800fd8e <_fputwc_r+0x4e>
 800fd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd8a:	f7fa fa0e 	bl	800a1aa <__retarget_lock_release_recursive>
 800fd8e:	4628      	mov	r0, r5
 800fd90:	b003      	add	sp, #12
 800fd92:	bd30      	pop	{r4, r5, pc}

0800fd94 <_fstat_r>:
 800fd94:	b538      	push	{r3, r4, r5, lr}
 800fd96:	4d07      	ldr	r5, [pc, #28]	; (800fdb4 <_fstat_r+0x20>)
 800fd98:	2300      	movs	r3, #0
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	4608      	mov	r0, r1
 800fd9e:	4611      	mov	r1, r2
 800fda0:	602b      	str	r3, [r5, #0]
 800fda2:	f7f2 fe30 	bl	8002a06 <_fstat>
 800fda6:	1c43      	adds	r3, r0, #1
 800fda8:	d102      	bne.n	800fdb0 <_fstat_r+0x1c>
 800fdaa:	682b      	ldr	r3, [r5, #0]
 800fdac:	b103      	cbz	r3, 800fdb0 <_fstat_r+0x1c>
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	bd38      	pop	{r3, r4, r5, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20017acc 	.word	0x20017acc

0800fdb8 <_isatty_r>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	4d06      	ldr	r5, [pc, #24]	; (800fdd4 <_isatty_r+0x1c>)
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4608      	mov	r0, r1
 800fdc2:	602b      	str	r3, [r5, #0]
 800fdc4:	f7f2 fe2f 	bl	8002a26 <_isatty>
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	d102      	bne.n	800fdd2 <_isatty_r+0x1a>
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	b103      	cbz	r3, 800fdd2 <_isatty_r+0x1a>
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	20017acc 	.word	0x20017acc

0800fdd8 <_raise_r>:
 800fdd8:	291f      	cmp	r1, #31
 800fdda:	b538      	push	{r3, r4, r5, lr}
 800fddc:	4604      	mov	r4, r0
 800fdde:	460d      	mov	r5, r1
 800fde0:	d904      	bls.n	800fdec <_raise_r+0x14>
 800fde2:	2316      	movs	r3, #22
 800fde4:	6003      	str	r3, [r0, #0]
 800fde6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdea:	bd38      	pop	{r3, r4, r5, pc}
 800fdec:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800fdf0:	b112      	cbz	r2, 800fdf8 <_raise_r+0x20>
 800fdf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdf6:	b94b      	cbnz	r3, 800fe0c <_raise_r+0x34>
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 f831 	bl	800fe60 <_getpid_r>
 800fdfe:	462a      	mov	r2, r5
 800fe00:	4601      	mov	r1, r0
 800fe02:	4620      	mov	r0, r4
 800fe04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe08:	f000 b818 	b.w	800fe3c <_kill_r>
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d00a      	beq.n	800fe26 <_raise_r+0x4e>
 800fe10:	1c59      	adds	r1, r3, #1
 800fe12:	d103      	bne.n	800fe1c <_raise_r+0x44>
 800fe14:	2316      	movs	r3, #22
 800fe16:	6003      	str	r3, [r0, #0]
 800fe18:	2001      	movs	r0, #1
 800fe1a:	e7e6      	b.n	800fdea <_raise_r+0x12>
 800fe1c:	2400      	movs	r4, #0
 800fe1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe22:	4628      	mov	r0, r5
 800fe24:	4798      	blx	r3
 800fe26:	2000      	movs	r0, #0
 800fe28:	e7df      	b.n	800fdea <_raise_r+0x12>
	...

0800fe2c <raise>:
 800fe2c:	4b02      	ldr	r3, [pc, #8]	; (800fe38 <raise+0xc>)
 800fe2e:	4601      	mov	r1, r0
 800fe30:	6818      	ldr	r0, [r3, #0]
 800fe32:	f7ff bfd1 	b.w	800fdd8 <_raise_r>
 800fe36:	bf00      	nop
 800fe38:	2000001c 	.word	0x2000001c

0800fe3c <_kill_r>:
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	4d07      	ldr	r5, [pc, #28]	; (800fe5c <_kill_r+0x20>)
 800fe40:	2300      	movs	r3, #0
 800fe42:	4604      	mov	r4, r0
 800fe44:	4608      	mov	r0, r1
 800fe46:	4611      	mov	r1, r2
 800fe48:	602b      	str	r3, [r5, #0]
 800fe4a:	f7f2 fd7d 	bl	8002948 <_kill>
 800fe4e:	1c43      	adds	r3, r0, #1
 800fe50:	d102      	bne.n	800fe58 <_kill_r+0x1c>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	b103      	cbz	r3, 800fe58 <_kill_r+0x1c>
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	bd38      	pop	{r3, r4, r5, pc}
 800fe5a:	bf00      	nop
 800fe5c:	20017acc 	.word	0x20017acc

0800fe60 <_getpid_r>:
 800fe60:	f7f2 bd6a 	b.w	8002938 <_getpid>

0800fe64 <__swbuf_r>:
 800fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe66:	460e      	mov	r6, r1
 800fe68:	4614      	mov	r4, r2
 800fe6a:	4605      	mov	r5, r0
 800fe6c:	b118      	cbz	r0, 800fe76 <__swbuf_r+0x12>
 800fe6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fe70:	b90b      	cbnz	r3, 800fe76 <__swbuf_r+0x12>
 800fe72:	f7fa f817 	bl	8009ea4 <__sinit>
 800fe76:	69a3      	ldr	r3, [r4, #24]
 800fe78:	60a3      	str	r3, [r4, #8]
 800fe7a:	89a3      	ldrh	r3, [r4, #12]
 800fe7c:	0719      	lsls	r1, r3, #28
 800fe7e:	d529      	bpl.n	800fed4 <__swbuf_r+0x70>
 800fe80:	6923      	ldr	r3, [r4, #16]
 800fe82:	b33b      	cbz	r3, 800fed4 <__swbuf_r+0x70>
 800fe84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe88:	b2f6      	uxtb	r6, r6
 800fe8a:	049a      	lsls	r2, r3, #18
 800fe8c:	4637      	mov	r7, r6
 800fe8e:	d52a      	bpl.n	800fee6 <__swbuf_r+0x82>
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	6920      	ldr	r0, [r4, #16]
 800fe94:	1a18      	subs	r0, r3, r0
 800fe96:	6963      	ldr	r3, [r4, #20]
 800fe98:	4283      	cmp	r3, r0
 800fe9a:	dc04      	bgt.n	800fea6 <__swbuf_r+0x42>
 800fe9c:	4621      	mov	r1, r4
 800fe9e:	4628      	mov	r0, r5
 800fea0:	f7f9 ff82 	bl	8009da8 <_fflush_r>
 800fea4:	b9e0      	cbnz	r0, 800fee0 <__swbuf_r+0x7c>
 800fea6:	68a3      	ldr	r3, [r4, #8]
 800fea8:	3b01      	subs	r3, #1
 800feaa:	60a3      	str	r3, [r4, #8]
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	1c5a      	adds	r2, r3, #1
 800feb0:	6022      	str	r2, [r4, #0]
 800feb2:	701e      	strb	r6, [r3, #0]
 800feb4:	6962      	ldr	r2, [r4, #20]
 800feb6:	1c43      	adds	r3, r0, #1
 800feb8:	429a      	cmp	r2, r3
 800feba:	d004      	beq.n	800fec6 <__swbuf_r+0x62>
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	07db      	lsls	r3, r3, #31
 800fec0:	d506      	bpl.n	800fed0 <__swbuf_r+0x6c>
 800fec2:	2e0a      	cmp	r6, #10
 800fec4:	d104      	bne.n	800fed0 <__swbuf_r+0x6c>
 800fec6:	4621      	mov	r1, r4
 800fec8:	4628      	mov	r0, r5
 800feca:	f7f9 ff6d 	bl	8009da8 <_fflush_r>
 800fece:	b938      	cbnz	r0, 800fee0 <__swbuf_r+0x7c>
 800fed0:	4638      	mov	r0, r7
 800fed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed4:	4621      	mov	r1, r4
 800fed6:	4628      	mov	r0, r5
 800fed8:	f7ff f876 	bl	800efc8 <__swsetup_r>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d0d1      	beq.n	800fe84 <__swbuf_r+0x20>
 800fee0:	f04f 37ff 	mov.w	r7, #4294967295
 800fee4:	e7f4      	b.n	800fed0 <__swbuf_r+0x6c>
 800fee6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800feea:	81a3      	strh	r3, [r4, #12]
 800feec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fef2:	6663      	str	r3, [r4, #100]	; 0x64
 800fef4:	e7cc      	b.n	800fe90 <__swbuf_r+0x2c>
	...

0800fef8 <_wcrtomb_r>:
 800fef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fefa:	4c09      	ldr	r4, [pc, #36]	; (800ff20 <_wcrtomb_r+0x28>)
 800fefc:	b085      	sub	sp, #20
 800fefe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800ff02:	4605      	mov	r5, r0
 800ff04:	461e      	mov	r6, r3
 800ff06:	b909      	cbnz	r1, 800ff0c <_wcrtomb_r+0x14>
 800ff08:	460a      	mov	r2, r1
 800ff0a:	a901      	add	r1, sp, #4
 800ff0c:	47b8      	blx	r7
 800ff0e:	1c43      	adds	r3, r0, #1
 800ff10:	bf01      	itttt	eq
 800ff12:	2300      	moveq	r3, #0
 800ff14:	6033      	streq	r3, [r6, #0]
 800ff16:	238a      	moveq	r3, #138	; 0x8a
 800ff18:	602b      	streq	r3, [r5, #0]
 800ff1a:	b005      	add	sp, #20
 800ff1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20000860 	.word	0x20000860

0800ff24 <trunc>:
 800ff24:	ec51 0b10 	vmov	r0, r1, d0
 800ff28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff2c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ff30:	2b13      	cmp	r3, #19
 800ff32:	b5d0      	push	{r4, r6, r7, lr}
 800ff34:	460c      	mov	r4, r1
 800ff36:	dc10      	bgt.n	800ff5a <trunc+0x36>
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	bfa5      	ittet	ge
 800ff3c:	4a11      	ldrge	r2, [pc, #68]	; (800ff84 <trunc+0x60>)
 800ff3e:	fa42 f303 	asrge.w	r3, r2, r3
 800ff42:	2100      	movlt	r1, #0
 800ff44:	2100      	movge	r1, #0
 800ff46:	bfb9      	ittee	lt
 800ff48:	2000      	movlt	r0, #0
 800ff4a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800ff4e:	2000      	movge	r0, #0
 800ff50:	ea24 0103 	bicge.w	r1, r4, r3
 800ff54:	ec41 0b10 	vmov	d0, r0, r1
 800ff58:	bdd0      	pop	{r4, r6, r7, pc}
 800ff5a:	2b33      	cmp	r3, #51	; 0x33
 800ff5c:	dd08      	ble.n	800ff70 <trunc+0x4c>
 800ff5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff62:	d1f7      	bne.n	800ff54 <trunc+0x30>
 800ff64:	ee10 2a10 	vmov	r2, s0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	f7f0 f9a7 	bl	80002bc <__adddf3>
 800ff6e:	e7f1      	b.n	800ff54 <trunc+0x30>
 800ff70:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ff74:	f04f 33ff 	mov.w	r3, #4294967295
 800ff78:	fa23 f202 	lsr.w	r2, r3, r2
 800ff7c:	ea20 0602 	bic.w	r6, r0, r2
 800ff80:	4630      	mov	r0, r6
 800ff82:	e7e7      	b.n	800ff54 <trunc+0x30>
 800ff84:	000fffff 	.word	0x000fffff

0800ff88 <log>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	ed2d 8b02 	vpush	{d8}
 800ff8e:	ec55 4b10 	vmov	r4, r5, d0
 800ff92:	f000 f839 	bl	8010008 <__ieee754_log>
 800ff96:	4622      	mov	r2, r4
 800ff98:	462b      	mov	r3, r5
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	eeb0 8a40 	vmov.f32	s16, s0
 800ffa2:	eef0 8a60 	vmov.f32	s17, s1
 800ffa6:	f7f0 fdd9 	bl	8000b5c <__aeabi_dcmpun>
 800ffaa:	b998      	cbnz	r0, 800ffd4 <log+0x4c>
 800ffac:	2200      	movs	r2, #0
 800ffae:	2300      	movs	r3, #0
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	f7f0 fdc8 	bl	8000b48 <__aeabi_dcmpgt>
 800ffb8:	b960      	cbnz	r0, 800ffd4 <log+0x4c>
 800ffba:	2200      	movs	r2, #0
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	f7f0 fd99 	bl	8000af8 <__aeabi_dcmpeq>
 800ffc6:	b160      	cbz	r0, 800ffe2 <log+0x5a>
 800ffc8:	f7f9 fe5a 	bl	8009c80 <__errno>
 800ffcc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800fff8 <log+0x70>
 800ffd0:	2322      	movs	r3, #34	; 0x22
 800ffd2:	6003      	str	r3, [r0, #0]
 800ffd4:	eeb0 0a48 	vmov.f32	s0, s16
 800ffd8:	eef0 0a68 	vmov.f32	s1, s17
 800ffdc:	ecbd 8b02 	vpop	{d8}
 800ffe0:	bd38      	pop	{r3, r4, r5, pc}
 800ffe2:	f7f9 fe4d 	bl	8009c80 <__errno>
 800ffe6:	ecbd 8b02 	vpop	{d8}
 800ffea:	2321      	movs	r3, #33	; 0x21
 800ffec:	6003      	str	r3, [r0, #0]
 800ffee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fff2:	4803      	ldr	r0, [pc, #12]	; (8010000 <log+0x78>)
 800fff4:	f7fe bf44 	b.w	800ee80 <nan>
 800fff8:	00000000 	.word	0x00000000
 800fffc:	fff00000 	.word	0xfff00000
 8010000:	08010b27 	.word	0x08010b27
 8010004:	00000000 	.word	0x00000000

08010008 <__ieee754_log>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	ec51 0b10 	vmov	r0, r1, d0
 8010010:	ed2d 8b04 	vpush	{d8-d9}
 8010014:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010018:	b083      	sub	sp, #12
 801001a:	460d      	mov	r5, r1
 801001c:	da29      	bge.n	8010072 <__ieee754_log+0x6a>
 801001e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010022:	4303      	orrs	r3, r0
 8010024:	ee10 2a10 	vmov	r2, s0
 8010028:	d10c      	bne.n	8010044 <__ieee754_log+0x3c>
 801002a:	49cf      	ldr	r1, [pc, #828]	; (8010368 <__ieee754_log+0x360>)
 801002c:	2200      	movs	r2, #0
 801002e:	2300      	movs	r3, #0
 8010030:	2000      	movs	r0, #0
 8010032:	f7f0 fc23 	bl	800087c <__aeabi_ddiv>
 8010036:	ec41 0b10 	vmov	d0, r0, r1
 801003a:	b003      	add	sp, #12
 801003c:	ecbd 8b04 	vpop	{d8-d9}
 8010040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010044:	2900      	cmp	r1, #0
 8010046:	da05      	bge.n	8010054 <__ieee754_log+0x4c>
 8010048:	460b      	mov	r3, r1
 801004a:	f7f0 f935 	bl	80002b8 <__aeabi_dsub>
 801004e:	2200      	movs	r2, #0
 8010050:	2300      	movs	r3, #0
 8010052:	e7ee      	b.n	8010032 <__ieee754_log+0x2a>
 8010054:	4bc5      	ldr	r3, [pc, #788]	; (801036c <__ieee754_log+0x364>)
 8010056:	2200      	movs	r2, #0
 8010058:	f7f0 fae6 	bl	8000628 <__aeabi_dmul>
 801005c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010060:	460d      	mov	r5, r1
 8010062:	4ac3      	ldr	r2, [pc, #780]	; (8010370 <__ieee754_log+0x368>)
 8010064:	4295      	cmp	r5, r2
 8010066:	dd06      	ble.n	8010076 <__ieee754_log+0x6e>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	f7f0 f926 	bl	80002bc <__adddf3>
 8010070:	e7e1      	b.n	8010036 <__ieee754_log+0x2e>
 8010072:	2300      	movs	r3, #0
 8010074:	e7f5      	b.n	8010062 <__ieee754_log+0x5a>
 8010076:	152c      	asrs	r4, r5, #20
 8010078:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801007c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010080:	441c      	add	r4, r3
 8010082:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010086:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801008a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801008e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010092:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010096:	ea42 0105 	orr.w	r1, r2, r5
 801009a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801009e:	2200      	movs	r2, #0
 80100a0:	4bb4      	ldr	r3, [pc, #720]	; (8010374 <__ieee754_log+0x36c>)
 80100a2:	f7f0 f909 	bl	80002b8 <__aeabi_dsub>
 80100a6:	1cab      	adds	r3, r5, #2
 80100a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	4682      	mov	sl, r0
 80100b0:	468b      	mov	fp, r1
 80100b2:	f04f 0200 	mov.w	r2, #0
 80100b6:	dc53      	bgt.n	8010160 <__ieee754_log+0x158>
 80100b8:	2300      	movs	r3, #0
 80100ba:	f7f0 fd1d 	bl	8000af8 <__aeabi_dcmpeq>
 80100be:	b1d0      	cbz	r0, 80100f6 <__ieee754_log+0xee>
 80100c0:	2c00      	cmp	r4, #0
 80100c2:	f000 8122 	beq.w	801030a <__ieee754_log+0x302>
 80100c6:	4620      	mov	r0, r4
 80100c8:	f7f0 fa44 	bl	8000554 <__aeabi_i2d>
 80100cc:	a390      	add	r3, pc, #576	; (adr r3, 8010310 <__ieee754_log+0x308>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	4606      	mov	r6, r0
 80100d4:	460f      	mov	r7, r1
 80100d6:	f7f0 faa7 	bl	8000628 <__aeabi_dmul>
 80100da:	a38f      	add	r3, pc, #572	; (adr r3, 8010318 <__ieee754_log+0x310>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
 80100e4:	4630      	mov	r0, r6
 80100e6:	4639      	mov	r1, r7
 80100e8:	f7f0 fa9e 	bl	8000628 <__aeabi_dmul>
 80100ec:	4602      	mov	r2, r0
 80100ee:	460b      	mov	r3, r1
 80100f0:	4620      	mov	r0, r4
 80100f2:	4629      	mov	r1, r5
 80100f4:	e7ba      	b.n	801006c <__ieee754_log+0x64>
 80100f6:	a38a      	add	r3, pc, #552	; (adr r3, 8010320 <__ieee754_log+0x318>)
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	4650      	mov	r0, sl
 80100fe:	4659      	mov	r1, fp
 8010100:	f7f0 fa92 	bl	8000628 <__aeabi_dmul>
 8010104:	4602      	mov	r2, r0
 8010106:	460b      	mov	r3, r1
 8010108:	2000      	movs	r0, #0
 801010a:	499b      	ldr	r1, [pc, #620]	; (8010378 <__ieee754_log+0x370>)
 801010c:	f7f0 f8d4 	bl	80002b8 <__aeabi_dsub>
 8010110:	4652      	mov	r2, sl
 8010112:	4606      	mov	r6, r0
 8010114:	460f      	mov	r7, r1
 8010116:	465b      	mov	r3, fp
 8010118:	4650      	mov	r0, sl
 801011a:	4659      	mov	r1, fp
 801011c:	f7f0 fa84 	bl	8000628 <__aeabi_dmul>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	4630      	mov	r0, r6
 8010126:	4639      	mov	r1, r7
 8010128:	f7f0 fa7e 	bl	8000628 <__aeabi_dmul>
 801012c:	4606      	mov	r6, r0
 801012e:	460f      	mov	r7, r1
 8010130:	b914      	cbnz	r4, 8010138 <__ieee754_log+0x130>
 8010132:	4632      	mov	r2, r6
 8010134:	463b      	mov	r3, r7
 8010136:	e0a2      	b.n	801027e <__ieee754_log+0x276>
 8010138:	4620      	mov	r0, r4
 801013a:	f7f0 fa0b 	bl	8000554 <__aeabi_i2d>
 801013e:	a374      	add	r3, pc, #464	; (adr r3, 8010310 <__ieee754_log+0x308>)
 8010140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010144:	4680      	mov	r8, r0
 8010146:	4689      	mov	r9, r1
 8010148:	f7f0 fa6e 	bl	8000628 <__aeabi_dmul>
 801014c:	a372      	add	r3, pc, #456	; (adr r3, 8010318 <__ieee754_log+0x310>)
 801014e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010152:	4604      	mov	r4, r0
 8010154:	460d      	mov	r5, r1
 8010156:	4640      	mov	r0, r8
 8010158:	4649      	mov	r1, r9
 801015a:	f7f0 fa65 	bl	8000628 <__aeabi_dmul>
 801015e:	e0a7      	b.n	80102b0 <__ieee754_log+0x2a8>
 8010160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010164:	f7f0 f8aa 	bl	80002bc <__adddf3>
 8010168:	4602      	mov	r2, r0
 801016a:	460b      	mov	r3, r1
 801016c:	4650      	mov	r0, sl
 801016e:	4659      	mov	r1, fp
 8010170:	f7f0 fb84 	bl	800087c <__aeabi_ddiv>
 8010174:	ec41 0b18 	vmov	d8, r0, r1
 8010178:	4620      	mov	r0, r4
 801017a:	f7f0 f9eb 	bl	8000554 <__aeabi_i2d>
 801017e:	ec53 2b18 	vmov	r2, r3, d8
 8010182:	ec41 0b19 	vmov	d9, r0, r1
 8010186:	ec51 0b18 	vmov	r0, r1, d8
 801018a:	f7f0 fa4d 	bl	8000628 <__aeabi_dmul>
 801018e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010192:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010196:	9301      	str	r3, [sp, #4]
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4680      	mov	r8, r0
 801019e:	4689      	mov	r9, r1
 80101a0:	f7f0 fa42 	bl	8000628 <__aeabi_dmul>
 80101a4:	a360      	add	r3, pc, #384	; (adr r3, 8010328 <__ieee754_log+0x320>)
 80101a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101aa:	4606      	mov	r6, r0
 80101ac:	460f      	mov	r7, r1
 80101ae:	f7f0 fa3b 	bl	8000628 <__aeabi_dmul>
 80101b2:	a35f      	add	r3, pc, #380	; (adr r3, 8010330 <__ieee754_log+0x328>)
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f7f0 f880 	bl	80002bc <__adddf3>
 80101bc:	4632      	mov	r2, r6
 80101be:	463b      	mov	r3, r7
 80101c0:	f7f0 fa32 	bl	8000628 <__aeabi_dmul>
 80101c4:	a35c      	add	r3, pc, #368	; (adr r3, 8010338 <__ieee754_log+0x330>)
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	f7f0 f877 	bl	80002bc <__adddf3>
 80101ce:	4632      	mov	r2, r6
 80101d0:	463b      	mov	r3, r7
 80101d2:	f7f0 fa29 	bl	8000628 <__aeabi_dmul>
 80101d6:	a35a      	add	r3, pc, #360	; (adr r3, 8010340 <__ieee754_log+0x338>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	f7f0 f86e 	bl	80002bc <__adddf3>
 80101e0:	4642      	mov	r2, r8
 80101e2:	464b      	mov	r3, r9
 80101e4:	f7f0 fa20 	bl	8000628 <__aeabi_dmul>
 80101e8:	a357      	add	r3, pc, #348	; (adr r3, 8010348 <__ieee754_log+0x340>)
 80101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ee:	4680      	mov	r8, r0
 80101f0:	4689      	mov	r9, r1
 80101f2:	4630      	mov	r0, r6
 80101f4:	4639      	mov	r1, r7
 80101f6:	f7f0 fa17 	bl	8000628 <__aeabi_dmul>
 80101fa:	a355      	add	r3, pc, #340	; (adr r3, 8010350 <__ieee754_log+0x348>)
 80101fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010200:	f7f0 f85c 	bl	80002bc <__adddf3>
 8010204:	4632      	mov	r2, r6
 8010206:	463b      	mov	r3, r7
 8010208:	f7f0 fa0e 	bl	8000628 <__aeabi_dmul>
 801020c:	a352      	add	r3, pc, #328	; (adr r3, 8010358 <__ieee754_log+0x350>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	f7f0 f853 	bl	80002bc <__adddf3>
 8010216:	4632      	mov	r2, r6
 8010218:	463b      	mov	r3, r7
 801021a:	f7f0 fa05 	bl	8000628 <__aeabi_dmul>
 801021e:	460b      	mov	r3, r1
 8010220:	4602      	mov	r2, r0
 8010222:	4649      	mov	r1, r9
 8010224:	4640      	mov	r0, r8
 8010226:	f7f0 f849 	bl	80002bc <__adddf3>
 801022a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	3551      	adds	r5, #81	; 0x51
 8010232:	431d      	orrs	r5, r3
 8010234:	2d00      	cmp	r5, #0
 8010236:	4680      	mov	r8, r0
 8010238:	4689      	mov	r9, r1
 801023a:	dd48      	ble.n	80102ce <__ieee754_log+0x2c6>
 801023c:	4b4e      	ldr	r3, [pc, #312]	; (8010378 <__ieee754_log+0x370>)
 801023e:	2200      	movs	r2, #0
 8010240:	4650      	mov	r0, sl
 8010242:	4659      	mov	r1, fp
 8010244:	f7f0 f9f0 	bl	8000628 <__aeabi_dmul>
 8010248:	4652      	mov	r2, sl
 801024a:	465b      	mov	r3, fp
 801024c:	f7f0 f9ec 	bl	8000628 <__aeabi_dmul>
 8010250:	4602      	mov	r2, r0
 8010252:	460b      	mov	r3, r1
 8010254:	4606      	mov	r6, r0
 8010256:	460f      	mov	r7, r1
 8010258:	4640      	mov	r0, r8
 801025a:	4649      	mov	r1, r9
 801025c:	f7f0 f82e 	bl	80002bc <__adddf3>
 8010260:	ec53 2b18 	vmov	r2, r3, d8
 8010264:	f7f0 f9e0 	bl	8000628 <__aeabi_dmul>
 8010268:	4680      	mov	r8, r0
 801026a:	4689      	mov	r9, r1
 801026c:	b964      	cbnz	r4, 8010288 <__ieee754_log+0x280>
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4630      	mov	r0, r6
 8010274:	4639      	mov	r1, r7
 8010276:	f7f0 f81f 	bl	80002b8 <__aeabi_dsub>
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	4650      	mov	r0, sl
 8010280:	4659      	mov	r1, fp
 8010282:	f7f0 f819 	bl	80002b8 <__aeabi_dsub>
 8010286:	e6d6      	b.n	8010036 <__ieee754_log+0x2e>
 8010288:	a321      	add	r3, pc, #132	; (adr r3, 8010310 <__ieee754_log+0x308>)
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	ec51 0b19 	vmov	r0, r1, d9
 8010292:	f7f0 f9c9 	bl	8000628 <__aeabi_dmul>
 8010296:	a320      	add	r3, pc, #128	; (adr r3, 8010318 <__ieee754_log+0x310>)
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	4604      	mov	r4, r0
 801029e:	460d      	mov	r5, r1
 80102a0:	ec51 0b19 	vmov	r0, r1, d9
 80102a4:	f7f0 f9c0 	bl	8000628 <__aeabi_dmul>
 80102a8:	4642      	mov	r2, r8
 80102aa:	464b      	mov	r3, r9
 80102ac:	f7f0 f806 	bl	80002bc <__adddf3>
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4630      	mov	r0, r6
 80102b6:	4639      	mov	r1, r7
 80102b8:	f7ef fffe 	bl	80002b8 <__aeabi_dsub>
 80102bc:	4652      	mov	r2, sl
 80102be:	465b      	mov	r3, fp
 80102c0:	f7ef fffa 	bl	80002b8 <__aeabi_dsub>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4620      	mov	r0, r4
 80102ca:	4629      	mov	r1, r5
 80102cc:	e7d9      	b.n	8010282 <__ieee754_log+0x27a>
 80102ce:	4602      	mov	r2, r0
 80102d0:	460b      	mov	r3, r1
 80102d2:	4650      	mov	r0, sl
 80102d4:	4659      	mov	r1, fp
 80102d6:	f7ef ffef 	bl	80002b8 <__aeabi_dsub>
 80102da:	ec53 2b18 	vmov	r2, r3, d8
 80102de:	f7f0 f9a3 	bl	8000628 <__aeabi_dmul>
 80102e2:	4606      	mov	r6, r0
 80102e4:	460f      	mov	r7, r1
 80102e6:	2c00      	cmp	r4, #0
 80102e8:	f43f af23 	beq.w	8010132 <__ieee754_log+0x12a>
 80102ec:	a308      	add	r3, pc, #32	; (adr r3, 8010310 <__ieee754_log+0x308>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	ec51 0b19 	vmov	r0, r1, d9
 80102f6:	f7f0 f997 	bl	8000628 <__aeabi_dmul>
 80102fa:	a307      	add	r3, pc, #28	; (adr r3, 8010318 <__ieee754_log+0x310>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	4604      	mov	r4, r0
 8010302:	460d      	mov	r5, r1
 8010304:	ec51 0b19 	vmov	r0, r1, d9
 8010308:	e727      	b.n	801015a <__ieee754_log+0x152>
 801030a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010360 <__ieee754_log+0x358>
 801030e:	e694      	b.n	801003a <__ieee754_log+0x32>
 8010310:	fee00000 	.word	0xfee00000
 8010314:	3fe62e42 	.word	0x3fe62e42
 8010318:	35793c76 	.word	0x35793c76
 801031c:	3dea39ef 	.word	0x3dea39ef
 8010320:	55555555 	.word	0x55555555
 8010324:	3fd55555 	.word	0x3fd55555
 8010328:	df3e5244 	.word	0xdf3e5244
 801032c:	3fc2f112 	.word	0x3fc2f112
 8010330:	96cb03de 	.word	0x96cb03de
 8010334:	3fc74664 	.word	0x3fc74664
 8010338:	94229359 	.word	0x94229359
 801033c:	3fd24924 	.word	0x3fd24924
 8010340:	55555593 	.word	0x55555593
 8010344:	3fe55555 	.word	0x3fe55555
 8010348:	d078c69f 	.word	0xd078c69f
 801034c:	3fc39a09 	.word	0x3fc39a09
 8010350:	1d8e78af 	.word	0x1d8e78af
 8010354:	3fcc71c5 	.word	0x3fcc71c5
 8010358:	9997fa04 	.word	0x9997fa04
 801035c:	3fd99999 	.word	0x3fd99999
	...
 8010368:	c3500000 	.word	0xc3500000
 801036c:	43500000 	.word	0x43500000
 8010370:	7fefffff 	.word	0x7fefffff
 8010374:	3ff00000 	.word	0x3ff00000
 8010378:	3fe00000 	.word	0x3fe00000

0801037c <_init>:
 801037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037e:	bf00      	nop
 8010380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010382:	bc08      	pop	{r3}
 8010384:	469e      	mov	lr, r3
 8010386:	4770      	bx	lr

08010388 <_fini>:
 8010388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038a:	bf00      	nop
 801038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801038e:	bc08      	pop	{r3}
 8010390:	469e      	mov	lr, r3
 8010392:	4770      	bx	lr
